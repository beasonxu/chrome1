// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/feed/core/proto/v2/wire/feed_request.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::Request* Arena::CreateMaybeMessage<::feedwire::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum Request_RequestVersion : int {
  Request_RequestVersion_UNKNOWN_REQUEST_VERSION = 0,
  Request_RequestVersion_FEED_QUERY = 1
};
bool Request_RequestVersion_IsValid(int value);
constexpr Request_RequestVersion Request_RequestVersion_RequestVersion_MIN = Request_RequestVersion_UNKNOWN_REQUEST_VERSION;
constexpr Request_RequestVersion Request_RequestVersion_RequestVersion_MAX = Request_RequestVersion_FEED_QUERY;
constexpr int Request_RequestVersion_RequestVersion_ARRAYSIZE = Request_RequestVersion_RequestVersion_MAX + 1;

const std::string& Request_RequestVersion_Name(Request_RequestVersion value);
template<typename T>
inline const std::string& Request_RequestVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestVersion_Name.");
  return Request_RequestVersion_Name(static_cast<Request_RequestVersion>(enum_t_value));
}
bool Request_RequestVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Request_RequestVersion* value);
// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Request_RequestVersion RequestVersion;
  static constexpr RequestVersion UNKNOWN_REQUEST_VERSION =
    Request_RequestVersion_UNKNOWN_REQUEST_VERSION;
  static constexpr RequestVersion FEED_QUERY =
    Request_RequestVersion_FEED_QUERY;
  static inline bool RequestVersion_IsValid(int value) {
    return Request_RequestVersion_IsValid(value);
  }
  static constexpr RequestVersion RequestVersion_MIN =
    Request_RequestVersion_RequestVersion_MIN;
  static constexpr RequestVersion RequestVersion_MAX =
    Request_RequestVersion_RequestVersion_MAX;
  static constexpr int RequestVersion_ARRAYSIZE =
    Request_RequestVersion_RequestVersion_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RequestVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestVersion_Name.");
    return Request_RequestVersion_Name(enum_t_value);
  }
  static inline bool RequestVersion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestVersion* value) {
    return Request_RequestVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeedRequestFieldNumber = 1000,
    kRequestVersionFieldNumber = 1,
  };
  // optional .feedwire.FeedRequest feed_request = 1000;
  bool has_feed_request() const;
  private:
  bool _internal_has_feed_request() const;
  public:
  void clear_feed_request();
  const ::feedwire::FeedRequest& feed_request() const;
  PROTOBUF_NODISCARD ::feedwire::FeedRequest* release_feed_request();
  ::feedwire::FeedRequest* mutable_feed_request();
  void set_allocated_feed_request(::feedwire::FeedRequest* feed_request);
  private:
  const ::feedwire::FeedRequest& _internal_feed_request() const;
  ::feedwire::FeedRequest* _internal_mutable_feed_request();
  public:
  void unsafe_arena_set_allocated_feed_request(
      ::feedwire::FeedRequest* feed_request);
  ::feedwire::FeedRequest* unsafe_arena_release_feed_request();

  // optional .feedwire.Request.RequestVersion request_version = 1;
  bool has_request_version() const;
  private:
  bool _internal_has_request_version() const;
  public:
  void clear_request_version();
  ::feedwire::Request_RequestVersion request_version() const;
  void set_request_version(::feedwire::Request_RequestVersion value);
  private:
  ::feedwire::Request_RequestVersion _internal_request_version() const;
  void _internal_set_request_version(::feedwire::Request_RequestVersion value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::feedwire::FeedRequest* feed_request_;
  int request_version_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// optional .feedwire.Request.RequestVersion request_version = 1;
inline bool Request::_internal_has_request_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_request_version() const {
  return _internal_has_request_version();
}
inline void Request::clear_request_version() {
  request_version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::feedwire::Request_RequestVersion Request::_internal_request_version() const {
  return static_cast< ::feedwire::Request_RequestVersion >(request_version_);
}
inline ::feedwire::Request_RequestVersion Request::request_version() const {
  // @@protoc_insertion_point(field_get:feedwire.Request.request_version)
  return _internal_request_version();
}
inline void Request::_internal_set_request_version(::feedwire::Request_RequestVersion value) {
  assert(::feedwire::Request_RequestVersion_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  request_version_ = value;
}
inline void Request::set_request_version(::feedwire::Request_RequestVersion value) {
  _internal_set_request_version(value);
  // @@protoc_insertion_point(field_set:feedwire.Request.request_version)
}

// optional .feedwire.FeedRequest feed_request = 1000;
inline bool Request::_internal_has_feed_request() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || feed_request_ != nullptr);
  return value;
}
inline bool Request::has_feed_request() const {
  return _internal_has_feed_request();
}
inline const ::feedwire::FeedRequest& Request::_internal_feed_request() const {
  const ::feedwire::FeedRequest* p = feed_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::FeedRequest&>(
      ::feedwire::_FeedRequest_default_instance_);
}
inline const ::feedwire::FeedRequest& Request::feed_request() const {
  // @@protoc_insertion_point(field_get:feedwire.Request.feed_request)
  return _internal_feed_request();
}
inline void Request::unsafe_arena_set_allocated_feed_request(
    ::feedwire::FeedRequest* feed_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_request_);
  }
  feed_request_ = feed_request;
  if (feed_request) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.Request.feed_request)
}
inline ::feedwire::FeedRequest* Request::release_feed_request() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::FeedRequest* temp = feed_request_;
  feed_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::FeedRequest* Request::unsafe_arena_release_feed_request() {
  // @@protoc_insertion_point(field_release:feedwire.Request.feed_request)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::FeedRequest* temp = feed_request_;
  feed_request_ = nullptr;
  return temp;
}
inline ::feedwire::FeedRequest* Request::_internal_mutable_feed_request() {
  _has_bits_[0] |= 0x00000001u;
  if (feed_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::FeedRequest>(GetArenaForAllocation());
    feed_request_ = p;
  }
  return feed_request_;
}
inline ::feedwire::FeedRequest* Request::mutable_feed_request() {
  ::feedwire::FeedRequest* _msg = _internal_mutable_feed_request();
  // @@protoc_insertion_point(field_mutable:feedwire.Request.feed_request)
  return _msg;
}
inline void Request::set_allocated_feed_request(::feedwire::FeedRequest* feed_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_request_);
  }
  if (feed_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_request));
    if (message_arena != submessage_arena) {
      feed_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  feed_request_ = feed_request;
  // @@protoc_insertion_point(field_set_allocated:feedwire.Request.feed_request)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::Request_RequestVersion> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_2eproto
