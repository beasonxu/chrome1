// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/next_page_token.proto

#include "components/feed/core/proto/v2/wire/next_page_token.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR NextPageToken::NextPageToken(
    ::_pbi::ConstantInitialized)
  : next_page_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , metadata_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , token_handling_(nullptr){}
struct NextPageTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextPageTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextPageTokenDefaultTypeInternal() {}
  union {
    NextPageToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextPageTokenDefaultTypeInternal _NextPageToken_default_instance_;
PROTOBUF_CONSTEXPR TokenHandling::TokenHandling(
    ::_pbi::ConstantInitialized)
  : load_strategy_(0)
{}
struct TokenHandlingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenHandlingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenHandlingDefaultTypeInternal() {}
  union {
    TokenHandling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenHandlingDefaultTypeInternal _TokenHandling_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool TokenHandling_LoadStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TokenHandling_LoadStrategy_strings[3] = {};

static const char TokenHandling_LoadStrategy_names[] =
  "EAGER"
  "LAZY"
  "LOAD_STRATEGY_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TokenHandling_LoadStrategy_entries[] = {
  { {TokenHandling_LoadStrategy_names + 0, 5}, 1 },
  { {TokenHandling_LoadStrategy_names + 5, 4}, 2 },
  { {TokenHandling_LoadStrategy_names + 9, 21}, 0 },
};

static const int TokenHandling_LoadStrategy_entries_by_number[] = {
  2, // 0 -> LOAD_STRATEGY_UNKNOWN
  0, // 1 -> EAGER
  1, // 2 -> LAZY
};

const std::string& TokenHandling_LoadStrategy_Name(
    TokenHandling_LoadStrategy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TokenHandling_LoadStrategy_entries,
          TokenHandling_LoadStrategy_entries_by_number,
          3, TokenHandling_LoadStrategy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TokenHandling_LoadStrategy_entries,
      TokenHandling_LoadStrategy_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TokenHandling_LoadStrategy_strings[idx].get();
}
bool TokenHandling_LoadStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TokenHandling_LoadStrategy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TokenHandling_LoadStrategy_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TokenHandling_LoadStrategy>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TokenHandling_LoadStrategy TokenHandling::LOAD_STRATEGY_UNKNOWN;
constexpr TokenHandling_LoadStrategy TokenHandling::EAGER;
constexpr TokenHandling_LoadStrategy TokenHandling::LAZY;
constexpr TokenHandling_LoadStrategy TokenHandling::LoadStrategy_MIN;
constexpr TokenHandling_LoadStrategy TokenHandling::LoadStrategy_MAX;
constexpr int TokenHandling::LoadStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class NextPageToken::_Internal {
 public:
  using HasBits = decltype(std::declval<NextPageToken>()._has_bits_);
  static void set_has_next_page_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::feedwire::TokenHandling& token_handling(const NextPageToken* msg);
  static void set_has_token_handling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::feedwire::TokenHandling&
NextPageToken::_Internal::token_handling(const NextPageToken* msg) {
  return *msg->token_handling_;
}
NextPageToken::NextPageToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.NextPageToken)
}
NextPageToken::NextPageToken(const NextPageToken& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_next_page_token()) {
    next_page_token_.Set(from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata()) {
    metadata_.Set(from._internal_metadata(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_token_handling()) {
    token_handling_ = new ::feedwire::TokenHandling(*from.token_handling_);
  } else {
    token_handling_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.NextPageToken)
}

inline void NextPageToken::SharedCtor() {
next_page_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metadata_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_handling_ = nullptr;
}

NextPageToken::~NextPageToken() {
  // @@protoc_insertion_point(destructor:feedwire.NextPageToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextPageToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.Destroy();
  metadata_.Destroy();
  if (this != internal_default_instance()) delete token_handling_;
}

void NextPageToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextPageToken::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.NextPageToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      next_page_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(token_handling_ != nullptr);
      token_handling_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NextPageToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes next_page_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.TokenHandling token_handling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_handling(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextPageToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.NextPageToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes next_page_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_next_page_token(), target);
  }

  // optional .feedwire.TokenHandling token_handling = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::token_handling(this),
        _Internal::token_handling(this).GetCachedSize(), target, stream);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.NextPageToken)
  return target;
}

size_t NextPageToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.NextPageToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes next_page_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_next_page_token());
    }

    // optional bytes metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional .feedwire.TokenHandling token_handling = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *token_handling_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextPageToken::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NextPageToken*>(
      &from));
}

void NextPageToken::MergeFrom(const NextPageToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.NextPageToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_next_page_token(from._internal_next_page_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_token_handling()->::feedwire::TokenHandling::MergeFrom(from._internal_token_handling());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NextPageToken::CopyFrom(const NextPageToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.NextPageToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextPageToken::IsInitialized() const {
  return true;
}

void NextPageToken::InternalSwap(NextPageToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &metadata_, lhs_arena,
      &other->metadata_, rhs_arena
  );
  swap(token_handling_, other->token_handling_);
}

std::string NextPageToken::GetTypeName() const {
  return "feedwire.NextPageToken";
}


// ===================================================================

class TokenHandling::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenHandling>()._has_bits_);
  static void set_has_load_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TokenHandling::TokenHandling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.TokenHandling)
}
TokenHandling::TokenHandling(const TokenHandling& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  load_strategy_ = from.load_strategy_;
  // @@protoc_insertion_point(copy_constructor:feedwire.TokenHandling)
}

inline void TokenHandling::SharedCtor() {
load_strategy_ = 0;
}

TokenHandling::~TokenHandling() {
  // @@protoc_insertion_point(destructor:feedwire.TokenHandling)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenHandling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TokenHandling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenHandling::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.TokenHandling)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_strategy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TokenHandling::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.TokenHandling.LoadStrategy load_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::TokenHandling_LoadStrategy_IsValid(val))) {
            _internal_set_load_strategy(static_cast<::feedwire::TokenHandling_LoadStrategy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenHandling::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.TokenHandling)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.TokenHandling.LoadStrategy load_strategy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_load_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.TokenHandling)
  return target;
}

size_t TokenHandling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.TokenHandling)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .feedwire.TokenHandling.LoadStrategy load_strategy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_load_strategy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenHandling::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TokenHandling*>(
      &from));
}

void TokenHandling::MergeFrom(const TokenHandling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.TokenHandling)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_load_strategy()) {
    _internal_set_load_strategy(from._internal_load_strategy());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TokenHandling::CopyFrom(const TokenHandling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.TokenHandling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenHandling::IsInitialized() const {
  return true;
}

void TokenHandling::InternalSwap(TokenHandling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(load_strategy_, other->load_strategy_);
}

std::string TokenHandling::GetTypeName() const {
  return "feedwire.TokenHandling";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::NextPageToken*
Arena::CreateMaybeMessage< ::feedwire::NextPageToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::NextPageToken >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::TokenHandling*
Arena::CreateMaybeMessage< ::feedwire::TokenHandling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::TokenHandling >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
