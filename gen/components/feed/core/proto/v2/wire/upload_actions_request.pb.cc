// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/upload_actions_request.proto

#include "components/feed/core/proto/v2/wire/upload_actions_request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR UploadActionsRequest::UploadActionsRequest(
    ::_pbi::ConstantInitialized)
  : feed_actions_()
  , consistency_token_(nullptr)
  , action_diagnostic_info_(nullptr)
  , client_info_(nullptr){}
struct UploadActionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadActionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadActionsRequestDefaultTypeInternal() {}
  union {
    UploadActionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadActionsRequestDefaultTypeInternal _UploadActionsRequest_default_instance_;
}  // namespace feedwire
namespace feedwire {

// ===================================================================

class UploadActionsRequest::_Internal {
 public:
  static const ::feedwire::ConsistencyToken& consistency_token(const UploadActionsRequest* msg);
  static const ::feedwire::ActionDiagnosticInfo& action_diagnostic_info(const UploadActionsRequest* msg);
  static const ::feedwire::ClientInfo& client_info(const UploadActionsRequest* msg);
};

const ::feedwire::ConsistencyToken&
UploadActionsRequest::_Internal::consistency_token(const UploadActionsRequest* msg) {
  return *msg->consistency_token_;
}
const ::feedwire::ActionDiagnosticInfo&
UploadActionsRequest::_Internal::action_diagnostic_info(const UploadActionsRequest* msg) {
  return *msg->action_diagnostic_info_;
}
const ::feedwire::ClientInfo&
UploadActionsRequest::_Internal::client_info(const UploadActionsRequest* msg) {
  return *msg->client_info_;
}
void UploadActionsRequest::clear_feed_actions() {
  feed_actions_.Clear();
}
void UploadActionsRequest::clear_consistency_token() {
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
}
void UploadActionsRequest::clear_action_diagnostic_info() {
  if (GetArenaForAllocation() == nullptr && action_diagnostic_info_ != nullptr) {
    delete action_diagnostic_info_;
  }
  action_diagnostic_info_ = nullptr;
}
void UploadActionsRequest::clear_client_info() {
  if (GetArenaForAllocation() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
UploadActionsRequest::UploadActionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  feed_actions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.UploadActionsRequest)
}
UploadActionsRequest::UploadActionsRequest(const UploadActionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      feed_actions_(from.feed_actions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_consistency_token()) {
    consistency_token_ = new ::feedwire::ConsistencyToken(*from.consistency_token_);
  } else {
    consistency_token_ = nullptr;
  }
  if (from._internal_has_action_diagnostic_info()) {
    action_diagnostic_info_ = new ::feedwire::ActionDiagnosticInfo(*from.action_diagnostic_info_);
  } else {
    action_diagnostic_info_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::feedwire::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.UploadActionsRequest)
}

inline void UploadActionsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&consistency_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_info_) -
    reinterpret_cast<char*>(&consistency_token_)) + sizeof(client_info_));
}

UploadActionsRequest::~UploadActionsRequest() {
  // @@protoc_insertion_point(destructor:feedwire.UploadActionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadActionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete consistency_token_;
  if (this != internal_default_instance()) delete action_diagnostic_info_;
  if (this != internal_default_instance()) delete client_info_;
}

void UploadActionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadActionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.UploadActionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feed_actions_.Clear();
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
  if (GetArenaForAllocation() == nullptr && action_diagnostic_info_ != nullptr) {
    delete action_diagnostic_info_;
  }
  action_diagnostic_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* UploadActionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .feedwire.FeedAction feed_actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feed_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .feedwire.ConsistencyToken consistency_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.ActionDiagnosticInfo action_diagnostic_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_diagnostic_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.ClientInfo client_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadActionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.UploadActionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .feedwire.FeedAction feed_actions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feed_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_feed_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .feedwire.ConsistencyToken consistency_token = 2;
  if (this->_internal_has_consistency_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consistency_token(this),
        _Internal::consistency_token(this).GetCachedSize(), target, stream);
  }

  // .feedwire.ActionDiagnosticInfo action_diagnostic_info = 5;
  if (this->_internal_has_action_diagnostic_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::action_diagnostic_info(this),
        _Internal::action_diagnostic_info(this).GetCachedSize(), target, stream);
  }

  // .feedwire.ClientInfo client_info = 6;
  if (this->_internal_has_client_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::client_info(this),
        _Internal::client_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.UploadActionsRequest)
  return target;
}

size_t UploadActionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.UploadActionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.FeedAction feed_actions = 1;
  total_size += 1UL * this->_internal_feed_actions_size();
  for (const auto& msg : this->feed_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .feedwire.ConsistencyToken consistency_token = 2;
  if (this->_internal_has_consistency_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consistency_token_);
  }

  // .feedwire.ActionDiagnosticInfo action_diagnostic_info = 5;
  if (this->_internal_has_action_diagnostic_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_diagnostic_info_);
  }

  // .feedwire.ClientInfo client_info = 6;
  if (this->_internal_has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadActionsRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UploadActionsRequest*>(
      &from));
}

void UploadActionsRequest::MergeFrom(const UploadActionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.UploadActionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  feed_actions_.MergeFrom(from.feed_actions_);
  if (from._internal_has_consistency_token()) {
    _internal_mutable_consistency_token()->::feedwire::ConsistencyToken::MergeFrom(from._internal_consistency_token());
  }
  if (from._internal_has_action_diagnostic_info()) {
    _internal_mutable_action_diagnostic_info()->::feedwire::ActionDiagnosticInfo::MergeFrom(from._internal_action_diagnostic_info());
  }
  if (from._internal_has_client_info()) {
    _internal_mutable_client_info()->::feedwire::ClientInfo::MergeFrom(from._internal_client_info());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UploadActionsRequest::CopyFrom(const UploadActionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.UploadActionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadActionsRequest::IsInitialized() const {
  return true;
}

void UploadActionsRequest::InternalSwap(UploadActionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  feed_actions_.InternalSwap(&other->feed_actions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadActionsRequest, client_info_)
      + sizeof(UploadActionsRequest::client_info_)
      - PROTOBUF_FIELD_OFFSET(UploadActionsRequest, consistency_token_)>(
          reinterpret_cast<char*>(&consistency_token_),
          reinterpret_cast<char*>(&other->consistency_token_));
}

std::string UploadActionsRequest::GetTypeName() const {
  return "feedwire.UploadActionsRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::UploadActionsRequest*
Arena::CreateMaybeMessage< ::feedwire::UploadActionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::UploadActionsRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
