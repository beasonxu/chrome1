// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/reliability_logging_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2freliability_5flogging_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2freliability_5flogging_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2freliability_5flogging_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2freliability_5flogging_5fenums_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum DiscoverLaunchResult : int {
  CARDS_UNSPECIFIED PROTOBUF_DEPRECATED_ENUM = 0,
  CARDS_FULLY_RENDERED = 1,
  CARDS_RENDERED_BUT_IMAGE_LOADING_CANCELLED = 2,
  CARDS_RENDERED_BUT_IMAGE_LOADING_FAILED = 3,
  INELIGIBLE_DISCOVER_DISABLED = 15,
  NO_CARDS_FAILED_TO_GET_AUTH_TOKEN = 23,
  NO_CARDS_REQUEST_ERROR_NO_INTERNET = 24,
  NO_CARDS_REQUEST_ERROR_OTHER = 25,
  NO_CARDS_RESPONSE_ERROR_NON_200 = 26,
  NO_CARDS_RESPONSE_ERROR_ZERO_CARDS = 27,
  NO_CARDS_UNKNOWN_REASON = 29,
  FAILED_TO_RENDER = 5,
  SEARCH_BOX_TAPPED = 7,
  VOICE_SEARCH_TAPPED = 8,
  NAVIGATED_TO_ANOTHER_TAB = 10,
  ACCOUNT_PARTICLE_DISC_TAPPED = 13,
  OVERFLOW_MANAGE_INTERESTS_TAPPED = 31,
  CARD_TAPPED = 46,
  CONFIGURATION_CHANGED = 30,
  FRAGMENT_STOPPED PROTOBUF_DEPRECATED_ENUM = 11,
  FRAGMENT_PAUSED = 43,
  UNKNOWN_HIDE_REASON = 44,
  NAVIGATED_BACK = 9,
  ABORTED_DUE_TO_INVALID_STATE = 6,
  NAVIGATED_AWAY_IN_APP = 35,
  FEED_HIDDEN = 36,
  INELIGIBLE_EULA_NOT_ACCEPTED = 37,
  INELIGIBLE_DISCOVER_DISABLED_BY_ENTERPRISE_POLICY = 38,
  CLEAR_ALL_IN_PROGRESS = 39,
  DATA_IN_STORE_IS_FOR_ANOTHER_USER = 40,
  NOT_A_WEB_FEED_SUBSCRIBER = 41,
  SWITCHED_FEED_TABS = 42
};
bool DiscoverLaunchResult_IsValid(int value);
constexpr DiscoverLaunchResult DiscoverLaunchResult_MIN = CARDS_UNSPECIFIED;
constexpr DiscoverLaunchResult DiscoverLaunchResult_MAX = CARD_TAPPED;
constexpr int DiscoverLaunchResult_ARRAYSIZE = DiscoverLaunchResult_MAX + 1;

const std::string& DiscoverLaunchResult_Name(DiscoverLaunchResult value);
template<typename T>
inline const std::string& DiscoverLaunchResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiscoverLaunchResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiscoverLaunchResult_Name.");
  return DiscoverLaunchResult_Name(static_cast<DiscoverLaunchResult>(enum_t_value));
}
bool DiscoverLaunchResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiscoverLaunchResult* value);
enum DiscoverCardReadCacheResult : int {
  CACHE_UNSPECIFIED PROTOBUF_DEPRECATED_ENUM = 0,
  CACHE_READ_OK = 1,
  EMPTY_SESSION = 2,
  STALE = 3,
  FAILED = 7
};
bool DiscoverCardReadCacheResult_IsValid(int value);
constexpr DiscoverCardReadCacheResult DiscoverCardReadCacheResult_MIN = CACHE_UNSPECIFIED;
constexpr DiscoverCardReadCacheResult DiscoverCardReadCacheResult_MAX = FAILED;
constexpr int DiscoverCardReadCacheResult_ARRAYSIZE = DiscoverCardReadCacheResult_MAX + 1;

const std::string& DiscoverCardReadCacheResult_Name(DiscoverCardReadCacheResult value);
template<typename T>
inline const std::string& DiscoverCardReadCacheResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiscoverCardReadCacheResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiscoverCardReadCacheResult_Name.");
  return DiscoverCardReadCacheResult_Name(static_cast<DiscoverCardReadCacheResult>(enum_t_value));
}
bool DiscoverCardReadCacheResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiscoverCardReadCacheResult* value);
enum DiscoverAboveTheFoldRenderResult : int {
  ATF_UNSPECIFIED PROTOBUF_DEPRECATED_ENUM = 0,
  SUCCESS = 1,
  FULL_FEED_ERROR = 3,
  INTERNAL_ERROR = 4
};
bool DiscoverAboveTheFoldRenderResult_IsValid(int value);
constexpr DiscoverAboveTheFoldRenderResult DiscoverAboveTheFoldRenderResult_MIN = ATF_UNSPECIFIED;
constexpr DiscoverAboveTheFoldRenderResult DiscoverAboveTheFoldRenderResult_MAX = INTERNAL_ERROR;
constexpr int DiscoverAboveTheFoldRenderResult_ARRAYSIZE = DiscoverAboveTheFoldRenderResult_MAX + 1;

const std::string& DiscoverAboveTheFoldRenderResult_Name(DiscoverAboveTheFoldRenderResult value);
template<typename T>
inline const std::string& DiscoverAboveTheFoldRenderResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiscoverAboveTheFoldRenderResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiscoverAboveTheFoldRenderResult_Name.");
  return DiscoverAboveTheFoldRenderResult_Name(static_cast<DiscoverAboveTheFoldRenderResult>(enum_t_value));
}
bool DiscoverAboveTheFoldRenderResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiscoverAboveTheFoldRenderResult* value);
enum DiscoverImagesInViewportLoadResult : int {
  IMAGES_UNSPECIFIED PROTOBUF_DEPRECATED_ENUM = 0,
  IMAGES_FULLY_RENDERED = 1,
  SOME_IMAGES_FAILED_TO_RENDER = 2,
  ALL_IMAGES_FAILED_TO_RENDER = 3,
  IMAGE_LOADING_CANCELLED = 4
};
bool DiscoverImagesInViewportLoadResult_IsValid(int value);
constexpr DiscoverImagesInViewportLoadResult DiscoverImagesInViewportLoadResult_MIN = IMAGES_UNSPECIFIED;
constexpr DiscoverImagesInViewportLoadResult DiscoverImagesInViewportLoadResult_MAX = IMAGE_LOADING_CANCELLED;
constexpr int DiscoverImagesInViewportLoadResult_ARRAYSIZE = DiscoverImagesInViewportLoadResult_MAX + 1;

const std::string& DiscoverImagesInViewportLoadResult_Name(DiscoverImagesInViewportLoadResult value);
template<typename T>
inline const std::string& DiscoverImagesInViewportLoadResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiscoverImagesInViewportLoadResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiscoverImagesInViewportLoadResult_Name.");
  return DiscoverImagesInViewportLoadResult_Name(static_cast<DiscoverImagesInViewportLoadResult>(enum_t_value));
}
bool DiscoverImagesInViewportLoadResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiscoverImagesInViewportLoadResult* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::DiscoverLaunchResult> : ::std::true_type {};
template <> struct is_proto_enum< ::feedwire::DiscoverCardReadCacheResult> : ::std::true_type {};
template <> struct is_proto_enum< ::feedwire::DiscoverAboveTheFoldRenderResult> : ::std::true_type {};
template <> struct is_proto_enum< ::feedwire::DiscoverImagesInViewportLoadResult> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2freliability_5flogging_5fenums_2eproto
