// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/action_surface.proto

#include "components/feed/core/proto/v2/wire/action_surface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
}  // namespace feedwire
namespace feedwire {
bool ActionSurface_IsValid(int value) {
  switch (value) {
    case 0:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ActionSurface_strings[3] = {};

static const char ActionSurface_names[] =
  "ANDROID_CHROME_NEW_TAB"
  "IOS_CHROME_NEW_TAB"
  "UNKNOWN_SURFACE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ActionSurface_entries[] = {
  { {ActionSurface_names + 0, 22}, 7 },
  { {ActionSurface_names + 22, 18}, 8 },
  { {ActionSurface_names + 40, 15}, 0 },
};

static const int ActionSurface_entries_by_number[] = {
  2, // 0 -> UNKNOWN_SURFACE
  0, // 7 -> ANDROID_CHROME_NEW_TAB
  1, // 8 -> IOS_CHROME_NEW_TAB
};

const std::string& ActionSurface_Name(
    ActionSurface value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ActionSurface_entries,
          ActionSurface_entries_by_number,
          3, ActionSurface_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ActionSurface_entries,
      ActionSurface_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ActionSurface_strings[idx].get();
}
bool ActionSurface_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionSurface* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ActionSurface_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ActionSurface>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
