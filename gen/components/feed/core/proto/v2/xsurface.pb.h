// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/xsurface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fxsurface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fxsurface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fxsurface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fxsurface_2eproto {
  static const uint32_t offsets[];
};
namespace feedxsurface {
class OfflineBadgeContent;
struct OfflineBadgeContentDefaultTypeInternal;
extern OfflineBadgeContentDefaultTypeInternal _OfflineBadgeContent_default_instance_;
class WebFeedFollowState;
struct WebFeedFollowStateDefaultTypeInternal;
extern WebFeedFollowStateDefaultTypeInternal _WebFeedFollowState_default_instance_;
}  // namespace feedxsurface
PROTOBUF_NAMESPACE_OPEN
template<> ::feedxsurface::OfflineBadgeContent* Arena::CreateMaybeMessage<::feedxsurface::OfflineBadgeContent>(Arena*);
template<> ::feedxsurface::WebFeedFollowState* Arena::CreateMaybeMessage<::feedxsurface::WebFeedFollowState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedxsurface {

enum WebFeedFollowState_FollowState : int {
  WebFeedFollowState_FollowState_UNSPECIFIED = 0,
  WebFeedFollowState_FollowState_FOLLOWED = 1,
  WebFeedFollowState_FollowState_NOT_FOLLOWED = 2,
  WebFeedFollowState_FollowState_FOLLOW_IN_PROGRESS = 3,
  WebFeedFollowState_FollowState_UNFOLLOW_IN_PROGRESS = 4
};
bool WebFeedFollowState_FollowState_IsValid(int value);
constexpr WebFeedFollowState_FollowState WebFeedFollowState_FollowState_FollowState_MIN = WebFeedFollowState_FollowState_UNSPECIFIED;
constexpr WebFeedFollowState_FollowState WebFeedFollowState_FollowState_FollowState_MAX = WebFeedFollowState_FollowState_UNFOLLOW_IN_PROGRESS;
constexpr int WebFeedFollowState_FollowState_FollowState_ARRAYSIZE = WebFeedFollowState_FollowState_FollowState_MAX + 1;

const std::string& WebFeedFollowState_FollowState_Name(WebFeedFollowState_FollowState value);
template<typename T>
inline const std::string& WebFeedFollowState_FollowState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebFeedFollowState_FollowState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebFeedFollowState_FollowState_Name.");
  return WebFeedFollowState_FollowState_Name(static_cast<WebFeedFollowState_FollowState>(enum_t_value));
}
bool WebFeedFollowState_FollowState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebFeedFollowState_FollowState* value);
// ===================================================================

class OfflineBadgeContent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedxsurface.OfflineBadgeContent) */ {
 public:
  inline OfflineBadgeContent() : OfflineBadgeContent(nullptr) {}
  ~OfflineBadgeContent() override;
  explicit PROTOBUF_CONSTEXPR OfflineBadgeContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OfflineBadgeContent(const OfflineBadgeContent& from);
  OfflineBadgeContent(OfflineBadgeContent&& from) noexcept
    : OfflineBadgeContent() {
    *this = ::std::move(from);
  }

  inline OfflineBadgeContent& operator=(const OfflineBadgeContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineBadgeContent& operator=(OfflineBadgeContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OfflineBadgeContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineBadgeContent* internal_default_instance() {
    return reinterpret_cast<const OfflineBadgeContent*>(
               &_OfflineBadgeContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OfflineBadgeContent& a, OfflineBadgeContent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(OfflineBadgeContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineBadgeContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineBadgeContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineBadgeContent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OfflineBadgeContent& from);
  void MergeFrom(const OfflineBadgeContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OfflineBadgeContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedxsurface.OfflineBadgeContent";
  }
  protected:
  explicit OfflineBadgeContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableOfflineFieldNumber = 1,
  };
  // optional bool available_offline = 1;
  bool has_available_offline() const;
  private:
  bool _internal_has_available_offline() const;
  public:
  void clear_available_offline();
  bool available_offline() const;
  void set_available_offline(bool value);
  private:
  bool _internal_available_offline() const;
  void _internal_set_available_offline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:feedxsurface.OfflineBadgeContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool available_offline_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fxsurface_2eproto;
};
// -------------------------------------------------------------------

class WebFeedFollowState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedxsurface.WebFeedFollowState) */ {
 public:
  inline WebFeedFollowState() : WebFeedFollowState(nullptr) {}
  ~WebFeedFollowState() override;
  explicit PROTOBUF_CONSTEXPR WebFeedFollowState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebFeedFollowState(const WebFeedFollowState& from);
  WebFeedFollowState(WebFeedFollowState&& from) noexcept
    : WebFeedFollowState() {
    *this = ::std::move(from);
  }

  inline WebFeedFollowState& operator=(const WebFeedFollowState& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebFeedFollowState& operator=(WebFeedFollowState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebFeedFollowState& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebFeedFollowState* internal_default_instance() {
    return reinterpret_cast<const WebFeedFollowState*>(
               &_WebFeedFollowState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WebFeedFollowState& a, WebFeedFollowState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebFeedFollowState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebFeedFollowState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebFeedFollowState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebFeedFollowState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebFeedFollowState& from);
  void MergeFrom(const WebFeedFollowState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebFeedFollowState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedxsurface.WebFeedFollowState";
  }
  protected:
  explicit WebFeedFollowState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WebFeedFollowState_FollowState FollowState;
  static constexpr FollowState UNSPECIFIED =
    WebFeedFollowState_FollowState_UNSPECIFIED;
  static constexpr FollowState FOLLOWED =
    WebFeedFollowState_FollowState_FOLLOWED;
  static constexpr FollowState NOT_FOLLOWED =
    WebFeedFollowState_FollowState_NOT_FOLLOWED;
  static constexpr FollowState FOLLOW_IN_PROGRESS =
    WebFeedFollowState_FollowState_FOLLOW_IN_PROGRESS;
  static constexpr FollowState UNFOLLOW_IN_PROGRESS =
    WebFeedFollowState_FollowState_UNFOLLOW_IN_PROGRESS;
  static inline bool FollowState_IsValid(int value) {
    return WebFeedFollowState_FollowState_IsValid(value);
  }
  static constexpr FollowState FollowState_MIN =
    WebFeedFollowState_FollowState_FollowState_MIN;
  static constexpr FollowState FollowState_MAX =
    WebFeedFollowState_FollowState_FollowState_MAX;
  static constexpr int FollowState_ARRAYSIZE =
    WebFeedFollowState_FollowState_FollowState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FollowState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FollowState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FollowState_Name.");
    return WebFeedFollowState_FollowState_Name(enum_t_value);
  }
  static inline bool FollowState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FollowState* value) {
    return WebFeedFollowState_FollowState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFollowStateFieldNumber = 1,
  };
  // optional .feedxsurface.WebFeedFollowState.FollowState follow_state = 1;
  bool has_follow_state() const;
  private:
  bool _internal_has_follow_state() const;
  public:
  void clear_follow_state();
  ::feedxsurface::WebFeedFollowState_FollowState follow_state() const;
  void set_follow_state(::feedxsurface::WebFeedFollowState_FollowState value);
  private:
  ::feedxsurface::WebFeedFollowState_FollowState _internal_follow_state() const;
  void _internal_set_follow_state(::feedxsurface::WebFeedFollowState_FollowState value);
  public:

  // @@protoc_insertion_point(class_scope:feedxsurface.WebFeedFollowState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int follow_state_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fxsurface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OfflineBadgeContent

// optional bool available_offline = 1;
inline bool OfflineBadgeContent::_internal_has_available_offline() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OfflineBadgeContent::has_available_offline() const {
  return _internal_has_available_offline();
}
inline void OfflineBadgeContent::clear_available_offline() {
  available_offline_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool OfflineBadgeContent::_internal_available_offline() const {
  return available_offline_;
}
inline bool OfflineBadgeContent::available_offline() const {
  // @@protoc_insertion_point(field_get:feedxsurface.OfflineBadgeContent.available_offline)
  return _internal_available_offline();
}
inline void OfflineBadgeContent::_internal_set_available_offline(bool value) {
  _has_bits_[0] |= 0x00000001u;
  available_offline_ = value;
}
inline void OfflineBadgeContent::set_available_offline(bool value) {
  _internal_set_available_offline(value);
  // @@protoc_insertion_point(field_set:feedxsurface.OfflineBadgeContent.available_offline)
}

// -------------------------------------------------------------------

// WebFeedFollowState

// optional .feedxsurface.WebFeedFollowState.FollowState follow_state = 1;
inline bool WebFeedFollowState::_internal_has_follow_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebFeedFollowState::has_follow_state() const {
  return _internal_has_follow_state();
}
inline void WebFeedFollowState::clear_follow_state() {
  follow_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::feedxsurface::WebFeedFollowState_FollowState WebFeedFollowState::_internal_follow_state() const {
  return static_cast< ::feedxsurface::WebFeedFollowState_FollowState >(follow_state_);
}
inline ::feedxsurface::WebFeedFollowState_FollowState WebFeedFollowState::follow_state() const {
  // @@protoc_insertion_point(field_get:feedxsurface.WebFeedFollowState.follow_state)
  return _internal_follow_state();
}
inline void WebFeedFollowState::_internal_set_follow_state(::feedxsurface::WebFeedFollowState_FollowState value) {
  assert(::feedxsurface::WebFeedFollowState_FollowState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  follow_state_ = value;
}
inline void WebFeedFollowState::set_follow_state(::feedxsurface::WebFeedFollowState_FollowState value) {
  _internal_set_follow_state(value);
  // @@protoc_insertion_point(field_set:feedxsurface.WebFeedFollowState.follow_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedxsurface

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedxsurface::WebFeedFollowState_FollowState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fxsurface_2eproto
