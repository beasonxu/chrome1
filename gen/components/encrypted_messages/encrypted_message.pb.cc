// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encrypted_message.proto

#include "encrypted_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace encrypted_messages {
PROTOBUF_CONSTEXPR EncryptedMessage::EncryptedMessage(
    ::_pbi::ConstantInitialized)
  : encrypted_message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_public_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , server_public_key_version_(0u)
  , algorithm_(1)
{}
struct EncryptedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedMessageDefaultTypeInternal() {}
  union {
    EncryptedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedMessageDefaultTypeInternal _EncryptedMessage_default_instance_;
}  // namespace encrypted_messages
namespace encrypted_messages {
bool EncryptedMessage_Algorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EncryptedMessage_Algorithm_strings[2] = {};

static const char EncryptedMessage_Algorithm_names[] =
  "AEAD_ECDH_AES_128_CTR_HMAC_SHA256"
  "UNKNOWN_ALGORITHM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EncryptedMessage_Algorithm_entries[] = {
  { {EncryptedMessage_Algorithm_names + 0, 33}, 1 },
  { {EncryptedMessage_Algorithm_names + 33, 17}, 0 },
};

static const int EncryptedMessage_Algorithm_entries_by_number[] = {
  1, // 0 -> UNKNOWN_ALGORITHM
  0, // 1 -> AEAD_ECDH_AES_128_CTR_HMAC_SHA256
};

const std::string& EncryptedMessage_Algorithm_Name(
    EncryptedMessage_Algorithm value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EncryptedMessage_Algorithm_entries,
          EncryptedMessage_Algorithm_entries_by_number,
          2, EncryptedMessage_Algorithm_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EncryptedMessage_Algorithm_entries,
      EncryptedMessage_Algorithm_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EncryptedMessage_Algorithm_strings[idx].get();
}
bool EncryptedMessage_Algorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncryptedMessage_Algorithm* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EncryptedMessage_Algorithm_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<EncryptedMessage_Algorithm>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EncryptedMessage_Algorithm EncryptedMessage::UNKNOWN_ALGORITHM;
constexpr EncryptedMessage_Algorithm EncryptedMessage::AEAD_ECDH_AES_128_CTR_HMAC_SHA256;
constexpr EncryptedMessage_Algorithm EncryptedMessage::Algorithm_MIN;
constexpr EncryptedMessage_Algorithm EncryptedMessage::Algorithm_MAX;
constexpr int EncryptedMessage::Algorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EncryptedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptedMessage>()._has_bits_);
  static void set_has_encrypted_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_public_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

EncryptedMessage::EncryptedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:encrypted_messages.EncryptedMessage)
}
EncryptedMessage::EncryptedMessage(const EncryptedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  encrypted_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encrypted_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encrypted_message()) {
    encrypted_message_.Set(from._internal_encrypted_message(), 
      GetArenaForAllocation());
  }
  client_public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_public_key()) {
    client_public_key_.Set(from._internal_client_public_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_public_key_version_, &from.server_public_key_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&server_public_key_version_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:encrypted_messages.EncryptedMessage)
}

inline void EncryptedMessage::SharedCtor() {
encrypted_message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encrypted_message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_public_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_public_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
server_public_key_version_ = 0u;
algorithm_ = 1;
}

EncryptedMessage::~EncryptedMessage() {
  // @@protoc_insertion_point(destructor:encrypted_messages.EncryptedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encrypted_message_.Destroy();
  client_public_key_.Destroy();
}

void EncryptedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncryptedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:encrypted_messages.EncryptedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encrypted_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      client_public_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    server_public_key_version_ = 0u;
    algorithm_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes encrypted_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encrypted_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 server_public_key_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_server_public_key_version(&has_bits);
          server_public_key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes client_public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::encrypted_messages::EncryptedMessage_Algorithm_IsValid(val))) {
            _internal_set_algorithm(static_cast<::encrypted_messages::EncryptedMessage_Algorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:encrypted_messages.EncryptedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes encrypted_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encrypted_message(), target);
  }

  // required uint32 server_public_key_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_public_key_version(), target);
  }

  // required bytes client_public_key = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_client_public_key(), target);
  }

  // optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:encrypted_messages.EncryptedMessage)
  return target;
}

size_t EncryptedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:encrypted_messages.EncryptedMessage)
  size_t total_size = 0;

  if (_internal_has_encrypted_message()) {
    // required bytes encrypted_message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_message());
  }

  if (_internal_has_client_public_key()) {
    // required bytes client_public_key = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_client_public_key());
  }

  if (_internal_has_server_public_key_version()) {
    // required uint32 server_public_key_version = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_public_key_version());
  }

  return total_size;
}
size_t EncryptedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:encrypted_messages.EncryptedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes encrypted_message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_message());

    // required bytes client_public_key = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_client_public_key());

    // required uint32 server_public_key_version = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_public_key_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedMessage*>(
      &from));
}

void EncryptedMessage::MergeFrom(const EncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:encrypted_messages.EncryptedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encrypted_message(from._internal_encrypted_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_client_public_key(from._internal_client_public_key());
    }
    if (cached_has_bits & 0x00000004u) {
      server_public_key_version_ = from.server_public_key_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      algorithm_ = from.algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedMessage::CopyFrom(const EncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:encrypted_messages.EncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EncryptedMessage::InternalSwap(EncryptedMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &encrypted_message_, lhs_arena,
      &other->encrypted_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_public_key_, lhs_arena,
      &other->client_public_key_, rhs_arena
  );
  swap(server_public_key_version_, other->server_public_key_version_);
  swap(algorithm_, other->algorithm_);
}

std::string EncryptedMessage::GetTypeName() const {
  return "encrypted_messages.EncryptedMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace encrypted_messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::encrypted_messages::EncryptedMessage*
Arena::CreateMaybeMessage< ::encrypted_messages::EncryptedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::encrypted_messages::EncryptedMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
