// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encrypted_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_encrypted_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_encrypted_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_encrypted_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_encrypted_5fmessage_2eproto {
  static const uint32_t offsets[];
};
namespace encrypted_messages {
class EncryptedMessage;
struct EncryptedMessageDefaultTypeInternal;
extern EncryptedMessageDefaultTypeInternal _EncryptedMessage_default_instance_;
}  // namespace encrypted_messages
PROTOBUF_NAMESPACE_OPEN
template<> ::encrypted_messages::EncryptedMessage* Arena::CreateMaybeMessage<::encrypted_messages::EncryptedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace encrypted_messages {

enum EncryptedMessage_Algorithm : int {
  EncryptedMessage_Algorithm_UNKNOWN_ALGORITHM = 0,
  EncryptedMessage_Algorithm_AEAD_ECDH_AES_128_CTR_HMAC_SHA256 = 1
};
bool EncryptedMessage_Algorithm_IsValid(int value);
constexpr EncryptedMessage_Algorithm EncryptedMessage_Algorithm_Algorithm_MIN = EncryptedMessage_Algorithm_UNKNOWN_ALGORITHM;
constexpr EncryptedMessage_Algorithm EncryptedMessage_Algorithm_Algorithm_MAX = EncryptedMessage_Algorithm_AEAD_ECDH_AES_128_CTR_HMAC_SHA256;
constexpr int EncryptedMessage_Algorithm_Algorithm_ARRAYSIZE = EncryptedMessage_Algorithm_Algorithm_MAX + 1;

const std::string& EncryptedMessage_Algorithm_Name(EncryptedMessage_Algorithm value);
template<typename T>
inline const std::string& EncryptedMessage_Algorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncryptedMessage_Algorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncryptedMessage_Algorithm_Name.");
  return EncryptedMessage_Algorithm_Name(static_cast<EncryptedMessage_Algorithm>(enum_t_value));
}
bool EncryptedMessage_Algorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncryptedMessage_Algorithm* value);
// ===================================================================

class EncryptedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:encrypted_messages.EncryptedMessage) */ {
 public:
  inline EncryptedMessage() : EncryptedMessage(nullptr) {}
  ~EncryptedMessage() override;
  explicit PROTOBUF_CONSTEXPR EncryptedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedMessage(const EncryptedMessage& from);
  EncryptedMessage(EncryptedMessage&& from) noexcept
    : EncryptedMessage() {
    *this = ::std::move(from);
  }

  inline EncryptedMessage& operator=(const EncryptedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedMessage& operator=(EncryptedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EncryptedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedMessage* internal_default_instance() {
    return reinterpret_cast<const EncryptedMessage*>(
               &_EncryptedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptedMessage& a, EncryptedMessage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EncryptedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncryptedMessage& from);
  void MergeFrom(const EncryptedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "encrypted_messages.EncryptedMessage";
  }
  protected:
  explicit EncryptedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef EncryptedMessage_Algorithm Algorithm;
  static constexpr Algorithm UNKNOWN_ALGORITHM =
    EncryptedMessage_Algorithm_UNKNOWN_ALGORITHM;
  static constexpr Algorithm AEAD_ECDH_AES_128_CTR_HMAC_SHA256 =
    EncryptedMessage_Algorithm_AEAD_ECDH_AES_128_CTR_HMAC_SHA256;
  static inline bool Algorithm_IsValid(int value) {
    return EncryptedMessage_Algorithm_IsValid(value);
  }
  static constexpr Algorithm Algorithm_MIN =
    EncryptedMessage_Algorithm_Algorithm_MIN;
  static constexpr Algorithm Algorithm_MAX =
    EncryptedMessage_Algorithm_Algorithm_MAX;
  static constexpr int Algorithm_ARRAYSIZE =
    EncryptedMessage_Algorithm_Algorithm_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Algorithm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Algorithm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Algorithm_Name.");
    return EncryptedMessage_Algorithm_Name(enum_t_value);
  }
  static inline bool Algorithm_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Algorithm* value) {
    return EncryptedMessage_Algorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedMessageFieldNumber = 1,
    kClientPublicKeyFieldNumber = 3,
    kServerPublicKeyVersionFieldNumber = 2,
    kAlgorithmFieldNumber = 4,
  };
  // required bytes encrypted_message = 1;
  bool has_encrypted_message() const;
  private:
  bool _internal_has_encrypted_message() const;
  public:
  void clear_encrypted_message();
  const std::string& encrypted_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_message();
  PROTOBUF_NODISCARD std::string* release_encrypted_message();
  void set_allocated_encrypted_message(std::string* encrypted_message);
  private:
  const std::string& _internal_encrypted_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_message(const std::string& value);
  std::string* _internal_mutable_encrypted_message();
  public:

  // required bytes client_public_key = 3;
  bool has_client_public_key() const;
  private:
  bool _internal_has_client_public_key() const;
  public:
  void clear_client_public_key();
  const std::string& client_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_public_key();
  PROTOBUF_NODISCARD std::string* release_client_public_key();
  void set_allocated_client_public_key(std::string* client_public_key);
  private:
  const std::string& _internal_client_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_public_key(const std::string& value);
  std::string* _internal_mutable_client_public_key();
  public:

  // required uint32 server_public_key_version = 2;
  bool has_server_public_key_version() const;
  private:
  bool _internal_has_server_public_key_version() const;
  public:
  void clear_server_public_key_version();
  uint32_t server_public_key_version() const;
  void set_server_public_key_version(uint32_t value);
  private:
  uint32_t _internal_server_public_key_version() const;
  void _internal_set_server_public_key_version(uint32_t value);
  public:

  // optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  ::encrypted_messages::EncryptedMessage_Algorithm algorithm() const;
  void set_algorithm(::encrypted_messages::EncryptedMessage_Algorithm value);
  private:
  ::encrypted_messages::EncryptedMessage_Algorithm _internal_algorithm() const;
  void _internal_set_algorithm(::encrypted_messages::EncryptedMessage_Algorithm value);
  public:

  // @@protoc_insertion_point(class_scope:encrypted_messages.EncryptedMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_public_key_;
  uint32_t server_public_key_version_;
  int algorithm_;
  friend struct ::TableStruct_encrypted_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptedMessage

// required bytes encrypted_message = 1;
inline bool EncryptedMessage::_internal_has_encrypted_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EncryptedMessage::has_encrypted_message() const {
  return _internal_has_encrypted_message();
}
inline void EncryptedMessage::clear_encrypted_message() {
  encrypted_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptedMessage::encrypted_message() const {
  // @@protoc_insertion_point(field_get:encrypted_messages.EncryptedMessage.encrypted_message)
  return _internal_encrypted_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedMessage::set_encrypted_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encrypted_message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encrypted_messages.EncryptedMessage.encrypted_message)
}
inline std::string* EncryptedMessage::mutable_encrypted_message() {
  std::string* _s = _internal_mutable_encrypted_message();
  // @@protoc_insertion_point(field_mutable:encrypted_messages.EncryptedMessage.encrypted_message)
  return _s;
}
inline const std::string& EncryptedMessage::_internal_encrypted_message() const {
  return encrypted_message_.Get();
}
inline void EncryptedMessage::_internal_set_encrypted_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_message_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMessage::_internal_mutable_encrypted_message() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_message_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptedMessage::release_encrypted_message() {
  // @@protoc_insertion_point(field_release:encrypted_messages.EncryptedMessage.encrypted_message)
  if (!_internal_has_encrypted_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = encrypted_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_message_.IsDefault()) {
    encrypted_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptedMessage::set_allocated_encrypted_message(std::string* encrypted_message) {
  if (encrypted_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_message_.SetAllocated(encrypted_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_message_.IsDefault()) {
    encrypted_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encrypted_messages.EncryptedMessage.encrypted_message)
}

// required uint32 server_public_key_version = 2;
inline bool EncryptedMessage::_internal_has_server_public_key_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EncryptedMessage::has_server_public_key_version() const {
  return _internal_has_server_public_key_version();
}
inline void EncryptedMessage::clear_server_public_key_version() {
  server_public_key_version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t EncryptedMessage::_internal_server_public_key_version() const {
  return server_public_key_version_;
}
inline uint32_t EncryptedMessage::server_public_key_version() const {
  // @@protoc_insertion_point(field_get:encrypted_messages.EncryptedMessage.server_public_key_version)
  return _internal_server_public_key_version();
}
inline void EncryptedMessage::_internal_set_server_public_key_version(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  server_public_key_version_ = value;
}
inline void EncryptedMessage::set_server_public_key_version(uint32_t value) {
  _internal_set_server_public_key_version(value);
  // @@protoc_insertion_point(field_set:encrypted_messages.EncryptedMessage.server_public_key_version)
}

// required bytes client_public_key = 3;
inline bool EncryptedMessage::_internal_has_client_public_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EncryptedMessage::has_client_public_key() const {
  return _internal_has_client_public_key();
}
inline void EncryptedMessage::clear_client_public_key() {
  client_public_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EncryptedMessage::client_public_key() const {
  // @@protoc_insertion_point(field_get:encrypted_messages.EncryptedMessage.client_public_key)
  return _internal_client_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedMessage::set_client_public_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 client_public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encrypted_messages.EncryptedMessage.client_public_key)
}
inline std::string* EncryptedMessage::mutable_client_public_key() {
  std::string* _s = _internal_mutable_client_public_key();
  // @@protoc_insertion_point(field_mutable:encrypted_messages.EncryptedMessage.client_public_key)
  return _s;
}
inline const std::string& EncryptedMessage::_internal_client_public_key() const {
  return client_public_key_.Get();
}
inline void EncryptedMessage::_internal_set_client_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMessage::_internal_mutable_client_public_key() {
  _has_bits_[0] |= 0x00000002u;
  return client_public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptedMessage::release_client_public_key() {
  // @@protoc_insertion_point(field_release:encrypted_messages.EncryptedMessage.client_public_key)
  if (!_internal_has_client_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = client_public_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_public_key_.IsDefault()) {
    client_public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptedMessage::set_allocated_client_public_key(std::string* client_public_key) {
  if (client_public_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_public_key_.SetAllocated(client_public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_public_key_.IsDefault()) {
    client_public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encrypted_messages.EncryptedMessage.client_public_key)
}

// optional .encrypted_messages.EncryptedMessage.Algorithm algorithm = 4 [default = AEAD_ECDH_AES_128_CTR_HMAC_SHA256];
inline bool EncryptedMessage::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EncryptedMessage::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void EncryptedMessage::clear_algorithm() {
  algorithm_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::encrypted_messages::EncryptedMessage_Algorithm EncryptedMessage::_internal_algorithm() const {
  return static_cast< ::encrypted_messages::EncryptedMessage_Algorithm >(algorithm_);
}
inline ::encrypted_messages::EncryptedMessage_Algorithm EncryptedMessage::algorithm() const {
  // @@protoc_insertion_point(field_get:encrypted_messages.EncryptedMessage.algorithm)
  return _internal_algorithm();
}
inline void EncryptedMessage::_internal_set_algorithm(::encrypted_messages::EncryptedMessage_Algorithm value) {
  assert(::encrypted_messages::EncryptedMessage_Algorithm_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  algorithm_ = value;
}
inline void EncryptedMessage::set_algorithm(::encrypted_messages::EncryptedMessage_Algorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:encrypted_messages.EncryptedMessage.algorithm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace encrypted_messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::encrypted_messages::EncryptedMessage_Algorithm> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_encrypted_5fmessage_2eproto
