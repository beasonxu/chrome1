// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/payments/JourneyLogger

#ifndef org_chromium_components_payments_JourneyLogger_JNI
#define org_chromium_components_payments_JourneyLogger_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace payments {

static jlong JNI_JourneyLogger_InitJourneyLoggerAndroid(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jboolean isIncognito,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong Java_J_N_MgtvkzAJ(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jboolean isIncognito,
    jobject webContents) {
  return JNI_JourneyLogger_InitJourneyLoggerAndroid(env, base::android::JavaParamRef<jobject>(env,
      caller), isIncognito, base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MK_00024_1cVJA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MPFG5SwC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jint section,
    jint number,
    jboolean hasCompleteSuggestion) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetNumberOfSuggestionsShown");
  return native->SetNumberOfSuggestionsShown(env, base::android::JavaParamRef<jobject>(env, caller),
      section, number, hasCompleteSuggestion);
}

JNI_GENERATOR_EXPORT void Java_J_N_MzcQanKX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jboolean value) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCanMakePaymentValue");
  return native->SetCanMakePaymentValue(env, base::android::JavaParamRef<jobject>(env, caller),
      value);
}

JNI_GENERATOR_EXPORT void Java_J_N_Ma1hMajT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jboolean value) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetHasEnrolledInstrumentValue");
  return native->SetHasEnrolledInstrumentValue(env, base::android::JavaParamRef<jobject>(env,
      caller), value);
}

JNI_GENERATOR_EXPORT void Java_J_N_M8_00024wRelg(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSkippedShow");
  return native->SetSkippedShow(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MaXgMPsk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetShown");
  return native->SetShown(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MsVk_159O(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetReceivedInstrumentDetails");
  return native->SetReceivedInstrumentDetails(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MWAyIl4_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPayClicked");
  return native->SetPayClicked(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M9Jdo06k(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jint paymentMethodCategory) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSelectedMethod");
  return native->SetSelectedMethod(env, base::android::JavaParamRef<jobject>(env, caller),
      paymentMethodCategory);
}

JNI_GENERATOR_EXPORT void Java_J_N_MH8h6Eyr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jint paymentMethodCategory) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAvailableMethod");
  return native->SetAvailableMethod(env, base::android::JavaParamRef<jobject>(env, caller),
      paymentMethodCategory);
}

JNI_GENERATOR_EXPORT void Java_J_N_MyrdhicN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jboolean requestShipping,
    jboolean requestEmail,
    jboolean requestPhone,
    jboolean requestName) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetRequestedInformation");
  return native->SetRequestedInformation(env, base::android::JavaParamRef<jobject>(env, caller),
      requestShipping, requestEmail, requestPhone, requestName);
}

JNI_GENERATOR_EXPORT void Java_J_N_MdoHcPLx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jintArray methodTypes) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetRequestedPaymentMethods");
  return native->SetRequestedPaymentMethods(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jintArray>(env, methodTypes));
}

JNI_GENERATOR_EXPORT void Java_J_N_My_00024biNCo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCompleted");
  return native->SetCompleted(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MMB_1UdCu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jint reason) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAborted");
  return native->SetAborted(env, base::android::JavaParamRef<jobject>(env, caller), reason);
}

JNI_GENERATOR_EXPORT void Java_J_N_MPhEgSJd(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jint reason) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetNotShown");
  return native->SetNotShown(env, base::android::JavaParamRef<jobject>(env, caller), reason);
}

JNI_GENERATOR_EXPORT void Java_J_N_MpLIjj0f(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jint step) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RecordCheckoutStep");
  return native->RecordCheckoutStep(env, base::android::JavaParamRef<jobject>(env, caller), step);
}

JNI_GENERATOR_EXPORT void Java_J_N_MMsq7cME(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJourneyLoggerAndroid,
    jobject caller,
    jlong sourceId) {
  JourneyLoggerAndroid* native =
      reinterpret_cast<JourneyLoggerAndroid*>(nativeJourneyLoggerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPaymentAppUkmSourceId");
  return native->SetPaymentAppUkmSourceId(env, base::android::JavaParamRef<jobject>(env, caller),
      sourceId);
}


}  // namespace payments

#endif  // org_chromium_components_payments_JourneyLogger_JNI
