// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/segmentation_platform/public/proto/segmentation_platform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2fpublic_2fproto_2fsegmentation_5fplatform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2fpublic_2fproto_2fsegmentation_5fplatform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsegmentation_5fplatform_2fpublic_2fproto_2fsegmentation_5fplatform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsegmentation_5fplatform_2fpublic_2fproto_2fsegmentation_5fplatform_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace segmentation_platform {
namespace proto {

enum SegmentId : int {
  OPTIMIZATION_TARGET_UNKNOWN = 0,
  OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD = 1,
  OPTIMIZATION_TARGET_LANGUAGE_DETECTION = 2,
  OPTIMIZATION_TARGET_PAGE_TOPICS = 3,
  OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB = 4,
  OPTIMIZATION_TARGET_SEGMENTATION_SHARE = 5,
  OPTIMIZATION_TARGET_SEGMENTATION_VOICE = 6,
  OPTIMIZATION_TARGET_MODEL_VALIDATION = 7,
  OPTIMIZATION_TARGET_PAGE_ENTITIES = 8,
  OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS = 9,
  OPTIMIZATION_TARGET_SEGMENTATION_DUMMY = 10,
  OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID = 11,
  OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES = 12,
  OPTIMIZATION_TARGET_PAGE_VISIBILITY = 13,
  OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT = 14,
  OPTIMIZATION_TARGET_PAGE_TOPICS_V2 = 15,
  OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT = 16,
  OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER = 17,
  OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING = 18,
  OPTIMIZATION_TARGET_SEGMENTATION_SHOPPING_USER = 19,
  MAX_OPTIMIZATION_TARGET = 999
};
bool SegmentId_IsValid(int value);
constexpr SegmentId SegmentId_MIN = OPTIMIZATION_TARGET_UNKNOWN;
constexpr SegmentId SegmentId_MAX = MAX_OPTIMIZATION_TARGET;
constexpr int SegmentId_ARRAYSIZE = SegmentId_MAX + 1;

const std::string& SegmentId_Name(SegmentId value);
template<typename T>
inline const std::string& SegmentId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SegmentId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SegmentId_Name.");
  return SegmentId_Name(static_cast<SegmentId>(enum_t_value));
}
bool SegmentId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SegmentId* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace segmentation_platform

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::segmentation_platform::proto::SegmentId> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2fpublic_2fproto_2fsegmentation_5fplatform_2eproto
