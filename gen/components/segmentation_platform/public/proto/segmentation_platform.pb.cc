// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/segmentation_platform/public/proto/segmentation_platform.proto

#include "components/segmentation_platform/public/proto/segmentation_platform.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace segmentation_platform {
namespace proto {
}  // namespace proto
}  // namespace segmentation_platform
namespace segmentation_platform {
namespace proto {
bool SegmentId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 999:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SegmentId_strings[21] = {};

static const char SegmentId_names[] =
  "MAX_OPTIMIZATION_TARGET"
  "OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT"
  "OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING"
  "OPTIMIZATION_TARGET_LANGUAGE_DETECTION"
  "OPTIMIZATION_TARGET_MODEL_VALIDATION"
  "OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS"
  "OPTIMIZATION_TARGET_PAGE_ENTITIES"
  "OPTIMIZATION_TARGET_PAGE_TOPICS"
  "OPTIMIZATION_TARGET_PAGE_TOPICS_V2"
  "OPTIMIZATION_TARGET_PAGE_VISIBILITY"
  "OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD"
  "OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT"
  "OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID"
  "OPTIMIZATION_TARGET_SEGMENTATION_DUMMY"
  "OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER"
  "OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB"
  "OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES"
  "OPTIMIZATION_TARGET_SEGMENTATION_SHARE"
  "OPTIMIZATION_TARGET_SEGMENTATION_SHOPPING_USER"
  "OPTIMIZATION_TARGET_SEGMENTATION_VOICE"
  "OPTIMIZATION_TARGET_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SegmentId_entries[] = {
  { {SegmentId_names + 0, 23}, 999 },
  { {SegmentId_names + 23, 38}, 14 },
  { {SegmentId_names + 61, 57}, 18 },
  { {SegmentId_names + 118, 38}, 2 },
  { {SegmentId_names + 156, 36}, 7 },
  { {SegmentId_names + 192, 55}, 9 },
  { {SegmentId_names + 247, 33}, 8 },
  { {SegmentId_names + 280, 31}, 3 },
  { {SegmentId_names + 311, 34}, 15 },
  { {SegmentId_names + 345, 35}, 13 },
  { {SegmentId_names + 380, 37}, 1 },
  { {SegmentId_names + 417, 59}, 16 },
  { {SegmentId_names + 476, 53}, 11 },
  { {SegmentId_names + 529, 38}, 10 },
  { {SegmentId_names + 567, 42}, 17 },
  { {SegmentId_names + 609, 40}, 4 },
  { {SegmentId_names + 649, 44}, 12 },
  { {SegmentId_names + 693, 38}, 5 },
  { {SegmentId_names + 731, 46}, 19 },
  { {SegmentId_names + 777, 38}, 6 },
  { {SegmentId_names + 815, 27}, 0 },
};

static const int SegmentId_entries_by_number[] = {
  20, // 0 -> OPTIMIZATION_TARGET_UNKNOWN
  10, // 1 -> OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD
  3, // 2 -> OPTIMIZATION_TARGET_LANGUAGE_DETECTION
  7, // 3 -> OPTIMIZATION_TARGET_PAGE_TOPICS
  15, // 4 -> OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB
  17, // 5 -> OPTIMIZATION_TARGET_SEGMENTATION_SHARE
  19, // 6 -> OPTIMIZATION_TARGET_SEGMENTATION_VOICE
  4, // 7 -> OPTIMIZATION_TARGET_MODEL_VALIDATION
  6, // 8 -> OPTIMIZATION_TARGET_PAGE_ENTITIES
  5, // 9 -> OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS
  13, // 10 -> OPTIMIZATION_TARGET_SEGMENTATION_DUMMY
  12, // 11 -> OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID
  16, // 12 -> OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES
  9, // 13 -> OPTIMIZATION_TARGET_PAGE_VISIBILITY
  1, // 14 -> OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT
  8, // 15 -> OPTIMIZATION_TARGET_PAGE_TOPICS_V2
  11, // 16 -> OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT
  14, // 17 -> OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER
  2, // 18 -> OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING
  18, // 19 -> OPTIMIZATION_TARGET_SEGMENTATION_SHOPPING_USER
  0, // 999 -> MAX_OPTIMIZATION_TARGET
};

const std::string& SegmentId_Name(
    SegmentId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SegmentId_entries,
          SegmentId_entries_by_number,
          21, SegmentId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SegmentId_entries,
      SegmentId_entries_by_number,
      21, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SegmentId_strings[idx].get();
}
bool SegmentId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SegmentId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SegmentId_entries, 21, name, &int_value);
  if (success) {
    *value = static_cast<SegmentId>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace segmentation_platform
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
