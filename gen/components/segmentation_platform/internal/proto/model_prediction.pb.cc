// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/segmentation_platform/internal/proto/model_prediction.proto

#include "components/segmentation_platform/internal/proto/model_prediction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace segmentation_platform {
namespace proto {
PROTOBUF_CONSTEXPR PredictionResult::PredictionResult(
    ::_pbi::ConstantInitialized)
  : timestamp_us_(int64_t{0})
  , result_(0){}
struct PredictionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionResultDefaultTypeInternal() {}
  union {
    PredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionResultDefaultTypeInternal _PredictionResult_default_instance_;
PROTOBUF_CONSTEXPR SegmentInfo::SegmentInfo(
    ::_pbi::ConstantInitialized)
  : model_metadata_(nullptr)
  , prediction_result_(nullptr)
  , model_version_(int64_t{0})
  , model_update_time_s_(int64_t{0})
  , segment_id_(0)
{}
struct SegmentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentInfoDefaultTypeInternal() {}
  union {
    SegmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentInfoDefaultTypeInternal _SegmentInfo_default_instance_;
}  // namespace proto
}  // namespace segmentation_platform
namespace segmentation_platform {
namespace proto {

// ===================================================================

class PredictionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionResult>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PredictionResult::PredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:segmentation_platform.proto.PredictionResult)
}
PredictionResult::PredictionResult(const PredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&timestamp_us_, &from.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:segmentation_platform.proto.PredictionResult)
}

inline void PredictionResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_us_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(result_));
}

PredictionResult::~PredictionResult() {
  // @@protoc_insertion_point(destructor:segmentation_platform.proto.PredictionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PredictionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:segmentation_platform.proto.PredictionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&timestamp_us_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PredictionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp_us(&has_bits);
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmentation_platform.proto.PredictionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_result(), target);
  }

  // optional int64 timestamp_us = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:segmentation_platform.proto.PredictionResult)
  return target;
}

size_t PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:segmentation_platform.proto.PredictionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 timestamp_us = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_us());
    }

    // optional float result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PredictionResult*>(
      &from));
}

void PredictionResult::MergeFrom(const PredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmentation_platform.proto.PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_us_ = from.timestamp_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PredictionResult::CopyFrom(const PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmentation_platform.proto.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionResult::IsInitialized() const {
  return true;
}

void PredictionResult::InternalSwap(PredictionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionResult, result_)
      + sizeof(PredictionResult::result_)
      - PROTOBUF_FIELD_OFFSET(PredictionResult, timestamp_us_)>(
          reinterpret_cast<char*>(&timestamp_us_),
          reinterpret_cast<char*>(&other->timestamp_us_));
}

std::string PredictionResult::GetTypeName() const {
  return "segmentation_platform.proto.PredictionResult";
}


// ===================================================================

class SegmentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SegmentInfo>()._has_bits_);
  static void set_has_segment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::segmentation_platform::proto::SegmentationModelMetadata& model_metadata(const SegmentInfo* msg);
  static void set_has_model_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::segmentation_platform::proto::PredictionResult& prediction_result(const SegmentInfo* msg);
  static void set_has_prediction_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_update_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::segmentation_platform::proto::SegmentationModelMetadata&
SegmentInfo::_Internal::model_metadata(const SegmentInfo* msg) {
  return *msg->model_metadata_;
}
const ::segmentation_platform::proto::PredictionResult&
SegmentInfo::_Internal::prediction_result(const SegmentInfo* msg) {
  return *msg->prediction_result_;
}
void SegmentInfo::clear_model_metadata() {
  if (model_metadata_ != nullptr) model_metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SegmentInfo::SegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:segmentation_platform.proto.SegmentInfo)
}
SegmentInfo::SegmentInfo(const SegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_model_metadata()) {
    model_metadata_ = new ::segmentation_platform::proto::SegmentationModelMetadata(*from.model_metadata_);
  } else {
    model_metadata_ = nullptr;
  }
  if (from._internal_has_prediction_result()) {
    prediction_result_ = new ::segmentation_platform::proto::PredictionResult(*from.prediction_result_);
  } else {
    prediction_result_ = nullptr;
  }
  ::memcpy(&model_version_, &from.model_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_id_) -
    reinterpret_cast<char*>(&model_version_)) + sizeof(segment_id_));
  // @@protoc_insertion_point(copy_constructor:segmentation_platform.proto.SegmentInfo)
}

inline void SegmentInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_id_) -
    reinterpret_cast<char*>(&model_metadata_)) + sizeof(segment_id_));
}

SegmentInfo::~SegmentInfo() {
  // @@protoc_insertion_point(destructor:segmentation_platform.proto.SegmentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete model_metadata_;
  if (this != internal_default_instance()) delete prediction_result_;
}

void SegmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:segmentation_platform.proto.SegmentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(model_metadata_ != nullptr);
      model_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prediction_result_ != nullptr);
      prediction_result_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&model_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_id_) -
        reinterpret_cast<char*>(&model_version_)) + sizeof(segment_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SegmentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .segmentation_platform.proto.SegmentId segment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::segmentation_platform::proto::SegmentId_IsValid(val))) {
            _internal_set_segment_id(static_cast<::segmentation_platform::proto::SegmentId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .segmentation_platform.proto.SegmentationModelMetadata model_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .segmentation_platform.proto.PredictionResult prediction_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prediction_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 model_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_model_version(&has_bits);
          model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 model_update_time_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_model_update_time_s(&has_bits);
          model_update_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SegmentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmentation_platform.proto.SegmentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .segmentation_platform.proto.SegmentId segment_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_segment_id(), target);
  }

  // optional .segmentation_platform.proto.SegmentationModelMetadata model_metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model_metadata(this),
        _Internal::model_metadata(this).GetCachedSize(), target, stream);
  }

  // optional .segmentation_platform.proto.PredictionResult prediction_result = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::prediction_result(this),
        _Internal::prediction_result(this).GetCachedSize(), target, stream);
  }

  // optional int64 model_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_model_version(), target);
  }

  // optional int64 model_update_time_s = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_model_update_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:segmentation_platform.proto.SegmentInfo)
  return target;
}

size_t SegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:segmentation_platform.proto.SegmentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .segmentation_platform.proto.SegmentationModelMetadata model_metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_metadata_);
    }

    // optional .segmentation_platform.proto.PredictionResult prediction_result = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prediction_result_);
    }

    // optional int64 model_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_model_version());
    }

    // optional int64 model_update_time_s = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_model_update_time_s());
    }

    // optional .segmentation_platform.proto.SegmentId segment_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_segment_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SegmentInfo*>(
      &from));
}

void SegmentInfo::MergeFrom(const SegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmentation_platform.proto.SegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_model_metadata()->::segmentation_platform::proto::SegmentationModelMetadata::MergeFrom(from._internal_model_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prediction_result()->::segmentation_platform::proto::PredictionResult::MergeFrom(from._internal_prediction_result());
    }
    if (cached_has_bits & 0x00000004u) {
      model_version_ = from.model_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      model_update_time_s_ = from.model_update_time_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      segment_id_ = from.segment_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SegmentInfo::CopyFrom(const SegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmentation_platform.proto.SegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentInfo::IsInitialized() const {
  return true;
}

void SegmentInfo::InternalSwap(SegmentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentInfo, segment_id_)
      + sizeof(SegmentInfo::segment_id_)
      - PROTOBUF_FIELD_OFFSET(SegmentInfo, model_metadata_)>(
          reinterpret_cast<char*>(&model_metadata_),
          reinterpret_cast<char*>(&other->model_metadata_));
}

std::string SegmentInfo::GetTypeName() const {
  return "segmentation_platform.proto.SegmentInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace segmentation_platform
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::segmentation_platform::proto::PredictionResult*
Arena::CreateMaybeMessage< ::segmentation_platform::proto::PredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::segmentation_platform::proto::PredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::segmentation_platform::proto::SegmentInfo*
Arena::CreateMaybeMessage< ::segmentation_platform::proto::SegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::segmentation_platform::proto::SegmentInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
