// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/paintpreview/player/PlayerCompositorDelegateImpl

#ifndef org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_JNI
#define org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl[];
const char kClassPath_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl[] =
    "org/chromium/components/paintpreview/player/PlayerCompositorDelegateImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz(nullptr);
#ifndef org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz_defined
#define org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz_defined
inline jclass org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl,
      &g_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace paint_preview {

static jlong JNI_PlayerCompositorDelegateImpl_Initialize(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jlong nativePaintPreviewBaseService,
    jlong captureResultPtr,
    const base::android::JavaParamRef<jstring>& urlSpec,
    const base::android::JavaParamRef<jstring>& directoryKey,
    jboolean mainFrameMode,
    const base::android::JavaParamRef<jobject>& compositorErrorCallback,
    jboolean isLowMemory);

JNI_GENERATOR_EXPORT jlong Java_J_N_MP_11CaX6(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong nativePaintPreviewBaseService,
    jlong captureResultPtr,
    jstring urlSpec,
    jstring directoryKey,
    jboolean mainFrameMode,
    jobject compositorErrorCallback,
    jboolean isLowMemory) {
  return JNI_PlayerCompositorDelegateImpl_Initialize(env, base::android::JavaParamRef<jobject>(env,
      caller), nativePaintPreviewBaseService, captureResultPtr,
      base::android::JavaParamRef<jstring>(env, urlSpec), base::android::JavaParamRef<jstring>(env,
      directoryKey), mainFrameMode, base::android::JavaParamRef<jobject>(env,
      compositorErrorCallback), isLowMemory);
}

JNI_GENERATOR_EXPORT void Java_J_N_MIRVkfIx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlayerCompositorDelegateAndroid) {
  PlayerCompositorDelegateAndroid* native =
      reinterpret_cast<PlayerCompositorDelegateAndroid*>(nativePlayerCompositorDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MiIDqW7F(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlayerCompositorDelegateAndroid,
    jobject frameGuid,
    jobject bitmapCallback,
    jobject errorCallback,
    jfloat scaleFactor,
    jint clipX,
    jint clipY,
    jint clipWidth,
    jint clipHeight) {
  PlayerCompositorDelegateAndroid* native =
      reinterpret_cast<PlayerCompositorDelegateAndroid*>(nativePlayerCompositorDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestBitmap", 0);
  return native->RequestBitmap(env, base::android::JavaParamRef<jobject>(env, frameGuid),
      base::android::JavaParamRef<jobject>(env, bitmapCallback),
      base::android::JavaParamRef<jobject>(env, errorCallback), scaleFactor, clipX, clipY,
      clipWidth, clipHeight);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MNwIEnLr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlayerCompositorDelegateAndroid,
    jint requestId) {
  PlayerCompositorDelegateAndroid* native =
      reinterpret_cast<PlayerCompositorDelegateAndroid*>(nativePlayerCompositorDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelBitmapRequest", false);
  return native->CancelBitmapRequest(env, requestId);
}

JNI_GENERATOR_EXPORT void Java_J_N_M_00024_00024iPM7t(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlayerCompositorDelegateAndroid) {
  PlayerCompositorDelegateAndroid* native =
      reinterpret_cast<PlayerCompositorDelegateAndroid*>(nativePlayerCompositorDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelAllBitmapRequests");
  return native->CancelAllBitmapRequests(env);
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MqJDIMXF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlayerCompositorDelegateAndroid,
    jobject frameGuid,
    jint x,
    jint y) {
  PlayerCompositorDelegateAndroid* native =
      reinterpret_cast<PlayerCompositorDelegateAndroid*>(nativePlayerCompositorDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnClick", NULL);
  return native->OnClick(env, base::android::JavaParamRef<jobject>(env, frameGuid), x, y).Release();
}

JNI_GENERATOR_EXPORT jintArray Java_J_N_MMWNsnld(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlayerCompositorDelegateAndroid) {
  PlayerCompositorDelegateAndroid* native =
      reinterpret_cast<PlayerCompositorDelegateAndroid*>(nativePlayerCompositorDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRootFrameOffsets", NULL);
  return native->GetRootFrameOffsets(env).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MVENKETz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlayerCompositorDelegateAndroid,
    jboolean compressOnClose) {
  PlayerCompositorDelegateAndroid* native =
      reinterpret_cast<PlayerCompositorDelegateAndroid*>(nativePlayerCompositorDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCompressOnClose");
  return native->SetCompressOnClose(env, compressOnClose);
}


static std::atomic<jmethodID>
    g_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_onCompositorReady(nullptr);
static void Java_PlayerCompositorDelegateImpl_onCompositorReady(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& rootFrameGuid,
    const base::android::JavaRef<jobjectArray>& frameGuids,
    const base::android::JavaRef<jintArray>& frameContentSize,
    const base::android::JavaRef<jintArray>& scrollOffsets,
    const base::android::JavaRef<jintArray>& subFramesCount,
    const base::android::JavaRef<jobjectArray>& subFrameGuids,
    const base::android::JavaRef<jintArray>& subFrameClipRects,
    jfloat pageScaleFactor,
    jlong nativeAxTree) {
  jclass clazz =
      org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onCompositorReady",
"(Lorg/chromium/base/UnguessableToken;[Lorg/chromium/base/UnguessableToken;[I[I[I[Lorg/chromium/base/UnguessableToken;[IFJ)V",
&g_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_onCompositorReady);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, rootFrameGuid.obj(), frameGuids.obj(),
              frameContentSize.obj(), scrollOffsets.obj(), subFramesCount.obj(),
              subFrameGuids.obj(), subFrameClipRects.obj(), pageScaleFactor, nativeAxTree);
}

static std::atomic<jmethodID>
    g_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_onModerateMemoryPressure(nullptr);
static void Java_PlayerCompositorDelegateImpl_onModerateMemoryPressure(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onModerateMemoryPressure",
          "()V",
&g_org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_onModerateMemoryPressure);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace paint_preview

#endif  // org_chromium_components_paintpreview_player_PlayerCompositorDelegateImpl_JNI
