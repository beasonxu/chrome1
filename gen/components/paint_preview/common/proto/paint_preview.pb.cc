// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paint_preview.proto

#include "paint_preview.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace paint_preview {
PROTOBUF_CONSTEXPR RectProto::RectProto(
    ::_pbi::ConstantInitialized)
  : x_(int64_t{0})
  , y_(int64_t{0})
  , width_(int64_t{0})
  , height_(int64_t{0}){}
struct RectProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectProtoDefaultTypeInternal() {}
  union {
    RectProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectProtoDefaultTypeInternal _RectProto_default_instance_;
PROTOBUF_CONSTEXPR LinkDataProto::LinkDataProto(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rect_(nullptr){}
struct LinkDataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkDataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkDataProtoDefaultTypeInternal() {}
  union {
    LinkDataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkDataProtoDefaultTypeInternal _LinkDataProto_default_instance_;
PROTOBUF_CONSTEXPR ContentIdEmbeddingTokenPairProto::ContentIdEmbeddingTokenPairProto(
    ::_pbi::ConstantInitialized)
  : embedding_token_low_(uint64_t{0u})
  , embedding_token_high_(uint64_t{0u})
  , content_id_(0u){}
struct ContentIdEmbeddingTokenPairProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentIdEmbeddingTokenPairProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentIdEmbeddingTokenPairProtoDefaultTypeInternal() {}
  union {
    ContentIdEmbeddingTokenPairProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentIdEmbeddingTokenPairProtoDefaultTypeInternal _ContentIdEmbeddingTokenPairProto_default_instance_;
PROTOBUF_CONSTEXPR PaintPreviewFrameProto::PaintPreviewFrameProto(
    ::_pbi::ConstantInitialized)
  : links_()
  , content_id_to_embedding_tokens_()
  , file_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , embedding_token_low_(uint64_t{0u})
  , embedding_token_high_(uint64_t{0u})
  , is_main_frame_(false)
  , scroll_offset_x_(0u)
  , scroll_offset_y_(0u)
  , frame_offset_x_(0u)
  , frame_offset_y_(0u){}
struct PaintPreviewFrameProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaintPreviewFrameProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaintPreviewFrameProtoDefaultTypeInternal() {}
  union {
    PaintPreviewFrameProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaintPreviewFrameProtoDefaultTypeInternal _PaintPreviewFrameProto_default_instance_;
PROTOBUF_CONSTEXPR ChromeVersionProto::ChromeVersionProto(
    ::_pbi::ConstantInitialized)
  : major_(uint64_t{0u})
  , minor_(uint64_t{0u})
  , build_(uint64_t{0u})
  , patch_(uint64_t{0u}){}
struct ChromeVersionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeVersionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeVersionProtoDefaultTypeInternal() {}
  union {
    ChromeVersionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeVersionProtoDefaultTypeInternal _ChromeVersionProto_default_instance_;
PROTOBUF_CONSTEXPR MetadataProto::MetadataProto(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chrome_version_(nullptr)
  , version_(uint64_t{0u})
  , page_scale_factor_(0){}
struct MetadataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataProtoDefaultTypeInternal() {}
  union {
    MetadataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataProtoDefaultTypeInternal _MetadataProto_default_instance_;
PROTOBUF_CONSTEXPR PaintPreviewProto::PaintPreviewProto(
    ::_pbi::ConstantInitialized)
  : subframes_()
  , root_frame_(nullptr)
  , metadata_(nullptr){}
struct PaintPreviewProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaintPreviewProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaintPreviewProtoDefaultTypeInternal() {}
  union {
    PaintPreviewProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaintPreviewProtoDefaultTypeInternal _PaintPreviewProto_default_instance_;
}  // namespace paint_preview
namespace paint_preview {

// ===================================================================

class RectProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RectProto>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RectProto::RectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:paint_preview.RectProto)
}
RectProto::RectProto(const RectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:paint_preview.RectProto)
}

inline void RectProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

RectProto::~RectProto() {
  // @@protoc_insertion_point(destructor:paint_preview.RectProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RectProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:paint_preview.RectProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&x_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RectProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RectProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paint_preview.RectProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_x(), target);
  }

  // optional int64 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_y(), target);
  }

  // optional int64 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_width(), target);
  }

  // optional int64 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paint_preview.RectProto)
  return target;
}

size_t RectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paint_preview.RectProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x());
    }

    // optional int64 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y());
    }

    // optional int64 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_width());
    }

    // optional int64 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RectProto*>(
      &from));
}

void RectProto::MergeFrom(const RectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paint_preview.RectProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RectProto::CopyFrom(const RectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paint_preview.RectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectProto::IsInitialized() const {
  return true;
}

void RectProto::InternalSwap(RectProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectProto, height_)
      + sizeof(RectProto::height_)
      - PROTOBUF_FIELD_OFFSET(RectProto, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

std::string RectProto::GetTypeName() const {
  return "paint_preview.RectProto";
}


// ===================================================================

class LinkDataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkDataProto>()._has_bits_);
  static const ::paint_preview::RectProto& rect(const LinkDataProto* msg);
  static void set_has_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::paint_preview::RectProto&
LinkDataProto::_Internal::rect(const LinkDataProto* msg) {
  return *msg->rect_;
}
LinkDataProto::LinkDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:paint_preview.LinkDataProto)
}
LinkDataProto::LinkDataProto(const LinkDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_rect()) {
    rect_ = new ::paint_preview::RectProto(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:paint_preview.LinkDataProto)
}

inline void LinkDataProto::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rect_ = nullptr;
}

LinkDataProto::~LinkDataProto() {
  // @@protoc_insertion_point(destructor:paint_preview.LinkDataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkDataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  if (this != internal_default_instance()) delete rect_;
}

void LinkDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:paint_preview.LinkDataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rect_ != nullptr);
      rect_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LinkDataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .paint_preview.RectProto rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkDataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paint_preview.LinkDataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .paint_preview.RectProto rect = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rect(this),
        _Internal::rect(this).GetCachedSize(), target, stream);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paint_preview.LinkDataProto)
  return target;
}

size_t LinkDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paint_preview.LinkDataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional .paint_preview.RectProto rect = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rect_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkDataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LinkDataProto*>(
      &from));
}

void LinkDataProto::MergeFrom(const LinkDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paint_preview.LinkDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rect()->::paint_preview::RectProto::MergeFrom(from._internal_rect());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LinkDataProto::CopyFrom(const LinkDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paint_preview.LinkDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkDataProto::IsInitialized() const {
  return true;
}

void LinkDataProto::InternalSwap(LinkDataProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(rect_, other->rect_);
}

std::string LinkDataProto::GetTypeName() const {
  return "paint_preview.LinkDataProto";
}


// ===================================================================

class ContentIdEmbeddingTokenPairProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentIdEmbeddingTokenPairProto>()._has_bits_);
  static void set_has_content_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_embedding_token_low(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_embedding_token_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ContentIdEmbeddingTokenPairProto::ContentIdEmbeddingTokenPairProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:paint_preview.ContentIdEmbeddingTokenPairProto)
}
ContentIdEmbeddingTokenPairProto::ContentIdEmbeddingTokenPairProto(const ContentIdEmbeddingTokenPairProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&embedding_token_low_, &from.embedding_token_low_,
    static_cast<size_t>(reinterpret_cast<char*>(&content_id_) -
    reinterpret_cast<char*>(&embedding_token_low_)) + sizeof(content_id_));
  // @@protoc_insertion_point(copy_constructor:paint_preview.ContentIdEmbeddingTokenPairProto)
}

inline void ContentIdEmbeddingTokenPairProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&embedding_token_low_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&content_id_) -
    reinterpret_cast<char*>(&embedding_token_low_)) + sizeof(content_id_));
}

ContentIdEmbeddingTokenPairProto::~ContentIdEmbeddingTokenPairProto() {
  // @@protoc_insertion_point(destructor:paint_preview.ContentIdEmbeddingTokenPairProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentIdEmbeddingTokenPairProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContentIdEmbeddingTokenPairProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentIdEmbeddingTokenPairProto::Clear() {
// @@protoc_insertion_point(message_clear_start:paint_preview.ContentIdEmbeddingTokenPairProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&embedding_token_low_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&content_id_) -
        reinterpret_cast<char*>(&embedding_token_low_)) + sizeof(content_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ContentIdEmbeddingTokenPairProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 content_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_content_id(&has_bits);
          content_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 embedding_token_low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_embedding_token_low(&has_bits);
          embedding_token_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 embedding_token_high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_embedding_token_high(&has_bits);
          embedding_token_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentIdEmbeddingTokenPairProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paint_preview.ContentIdEmbeddingTokenPairProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 content_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_content_id(), target);
  }

  // optional uint64 embedding_token_low = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_embedding_token_low(), target);
  }

  // optional uint64 embedding_token_high = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_embedding_token_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paint_preview.ContentIdEmbeddingTokenPairProto)
  return target;
}

size_t ContentIdEmbeddingTokenPairProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paint_preview.ContentIdEmbeddingTokenPairProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 embedding_token_low = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_embedding_token_low());
    }

    // optional uint64 embedding_token_high = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_embedding_token_high());
    }

    // optional uint32 content_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_content_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentIdEmbeddingTokenPairProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ContentIdEmbeddingTokenPairProto*>(
      &from));
}

void ContentIdEmbeddingTokenPairProto::MergeFrom(const ContentIdEmbeddingTokenPairProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paint_preview.ContentIdEmbeddingTokenPairProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      embedding_token_low_ = from.embedding_token_low_;
    }
    if (cached_has_bits & 0x00000002u) {
      embedding_token_high_ = from.embedding_token_high_;
    }
    if (cached_has_bits & 0x00000004u) {
      content_id_ = from.content_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ContentIdEmbeddingTokenPairProto::CopyFrom(const ContentIdEmbeddingTokenPairProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paint_preview.ContentIdEmbeddingTokenPairProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentIdEmbeddingTokenPairProto::IsInitialized() const {
  return true;
}

void ContentIdEmbeddingTokenPairProto::InternalSwap(ContentIdEmbeddingTokenPairProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentIdEmbeddingTokenPairProto, content_id_)
      + sizeof(ContentIdEmbeddingTokenPairProto::content_id_)
      - PROTOBUF_FIELD_OFFSET(ContentIdEmbeddingTokenPairProto, embedding_token_low_)>(
          reinterpret_cast<char*>(&embedding_token_low_),
          reinterpret_cast<char*>(&other->embedding_token_low_));
}

std::string ContentIdEmbeddingTokenPairProto::GetTypeName() const {
  return "paint_preview.ContentIdEmbeddingTokenPairProto";
}


// ===================================================================

class PaintPreviewFrameProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PaintPreviewFrameProto>()._has_bits_);
  static void set_has_embedding_token_low(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_embedding_token_high(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_main_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scroll_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scroll_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_frame_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_frame_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PaintPreviewFrameProto::PaintPreviewFrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  links_(arena),
  content_id_to_embedding_tokens_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:paint_preview.PaintPreviewFrameProto)
}
PaintPreviewFrameProto::PaintPreviewFrameProto(const PaintPreviewFrameProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      links_(from.links_),
      content_id_to_embedding_tokens_(from.content_id_to_embedding_tokens_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_path()) {
    file_path_.Set(from._internal_file_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&embedding_token_low_, &from.embedding_token_low_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_offset_y_) -
    reinterpret_cast<char*>(&embedding_token_low_)) + sizeof(frame_offset_y_));
  // @@protoc_insertion_point(copy_constructor:paint_preview.PaintPreviewFrameProto)
}

inline void PaintPreviewFrameProto::SharedCtor() {
file_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&embedding_token_low_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_offset_y_) -
    reinterpret_cast<char*>(&embedding_token_low_)) + sizeof(frame_offset_y_));
}

PaintPreviewFrameProto::~PaintPreviewFrameProto() {
  // @@protoc_insertion_point(destructor:paint_preview.PaintPreviewFrameProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaintPreviewFrameProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.Destroy();
}

void PaintPreviewFrameProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaintPreviewFrameProto::Clear() {
// @@protoc_insertion_point(message_clear_start:paint_preview.PaintPreviewFrameProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  content_id_to_embedding_tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&embedding_token_low_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_offset_y_) -
        reinterpret_cast<char*>(&embedding_token_low_)) + sizeof(frame_offset_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PaintPreviewFrameProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 embedding_token_low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_embedding_token_low(&has_bits);
          embedding_token_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 embedding_token_high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_embedding_token_high(&has_bits);
          embedding_token_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_main_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_main_frame(&has_bits);
          is_main_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .paint_preview.LinkDataProto links = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .paint_preview.ContentIdEmbeddingTokenPairProto content_id_to_embedding_tokens = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_id_to_embedding_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scroll_offset_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_scroll_offset_x(&has_bits);
          scroll_offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scroll_offset_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_scroll_offset_y(&has_bits);
          scroll_offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_offset_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_frame_offset_x(&has_bits);
          frame_offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_offset_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_frame_offset_y(&has_bits);
          frame_offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaintPreviewFrameProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paint_preview.PaintPreviewFrameProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 embedding_token_low = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_embedding_token_low(), target);
  }

  // optional uint64 embedding_token_high = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_embedding_token_high(), target);
  }

  // optional bool is_main_frame = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_main_frame(), target);
  }

  // optional string file_path = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_path(), target);
  }

  // repeated .paint_preview.LinkDataProto links = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .paint_preview.ContentIdEmbeddingTokenPairProto content_id_to_embedding_tokens = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_id_to_embedding_tokens_size()); i < n; i++) {
    const auto& repfield = this->_internal_content_id_to_embedding_tokens(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 scroll_offset_x = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_scroll_offset_x(), target);
  }

  // optional uint32 scroll_offset_y = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_scroll_offset_y(), target);
  }

  // optional uint32 frame_offset_x = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_frame_offset_x(), target);
  }

  // optional uint32 frame_offset_y = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_frame_offset_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paint_preview.PaintPreviewFrameProto)
  return target;
}

size_t PaintPreviewFrameProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paint_preview.PaintPreviewFrameProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paint_preview.LinkDataProto links = 5;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .paint_preview.ContentIdEmbeddingTokenPairProto content_id_to_embedding_tokens = 6;
  total_size += 1UL * this->_internal_content_id_to_embedding_tokens_size();
  for (const auto& msg : this->content_id_to_embedding_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_path = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_path());
    }

    // optional uint64 embedding_token_low = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_embedding_token_low());
    }

    // optional uint64 embedding_token_high = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_embedding_token_high());
    }

    // optional bool is_main_frame = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 scroll_offset_x = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scroll_offset_x());
    }

    // optional uint32 scroll_offset_y = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scroll_offset_y());
    }

    // optional uint32 frame_offset_x = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_offset_x());
    }

    // optional uint32 frame_offset_y = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_offset_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaintPreviewFrameProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PaintPreviewFrameProto*>(
      &from));
}

void PaintPreviewFrameProto::MergeFrom(const PaintPreviewFrameProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paint_preview.PaintPreviewFrameProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  content_id_to_embedding_tokens_.MergeFrom(from.content_id_to_embedding_tokens_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_path(from._internal_file_path());
    }
    if (cached_has_bits & 0x00000002u) {
      embedding_token_low_ = from.embedding_token_low_;
    }
    if (cached_has_bits & 0x00000004u) {
      embedding_token_high_ = from.embedding_token_high_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_main_frame_ = from.is_main_frame_;
    }
    if (cached_has_bits & 0x00000010u) {
      scroll_offset_x_ = from.scroll_offset_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      scroll_offset_y_ = from.scroll_offset_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      frame_offset_x_ = from.frame_offset_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      frame_offset_y_ = from.frame_offset_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PaintPreviewFrameProto::CopyFrom(const PaintPreviewFrameProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paint_preview.PaintPreviewFrameProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaintPreviewFrameProto::IsInitialized() const {
  return true;
}

void PaintPreviewFrameProto::InternalSwap(PaintPreviewFrameProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  links_.InternalSwap(&other->links_);
  content_id_to_embedding_tokens_.InternalSwap(&other->content_id_to_embedding_tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaintPreviewFrameProto, frame_offset_y_)
      + sizeof(PaintPreviewFrameProto::frame_offset_y_)
      - PROTOBUF_FIELD_OFFSET(PaintPreviewFrameProto, embedding_token_low_)>(
          reinterpret_cast<char*>(&embedding_token_low_),
          reinterpret_cast<char*>(&other->embedding_token_low_));
}

std::string PaintPreviewFrameProto::GetTypeName() const {
  return "paint_preview.PaintPreviewFrameProto";
}


// ===================================================================

class ChromeVersionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeVersionProto>()._has_bits_);
  static void set_has_major(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_patch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChromeVersionProto::ChromeVersionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:paint_preview.ChromeVersionProto)
}
ChromeVersionProto::ChromeVersionProto(const ChromeVersionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:paint_preview.ChromeVersionProto)
}

inline void ChromeVersionProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

ChromeVersionProto::~ChromeVersionProto() {
  // @@protoc_insertion_point(destructor:paint_preview.ChromeVersionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeVersionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeVersionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeVersionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:paint_preview.ChromeVersionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&major_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&patch_) -
        reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeVersionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_major(&has_bits);
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minor(&has_bits);
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 build = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_build(&has_bits);
          build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 patch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_patch(&has_bits);
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeVersionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paint_preview.ChromeVersionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 major = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_major(), target);
  }

  // optional uint64 minor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_minor(), target);
  }

  // optional uint64 build = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_build(), target);
  }

  // optional uint64 patch = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paint_preview.ChromeVersionProto)
  return target;
}

size_t ChromeVersionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paint_preview.ChromeVersionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 major = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_major());
    }

    // optional uint64 minor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_minor());
    }

    // optional uint64 build = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_build());
    }

    // optional uint64 patch = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_patch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeVersionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeVersionProto*>(
      &from));
}

void ChromeVersionProto::MergeFrom(const ChromeVersionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paint_preview.ChromeVersionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      major_ = from.major_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_ = from.minor_;
    }
    if (cached_has_bits & 0x00000004u) {
      build_ = from.build_;
    }
    if (cached_has_bits & 0x00000008u) {
      patch_ = from.patch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeVersionProto::CopyFrom(const ChromeVersionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paint_preview.ChromeVersionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeVersionProto::IsInitialized() const {
  return true;
}

void ChromeVersionProto::InternalSwap(ChromeVersionProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeVersionProto, patch_)
      + sizeof(ChromeVersionProto::patch_)
      - PROTOBUF_FIELD_OFFSET(ChromeVersionProto, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

std::string ChromeVersionProto::GetTypeName() const {
  return "paint_preview.ChromeVersionProto";
}


// ===================================================================

class MetadataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataProto>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::paint_preview::ChromeVersionProto& chrome_version(const MetadataProto* msg);
  static void set_has_chrome_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_page_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::paint_preview::ChromeVersionProto&
MetadataProto::_Internal::chrome_version(const MetadataProto* msg) {
  return *msg->chrome_version_;
}
MetadataProto::MetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:paint_preview.MetadataProto)
}
MetadataProto::MetadataProto(const MetadataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chrome_version()) {
    chrome_version_ = new ::paint_preview::ChromeVersionProto(*from.chrome_version_);
  } else {
    chrome_version_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_scale_factor_) -
    reinterpret_cast<char*>(&version_)) + sizeof(page_scale_factor_));
  // @@protoc_insertion_point(copy_constructor:paint_preview.MetadataProto)
}

inline void MetadataProto::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chrome_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_scale_factor_) -
    reinterpret_cast<char*>(&chrome_version_)) + sizeof(page_scale_factor_));
}

MetadataProto::~MetadataProto() {
  // @@protoc_insertion_point(destructor:paint_preview.MetadataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetadataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  if (this != internal_default_instance()) delete chrome_version_;
}

void MetadataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetadataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:paint_preview.MetadataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chrome_version_ != nullptr);
      chrome_version_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_scale_factor_) -
        reinterpret_cast<char*>(&version_)) + sizeof(page_scale_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MetadataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .paint_preview.ChromeVersionProto chrome_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float page_scale_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_page_scale_factor(&has_bits);
          page_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetadataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paint_preview.MetadataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  // optional .paint_preview.ChromeVersionProto chrome_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chrome_version(this),
        _Internal::chrome_version(this).GetCachedSize(), target, stream);
  }

  // optional float page_scale_factor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_page_scale_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paint_preview.MetadataProto)
  return target;
}

size_t MetadataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paint_preview.MetadataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional .paint_preview.ChromeVersionProto chrome_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_version_);
    }

    // optional uint64 version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_version());
    }

    // optional float page_scale_factor = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetadataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MetadataProto*>(
      &from));
}

void MetadataProto::MergeFrom(const MetadataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paint_preview.MetadataProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chrome_version()->::paint_preview::ChromeVersionProto::MergeFrom(from._internal_chrome_version());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      page_scale_factor_ = from.page_scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MetadataProto::CopyFrom(const MetadataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paint_preview.MetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataProto::IsInitialized() const {
  return true;
}

void MetadataProto::InternalSwap(MetadataProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetadataProto, page_scale_factor_)
      + sizeof(MetadataProto::page_scale_factor_)
      - PROTOBUF_FIELD_OFFSET(MetadataProto, chrome_version_)>(
          reinterpret_cast<char*>(&chrome_version_),
          reinterpret_cast<char*>(&other->chrome_version_));
}

std::string MetadataProto::GetTypeName() const {
  return "paint_preview.MetadataProto";
}


// ===================================================================

class PaintPreviewProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PaintPreviewProto>()._has_bits_);
  static const ::paint_preview::PaintPreviewFrameProto& root_frame(const PaintPreviewProto* msg);
  static void set_has_root_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::paint_preview::MetadataProto& metadata(const PaintPreviewProto* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::paint_preview::PaintPreviewFrameProto&
PaintPreviewProto::_Internal::root_frame(const PaintPreviewProto* msg) {
  return *msg->root_frame_;
}
const ::paint_preview::MetadataProto&
PaintPreviewProto::_Internal::metadata(const PaintPreviewProto* msg) {
  return *msg->metadata_;
}
PaintPreviewProto::PaintPreviewProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  subframes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:paint_preview.PaintPreviewProto)
}
PaintPreviewProto::PaintPreviewProto(const PaintPreviewProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      subframes_(from.subframes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_root_frame()) {
    root_frame_ = new ::paint_preview::PaintPreviewFrameProto(*from.root_frame_);
  } else {
    root_frame_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::paint_preview::MetadataProto(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:paint_preview.PaintPreviewProto)
}

inline void PaintPreviewProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&root_frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&root_frame_)) + sizeof(metadata_));
}

PaintPreviewProto::~PaintPreviewProto() {
  // @@protoc_insertion_point(destructor:paint_preview.PaintPreviewProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaintPreviewProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete root_frame_;
  if (this != internal_default_instance()) delete metadata_;
}

void PaintPreviewProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaintPreviewProto::Clear() {
// @@protoc_insertion_point(message_clear_start:paint_preview.PaintPreviewProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subframes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(root_frame_ != nullptr);
      root_frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PaintPreviewProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .paint_preview.PaintPreviewFrameProto root_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .paint_preview.PaintPreviewFrameProto subframes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subframes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .paint_preview.MetadataProto metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaintPreviewProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paint_preview.PaintPreviewProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .paint_preview.PaintPreviewFrameProto root_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::root_frame(this),
        _Internal::root_frame(this).GetCachedSize(), target, stream);
  }

  // repeated .paint_preview.PaintPreviewFrameProto subframes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subframes_size()); i < n; i++) {
    const auto& repfield = this->_internal_subframes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .paint_preview.MetadataProto metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paint_preview.PaintPreviewProto)
  return target;
}

size_t PaintPreviewProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paint_preview.PaintPreviewProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paint_preview.PaintPreviewFrameProto subframes = 2;
  total_size += 1UL * this->_internal_subframes_size();
  for (const auto& msg : this->subframes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .paint_preview.PaintPreviewFrameProto root_frame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_frame_);
    }

    // optional .paint_preview.MetadataProto metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaintPreviewProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PaintPreviewProto*>(
      &from));
}

void PaintPreviewProto::MergeFrom(const PaintPreviewProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paint_preview.PaintPreviewProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subframes_.MergeFrom(from.subframes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_root_frame()->::paint_preview::PaintPreviewFrameProto::MergeFrom(from._internal_root_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_metadata()->::paint_preview::MetadataProto::MergeFrom(from._internal_metadata());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PaintPreviewProto::CopyFrom(const PaintPreviewProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paint_preview.PaintPreviewProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaintPreviewProto::IsInitialized() const {
  return true;
}

void PaintPreviewProto::InternalSwap(PaintPreviewProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subframes_.InternalSwap(&other->subframes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaintPreviewProto, metadata_)
      + sizeof(PaintPreviewProto::metadata_)
      - PROTOBUF_FIELD_OFFSET(PaintPreviewProto, root_frame_)>(
          reinterpret_cast<char*>(&root_frame_),
          reinterpret_cast<char*>(&other->root_frame_));
}

std::string PaintPreviewProto::GetTypeName() const {
  return "paint_preview.PaintPreviewProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace paint_preview
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::paint_preview::RectProto*
Arena::CreateMaybeMessage< ::paint_preview::RectProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paint_preview::RectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::paint_preview::LinkDataProto*
Arena::CreateMaybeMessage< ::paint_preview::LinkDataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paint_preview::LinkDataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::paint_preview::ContentIdEmbeddingTokenPairProto*
Arena::CreateMaybeMessage< ::paint_preview::ContentIdEmbeddingTokenPairProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paint_preview::ContentIdEmbeddingTokenPairProto >(arena);
}
template<> PROTOBUF_NOINLINE ::paint_preview::PaintPreviewFrameProto*
Arena::CreateMaybeMessage< ::paint_preview::PaintPreviewFrameProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paint_preview::PaintPreviewFrameProto >(arena);
}
template<> PROTOBUF_NOINLINE ::paint_preview::ChromeVersionProto*
Arena::CreateMaybeMessage< ::paint_preview::ChromeVersionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paint_preview::ChromeVersionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::paint_preview::MetadataProto*
Arena::CreateMaybeMessage< ::paint_preview::MetadataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paint_preview::MetadataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::paint_preview::PaintPreviewProto*
Arena::CreateMaybeMessage< ::paint_preview::PaintPreviewProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paint_preview::PaintPreviewProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
