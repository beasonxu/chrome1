// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_feature_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_feature_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_feature_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_feature_5fevent_2eproto {
  static const uint32_t offsets[];
};
namespace feature_engagement {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_Count;
struct Event_CountDefaultTypeInternal;
extern Event_CountDefaultTypeInternal _Event_Count_default_instance_;
}  // namespace feature_engagement
PROTOBUF_NAMESPACE_OPEN
template<> ::feature_engagement::Event* Arena::CreateMaybeMessage<::feature_engagement::Event>(Arena*);
template<> ::feature_engagement::Event_Count* Arena::CreateMaybeMessage<::feature_engagement::Event_Count>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feature_engagement {

// ===================================================================

class Event_Count final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feature_engagement.Event.Count) */ {
 public:
  inline Event_Count() : Event_Count(nullptr) {}
  ~Event_Count() override;
  explicit PROTOBUF_CONSTEXPR Event_Count(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event_Count(const Event_Count& from);
  Event_Count(Event_Count&& from) noexcept
    : Event_Count() {
    *this = ::std::move(from);
  }

  inline Event_Count& operator=(const Event_Count& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_Count& operator=(Event_Count&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Event_Count& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event_Count* internal_default_instance() {
    return reinterpret_cast<const Event_Count*>(
               &_Event_Count_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event_Count& a, Event_Count& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Event_Count* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_Count* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event_Count* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event_Count>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Event_Count& from);
  void MergeFrom(const Event_Count& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event_Count* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feature_engagement.Event.Count";
  }
  protected:
  explicit Event_Count(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayFieldNumber = 1,
    kCountFieldNumber = 2,
    kSnoozeCountFieldNumber = 3,
  };
  // optional uint32 day = 1;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // optional uint32 snooze_count = 3;
  bool has_snooze_count() const;
  private:
  bool _internal_has_snooze_count() const;
  public:
  void clear_snooze_count();
  uint32_t snooze_count() const;
  void set_snooze_count(uint32_t value);
  private:
  uint32_t _internal_snooze_count() const;
  void _internal_set_snooze_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:feature_engagement.Event.Count)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t day_;
  uint32_t count_;
  uint32_t snooze_count_;
  friend struct ::TableStruct_feature_5fevent_2eproto;
};
// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feature_engagement.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feature_engagement.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Event_Count Count;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kNameFieldNumber = 1,
    kLastSnoozeTimeUsFieldNumber = 3,
    kSnoozeDismissedFieldNumber = 4,
  };
  // repeated .feature_engagement.Event.Count events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::feature_engagement::Event_Count* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feature_engagement::Event_Count >*
      mutable_events();
  private:
  const ::feature_engagement::Event_Count& _internal_events(int index) const;
  ::feature_engagement::Event_Count* _internal_add_events();
  public:
  const ::feature_engagement::Event_Count& events(int index) const;
  ::feature_engagement::Event_Count* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feature_engagement::Event_Count >&
      events() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int64 last_snooze_time_us = 3;
  bool has_last_snooze_time_us() const;
  private:
  bool _internal_has_last_snooze_time_us() const;
  public:
  void clear_last_snooze_time_us();
  int64_t last_snooze_time_us() const;
  void set_last_snooze_time_us(int64_t value);
  private:
  int64_t _internal_last_snooze_time_us() const;
  void _internal_set_last_snooze_time_us(int64_t value);
  public:

  // optional bool snooze_dismissed = 4;
  bool has_snooze_dismissed() const;
  private:
  bool _internal_has_snooze_dismissed() const;
  public:
  void clear_snooze_dismissed();
  bool snooze_dismissed() const;
  void set_snooze_dismissed(bool value);
  private:
  bool _internal_snooze_dismissed() const;
  void _internal_set_snooze_dismissed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:feature_engagement.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feature_engagement::Event_Count > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t last_snooze_time_us_;
  bool snooze_dismissed_;
  friend struct ::TableStruct_feature_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event_Count

// optional uint32 day = 1;
inline bool Event_Count::_internal_has_day() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Event_Count::has_day() const {
  return _internal_has_day();
}
inline void Event_Count::clear_day() {
  day_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Event_Count::_internal_day() const {
  return day_;
}
inline uint32_t Event_Count::day() const {
  // @@protoc_insertion_point(field_get:feature_engagement.Event.Count.day)
  return _internal_day();
}
inline void Event_Count::_internal_set_day(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  day_ = value;
}
inline void Event_Count::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:feature_engagement.Event.Count.day)
}

// optional uint32 count = 2;
inline bool Event_Count::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Event_Count::has_count() const {
  return _internal_has_count();
}
inline void Event_Count::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Event_Count::_internal_count() const {
  return count_;
}
inline uint32_t Event_Count::count() const {
  // @@protoc_insertion_point(field_get:feature_engagement.Event.Count.count)
  return _internal_count();
}
inline void Event_Count::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void Event_Count::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:feature_engagement.Event.Count.count)
}

// optional uint32 snooze_count = 3;
inline bool Event_Count::_internal_has_snooze_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Event_Count::has_snooze_count() const {
  return _internal_has_snooze_count();
}
inline void Event_Count::clear_snooze_count() {
  snooze_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Event_Count::_internal_snooze_count() const {
  return snooze_count_;
}
inline uint32_t Event_Count::snooze_count() const {
  // @@protoc_insertion_point(field_get:feature_engagement.Event.Count.snooze_count)
  return _internal_snooze_count();
}
inline void Event_Count::_internal_set_snooze_count(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  snooze_count_ = value;
}
inline void Event_Count::set_snooze_count(uint32_t value) {
  _internal_set_snooze_count(value);
  // @@protoc_insertion_point(field_set:feature_engagement.Event.Count.snooze_count)
}

// -------------------------------------------------------------------

// Event

// optional string name = 1;
inline bool Event::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Event::has_name() const {
  return _internal_has_name();
}
inline void Event::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:feature_engagement.Event.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feature_engagement.Event.name)
}
inline std::string* Event::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:feature_engagement.Event.name)
  return _s;
}
inline const std::string& Event::_internal_name() const {
  return name_.Get();
}
inline void Event::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:feature_engagement.Event.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Event::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feature_engagement.Event.name)
}

// repeated .feature_engagement.Event.Count events = 2;
inline int Event::_internal_events_size() const {
  return events_.size();
}
inline int Event::events_size() const {
  return _internal_events_size();
}
inline void Event::clear_events() {
  events_.Clear();
}
inline ::feature_engagement::Event_Count* Event::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:feature_engagement.Event.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feature_engagement::Event_Count >*
Event::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:feature_engagement.Event.events)
  return &events_;
}
inline const ::feature_engagement::Event_Count& Event::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::feature_engagement::Event_Count& Event::events(int index) const {
  // @@protoc_insertion_point(field_get:feature_engagement.Event.events)
  return _internal_events(index);
}
inline ::feature_engagement::Event_Count* Event::_internal_add_events() {
  return events_.Add();
}
inline ::feature_engagement::Event_Count* Event::add_events() {
  ::feature_engagement::Event_Count* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:feature_engagement.Event.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feature_engagement::Event_Count >&
Event::events() const {
  // @@protoc_insertion_point(field_list:feature_engagement.Event.events)
  return events_;
}

// optional int64 last_snooze_time_us = 3;
inline bool Event::_internal_has_last_snooze_time_us() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Event::has_last_snooze_time_us() const {
  return _internal_has_last_snooze_time_us();
}
inline void Event::clear_last_snooze_time_us() {
  last_snooze_time_us_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Event::_internal_last_snooze_time_us() const {
  return last_snooze_time_us_;
}
inline int64_t Event::last_snooze_time_us() const {
  // @@protoc_insertion_point(field_get:feature_engagement.Event.last_snooze_time_us)
  return _internal_last_snooze_time_us();
}
inline void Event::_internal_set_last_snooze_time_us(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  last_snooze_time_us_ = value;
}
inline void Event::set_last_snooze_time_us(int64_t value) {
  _internal_set_last_snooze_time_us(value);
  // @@protoc_insertion_point(field_set:feature_engagement.Event.last_snooze_time_us)
}

// optional bool snooze_dismissed = 4;
inline bool Event::_internal_has_snooze_dismissed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Event::has_snooze_dismissed() const {
  return _internal_has_snooze_dismissed();
}
inline void Event::clear_snooze_dismissed() {
  snooze_dismissed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Event::_internal_snooze_dismissed() const {
  return snooze_dismissed_;
}
inline bool Event::snooze_dismissed() const {
  // @@protoc_insertion_point(field_get:feature_engagement.Event.snooze_dismissed)
  return _internal_snooze_dismissed();
}
inline void Event::_internal_set_snooze_dismissed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  snooze_dismissed_ = value;
}
inline void Event::set_snooze_dismissed(bool value) {
  _internal_set_snooze_dismissed(value);
  // @@protoc_insertion_point(field_set:feature_engagement.Event.snooze_dismissed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feature_engagement

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_feature_5fevent_2eproto
