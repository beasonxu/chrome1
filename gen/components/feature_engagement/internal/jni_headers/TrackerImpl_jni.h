// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/feature_engagement/internal/TrackerImpl

#ifndef org_chromium_components_feature_engagement_internal_TrackerImpl_JNI
#define org_chromium_components_feature_engagement_internal_TrackerImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_feature_1engagement_internal_TrackerImpl[];
const char kClassPath_org_chromium_components_feature_1engagement_internal_TrackerImpl[] =
    "org/chromium/components/feature_engagement/internal/TrackerImpl";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid[];
const char
    kClassPath_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid[]
    = "org/chromium/components/feature_engagement/internal/TrackerImpl$DisplayLockHandleAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(nullptr);
#ifndef org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz_defined
#define org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz_defined
inline jclass org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_feature_1engagement_internal_TrackerImpl,
      &g_org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz(nullptr);
#ifndef org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz_defined
#define org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz_defined
inline jclass
    org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid,
      &g_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace feature_engagement {

JNI_GENERATOR_EXPORT void Java_J_N_M0aLPz1m(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring event) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyEvent");
  return native->NotifyEvent(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, event));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mr_00024ygyBZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShouldTriggerHelpUI", false);
  return native->ShouldTriggerHelpUI(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, feature));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_M3inO0zt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShouldTriggerHelpUIWithSnooze", NULL);
  return native->ShouldTriggerHelpUIWithSnooze(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, feature)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_ME_00024bTNVi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "WouldTriggerHelpUI", false);
  return native->WouldTriggerHelpUI(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, feature));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MRyrQ9qM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature,
    jboolean fromWindow) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasEverTriggered", false);
  return native->HasEverTriggered(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, feature), fromWindow);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MtnFGh0Q(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTriggerState", 0);
  return native->GetTriggerState(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, feature));
}

JNI_GENERATOR_EXPORT void Java_J_N_M21A_1pP_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Dismissed");
  return native->Dismissed(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, feature));
}

JNI_GENERATOR_EXPORT void Java_J_N_MOZVkFuy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature,
    jint snoozeAction) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DismissedWithSnooze");
  return native->DismissedWithSnooze(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, feature), snoozeAction);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MdqbDqzZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AcquireDisplayLock", NULL);
  return native->AcquireDisplayLock(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MmhduNJ3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPriorityNotification");
  return native->SetPriorityNotification(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, feature));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MU51Y3Q_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPendingPriorityNotification", NULL);
  return native->GetPendingPriorityNotification(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_M4jLRdty(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature,
    jobject priorityNotificationHandler) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RegisterPriorityNotificationHandler");
  return native->RegisterPriorityNotificationHandler(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, feature),
      base::android::JavaParamRef<jobject>(env, priorityNotificationHandler));
}

JNI_GENERATOR_EXPORT void Java_J_N_M67MuK6a(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jstring feature) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "UnregisterPriorityNotificationHandler");
  return native->UnregisterPriorityNotificationHandler(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jstring>(env,
      feature));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MzNVGr12(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsInitialized", false);
  return native->IsInitialized(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MLFWzkLW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTrackerImplAndroid,
    jobject caller,
    jobject callback) {
  TrackerImplAndroid* native = reinterpret_cast<TrackerImplAndroid*>(nativeTrackerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddOnInitializedCallback");
  return native->AddOnInitializedCallback(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MeUI3Lbh(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDisplayLockHandleAndroid) {
  DisplayLockHandleAndroid* native =
      reinterpret_cast<DisplayLockHandleAndroid*>(nativeDisplayLockHandleAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Release");
  return native->Release(env);
}


static std::atomic<jmethodID>
    g_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_DisplayLockHandleAndroid_create(JNIEnv* env,
    jlong nativePtr) {
  jclass clazz =
      org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(J)Lorg/chromium/components/feature_engagement/internal/TrackerImpl$DisplayLockHandleAndroid;",
&g_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clearNativePtr(nullptr);
static void Java_DisplayLockHandleAndroid_clearNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePtr",
          "()V",
&g_org_chromium_components_feature_1engagement_internal_TrackerImpl_00024DisplayLockHandleAndroid_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_feature_1engagement_internal_TrackerImpl_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TrackerImpl_create(JNIEnv* env, jlong
    nativePtr) {
  jclass clazz = org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/components/feature_engagement/internal/TrackerImpl;",
          &g_org_chromium_components_feature_1engagement_internal_TrackerImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_feature_1engagement_internal_TrackerImpl_clearNativePtr(nullptr);
static void Java_TrackerImpl_clearNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePtr",
          "()V",
          &g_org_chromium_components_feature_1engagement_internal_TrackerImpl_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_feature_1engagement_internal_TrackerImpl_getNativePtr(nullptr);
static jlong Java_TrackerImpl_getNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePtr",
          "()J",
          &g_org_chromium_components_feature_1engagement_internal_TrackerImpl_getNativePtr);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_feature_1engagement_internal_TrackerImpl_createTriggerDetails(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TrackerImpl_createTriggerDetails(JNIEnv* env,
    jboolean shouldTriggerIph,
    jboolean shouldShowSnooze) {
  jclass clazz = org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_feature_1engagement_internal_TrackerImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createTriggerDetails",
          "(ZZ)Lorg/chromium/components/feature_engagement/TriggerDetails;",
          &g_org_chromium_components_feature_1engagement_internal_TrackerImpl_createTriggerDetails);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, shouldTriggerIph, shouldShowSnooze);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace feature_engagement

#endif  // org_chromium_components_feature_engagement_internal_TrackerImpl_JNI
