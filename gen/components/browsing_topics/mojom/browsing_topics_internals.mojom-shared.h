// components/browsing_topics/mojom/browsing_topics_internals.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_BROWSING_TOPICS_MOJOM_BROWSING_TOPICS_INTERNALS_MOJOM_SHARED_H_
#define COMPONENTS_BROWSING_TOPICS_MOJOM_BROWSING_TOPICS_INTERNALS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/browsing_topics/mojom/browsing_topics_internals.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace browsing_topics {
namespace mojom {
class WebUIBrowsingTopicsConfigurationDataView;

class WebUITopicDataView;

class WebUIEpochDataView;

class WebUIBrowsingTopicsStateDataView;

class WebUIModelInfoDataView;

class WebUIGetBrowsingTopicsStateResultDataView;
class WebUIGetModelInfoResultDataView;


}  // namespace mojom
}  // namespace browsing_topics

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::browsing_topics::mojom::WebUIBrowsingTopicsConfigurationDataView> {
  using Data = ::browsing_topics::mojom::internal::WebUIBrowsingTopicsConfiguration_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::browsing_topics::mojom::WebUITopicDataView> {
  using Data = ::browsing_topics::mojom::internal::WebUITopic_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::browsing_topics::mojom::WebUIEpochDataView> {
  using Data = ::browsing_topics::mojom::internal::WebUIEpoch_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::browsing_topics::mojom::WebUIBrowsingTopicsStateDataView> {
  using Data = ::browsing_topics::mojom::internal::WebUIBrowsingTopicsState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::browsing_topics::mojom::WebUIModelInfoDataView> {
  using Data = ::browsing_topics::mojom::internal::WebUIModelInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::browsing_topics::mojom::WebUIGetBrowsingTopicsStateResultDataView> {
  using Data = ::browsing_topics::mojom::internal::WebUIGetBrowsingTopicsStateResult_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

template <>
struct MojomTypeTraits<::browsing_topics::mojom::WebUIGetModelInfoResultDataView> {
  using Data = ::browsing_topics::mojom::internal::WebUIGetModelInfoResult_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace browsing_topics {
namespace mojom {
// Interface base classes. They are used for type safety check.
class PageHandlerInterfaceBase {};

using PageHandlerPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerInterfaceBase>;
using PageHandlerRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerInterfaceBase>;


class WebUIBrowsingTopicsConfigurationDataView {
 public:
  WebUIBrowsingTopicsConfigurationDataView() = default;

  WebUIBrowsingTopicsConfigurationDataView(
      internal::WebUIBrowsingTopicsConfiguration_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool browsing_topics_enabled() const {
    return data_->browsing_topics_enabled;
  }
  bool privacy_sandbox_ads_apis_override_enabled() const {
    return data_->privacy_sandbox_ads_apis_override_enabled;
  }
  bool privacy_sandbox_settings3_enabled() const {
    return data_->privacy_sandbox_settings3_enabled;
  }
  bool override_privacy_sandbox_settings_local_testing_enabled() const {
    return data_->override_privacy_sandbox_settings_local_testing_enabled;
  }
  bool browsing_topics_bypass_ip_is_publicly_routable_check_enabled() const {
    return data_->browsing_topics_bypass_ip_is_publicly_routable_check_enabled;
  }
  int32_t number_of_epochs_to_expose() const {
    return data_->number_of_epochs_to_expose;
  }
  inline void GetTimePeriodPerEpochDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimePeriodPerEpoch(UserType* output) {
    
    auto* pointer = data_->time_period_per_epoch.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
  int32_t number_of_top_topics_per_epoch() const {
    return data_->number_of_top_topics_per_epoch;
  }
  int32_t use_random_topic_probability_percent() const {
    return data_->use_random_topic_probability_percent;
  }
  int32_t number_of_epochs_of_observation_data_to_use_for_filtering() const {
    return data_->number_of_epochs_of_observation_data_to_use_for_filtering;
  }
  int32_t max_number_of_api_usage_context_domains_to_keep_per_topic() const {
    return data_->max_number_of_api_usage_context_domains_to_keep_per_topic;
  }
  int32_t max_number_of_api_usage_context_entries_to_load_per_epoch() const {
    return data_->max_number_of_api_usage_context_entries_to_load_per_epoch;
  }
  int32_t max_number_of_api_usage_context_domains_to_store_per_page_load() const {
    return data_->max_number_of_api_usage_context_domains_to_store_per_page_load;
  }
  int32_t config_version() const {
    return data_->config_version;
  }
  int32_t taxonomy_version() const {
    return data_->taxonomy_version;
  }
 private:
  internal::WebUIBrowsingTopicsConfiguration_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebUITopicDataView {
 public:
  WebUITopicDataView() = default;

  WebUITopicDataView(
      internal::WebUITopic_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t topic_id() const {
    return data_->topic_id;
  }
  inline void GetTopicNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTopicName(UserType* output) {
    
    auto* pointer = data_->topic_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  bool is_real_topic() const {
    return data_->is_real_topic;
  }
  inline void GetObservedByDomainsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadObservedByDomains(UserType* output) {
    
    auto* pointer = data_->observed_by_domains.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::WebUITopic_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebUIEpochDataView {
 public:
  WebUIEpochDataView() = default;

  WebUIEpochDataView(
      internal::WebUIEpoch_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTopicsDataView(
      mojo::ArrayDataView<WebUITopicDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTopics(UserType* output) {
    
    auto* pointer = data_->topics.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::browsing_topics::mojom::WebUITopicDataView>>(
        pointer, output, message_);
  }
  inline void GetCalculationTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCalculationTime(UserType* output) {
    
    auto* pointer = data_->calculation_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetModelVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadModelVersion(UserType* output) {
    
    auto* pointer = data_->model_version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetTaxonomyVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTaxonomyVersion(UserType* output) {
    
    auto* pointer = data_->taxonomy_version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebUIEpoch_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebUIBrowsingTopicsStateDataView {
 public:
  WebUIBrowsingTopicsStateDataView() = default;

  WebUIBrowsingTopicsStateDataView(
      internal::WebUIBrowsingTopicsState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEpochsDataView(
      mojo::ArrayDataView<WebUIEpochDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEpochs(UserType* output) {
    
    auto* pointer = data_->epochs.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::browsing_topics::mojom::WebUIEpochDataView>>(
        pointer, output, message_);
  }
  inline void GetNextScheduledCalculationTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNextScheduledCalculationTime(UserType* output) {
    
    auto* pointer = data_->next_scheduled_calculation_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebUIBrowsingTopicsState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebUIModelInfoDataView {
 public:
  WebUIModelInfoDataView() = default;

  WebUIModelInfoDataView(
      internal::WebUIModelInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetModelVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadModelVersion(UserType* output) {
    
    auto* pointer = data_->model_version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetModelFilePathDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadModelFilePath(UserType* output) {
    
    auto* pointer = data_->model_file_path.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebUIModelInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebUIGetBrowsingTopicsStateResultDataView {
 public:
  using Tag = internal::WebUIGetBrowsingTopicsStateResult_Data::WebUIGetBrowsingTopicsStateResult_Tag;

  WebUIGetBrowsingTopicsStateResultDataView() = default;

  WebUIGetBrowsingTopicsStateResultDataView(
      internal::WebUIGetBrowsingTopicsStateResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_override_status_message() const { return data_->tag == Tag::kOverrideStatusMessage; }
  inline void GetOverrideStatusMessageDataView(
      mojo::StringDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadOverrideStatusMessage(UserType* output) const {
    
    CHECK(is_override_status_message());
    return mojo::internal::Deserialize<mojo::StringDataView>(
        data_->data.f_override_status_message.Get(), output, message_);
  }
  bool is_browsing_topics_state() const { return data_->tag == Tag::kBrowsingTopicsState; }
  inline void GetBrowsingTopicsStateDataView(
      WebUIBrowsingTopicsStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadBrowsingTopicsState(UserType* output) const {
    
    CHECK(is_browsing_topics_state());
    return mojo::internal::Deserialize<::browsing_topics::mojom::WebUIBrowsingTopicsStateDataView>(
        data_->data.f_browsing_topics_state.Get(), output, message_);
  }

 private:
  internal::WebUIGetBrowsingTopicsStateResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebUIGetModelInfoResultDataView {
 public:
  using Tag = internal::WebUIGetModelInfoResult_Data::WebUIGetModelInfoResult_Tag;

  WebUIGetModelInfoResultDataView() = default;

  WebUIGetModelInfoResultDataView(
      internal::WebUIGetModelInfoResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_override_status_message() const { return data_->tag == Tag::kOverrideStatusMessage; }
  inline void GetOverrideStatusMessageDataView(
      mojo::StringDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadOverrideStatusMessage(UserType* output) const {
    
    CHECK(is_override_status_message());
    return mojo::internal::Deserialize<mojo::StringDataView>(
        data_->data.f_override_status_message.Get(), output, message_);
  }
  bool is_model_info() const { return data_->tag == Tag::kModelInfo; }
  inline void GetModelInfoDataView(
      WebUIModelInfoDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadModelInfo(UserType* output) const {
    
    CHECK(is_model_info());
    return mojo::internal::Deserialize<::browsing_topics::mojom::WebUIModelInfoDataView>(
        data_->data.f_model_info.Get(), output, message_);
  }

 private:
  internal::WebUIGetModelInfoResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace browsing_topics

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::browsing_topics::mojom::WebUIBrowsingTopicsConfigurationDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::browsing_topics::mojom::WebUIBrowsingTopicsConfigurationDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::browsing_topics::mojom::internal::WebUIBrowsingTopicsConfiguration_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->browsing_topics_enabled = Traits::browsing_topics_enabled(input);
    fragment->privacy_sandbox_ads_apis_override_enabled = Traits::privacy_sandbox_ads_apis_override_enabled(input);
    fragment->privacy_sandbox_settings3_enabled = Traits::privacy_sandbox_settings3_enabled(input);
    fragment->override_privacy_sandbox_settings_local_testing_enabled = Traits::override_privacy_sandbox_settings_local_testing_enabled(input);
    fragment->browsing_topics_bypass_ip_is_publicly_routable_check_enabled = Traits::browsing_topics_bypass_ip_is_publicly_routable_check_enabled(input);
    fragment->number_of_epochs_to_expose = Traits::number_of_epochs_to_expose(input);
    decltype(Traits::time_period_per_epoch(input)) in_time_period_per_epoch = Traits::time_period_per_epoch(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->time_period_per_epoch)::BaseType> time_period_per_epoch_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_time_period_per_epoch, time_period_per_epoch_fragment);
    fragment->time_period_per_epoch.Set(
        time_period_per_epoch_fragment.is_null() ? nullptr : time_period_per_epoch_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->time_period_per_epoch.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null time_period_per_epoch in WebUIBrowsingTopicsConfiguration struct");
    fragment->number_of_top_topics_per_epoch = Traits::number_of_top_topics_per_epoch(input);
    fragment->use_random_topic_probability_percent = Traits::use_random_topic_probability_percent(input);
    fragment->number_of_epochs_of_observation_data_to_use_for_filtering = Traits::number_of_epochs_of_observation_data_to_use_for_filtering(input);
    fragment->max_number_of_api_usage_context_domains_to_keep_per_topic = Traits::max_number_of_api_usage_context_domains_to_keep_per_topic(input);
    fragment->max_number_of_api_usage_context_entries_to_load_per_epoch = Traits::max_number_of_api_usage_context_entries_to_load_per_epoch(input);
    fragment->max_number_of_api_usage_context_domains_to_store_per_page_load = Traits::max_number_of_api_usage_context_domains_to_store_per_page_load(input);
    fragment->config_version = Traits::config_version(input);
    fragment->taxonomy_version = Traits::taxonomy_version(input);
  }

  static bool Deserialize(::browsing_topics::mojom::internal::WebUIBrowsingTopicsConfiguration_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::browsing_topics::mojom::WebUIBrowsingTopicsConfigurationDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::browsing_topics::mojom::WebUITopicDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::browsing_topics::mojom::WebUITopicDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::browsing_topics::mojom::internal::WebUITopic_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->topic_id = Traits::topic_id(input);
    decltype(Traits::topic_name(input)) in_topic_name = Traits::topic_name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->topic_name)::BaseType> topic_name_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_topic_name, topic_name_fragment);
    fragment->topic_name.Set(
        topic_name_fragment.is_null() ? nullptr : topic_name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->topic_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null topic_name in WebUITopic struct");
    fragment->is_real_topic = Traits::is_real_topic(input);
    decltype(Traits::observed_by_domains(input)) in_observed_by_domains = Traits::observed_by_domains(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->observed_by_domains)::BaseType>
        observed_by_domains_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams observed_by_domains_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_observed_by_domains, observed_by_domains_fragment, &observed_by_domains_validate_params);
    fragment->observed_by_domains.Set(
        observed_by_domains_fragment.is_null() ? nullptr : observed_by_domains_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->observed_by_domains.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null observed_by_domains in WebUITopic struct");
  }

  static bool Deserialize(::browsing_topics::mojom::internal::WebUITopic_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::browsing_topics::mojom::WebUITopicDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::browsing_topics::mojom::WebUIEpochDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::browsing_topics::mojom::WebUIEpochDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::browsing_topics::mojom::internal::WebUIEpoch_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::topics(input)) in_topics = Traits::topics(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->topics)::BaseType>
        topics_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams topics_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::browsing_topics::mojom::WebUITopicDataView>>(
        in_topics, topics_fragment, &topics_validate_params);
    fragment->topics.Set(
        topics_fragment.is_null() ? nullptr : topics_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->topics.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null topics in WebUIEpoch struct");
    decltype(Traits::calculation_time(input)) in_calculation_time = Traits::calculation_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->calculation_time)::BaseType> calculation_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_calculation_time, calculation_time_fragment);
    fragment->calculation_time.Set(
        calculation_time_fragment.is_null() ? nullptr : calculation_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->calculation_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null calculation_time in WebUIEpoch struct");
    decltype(Traits::model_version(input)) in_model_version = Traits::model_version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->model_version)::BaseType> model_version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_model_version, model_version_fragment);
    fragment->model_version.Set(
        model_version_fragment.is_null() ? nullptr : model_version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->model_version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null model_version in WebUIEpoch struct");
    decltype(Traits::taxonomy_version(input)) in_taxonomy_version = Traits::taxonomy_version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->taxonomy_version)::BaseType> taxonomy_version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_taxonomy_version, taxonomy_version_fragment);
    fragment->taxonomy_version.Set(
        taxonomy_version_fragment.is_null() ? nullptr : taxonomy_version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->taxonomy_version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null taxonomy_version in WebUIEpoch struct");
  }

  static bool Deserialize(::browsing_topics::mojom::internal::WebUIEpoch_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::browsing_topics::mojom::WebUIEpochDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::browsing_topics::mojom::WebUIBrowsingTopicsStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::browsing_topics::mojom::WebUIBrowsingTopicsStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::browsing_topics::mojom::internal::WebUIBrowsingTopicsState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::epochs(input)) in_epochs = Traits::epochs(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->epochs)::BaseType>
        epochs_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams epochs_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::browsing_topics::mojom::WebUIEpochDataView>>(
        in_epochs, epochs_fragment, &epochs_validate_params);
    fragment->epochs.Set(
        epochs_fragment.is_null() ? nullptr : epochs_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->epochs.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null epochs in WebUIBrowsingTopicsState struct");
    decltype(Traits::next_scheduled_calculation_time(input)) in_next_scheduled_calculation_time = Traits::next_scheduled_calculation_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->next_scheduled_calculation_time)::BaseType> next_scheduled_calculation_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_next_scheduled_calculation_time, next_scheduled_calculation_time_fragment);
    fragment->next_scheduled_calculation_time.Set(
        next_scheduled_calculation_time_fragment.is_null() ? nullptr : next_scheduled_calculation_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->next_scheduled_calculation_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null next_scheduled_calculation_time in WebUIBrowsingTopicsState struct");
  }

  static bool Deserialize(::browsing_topics::mojom::internal::WebUIBrowsingTopicsState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::browsing_topics::mojom::WebUIBrowsingTopicsStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::browsing_topics::mojom::WebUIModelInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::browsing_topics::mojom::WebUIModelInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::browsing_topics::mojom::internal::WebUIModelInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::model_version(input)) in_model_version = Traits::model_version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->model_version)::BaseType> model_version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_model_version, model_version_fragment);
    fragment->model_version.Set(
        model_version_fragment.is_null() ? nullptr : model_version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->model_version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null model_version in WebUIModelInfo struct");
    decltype(Traits::model_file_path(input)) in_model_file_path = Traits::model_file_path(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->model_file_path)::BaseType> model_file_path_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_model_file_path, model_file_path_fragment);
    fragment->model_file_path.Set(
        model_file_path_fragment.is_null() ? nullptr : model_file_path_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->model_file_path.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null model_file_path in WebUIModelInfo struct");
  }

  static bool Deserialize(::browsing_topics::mojom::internal::WebUIModelInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::browsing_topics::mojom::WebUIModelInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::browsing_topics::mojom::WebUIGetBrowsingTopicsStateResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::browsing_topics::mojom::WebUIGetBrowsingTopicsStateResultDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::browsing_topics::mojom::internal::WebUIGetBrowsingTopicsStateResult_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::browsing_topics::mojom::WebUIGetBrowsingTopicsStateResultDataView::Tag::kOverrideStatusMessage: {
        decltype(Traits::override_status_message(input))
            in_override_status_message = Traits::override_status_message(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_override_status_message)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<mojo::StringDataView>(
            in_override_status_message, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null override_status_message in WebUIGetBrowsingTopicsStateResult union");
        fragment->data.f_override_status_message.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::browsing_topics::mojom::WebUIGetBrowsingTopicsStateResultDataView::Tag::kBrowsingTopicsState: {
        decltype(Traits::browsing_topics_state(input))
            in_browsing_topics_state = Traits::browsing_topics_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_browsing_topics_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::browsing_topics::mojom::WebUIBrowsingTopicsStateDataView>(
            in_browsing_topics_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null browsing_topics_state in WebUIGetBrowsingTopicsStateResult union");
        fragment->data.f_browsing_topics_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::browsing_topics::mojom::internal::WebUIGetBrowsingTopicsStateResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::browsing_topics::mojom::WebUIGetBrowsingTopicsStateResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::browsing_topics::mojom::WebUIGetModelInfoResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::browsing_topics::mojom::WebUIGetModelInfoResultDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::browsing_topics::mojom::internal::WebUIGetModelInfoResult_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::browsing_topics::mojom::WebUIGetModelInfoResultDataView::Tag::kOverrideStatusMessage: {
        decltype(Traits::override_status_message(input))
            in_override_status_message = Traits::override_status_message(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_override_status_message)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<mojo::StringDataView>(
            in_override_status_message, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null override_status_message in WebUIGetModelInfoResult union");
        fragment->data.f_override_status_message.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::browsing_topics::mojom::WebUIGetModelInfoResultDataView::Tag::kModelInfo: {
        decltype(Traits::model_info(input))
            in_model_info = Traits::model_info(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_model_info)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::browsing_topics::mojom::WebUIModelInfoDataView>(
            in_model_info, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null model_info in WebUIGetModelInfoResult union");
        fragment->data.f_model_info.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::browsing_topics::mojom::internal::WebUIGetModelInfoResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::browsing_topics::mojom::WebUIGetModelInfoResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace browsing_topics {
namespace mojom {

inline void WebUIBrowsingTopicsConfigurationDataView::GetTimePeriodPerEpochDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->time_period_per_epoch.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}


inline void WebUITopicDataView::GetTopicNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->topic_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void WebUITopicDataView::GetObservedByDomainsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->observed_by_domains.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}


inline void WebUIEpochDataView::GetTopicsDataView(
    mojo::ArrayDataView<WebUITopicDataView>* output) {
  auto pointer = data_->topics.Get();
  *output = mojo::ArrayDataView<WebUITopicDataView>(pointer, message_);
}
inline void WebUIEpochDataView::GetCalculationTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->calculation_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void WebUIEpochDataView::GetModelVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->model_version.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void WebUIEpochDataView::GetTaxonomyVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->taxonomy_version.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void WebUIBrowsingTopicsStateDataView::GetEpochsDataView(
    mojo::ArrayDataView<WebUIEpochDataView>* output) {
  auto pointer = data_->epochs.Get();
  *output = mojo::ArrayDataView<WebUIEpochDataView>(pointer, message_);
}
inline void WebUIBrowsingTopicsStateDataView::GetNextScheduledCalculationTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->next_scheduled_calculation_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}


inline void WebUIModelInfoDataView::GetModelVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->model_version.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void WebUIModelInfoDataView::GetModelFilePathDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->model_file_path.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void WebUIGetBrowsingTopicsStateResultDataView::GetOverrideStatusMessageDataView(
    mojo::StringDataView* output) const {
  CHECK(is_override_status_message());
  *output = mojo::StringDataView(data_->data.f_override_status_message.Get(), message_);
}
inline void WebUIGetBrowsingTopicsStateResultDataView::GetBrowsingTopicsStateDataView(
    WebUIBrowsingTopicsStateDataView* output) const {
  CHECK(is_browsing_topics_state());
  *output = WebUIBrowsingTopicsStateDataView(data_->data.f_browsing_topics_state.Get(), message_);
}

inline void WebUIGetModelInfoResultDataView::GetOverrideStatusMessageDataView(
    mojo::StringDataView* output) const {
  CHECK(is_override_status_message());
  *output = mojo::StringDataView(data_->data.f_override_status_message.Get(), message_);
}
inline void WebUIGetModelInfoResultDataView::GetModelInfoDataView(
    WebUIModelInfoDataView* output) const {
  CHECK(is_model_info());
  *output = WebUIModelInfoDataView(data_->data.f_model_info.Get(), message_);
}


}  // namespace mojom
}  // namespace browsing_topics

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // COMPONENTS_BROWSING_TOPICS_MOJOM_BROWSING_TOPICS_INTERNALS_MOJOM_SHARED_H_