// components/browsing_topics/mojom/browsing_topics_internals.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_BROWSING_TOPICS_MOJOM_BROWSING_TOPICS_INTERNALS_MOJOM_SHARED_INTERNAL_H_
#define COMPONENTS_BROWSING_TOPICS_MOJOM_BROWSING_TOPICS_INTERNALS_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace browsing_topics {
namespace mojom {
namespace internal {
class WebUIBrowsingTopicsConfiguration_Data;
class WebUITopic_Data;
class WebUIEpoch_Data;
class WebUIBrowsingTopicsState_Data;
class WebUIModelInfo_Data;
class WebUIGetBrowsingTopicsStateResult_Data;
class WebUIGetModelInfoResult_Data;

#pragma pack(push, 1)


class  WebUIGetBrowsingTopicsStateResult_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  WebUIGetBrowsingTopicsStateResult_Data() = default;
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~WebUIGetBrowsingTopicsStateResult_Data() = default;

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<WebUIGetBrowsingTopicsStateResult_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class WebUIGetBrowsingTopicsStateResult_Tag : uint32_t {

    
    kOverrideStatusMessage,
    
    kBrowsingTopicsState,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<mojo::internal::String_Data> f_override_status_message;
    mojo::internal::Pointer<internal::WebUIBrowsingTopicsState_Data> f_browsing_topics_state;
    uint64_t unknown;
  };

  uint32_t size;
  WebUIGetBrowsingTopicsStateResult_Tag tag;
  Union_ data;
};
static_assert(sizeof(WebUIGetBrowsingTopicsStateResult_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(WebUIGetBrowsingTopicsStateResult_Data)");


class  WebUIGetModelInfoResult_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  WebUIGetModelInfoResult_Data() = default;
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~WebUIGetModelInfoResult_Data() = default;

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<WebUIGetModelInfoResult_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class WebUIGetModelInfoResult_Tag : uint32_t {

    
    kOverrideStatusMessage,
    
    kModelInfo,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<mojo::internal::String_Data> f_override_status_message;
    mojo::internal::Pointer<internal::WebUIModelInfo_Data> f_model_info;
    uint64_t unknown;
  };

  uint32_t size;
  WebUIGetModelInfoResult_Tag tag;
  Union_ data;
};
static_assert(sizeof(WebUIGetModelInfoResult_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(WebUIGetModelInfoResult_Data)");
class  WebUIBrowsingTopicsConfiguration_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t browsing_topics_enabled : 1;
  uint8_t privacy_sandbox_ads_apis_override_enabled : 1;
  uint8_t privacy_sandbox_settings3_enabled : 1;
  uint8_t override_privacy_sandbox_settings_local_testing_enabled : 1;
  uint8_t browsing_topics_bypass_ip_is_publicly_routable_check_enabled : 1;
  uint8_t pad4_[3];
  int32_t number_of_epochs_to_expose;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> time_period_per_epoch;
  int32_t number_of_top_topics_per_epoch;
  int32_t use_random_topic_probability_percent;
  int32_t number_of_epochs_of_observation_data_to_use_for_filtering;
  int32_t max_number_of_api_usage_context_domains_to_keep_per_topic;
  int32_t max_number_of_api_usage_context_entries_to_load_per_epoch;
  int32_t max_number_of_api_usage_context_domains_to_store_per_page_load;
  int32_t config_version;
  int32_t taxonomy_version;

 private:
  friend class mojo::internal::MessageFragment<WebUIBrowsingTopicsConfiguration_Data>;

  WebUIBrowsingTopicsConfiguration_Data();
  ~WebUIBrowsingTopicsConfiguration_Data() = delete;
};
static_assert(sizeof(WebUIBrowsingTopicsConfiguration_Data) == 56,
              "Bad sizeof(WebUIBrowsingTopicsConfiguration_Data)");
// Used by WebUIBrowsingTopicsConfiguration::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebUIBrowsingTopicsConfiguration_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebUIBrowsingTopicsConfiguration_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebUIBrowsingTopicsConfiguration_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebUIBrowsingTopicsConfiguration_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebUIBrowsingTopicsConfiguration_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  WebUITopic_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t topic_id;
  uint8_t is_real_topic : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> topic_name;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> observed_by_domains;

 private:
  friend class mojo::internal::MessageFragment<WebUITopic_Data>;

  WebUITopic_Data();
  ~WebUITopic_Data() = delete;
};
static_assert(sizeof(WebUITopic_Data) == 32,
              "Bad sizeof(WebUITopic_Data)");
// Used by WebUITopic::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebUITopic_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebUITopic_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebUITopic_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebUITopic_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebUITopic_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  WebUIEpoch_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebUITopic_Data>>> topics;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> calculation_time;
  mojo::internal::Pointer<mojo::internal::String_Data> model_version;
  mojo::internal::Pointer<mojo::internal::String_Data> taxonomy_version;

 private:
  friend class mojo::internal::MessageFragment<WebUIEpoch_Data>;

  WebUIEpoch_Data();
  ~WebUIEpoch_Data() = delete;
};
static_assert(sizeof(WebUIEpoch_Data) == 40,
              "Bad sizeof(WebUIEpoch_Data)");
// Used by WebUIEpoch::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebUIEpoch_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebUIEpoch_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebUIEpoch_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebUIEpoch_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebUIEpoch_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  WebUIBrowsingTopicsState_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebUIEpoch_Data>>> epochs;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> next_scheduled_calculation_time;

 private:
  friend class mojo::internal::MessageFragment<WebUIBrowsingTopicsState_Data>;

  WebUIBrowsingTopicsState_Data();
  ~WebUIBrowsingTopicsState_Data() = delete;
};
static_assert(sizeof(WebUIBrowsingTopicsState_Data) == 24,
              "Bad sizeof(WebUIBrowsingTopicsState_Data)");
// Used by WebUIBrowsingTopicsState::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebUIBrowsingTopicsState_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebUIBrowsingTopicsState_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebUIBrowsingTopicsState_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebUIBrowsingTopicsState_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebUIBrowsingTopicsState_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  WebUIModelInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> model_version;
  mojo::internal::Pointer<mojo::internal::String_Data> model_file_path;

 private:
  friend class mojo::internal::MessageFragment<WebUIModelInfo_Data>;

  WebUIModelInfo_Data();
  ~WebUIModelInfo_Data() = delete;
};
static_assert(sizeof(WebUIModelInfo_Data) == 24,
              "Bad sizeof(WebUIModelInfo_Data)");
// Used by WebUIModelInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebUIModelInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebUIModelInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebUIModelInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebUIModelInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebUIModelInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace browsing_topics

#endif  // COMPONENTS_BROWSING_TOPICS_MOJOM_BROWSING_TOPICS_INTERNALS_MOJOM_SHARED_INTERNAL_H_