// components/browsing_topics/mojom/browsing_topics_internals.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/browsing_topics/mojom/browsing_topics_internals.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('browsingTopics.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../mojo/public/mojom/base/time.mojom.js');
  }



  function WebUIBrowsingTopicsConfiguration(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIBrowsingTopicsConfiguration.prototype.initDefaults_ = function() {
    this.browsingTopicsEnabled = false;
    this.privacySandboxAdsApisOverrideEnabled = false;
    this.privacySandboxSettings3Enabled = false;
    this.overridePrivacySandboxSettingsLocalTestingEnabled = false;
    this.browsingTopicsBypassIpIsPubliclyRoutableCheckEnabled = false;
    this.numberOfEpochsToExpose = 0;
    this.timePeriodPerEpoch = null;
    this.numberOfTopTopicsPerEpoch = 0;
    this.useRandomTopicProbabilityPercent = 0;
    this.numberOfEpochsOfObservationDataToUseForFiltering = 0;
    this.maxNumberOfApiUsageContextDomainsToKeepPerTopic = 0;
    this.maxNumberOfApiUsageContextEntriesToLoadPerEpoch = 0;
    this.maxNumberOfApiUsageContextDomainsToStorePerPageLoad = 0;
    this.configVersion = 0;
    this.taxonomyVersion = 0;
  };
  WebUIBrowsingTopicsConfiguration.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIBrowsingTopicsConfiguration.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;








    // validate WebUIBrowsingTopicsConfiguration.timePeriodPerEpoch
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;









    return validator.validationError.NONE;
  };

  WebUIBrowsingTopicsConfiguration.encodedSize = codec.kStructHeaderSize + 48;

  WebUIBrowsingTopicsConfiguration.decode = function(decoder) {
    var packed;
    var val = new WebUIBrowsingTopicsConfiguration();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.browsingTopicsEnabled = (packed >> 0) & 1 ? true : false;
    val.privacySandboxAdsApisOverrideEnabled = (packed >> 1) & 1 ? true : false;
    val.privacySandboxSettings3Enabled = (packed >> 2) & 1 ? true : false;
    val.overridePrivacySandboxSettingsLocalTestingEnabled = (packed >> 3) & 1 ? true : false;
    val.browsingTopicsBypassIpIsPubliclyRoutableCheckEnabled = (packed >> 4) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.numberOfEpochsToExpose =
        decoder.decodeStruct(codec.Int32);
    val.timePeriodPerEpoch =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.numberOfTopTopicsPerEpoch =
        decoder.decodeStruct(codec.Int32);
    val.useRandomTopicProbabilityPercent =
        decoder.decodeStruct(codec.Int32);
    val.numberOfEpochsOfObservationDataToUseForFiltering =
        decoder.decodeStruct(codec.Int32);
    val.maxNumberOfApiUsageContextDomainsToKeepPerTopic =
        decoder.decodeStruct(codec.Int32);
    val.maxNumberOfApiUsageContextEntriesToLoadPerEpoch =
        decoder.decodeStruct(codec.Int32);
    val.maxNumberOfApiUsageContextDomainsToStorePerPageLoad =
        decoder.decodeStruct(codec.Int32);
    val.configVersion =
        decoder.decodeStruct(codec.Int32);
    val.taxonomyVersion =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  WebUIBrowsingTopicsConfiguration.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIBrowsingTopicsConfiguration.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.browsingTopicsEnabled & 1) << 0
    packed |= (val.privacySandboxAdsApisOverrideEnabled & 1) << 1
    packed |= (val.privacySandboxSettings3Enabled & 1) << 2
    packed |= (val.overridePrivacySandboxSettingsLocalTestingEnabled & 1) << 3
    packed |= (val.browsingTopicsBypassIpIsPubliclyRoutableCheckEnabled & 1) << 4
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.numberOfEpochsToExpose);
    encoder.encodeStructPointer(time$.TimeDelta, val.timePeriodPerEpoch);
    encoder.encodeStruct(codec.Int32, val.numberOfTopTopicsPerEpoch);
    encoder.encodeStruct(codec.Int32, val.useRandomTopicProbabilityPercent);
    encoder.encodeStruct(codec.Int32, val.numberOfEpochsOfObservationDataToUseForFiltering);
    encoder.encodeStruct(codec.Int32, val.maxNumberOfApiUsageContextDomainsToKeepPerTopic);
    encoder.encodeStruct(codec.Int32, val.maxNumberOfApiUsageContextEntriesToLoadPerEpoch);
    encoder.encodeStruct(codec.Int32, val.maxNumberOfApiUsageContextDomainsToStorePerPageLoad);
    encoder.encodeStruct(codec.Int32, val.configVersion);
    encoder.encodeStruct(codec.Int32, val.taxonomyVersion);
  };
  function WebUITopic(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUITopic.prototype.initDefaults_ = function() {
    this.topicId = 0;
    this.isRealTopic = false;
    this.topicName = null;
    this.observedByDomains = null;
  };
  WebUITopic.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUITopic.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebUITopic.topicName
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebUITopic.observedByDomains
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUITopic.encodedSize = codec.kStructHeaderSize + 24;

  WebUITopic.decode = function(decoder) {
    var packed;
    var val = new WebUITopic();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.topicId =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.isRealTopic = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.topicName =
        decoder.decodeStructPointer(string16$.String16);
    val.observedByDomains =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  WebUITopic.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUITopic.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.topicId);
    packed = 0;
    packed |= (val.isRealTopic & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(string16$.String16, val.topicName);
    encoder.encodeArrayPointer(codec.String, val.observedByDomains);
  };
  function WebUIEpoch(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIEpoch.prototype.initDefaults_ = function() {
    this.topics = null;
    this.calculationTime = null;
    this.modelVersion = null;
    this.taxonomyVersion = null;
  };
  WebUIEpoch.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIEpoch.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIEpoch.topics
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(WebUITopic), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIEpoch.calculationTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIEpoch.modelVersion
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIEpoch.taxonomyVersion
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUIEpoch.encodedSize = codec.kStructHeaderSize + 32;

  WebUIEpoch.decode = function(decoder) {
    var packed;
    var val = new WebUIEpoch();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.topics =
        decoder.decodeArrayPointer(new codec.PointerTo(WebUITopic));
    val.calculationTime =
        decoder.decodeStructPointer(time$.Time);
    val.modelVersion =
        decoder.decodeStruct(codec.String);
    val.taxonomyVersion =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WebUIEpoch.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIEpoch.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(WebUITopic), val.topics);
    encoder.encodeStructPointer(time$.Time, val.calculationTime);
    encoder.encodeStruct(codec.String, val.modelVersion);
    encoder.encodeStruct(codec.String, val.taxonomyVersion);
  };
  function WebUIBrowsingTopicsState(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIBrowsingTopicsState.prototype.initDefaults_ = function() {
    this.epochs = null;
    this.nextScheduledCalculationTime = null;
  };
  WebUIBrowsingTopicsState.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIBrowsingTopicsState.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIBrowsingTopicsState.epochs
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(WebUIEpoch), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIBrowsingTopicsState.nextScheduledCalculationTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUIBrowsingTopicsState.encodedSize = codec.kStructHeaderSize + 16;

  WebUIBrowsingTopicsState.decode = function(decoder) {
    var packed;
    var val = new WebUIBrowsingTopicsState();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.epochs =
        decoder.decodeArrayPointer(new codec.PointerTo(WebUIEpoch));
    val.nextScheduledCalculationTime =
        decoder.decodeStructPointer(time$.Time);
    return val;
  };

  WebUIBrowsingTopicsState.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIBrowsingTopicsState.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(WebUIEpoch), val.epochs);
    encoder.encodeStructPointer(time$.Time, val.nextScheduledCalculationTime);
  };
  function WebUIModelInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIModelInfo.prototype.initDefaults_ = function() {
    this.modelVersion = null;
    this.modelFilePath = null;
  };
  WebUIModelInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIModelInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIModelInfo.modelVersion
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIModelInfo.modelFilePath
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUIModelInfo.encodedSize = codec.kStructHeaderSize + 16;

  WebUIModelInfo.decode = function(decoder) {
    var packed;
    var val = new WebUIModelInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.modelVersion =
        decoder.decodeStruct(codec.String);
    val.modelFilePath =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WebUIModelInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIModelInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.modelVersion);
    encoder.encodeStruct(codec.String, val.modelFilePath);
  };
  function PageHandler_GetBrowsingTopicsConfiguration_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetBrowsingTopicsConfiguration_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetBrowsingTopicsConfiguration_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetBrowsingTopicsConfiguration_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetBrowsingTopicsConfiguration_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetBrowsingTopicsConfiguration_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetBrowsingTopicsConfiguration_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetBrowsingTopicsConfiguration_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetBrowsingTopicsConfiguration_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetBrowsingTopicsConfiguration_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.prototype.initDefaults_ = function() {
    this.config = null;
  };
  PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebUIBrowsingTopicsConfiguration, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetBrowsingTopicsConfiguration_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.config =
        decoder.decodeStructPointer(WebUIBrowsingTopicsConfiguration);
    return val;
  };

  PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebUIBrowsingTopicsConfiguration, val.config);
  };
  function PageHandler_GetBrowsingTopicsState_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetBrowsingTopicsState_Params.prototype.initDefaults_ = function() {
    this.calculateNow = false;
  };
  PageHandler_GetBrowsingTopicsState_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetBrowsingTopicsState_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_GetBrowsingTopicsState_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetBrowsingTopicsState_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetBrowsingTopicsState_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.calculateNow = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_GetBrowsingTopicsState_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetBrowsingTopicsState_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.calculateNow & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_GetBrowsingTopicsState_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetBrowsingTopicsState_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  PageHandler_GetBrowsingTopicsState_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetBrowsingTopicsState_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetBrowsingTopicsState_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, WebUIGetBrowsingTopicsStateResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetBrowsingTopicsState_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_GetBrowsingTopicsState_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetBrowsingTopicsState_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(WebUIGetBrowsingTopicsStateResult);
    return val;
  };

  PageHandler_GetBrowsingTopicsState_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetBrowsingTopicsState_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(WebUIGetBrowsingTopicsStateResult, val.result);
  };
  function PageHandler_GetModelInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetModelInfo_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetModelInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetModelInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetModelInfo_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetModelInfo_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetModelInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetModelInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetModelInfo_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetModelInfo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetModelInfo_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  PageHandler_GetModelInfo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetModelInfo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetModelInfo_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, WebUIGetModelInfoResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetModelInfo_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_GetModelInfo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetModelInfo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(WebUIGetModelInfoResult);
    return val;
  };

  PageHandler_GetModelInfo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetModelInfo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(WebUIGetModelInfoResult, val.result);
  };
  function PageHandler_ClassifyHosts_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ClassifyHosts_Params.prototype.initDefaults_ = function() {
    this.hosts = null;
  };
  PageHandler_ClassifyHosts_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ClassifyHosts_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_ClassifyHosts_Params.hosts
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_ClassifyHosts_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_ClassifyHosts_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ClassifyHosts_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.hosts =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  PageHandler_ClassifyHosts_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ClassifyHosts_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.hosts);
  };
  function PageHandler_ClassifyHosts_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ClassifyHosts_ResponseParams.prototype.initDefaults_ = function() {
    this.topicsForHosts = null;
  };
  PageHandler_ClassifyHosts_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ClassifyHosts_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_ClassifyHosts_ResponseParams.topicsForHosts
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.ArrayOf(new codec.PointerTo(WebUITopic)), false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_ClassifyHosts_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_ClassifyHosts_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ClassifyHosts_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.topicsForHosts =
        decoder.decodeArrayPointer(new codec.ArrayOf(new codec.PointerTo(WebUITopic)));
    return val;
  };

  PageHandler_ClassifyHosts_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ClassifyHosts_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.ArrayOf(new codec.PointerTo(WebUITopic)), val.topicsForHosts);
  };

  function WebUIGetBrowsingTopicsStateResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  WebUIGetBrowsingTopicsStateResult.Tags = {
    overrideStatusMessage: 0,
    browsingTopicsState: 1,
  };

  WebUIGetBrowsingTopicsStateResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  WebUIGetBrowsingTopicsStateResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "overrideStatusMessage",
        "browsingTopicsState",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a WebUIGetBrowsingTopicsStateResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(WebUIGetBrowsingTopicsStateResult.prototype, "overrideStatusMessage", {
    get: function() {
      if (this.$tag != WebUIGetBrowsingTopicsStateResult.Tags.overrideStatusMessage) {
        throw new ReferenceError(
            "WebUIGetBrowsingTopicsStateResult.overrideStatusMessage is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = WebUIGetBrowsingTopicsStateResult.Tags.overrideStatusMessage;
      this.$data = value;
    }
  });
  Object.defineProperty(WebUIGetBrowsingTopicsStateResult.prototype, "browsingTopicsState", {
    get: function() {
      if (this.$tag != WebUIGetBrowsingTopicsStateResult.Tags.browsingTopicsState) {
        throw new ReferenceError(
            "WebUIGetBrowsingTopicsStateResult.browsingTopicsState is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = WebUIGetBrowsingTopicsStateResult.Tags.browsingTopicsState;
      this.$data = value;
    }
  });


    WebUIGetBrowsingTopicsStateResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case WebUIGetBrowsingTopicsStateResult.Tags.overrideStatusMessage:
          encoder.encodeStruct(codec.String, val.overrideStatusMessage);
          break;
        case WebUIGetBrowsingTopicsStateResult.Tags.browsingTopicsState:
          encoder.encodeStructPointer(WebUIBrowsingTopicsState, val.browsingTopicsState);
          break;
      }
      encoder.align();
    };


    WebUIGetBrowsingTopicsStateResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new WebUIGetBrowsingTopicsStateResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case WebUIGetBrowsingTopicsStateResult.Tags.overrideStatusMessage:
          result.overrideStatusMessage = decoder.decodeStruct(codec.String);
          break;
        case WebUIGetBrowsingTopicsStateResult.Tags.browsingTopicsState:
          result.browsingTopicsState = decoder.decodeStructPointer(WebUIBrowsingTopicsState);
          break;
      }
      decoder.align();

      return result;
    };


    WebUIGetBrowsingTopicsStateResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case WebUIGetBrowsingTopicsStateResult.Tags.overrideStatusMessage:
          

    // validate WebUIGetBrowsingTopicsStateResult.overrideStatusMessage
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case WebUIGetBrowsingTopicsStateResult.Tags.browsingTopicsState:
          

    // validate WebUIGetBrowsingTopicsStateResult.browsingTopicsState
    err = messageValidator.validateStructPointer(data_offset, WebUIBrowsingTopicsState, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  WebUIGetBrowsingTopicsStateResult.encodedSize = 16;

  function WebUIGetModelInfoResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  WebUIGetModelInfoResult.Tags = {
    overrideStatusMessage: 0,
    modelInfo: 1,
  };

  WebUIGetModelInfoResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  WebUIGetModelInfoResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "overrideStatusMessage",
        "modelInfo",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a WebUIGetModelInfoResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(WebUIGetModelInfoResult.prototype, "overrideStatusMessage", {
    get: function() {
      if (this.$tag != WebUIGetModelInfoResult.Tags.overrideStatusMessage) {
        throw new ReferenceError(
            "WebUIGetModelInfoResult.overrideStatusMessage is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = WebUIGetModelInfoResult.Tags.overrideStatusMessage;
      this.$data = value;
    }
  });
  Object.defineProperty(WebUIGetModelInfoResult.prototype, "modelInfo", {
    get: function() {
      if (this.$tag != WebUIGetModelInfoResult.Tags.modelInfo) {
        throw new ReferenceError(
            "WebUIGetModelInfoResult.modelInfo is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = WebUIGetModelInfoResult.Tags.modelInfo;
      this.$data = value;
    }
  });


    WebUIGetModelInfoResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case WebUIGetModelInfoResult.Tags.overrideStatusMessage:
          encoder.encodeStruct(codec.String, val.overrideStatusMessage);
          break;
        case WebUIGetModelInfoResult.Tags.modelInfo:
          encoder.encodeStructPointer(WebUIModelInfo, val.modelInfo);
          break;
      }
      encoder.align();
    };


    WebUIGetModelInfoResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new WebUIGetModelInfoResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case WebUIGetModelInfoResult.Tags.overrideStatusMessage:
          result.overrideStatusMessage = decoder.decodeStruct(codec.String);
          break;
        case WebUIGetModelInfoResult.Tags.modelInfo:
          result.modelInfo = decoder.decodeStructPointer(WebUIModelInfo);
          break;
      }
      decoder.align();

      return result;
    };


    WebUIGetModelInfoResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case WebUIGetModelInfoResult.Tags.overrideStatusMessage:
          

    // validate WebUIGetModelInfoResult.overrideStatusMessage
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case WebUIGetModelInfoResult.Tags.modelInfo:
          

    // validate WebUIGetModelInfoResult.modelInfo
    err = messageValidator.validateStructPointer(data_offset, WebUIModelInfo, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  WebUIGetModelInfoResult.encodedSize = 16;
  var kPageHandler_GetBrowsingTopicsConfiguration_Name = 0;
  var kPageHandler_GetBrowsingTopicsState_Name = 1;
  var kPageHandler_GetModelInfo_Name = 2;
  var kPageHandler_ClassifyHosts_Name = 3;

  function PageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandler,
                                                   handleOrPtrInfo);
  }

  function PageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandler, associatedInterfacePtrInfo);
  }

  PageHandlerAssociatedPtr.prototype =
      Object.create(PageHandlerPtr.prototype);
  PageHandlerAssociatedPtr.prototype.constructor =
      PageHandlerAssociatedPtr;

  function PageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerPtr.prototype.getBrowsingTopicsConfiguration = function() {
    return PageHandlerProxy.prototype.getBrowsingTopicsConfiguration
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getBrowsingTopicsConfiguration = function() {
    var params_ = new PageHandler_GetBrowsingTopicsConfiguration_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetBrowsingTopicsConfiguration_Name,
          codec.align(PageHandler_GetBrowsingTopicsConfiguration_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetBrowsingTopicsConfiguration_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetBrowsingTopicsConfiguration_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.getBrowsingTopicsState = function() {
    return PageHandlerProxy.prototype.getBrowsingTopicsState
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getBrowsingTopicsState = function(calculateNow) {
    var params_ = new PageHandler_GetBrowsingTopicsState_Params();
    params_.calculateNow = calculateNow;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetBrowsingTopicsState_Name,
          codec.align(PageHandler_GetBrowsingTopicsState_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetBrowsingTopicsState_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetBrowsingTopicsState_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.getModelInfo = function() {
    return PageHandlerProxy.prototype.getModelInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getModelInfo = function() {
    var params_ = new PageHandler_GetModelInfo_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetModelInfo_Name,
          codec.align(PageHandler_GetModelInfo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetModelInfo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetModelInfo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.classifyHosts = function() {
    return PageHandlerProxy.prototype.classifyHosts
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.classifyHosts = function(hosts) {
    var params_ = new PageHandler_ClassifyHosts_Params();
    params_.hosts = hosts;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_ClassifyHosts_Name,
          codec.align(PageHandler_ClassifyHosts_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_ClassifyHosts_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_ClassifyHosts_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerStub.prototype.getBrowsingTopicsConfiguration = function() {
    return this.delegate_ && this.delegate_.getBrowsingTopicsConfiguration && this.delegate_.getBrowsingTopicsConfiguration();
  }
  PageHandlerStub.prototype.getBrowsingTopicsState = function(calculateNow) {
    return this.delegate_ && this.delegate_.getBrowsingTopicsState && this.delegate_.getBrowsingTopicsState(calculateNow);
  }
  PageHandlerStub.prototype.getModelInfo = function() {
    return this.delegate_ && this.delegate_.getModelInfo && this.delegate_.getModelInfo();
  }
  PageHandlerStub.prototype.classifyHosts = function(hosts) {
    return this.delegate_ && this.delegate_.classifyHosts && this.delegate_.classifyHosts(hosts);
  }

  PageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_GetBrowsingTopicsConfiguration_Name:
      var params = reader.decodeStruct(PageHandler_GetBrowsingTopicsConfiguration_Params);
      this.getBrowsingTopicsConfiguration().then(function(response) {
        var responseParams =
            new PageHandler_GetBrowsingTopicsConfiguration_ResponseParams();
        responseParams.config = response.config;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetBrowsingTopicsConfiguration_Name,
            codec.align(PageHandler_GetBrowsingTopicsConfiguration_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetBrowsingTopicsConfiguration_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetBrowsingTopicsState_Name:
      var params = reader.decodeStruct(PageHandler_GetBrowsingTopicsState_Params);
      this.getBrowsingTopicsState(params.calculateNow).then(function(response) {
        var responseParams =
            new PageHandler_GetBrowsingTopicsState_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetBrowsingTopicsState_Name,
            codec.align(PageHandler_GetBrowsingTopicsState_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetBrowsingTopicsState_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetModelInfo_Name:
      var params = reader.decodeStruct(PageHandler_GetModelInfo_Params);
      this.getModelInfo().then(function(response) {
        var responseParams =
            new PageHandler_GetModelInfo_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetModelInfo_Name,
            codec.align(PageHandler_GetModelInfo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetModelInfo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_ClassifyHosts_Name:
      var params = reader.decodeStruct(PageHandler_ClassifyHosts_Params);
      this.classifyHosts(params.hosts).then(function(response) {
        var responseParams =
            new PageHandler_ClassifyHosts_ResponseParams();
        responseParams.topicsForHosts = response.topicsForHosts;
        var builder = new codec.MessageV1Builder(
            kPageHandler_ClassifyHosts_Name,
            codec.align(PageHandler_ClassifyHosts_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_ClassifyHosts_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandler_GetBrowsingTopicsConfiguration_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetBrowsingTopicsConfiguration_Params;
      break;
      case kPageHandler_GetBrowsingTopicsState_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetBrowsingTopicsState_Params;
      break;
      case kPageHandler_GetModelInfo_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetModelInfo_Params;
      break;
      case kPageHandler_ClassifyHosts_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_ClassifyHosts_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPageHandler_GetBrowsingTopicsConfiguration_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetBrowsingTopicsConfiguration_ResponseParams;
        break;
      case kPageHandler_GetBrowsingTopicsState_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetBrowsingTopicsState_ResponseParams;
        break;
      case kPageHandler_GetModelInfo_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetModelInfo_ResponseParams;
        break;
      case kPageHandler_ClassifyHosts_Name:
        if (message.isResponse())
          paramsClass = PageHandler_ClassifyHosts_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PageHandler = {
    name: 'browsing_topics.mojom.PageHandler',
    kVersion: 0,
    ptrClass: PageHandlerPtr,
    proxyClass: PageHandlerProxy,
    stubClass: PageHandlerStub,
    validateRequest: validatePageHandlerRequest,
    validateResponse: validatePageHandlerResponse,
  };
  PageHandlerStub.prototype.validator = validatePageHandlerRequest;
  PageHandlerProxy.prototype.validator = validatePageHandlerResponse;
  exports.WebUIBrowsingTopicsConfiguration = WebUIBrowsingTopicsConfiguration;
  exports.WebUITopic = WebUITopic;
  exports.WebUIEpoch = WebUIEpoch;
  exports.WebUIBrowsingTopicsState = WebUIBrowsingTopicsState;
  exports.WebUIModelInfo = WebUIModelInfo;
  exports.WebUIGetBrowsingTopicsStateResult = WebUIGetBrowsingTopicsStateResult;
  exports.WebUIGetModelInfoResult = WebUIGetModelInfoResult;
  exports.PageHandler = PageHandler;
  exports.PageHandlerPtr = PageHandlerPtr;
  exports.PageHandlerAssociatedPtr = PageHandlerAssociatedPtr;
})();