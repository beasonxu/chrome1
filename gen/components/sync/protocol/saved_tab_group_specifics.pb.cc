// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/saved_tab_group_specifics.proto

#include "components/sync/protocol/saved_tab_group_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR SavedTabGroup::SavedTabGroup(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , position_(int64_t{0})
  , color_(0)
{}
struct SavedTabGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SavedTabGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SavedTabGroupDefaultTypeInternal() {}
  union {
    SavedTabGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SavedTabGroupDefaultTypeInternal _SavedTabGroup_default_instance_;
PROTOBUF_CONSTEXPR SavedTabGroupTab::SavedTabGroupTab(
    ::_pbi::ConstantInitialized)
  : group_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , position_(int64_t{0}){}
struct SavedTabGroupTabDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SavedTabGroupTabDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SavedTabGroupTabDefaultTypeInternal() {}
  union {
    SavedTabGroupTab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SavedTabGroupTabDefaultTypeInternal _SavedTabGroupTab_default_instance_;
PROTOBUF_CONSTEXPR SavedTabGroupSpecifics::SavedTabGroupSpecifics(
    ::_pbi::ConstantInitialized)
  : guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , creation_time_windows_epoch_micros_(int64_t{0})
  , update_time_windows_epoch_micros_(int64_t{0})
  , _oneof_case_{}{}
struct SavedTabGroupSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SavedTabGroupSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SavedTabGroupSpecificsDefaultTypeInternal() {}
  union {
    SavedTabGroupSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SavedTabGroupSpecificsDefaultTypeInternal _SavedTabGroupSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool SavedTabGroup_SavedTabGroupColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SavedTabGroup_SavedTabGroupColor_strings[10] = {};

static const char SavedTabGroup_SavedTabGroupColor_names[] =
  "SAVED_TAB_GROUP_COLOR_BLUE"
  "SAVED_TAB_GROUP_COLOR_CYAN"
  "SAVED_TAB_GROUP_COLOR_GREEN"
  "SAVED_TAB_GROUP_COLOR_GREY"
  "SAVED_TAB_GROUP_COLOR_ORANGE"
  "SAVED_TAB_GROUP_COLOR_PINK"
  "SAVED_TAB_GROUP_COLOR_PURPLE"
  "SAVED_TAB_GROUP_COLOR_RED"
  "SAVED_TAB_GROUP_COLOR_UNSPECIFIED"
  "SAVED_TAB_GROUP_COLOR_YELLOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SavedTabGroup_SavedTabGroupColor_entries[] = {
  { {SavedTabGroup_SavedTabGroupColor_names + 0, 26}, 2 },
  { {SavedTabGroup_SavedTabGroupColor_names + 26, 26}, 8 },
  { {SavedTabGroup_SavedTabGroupColor_names + 52, 27}, 5 },
  { {SavedTabGroup_SavedTabGroupColor_names + 79, 26}, 1 },
  { {SavedTabGroup_SavedTabGroupColor_names + 105, 28}, 9 },
  { {SavedTabGroup_SavedTabGroupColor_names + 133, 26}, 6 },
  { {SavedTabGroup_SavedTabGroupColor_names + 159, 28}, 7 },
  { {SavedTabGroup_SavedTabGroupColor_names + 187, 25}, 3 },
  { {SavedTabGroup_SavedTabGroupColor_names + 212, 33}, 0 },
  { {SavedTabGroup_SavedTabGroupColor_names + 245, 28}, 4 },
};

static const int SavedTabGroup_SavedTabGroupColor_entries_by_number[] = {
  8, // 0 -> SAVED_TAB_GROUP_COLOR_UNSPECIFIED
  3, // 1 -> SAVED_TAB_GROUP_COLOR_GREY
  0, // 2 -> SAVED_TAB_GROUP_COLOR_BLUE
  7, // 3 -> SAVED_TAB_GROUP_COLOR_RED
  9, // 4 -> SAVED_TAB_GROUP_COLOR_YELLOW
  2, // 5 -> SAVED_TAB_GROUP_COLOR_GREEN
  5, // 6 -> SAVED_TAB_GROUP_COLOR_PINK
  6, // 7 -> SAVED_TAB_GROUP_COLOR_PURPLE
  1, // 8 -> SAVED_TAB_GROUP_COLOR_CYAN
  4, // 9 -> SAVED_TAB_GROUP_COLOR_ORANGE
};

const std::string& SavedTabGroup_SavedTabGroupColor_Name(
    SavedTabGroup_SavedTabGroupColor value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SavedTabGroup_SavedTabGroupColor_entries,
          SavedTabGroup_SavedTabGroupColor_entries_by_number,
          10, SavedTabGroup_SavedTabGroupColor_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SavedTabGroup_SavedTabGroupColor_entries,
      SavedTabGroup_SavedTabGroupColor_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SavedTabGroup_SavedTabGroupColor_strings[idx].get();
}
bool SavedTabGroup_SavedTabGroupColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SavedTabGroup_SavedTabGroupColor* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SavedTabGroup_SavedTabGroupColor_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<SavedTabGroup_SavedTabGroupColor>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_UNSPECIFIED;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_GREY;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_BLUE;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_RED;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_YELLOW;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_GREEN;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_PINK;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_PURPLE;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_CYAN;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SAVED_TAB_GROUP_COLOR_ORANGE;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SavedTabGroupColor_MIN;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup::SavedTabGroupColor_MAX;
constexpr int SavedTabGroup::SavedTabGroupColor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SavedTabGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<SavedTabGroup>()._has_bits_);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SavedTabGroup::SavedTabGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SavedTabGroup)
}
SavedTabGroup::SavedTabGroup(const SavedTabGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&position_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SavedTabGroup)
}

inline void SavedTabGroup::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&position_)) + sizeof(color_));
}

SavedTabGroup::~SavedTabGroup() {
  // @@protoc_insertion_point(destructor:sync_pb.SavedTabGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SavedTabGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
}

void SavedTabGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedTabGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SavedTabGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&position_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SavedTabGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SavedTabGroup.SavedTabGroupColor color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SavedTabGroup_SavedTabGroupColor_IsValid(val))) {
            _internal_set_color(static_cast<::sync_pb::SavedTabGroup_SavedTabGroupColor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedTabGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SavedTabGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 position = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_position(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional .sync_pb.SavedTabGroup.SavedTabGroupColor color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SavedTabGroup)
  return target;
}

size_t SavedTabGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SavedTabGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional int64 position = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_position());
    }

    // optional .sync_pb.SavedTabGroup.SavedTabGroupColor color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedTabGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SavedTabGroup*>(
      &from));
}

void SavedTabGroup::MergeFrom(const SavedTabGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SavedTabGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SavedTabGroup::CopyFrom(const SavedTabGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SavedTabGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTabGroup::IsInitialized() const {
  return true;
}

void SavedTabGroup::InternalSwap(SavedTabGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedTabGroup, color_)
      + sizeof(SavedTabGroup::color_)
      - PROTOBUF_FIELD_OFFSET(SavedTabGroup, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

std::string SavedTabGroup::GetTypeName() const {
  return "sync_pb.SavedTabGroup";
}


// ===================================================================

class SavedTabGroupTab::_Internal {
 public:
  using HasBits = decltype(std::declval<SavedTabGroupTab>()._has_bits_);
  static void set_has_group_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SavedTabGroupTab::SavedTabGroupTab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SavedTabGroupTab)
}
SavedTabGroupTab::SavedTabGroupTab(const SavedTabGroupTab& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  group_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_guid()) {
    group_guid_.Set(from._internal_group_guid(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SavedTabGroupTab)
}

inline void SavedTabGroupTab::SharedCtor() {
group_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
position_ = int64_t{0};
}

SavedTabGroupTab::~SavedTabGroupTab() {
  // @@protoc_insertion_point(destructor:sync_pb.SavedTabGroupTab)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SavedTabGroupTab::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  group_guid_.Destroy();
  url_.Destroy();
}

void SavedTabGroupTab::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedTabGroupTab::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SavedTabGroupTab)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      group_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  position_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SavedTabGroupTab::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string group_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedTabGroupTab::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SavedTabGroupTab)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string group_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_guid(), target);
  }

  // optional int64 position = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_position(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SavedTabGroupTab)
  return target;
}

size_t SavedTabGroupTab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SavedTabGroupTab)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string group_guid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_guid());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional int64 position = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedTabGroupTab::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SavedTabGroupTab*>(
      &from));
}

void SavedTabGroupTab::MergeFrom(const SavedTabGroupTab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SavedTabGroupTab)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_group_guid(from._internal_group_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SavedTabGroupTab::CopyFrom(const SavedTabGroupTab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SavedTabGroupTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTabGroupTab::IsInitialized() const {
  return true;
}

void SavedTabGroupTab::InternalSwap(SavedTabGroupTab* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &group_guid_, lhs_arena,
      &other->group_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(position_, other->position_);
}

std::string SavedTabGroupTab::GetTypeName() const {
  return "sync_pb.SavedTabGroupTab";
}


// ===================================================================

class SavedTabGroupSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<SavedTabGroupSpecifics>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creation_time_windows_epoch_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_time_windows_epoch_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::SavedTabGroup& group(const SavedTabGroupSpecifics* msg);
  static const ::sync_pb::SavedTabGroupTab& tab(const SavedTabGroupSpecifics* msg);
};

const ::sync_pb::SavedTabGroup&
SavedTabGroupSpecifics::_Internal::group(const SavedTabGroupSpecifics* msg) {
  return *msg->entity_.group_;
}
const ::sync_pb::SavedTabGroupTab&
SavedTabGroupSpecifics::_Internal::tab(const SavedTabGroupSpecifics* msg) {
  return *msg->entity_.tab_;
}
void SavedTabGroupSpecifics::set_allocated_group(::sync_pb::SavedTabGroup* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    set_has_group();
    entity_.group_ = group;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SavedTabGroupSpecifics.group)
}
void SavedTabGroupSpecifics::set_allocated_tab(::sync_pb::SavedTabGroupTab* tab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (tab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tab);
    if (message_arena != submessage_arena) {
      tab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tab, submessage_arena);
    }
    set_has_tab();
    entity_.tab_ = tab;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SavedTabGroupSpecifics.tab)
}
SavedTabGroupSpecifics::SavedTabGroupSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SavedTabGroupSpecifics)
}
SavedTabGroupSpecifics::SavedTabGroupSpecifics(const SavedTabGroupSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&creation_time_windows_epoch_micros_, &from.creation_time_windows_epoch_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_time_windows_epoch_micros_) -
    reinterpret_cast<char*>(&creation_time_windows_epoch_micros_)) + sizeof(update_time_windows_epoch_micros_));
  clear_has_entity();
  switch (from.entity_case()) {
    case kGroup: {
      _internal_mutable_group()->::sync_pb::SavedTabGroup::MergeFrom(from._internal_group());
      break;
    }
    case kTab: {
      _internal_mutable_tab()->::sync_pb::SavedTabGroupTab::MergeFrom(from._internal_tab());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SavedTabGroupSpecifics)
}

inline void SavedTabGroupSpecifics::SharedCtor() {
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_time_windows_epoch_micros_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_time_windows_epoch_micros_) -
    reinterpret_cast<char*>(&creation_time_windows_epoch_micros_)) + sizeof(update_time_windows_epoch_micros_));
clear_has_entity();
}

SavedTabGroupSpecifics::~SavedTabGroupSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.SavedTabGroupSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SavedTabGroupSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.Destroy();
  if (has_entity()) {
    clear_entity();
  }
}

void SavedTabGroupSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedTabGroupSpecifics::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.SavedTabGroupSpecifics)
  switch (entity_case()) {
    case kGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.group_;
      }
      break;
    }
    case kTab: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.tab_;
      }
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void SavedTabGroupSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SavedTabGroupSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&creation_time_windows_epoch_micros_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_time_windows_epoch_micros_) -
        reinterpret_cast<char*>(&creation_time_windows_epoch_micros_)) + sizeof(update_time_windows_epoch_micros_));
  }
  clear_entity();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SavedTabGroupSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 creation_time_windows_epoch_micros = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_creation_time_windows_epoch_micros(&has_bits);
          creation_time_windows_epoch_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 update_time_windows_epoch_micros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_update_time_windows_epoch_micros(&has_bits);
          update_time_windows_epoch_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SavedTabGroup group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SavedTabGroupTab tab = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tab(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedTabGroupSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SavedTabGroupSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  // optional int64 creation_time_windows_epoch_micros = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_creation_time_windows_epoch_micros(), target);
  }

  // optional int64 update_time_windows_epoch_micros = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_update_time_windows_epoch_micros(), target);
  }

  switch (entity_case()) {
    case kGroup: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::group(this),
          _Internal::group(this).GetCachedSize(), target, stream);
      break;
    }
    case kTab: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::tab(this),
          _Internal::tab(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SavedTabGroupSpecifics)
  return target;
}

size_t SavedTabGroupSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SavedTabGroupSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string guid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional int64 creation_time_windows_epoch_micros = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time_windows_epoch_micros());
    }

    // optional int64 update_time_windows_epoch_micros = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_time_windows_epoch_micros());
    }

  }
  switch (entity_case()) {
    // .sync_pb.SavedTabGroup group = 4;
    case kGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.group_);
      break;
    }
    // .sync_pb.SavedTabGroupTab tab = 5;
    case kTab: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.tab_);
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedTabGroupSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SavedTabGroupSpecifics*>(
      &from));
}

void SavedTabGroupSpecifics::MergeFrom(const SavedTabGroupSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SavedTabGroupSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      creation_time_windows_epoch_micros_ = from.creation_time_windows_epoch_micros_;
    }
    if (cached_has_bits & 0x00000004u) {
      update_time_windows_epoch_micros_ = from.update_time_windows_epoch_micros_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.entity_case()) {
    case kGroup: {
      _internal_mutable_group()->::sync_pb::SavedTabGroup::MergeFrom(from._internal_group());
      break;
    }
    case kTab: {
      _internal_mutable_tab()->::sync_pb::SavedTabGroupTab::MergeFrom(from._internal_tab());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SavedTabGroupSpecifics::CopyFrom(const SavedTabGroupSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SavedTabGroupSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTabGroupSpecifics::IsInitialized() const {
  return true;
}

void SavedTabGroupSpecifics::InternalSwap(SavedTabGroupSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedTabGroupSpecifics, update_time_windows_epoch_micros_)
      + sizeof(SavedTabGroupSpecifics::update_time_windows_epoch_micros_)
      - PROTOBUF_FIELD_OFFSET(SavedTabGroupSpecifics, creation_time_windows_epoch_micros_)>(
          reinterpret_cast<char*>(&creation_time_windows_epoch_micros_),
          reinterpret_cast<char*>(&other->creation_time_windows_epoch_micros_));
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SavedTabGroupSpecifics::GetTypeName() const {
  return "sync_pb.SavedTabGroupSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SavedTabGroup*
Arena::CreateMaybeMessage< ::sync_pb::SavedTabGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SavedTabGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SavedTabGroupTab*
Arena::CreateMaybeMessage< ::sync_pb::SavedTabGroupTab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SavedTabGroupTab >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SavedTabGroupSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::SavedTabGroupSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SavedTabGroupSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
