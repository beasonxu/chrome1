// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/autofill_wallet_usage_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5fwallet_5fusage_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5fwallet_5fusage_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fautofill_5fwallet_5fusage_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fautofill_5fwallet_5fusage_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class AutofillWalletUsageSpecifics;
struct AutofillWalletUsageSpecificsDefaultTypeInternal;
extern AutofillWalletUsageSpecificsDefaultTypeInternal _AutofillWalletUsageSpecifics_default_instance_;
class AutofillWalletUsageSpecifics_VirtualCardUsageData;
struct AutofillWalletUsageSpecifics_VirtualCardUsageDataDefaultTypeInternal;
extern AutofillWalletUsageSpecifics_VirtualCardUsageDataDefaultTypeInternal _AutofillWalletUsageSpecifics_VirtualCardUsageData_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AutofillWalletUsageSpecifics* Arena::CreateMaybeMessage<::sync_pb::AutofillWalletUsageSpecifics>(Arena*);
template<> ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* Arena::CreateMaybeMessage<::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class AutofillWalletUsageSpecifics_VirtualCardUsageData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData) */ {
 public:
  inline AutofillWalletUsageSpecifics_VirtualCardUsageData() : AutofillWalletUsageSpecifics_VirtualCardUsageData(nullptr) {}
  ~AutofillWalletUsageSpecifics_VirtualCardUsageData() override;
  explicit PROTOBUF_CONSTEXPR AutofillWalletUsageSpecifics_VirtualCardUsageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillWalletUsageSpecifics_VirtualCardUsageData(const AutofillWalletUsageSpecifics_VirtualCardUsageData& from);
  AutofillWalletUsageSpecifics_VirtualCardUsageData(AutofillWalletUsageSpecifics_VirtualCardUsageData&& from) noexcept
    : AutofillWalletUsageSpecifics_VirtualCardUsageData() {
    *this = ::std::move(from);
  }

  inline AutofillWalletUsageSpecifics_VirtualCardUsageData& operator=(const AutofillWalletUsageSpecifics_VirtualCardUsageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillWalletUsageSpecifics_VirtualCardUsageData& operator=(AutofillWalletUsageSpecifics_VirtualCardUsageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillWalletUsageSpecifics_VirtualCardUsageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillWalletUsageSpecifics_VirtualCardUsageData* internal_default_instance() {
    return reinterpret_cast<const AutofillWalletUsageSpecifics_VirtualCardUsageData*>(
               &_AutofillWalletUsageSpecifics_VirtualCardUsageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutofillWalletUsageSpecifics_VirtualCardUsageData& a, AutofillWalletUsageSpecifics_VirtualCardUsageData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillWalletUsageSpecifics_VirtualCardUsageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillWalletUsageSpecifics_VirtualCardUsageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillWalletUsageSpecifics_VirtualCardUsageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillWalletUsageSpecifics_VirtualCardUsageData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillWalletUsageSpecifics_VirtualCardUsageData& from);
  void MergeFrom(const AutofillWalletUsageSpecifics_VirtualCardUsageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillWalletUsageSpecifics_VirtualCardUsageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData";
  }
  protected:
  explicit AutofillWalletUsageSpecifics_VirtualCardUsageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualCardLastFourFieldNumber = 2,
    kMerchantUrlFieldNumber = 3,
    kMerchantAppPackageFieldNumber = 4,
    kInstrumentIdFieldNumber = 1,
  };
  // optional string virtual_card_last_four = 2;
  bool has_virtual_card_last_four() const;
  private:
  bool _internal_has_virtual_card_last_four() const;
  public:
  void clear_virtual_card_last_four();
  const std::string& virtual_card_last_four() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtual_card_last_four(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtual_card_last_four();
  PROTOBUF_NODISCARD std::string* release_virtual_card_last_four();
  void set_allocated_virtual_card_last_four(std::string* virtual_card_last_four);
  private:
  const std::string& _internal_virtual_card_last_four() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_card_last_four(const std::string& value);
  std::string* _internal_mutable_virtual_card_last_four();
  public:

  // optional string merchant_url = 3;
  bool has_merchant_url() const;
  private:
  bool _internal_has_merchant_url() const;
  public:
  void clear_merchant_url();
  const std::string& merchant_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_url();
  PROTOBUF_NODISCARD std::string* release_merchant_url();
  void set_allocated_merchant_url(std::string* merchant_url);
  private:
  const std::string& _internal_merchant_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_url(const std::string& value);
  std::string* _internal_mutable_merchant_url();
  public:

  // optional string merchant_app_package = 4;
  bool has_merchant_app_package() const;
  private:
  bool _internal_has_merchant_app_package() const;
  public:
  void clear_merchant_app_package();
  const std::string& merchant_app_package() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_app_package(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_app_package();
  PROTOBUF_NODISCARD std::string* release_merchant_app_package();
  void set_allocated_merchant_app_package(std::string* merchant_app_package);
  private:
  const std::string& _internal_merchant_app_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_app_package(const std::string& value);
  std::string* _internal_mutable_merchant_app_package();
  public:

  // optional int64 instrument_id = 1;
  bool has_instrument_id() const;
  private:
  bool _internal_has_instrument_id() const;
  public:
  void clear_instrument_id();
  int64_t instrument_id() const;
  void set_instrument_id(int64_t value);
  private:
  int64_t _internal_instrument_id() const;
  void _internal_set_instrument_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_card_last_four_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_app_package_;
  int64_t instrument_id_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fwallet_5fusage_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillWalletUsageSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillWalletUsageSpecifics) */ {
 public:
  inline AutofillWalletUsageSpecifics() : AutofillWalletUsageSpecifics(nullptr) {}
  ~AutofillWalletUsageSpecifics() override;
  explicit PROTOBUF_CONSTEXPR AutofillWalletUsageSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillWalletUsageSpecifics(const AutofillWalletUsageSpecifics& from);
  AutofillWalletUsageSpecifics(AutofillWalletUsageSpecifics&& from) noexcept
    : AutofillWalletUsageSpecifics() {
    *this = ::std::move(from);
  }

  inline AutofillWalletUsageSpecifics& operator=(const AutofillWalletUsageSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillWalletUsageSpecifics& operator=(AutofillWalletUsageSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillWalletUsageSpecifics& default_instance() {
    return *internal_default_instance();
  }
  enum UsageDataTypeCase {
    kVirtualCardUsageData = 2,
    USAGE_DATA_TYPE_NOT_SET = 0,
  };

  static inline const AutofillWalletUsageSpecifics* internal_default_instance() {
    return reinterpret_cast<const AutofillWalletUsageSpecifics*>(
               &_AutofillWalletUsageSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutofillWalletUsageSpecifics& a, AutofillWalletUsageSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillWalletUsageSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillWalletUsageSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillWalletUsageSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillWalletUsageSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillWalletUsageSpecifics& from);
  void MergeFrom(const AutofillWalletUsageSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillWalletUsageSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillWalletUsageSpecifics";
  }
  protected:
  explicit AutofillWalletUsageSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillWalletUsageSpecifics_VirtualCardUsageData VirtualCardUsageData;

  // accessors -------------------------------------------------------

  enum : int {
    kRetrievalTimeUnixEpochMicrosFieldNumber = 3,
    kGuidFieldNumber = 1,
    kVirtualCardUsageDataFieldNumber = 2,
  };
  // repeated int64 retrieval_time_unix_epoch_micros = 3 [packed = true];
  int retrieval_time_unix_epoch_micros_size() const;
  private:
  int _internal_retrieval_time_unix_epoch_micros_size() const;
  public:
  void clear_retrieval_time_unix_epoch_micros();
  private:
  int64_t _internal_retrieval_time_unix_epoch_micros(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_retrieval_time_unix_epoch_micros() const;
  void _internal_add_retrieval_time_unix_epoch_micros(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_retrieval_time_unix_epoch_micros();
  public:
  int64_t retrieval_time_unix_epoch_micros(int index) const;
  void set_retrieval_time_unix_epoch_micros(int index, int64_t value);
  void add_retrieval_time_unix_epoch_micros(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      retrieval_time_unix_epoch_micros() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_retrieval_time_unix_epoch_micros();

  // optional string guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // .sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData virtual_card_usage_data = 2;
  bool has_virtual_card_usage_data() const;
  private:
  bool _internal_has_virtual_card_usage_data() const;
  public:
  void clear_virtual_card_usage_data();
  const ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData& virtual_card_usage_data() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* release_virtual_card_usage_data();
  ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* mutable_virtual_card_usage_data();
  void set_allocated_virtual_card_usage_data(::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* virtual_card_usage_data);
  private:
  const ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData& _internal_virtual_card_usage_data() const;
  ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* _internal_mutable_virtual_card_usage_data();
  public:
  void unsafe_arena_set_allocated_virtual_card_usage_data(
      ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* virtual_card_usage_data);
  ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* unsafe_arena_release_virtual_card_usage_data();

  void clear_usage_data_type();
  UsageDataTypeCase usage_data_type_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.AutofillWalletUsageSpecifics)
 private:
  class _Internal;
  void set_has_virtual_card_usage_data();

  inline bool has_usage_data_type() const;
  inline void clear_has_usage_data_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > retrieval_time_unix_epoch_micros_;
  mutable std::atomic<int> _retrieval_time_unix_epoch_micros_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  union UsageDataTypeUnion {
    constexpr UsageDataTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* virtual_card_usage_data_;
  } usage_data_type_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fwallet_5fusage_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutofillWalletUsageSpecifics_VirtualCardUsageData

// optional int64 instrument_id = 1;
inline bool AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_has_instrument_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AutofillWalletUsageSpecifics_VirtualCardUsageData::has_instrument_id() const {
  return _internal_has_instrument_id();
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::clear_instrument_id() {
  instrument_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_instrument_id() const {
  return instrument_id_;
}
inline int64_t AutofillWalletUsageSpecifics_VirtualCardUsageData::instrument_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.instrument_id)
  return _internal_instrument_id();
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_set_instrument_id(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  instrument_id_ = value;
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::set_instrument_id(int64_t value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.instrument_id)
}

// optional string virtual_card_last_four = 2;
inline bool AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_has_virtual_card_last_four() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillWalletUsageSpecifics_VirtualCardUsageData::has_virtual_card_last_four() const {
  return _internal_has_virtual_card_last_four();
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::clear_virtual_card_last_four() {
  virtual_card_last_four_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillWalletUsageSpecifics_VirtualCardUsageData::virtual_card_last_four() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.virtual_card_last_four)
  return _internal_virtual_card_last_four();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillWalletUsageSpecifics_VirtualCardUsageData::set_virtual_card_last_four(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 virtual_card_last_four_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.virtual_card_last_four)
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::mutable_virtual_card_last_four() {
  std::string* _s = _internal_mutable_virtual_card_last_four();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.virtual_card_last_four)
  return _s;
}
inline const std::string& AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_virtual_card_last_four() const {
  return virtual_card_last_four_.Get();
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_set_virtual_card_last_four(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  virtual_card_last_four_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_mutable_virtual_card_last_four() {
  _has_bits_[0] |= 0x00000001u;
  return virtual_card_last_four_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::release_virtual_card_last_four() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.virtual_card_last_four)
  if (!_internal_has_virtual_card_last_four()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = virtual_card_last_four_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (virtual_card_last_four_.IsDefault()) {
    virtual_card_last_four_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::set_allocated_virtual_card_last_four(std::string* virtual_card_last_four) {
  if (virtual_card_last_four != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  virtual_card_last_four_.SetAllocated(virtual_card_last_four, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (virtual_card_last_four_.IsDefault()) {
    virtual_card_last_four_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.virtual_card_last_four)
}

// optional string merchant_url = 3;
inline bool AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_has_merchant_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillWalletUsageSpecifics_VirtualCardUsageData::has_merchant_url() const {
  return _internal_has_merchant_url();
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::clear_merchant_url() {
  merchant_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AutofillWalletUsageSpecifics_VirtualCardUsageData::merchant_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_url)
  return _internal_merchant_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillWalletUsageSpecifics_VirtualCardUsageData::set_merchant_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 merchant_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_url)
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::mutable_merchant_url() {
  std::string* _s = _internal_mutable_merchant_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_url)
  return _s;
}
inline const std::string& AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_merchant_url() const {
  return merchant_url_.Get();
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_set_merchant_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  merchant_url_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_mutable_merchant_url() {
  _has_bits_[0] |= 0x00000002u;
  return merchant_url_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::release_merchant_url() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_url)
  if (!_internal_has_merchant_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = merchant_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (merchant_url_.IsDefault()) {
    merchant_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::set_allocated_merchant_url(std::string* merchant_url) {
  if (merchant_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  merchant_url_.SetAllocated(merchant_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (merchant_url_.IsDefault()) {
    merchant_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_url)
}

// optional string merchant_app_package = 4;
inline bool AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_has_merchant_app_package() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AutofillWalletUsageSpecifics_VirtualCardUsageData::has_merchant_app_package() const {
  return _internal_has_merchant_app_package();
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::clear_merchant_app_package() {
  merchant_app_package_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AutofillWalletUsageSpecifics_VirtualCardUsageData::merchant_app_package() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_app_package)
  return _internal_merchant_app_package();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillWalletUsageSpecifics_VirtualCardUsageData::set_merchant_app_package(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 merchant_app_package_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_app_package)
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::mutable_merchant_app_package() {
  std::string* _s = _internal_mutable_merchant_app_package();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_app_package)
  return _s;
}
inline const std::string& AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_merchant_app_package() const {
  return merchant_app_package_.Get();
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_set_merchant_app_package(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  merchant_app_package_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::_internal_mutable_merchant_app_package() {
  _has_bits_[0] |= 0x00000004u;
  return merchant_app_package_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillWalletUsageSpecifics_VirtualCardUsageData::release_merchant_app_package() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_app_package)
  if (!_internal_has_merchant_app_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = merchant_app_package_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (merchant_app_package_.IsDefault()) {
    merchant_app_package_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::set_allocated_merchant_app_package(std::string* merchant_app_package) {
  if (merchant_app_package != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  merchant_app_package_.SetAllocated(merchant_app_package, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (merchant_app_package_.IsDefault()) {
    merchant_app_package_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData.merchant_app_package)
}

// -------------------------------------------------------------------

// AutofillWalletUsageSpecifics

// optional string guid = 1;
inline bool AutofillWalletUsageSpecifics::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillWalletUsageSpecifics::has_guid() const {
  return _internal_has_guid();
}
inline void AutofillWalletUsageSpecifics::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillWalletUsageSpecifics::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletUsageSpecifics.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillWalletUsageSpecifics::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillWalletUsageSpecifics.guid)
}
inline std::string* AutofillWalletUsageSpecifics::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletUsageSpecifics.guid)
  return _s;
}
inline const std::string& AutofillWalletUsageSpecifics::_internal_guid() const {
  return guid_.Get();
}
inline void AutofillWalletUsageSpecifics::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillWalletUsageSpecifics::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillWalletUsageSpecifics::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletUsageSpecifics.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillWalletUsageSpecifics::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletUsageSpecifics.guid)
}

// .sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData virtual_card_usage_data = 2;
inline bool AutofillWalletUsageSpecifics::_internal_has_virtual_card_usage_data() const {
  return usage_data_type_case() == kVirtualCardUsageData;
}
inline bool AutofillWalletUsageSpecifics::has_virtual_card_usage_data() const {
  return _internal_has_virtual_card_usage_data();
}
inline void AutofillWalletUsageSpecifics::set_has_virtual_card_usage_data() {
  _oneof_case_[0] = kVirtualCardUsageData;
}
inline void AutofillWalletUsageSpecifics::clear_virtual_card_usage_data() {
  if (_internal_has_virtual_card_usage_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete usage_data_type_.virtual_card_usage_data_;
    }
    clear_has_usage_data_type();
  }
}
inline ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* AutofillWalletUsageSpecifics::release_virtual_card_usage_data() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletUsageSpecifics.virtual_card_usage_data)
  if (_internal_has_virtual_card_usage_data()) {
    clear_has_usage_data_type();
    ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* temp = usage_data_type_.virtual_card_usage_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    usage_data_type_.virtual_card_usage_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData& AutofillWalletUsageSpecifics::_internal_virtual_card_usage_data() const {
  return _internal_has_virtual_card_usage_data()
      ? *usage_data_type_.virtual_card_usage_data_
      : reinterpret_cast< ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData&>(::sync_pb::_AutofillWalletUsageSpecifics_VirtualCardUsageData_default_instance_);
}
inline const ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData& AutofillWalletUsageSpecifics::virtual_card_usage_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletUsageSpecifics.virtual_card_usage_data)
  return _internal_virtual_card_usage_data();
}
inline ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* AutofillWalletUsageSpecifics::unsafe_arena_release_virtual_card_usage_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.AutofillWalletUsageSpecifics.virtual_card_usage_data)
  if (_internal_has_virtual_card_usage_data()) {
    clear_has_usage_data_type();
    ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* temp = usage_data_type_.virtual_card_usage_data_;
    usage_data_type_.virtual_card_usage_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AutofillWalletUsageSpecifics::unsafe_arena_set_allocated_virtual_card_usage_data(::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* virtual_card_usage_data) {
  clear_usage_data_type();
  if (virtual_card_usage_data) {
    set_has_virtual_card_usage_data();
    usage_data_type_.virtual_card_usage_data_ = virtual_card_usage_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillWalletUsageSpecifics.virtual_card_usage_data)
}
inline ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* AutofillWalletUsageSpecifics::_internal_mutable_virtual_card_usage_data() {
  if (!_internal_has_virtual_card_usage_data()) {
    clear_usage_data_type();
    set_has_virtual_card_usage_data();
    usage_data_type_.virtual_card_usage_data_ = CreateMaybeMessage< ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData >(GetArenaForAllocation());
  }
  return usage_data_type_.virtual_card_usage_data_;
}
inline ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* AutofillWalletUsageSpecifics::mutable_virtual_card_usage_data() {
  ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* _msg = _internal_mutable_virtual_card_usage_data();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletUsageSpecifics.virtual_card_usage_data)
  return _msg;
}

// repeated int64 retrieval_time_unix_epoch_micros = 3 [packed = true];
inline int AutofillWalletUsageSpecifics::_internal_retrieval_time_unix_epoch_micros_size() const {
  return retrieval_time_unix_epoch_micros_.size();
}
inline int AutofillWalletUsageSpecifics::retrieval_time_unix_epoch_micros_size() const {
  return _internal_retrieval_time_unix_epoch_micros_size();
}
inline void AutofillWalletUsageSpecifics::clear_retrieval_time_unix_epoch_micros() {
  retrieval_time_unix_epoch_micros_.Clear();
}
inline int64_t AutofillWalletUsageSpecifics::_internal_retrieval_time_unix_epoch_micros(int index) const {
  return retrieval_time_unix_epoch_micros_.Get(index);
}
inline int64_t AutofillWalletUsageSpecifics::retrieval_time_unix_epoch_micros(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletUsageSpecifics.retrieval_time_unix_epoch_micros)
  return _internal_retrieval_time_unix_epoch_micros(index);
}
inline void AutofillWalletUsageSpecifics::set_retrieval_time_unix_epoch_micros(int index, int64_t value) {
  retrieval_time_unix_epoch_micros_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillWalletUsageSpecifics.retrieval_time_unix_epoch_micros)
}
inline void AutofillWalletUsageSpecifics::_internal_add_retrieval_time_unix_epoch_micros(int64_t value) {
  retrieval_time_unix_epoch_micros_.Add(value);
}
inline void AutofillWalletUsageSpecifics::add_retrieval_time_unix_epoch_micros(int64_t value) {
  _internal_add_retrieval_time_unix_epoch_micros(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillWalletUsageSpecifics.retrieval_time_unix_epoch_micros)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AutofillWalletUsageSpecifics::_internal_retrieval_time_unix_epoch_micros() const {
  return retrieval_time_unix_epoch_micros_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AutofillWalletUsageSpecifics::retrieval_time_unix_epoch_micros() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillWalletUsageSpecifics.retrieval_time_unix_epoch_micros)
  return _internal_retrieval_time_unix_epoch_micros();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AutofillWalletUsageSpecifics::_internal_mutable_retrieval_time_unix_epoch_micros() {
  return &retrieval_time_unix_epoch_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AutofillWalletUsageSpecifics::mutable_retrieval_time_unix_epoch_micros() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillWalletUsageSpecifics.retrieval_time_unix_epoch_micros)
  return _internal_mutable_retrieval_time_unix_epoch_micros();
}

inline bool AutofillWalletUsageSpecifics::has_usage_data_type() const {
  return usage_data_type_case() != USAGE_DATA_TYPE_NOT_SET;
}
inline void AutofillWalletUsageSpecifics::clear_has_usage_data_type() {
  _oneof_case_[0] = USAGE_DATA_TYPE_NOT_SET;
}
inline AutofillWalletUsageSpecifics::UsageDataTypeCase AutofillWalletUsageSpecifics::usage_data_type_case() const {
  return AutofillWalletUsageSpecifics::UsageDataTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5fwallet_5fusage_5fspecifics_2eproto
