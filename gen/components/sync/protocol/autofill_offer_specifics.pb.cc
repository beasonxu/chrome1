// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/autofill_offer_specifics.proto

#include "components/sync/protocol/autofill_offer_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR AutofillOfferSpecifics_CardLinkedOfferData::AutofillOfferSpecifics_CardLinkedOfferData(
    ::_pbi::ConstantInitialized)
  : instrument_id_(){}
struct AutofillOfferSpecifics_CardLinkedOfferDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillOfferSpecifics_CardLinkedOfferDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillOfferSpecifics_CardLinkedOfferDataDefaultTypeInternal() {}
  union {
    AutofillOfferSpecifics_CardLinkedOfferData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillOfferSpecifics_CardLinkedOfferDataDefaultTypeInternal _AutofillOfferSpecifics_CardLinkedOfferData_default_instance_;
PROTOBUF_CONSTEXPR AutofillOfferSpecifics_PromoCodeOfferData::AutofillOfferSpecifics_PromoCodeOfferData(
    ::_pbi::ConstantInitialized)
  : promo_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AutofillOfferSpecifics_PromoCodeOfferDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillOfferSpecifics_PromoCodeOfferDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillOfferSpecifics_PromoCodeOfferDataDefaultTypeInternal() {}
  union {
    AutofillOfferSpecifics_PromoCodeOfferData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillOfferSpecifics_PromoCodeOfferDataDefaultTypeInternal _AutofillOfferSpecifics_PromoCodeOfferData_default_instance_;
PROTOBUF_CONSTEXPR AutofillOfferSpecifics_DisplayStrings::AutofillOfferSpecifics_DisplayStrings(
    ::_pbi::ConstantInitialized)
  : value_prop_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , see_details_text_mobile_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , see_details_text_desktop_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , usage_instructions_text_mobile_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , usage_instructions_text_desktop_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AutofillOfferSpecifics_DisplayStringsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillOfferSpecifics_DisplayStringsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillOfferSpecifics_DisplayStringsDefaultTypeInternal() {}
  union {
    AutofillOfferSpecifics_DisplayStrings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillOfferSpecifics_DisplayStringsDefaultTypeInternal _AutofillOfferSpecifics_DisplayStrings_default_instance_;
PROTOBUF_CONSTEXPR AutofillOfferSpecifics_PercentageReward::AutofillOfferSpecifics_PercentageReward(
    ::_pbi::ConstantInitialized)
  : percentage_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AutofillOfferSpecifics_PercentageRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillOfferSpecifics_PercentageRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillOfferSpecifics_PercentageRewardDefaultTypeInternal() {}
  union {
    AutofillOfferSpecifics_PercentageReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillOfferSpecifics_PercentageRewardDefaultTypeInternal _AutofillOfferSpecifics_PercentageReward_default_instance_;
PROTOBUF_CONSTEXPR AutofillOfferSpecifics_FixedAmountReward::AutofillOfferSpecifics_FixedAmountReward(
    ::_pbi::ConstantInitialized)
  : amount_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AutofillOfferSpecifics_FixedAmountRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillOfferSpecifics_FixedAmountRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillOfferSpecifics_FixedAmountRewardDefaultTypeInternal() {}
  union {
    AutofillOfferSpecifics_FixedAmountReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillOfferSpecifics_FixedAmountRewardDefaultTypeInternal _AutofillOfferSpecifics_FixedAmountReward_default_instance_;
PROTOBUF_CONSTEXPR AutofillOfferSpecifics::AutofillOfferSpecifics(
    ::_pbi::ConstantInitialized)
  : merchant_domain_()
  , merchant_app_package_()
  , offer_details_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , display_strings_(nullptr)
  , id_(int64_t{0})
  , offer_expiry_date_(int64_t{0})
  , _oneof_case_{}{}
struct AutofillOfferSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillOfferSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillOfferSpecificsDefaultTypeInternal() {}
  union {
    AutofillOfferSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillOfferSpecificsDefaultTypeInternal _AutofillOfferSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class AutofillOfferSpecifics_CardLinkedOfferData::_Internal {
 public:
};

AutofillOfferSpecifics_CardLinkedOfferData::AutofillOfferSpecifics_CardLinkedOfferData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  instrument_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
}
AutofillOfferSpecifics_CardLinkedOfferData::AutofillOfferSpecifics_CardLinkedOfferData(const AutofillOfferSpecifics_CardLinkedOfferData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      instrument_id_(from.instrument_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
}

inline void AutofillOfferSpecifics_CardLinkedOfferData::SharedCtor() {
}

AutofillOfferSpecifics_CardLinkedOfferData::~AutofillOfferSpecifics_CardLinkedOfferData() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillOfferSpecifics_CardLinkedOfferData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutofillOfferSpecifics_CardLinkedOfferData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillOfferSpecifics_CardLinkedOfferData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_id_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillOfferSpecifics_CardLinkedOfferData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 instrument_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_instrument_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_instrument_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillOfferSpecifics_CardLinkedOfferData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 instrument_id = 3;
  for (int i = 0, n = this->_internal_instrument_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_instrument_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
  return target;
}

size_t AutofillOfferSpecifics_CardLinkedOfferData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 instrument_id = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->instrument_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_instrument_id_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillOfferSpecifics_CardLinkedOfferData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillOfferSpecifics_CardLinkedOfferData*>(
      &from));
}

void AutofillOfferSpecifics_CardLinkedOfferData::MergeFrom(const AutofillOfferSpecifics_CardLinkedOfferData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  instrument_id_.MergeFrom(from.instrument_id_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillOfferSpecifics_CardLinkedOfferData::CopyFrom(const AutofillOfferSpecifics_CardLinkedOfferData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillOfferSpecifics_CardLinkedOfferData::IsInitialized() const {
  return true;
}

void AutofillOfferSpecifics_CardLinkedOfferData::InternalSwap(AutofillOfferSpecifics_CardLinkedOfferData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  instrument_id_.InternalSwap(&other->instrument_id_);
}

std::string AutofillOfferSpecifics_CardLinkedOfferData::GetTypeName() const {
  return "sync_pb.AutofillOfferSpecifics.CardLinkedOfferData";
}


// ===================================================================

class AutofillOfferSpecifics_PromoCodeOfferData::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillOfferSpecifics_PromoCodeOfferData>()._has_bits_);
  static void set_has_promo_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillOfferSpecifics_PromoCodeOfferData::AutofillOfferSpecifics_PromoCodeOfferData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
}
AutofillOfferSpecifics_PromoCodeOfferData::AutofillOfferSpecifics_PromoCodeOfferData(const AutofillOfferSpecifics_PromoCodeOfferData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  promo_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    promo_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_promo_code()) {
    promo_code_.Set(from._internal_promo_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
}

inline void AutofillOfferSpecifics_PromoCodeOfferData::SharedCtor() {
promo_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  promo_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutofillOfferSpecifics_PromoCodeOfferData::~AutofillOfferSpecifics_PromoCodeOfferData() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillOfferSpecifics_PromoCodeOfferData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  promo_code_.Destroy();
}

void AutofillOfferSpecifics_PromoCodeOfferData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillOfferSpecifics_PromoCodeOfferData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    promo_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillOfferSpecifics_PromoCodeOfferData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string promo_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_promo_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillOfferSpecifics_PromoCodeOfferData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string promo_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_promo_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
  return target;
}

size_t AutofillOfferSpecifics_PromoCodeOfferData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string promo_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_promo_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillOfferSpecifics_PromoCodeOfferData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillOfferSpecifics_PromoCodeOfferData*>(
      &from));
}

void AutofillOfferSpecifics_PromoCodeOfferData::MergeFrom(const AutofillOfferSpecifics_PromoCodeOfferData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_promo_code()) {
    _internal_set_promo_code(from._internal_promo_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillOfferSpecifics_PromoCodeOfferData::CopyFrom(const AutofillOfferSpecifics_PromoCodeOfferData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillOfferSpecifics_PromoCodeOfferData::IsInitialized() const {
  return true;
}

void AutofillOfferSpecifics_PromoCodeOfferData::InternalSwap(AutofillOfferSpecifics_PromoCodeOfferData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &promo_code_, lhs_arena,
      &other->promo_code_, rhs_arena
  );
}

std::string AutofillOfferSpecifics_PromoCodeOfferData::GetTypeName() const {
  return "sync_pb.AutofillOfferSpecifics.PromoCodeOfferData";
}


// ===================================================================

class AutofillOfferSpecifics_DisplayStrings::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillOfferSpecifics_DisplayStrings>()._has_bits_);
  static void set_has_value_prop_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_see_details_text_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_see_details_text_desktop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_usage_instructions_text_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_usage_instructions_text_desktop(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AutofillOfferSpecifics_DisplayStrings::AutofillOfferSpecifics_DisplayStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillOfferSpecifics.DisplayStrings)
}
AutofillOfferSpecifics_DisplayStrings::AutofillOfferSpecifics_DisplayStrings(const AutofillOfferSpecifics_DisplayStrings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_prop_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_prop_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_prop_text()) {
    value_prop_text_.Set(from._internal_value_prop_text(), 
      GetArenaForAllocation());
  }
  see_details_text_mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    see_details_text_mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_see_details_text_mobile()) {
    see_details_text_mobile_.Set(from._internal_see_details_text_mobile(), 
      GetArenaForAllocation());
  }
  see_details_text_desktop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    see_details_text_desktop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_see_details_text_desktop()) {
    see_details_text_desktop_.Set(from._internal_see_details_text_desktop(), 
      GetArenaForAllocation());
  }
  usage_instructions_text_mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    usage_instructions_text_mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_usage_instructions_text_mobile()) {
    usage_instructions_text_mobile_.Set(from._internal_usage_instructions_text_mobile(), 
      GetArenaForAllocation());
  }
  usage_instructions_text_desktop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    usage_instructions_text_desktop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_usage_instructions_text_desktop()) {
    usage_instructions_text_desktop_.Set(from._internal_usage_instructions_text_desktop(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillOfferSpecifics.DisplayStrings)
}

inline void AutofillOfferSpecifics_DisplayStrings::SharedCtor() {
value_prop_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_prop_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
see_details_text_mobile_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  see_details_text_mobile_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
see_details_text_desktop_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  see_details_text_desktop_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
usage_instructions_text_mobile_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  usage_instructions_text_mobile_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
usage_instructions_text_desktop_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  usage_instructions_text_desktop_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutofillOfferSpecifics_DisplayStrings::~AutofillOfferSpecifics_DisplayStrings() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillOfferSpecifics.DisplayStrings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillOfferSpecifics_DisplayStrings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_prop_text_.Destroy();
  see_details_text_mobile_.Destroy();
  see_details_text_desktop_.Destroy();
  usage_instructions_text_mobile_.Destroy();
  usage_instructions_text_desktop_.Destroy();
}

void AutofillOfferSpecifics_DisplayStrings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillOfferSpecifics_DisplayStrings::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillOfferSpecifics.DisplayStrings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      value_prop_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      see_details_text_mobile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      see_details_text_desktop_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      usage_instructions_text_mobile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      usage_instructions_text_desktop_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillOfferSpecifics_DisplayStrings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value_prop_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value_prop_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string see_details_text_mobile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_see_details_text_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string see_details_text_desktop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_see_details_text_desktop();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string usage_instructions_text_mobile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_usage_instructions_text_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string usage_instructions_text_desktop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_usage_instructions_text_desktop();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillOfferSpecifics_DisplayStrings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillOfferSpecifics.DisplayStrings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value_prop_text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value_prop_text(), target);
  }

  // optional string see_details_text_mobile = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_see_details_text_mobile(), target);
  }

  // optional string see_details_text_desktop = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_see_details_text_desktop(), target);
  }

  // optional string usage_instructions_text_mobile = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_usage_instructions_text_mobile(), target);
  }

  // optional string usage_instructions_text_desktop = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_usage_instructions_text_desktop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillOfferSpecifics.DisplayStrings)
  return target;
}

size_t AutofillOfferSpecifics_DisplayStrings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillOfferSpecifics.DisplayStrings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string value_prop_text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_prop_text());
    }

    // optional string see_details_text_mobile = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_see_details_text_mobile());
    }

    // optional string see_details_text_desktop = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_see_details_text_desktop());
    }

    // optional string usage_instructions_text_mobile = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_usage_instructions_text_mobile());
    }

    // optional string usage_instructions_text_desktop = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_usage_instructions_text_desktop());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillOfferSpecifics_DisplayStrings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillOfferSpecifics_DisplayStrings*>(
      &from));
}

void AutofillOfferSpecifics_DisplayStrings::MergeFrom(const AutofillOfferSpecifics_DisplayStrings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillOfferSpecifics.DisplayStrings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value_prop_text(from._internal_value_prop_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_see_details_text_mobile(from._internal_see_details_text_mobile());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_see_details_text_desktop(from._internal_see_details_text_desktop());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_usage_instructions_text_mobile(from._internal_usage_instructions_text_mobile());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_usage_instructions_text_desktop(from._internal_usage_instructions_text_desktop());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillOfferSpecifics_DisplayStrings::CopyFrom(const AutofillOfferSpecifics_DisplayStrings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillOfferSpecifics.DisplayStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillOfferSpecifics_DisplayStrings::IsInitialized() const {
  return true;
}

void AutofillOfferSpecifics_DisplayStrings::InternalSwap(AutofillOfferSpecifics_DisplayStrings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_prop_text_, lhs_arena,
      &other->value_prop_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &see_details_text_mobile_, lhs_arena,
      &other->see_details_text_mobile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &see_details_text_desktop_, lhs_arena,
      &other->see_details_text_desktop_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &usage_instructions_text_mobile_, lhs_arena,
      &other->usage_instructions_text_mobile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &usage_instructions_text_desktop_, lhs_arena,
      &other->usage_instructions_text_desktop_, rhs_arena
  );
}

std::string AutofillOfferSpecifics_DisplayStrings::GetTypeName() const {
  return "sync_pb.AutofillOfferSpecifics.DisplayStrings";
}


// ===================================================================

class AutofillOfferSpecifics_PercentageReward::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillOfferSpecifics_PercentageReward>()._has_bits_);
  static void set_has_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillOfferSpecifics_PercentageReward::AutofillOfferSpecifics_PercentageReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillOfferSpecifics.PercentageReward)
}
AutofillOfferSpecifics_PercentageReward::AutofillOfferSpecifics_PercentageReward(const AutofillOfferSpecifics_PercentageReward& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  percentage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    percentage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_percentage()) {
    percentage_.Set(from._internal_percentage(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillOfferSpecifics.PercentageReward)
}

inline void AutofillOfferSpecifics_PercentageReward::SharedCtor() {
percentage_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  percentage_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutofillOfferSpecifics_PercentageReward::~AutofillOfferSpecifics_PercentageReward() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillOfferSpecifics.PercentageReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillOfferSpecifics_PercentageReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  percentage_.Destroy();
}

void AutofillOfferSpecifics_PercentageReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillOfferSpecifics_PercentageReward::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillOfferSpecifics.PercentageReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    percentage_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillOfferSpecifics_PercentageReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_percentage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillOfferSpecifics_PercentageReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillOfferSpecifics.PercentageReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string percentage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillOfferSpecifics.PercentageReward)
  return target;
}

size_t AutofillOfferSpecifics_PercentageReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillOfferSpecifics.PercentageReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string percentage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_percentage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillOfferSpecifics_PercentageReward::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillOfferSpecifics_PercentageReward*>(
      &from));
}

void AutofillOfferSpecifics_PercentageReward::MergeFrom(const AutofillOfferSpecifics_PercentageReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillOfferSpecifics.PercentageReward)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_percentage()) {
    _internal_set_percentage(from._internal_percentage());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillOfferSpecifics_PercentageReward::CopyFrom(const AutofillOfferSpecifics_PercentageReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillOfferSpecifics.PercentageReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillOfferSpecifics_PercentageReward::IsInitialized() const {
  return true;
}

void AutofillOfferSpecifics_PercentageReward::InternalSwap(AutofillOfferSpecifics_PercentageReward* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &percentage_, lhs_arena,
      &other->percentage_, rhs_arena
  );
}

std::string AutofillOfferSpecifics_PercentageReward::GetTypeName() const {
  return "sync_pb.AutofillOfferSpecifics.PercentageReward";
}


// ===================================================================

class AutofillOfferSpecifics_FixedAmountReward::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillOfferSpecifics_FixedAmountReward>()._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillOfferSpecifics_FixedAmountReward::AutofillOfferSpecifics_FixedAmountReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
}
AutofillOfferSpecifics_FixedAmountReward::AutofillOfferSpecifics_FixedAmountReward(const AutofillOfferSpecifics_FixedAmountReward& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amount()) {
    amount_.Set(from._internal_amount(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
}

inline void AutofillOfferSpecifics_FixedAmountReward::SharedCtor() {
amount_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutofillOfferSpecifics_FixedAmountReward::~AutofillOfferSpecifics_FixedAmountReward() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillOfferSpecifics_FixedAmountReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.Destroy();
}

void AutofillOfferSpecifics_FixedAmountReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillOfferSpecifics_FixedAmountReward::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    amount_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillOfferSpecifics_FixedAmountReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillOfferSpecifics_FixedAmountReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
  return target;
}

size_t AutofillOfferSpecifics_FixedAmountReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string amount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillOfferSpecifics_FixedAmountReward::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillOfferSpecifics_FixedAmountReward*>(
      &from));
}

void AutofillOfferSpecifics_FixedAmountReward::MergeFrom(const AutofillOfferSpecifics_FixedAmountReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_amount()) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillOfferSpecifics_FixedAmountReward::CopyFrom(const AutofillOfferSpecifics_FixedAmountReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillOfferSpecifics_FixedAmountReward::IsInitialized() const {
  return true;
}

void AutofillOfferSpecifics_FixedAmountReward::InternalSwap(AutofillOfferSpecifics_FixedAmountReward* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
}

std::string AutofillOfferSpecifics_FixedAmountReward::GetTypeName() const {
  return "sync_pb.AutofillOfferSpecifics.FixedAmountReward";
}


// ===================================================================

class AutofillOfferSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillOfferSpecifics>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offer_details_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offer_expiry_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData& card_linked_offer_data(const AutofillOfferSpecifics* msg);
  static const ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData& promo_code_offer_data(const AutofillOfferSpecifics* msg);
  static const ::sync_pb::AutofillOfferSpecifics_DisplayStrings& display_strings(const AutofillOfferSpecifics* msg);
  static void set_has_display_strings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::AutofillOfferSpecifics_PercentageReward& percentage_reward(const AutofillOfferSpecifics* msg);
  static const ::sync_pb::AutofillOfferSpecifics_FixedAmountReward& fixed_amount_reward(const AutofillOfferSpecifics* msg);
};

const ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData&
AutofillOfferSpecifics::_Internal::card_linked_offer_data(const AutofillOfferSpecifics* msg) {
  return *msg->type_specific_offer_data_.card_linked_offer_data_;
}
const ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData&
AutofillOfferSpecifics::_Internal::promo_code_offer_data(const AutofillOfferSpecifics* msg) {
  return *msg->type_specific_offer_data_.promo_code_offer_data_;
}
const ::sync_pb::AutofillOfferSpecifics_DisplayStrings&
AutofillOfferSpecifics::_Internal::display_strings(const AutofillOfferSpecifics* msg) {
  return *msg->display_strings_;
}
const ::sync_pb::AutofillOfferSpecifics_PercentageReward&
AutofillOfferSpecifics::_Internal::percentage_reward(const AutofillOfferSpecifics* msg) {
  return *msg->reward_type_.percentage_reward_;
}
const ::sync_pb::AutofillOfferSpecifics_FixedAmountReward&
AutofillOfferSpecifics::_Internal::fixed_amount_reward(const AutofillOfferSpecifics* msg) {
  return *msg->reward_type_.fixed_amount_reward_;
}
void AutofillOfferSpecifics::set_allocated_card_linked_offer_data(::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* card_linked_offer_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_specific_offer_data();
  if (card_linked_offer_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(card_linked_offer_data);
    if (message_arena != submessage_arena) {
      card_linked_offer_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card_linked_offer_data, submessage_arena);
    }
    set_has_card_linked_offer_data();
    type_specific_offer_data_.card_linked_offer_data_ = card_linked_offer_data;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.card_linked_offer_data)
}
void AutofillOfferSpecifics::set_allocated_promo_code_offer_data(::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* promo_code_offer_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_specific_offer_data();
  if (promo_code_offer_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(promo_code_offer_data);
    if (message_arena != submessage_arena) {
      promo_code_offer_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, promo_code_offer_data, submessage_arena);
    }
    set_has_promo_code_offer_data();
    type_specific_offer_data_.promo_code_offer_data_ = promo_code_offer_data;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.promo_code_offer_data)
}
void AutofillOfferSpecifics::set_allocated_percentage_reward(::sync_pb::AutofillOfferSpecifics_PercentageReward* percentage_reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reward_type();
  if (percentage_reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(percentage_reward);
    if (message_arena != submessage_arena) {
      percentage_reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, percentage_reward, submessage_arena);
    }
    set_has_percentage_reward();
    reward_type_.percentage_reward_ = percentage_reward;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.percentage_reward)
}
void AutofillOfferSpecifics::set_allocated_fixed_amount_reward(::sync_pb::AutofillOfferSpecifics_FixedAmountReward* fixed_amount_reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reward_type();
  if (fixed_amount_reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fixed_amount_reward);
    if (message_arena != submessage_arena) {
      fixed_amount_reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_amount_reward, submessage_arena);
    }
    set_has_fixed_amount_reward();
    reward_type_.fixed_amount_reward_ = fixed_amount_reward;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.fixed_amount_reward)
}
AutofillOfferSpecifics::AutofillOfferSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  merchant_domain_(arena),
  merchant_app_package_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillOfferSpecifics)
}
AutofillOfferSpecifics::AutofillOfferSpecifics(const AutofillOfferSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      merchant_domain_(from.merchant_domain_),
      merchant_app_package_(from.merchant_app_package_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  offer_details_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offer_details_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_offer_details_url()) {
    offer_details_url_.Set(from._internal_offer_details_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_display_strings()) {
    display_strings_ = new ::sync_pb::AutofillOfferSpecifics_DisplayStrings(*from.display_strings_);
  } else {
    display_strings_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offer_expiry_date_) -
    reinterpret_cast<char*>(&id_)) + sizeof(offer_expiry_date_));
  clear_has_type_specific_offer_data();
  switch (from.type_specific_offer_data_case()) {
    case kCardLinkedOfferData: {
      _internal_mutable_card_linked_offer_data()->::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData::MergeFrom(from._internal_card_linked_offer_data());
      break;
    }
    case kPromoCodeOfferData: {
      _internal_mutable_promo_code_offer_data()->::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData::MergeFrom(from._internal_promo_code_offer_data());
      break;
    }
    case TYPE_SPECIFIC_OFFER_DATA_NOT_SET: {
      break;
    }
  }
  clear_has_reward_type();
  switch (from.reward_type_case()) {
    case kPercentageReward: {
      _internal_mutable_percentage_reward()->::sync_pb::AutofillOfferSpecifics_PercentageReward::MergeFrom(from._internal_percentage_reward());
      break;
    }
    case kFixedAmountReward: {
      _internal_mutable_fixed_amount_reward()->::sync_pb::AutofillOfferSpecifics_FixedAmountReward::MergeFrom(from._internal_fixed_amount_reward());
      break;
    }
    case REWARD_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillOfferSpecifics)
}

inline void AutofillOfferSpecifics::SharedCtor() {
offer_details_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offer_details_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&display_strings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offer_expiry_date_) -
    reinterpret_cast<char*>(&display_strings_)) + sizeof(offer_expiry_date_));
clear_has_type_specific_offer_data();
clear_has_reward_type();
}

AutofillOfferSpecifics::~AutofillOfferSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillOfferSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillOfferSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  offer_details_url_.Destroy();
  if (this != internal_default_instance()) delete display_strings_;
  if (has_type_specific_offer_data()) {
    clear_type_specific_offer_data();
  }
  if (has_reward_type()) {
    clear_reward_type();
  }
}

void AutofillOfferSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillOfferSpecifics::clear_type_specific_offer_data() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.AutofillOfferSpecifics)
  switch (type_specific_offer_data_case()) {
    case kCardLinkedOfferData: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_specific_offer_data_.card_linked_offer_data_;
      }
      break;
    }
    case kPromoCodeOfferData: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_specific_offer_data_.promo_code_offer_data_;
      }
      break;
    }
    case TYPE_SPECIFIC_OFFER_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_SPECIFIC_OFFER_DATA_NOT_SET;
}

void AutofillOfferSpecifics::clear_reward_type() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.AutofillOfferSpecifics)
  switch (reward_type_case()) {
    case kPercentageReward: {
      if (GetArenaForAllocation() == nullptr) {
        delete reward_type_.percentage_reward_;
      }
      break;
    }
    case kFixedAmountReward: {
      if (GetArenaForAllocation() == nullptr) {
        delete reward_type_.fixed_amount_reward_;
      }
      break;
    }
    case REWARD_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = REWARD_TYPE_NOT_SET;
}


void AutofillOfferSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillOfferSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  merchant_domain_.Clear();
  merchant_app_package_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      offer_details_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(display_strings_ != nullptr);
      display_strings_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offer_expiry_date_) -
        reinterpret_cast<char*>(&id_)) + sizeof(offer_expiry_date_));
  }
  clear_type_specific_offer_data();
  clear_reward_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillOfferSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string offer_details_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_offer_details_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string merchant_domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_merchant_domain();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string merchant_app_package = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_merchant_app_package();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 offer_expiry_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_offer_expiry_date(&has_bits);
          offer_expiry_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillOfferSpecifics.CardLinkedOfferData card_linked_offer_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_card_linked_offer_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillOfferSpecifics.PercentageReward percentage_reward = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_percentage_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillOfferSpecifics.FixedAmountReward fixed_amount_reward = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_amount_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillOfferSpecifics.PromoCodeOfferData promo_code_offer_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_promo_code_offer_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillOfferSpecifics.DisplayStrings display_strings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_strings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillOfferSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillOfferSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string offer_details_url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_offer_details_url(), target);
  }

  // repeated string merchant_domain = 3;
  for (int i = 0, n = this->_internal_merchant_domain_size(); i < n; i++) {
    const auto& s = this->_internal_merchant_domain(i);
    target = stream->WriteString(3, s, target);
  }

  // repeated string merchant_app_package = 4;
  for (int i = 0, n = this->_internal_merchant_app_package_size(); i < n; i++) {
    const auto& s = this->_internal_merchant_app_package(i);
    target = stream->WriteString(4, s, target);
  }

  // optional int64 offer_expiry_date = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_offer_expiry_date(), target);
  }

  // .sync_pb.AutofillOfferSpecifics.CardLinkedOfferData card_linked_offer_data = 6;
  if (_internal_has_card_linked_offer_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::card_linked_offer_data(this),
        _Internal::card_linked_offer_data(this).GetCachedSize(), target, stream);
  }

  switch (reward_type_case()) {
    case kPercentageReward: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::percentage_reward(this),
          _Internal::percentage_reward(this).GetCachedSize(), target, stream);
      break;
    }
    case kFixedAmountReward: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::fixed_amount_reward(this),
          _Internal::fixed_amount_reward(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // .sync_pb.AutofillOfferSpecifics.PromoCodeOfferData promo_code_offer_data = 9;
  if (_internal_has_promo_code_offer_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::promo_code_offer_data(this),
        _Internal::promo_code_offer_data(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.AutofillOfferSpecifics.DisplayStrings display_strings = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::display_strings(this),
        _Internal::display_strings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillOfferSpecifics)
  return target;
}

size_t AutofillOfferSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillOfferSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string merchant_domain = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(merchant_domain_.size());
  for (int i = 0, n = merchant_domain_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      merchant_domain_.Get(i));
  }

  // repeated string merchant_app_package = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(merchant_app_package_.size());
  for (int i = 0, n = merchant_app_package_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      merchant_app_package_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string offer_details_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_offer_details_url());
    }

    // optional .sync_pb.AutofillOfferSpecifics.DisplayStrings display_strings = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_strings_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional int64 offer_expiry_date = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offer_expiry_date());
    }

  }
  switch (type_specific_offer_data_case()) {
    // .sync_pb.AutofillOfferSpecifics.CardLinkedOfferData card_linked_offer_data = 6;
    case kCardLinkedOfferData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_specific_offer_data_.card_linked_offer_data_);
      break;
    }
    // .sync_pb.AutofillOfferSpecifics.PromoCodeOfferData promo_code_offer_data = 9;
    case kPromoCodeOfferData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_specific_offer_data_.promo_code_offer_data_);
      break;
    }
    case TYPE_SPECIFIC_OFFER_DATA_NOT_SET: {
      break;
    }
  }
  switch (reward_type_case()) {
    // .sync_pb.AutofillOfferSpecifics.PercentageReward percentage_reward = 7;
    case kPercentageReward: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reward_type_.percentage_reward_);
      break;
    }
    // .sync_pb.AutofillOfferSpecifics.FixedAmountReward fixed_amount_reward = 8;
    case kFixedAmountReward: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reward_type_.fixed_amount_reward_);
      break;
    }
    case REWARD_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillOfferSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillOfferSpecifics*>(
      &from));
}

void AutofillOfferSpecifics::MergeFrom(const AutofillOfferSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillOfferSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  merchant_domain_.MergeFrom(from.merchant_domain_);
  merchant_app_package_.MergeFrom(from.merchant_app_package_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_offer_details_url(from._internal_offer_details_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_display_strings()->::sync_pb::AutofillOfferSpecifics_DisplayStrings::MergeFrom(from._internal_display_strings());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      offer_expiry_date_ = from.offer_expiry_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.type_specific_offer_data_case()) {
    case kCardLinkedOfferData: {
      _internal_mutable_card_linked_offer_data()->::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData::MergeFrom(from._internal_card_linked_offer_data());
      break;
    }
    case kPromoCodeOfferData: {
      _internal_mutable_promo_code_offer_data()->::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData::MergeFrom(from._internal_promo_code_offer_data());
      break;
    }
    case TYPE_SPECIFIC_OFFER_DATA_NOT_SET: {
      break;
    }
  }
  switch (from.reward_type_case()) {
    case kPercentageReward: {
      _internal_mutable_percentage_reward()->::sync_pb::AutofillOfferSpecifics_PercentageReward::MergeFrom(from._internal_percentage_reward());
      break;
    }
    case kFixedAmountReward: {
      _internal_mutable_fixed_amount_reward()->::sync_pb::AutofillOfferSpecifics_FixedAmountReward::MergeFrom(from._internal_fixed_amount_reward());
      break;
    }
    case REWARD_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillOfferSpecifics::CopyFrom(const AutofillOfferSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillOfferSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillOfferSpecifics::IsInitialized() const {
  return true;
}

void AutofillOfferSpecifics::InternalSwap(AutofillOfferSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  merchant_domain_.InternalSwap(&other->merchant_domain_);
  merchant_app_package_.InternalSwap(&other->merchant_app_package_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &offer_details_url_, lhs_arena,
      &other->offer_details_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillOfferSpecifics, offer_expiry_date_)
      + sizeof(AutofillOfferSpecifics::offer_expiry_date_)
      - PROTOBUF_FIELD_OFFSET(AutofillOfferSpecifics, display_strings_)>(
          reinterpret_cast<char*>(&display_strings_),
          reinterpret_cast<char*>(&other->display_strings_));
  swap(type_specific_offer_data_, other->type_specific_offer_data_);
  swap(reward_type_, other->reward_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string AutofillOfferSpecifics::GetTypeName() const {
  return "sync_pb.AutofillOfferSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData*
Arena::CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData*
Arena::CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillOfferSpecifics_DisplayStrings*
Arena::CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_DisplayStrings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillOfferSpecifics_DisplayStrings >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillOfferSpecifics_PercentageReward*
Arena::CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_PercentageReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillOfferSpecifics_PercentageReward >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillOfferSpecifics_FixedAmountReward*
Arena::CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_FixedAmountReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillOfferSpecifics_FixedAmountReward >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillOfferSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillOfferSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
