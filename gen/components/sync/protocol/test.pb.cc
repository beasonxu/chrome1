// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/test.proto

#include "components/sync/protocol/test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR UnknownFieldsTestA::UnknownFieldsTestA(
    ::_pbi::ConstantInitialized)
  : foo_(false){}
struct UnknownFieldsTestADefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownFieldsTestADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownFieldsTestADefaultTypeInternal() {}
  union {
    UnknownFieldsTestA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownFieldsTestADefaultTypeInternal _UnknownFieldsTestA_default_instance_;
PROTOBUF_CONSTEXPR UnknownFieldsTestB::UnknownFieldsTestB(
    ::_pbi::ConstantInitialized)
  : foo_(false)
  , bar_(false){}
struct UnknownFieldsTestBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownFieldsTestBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownFieldsTestBDefaultTypeInternal() {}
  union {
    UnknownFieldsTestB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownFieldsTestBDefaultTypeInternal _UnknownFieldsTestB_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class UnknownFieldsTestA::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownFieldsTestA>()._has_bits_);
  static void set_has_foo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UnknownFieldsTestA::UnknownFieldsTestA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.UnknownFieldsTestA)
}
UnknownFieldsTestA::UnknownFieldsTestA(const UnknownFieldsTestA& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  foo_ = from.foo_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UnknownFieldsTestA)
}

inline void UnknownFieldsTestA::SharedCtor() {
foo_ = false;
}

UnknownFieldsTestA::~UnknownFieldsTestA() {
  // @@protoc_insertion_point(destructor:sync_pb.UnknownFieldsTestA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownFieldsTestA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnknownFieldsTestA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnknownFieldsTestA::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UnknownFieldsTestA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foo_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnknownFieldsTestA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool foo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_foo(&has_bits);
          foo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownFieldsTestA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.UnknownFieldsTestA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool foo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_foo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.UnknownFieldsTestA)
  return target;
}

size_t UnknownFieldsTestA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UnknownFieldsTestA)
  size_t total_size = 0;

  // required bool foo = 1;
  if (_internal_has_foo()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownFieldsTestA::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnknownFieldsTestA*>(
      &from));
}

void UnknownFieldsTestA::MergeFrom(const UnknownFieldsTestA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UnknownFieldsTestA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_foo()) {
    _internal_set_foo(from._internal_foo());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnknownFieldsTestA::CopyFrom(const UnknownFieldsTestA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UnknownFieldsTestA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownFieldsTestA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UnknownFieldsTestA::InternalSwap(UnknownFieldsTestA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foo_, other->foo_);
}

std::string UnknownFieldsTestA::GetTypeName() const {
  return "sync_pb.UnknownFieldsTestA";
}


// ===================================================================

class UnknownFieldsTestB::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownFieldsTestB>()._has_bits_);
  static void set_has_foo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UnknownFieldsTestB::UnknownFieldsTestB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.UnknownFieldsTestB)
}
UnknownFieldsTestB::UnknownFieldsTestB(const UnknownFieldsTestB& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&foo_, &from.foo_,
    static_cast<size_t>(reinterpret_cast<char*>(&bar_) -
    reinterpret_cast<char*>(&foo_)) + sizeof(bar_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.UnknownFieldsTestB)
}

inline void UnknownFieldsTestB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&foo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bar_) -
    reinterpret_cast<char*>(&foo_)) + sizeof(bar_));
}

UnknownFieldsTestB::~UnknownFieldsTestB() {
  // @@protoc_insertion_point(destructor:sync_pb.UnknownFieldsTestB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownFieldsTestB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnknownFieldsTestB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnknownFieldsTestB::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UnknownFieldsTestB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&foo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bar_) -
      reinterpret_cast<char*>(&foo_)) + sizeof(bar_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnknownFieldsTestB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool foo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_foo(&has_bits);
          foo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool bar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bar(&has_bits);
          bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownFieldsTestB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.UnknownFieldsTestB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool foo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_foo(), target);
  }

  // required bool bar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.UnknownFieldsTestB)
  return target;
}

size_t UnknownFieldsTestB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sync_pb.UnknownFieldsTestB)
  size_t total_size = 0;

  if (_internal_has_foo()) {
    // required bool foo = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_bar()) {
    // required bool bar = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UnknownFieldsTestB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UnknownFieldsTestB)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool foo = 1;
    total_size += 1 + 1;

    // required bool bar = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownFieldsTestB::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnknownFieldsTestB*>(
      &from));
}

void UnknownFieldsTestB::MergeFrom(const UnknownFieldsTestB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UnknownFieldsTestB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      foo_ = from.foo_;
    }
    if (cached_has_bits & 0x00000002u) {
      bar_ = from.bar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnknownFieldsTestB::CopyFrom(const UnknownFieldsTestB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UnknownFieldsTestB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownFieldsTestB::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UnknownFieldsTestB::InternalSwap(UnknownFieldsTestB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnknownFieldsTestB, bar_)
      + sizeof(UnknownFieldsTestB::bar_)
      - PROTOBUF_FIELD_OFFSET(UnknownFieldsTestB, foo_)>(
          reinterpret_cast<char*>(&foo_),
          reinterpret_cast<char*>(&other->foo_));
}

std::string UnknownFieldsTestB::GetTypeName() const {
  return "sync_pb.UnknownFieldsTestB";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::UnknownFieldsTestA*
Arena::CreateMaybeMessage< ::sync_pb::UnknownFieldsTestA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::UnknownFieldsTestA >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UnknownFieldsTestB*
Arena::CreateMaybeMessage< ::sync_pb::UnknownFieldsTestB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::UnknownFieldsTestB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
