// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/security_event_specifics.proto

#include "components/sync/protocol/security_event_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR SecurityEventSpecifics::SecurityEventSpecifics(
    ::_pbi::ConstantInitialized)
  : event_time_usec_(int64_t{0})
  , _oneof_case_{}{}
struct SecurityEventSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityEventSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityEventSpecificsDefaultTypeInternal() {}
  union {
    SecurityEventSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityEventSpecificsDefaultTypeInternal _SecurityEventSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class SecurityEventSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<SecurityEventSpecifics>()._has_bits_);
  static const ::sync_pb::GaiaPasswordReuse& gaia_password_reuse_event(const SecurityEventSpecifics* msg);
  static void set_has_event_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::GaiaPasswordReuse&
SecurityEventSpecifics::_Internal::gaia_password_reuse_event(const SecurityEventSpecifics* msg) {
  return *msg->event_.gaia_password_reuse_event_;
}
void SecurityEventSpecifics::set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (gaia_password_reuse_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gaia_password_reuse_event));
    if (message_arena != submessage_arena) {
      gaia_password_reuse_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaia_password_reuse_event, submessage_arena);
    }
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = gaia_password_reuse_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
}
void SecurityEventSpecifics::clear_gaia_password_reuse_event() {
  if (_internal_has_gaia_password_reuse_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.gaia_password_reuse_event_;
    }
    clear_has_event();
  }
}
SecurityEventSpecifics::SecurityEventSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SecurityEventSpecifics)
}
SecurityEventSpecifics::SecurityEventSpecifics(const SecurityEventSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  event_time_usec_ = from.event_time_usec_;
  clear_has_event();
  switch (from.event_case()) {
    case kGaiaPasswordReuseEvent: {
      _internal_mutable_gaia_password_reuse_event()->::sync_pb::GaiaPasswordReuse::MergeFrom(from._internal_gaia_password_reuse_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SecurityEventSpecifics)
}

inline void SecurityEventSpecifics::SharedCtor() {
event_time_usec_ = int64_t{0};
clear_has_event();
}

SecurityEventSpecifics::~SecurityEventSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.SecurityEventSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityEventSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void SecurityEventSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityEventSpecifics::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.SecurityEventSpecifics)
  switch (event_case()) {
    case kGaiaPasswordReuseEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.gaia_password_reuse_event_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SecurityEventSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SecurityEventSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_time_usec_ = int64_t{0};
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SecurityEventSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaia_password_reuse_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 event_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_time_usec(&has_bits);
          event_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityEventSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SecurityEventSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
  if (_internal_has_gaia_password_reuse_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gaia_password_reuse_event(this),
        _Internal::gaia_password_reuse_event(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 event_time_usec = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_event_time_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SecurityEventSpecifics)
  return target;
}

size_t SecurityEventSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SecurityEventSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 event_time_usec = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_event_time_usec());
  }

  switch (event_case()) {
    // .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
    case kGaiaPasswordReuseEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.gaia_password_reuse_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityEventSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SecurityEventSpecifics*>(
      &from));
}

void SecurityEventSpecifics::MergeFrom(const SecurityEventSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SecurityEventSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event_time_usec()) {
    _internal_set_event_time_usec(from._internal_event_time_usec());
  }
  switch (from.event_case()) {
    case kGaiaPasswordReuseEvent: {
      _internal_mutable_gaia_password_reuse_event()->::sync_pb::GaiaPasswordReuse::MergeFrom(from._internal_gaia_password_reuse_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SecurityEventSpecifics::CopyFrom(const SecurityEventSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SecurityEventSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityEventSpecifics::IsInitialized() const {
  return true;
}

void SecurityEventSpecifics::InternalSwap(SecurityEventSpecifics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_time_usec_, other->event_time_usec_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SecurityEventSpecifics::GetTypeName() const {
  return "sync_pb.SecurityEventSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SecurityEventSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::SecurityEventSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SecurityEventSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
