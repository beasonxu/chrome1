// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/web_app_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class WebAppIconInfo;
struct WebAppIconInfoDefaultTypeInternal;
extern WebAppIconInfoDefaultTypeInternal _WebAppIconInfo_default_instance_;
class WebAppSpecifics;
struct WebAppSpecificsDefaultTypeInternal;
extern WebAppSpecificsDefaultTypeInternal _WebAppSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::WebAppIconInfo* Arena::CreateMaybeMessage<::sync_pb::WebAppIconInfo>(Arena*);
template<> ::sync_pb::WebAppSpecifics* Arena::CreateMaybeMessage<::sync_pb::WebAppSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum WebAppIconInfo_Purpose : int {
  WebAppIconInfo_Purpose_UNSPECIFIED = 0,
  WebAppIconInfo_Purpose_ANY = 1,
  WebAppIconInfo_Purpose_MASKABLE = 2,
  WebAppIconInfo_Purpose_MONOCHROME = 3
};
bool WebAppIconInfo_Purpose_IsValid(int value);
constexpr WebAppIconInfo_Purpose WebAppIconInfo_Purpose_Purpose_MIN = WebAppIconInfo_Purpose_UNSPECIFIED;
constexpr WebAppIconInfo_Purpose WebAppIconInfo_Purpose_Purpose_MAX = WebAppIconInfo_Purpose_MONOCHROME;
constexpr int WebAppIconInfo_Purpose_Purpose_ARRAYSIZE = WebAppIconInfo_Purpose_Purpose_MAX + 1;

const std::string& WebAppIconInfo_Purpose_Name(WebAppIconInfo_Purpose value);
template<typename T>
inline const std::string& WebAppIconInfo_Purpose_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebAppIconInfo_Purpose>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebAppIconInfo_Purpose_Name.");
  return WebAppIconInfo_Purpose_Name(static_cast<WebAppIconInfo_Purpose>(enum_t_value));
}
bool WebAppIconInfo_Purpose_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebAppIconInfo_Purpose* value);
enum WebAppSpecifics_UserDisplayMode : int {
  WebAppSpecifics_UserDisplayMode_UNSPECIFIED = 0,
  WebAppSpecifics_UserDisplayMode_BROWSER = 1,
  WebAppSpecifics_UserDisplayMode_STANDALONE = 3,
  WebAppSpecifics_UserDisplayMode_TABBED = 6
};
bool WebAppSpecifics_UserDisplayMode_IsValid(int value);
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics_UserDisplayMode_UserDisplayMode_MIN = WebAppSpecifics_UserDisplayMode_UNSPECIFIED;
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics_UserDisplayMode_UserDisplayMode_MAX = WebAppSpecifics_UserDisplayMode_TABBED;
constexpr int WebAppSpecifics_UserDisplayMode_UserDisplayMode_ARRAYSIZE = WebAppSpecifics_UserDisplayMode_UserDisplayMode_MAX + 1;

const std::string& WebAppSpecifics_UserDisplayMode_Name(WebAppSpecifics_UserDisplayMode value);
template<typename T>
inline const std::string& WebAppSpecifics_UserDisplayMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebAppSpecifics_UserDisplayMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebAppSpecifics_UserDisplayMode_Name.");
  return WebAppSpecifics_UserDisplayMode_Name(static_cast<WebAppSpecifics_UserDisplayMode>(enum_t_value));
}
bool WebAppSpecifics_UserDisplayMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebAppSpecifics_UserDisplayMode* value);
// ===================================================================

class WebAppIconInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WebAppIconInfo) */ {
 public:
  inline WebAppIconInfo() : WebAppIconInfo(nullptr) {}
  ~WebAppIconInfo() override;
  explicit PROTOBUF_CONSTEXPR WebAppIconInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebAppIconInfo(const WebAppIconInfo& from);
  WebAppIconInfo(WebAppIconInfo&& from) noexcept
    : WebAppIconInfo() {
    *this = ::std::move(from);
  }

  inline WebAppIconInfo& operator=(const WebAppIconInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebAppIconInfo& operator=(WebAppIconInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebAppIconInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebAppIconInfo* internal_default_instance() {
    return reinterpret_cast<const WebAppIconInfo*>(
               &_WebAppIconInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebAppIconInfo& a, WebAppIconInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebAppIconInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebAppIconInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebAppIconInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebAppIconInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebAppIconInfo& from);
  void MergeFrom(const WebAppIconInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebAppIconInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WebAppIconInfo";
  }
  protected:
  explicit WebAppIconInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WebAppIconInfo_Purpose Purpose;
  static constexpr Purpose UNSPECIFIED =
    WebAppIconInfo_Purpose_UNSPECIFIED;
  static constexpr Purpose ANY =
    WebAppIconInfo_Purpose_ANY;
  static constexpr Purpose MASKABLE =
    WebAppIconInfo_Purpose_MASKABLE;
  static constexpr Purpose MONOCHROME =
    WebAppIconInfo_Purpose_MONOCHROME;
  static inline bool Purpose_IsValid(int value) {
    return WebAppIconInfo_Purpose_IsValid(value);
  }
  static constexpr Purpose Purpose_MIN =
    WebAppIconInfo_Purpose_Purpose_MIN;
  static constexpr Purpose Purpose_MAX =
    WebAppIconInfo_Purpose_Purpose_MAX;
  static constexpr int Purpose_ARRAYSIZE =
    WebAppIconInfo_Purpose_Purpose_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Purpose_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Purpose>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Purpose_Name.");
    return WebAppIconInfo_Purpose_Name(enum_t_value);
  }
  static inline bool Purpose_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Purpose* value) {
    return WebAppIconInfo_Purpose_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kSizeInPxFieldNumber = 1,
    kPurposeFieldNumber = 3,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional int32 size_in_px = 1;
  bool has_size_in_px() const;
  private:
  bool _internal_has_size_in_px() const;
  public:
  void clear_size_in_px();
  int32_t size_in_px() const;
  void set_size_in_px(int32_t value);
  private:
  int32_t _internal_size_in_px() const;
  void _internal_set_size_in_px(int32_t value);
  public:

  // optional .sync_pb.WebAppIconInfo.Purpose purpose = 3;
  bool has_purpose() const;
  private:
  bool _internal_has_purpose() const;
  public:
  void clear_purpose();
  ::sync_pb::WebAppIconInfo_Purpose purpose() const;
  void set_purpose(::sync_pb::WebAppIconInfo_Purpose value);
  private:
  ::sync_pb::WebAppIconInfo_Purpose _internal_purpose() const;
  void _internal_set_purpose(::sync_pb::WebAppIconInfo_Purpose value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WebAppIconInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int32_t size_in_px_;
  int purpose_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WebAppSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WebAppSpecifics) */ {
 public:
  inline WebAppSpecifics() : WebAppSpecifics(nullptr) {}
  ~WebAppSpecifics() override;
  explicit PROTOBUF_CONSTEXPR WebAppSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebAppSpecifics(const WebAppSpecifics& from);
  WebAppSpecifics(WebAppSpecifics&& from) noexcept
    : WebAppSpecifics() {
    *this = ::std::move(from);
  }

  inline WebAppSpecifics& operator=(const WebAppSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebAppSpecifics& operator=(WebAppSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebAppSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebAppSpecifics* internal_default_instance() {
    return reinterpret_cast<const WebAppSpecifics*>(
               &_WebAppSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WebAppSpecifics& a, WebAppSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebAppSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebAppSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebAppSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebAppSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebAppSpecifics& from);
  void MergeFrom(const WebAppSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebAppSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WebAppSpecifics";
  }
  protected:
  explicit WebAppSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WebAppSpecifics_UserDisplayMode UserDisplayMode;
  static constexpr UserDisplayMode UNSPECIFIED =
    WebAppSpecifics_UserDisplayMode_UNSPECIFIED;
  static constexpr UserDisplayMode BROWSER =
    WebAppSpecifics_UserDisplayMode_BROWSER;
  static constexpr UserDisplayMode STANDALONE =
    WebAppSpecifics_UserDisplayMode_STANDALONE;
  static constexpr UserDisplayMode TABBED =
    WebAppSpecifics_UserDisplayMode_TABBED;
  static inline bool UserDisplayMode_IsValid(int value) {
    return WebAppSpecifics_UserDisplayMode_IsValid(value);
  }
  static constexpr UserDisplayMode UserDisplayMode_MIN =
    WebAppSpecifics_UserDisplayMode_UserDisplayMode_MIN;
  static constexpr UserDisplayMode UserDisplayMode_MAX =
    WebAppSpecifics_UserDisplayMode_UserDisplayMode_MAX;
  static constexpr int UserDisplayMode_ARRAYSIZE =
    WebAppSpecifics_UserDisplayMode_UserDisplayMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UserDisplayMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserDisplayMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserDisplayMode_Name.");
    return WebAppSpecifics_UserDisplayMode_Name(enum_t_value);
  }
  static inline bool UserDisplayMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UserDisplayMode* value) {
    return WebAppSpecifics_UserDisplayMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIconInfosFieldNumber = 6,
    kStartUrlFieldNumber = 1,
    kNameFieldNumber = 2,
    kScopeFieldNumber = 5,
    kUserPageOrdinalFieldNumber = 7,
    kUserLaunchOrdinalFieldNumber = 8,
    kManifestIdFieldNumber = 9,
    kUserDisplayModeFieldNumber = 3,
    kThemeColorFieldNumber = 4,
  };
  // repeated .sync_pb.WebAppIconInfo icon_infos = 6;
  int icon_infos_size() const;
  private:
  int _internal_icon_infos_size() const;
  public:
  void clear_icon_infos();
  ::sync_pb::WebAppIconInfo* mutable_icon_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo >*
      mutable_icon_infos();
  private:
  const ::sync_pb::WebAppIconInfo& _internal_icon_infos(int index) const;
  ::sync_pb::WebAppIconInfo* _internal_add_icon_infos();
  public:
  const ::sync_pb::WebAppIconInfo& icon_infos(int index) const;
  ::sync_pb::WebAppIconInfo* add_icon_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo >&
      icon_infos() const;

  // optional string start_url = 1;
  bool has_start_url() const;
  private:
  bool _internal_has_start_url() const;
  public:
  void clear_start_url();
  const std::string& start_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_url();
  PROTOBUF_NODISCARD std::string* release_start_url();
  void set_allocated_start_url(std::string* start_url);
  private:
  const std::string& _internal_start_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_url(const std::string& value);
  std::string* _internal_mutable_start_url();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string scope = 5;
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  const std::string& scope() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scope(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scope();
  PROTOBUF_NODISCARD std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // optional string user_page_ordinal = 7;
  bool has_user_page_ordinal() const;
  private:
  bool _internal_has_user_page_ordinal() const;
  public:
  void clear_user_page_ordinal();
  const std::string& user_page_ordinal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_page_ordinal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_page_ordinal();
  PROTOBUF_NODISCARD std::string* release_user_page_ordinal();
  void set_allocated_user_page_ordinal(std::string* user_page_ordinal);
  private:
  const std::string& _internal_user_page_ordinal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_page_ordinal(const std::string& value);
  std::string* _internal_mutable_user_page_ordinal();
  public:

  // optional string user_launch_ordinal = 8;
  bool has_user_launch_ordinal() const;
  private:
  bool _internal_has_user_launch_ordinal() const;
  public:
  void clear_user_launch_ordinal();
  const std::string& user_launch_ordinal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_launch_ordinal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_launch_ordinal();
  PROTOBUF_NODISCARD std::string* release_user_launch_ordinal();
  void set_allocated_user_launch_ordinal(std::string* user_launch_ordinal);
  private:
  const std::string& _internal_user_launch_ordinal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_launch_ordinal(const std::string& value);
  std::string* _internal_mutable_user_launch_ordinal();
  public:

  // optional string manifest_id = 9;
  bool has_manifest_id() const;
  private:
  bool _internal_has_manifest_id() const;
  public:
  void clear_manifest_id();
  const std::string& manifest_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manifest_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manifest_id();
  PROTOBUF_NODISCARD std::string* release_manifest_id();
  void set_allocated_manifest_id(std::string* manifest_id);
  private:
  const std::string& _internal_manifest_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manifest_id(const std::string& value);
  std::string* _internal_mutable_manifest_id();
  public:

  // optional .sync_pb.WebAppSpecifics.UserDisplayMode user_display_mode = 3;
  bool has_user_display_mode() const;
  private:
  bool _internal_has_user_display_mode() const;
  public:
  void clear_user_display_mode();
  ::sync_pb::WebAppSpecifics_UserDisplayMode user_display_mode() const;
  void set_user_display_mode(::sync_pb::WebAppSpecifics_UserDisplayMode value);
  private:
  ::sync_pb::WebAppSpecifics_UserDisplayMode _internal_user_display_mode() const;
  void _internal_set_user_display_mode(::sync_pb::WebAppSpecifics_UserDisplayMode value);
  public:

  // optional uint32 theme_color = 4;
  bool has_theme_color() const;
  private:
  bool _internal_has_theme_color() const;
  public:
  void clear_theme_color();
  uint32_t theme_color() const;
  void set_theme_color(uint32_t value);
  private:
  uint32_t _internal_theme_color() const;
  void _internal_set_theme_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WebAppSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo > icon_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_page_ordinal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_launch_ordinal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_id_;
  int user_display_mode_;
  uint32_t theme_color_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebAppIconInfo

// optional int32 size_in_px = 1;
inline bool WebAppIconInfo::_internal_has_size_in_px() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebAppIconInfo::has_size_in_px() const {
  return _internal_has_size_in_px();
}
inline void WebAppIconInfo::clear_size_in_px() {
  size_in_px_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t WebAppIconInfo::_internal_size_in_px() const {
  return size_in_px_;
}
inline int32_t WebAppIconInfo::size_in_px() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppIconInfo.size_in_px)
  return _internal_size_in_px();
}
inline void WebAppIconInfo::_internal_set_size_in_px(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  size_in_px_ = value;
}
inline void WebAppIconInfo::set_size_in_px(int32_t value) {
  _internal_set_size_in_px(value);
  // @@protoc_insertion_point(field_set:sync_pb.WebAppIconInfo.size_in_px)
}

// optional string url = 2;
inline bool WebAppIconInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebAppIconInfo::has_url() const {
  return _internal_has_url();
}
inline void WebAppIconInfo::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebAppIconInfo::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppIconInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppIconInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebAppIconInfo.url)
}
inline std::string* WebAppIconInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppIconInfo.url)
  return _s;
}
inline const std::string& WebAppIconInfo::_internal_url() const {
  return url_.Get();
}
inline void WebAppIconInfo::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppIconInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppIconInfo::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppIconInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppIconInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppIconInfo.url)
}

// optional .sync_pb.WebAppIconInfo.Purpose purpose = 3;
inline bool WebAppIconInfo::_internal_has_purpose() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebAppIconInfo::has_purpose() const {
  return _internal_has_purpose();
}
inline void WebAppIconInfo::clear_purpose() {
  purpose_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::WebAppIconInfo_Purpose WebAppIconInfo::_internal_purpose() const {
  return static_cast< ::sync_pb::WebAppIconInfo_Purpose >(purpose_);
}
inline ::sync_pb::WebAppIconInfo_Purpose WebAppIconInfo::purpose() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppIconInfo.purpose)
  return _internal_purpose();
}
inline void WebAppIconInfo::_internal_set_purpose(::sync_pb::WebAppIconInfo_Purpose value) {
  assert(::sync_pb::WebAppIconInfo_Purpose_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  purpose_ = value;
}
inline void WebAppIconInfo::set_purpose(::sync_pb::WebAppIconInfo_Purpose value) {
  _internal_set_purpose(value);
  // @@protoc_insertion_point(field_set:sync_pb.WebAppIconInfo.purpose)
}

// -------------------------------------------------------------------

// WebAppSpecifics

// optional string start_url = 1;
inline bool WebAppSpecifics::_internal_has_start_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebAppSpecifics::has_start_url() const {
  return _internal_has_start_url();
}
inline void WebAppSpecifics::clear_start_url() {
  start_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebAppSpecifics::start_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.start_url)
  return _internal_start_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppSpecifics::set_start_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 start_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.start_url)
}
inline std::string* WebAppSpecifics::mutable_start_url() {
  std::string* _s = _internal_mutable_start_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.start_url)
  return _s;
}
inline const std::string& WebAppSpecifics::_internal_start_url() const {
  return start_url_.Get();
}
inline void WebAppSpecifics::_internal_set_start_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::_internal_mutable_start_url() {
  _has_bits_[0] |= 0x00000001u;
  return start_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::release_start_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppSpecifics.start_url)
  if (!_internal_has_start_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = start_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_url_.IsDefault()) {
    start_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppSpecifics::set_allocated_start_url(std::string* start_url) {
  if (start_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_url_.SetAllocated(start_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_url_.IsDefault()) {
    start_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppSpecifics.start_url)
}

// optional string name = 2;
inline bool WebAppSpecifics::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebAppSpecifics::has_name() const {
  return _internal_has_name();
}
inline void WebAppSpecifics::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebAppSpecifics::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppSpecifics::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.name)
}
inline std::string* WebAppSpecifics::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.name)
  return _s;
}
inline const std::string& WebAppSpecifics::_internal_name() const {
  return name_.Get();
}
inline void WebAppSpecifics::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppSpecifics.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppSpecifics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppSpecifics.name)
}

// optional .sync_pb.WebAppSpecifics.UserDisplayMode user_display_mode = 3;
inline bool WebAppSpecifics::_internal_has_user_display_mode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WebAppSpecifics::has_user_display_mode() const {
  return _internal_has_user_display_mode();
}
inline void WebAppSpecifics::clear_user_display_mode() {
  user_display_mode_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::sync_pb::WebAppSpecifics_UserDisplayMode WebAppSpecifics::_internal_user_display_mode() const {
  return static_cast< ::sync_pb::WebAppSpecifics_UserDisplayMode >(user_display_mode_);
}
inline ::sync_pb::WebAppSpecifics_UserDisplayMode WebAppSpecifics::user_display_mode() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.user_display_mode)
  return _internal_user_display_mode();
}
inline void WebAppSpecifics::_internal_set_user_display_mode(::sync_pb::WebAppSpecifics_UserDisplayMode value) {
  assert(::sync_pb::WebAppSpecifics_UserDisplayMode_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  user_display_mode_ = value;
}
inline void WebAppSpecifics::set_user_display_mode(::sync_pb::WebAppSpecifics_UserDisplayMode value) {
  _internal_set_user_display_mode(value);
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.user_display_mode)
}

// optional uint32 theme_color = 4;
inline bool WebAppSpecifics::_internal_has_theme_color() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WebAppSpecifics::has_theme_color() const {
  return _internal_has_theme_color();
}
inline void WebAppSpecifics::clear_theme_color() {
  theme_color_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t WebAppSpecifics::_internal_theme_color() const {
  return theme_color_;
}
inline uint32_t WebAppSpecifics::theme_color() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.theme_color)
  return _internal_theme_color();
}
inline void WebAppSpecifics::_internal_set_theme_color(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  theme_color_ = value;
}
inline void WebAppSpecifics::set_theme_color(uint32_t value) {
  _internal_set_theme_color(value);
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.theme_color)
}

// optional string scope = 5;
inline bool WebAppSpecifics::_internal_has_scope() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebAppSpecifics::has_scope() const {
  return _internal_has_scope();
}
inline void WebAppSpecifics::clear_scope() {
  scope_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WebAppSpecifics::scope() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.scope)
  return _internal_scope();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppSpecifics::set_scope(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 scope_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.scope)
}
inline std::string* WebAppSpecifics::mutable_scope() {
  std::string* _s = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.scope)
  return _s;
}
inline const std::string& WebAppSpecifics::_internal_scope() const {
  return scope_.Get();
}
inline void WebAppSpecifics::_internal_set_scope(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::_internal_mutable_scope() {
  _has_bits_[0] |= 0x00000004u;
  return scope_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::release_scope() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppSpecifics.scope)
  if (!_internal_has_scope()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = scope_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scope_.IsDefault()) {
    scope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppSpecifics::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  scope_.SetAllocated(scope, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scope_.IsDefault()) {
    scope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppSpecifics.scope)
}

// repeated .sync_pb.WebAppIconInfo icon_infos = 6;
inline int WebAppSpecifics::_internal_icon_infos_size() const {
  return icon_infos_.size();
}
inline int WebAppSpecifics::icon_infos_size() const {
  return _internal_icon_infos_size();
}
inline void WebAppSpecifics::clear_icon_infos() {
  icon_infos_.Clear();
}
inline ::sync_pb::WebAppIconInfo* WebAppSpecifics::mutable_icon_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.icon_infos)
  return icon_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo >*
WebAppSpecifics::mutable_icon_infos() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WebAppSpecifics.icon_infos)
  return &icon_infos_;
}
inline const ::sync_pb::WebAppIconInfo& WebAppSpecifics::_internal_icon_infos(int index) const {
  return icon_infos_.Get(index);
}
inline const ::sync_pb::WebAppIconInfo& WebAppSpecifics::icon_infos(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.icon_infos)
  return _internal_icon_infos(index);
}
inline ::sync_pb::WebAppIconInfo* WebAppSpecifics::_internal_add_icon_infos() {
  return icon_infos_.Add();
}
inline ::sync_pb::WebAppIconInfo* WebAppSpecifics::add_icon_infos() {
  ::sync_pb::WebAppIconInfo* _add = _internal_add_icon_infos();
  // @@protoc_insertion_point(field_add:sync_pb.WebAppSpecifics.icon_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo >&
WebAppSpecifics::icon_infos() const {
  // @@protoc_insertion_point(field_list:sync_pb.WebAppSpecifics.icon_infos)
  return icon_infos_;
}

// optional string user_page_ordinal = 7;
inline bool WebAppSpecifics::_internal_has_user_page_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WebAppSpecifics::has_user_page_ordinal() const {
  return _internal_has_user_page_ordinal();
}
inline void WebAppSpecifics::clear_user_page_ordinal() {
  user_page_ordinal_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WebAppSpecifics::user_page_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.user_page_ordinal)
  return _internal_user_page_ordinal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppSpecifics::set_user_page_ordinal(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 user_page_ordinal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.user_page_ordinal)
}
inline std::string* WebAppSpecifics::mutable_user_page_ordinal() {
  std::string* _s = _internal_mutable_user_page_ordinal();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.user_page_ordinal)
  return _s;
}
inline const std::string& WebAppSpecifics::_internal_user_page_ordinal() const {
  return user_page_ordinal_.Get();
}
inline void WebAppSpecifics::_internal_set_user_page_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  user_page_ordinal_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::_internal_mutable_user_page_ordinal() {
  _has_bits_[0] |= 0x00000008u;
  return user_page_ordinal_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::release_user_page_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppSpecifics.user_page_ordinal)
  if (!_internal_has_user_page_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = user_page_ordinal_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_page_ordinal_.IsDefault()) {
    user_page_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppSpecifics::set_allocated_user_page_ordinal(std::string* user_page_ordinal) {
  if (user_page_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_page_ordinal_.SetAllocated(user_page_ordinal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_page_ordinal_.IsDefault()) {
    user_page_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppSpecifics.user_page_ordinal)
}

// optional string user_launch_ordinal = 8;
inline bool WebAppSpecifics::_internal_has_user_launch_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WebAppSpecifics::has_user_launch_ordinal() const {
  return _internal_has_user_launch_ordinal();
}
inline void WebAppSpecifics::clear_user_launch_ordinal() {
  user_launch_ordinal_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WebAppSpecifics::user_launch_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.user_launch_ordinal)
  return _internal_user_launch_ordinal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppSpecifics::set_user_launch_ordinal(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 user_launch_ordinal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.user_launch_ordinal)
}
inline std::string* WebAppSpecifics::mutable_user_launch_ordinal() {
  std::string* _s = _internal_mutable_user_launch_ordinal();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.user_launch_ordinal)
  return _s;
}
inline const std::string& WebAppSpecifics::_internal_user_launch_ordinal() const {
  return user_launch_ordinal_.Get();
}
inline void WebAppSpecifics::_internal_set_user_launch_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  user_launch_ordinal_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::_internal_mutable_user_launch_ordinal() {
  _has_bits_[0] |= 0x00000010u;
  return user_launch_ordinal_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::release_user_launch_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppSpecifics.user_launch_ordinal)
  if (!_internal_has_user_launch_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = user_launch_ordinal_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_launch_ordinal_.IsDefault()) {
    user_launch_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppSpecifics::set_allocated_user_launch_ordinal(std::string* user_launch_ordinal) {
  if (user_launch_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  user_launch_ordinal_.SetAllocated(user_launch_ordinal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_launch_ordinal_.IsDefault()) {
    user_launch_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppSpecifics.user_launch_ordinal)
}

// optional string manifest_id = 9;
inline bool WebAppSpecifics::_internal_has_manifest_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WebAppSpecifics::has_manifest_id() const {
  return _internal_has_manifest_id();
}
inline void WebAppSpecifics::clear_manifest_id() {
  manifest_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& WebAppSpecifics::manifest_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.manifest_id)
  return _internal_manifest_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppSpecifics::set_manifest_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 manifest_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.manifest_id)
}
inline std::string* WebAppSpecifics::mutable_manifest_id() {
  std::string* _s = _internal_mutable_manifest_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.manifest_id)
  return _s;
}
inline const std::string& WebAppSpecifics::_internal_manifest_id() const {
  return manifest_id_.Get();
}
inline void WebAppSpecifics::_internal_set_manifest_id(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  manifest_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::_internal_mutable_manifest_id() {
  _has_bits_[0] |= 0x00000020u;
  return manifest_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppSpecifics::release_manifest_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppSpecifics.manifest_id)
  if (!_internal_has_manifest_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = manifest_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manifest_id_.IsDefault()) {
    manifest_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppSpecifics::set_allocated_manifest_id(std::string* manifest_id) {
  if (manifest_id != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  manifest_id_.SetAllocated(manifest_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manifest_id_.IsDefault()) {
    manifest_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppSpecifics.manifest_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::WebAppIconInfo_Purpose> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WebAppSpecifics_UserDisplayMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto
