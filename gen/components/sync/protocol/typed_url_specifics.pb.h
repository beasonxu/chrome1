// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/typed_url_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2ftyped_5furl_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2ftyped_5furl_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2ftyped_5furl_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2ftyped_5furl_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class TypedUrlSpecifics;
struct TypedUrlSpecificsDefaultTypeInternal;
extern TypedUrlSpecificsDefaultTypeInternal _TypedUrlSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::TypedUrlSpecifics* Arena::CreateMaybeMessage<::sync_pb::TypedUrlSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class TypedUrlSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.TypedUrlSpecifics) */ {
 public:
  inline TypedUrlSpecifics() : TypedUrlSpecifics(nullptr) {}
  ~TypedUrlSpecifics() override;
  explicit PROTOBUF_CONSTEXPR TypedUrlSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypedUrlSpecifics(const TypedUrlSpecifics& from);
  TypedUrlSpecifics(TypedUrlSpecifics&& from) noexcept
    : TypedUrlSpecifics() {
    *this = ::std::move(from);
  }

  inline TypedUrlSpecifics& operator=(const TypedUrlSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypedUrlSpecifics& operator=(TypedUrlSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TypedUrlSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypedUrlSpecifics* internal_default_instance() {
    return reinterpret_cast<const TypedUrlSpecifics*>(
               &_TypedUrlSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TypedUrlSpecifics& a, TypedUrlSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TypedUrlSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypedUrlSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypedUrlSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypedUrlSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TypedUrlSpecifics& from);
  void MergeFrom(const TypedUrlSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypedUrlSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.TypedUrlSpecifics";
  }
  protected:
  explicit TypedUrlSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisitsFieldNumber = 7,
    kVisitTransitionsFieldNumber = 8,
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
    kHiddenFieldNumber = 4,
  };
  // repeated int64 visits = 7 [packed = true];
  int visits_size() const;
  private:
  int _internal_visits_size() const;
  public:
  void clear_visits();
  private:
  int64_t _internal_visits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_visits() const;
  void _internal_add_visits(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_visits();
  public:
  int64_t visits(int index) const;
  void set_visits(int index, int64_t value);
  void add_visits(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      visits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_visits();

  // repeated int32 visit_transitions = 8 [packed = true];
  int visit_transitions_size() const;
  private:
  int _internal_visit_transitions_size() const;
  public:
  void clear_visit_transitions();
  private:
  int32_t _internal_visit_transitions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_visit_transitions() const;
  void _internal_add_visit_transitions(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_visit_transitions();
  public:
  int32_t visit_transitions(int index) const;
  void set_visit_transitions(int index, int32_t value);
  void add_visit_transitions(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      visit_transitions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_visit_transitions();

  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional bool hidden = 4;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.TypedUrlSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > visits_;
  mutable std::atomic<int> _visits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > visit_transitions_;
  mutable std::atomic<int> _visit_transitions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  bool hidden_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2ftyped_5furl_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypedUrlSpecifics

// optional string url = 1;
inline bool TypedUrlSpecifics::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypedUrlSpecifics::has_url() const {
  return _internal_has_url();
}
inline void TypedUrlSpecifics::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TypedUrlSpecifics::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TypedUrlSpecifics::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.url)
}
inline std::string* TypedUrlSpecifics::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.TypedUrlSpecifics.url)
  return _s;
}
inline const std::string& TypedUrlSpecifics::_internal_url() const {
  return url_.Get();
}
inline void TypedUrlSpecifics::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* TypedUrlSpecifics::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* TypedUrlSpecifics::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.TypedUrlSpecifics.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TypedUrlSpecifics::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TypedUrlSpecifics.url)
}

// optional string title = 2;
inline bool TypedUrlSpecifics::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TypedUrlSpecifics::has_title() const {
  return _internal_has_title();
}
inline void TypedUrlSpecifics::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TypedUrlSpecifics::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TypedUrlSpecifics::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.title)
}
inline std::string* TypedUrlSpecifics::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.TypedUrlSpecifics.title)
  return _s;
}
inline const std::string& TypedUrlSpecifics::_internal_title() const {
  return title_.Get();
}
inline void TypedUrlSpecifics::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* TypedUrlSpecifics::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* TypedUrlSpecifics::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.TypedUrlSpecifics.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TypedUrlSpecifics::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TypedUrlSpecifics.title)
}

// optional bool hidden = 4;
inline bool TypedUrlSpecifics::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TypedUrlSpecifics::has_hidden() const {
  return _internal_has_hidden();
}
inline void TypedUrlSpecifics::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TypedUrlSpecifics::_internal_hidden() const {
  return hidden_;
}
inline bool TypedUrlSpecifics::hidden() const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.hidden)
  return _internal_hidden();
}
inline void TypedUrlSpecifics::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000004u;
  hidden_ = value;
}
inline void TypedUrlSpecifics::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.hidden)
}

// repeated int64 visits = 7 [packed = true];
inline int TypedUrlSpecifics::_internal_visits_size() const {
  return visits_.size();
}
inline int TypedUrlSpecifics::visits_size() const {
  return _internal_visits_size();
}
inline void TypedUrlSpecifics::clear_visits() {
  visits_.Clear();
}
inline int64_t TypedUrlSpecifics::_internal_visits(int index) const {
  return visits_.Get(index);
}
inline int64_t TypedUrlSpecifics::visits(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.visits)
  return _internal_visits(index);
}
inline void TypedUrlSpecifics::set_visits(int index, int64_t value) {
  visits_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.visits)
}
inline void TypedUrlSpecifics::_internal_add_visits(int64_t value) {
  visits_.Add(value);
}
inline void TypedUrlSpecifics::add_visits(int64_t value) {
  _internal_add_visits(value);
  // @@protoc_insertion_point(field_add:sync_pb.TypedUrlSpecifics.visits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TypedUrlSpecifics::_internal_visits() const {
  return visits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TypedUrlSpecifics::visits() const {
  // @@protoc_insertion_point(field_list:sync_pb.TypedUrlSpecifics.visits)
  return _internal_visits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TypedUrlSpecifics::_internal_mutable_visits() {
  return &visits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TypedUrlSpecifics::mutable_visits() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TypedUrlSpecifics.visits)
  return _internal_mutable_visits();
}

// repeated int32 visit_transitions = 8 [packed = true];
inline int TypedUrlSpecifics::_internal_visit_transitions_size() const {
  return visit_transitions_.size();
}
inline int TypedUrlSpecifics::visit_transitions_size() const {
  return _internal_visit_transitions_size();
}
inline void TypedUrlSpecifics::clear_visit_transitions() {
  visit_transitions_.Clear();
}
inline int32_t TypedUrlSpecifics::_internal_visit_transitions(int index) const {
  return visit_transitions_.Get(index);
}
inline int32_t TypedUrlSpecifics::visit_transitions(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.visit_transitions)
  return _internal_visit_transitions(index);
}
inline void TypedUrlSpecifics::set_visit_transitions(int index, int32_t value) {
  visit_transitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.visit_transitions)
}
inline void TypedUrlSpecifics::_internal_add_visit_transitions(int32_t value) {
  visit_transitions_.Add(value);
}
inline void TypedUrlSpecifics::add_visit_transitions(int32_t value) {
  _internal_add_visit_transitions(value);
  // @@protoc_insertion_point(field_add:sync_pb.TypedUrlSpecifics.visit_transitions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TypedUrlSpecifics::_internal_visit_transitions() const {
  return visit_transitions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TypedUrlSpecifics::visit_transitions() const {
  // @@protoc_insertion_point(field_list:sync_pb.TypedUrlSpecifics.visit_transitions)
  return _internal_visit_transitions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TypedUrlSpecifics::_internal_mutable_visit_transitions() {
  return &visit_transitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TypedUrlSpecifics::mutable_visit_transitions() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TypedUrlSpecifics.visit_transitions)
  return _internal_mutable_visit_transitions();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2ftyped_5furl_5fspecifics_2eproto
