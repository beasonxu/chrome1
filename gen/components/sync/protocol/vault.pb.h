// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/vault.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fvault_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fvault_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fvault_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fvault_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class JoinSecurityDomainsErrorDetail;
struct JoinSecurityDomainsErrorDetailDefaultTypeInternal;
extern JoinSecurityDomainsErrorDetailDefaultTypeInternal _JoinSecurityDomainsErrorDetail_default_instance_;
class JoinSecurityDomainsRequest;
struct JoinSecurityDomainsRequestDefaultTypeInternal;
extern JoinSecurityDomainsRequestDefaultTypeInternal _JoinSecurityDomainsRequest_default_instance_;
class JoinSecurityDomainsResponse;
struct JoinSecurityDomainsResponseDefaultTypeInternal;
extern JoinSecurityDomainsResponseDefaultTypeInternal _JoinSecurityDomainsResponse_default_instance_;
class Proto3Any;
struct Proto3AnyDefaultTypeInternal;
extern Proto3AnyDefaultTypeInternal _Proto3Any_default_instance_;
class RPCStatus;
struct RPCStatusDefaultTypeInternal;
extern RPCStatusDefaultTypeInternal _RPCStatus_default_instance_;
class RotationProof;
struct RotationProofDefaultTypeInternal;
extern RotationProofDefaultTypeInternal _RotationProof_default_instance_;
class SecurityDomain;
struct SecurityDomainDefaultTypeInternal;
extern SecurityDomainDefaultTypeInternal _SecurityDomain_default_instance_;
class SecurityDomainDetails;
struct SecurityDomainDetailsDefaultTypeInternal;
extern SecurityDomainDetailsDefaultTypeInternal _SecurityDomainDetails_default_instance_;
class SecurityDomainDetails_SyncDetails;
struct SecurityDomainDetails_SyncDetailsDefaultTypeInternal;
extern SecurityDomainDetails_SyncDetailsDefaultTypeInternal _SecurityDomainDetails_SyncDetails_default_instance_;
class SecurityDomainMember;
struct SecurityDomainMemberDefaultTypeInternal;
extern SecurityDomainMemberDefaultTypeInternal _SecurityDomainMember_default_instance_;
class SecurityDomainMember_SecurityDomainMembership;
struct SecurityDomainMember_SecurityDomainMembershipDefaultTypeInternal;
extern SecurityDomainMember_SecurityDomainMembershipDefaultTypeInternal _SecurityDomainMember_SecurityDomainMembership_default_instance_;
class SharedMemberKey;
struct SharedMemberKeyDefaultTypeInternal;
extern SharedMemberKeyDefaultTypeInternal _SharedMemberKey_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::JoinSecurityDomainsErrorDetail* Arena::CreateMaybeMessage<::sync_pb::JoinSecurityDomainsErrorDetail>(Arena*);
template<> ::sync_pb::JoinSecurityDomainsRequest* Arena::CreateMaybeMessage<::sync_pb::JoinSecurityDomainsRequest>(Arena*);
template<> ::sync_pb::JoinSecurityDomainsResponse* Arena::CreateMaybeMessage<::sync_pb::JoinSecurityDomainsResponse>(Arena*);
template<> ::sync_pb::Proto3Any* Arena::CreateMaybeMessage<::sync_pb::Proto3Any>(Arena*);
template<> ::sync_pb::RPCStatus* Arena::CreateMaybeMessage<::sync_pb::RPCStatus>(Arena*);
template<> ::sync_pb::RotationProof* Arena::CreateMaybeMessage<::sync_pb::RotationProof>(Arena*);
template<> ::sync_pb::SecurityDomain* Arena::CreateMaybeMessage<::sync_pb::SecurityDomain>(Arena*);
template<> ::sync_pb::SecurityDomainDetails* Arena::CreateMaybeMessage<::sync_pb::SecurityDomainDetails>(Arena*);
template<> ::sync_pb::SecurityDomainDetails_SyncDetails* Arena::CreateMaybeMessage<::sync_pb::SecurityDomainDetails_SyncDetails>(Arena*);
template<> ::sync_pb::SecurityDomainMember* Arena::CreateMaybeMessage<::sync_pb::SecurityDomainMember>(Arena*);
template<> ::sync_pb::SecurityDomainMember_SecurityDomainMembership* Arena::CreateMaybeMessage<::sync_pb::SecurityDomainMember_SecurityDomainMembership>(Arena*);
template<> ::sync_pb::SharedMemberKey* Arena::CreateMaybeMessage<::sync_pb::SharedMemberKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum SecurityDomainMember_MemberType : int {
  SecurityDomainMember_MemberType_MEMBER_TYPE_UNSPECIFIED = 0,
  SecurityDomainMember_MemberType_MEMBER_TYPE_PHYSICAL_DEVICE = 1,
  SecurityDomainMember_MemberType_SecurityDomainMember_MemberType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SecurityDomainMember_MemberType_SecurityDomainMember_MemberType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SecurityDomainMember_MemberType_IsValid(int value);
constexpr SecurityDomainMember_MemberType SecurityDomainMember_MemberType_MemberType_MIN = SecurityDomainMember_MemberType_MEMBER_TYPE_UNSPECIFIED;
constexpr SecurityDomainMember_MemberType SecurityDomainMember_MemberType_MemberType_MAX = SecurityDomainMember_MemberType_MEMBER_TYPE_PHYSICAL_DEVICE;
constexpr int SecurityDomainMember_MemberType_MemberType_ARRAYSIZE = SecurityDomainMember_MemberType_MemberType_MAX + 1;

const std::string& SecurityDomainMember_MemberType_Name(SecurityDomainMember_MemberType value);
template<typename T>
inline const std::string& SecurityDomainMember_MemberType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityDomainMember_MemberType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityDomainMember_MemberType_Name.");
  return SecurityDomainMember_MemberType_Name(static_cast<SecurityDomainMember_MemberType>(enum_t_value));
}
bool SecurityDomainMember_MemberType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityDomainMember_MemberType* value);
// ===================================================================

class SharedMemberKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SharedMemberKey) */ {
 public:
  inline SharedMemberKey() : SharedMemberKey(nullptr) {}
  ~SharedMemberKey() override;
  explicit PROTOBUF_CONSTEXPR SharedMemberKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharedMemberKey(const SharedMemberKey& from);
  SharedMemberKey(SharedMemberKey&& from) noexcept
    : SharedMemberKey() {
    *this = ::std::move(from);
  }

  inline SharedMemberKey& operator=(const SharedMemberKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedMemberKey& operator=(SharedMemberKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SharedMemberKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharedMemberKey* internal_default_instance() {
    return reinterpret_cast<const SharedMemberKey*>(
               &_SharedMemberKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SharedMemberKey& a, SharedMemberKey& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SharedMemberKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedMemberKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharedMemberKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharedMemberKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharedMemberKey& from);
  void MergeFrom(const SharedMemberKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharedMemberKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SharedMemberKey";
  }
  protected:
  explicit SharedMemberKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWrappedKeyFieldNumber = 2,
    kMemberProofFieldNumber = 3,
    kEpochFieldNumber = 1,
  };
  // bytes wrapped_key = 2;
  void clear_wrapped_key();
  const std::string& wrapped_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wrapped_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wrapped_key();
  PROTOBUF_NODISCARD std::string* release_wrapped_key();
  void set_allocated_wrapped_key(std::string* wrapped_key);
  private:
  const std::string& _internal_wrapped_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wrapped_key(const std::string& value);
  std::string* _internal_mutable_wrapped_key();
  public:

  // bytes member_proof = 3;
  void clear_member_proof();
  const std::string& member_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_member_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_member_proof();
  PROTOBUF_NODISCARD std::string* release_member_proof();
  void set_allocated_member_proof(std::string* member_proof);
  private:
  const std::string& _internal_member_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_member_proof(const std::string& value);
  std::string* _internal_mutable_member_proof();
  public:

  // int32 epoch = 1;
  void clear_epoch();
  int32_t epoch() const;
  void set_epoch(int32_t value);
  private:
  int32_t _internal_epoch() const;
  void _internal_set_epoch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SharedMemberKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wrapped_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr member_proof_;
  int32_t epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class RotationProof final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.RotationProof) */ {
 public:
  inline RotationProof() : RotationProof(nullptr) {}
  ~RotationProof() override;
  explicit PROTOBUF_CONSTEXPR RotationProof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotationProof(const RotationProof& from);
  RotationProof(RotationProof&& from) noexcept
    : RotationProof() {
    *this = ::std::move(from);
  }

  inline RotationProof& operator=(const RotationProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotationProof& operator=(RotationProof&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RotationProof& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotationProof* internal_default_instance() {
    return reinterpret_cast<const RotationProof*>(
               &_RotationProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RotationProof& a, RotationProof& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RotationProof* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotationProof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RotationProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RotationProof>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RotationProof& from);
  void MergeFrom(const RotationProof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RotationProof* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.RotationProof";
  }
  protected:
  explicit RotationProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationProofFieldNumber = 2,
    kNewEpochFieldNumber = 1,
  };
  // bytes rotation_proof = 2;
  void clear_rotation_proof();
  const std::string& rotation_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rotation_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rotation_proof();
  PROTOBUF_NODISCARD std::string* release_rotation_proof();
  void set_allocated_rotation_proof(std::string* rotation_proof);
  private:
  const std::string& _internal_rotation_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rotation_proof(const std::string& value);
  std::string* _internal_mutable_rotation_proof();
  public:

  // int32 new_epoch = 1;
  void clear_new_epoch();
  int32_t new_epoch() const;
  void set_new_epoch(int32_t value);
  private:
  int32_t _internal_new_epoch() const;
  void _internal_set_new_epoch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.RotationProof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rotation_proof_;
  int32_t new_epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class SecurityDomainDetails_SyncDetails final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SecurityDomainDetails.SyncDetails) */ {
 public:
  inline SecurityDomainDetails_SyncDetails() : SecurityDomainDetails_SyncDetails(nullptr) {}
  ~SecurityDomainDetails_SyncDetails() override;
  explicit PROTOBUF_CONSTEXPR SecurityDomainDetails_SyncDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityDomainDetails_SyncDetails(const SecurityDomainDetails_SyncDetails& from);
  SecurityDomainDetails_SyncDetails(SecurityDomainDetails_SyncDetails&& from) noexcept
    : SecurityDomainDetails_SyncDetails() {
    *this = ::std::move(from);
  }

  inline SecurityDomainDetails_SyncDetails& operator=(const SecurityDomainDetails_SyncDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityDomainDetails_SyncDetails& operator=(SecurityDomainDetails_SyncDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SecurityDomainDetails_SyncDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityDomainDetails_SyncDetails* internal_default_instance() {
    return reinterpret_cast<const SecurityDomainDetails_SyncDetails*>(
               &_SecurityDomainDetails_SyncDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecurityDomainDetails_SyncDetails& a, SecurityDomainDetails_SyncDetails& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SecurityDomainDetails_SyncDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityDomainDetails_SyncDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityDomainDetails_SyncDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityDomainDetails_SyncDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SecurityDomainDetails_SyncDetails& from);
  void MergeFrom(const SecurityDomainDetails_SyncDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecurityDomainDetails_SyncDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SecurityDomainDetails.SyncDetails";
  }
  protected:
  explicit SecurityDomainDetails_SyncDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDegradedRecoverabilityFieldNumber = 1,
  };
  // bool degraded_recoverability = 1;
  void clear_degraded_recoverability();
  bool degraded_recoverability() const;
  void set_degraded_recoverability(bool value);
  private:
  bool _internal_degraded_recoverability() const;
  void _internal_set_degraded_recoverability(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SecurityDomainDetails.SyncDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool degraded_recoverability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class SecurityDomainDetails final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SecurityDomainDetails) */ {
 public:
  inline SecurityDomainDetails() : SecurityDomainDetails(nullptr) {}
  ~SecurityDomainDetails() override;
  explicit PROTOBUF_CONSTEXPR SecurityDomainDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityDomainDetails(const SecurityDomainDetails& from);
  SecurityDomainDetails(SecurityDomainDetails&& from) noexcept
    : SecurityDomainDetails() {
    *this = ::std::move(from);
  }

  inline SecurityDomainDetails& operator=(const SecurityDomainDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityDomainDetails& operator=(SecurityDomainDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SecurityDomainDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityDomainDetails* internal_default_instance() {
    return reinterpret_cast<const SecurityDomainDetails*>(
               &_SecurityDomainDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SecurityDomainDetails& a, SecurityDomainDetails& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SecurityDomainDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityDomainDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityDomainDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityDomainDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SecurityDomainDetails& from);
  void MergeFrom(const SecurityDomainDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecurityDomainDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SecurityDomainDetails";
  }
  protected:
  explicit SecurityDomainDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SecurityDomainDetails_SyncDetails SyncDetails;

  // accessors -------------------------------------------------------

  enum : int {
    kSyncDetailsFieldNumber = 1,
  };
  // .sync_pb.SecurityDomainDetails.SyncDetails sync_details = 1;
  bool has_sync_details() const;
  private:
  bool _internal_has_sync_details() const;
  public:
  void clear_sync_details();
  const ::sync_pb::SecurityDomainDetails_SyncDetails& sync_details() const;
  PROTOBUF_NODISCARD ::sync_pb::SecurityDomainDetails_SyncDetails* release_sync_details();
  ::sync_pb::SecurityDomainDetails_SyncDetails* mutable_sync_details();
  void set_allocated_sync_details(::sync_pb::SecurityDomainDetails_SyncDetails* sync_details);
  private:
  const ::sync_pb::SecurityDomainDetails_SyncDetails& _internal_sync_details() const;
  ::sync_pb::SecurityDomainDetails_SyncDetails* _internal_mutable_sync_details();
  public:
  void unsafe_arena_set_allocated_sync_details(
      ::sync_pb::SecurityDomainDetails_SyncDetails* sync_details);
  ::sync_pb::SecurityDomainDetails_SyncDetails* unsafe_arena_release_sync_details();

  // @@protoc_insertion_point(class_scope:sync_pb.SecurityDomainDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sync_pb::SecurityDomainDetails_SyncDetails* sync_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class SecurityDomain final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SecurityDomain) */ {
 public:
  inline SecurityDomain() : SecurityDomain(nullptr) {}
  ~SecurityDomain() override;
  explicit PROTOBUF_CONSTEXPR SecurityDomain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityDomain(const SecurityDomain& from);
  SecurityDomain(SecurityDomain&& from) noexcept
    : SecurityDomain() {
    *this = ::std::move(from);
  }

  inline SecurityDomain& operator=(const SecurityDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityDomain& operator=(SecurityDomain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SecurityDomain& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityDomain* internal_default_instance() {
    return reinterpret_cast<const SecurityDomain*>(
               &_SecurityDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SecurityDomain& a, SecurityDomain& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SecurityDomain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityDomain>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SecurityDomain& from);
  void MergeFrom(const SecurityDomain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecurityDomain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SecurityDomain";
  }
  protected:
  explicit SecurityDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSecurityDomainDetailsFieldNumber = 3,
    kCurrentEpochFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .sync_pb.SecurityDomainDetails security_domain_details = 3;
  bool has_security_domain_details() const;
  private:
  bool _internal_has_security_domain_details() const;
  public:
  void clear_security_domain_details();
  const ::sync_pb::SecurityDomainDetails& security_domain_details() const;
  PROTOBUF_NODISCARD ::sync_pb::SecurityDomainDetails* release_security_domain_details();
  ::sync_pb::SecurityDomainDetails* mutable_security_domain_details();
  void set_allocated_security_domain_details(::sync_pb::SecurityDomainDetails* security_domain_details);
  private:
  const ::sync_pb::SecurityDomainDetails& _internal_security_domain_details() const;
  ::sync_pb::SecurityDomainDetails* _internal_mutable_security_domain_details();
  public:
  void unsafe_arena_set_allocated_security_domain_details(
      ::sync_pb::SecurityDomainDetails* security_domain_details);
  ::sync_pb::SecurityDomainDetails* unsafe_arena_release_security_domain_details();

  // int32 current_epoch = 2;
  void clear_current_epoch();
  int32_t current_epoch() const;
  void set_current_epoch(int32_t value);
  private:
  int32_t _internal_current_epoch() const;
  void _internal_set_current_epoch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SecurityDomain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::sync_pb::SecurityDomainDetails* security_domain_details_;
  int32_t current_epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class SecurityDomainMember_SecurityDomainMembership final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SecurityDomainMember.SecurityDomainMembership) */ {
 public:
  inline SecurityDomainMember_SecurityDomainMembership() : SecurityDomainMember_SecurityDomainMembership(nullptr) {}
  ~SecurityDomainMember_SecurityDomainMembership() override;
  explicit PROTOBUF_CONSTEXPR SecurityDomainMember_SecurityDomainMembership(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityDomainMember_SecurityDomainMembership(const SecurityDomainMember_SecurityDomainMembership& from);
  SecurityDomainMember_SecurityDomainMembership(SecurityDomainMember_SecurityDomainMembership&& from) noexcept
    : SecurityDomainMember_SecurityDomainMembership() {
    *this = ::std::move(from);
  }

  inline SecurityDomainMember_SecurityDomainMembership& operator=(const SecurityDomainMember_SecurityDomainMembership& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityDomainMember_SecurityDomainMembership& operator=(SecurityDomainMember_SecurityDomainMembership&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SecurityDomainMember_SecurityDomainMembership& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityDomainMember_SecurityDomainMembership* internal_default_instance() {
    return reinterpret_cast<const SecurityDomainMember_SecurityDomainMembership*>(
               &_SecurityDomainMember_SecurityDomainMembership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SecurityDomainMember_SecurityDomainMembership& a, SecurityDomainMember_SecurityDomainMembership& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SecurityDomainMember_SecurityDomainMembership* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityDomainMember_SecurityDomainMembership* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityDomainMember_SecurityDomainMembership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityDomainMember_SecurityDomainMembership>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SecurityDomainMember_SecurityDomainMembership& from);
  void MergeFrom(const SecurityDomainMember_SecurityDomainMembership& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecurityDomainMember_SecurityDomainMembership* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SecurityDomainMember.SecurityDomainMembership";
  }
  protected:
  explicit SecurityDomainMember_SecurityDomainMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kRotationProofsFieldNumber = 4,
    kSecurityDomainFieldNumber = 1,
  };
  // repeated .sync_pb.SharedMemberKey keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::sync_pb::SharedMemberKey* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey >*
      mutable_keys();
  private:
  const ::sync_pb::SharedMemberKey& _internal_keys(int index) const;
  ::sync_pb::SharedMemberKey* _internal_add_keys();
  public:
  const ::sync_pb::SharedMemberKey& keys(int index) const;
  ::sync_pb::SharedMemberKey* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey >&
      keys() const;

  // repeated .sync_pb.RotationProof rotation_proofs = 4;
  int rotation_proofs_size() const;
  private:
  int _internal_rotation_proofs_size() const;
  public:
  void clear_rotation_proofs();
  ::sync_pb::RotationProof* mutable_rotation_proofs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::RotationProof >*
      mutable_rotation_proofs();
  private:
  const ::sync_pb::RotationProof& _internal_rotation_proofs(int index) const;
  ::sync_pb::RotationProof* _internal_add_rotation_proofs();
  public:
  const ::sync_pb::RotationProof& rotation_proofs(int index) const;
  ::sync_pb::RotationProof* add_rotation_proofs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::RotationProof >&
      rotation_proofs() const;

  // string security_domain = 1;
  void clear_security_domain();
  const std::string& security_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_security_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_security_domain();
  PROTOBUF_NODISCARD std::string* release_security_domain();
  void set_allocated_security_domain(std::string* security_domain);
  private:
  const std::string& _internal_security_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_domain(const std::string& value);
  std::string* _internal_mutable_security_domain();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SecurityDomainMember.SecurityDomainMembership)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey > keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::RotationProof > rotation_proofs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class SecurityDomainMember final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SecurityDomainMember) */ {
 public:
  inline SecurityDomainMember() : SecurityDomainMember(nullptr) {}
  ~SecurityDomainMember() override;
  explicit PROTOBUF_CONSTEXPR SecurityDomainMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityDomainMember(const SecurityDomainMember& from);
  SecurityDomainMember(SecurityDomainMember&& from) noexcept
    : SecurityDomainMember() {
    *this = ::std::move(from);
  }

  inline SecurityDomainMember& operator=(const SecurityDomainMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityDomainMember& operator=(SecurityDomainMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SecurityDomainMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityDomainMember* internal_default_instance() {
    return reinterpret_cast<const SecurityDomainMember*>(
               &_SecurityDomainMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SecurityDomainMember& a, SecurityDomainMember& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SecurityDomainMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityDomainMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityDomainMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityDomainMember>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SecurityDomainMember& from);
  void MergeFrom(const SecurityDomainMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecurityDomainMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SecurityDomainMember";
  }
  protected:
  explicit SecurityDomainMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SecurityDomainMember_SecurityDomainMembership SecurityDomainMembership;

  typedef SecurityDomainMember_MemberType MemberType;
  static constexpr MemberType MEMBER_TYPE_UNSPECIFIED =
    SecurityDomainMember_MemberType_MEMBER_TYPE_UNSPECIFIED;
  static constexpr MemberType MEMBER_TYPE_PHYSICAL_DEVICE =
    SecurityDomainMember_MemberType_MEMBER_TYPE_PHYSICAL_DEVICE;
  static inline bool MemberType_IsValid(int value) {
    return SecurityDomainMember_MemberType_IsValid(value);
  }
  static constexpr MemberType MemberType_MIN =
    SecurityDomainMember_MemberType_MemberType_MIN;
  static constexpr MemberType MemberType_MAX =
    SecurityDomainMember_MemberType_MemberType_MAX;
  static constexpr int MemberType_ARRAYSIZE =
    SecurityDomainMember_MemberType_MemberType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MemberType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MemberType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MemberType_Name.");
    return SecurityDomainMember_MemberType_Name(enum_t_value);
  }
  static inline bool MemberType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MemberType* value) {
    return SecurityDomainMember_MemberType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipsFieldNumber = 3,
    kNameFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
    kMemberTypeFieldNumber = 4,
  };
  // repeated .sync_pb.SecurityDomainMember.SecurityDomainMembership memberships = 3;
  int memberships_size() const;
  private:
  int _internal_memberships_size() const;
  public:
  void clear_memberships();
  ::sync_pb::SecurityDomainMember_SecurityDomainMembership* mutable_memberships(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SecurityDomainMember_SecurityDomainMembership >*
      mutable_memberships();
  private:
  const ::sync_pb::SecurityDomainMember_SecurityDomainMembership& _internal_memberships(int index) const;
  ::sync_pb::SecurityDomainMember_SecurityDomainMembership* _internal_add_memberships();
  public:
  const ::sync_pb::SecurityDomainMember_SecurityDomainMembership& memberships(int index) const;
  ::sync_pb::SecurityDomainMember_SecurityDomainMembership* add_memberships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SecurityDomainMember_SecurityDomainMembership >&
      memberships() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // .sync_pb.SecurityDomainMember.MemberType member_type = 4;
  void clear_member_type();
  ::sync_pb::SecurityDomainMember_MemberType member_type() const;
  void set_member_type(::sync_pb::SecurityDomainMember_MemberType value);
  private:
  ::sync_pb::SecurityDomainMember_MemberType _internal_member_type() const;
  void _internal_set_member_type(::sync_pb::SecurityDomainMember_MemberType value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SecurityDomainMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SecurityDomainMember_SecurityDomainMembership > memberships_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  int member_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class JoinSecurityDomainsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.JoinSecurityDomainsRequest) */ {
 public:
  inline JoinSecurityDomainsRequest() : JoinSecurityDomainsRequest(nullptr) {}
  ~JoinSecurityDomainsRequest() override;
  explicit PROTOBUF_CONSTEXPR JoinSecurityDomainsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinSecurityDomainsRequest(const JoinSecurityDomainsRequest& from);
  JoinSecurityDomainsRequest(JoinSecurityDomainsRequest&& from) noexcept
    : JoinSecurityDomainsRequest() {
    *this = ::std::move(from);
  }

  inline JoinSecurityDomainsRequest& operator=(const JoinSecurityDomainsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinSecurityDomainsRequest& operator=(JoinSecurityDomainsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const JoinSecurityDomainsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinSecurityDomainsRequest* internal_default_instance() {
    return reinterpret_cast<const JoinSecurityDomainsRequest*>(
               &_JoinSecurityDomainsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(JoinSecurityDomainsRequest& a, JoinSecurityDomainsRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(JoinSecurityDomainsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinSecurityDomainsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinSecurityDomainsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinSecurityDomainsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const JoinSecurityDomainsRequest& from);
  void MergeFrom(const JoinSecurityDomainsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JoinSecurityDomainsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.JoinSecurityDomainsRequest";
  }
  protected:
  explicit JoinSecurityDomainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedMemberKeyFieldNumber = 3,
    kSecurityDomainFieldNumber = 1,
    kSecurityDomainMemberFieldNumber = 2,
    kMemberTypeHintFieldNumber = 4,
  };
  // repeated .sync_pb.SharedMemberKey shared_member_key = 3;
  int shared_member_key_size() const;
  private:
  int _internal_shared_member_key_size() const;
  public:
  void clear_shared_member_key();
  ::sync_pb::SharedMemberKey* mutable_shared_member_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey >*
      mutable_shared_member_key();
  private:
  const ::sync_pb::SharedMemberKey& _internal_shared_member_key(int index) const;
  ::sync_pb::SharedMemberKey* _internal_add_shared_member_key();
  public:
  const ::sync_pb::SharedMemberKey& shared_member_key(int index) const;
  ::sync_pb::SharedMemberKey* add_shared_member_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey >&
      shared_member_key() const;

  // .sync_pb.SecurityDomain security_domain = 1;
  bool has_security_domain() const;
  private:
  bool _internal_has_security_domain() const;
  public:
  void clear_security_domain();
  const ::sync_pb::SecurityDomain& security_domain() const;
  PROTOBUF_NODISCARD ::sync_pb::SecurityDomain* release_security_domain();
  ::sync_pb::SecurityDomain* mutable_security_domain();
  void set_allocated_security_domain(::sync_pb::SecurityDomain* security_domain);
  private:
  const ::sync_pb::SecurityDomain& _internal_security_domain() const;
  ::sync_pb::SecurityDomain* _internal_mutable_security_domain();
  public:
  void unsafe_arena_set_allocated_security_domain(
      ::sync_pb::SecurityDomain* security_domain);
  ::sync_pb::SecurityDomain* unsafe_arena_release_security_domain();

  // .sync_pb.SecurityDomainMember security_domain_member = 2;
  bool has_security_domain_member() const;
  private:
  bool _internal_has_security_domain_member() const;
  public:
  void clear_security_domain_member();
  const ::sync_pb::SecurityDomainMember& security_domain_member() const;
  PROTOBUF_NODISCARD ::sync_pb::SecurityDomainMember* release_security_domain_member();
  ::sync_pb::SecurityDomainMember* mutable_security_domain_member();
  void set_allocated_security_domain_member(::sync_pb::SecurityDomainMember* security_domain_member);
  private:
  const ::sync_pb::SecurityDomainMember& _internal_security_domain_member() const;
  ::sync_pb::SecurityDomainMember* _internal_mutable_security_domain_member();
  public:
  void unsafe_arena_set_allocated_security_domain_member(
      ::sync_pb::SecurityDomainMember* security_domain_member);
  ::sync_pb::SecurityDomainMember* unsafe_arena_release_security_domain_member();

  // int32 member_type_hint = 4;
  void clear_member_type_hint();
  int32_t member_type_hint() const;
  void set_member_type_hint(int32_t value);
  private:
  int32_t _internal_member_type_hint() const;
  void _internal_set_member_type_hint(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.JoinSecurityDomainsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey > shared_member_key_;
  ::sync_pb::SecurityDomain* security_domain_;
  ::sync_pb::SecurityDomainMember* security_domain_member_;
  int32_t member_type_hint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class JoinSecurityDomainsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.JoinSecurityDomainsResponse) */ {
 public:
  inline JoinSecurityDomainsResponse() : JoinSecurityDomainsResponse(nullptr) {}
  ~JoinSecurityDomainsResponse() override;
  explicit PROTOBUF_CONSTEXPR JoinSecurityDomainsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinSecurityDomainsResponse(const JoinSecurityDomainsResponse& from);
  JoinSecurityDomainsResponse(JoinSecurityDomainsResponse&& from) noexcept
    : JoinSecurityDomainsResponse() {
    *this = ::std::move(from);
  }

  inline JoinSecurityDomainsResponse& operator=(const JoinSecurityDomainsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinSecurityDomainsResponse& operator=(JoinSecurityDomainsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const JoinSecurityDomainsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinSecurityDomainsResponse* internal_default_instance() {
    return reinterpret_cast<const JoinSecurityDomainsResponse*>(
               &_JoinSecurityDomainsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(JoinSecurityDomainsResponse& a, JoinSecurityDomainsResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(JoinSecurityDomainsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinSecurityDomainsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinSecurityDomainsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinSecurityDomainsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const JoinSecurityDomainsResponse& from);
  void MergeFrom(const JoinSecurityDomainsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JoinSecurityDomainsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.JoinSecurityDomainsResponse";
  }
  protected:
  explicit JoinSecurityDomainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityDomainFieldNumber = 1,
  };
  // .sync_pb.SecurityDomain security_domain = 1;
  bool has_security_domain() const;
  private:
  bool _internal_has_security_domain() const;
  public:
  void clear_security_domain();
  const ::sync_pb::SecurityDomain& security_domain() const;
  PROTOBUF_NODISCARD ::sync_pb::SecurityDomain* release_security_domain();
  ::sync_pb::SecurityDomain* mutable_security_domain();
  void set_allocated_security_domain(::sync_pb::SecurityDomain* security_domain);
  private:
  const ::sync_pb::SecurityDomain& _internal_security_domain() const;
  ::sync_pb::SecurityDomain* _internal_mutable_security_domain();
  public:
  void unsafe_arena_set_allocated_security_domain(
      ::sync_pb::SecurityDomain* security_domain);
  ::sync_pb::SecurityDomain* unsafe_arena_release_security_domain();

  // @@protoc_insertion_point(class_scope:sync_pb.JoinSecurityDomainsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sync_pb::SecurityDomain* security_domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class JoinSecurityDomainsErrorDetail final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.JoinSecurityDomainsErrorDetail) */ {
 public:
  inline JoinSecurityDomainsErrorDetail() : JoinSecurityDomainsErrorDetail(nullptr) {}
  ~JoinSecurityDomainsErrorDetail() override;
  explicit PROTOBUF_CONSTEXPR JoinSecurityDomainsErrorDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinSecurityDomainsErrorDetail(const JoinSecurityDomainsErrorDetail& from);
  JoinSecurityDomainsErrorDetail(JoinSecurityDomainsErrorDetail&& from) noexcept
    : JoinSecurityDomainsErrorDetail() {
    *this = ::std::move(from);
  }

  inline JoinSecurityDomainsErrorDetail& operator=(const JoinSecurityDomainsErrorDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinSecurityDomainsErrorDetail& operator=(JoinSecurityDomainsErrorDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const JoinSecurityDomainsErrorDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinSecurityDomainsErrorDetail* internal_default_instance() {
    return reinterpret_cast<const JoinSecurityDomainsErrorDetail*>(
               &_JoinSecurityDomainsErrorDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(JoinSecurityDomainsErrorDetail& a, JoinSecurityDomainsErrorDetail& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(JoinSecurityDomainsErrorDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinSecurityDomainsErrorDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinSecurityDomainsErrorDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinSecurityDomainsErrorDetail>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const JoinSecurityDomainsErrorDetail& from);
  void MergeFrom(const JoinSecurityDomainsErrorDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JoinSecurityDomainsErrorDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.JoinSecurityDomainsErrorDetail";
  }
  protected:
  explicit JoinSecurityDomainsErrorDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlreadyExistsResponseFieldNumber = 1,
  };
  // .sync_pb.JoinSecurityDomainsResponse already_exists_response = 1;
  bool has_already_exists_response() const;
  private:
  bool _internal_has_already_exists_response() const;
  public:
  void clear_already_exists_response();
  const ::sync_pb::JoinSecurityDomainsResponse& already_exists_response() const;
  PROTOBUF_NODISCARD ::sync_pb::JoinSecurityDomainsResponse* release_already_exists_response();
  ::sync_pb::JoinSecurityDomainsResponse* mutable_already_exists_response();
  void set_allocated_already_exists_response(::sync_pb::JoinSecurityDomainsResponse* already_exists_response);
  private:
  const ::sync_pb::JoinSecurityDomainsResponse& _internal_already_exists_response() const;
  ::sync_pb::JoinSecurityDomainsResponse* _internal_mutable_already_exists_response();
  public:
  void unsafe_arena_set_allocated_already_exists_response(
      ::sync_pb::JoinSecurityDomainsResponse* already_exists_response);
  ::sync_pb::JoinSecurityDomainsResponse* unsafe_arena_release_already_exists_response();

  // @@protoc_insertion_point(class_scope:sync_pb.JoinSecurityDomainsErrorDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sync_pb::JoinSecurityDomainsResponse* already_exists_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class Proto3Any final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.Proto3Any) */ {
 public:
  inline Proto3Any() : Proto3Any(nullptr) {}
  ~Proto3Any() override;
  explicit PROTOBUF_CONSTEXPR Proto3Any(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proto3Any(const Proto3Any& from);
  Proto3Any(Proto3Any&& from) noexcept
    : Proto3Any() {
    *this = ::std::move(from);
  }

  inline Proto3Any& operator=(const Proto3Any& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto3Any& operator=(Proto3Any&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Proto3Any& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proto3Any* internal_default_instance() {
    return reinterpret_cast<const Proto3Any*>(
               &_Proto3Any_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Proto3Any& a, Proto3Any& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Proto3Any* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto3Any* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proto3Any* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proto3Any>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Proto3Any& from);
  void MergeFrom(const Proto3Any& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Proto3Any* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.Proto3Any";
  }
  protected:
  explicit Proto3Any(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeUrlFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type_url = 1;
  void clear_type_url();
  const std::string& type_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_url();
  PROTOBUF_NODISCARD std::string* release_type_url();
  void set_allocated_type_url(std::string* type_url);
  private:
  const std::string& _internal_type_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_url(const std::string& value);
  std::string* _internal_mutable_type_url();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.Proto3Any)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// -------------------------------------------------------------------

class RPCStatus final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.RPCStatus) */ {
 public:
  inline RPCStatus() : RPCStatus(nullptr) {}
  ~RPCStatus() override;
  explicit PROTOBUF_CONSTEXPR RPCStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCStatus(const RPCStatus& from);
  RPCStatus(RPCStatus&& from) noexcept
    : RPCStatus() {
    *this = ::std::move(from);
  }

  inline RPCStatus& operator=(const RPCStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCStatus& operator=(RPCStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RPCStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCStatus* internal_default_instance() {
    return reinterpret_cast<const RPCStatus*>(
               &_RPCStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RPCStatus& a, RPCStatus& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RPCStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RPCStatus& from);
  void MergeFrom(const RPCStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.RPCStatus";
  }
  protected:
  explicit RPCStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 3,
  };
  // repeated .sync_pb.Proto3Any details = 3;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::sync_pb::Proto3Any* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::Proto3Any >*
      mutable_details();
  private:
  const ::sync_pb::Proto3Any& _internal_details(int index) const;
  ::sync_pb::Proto3Any* _internal_add_details();
  public:
  const ::sync_pb::Proto3Any& details(int index) const;
  ::sync_pb::Proto3Any* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::Proto3Any >&
      details() const;

  // @@protoc_insertion_point(class_scope:sync_pb.RPCStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::Proto3Any > details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fvault_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SharedMemberKey

// int32 epoch = 1;
inline void SharedMemberKey::clear_epoch() {
  epoch_ = 0;
}
inline int32_t SharedMemberKey::_internal_epoch() const {
  return epoch_;
}
inline int32_t SharedMemberKey::epoch() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharedMemberKey.epoch)
  return _internal_epoch();
}
inline void SharedMemberKey::_internal_set_epoch(int32_t value) {
  
  epoch_ = value;
}
inline void SharedMemberKey::set_epoch(int32_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:sync_pb.SharedMemberKey.epoch)
}

// bytes wrapped_key = 2;
inline void SharedMemberKey::clear_wrapped_key() {
  wrapped_key_.ClearToEmpty();
}
inline const std::string& SharedMemberKey::wrapped_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharedMemberKey.wrapped_key)
  return _internal_wrapped_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedMemberKey::set_wrapped_key(ArgT0&& arg0, ArgT... args) {
 
 wrapped_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SharedMemberKey.wrapped_key)
}
inline std::string* SharedMemberKey::mutable_wrapped_key() {
  std::string* _s = _internal_mutable_wrapped_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.SharedMemberKey.wrapped_key)
  return _s;
}
inline const std::string& SharedMemberKey::_internal_wrapped_key() const {
  return wrapped_key_.Get();
}
inline void SharedMemberKey::_internal_set_wrapped_key(const std::string& value) {
  
  wrapped_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SharedMemberKey::_internal_mutable_wrapped_key() {
  
  return wrapped_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SharedMemberKey::release_wrapped_key() {
  // @@protoc_insertion_point(field_release:sync_pb.SharedMemberKey.wrapped_key)
  return wrapped_key_.Release();
}
inline void SharedMemberKey::set_allocated_wrapped_key(std::string* wrapped_key) {
  if (wrapped_key != nullptr) {
    
  } else {
    
  }
  wrapped_key_.SetAllocated(wrapped_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wrapped_key_.IsDefault()) {
    wrapped_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharedMemberKey.wrapped_key)
}

// bytes member_proof = 3;
inline void SharedMemberKey::clear_member_proof() {
  member_proof_.ClearToEmpty();
}
inline const std::string& SharedMemberKey::member_proof() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharedMemberKey.member_proof)
  return _internal_member_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedMemberKey::set_member_proof(ArgT0&& arg0, ArgT... args) {
 
 member_proof_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SharedMemberKey.member_proof)
}
inline std::string* SharedMemberKey::mutable_member_proof() {
  std::string* _s = _internal_mutable_member_proof();
  // @@protoc_insertion_point(field_mutable:sync_pb.SharedMemberKey.member_proof)
  return _s;
}
inline const std::string& SharedMemberKey::_internal_member_proof() const {
  return member_proof_.Get();
}
inline void SharedMemberKey::_internal_set_member_proof(const std::string& value) {
  
  member_proof_.Set(value, GetArenaForAllocation());
}
inline std::string* SharedMemberKey::_internal_mutable_member_proof() {
  
  return member_proof_.Mutable(GetArenaForAllocation());
}
inline std::string* SharedMemberKey::release_member_proof() {
  // @@protoc_insertion_point(field_release:sync_pb.SharedMemberKey.member_proof)
  return member_proof_.Release();
}
inline void SharedMemberKey::set_allocated_member_proof(std::string* member_proof) {
  if (member_proof != nullptr) {
    
  } else {
    
  }
  member_proof_.SetAllocated(member_proof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (member_proof_.IsDefault()) {
    member_proof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharedMemberKey.member_proof)
}

// -------------------------------------------------------------------

// RotationProof

// int32 new_epoch = 1;
inline void RotationProof::clear_new_epoch() {
  new_epoch_ = 0;
}
inline int32_t RotationProof::_internal_new_epoch() const {
  return new_epoch_;
}
inline int32_t RotationProof::new_epoch() const {
  // @@protoc_insertion_point(field_get:sync_pb.RotationProof.new_epoch)
  return _internal_new_epoch();
}
inline void RotationProof::_internal_set_new_epoch(int32_t value) {
  
  new_epoch_ = value;
}
inline void RotationProof::set_new_epoch(int32_t value) {
  _internal_set_new_epoch(value);
  // @@protoc_insertion_point(field_set:sync_pb.RotationProof.new_epoch)
}

// bytes rotation_proof = 2;
inline void RotationProof::clear_rotation_proof() {
  rotation_proof_.ClearToEmpty();
}
inline const std::string& RotationProof::rotation_proof() const {
  // @@protoc_insertion_point(field_get:sync_pb.RotationProof.rotation_proof)
  return _internal_rotation_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RotationProof::set_rotation_proof(ArgT0&& arg0, ArgT... args) {
 
 rotation_proof_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.RotationProof.rotation_proof)
}
inline std::string* RotationProof::mutable_rotation_proof() {
  std::string* _s = _internal_mutable_rotation_proof();
  // @@protoc_insertion_point(field_mutable:sync_pb.RotationProof.rotation_proof)
  return _s;
}
inline const std::string& RotationProof::_internal_rotation_proof() const {
  return rotation_proof_.Get();
}
inline void RotationProof::_internal_set_rotation_proof(const std::string& value) {
  
  rotation_proof_.Set(value, GetArenaForAllocation());
}
inline std::string* RotationProof::_internal_mutable_rotation_proof() {
  
  return rotation_proof_.Mutable(GetArenaForAllocation());
}
inline std::string* RotationProof::release_rotation_proof() {
  // @@protoc_insertion_point(field_release:sync_pb.RotationProof.rotation_proof)
  return rotation_proof_.Release();
}
inline void RotationProof::set_allocated_rotation_proof(std::string* rotation_proof) {
  if (rotation_proof != nullptr) {
    
  } else {
    
  }
  rotation_proof_.SetAllocated(rotation_proof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rotation_proof_.IsDefault()) {
    rotation_proof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.RotationProof.rotation_proof)
}

// -------------------------------------------------------------------

// SecurityDomainDetails_SyncDetails

// bool degraded_recoverability = 1;
inline void SecurityDomainDetails_SyncDetails::clear_degraded_recoverability() {
  degraded_recoverability_ = false;
}
inline bool SecurityDomainDetails_SyncDetails::_internal_degraded_recoverability() const {
  return degraded_recoverability_;
}
inline bool SecurityDomainDetails_SyncDetails::degraded_recoverability() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainDetails.SyncDetails.degraded_recoverability)
  return _internal_degraded_recoverability();
}
inline void SecurityDomainDetails_SyncDetails::_internal_set_degraded_recoverability(bool value) {
  
  degraded_recoverability_ = value;
}
inline void SecurityDomainDetails_SyncDetails::set_degraded_recoverability(bool value) {
  _internal_set_degraded_recoverability(value);
  // @@protoc_insertion_point(field_set:sync_pb.SecurityDomainDetails.SyncDetails.degraded_recoverability)
}

// -------------------------------------------------------------------

// SecurityDomainDetails

// .sync_pb.SecurityDomainDetails.SyncDetails sync_details = 1;
inline bool SecurityDomainDetails::_internal_has_sync_details() const {
  return this != internal_default_instance() && sync_details_ != nullptr;
}
inline bool SecurityDomainDetails::has_sync_details() const {
  return _internal_has_sync_details();
}
inline void SecurityDomainDetails::clear_sync_details() {
  if (GetArenaForAllocation() == nullptr && sync_details_ != nullptr) {
    delete sync_details_;
  }
  sync_details_ = nullptr;
}
inline const ::sync_pb::SecurityDomainDetails_SyncDetails& SecurityDomainDetails::_internal_sync_details() const {
  const ::sync_pb::SecurityDomainDetails_SyncDetails* p = sync_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::SecurityDomainDetails_SyncDetails&>(
      ::sync_pb::_SecurityDomainDetails_SyncDetails_default_instance_);
}
inline const ::sync_pb::SecurityDomainDetails_SyncDetails& SecurityDomainDetails::sync_details() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainDetails.sync_details)
  return _internal_sync_details();
}
inline void SecurityDomainDetails::unsafe_arena_set_allocated_sync_details(
    ::sync_pb::SecurityDomainDetails_SyncDetails* sync_details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_details_);
  }
  sync_details_ = sync_details;
  if (sync_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.SecurityDomainDetails.sync_details)
}
inline ::sync_pb::SecurityDomainDetails_SyncDetails* SecurityDomainDetails::release_sync_details() {
  
  ::sync_pb::SecurityDomainDetails_SyncDetails* temp = sync_details_;
  sync_details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::SecurityDomainDetails_SyncDetails* SecurityDomainDetails::unsafe_arena_release_sync_details() {
  // @@protoc_insertion_point(field_release:sync_pb.SecurityDomainDetails.sync_details)
  
  ::sync_pb::SecurityDomainDetails_SyncDetails* temp = sync_details_;
  sync_details_ = nullptr;
  return temp;
}
inline ::sync_pb::SecurityDomainDetails_SyncDetails* SecurityDomainDetails::_internal_mutable_sync_details() {
  
  if (sync_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SecurityDomainDetails_SyncDetails>(GetArenaForAllocation());
    sync_details_ = p;
  }
  return sync_details_;
}
inline ::sync_pb::SecurityDomainDetails_SyncDetails* SecurityDomainDetails::mutable_sync_details() {
  ::sync_pb::SecurityDomainDetails_SyncDetails* _msg = _internal_mutable_sync_details();
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomainDetails.sync_details)
  return _msg;
}
inline void SecurityDomainDetails::set_allocated_sync_details(::sync_pb::SecurityDomainDetails_SyncDetails* sync_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sync_details_;
  }
  if (sync_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sync_details);
    if (message_arena != submessage_arena) {
      sync_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_details, submessage_arena);
    }
    
  } else {
    
  }
  sync_details_ = sync_details;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SecurityDomainDetails.sync_details)
}

// -------------------------------------------------------------------

// SecurityDomain

// string name = 1;
inline void SecurityDomain::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SecurityDomain::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomain.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SecurityDomain::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SecurityDomain.name)
}
inline std::string* SecurityDomain::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomain.name)
  return _s;
}
inline const std::string& SecurityDomain::_internal_name() const {
  return name_.Get();
}
inline void SecurityDomain::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SecurityDomain::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SecurityDomain::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SecurityDomain.name)
  return name_.Release();
}
inline void SecurityDomain::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SecurityDomain.name)
}

// int32 current_epoch = 2;
inline void SecurityDomain::clear_current_epoch() {
  current_epoch_ = 0;
}
inline int32_t SecurityDomain::_internal_current_epoch() const {
  return current_epoch_;
}
inline int32_t SecurityDomain::current_epoch() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomain.current_epoch)
  return _internal_current_epoch();
}
inline void SecurityDomain::_internal_set_current_epoch(int32_t value) {
  
  current_epoch_ = value;
}
inline void SecurityDomain::set_current_epoch(int32_t value) {
  _internal_set_current_epoch(value);
  // @@protoc_insertion_point(field_set:sync_pb.SecurityDomain.current_epoch)
}

// .sync_pb.SecurityDomainDetails security_domain_details = 3;
inline bool SecurityDomain::_internal_has_security_domain_details() const {
  return this != internal_default_instance() && security_domain_details_ != nullptr;
}
inline bool SecurityDomain::has_security_domain_details() const {
  return _internal_has_security_domain_details();
}
inline void SecurityDomain::clear_security_domain_details() {
  if (GetArenaForAllocation() == nullptr && security_domain_details_ != nullptr) {
    delete security_domain_details_;
  }
  security_domain_details_ = nullptr;
}
inline const ::sync_pb::SecurityDomainDetails& SecurityDomain::_internal_security_domain_details() const {
  const ::sync_pb::SecurityDomainDetails* p = security_domain_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::SecurityDomainDetails&>(
      ::sync_pb::_SecurityDomainDetails_default_instance_);
}
inline const ::sync_pb::SecurityDomainDetails& SecurityDomain::security_domain_details() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomain.security_domain_details)
  return _internal_security_domain_details();
}
inline void SecurityDomain::unsafe_arena_set_allocated_security_domain_details(
    ::sync_pb::SecurityDomainDetails* security_domain_details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_domain_details_);
  }
  security_domain_details_ = security_domain_details;
  if (security_domain_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.SecurityDomain.security_domain_details)
}
inline ::sync_pb::SecurityDomainDetails* SecurityDomain::release_security_domain_details() {
  
  ::sync_pb::SecurityDomainDetails* temp = security_domain_details_;
  security_domain_details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::SecurityDomainDetails* SecurityDomain::unsafe_arena_release_security_domain_details() {
  // @@protoc_insertion_point(field_release:sync_pb.SecurityDomain.security_domain_details)
  
  ::sync_pb::SecurityDomainDetails* temp = security_domain_details_;
  security_domain_details_ = nullptr;
  return temp;
}
inline ::sync_pb::SecurityDomainDetails* SecurityDomain::_internal_mutable_security_domain_details() {
  
  if (security_domain_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SecurityDomainDetails>(GetArenaForAllocation());
    security_domain_details_ = p;
  }
  return security_domain_details_;
}
inline ::sync_pb::SecurityDomainDetails* SecurityDomain::mutable_security_domain_details() {
  ::sync_pb::SecurityDomainDetails* _msg = _internal_mutable_security_domain_details();
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomain.security_domain_details)
  return _msg;
}
inline void SecurityDomain::set_allocated_security_domain_details(::sync_pb::SecurityDomainDetails* security_domain_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete security_domain_details_;
  }
  if (security_domain_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(security_domain_details);
    if (message_arena != submessage_arena) {
      security_domain_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_domain_details, submessage_arena);
    }
    
  } else {
    
  }
  security_domain_details_ = security_domain_details;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SecurityDomain.security_domain_details)
}

// -------------------------------------------------------------------

// SecurityDomainMember_SecurityDomainMembership

// string security_domain = 1;
inline void SecurityDomainMember_SecurityDomainMembership::clear_security_domain() {
  security_domain_.ClearToEmpty();
}
inline const std::string& SecurityDomainMember_SecurityDomainMembership::security_domain() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainMember.SecurityDomainMembership.security_domain)
  return _internal_security_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SecurityDomainMember_SecurityDomainMembership::set_security_domain(ArgT0&& arg0, ArgT... args) {
 
 security_domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SecurityDomainMember.SecurityDomainMembership.security_domain)
}
inline std::string* SecurityDomainMember_SecurityDomainMembership::mutable_security_domain() {
  std::string* _s = _internal_mutable_security_domain();
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomainMember.SecurityDomainMembership.security_domain)
  return _s;
}
inline const std::string& SecurityDomainMember_SecurityDomainMembership::_internal_security_domain() const {
  return security_domain_.Get();
}
inline void SecurityDomainMember_SecurityDomainMembership::_internal_set_security_domain(const std::string& value) {
  
  security_domain_.Set(value, GetArenaForAllocation());
}
inline std::string* SecurityDomainMember_SecurityDomainMembership::_internal_mutable_security_domain() {
  
  return security_domain_.Mutable(GetArenaForAllocation());
}
inline std::string* SecurityDomainMember_SecurityDomainMembership::release_security_domain() {
  // @@protoc_insertion_point(field_release:sync_pb.SecurityDomainMember.SecurityDomainMembership.security_domain)
  return security_domain_.Release();
}
inline void SecurityDomainMember_SecurityDomainMembership::set_allocated_security_domain(std::string* security_domain) {
  if (security_domain != nullptr) {
    
  } else {
    
  }
  security_domain_.SetAllocated(security_domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (security_domain_.IsDefault()) {
    security_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SecurityDomainMember.SecurityDomainMembership.security_domain)
}

// repeated .sync_pb.SharedMemberKey keys = 3;
inline int SecurityDomainMember_SecurityDomainMembership::_internal_keys_size() const {
  return keys_.size();
}
inline int SecurityDomainMember_SecurityDomainMembership::keys_size() const {
  return _internal_keys_size();
}
inline void SecurityDomainMember_SecurityDomainMembership::clear_keys() {
  keys_.Clear();
}
inline ::sync_pb::SharedMemberKey* SecurityDomainMember_SecurityDomainMembership::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomainMember.SecurityDomainMembership.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey >*
SecurityDomainMember_SecurityDomainMembership::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SecurityDomainMember.SecurityDomainMembership.keys)
  return &keys_;
}
inline const ::sync_pb::SharedMemberKey& SecurityDomainMember_SecurityDomainMembership::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::sync_pb::SharedMemberKey& SecurityDomainMember_SecurityDomainMembership::keys(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainMember.SecurityDomainMembership.keys)
  return _internal_keys(index);
}
inline ::sync_pb::SharedMemberKey* SecurityDomainMember_SecurityDomainMembership::_internal_add_keys() {
  return keys_.Add();
}
inline ::sync_pb::SharedMemberKey* SecurityDomainMember_SecurityDomainMembership::add_keys() {
  ::sync_pb::SharedMemberKey* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:sync_pb.SecurityDomainMember.SecurityDomainMembership.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey >&
SecurityDomainMember_SecurityDomainMembership::keys() const {
  // @@protoc_insertion_point(field_list:sync_pb.SecurityDomainMember.SecurityDomainMembership.keys)
  return keys_;
}

// repeated .sync_pb.RotationProof rotation_proofs = 4;
inline int SecurityDomainMember_SecurityDomainMembership::_internal_rotation_proofs_size() const {
  return rotation_proofs_.size();
}
inline int SecurityDomainMember_SecurityDomainMembership::rotation_proofs_size() const {
  return _internal_rotation_proofs_size();
}
inline void SecurityDomainMember_SecurityDomainMembership::clear_rotation_proofs() {
  rotation_proofs_.Clear();
}
inline ::sync_pb::RotationProof* SecurityDomainMember_SecurityDomainMembership::mutable_rotation_proofs(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomainMember.SecurityDomainMembership.rotation_proofs)
  return rotation_proofs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::RotationProof >*
SecurityDomainMember_SecurityDomainMembership::mutable_rotation_proofs() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SecurityDomainMember.SecurityDomainMembership.rotation_proofs)
  return &rotation_proofs_;
}
inline const ::sync_pb::RotationProof& SecurityDomainMember_SecurityDomainMembership::_internal_rotation_proofs(int index) const {
  return rotation_proofs_.Get(index);
}
inline const ::sync_pb::RotationProof& SecurityDomainMember_SecurityDomainMembership::rotation_proofs(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainMember.SecurityDomainMembership.rotation_proofs)
  return _internal_rotation_proofs(index);
}
inline ::sync_pb::RotationProof* SecurityDomainMember_SecurityDomainMembership::_internal_add_rotation_proofs() {
  return rotation_proofs_.Add();
}
inline ::sync_pb::RotationProof* SecurityDomainMember_SecurityDomainMembership::add_rotation_proofs() {
  ::sync_pb::RotationProof* _add = _internal_add_rotation_proofs();
  // @@protoc_insertion_point(field_add:sync_pb.SecurityDomainMember.SecurityDomainMembership.rotation_proofs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::RotationProof >&
SecurityDomainMember_SecurityDomainMembership::rotation_proofs() const {
  // @@protoc_insertion_point(field_list:sync_pb.SecurityDomainMember.SecurityDomainMembership.rotation_proofs)
  return rotation_proofs_;
}

// -------------------------------------------------------------------

// SecurityDomainMember

// string name = 1;
inline void SecurityDomainMember::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SecurityDomainMember::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainMember.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SecurityDomainMember::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SecurityDomainMember.name)
}
inline std::string* SecurityDomainMember::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomainMember.name)
  return _s;
}
inline const std::string& SecurityDomainMember::_internal_name() const {
  return name_.Get();
}
inline void SecurityDomainMember::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SecurityDomainMember::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SecurityDomainMember::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SecurityDomainMember.name)
  return name_.Release();
}
inline void SecurityDomainMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SecurityDomainMember.name)
}

// bytes public_key = 2;
inline void SecurityDomainMember::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& SecurityDomainMember::public_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainMember.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SecurityDomainMember::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SecurityDomainMember.public_key)
}
inline std::string* SecurityDomainMember::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomainMember.public_key)
  return _s;
}
inline const std::string& SecurityDomainMember::_internal_public_key() const {
  return public_key_.Get();
}
inline void SecurityDomainMember::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SecurityDomainMember::_internal_mutable_public_key() {
  
  return public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SecurityDomainMember::release_public_key() {
  // @@protoc_insertion_point(field_release:sync_pb.SecurityDomainMember.public_key)
  return public_key_.Release();
}
inline void SecurityDomainMember::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault()) {
    public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SecurityDomainMember.public_key)
}

// repeated .sync_pb.SecurityDomainMember.SecurityDomainMembership memberships = 3;
inline int SecurityDomainMember::_internal_memberships_size() const {
  return memberships_.size();
}
inline int SecurityDomainMember::memberships_size() const {
  return _internal_memberships_size();
}
inline void SecurityDomainMember::clear_memberships() {
  memberships_.Clear();
}
inline ::sync_pb::SecurityDomainMember_SecurityDomainMembership* SecurityDomainMember::mutable_memberships(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityDomainMember.memberships)
  return memberships_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SecurityDomainMember_SecurityDomainMembership >*
SecurityDomainMember::mutable_memberships() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SecurityDomainMember.memberships)
  return &memberships_;
}
inline const ::sync_pb::SecurityDomainMember_SecurityDomainMembership& SecurityDomainMember::_internal_memberships(int index) const {
  return memberships_.Get(index);
}
inline const ::sync_pb::SecurityDomainMember_SecurityDomainMembership& SecurityDomainMember::memberships(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainMember.memberships)
  return _internal_memberships(index);
}
inline ::sync_pb::SecurityDomainMember_SecurityDomainMembership* SecurityDomainMember::_internal_add_memberships() {
  return memberships_.Add();
}
inline ::sync_pb::SecurityDomainMember_SecurityDomainMembership* SecurityDomainMember::add_memberships() {
  ::sync_pb::SecurityDomainMember_SecurityDomainMembership* _add = _internal_add_memberships();
  // @@protoc_insertion_point(field_add:sync_pb.SecurityDomainMember.memberships)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SecurityDomainMember_SecurityDomainMembership >&
SecurityDomainMember::memberships() const {
  // @@protoc_insertion_point(field_list:sync_pb.SecurityDomainMember.memberships)
  return memberships_;
}

// .sync_pb.SecurityDomainMember.MemberType member_type = 4;
inline void SecurityDomainMember::clear_member_type() {
  member_type_ = 0;
}
inline ::sync_pb::SecurityDomainMember_MemberType SecurityDomainMember::_internal_member_type() const {
  return static_cast< ::sync_pb::SecurityDomainMember_MemberType >(member_type_);
}
inline ::sync_pb::SecurityDomainMember_MemberType SecurityDomainMember::member_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityDomainMember.member_type)
  return _internal_member_type();
}
inline void SecurityDomainMember::_internal_set_member_type(::sync_pb::SecurityDomainMember_MemberType value) {
  
  member_type_ = value;
}
inline void SecurityDomainMember::set_member_type(::sync_pb::SecurityDomainMember_MemberType value) {
  _internal_set_member_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.SecurityDomainMember.member_type)
}

// -------------------------------------------------------------------

// JoinSecurityDomainsRequest

// .sync_pb.SecurityDomain security_domain = 1;
inline bool JoinSecurityDomainsRequest::_internal_has_security_domain() const {
  return this != internal_default_instance() && security_domain_ != nullptr;
}
inline bool JoinSecurityDomainsRequest::has_security_domain() const {
  return _internal_has_security_domain();
}
inline void JoinSecurityDomainsRequest::clear_security_domain() {
  if (GetArenaForAllocation() == nullptr && security_domain_ != nullptr) {
    delete security_domain_;
  }
  security_domain_ = nullptr;
}
inline const ::sync_pb::SecurityDomain& JoinSecurityDomainsRequest::_internal_security_domain() const {
  const ::sync_pb::SecurityDomain* p = security_domain_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::SecurityDomain&>(
      ::sync_pb::_SecurityDomain_default_instance_);
}
inline const ::sync_pb::SecurityDomain& JoinSecurityDomainsRequest::security_domain() const {
  // @@protoc_insertion_point(field_get:sync_pb.JoinSecurityDomainsRequest.security_domain)
  return _internal_security_domain();
}
inline void JoinSecurityDomainsRequest::unsafe_arena_set_allocated_security_domain(
    ::sync_pb::SecurityDomain* security_domain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_domain_);
  }
  security_domain_ = security_domain;
  if (security_domain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.JoinSecurityDomainsRequest.security_domain)
}
inline ::sync_pb::SecurityDomain* JoinSecurityDomainsRequest::release_security_domain() {
  
  ::sync_pb::SecurityDomain* temp = security_domain_;
  security_domain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::SecurityDomain* JoinSecurityDomainsRequest::unsafe_arena_release_security_domain() {
  // @@protoc_insertion_point(field_release:sync_pb.JoinSecurityDomainsRequest.security_domain)
  
  ::sync_pb::SecurityDomain* temp = security_domain_;
  security_domain_ = nullptr;
  return temp;
}
inline ::sync_pb::SecurityDomain* JoinSecurityDomainsRequest::_internal_mutable_security_domain() {
  
  if (security_domain_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SecurityDomain>(GetArenaForAllocation());
    security_domain_ = p;
  }
  return security_domain_;
}
inline ::sync_pb::SecurityDomain* JoinSecurityDomainsRequest::mutable_security_domain() {
  ::sync_pb::SecurityDomain* _msg = _internal_mutable_security_domain();
  // @@protoc_insertion_point(field_mutable:sync_pb.JoinSecurityDomainsRequest.security_domain)
  return _msg;
}
inline void JoinSecurityDomainsRequest::set_allocated_security_domain(::sync_pb::SecurityDomain* security_domain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete security_domain_;
  }
  if (security_domain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(security_domain);
    if (message_arena != submessage_arena) {
      security_domain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_domain, submessage_arena);
    }
    
  } else {
    
  }
  security_domain_ = security_domain;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.JoinSecurityDomainsRequest.security_domain)
}

// .sync_pb.SecurityDomainMember security_domain_member = 2;
inline bool JoinSecurityDomainsRequest::_internal_has_security_domain_member() const {
  return this != internal_default_instance() && security_domain_member_ != nullptr;
}
inline bool JoinSecurityDomainsRequest::has_security_domain_member() const {
  return _internal_has_security_domain_member();
}
inline void JoinSecurityDomainsRequest::clear_security_domain_member() {
  if (GetArenaForAllocation() == nullptr && security_domain_member_ != nullptr) {
    delete security_domain_member_;
  }
  security_domain_member_ = nullptr;
}
inline const ::sync_pb::SecurityDomainMember& JoinSecurityDomainsRequest::_internal_security_domain_member() const {
  const ::sync_pb::SecurityDomainMember* p = security_domain_member_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::SecurityDomainMember&>(
      ::sync_pb::_SecurityDomainMember_default_instance_);
}
inline const ::sync_pb::SecurityDomainMember& JoinSecurityDomainsRequest::security_domain_member() const {
  // @@protoc_insertion_point(field_get:sync_pb.JoinSecurityDomainsRequest.security_domain_member)
  return _internal_security_domain_member();
}
inline void JoinSecurityDomainsRequest::unsafe_arena_set_allocated_security_domain_member(
    ::sync_pb::SecurityDomainMember* security_domain_member) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_domain_member_);
  }
  security_domain_member_ = security_domain_member;
  if (security_domain_member) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.JoinSecurityDomainsRequest.security_domain_member)
}
inline ::sync_pb::SecurityDomainMember* JoinSecurityDomainsRequest::release_security_domain_member() {
  
  ::sync_pb::SecurityDomainMember* temp = security_domain_member_;
  security_domain_member_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::SecurityDomainMember* JoinSecurityDomainsRequest::unsafe_arena_release_security_domain_member() {
  // @@protoc_insertion_point(field_release:sync_pb.JoinSecurityDomainsRequest.security_domain_member)
  
  ::sync_pb::SecurityDomainMember* temp = security_domain_member_;
  security_domain_member_ = nullptr;
  return temp;
}
inline ::sync_pb::SecurityDomainMember* JoinSecurityDomainsRequest::_internal_mutable_security_domain_member() {
  
  if (security_domain_member_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SecurityDomainMember>(GetArenaForAllocation());
    security_domain_member_ = p;
  }
  return security_domain_member_;
}
inline ::sync_pb::SecurityDomainMember* JoinSecurityDomainsRequest::mutable_security_domain_member() {
  ::sync_pb::SecurityDomainMember* _msg = _internal_mutable_security_domain_member();
  // @@protoc_insertion_point(field_mutable:sync_pb.JoinSecurityDomainsRequest.security_domain_member)
  return _msg;
}
inline void JoinSecurityDomainsRequest::set_allocated_security_domain_member(::sync_pb::SecurityDomainMember* security_domain_member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete security_domain_member_;
  }
  if (security_domain_member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(security_domain_member);
    if (message_arena != submessage_arena) {
      security_domain_member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_domain_member, submessage_arena);
    }
    
  } else {
    
  }
  security_domain_member_ = security_domain_member;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.JoinSecurityDomainsRequest.security_domain_member)
}

// repeated .sync_pb.SharedMemberKey shared_member_key = 3;
inline int JoinSecurityDomainsRequest::_internal_shared_member_key_size() const {
  return shared_member_key_.size();
}
inline int JoinSecurityDomainsRequest::shared_member_key_size() const {
  return _internal_shared_member_key_size();
}
inline void JoinSecurityDomainsRequest::clear_shared_member_key() {
  shared_member_key_.Clear();
}
inline ::sync_pb::SharedMemberKey* JoinSecurityDomainsRequest::mutable_shared_member_key(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.JoinSecurityDomainsRequest.shared_member_key)
  return shared_member_key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey >*
JoinSecurityDomainsRequest::mutable_shared_member_key() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.JoinSecurityDomainsRequest.shared_member_key)
  return &shared_member_key_;
}
inline const ::sync_pb::SharedMemberKey& JoinSecurityDomainsRequest::_internal_shared_member_key(int index) const {
  return shared_member_key_.Get(index);
}
inline const ::sync_pb::SharedMemberKey& JoinSecurityDomainsRequest::shared_member_key(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.JoinSecurityDomainsRequest.shared_member_key)
  return _internal_shared_member_key(index);
}
inline ::sync_pb::SharedMemberKey* JoinSecurityDomainsRequest::_internal_add_shared_member_key() {
  return shared_member_key_.Add();
}
inline ::sync_pb::SharedMemberKey* JoinSecurityDomainsRequest::add_shared_member_key() {
  ::sync_pb::SharedMemberKey* _add = _internal_add_shared_member_key();
  // @@protoc_insertion_point(field_add:sync_pb.JoinSecurityDomainsRequest.shared_member_key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SharedMemberKey >&
JoinSecurityDomainsRequest::shared_member_key() const {
  // @@protoc_insertion_point(field_list:sync_pb.JoinSecurityDomainsRequest.shared_member_key)
  return shared_member_key_;
}

// int32 member_type_hint = 4;
inline void JoinSecurityDomainsRequest::clear_member_type_hint() {
  member_type_hint_ = 0;
}
inline int32_t JoinSecurityDomainsRequest::_internal_member_type_hint() const {
  return member_type_hint_;
}
inline int32_t JoinSecurityDomainsRequest::member_type_hint() const {
  // @@protoc_insertion_point(field_get:sync_pb.JoinSecurityDomainsRequest.member_type_hint)
  return _internal_member_type_hint();
}
inline void JoinSecurityDomainsRequest::_internal_set_member_type_hint(int32_t value) {
  
  member_type_hint_ = value;
}
inline void JoinSecurityDomainsRequest::set_member_type_hint(int32_t value) {
  _internal_set_member_type_hint(value);
  // @@protoc_insertion_point(field_set:sync_pb.JoinSecurityDomainsRequest.member_type_hint)
}

// -------------------------------------------------------------------

// JoinSecurityDomainsResponse

// .sync_pb.SecurityDomain security_domain = 1;
inline bool JoinSecurityDomainsResponse::_internal_has_security_domain() const {
  return this != internal_default_instance() && security_domain_ != nullptr;
}
inline bool JoinSecurityDomainsResponse::has_security_domain() const {
  return _internal_has_security_domain();
}
inline void JoinSecurityDomainsResponse::clear_security_domain() {
  if (GetArenaForAllocation() == nullptr && security_domain_ != nullptr) {
    delete security_domain_;
  }
  security_domain_ = nullptr;
}
inline const ::sync_pb::SecurityDomain& JoinSecurityDomainsResponse::_internal_security_domain() const {
  const ::sync_pb::SecurityDomain* p = security_domain_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::SecurityDomain&>(
      ::sync_pb::_SecurityDomain_default_instance_);
}
inline const ::sync_pb::SecurityDomain& JoinSecurityDomainsResponse::security_domain() const {
  // @@protoc_insertion_point(field_get:sync_pb.JoinSecurityDomainsResponse.security_domain)
  return _internal_security_domain();
}
inline void JoinSecurityDomainsResponse::unsafe_arena_set_allocated_security_domain(
    ::sync_pb::SecurityDomain* security_domain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_domain_);
  }
  security_domain_ = security_domain;
  if (security_domain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.JoinSecurityDomainsResponse.security_domain)
}
inline ::sync_pb::SecurityDomain* JoinSecurityDomainsResponse::release_security_domain() {
  
  ::sync_pb::SecurityDomain* temp = security_domain_;
  security_domain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::SecurityDomain* JoinSecurityDomainsResponse::unsafe_arena_release_security_domain() {
  // @@protoc_insertion_point(field_release:sync_pb.JoinSecurityDomainsResponse.security_domain)
  
  ::sync_pb::SecurityDomain* temp = security_domain_;
  security_domain_ = nullptr;
  return temp;
}
inline ::sync_pb::SecurityDomain* JoinSecurityDomainsResponse::_internal_mutable_security_domain() {
  
  if (security_domain_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SecurityDomain>(GetArenaForAllocation());
    security_domain_ = p;
  }
  return security_domain_;
}
inline ::sync_pb::SecurityDomain* JoinSecurityDomainsResponse::mutable_security_domain() {
  ::sync_pb::SecurityDomain* _msg = _internal_mutable_security_domain();
  // @@protoc_insertion_point(field_mutable:sync_pb.JoinSecurityDomainsResponse.security_domain)
  return _msg;
}
inline void JoinSecurityDomainsResponse::set_allocated_security_domain(::sync_pb::SecurityDomain* security_domain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete security_domain_;
  }
  if (security_domain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(security_domain);
    if (message_arena != submessage_arena) {
      security_domain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_domain, submessage_arena);
    }
    
  } else {
    
  }
  security_domain_ = security_domain;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.JoinSecurityDomainsResponse.security_domain)
}

// -------------------------------------------------------------------

// JoinSecurityDomainsErrorDetail

// .sync_pb.JoinSecurityDomainsResponse already_exists_response = 1;
inline bool JoinSecurityDomainsErrorDetail::_internal_has_already_exists_response() const {
  return this != internal_default_instance() && already_exists_response_ != nullptr;
}
inline bool JoinSecurityDomainsErrorDetail::has_already_exists_response() const {
  return _internal_has_already_exists_response();
}
inline void JoinSecurityDomainsErrorDetail::clear_already_exists_response() {
  if (GetArenaForAllocation() == nullptr && already_exists_response_ != nullptr) {
    delete already_exists_response_;
  }
  already_exists_response_ = nullptr;
}
inline const ::sync_pb::JoinSecurityDomainsResponse& JoinSecurityDomainsErrorDetail::_internal_already_exists_response() const {
  const ::sync_pb::JoinSecurityDomainsResponse* p = already_exists_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::JoinSecurityDomainsResponse&>(
      ::sync_pb::_JoinSecurityDomainsResponse_default_instance_);
}
inline const ::sync_pb::JoinSecurityDomainsResponse& JoinSecurityDomainsErrorDetail::already_exists_response() const {
  // @@protoc_insertion_point(field_get:sync_pb.JoinSecurityDomainsErrorDetail.already_exists_response)
  return _internal_already_exists_response();
}
inline void JoinSecurityDomainsErrorDetail::unsafe_arena_set_allocated_already_exists_response(
    ::sync_pb::JoinSecurityDomainsResponse* already_exists_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(already_exists_response_);
  }
  already_exists_response_ = already_exists_response;
  if (already_exists_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.JoinSecurityDomainsErrorDetail.already_exists_response)
}
inline ::sync_pb::JoinSecurityDomainsResponse* JoinSecurityDomainsErrorDetail::release_already_exists_response() {
  
  ::sync_pb::JoinSecurityDomainsResponse* temp = already_exists_response_;
  already_exists_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::JoinSecurityDomainsResponse* JoinSecurityDomainsErrorDetail::unsafe_arena_release_already_exists_response() {
  // @@protoc_insertion_point(field_release:sync_pb.JoinSecurityDomainsErrorDetail.already_exists_response)
  
  ::sync_pb::JoinSecurityDomainsResponse* temp = already_exists_response_;
  already_exists_response_ = nullptr;
  return temp;
}
inline ::sync_pb::JoinSecurityDomainsResponse* JoinSecurityDomainsErrorDetail::_internal_mutable_already_exists_response() {
  
  if (already_exists_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::JoinSecurityDomainsResponse>(GetArenaForAllocation());
    already_exists_response_ = p;
  }
  return already_exists_response_;
}
inline ::sync_pb::JoinSecurityDomainsResponse* JoinSecurityDomainsErrorDetail::mutable_already_exists_response() {
  ::sync_pb::JoinSecurityDomainsResponse* _msg = _internal_mutable_already_exists_response();
  // @@protoc_insertion_point(field_mutable:sync_pb.JoinSecurityDomainsErrorDetail.already_exists_response)
  return _msg;
}
inline void JoinSecurityDomainsErrorDetail::set_allocated_already_exists_response(::sync_pb::JoinSecurityDomainsResponse* already_exists_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete already_exists_response_;
  }
  if (already_exists_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(already_exists_response);
    if (message_arena != submessage_arena) {
      already_exists_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, already_exists_response, submessage_arena);
    }
    
  } else {
    
  }
  already_exists_response_ = already_exists_response;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.JoinSecurityDomainsErrorDetail.already_exists_response)
}

// -------------------------------------------------------------------

// Proto3Any

// string type_url = 1;
inline void Proto3Any::clear_type_url() {
  type_url_.ClearToEmpty();
}
inline const std::string& Proto3Any::type_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.Proto3Any.type_url)
  return _internal_type_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proto3Any::set_type_url(ArgT0&& arg0, ArgT... args) {
 
 type_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.Proto3Any.type_url)
}
inline std::string* Proto3Any::mutable_type_url() {
  std::string* _s = _internal_mutable_type_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.Proto3Any.type_url)
  return _s;
}
inline const std::string& Proto3Any::_internal_type_url() const {
  return type_url_.Get();
}
inline void Proto3Any::_internal_set_type_url(const std::string& value) {
  
  type_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Proto3Any::_internal_mutable_type_url() {
  
  return type_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Proto3Any::release_type_url() {
  // @@protoc_insertion_point(field_release:sync_pb.Proto3Any.type_url)
  return type_url_.Release();
}
inline void Proto3Any::set_allocated_type_url(std::string* type_url) {
  if (type_url != nullptr) {
    
  } else {
    
  }
  type_url_.SetAllocated(type_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_url_.IsDefault()) {
    type_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.Proto3Any.type_url)
}

// bytes value = 2;
inline void Proto3Any::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Proto3Any::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.Proto3Any.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proto3Any::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.Proto3Any.value)
}
inline std::string* Proto3Any::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.Proto3Any.value)
  return _s;
}
inline const std::string& Proto3Any::_internal_value() const {
  return value_.Get();
}
inline void Proto3Any::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* Proto3Any::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* Proto3Any::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.Proto3Any.value)
  return value_.Release();
}
inline void Proto3Any::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.Proto3Any.value)
}

// -------------------------------------------------------------------

// RPCStatus

// repeated .sync_pb.Proto3Any details = 3;
inline int RPCStatus::_internal_details_size() const {
  return details_.size();
}
inline int RPCStatus::details_size() const {
  return _internal_details_size();
}
inline void RPCStatus::clear_details() {
  details_.Clear();
}
inline ::sync_pb::Proto3Any* RPCStatus::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.RPCStatus.details)
  return details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::Proto3Any >*
RPCStatus::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.RPCStatus.details)
  return &details_;
}
inline const ::sync_pb::Proto3Any& RPCStatus::_internal_details(int index) const {
  return details_.Get(index);
}
inline const ::sync_pb::Proto3Any& RPCStatus::details(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.RPCStatus.details)
  return _internal_details(index);
}
inline ::sync_pb::Proto3Any* RPCStatus::_internal_add_details() {
  return details_.Add();
}
inline ::sync_pb::Proto3Any* RPCStatus::add_details() {
  ::sync_pb::Proto3Any* _add = _internal_add_details();
  // @@protoc_insertion_point(field_add:sync_pb.RPCStatus.details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::Proto3Any >&
RPCStatus::details() const {
  // @@protoc_insertion_point(field_list:sync_pb.RPCStatus.details)
  return details_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::SecurityDomainMember_MemberType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fvault_2eproto
