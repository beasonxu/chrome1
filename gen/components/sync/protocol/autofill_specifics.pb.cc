// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/autofill_specifics.proto

#include "components/sync/protocol/autofill_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR AutofillProfileSpecifics::AutofillProfileSpecifics(
    ::_pbi::ConstantInitialized)
  : name_first_()
  , name_middle_()
  , name_last_()
  , email_address_()
  , phone_home_whole_number_()
  , name_full_()
  , name_honorific_()
  , name_last_first_()
  , name_last_conjunction_()
  , name_last_second_()
  , name_honorific_status_()
  , name_first_status_()
  , name_middle_status_()
  , name_last_status_()
  , name_last_first_status_()
  , name_last_conjunction_status_()
  , name_last_second_status_()
  , name_full_status_()
  , name_full_with_honorific_()
  , name_full_with_honorific_status_()
  , deprecated_label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , company_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_line1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_line2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_city_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_state_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_zip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_country_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , phone_fax_whole_number_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_street_address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_sorting_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_dependent_locality_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_language_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_thoroughfare_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_thoroughfare_number_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_dependent_thoroughfare_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_premise_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_subpremise_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_apt_num_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_home_floor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , profile_label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , use_count_(int64_t{0})
  , use_date_(int64_t{0})
  , validity_state_bitfield_(int64_t{0})
  , address_home_city_status_(0)

  , address_home_state_status_(0)

  , disallow_settings_visible_updates_(false)
  , is_client_validity_states_updated_(false)
  , address_home_zip_status_(0)

  , address_home_country_status_(0)

  , address_home_street_address_status_(0)

  , address_home_sorting_code_status_(0)

  , address_home_dependent_locality_status_(0)

  , address_home_language_code_status_(0)

  , address_home_thoroughfare_name_status_(0)

  , address_home_thoroughfare_number_status_(0)

  , address_home_dependent_thoroughfare_name_status_(0)

  , address_home_premise_name_status_(0)

  , address_home_subpremise_name_status_(0)

  , address_home_apt_num_status_(0)

  , address_home_floor_status_(0)

  , birthdate_day_(0)
  , birthdate_month_(0)
  , birthdate_year_(0){}
struct AutofillProfileSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillProfileSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillProfileSpecificsDefaultTypeInternal() {}
  union {
    AutofillProfileSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillProfileSpecificsDefaultTypeInternal _AutofillProfileSpecifics_default_instance_;
PROTOBUF_CONSTEXPR AutofillSpecifics::AutofillSpecifics(
    ::_pbi::ConstantInitialized)
  : usage_timestamp_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , profile_(nullptr){}
struct AutofillSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillSpecificsDefaultTypeInternal() {}
  union {
    AutofillSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillSpecificsDefaultTypeInternal _AutofillSpecifics_default_instance_;
PROTOBUF_CONSTEXPR CloudTokenData::CloudTokenData(
    ::_pbi::ConstantInitialized)
  : suffix_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , art_fife_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instrument_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exp_month_(0)
  , exp_year_(0){}
struct CloudTokenDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudTokenDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudTokenDataDefaultTypeInternal() {}
  union {
    CloudTokenData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudTokenDataDefaultTypeInternal _CloudTokenData_default_instance_;
PROTOBUF_CONSTEXPR CardIssuer::CardIssuer(
    ::_pbi::ConstantInitialized)
  : issuer_(0)
{}
struct CardIssuerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CardIssuerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CardIssuerDefaultTypeInternal() {}
  union {
    CardIssuer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CardIssuerDefaultTypeInternal _CardIssuer_default_instance_;
PROTOBUF_CONSTEXPR WalletMaskedCreditCard::WalletMaskedCreditCard(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_on_card_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_four_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , billing_address_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bank_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , nickname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , card_art_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , product_description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cloud_token_data_(nullptr)
  , card_issuer_(nullptr)
  , status_(0)

  , type_(0)

  , exp_month_(0)
  , exp_year_(0)
  , instrument_id_(int64_t{0})
  , virtual_card_enrollment_state_(0)
{}
struct WalletMaskedCreditCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletMaskedCreditCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletMaskedCreditCardDefaultTypeInternal() {}
  union {
    WalletMaskedCreditCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletMaskedCreditCardDefaultTypeInternal _WalletMaskedCreditCard_default_instance_;
PROTOBUF_CONSTEXPR WalletPostalAddress::WalletPostalAddress(
    ::_pbi::ConstantInitialized)
  : street_address_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , company_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_3_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_4_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , postal_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sorting_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , country_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , language_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , recipient_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , phone_number_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WalletPostalAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletPostalAddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletPostalAddressDefaultTypeInternal() {}
  union {
    WalletPostalAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletPostalAddressDefaultTypeInternal _WalletPostalAddress_default_instance_;
PROTOBUF_CONSTEXPR PaymentsCustomerData::PaymentsCustomerData(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PaymentsCustomerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentsCustomerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentsCustomerDataDefaultTypeInternal() {}
  union {
    PaymentsCustomerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentsCustomerDataDefaultTypeInternal _PaymentsCustomerData_default_instance_;
PROTOBUF_CONSTEXPR WalletCreditCardCloudTokenData::WalletCreditCardCloudTokenData(
    ::_pbi::ConstantInitialized)
  : masked_card_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , suffix_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , art_fife_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instrument_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exp_month_(0)
  , exp_year_(0){}
struct WalletCreditCardCloudTokenDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletCreditCardCloudTokenDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletCreditCardCloudTokenDataDefaultTypeInternal() {}
  union {
    WalletCreditCardCloudTokenData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletCreditCardCloudTokenDataDefaultTypeInternal _WalletCreditCardCloudTokenData_default_instance_;
PROTOBUF_CONSTEXPR AutofillWalletSpecifics::AutofillWalletSpecifics(
    ::_pbi::ConstantInitialized)
  : masked_card_(nullptr)
  , address_(nullptr)
  , customer_data_(nullptr)
  , cloud_token_data_(nullptr)
  , type_(0)
{}
struct AutofillWalletSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillWalletSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillWalletSpecificsDefaultTypeInternal() {}
  union {
    AutofillWalletSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillWalletSpecificsDefaultTypeInternal _AutofillWalletSpecifics_default_instance_;
PROTOBUF_CONSTEXPR WalletMetadataSpecifics::WalletMetadataSpecifics(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , card_billing_address_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , use_count_(int64_t{0})
  , type_(0)

  , address_has_converted_(false)
  , use_date_(int64_t{0}){}
struct WalletMetadataSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletMetadataSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletMetadataSpecificsDefaultTypeInternal() {}
  union {
    WalletMetadataSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletMetadataSpecificsDefaultTypeInternal _WalletMetadataSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool AutofillProfileSpecifics_VerificationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutofillProfileSpecifics_VerificationStatus_strings[6] = {};

static const char AutofillProfileSpecifics_VerificationStatus_names[] =
  "FORMATTED"
  "OBSERVED"
  "PARSED"
  "SERVER_PARSED"
  "USER_VERIFIED"
  "VERIFICATION_STATUS_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutofillProfileSpecifics_VerificationStatus_entries[] = {
  { {AutofillProfileSpecifics_VerificationStatus_names + 0, 9}, 2 },
  { {AutofillProfileSpecifics_VerificationStatus_names + 9, 8}, 3 },
  { {AutofillProfileSpecifics_VerificationStatus_names + 17, 6}, 1 },
  { {AutofillProfileSpecifics_VerificationStatus_names + 23, 13}, 5 },
  { {AutofillProfileSpecifics_VerificationStatus_names + 36, 13}, 4 },
  { {AutofillProfileSpecifics_VerificationStatus_names + 49, 31}, 0 },
};

static const int AutofillProfileSpecifics_VerificationStatus_entries_by_number[] = {
  5, // 0 -> VERIFICATION_STATUS_UNSPECIFIED
  2, // 1 -> PARSED
  0, // 2 -> FORMATTED
  1, // 3 -> OBSERVED
  4, // 4 -> USER_VERIFIED
  3, // 5 -> SERVER_PARSED
};

const std::string& AutofillProfileSpecifics_VerificationStatus_Name(
    AutofillProfileSpecifics_VerificationStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutofillProfileSpecifics_VerificationStatus_entries,
          AutofillProfileSpecifics_VerificationStatus_entries_by_number,
          6, AutofillProfileSpecifics_VerificationStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutofillProfileSpecifics_VerificationStatus_entries,
      AutofillProfileSpecifics_VerificationStatus_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutofillProfileSpecifics_VerificationStatus_strings[idx].get();
}
bool AutofillProfileSpecifics_VerificationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutofillProfileSpecifics_VerificationStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutofillProfileSpecifics_VerificationStatus_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<AutofillProfileSpecifics_VerificationStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::VERIFICATION_STATUS_UNSPECIFIED;
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::PARSED;
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::FORMATTED;
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::OBSERVED;
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::USER_VERIFIED;
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::SERVER_PARSED;
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::VerificationStatus_MIN;
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::VerificationStatus_MAX;
constexpr int AutofillProfileSpecifics::VerificationStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CardIssuer_Issuer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CardIssuer_Issuer_strings[2] = {};

static const char CardIssuer_Issuer_names[] =
  "GOOGLE"
  "ISSUER_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CardIssuer_Issuer_entries[] = {
  { {CardIssuer_Issuer_names + 0, 6}, 1 },
  { {CardIssuer_Issuer_names + 6, 14}, 0 },
};

static const int CardIssuer_Issuer_entries_by_number[] = {
  1, // 0 -> ISSUER_UNKNOWN
  0, // 1 -> GOOGLE
};

const std::string& CardIssuer_Issuer_Name(
    CardIssuer_Issuer value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CardIssuer_Issuer_entries,
          CardIssuer_Issuer_entries_by_number,
          2, CardIssuer_Issuer_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CardIssuer_Issuer_entries,
      CardIssuer_Issuer_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CardIssuer_Issuer_strings[idx].get();
}
bool CardIssuer_Issuer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CardIssuer_Issuer* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CardIssuer_Issuer_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CardIssuer_Issuer>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CardIssuer_Issuer CardIssuer::ISSUER_UNKNOWN;
constexpr CardIssuer_Issuer CardIssuer::GOOGLE;
constexpr CardIssuer_Issuer CardIssuer::Issuer_MIN;
constexpr CardIssuer_Issuer CardIssuer::Issuer_MAX;
constexpr int CardIssuer::Issuer_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WalletMaskedCreditCard_WalletCardStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WalletMaskedCreditCard_WalletCardStatus_strings[2] = {};

static const char WalletMaskedCreditCard_WalletCardStatus_names[] =
  "EXPIRED"
  "VALID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WalletMaskedCreditCard_WalletCardStatus_entries[] = {
  { {WalletMaskedCreditCard_WalletCardStatus_names + 0, 7}, 1 },
  { {WalletMaskedCreditCard_WalletCardStatus_names + 7, 5}, 0 },
};

static const int WalletMaskedCreditCard_WalletCardStatus_entries_by_number[] = {
  1, // 0 -> VALID
  0, // 1 -> EXPIRED
};

const std::string& WalletMaskedCreditCard_WalletCardStatus_Name(
    WalletMaskedCreditCard_WalletCardStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WalletMaskedCreditCard_WalletCardStatus_entries,
          WalletMaskedCreditCard_WalletCardStatus_entries_by_number,
          2, WalletMaskedCreditCard_WalletCardStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WalletMaskedCreditCard_WalletCardStatus_entries,
      WalletMaskedCreditCard_WalletCardStatus_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WalletMaskedCreditCard_WalletCardStatus_strings[idx].get();
}
bool WalletMaskedCreditCard_WalletCardStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletMaskedCreditCard_WalletCardStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WalletMaskedCreditCard_WalletCardStatus_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<WalletMaskedCreditCard_WalletCardStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::VALID;
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::EXPIRED;
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::WalletCardStatus_MIN;
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::WalletCardStatus_MAX;
constexpr int WalletMaskedCreditCard::WalletCardStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WalletMaskedCreditCard_WalletCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WalletMaskedCreditCard_WalletCardType_strings[11] = {};

static const char WalletMaskedCreditCard_WalletCardType_names[] =
  "AMEX"
  "DISCOVER"
  "ELO"
  "JCB"
  "MAESTRO"
  "MASTER_CARD"
  "SOLO"
  "SWITCH"
  "UNIONPAY"
  "UNKNOWN"
  "VISA";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WalletMaskedCreditCard_WalletCardType_entries[] = {
  { {WalletMaskedCreditCard_WalletCardType_names + 0, 4}, 1 },
  { {WalletMaskedCreditCard_WalletCardType_names + 4, 8}, 2 },
  { {WalletMaskedCreditCard_WalletCardType_names + 12, 3}, 10 },
  { {WalletMaskedCreditCard_WalletCardType_names + 15, 3}, 3 },
  { {WalletMaskedCreditCard_WalletCardType_names + 18, 7}, 4 },
  { {WalletMaskedCreditCard_WalletCardType_names + 25, 11}, 5 },
  { {WalletMaskedCreditCard_WalletCardType_names + 36, 4}, 6 },
  { {WalletMaskedCreditCard_WalletCardType_names + 40, 6}, 7 },
  { {WalletMaskedCreditCard_WalletCardType_names + 46, 8}, 9 },
  { {WalletMaskedCreditCard_WalletCardType_names + 54, 7}, 0 },
  { {WalletMaskedCreditCard_WalletCardType_names + 61, 4}, 8 },
};

static const int WalletMaskedCreditCard_WalletCardType_entries_by_number[] = {
  9, // 0 -> UNKNOWN
  0, // 1 -> AMEX
  1, // 2 -> DISCOVER
  3, // 3 -> JCB
  4, // 4 -> MAESTRO
  5, // 5 -> MASTER_CARD
  6, // 6 -> SOLO
  7, // 7 -> SWITCH
  10, // 8 -> VISA
  8, // 9 -> UNIONPAY
  2, // 10 -> ELO
};

const std::string& WalletMaskedCreditCard_WalletCardType_Name(
    WalletMaskedCreditCard_WalletCardType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WalletMaskedCreditCard_WalletCardType_entries,
          WalletMaskedCreditCard_WalletCardType_entries_by_number,
          11, WalletMaskedCreditCard_WalletCardType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WalletMaskedCreditCard_WalletCardType_entries,
      WalletMaskedCreditCard_WalletCardType_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WalletMaskedCreditCard_WalletCardType_strings[idx].get();
}
bool WalletMaskedCreditCard_WalletCardType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletMaskedCreditCard_WalletCardType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WalletMaskedCreditCard_WalletCardType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<WalletMaskedCreditCard_WalletCardType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::UNKNOWN;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::AMEX;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::DISCOVER;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::JCB;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::MAESTRO;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::MASTER_CARD;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::SOLO;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::SWITCH;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::VISA;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::UNIONPAY;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::ELO;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::WalletCardType_MIN;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::WalletCardType_MAX;
constexpr int WalletMaskedCreditCard::WalletCardType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WalletMaskedCreditCard_VirtualCardEnrollmentState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WalletMaskedCreditCard_VirtualCardEnrollmentState_strings[5] = {};

static const char WalletMaskedCreditCard_VirtualCardEnrollmentState_names[] =
  "ENROLLED"
  "UNENROLLED"
  "UNENROLLED_AND_ELIGIBLE"
  "UNENROLLED_AND_NOT_ELIGIBLE"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WalletMaskedCreditCard_VirtualCardEnrollmentState_entries[] = {
  { {WalletMaskedCreditCard_VirtualCardEnrollmentState_names + 0, 8}, 2 },
  { {WalletMaskedCreditCard_VirtualCardEnrollmentState_names + 8, 10}, 1 },
  { {WalletMaskedCreditCard_VirtualCardEnrollmentState_names + 18, 23}, 4 },
  { {WalletMaskedCreditCard_VirtualCardEnrollmentState_names + 41, 27}, 3 },
  { {WalletMaskedCreditCard_VirtualCardEnrollmentState_names + 68, 11}, 0 },
};

static const int WalletMaskedCreditCard_VirtualCardEnrollmentState_entries_by_number[] = {
  4, // 0 -> UNSPECIFIED
  1, // 1 -> UNENROLLED
  0, // 2 -> ENROLLED
  3, // 3 -> UNENROLLED_AND_NOT_ELIGIBLE
  2, // 4 -> UNENROLLED_AND_ELIGIBLE
};

const std::string& WalletMaskedCreditCard_VirtualCardEnrollmentState_Name(
    WalletMaskedCreditCard_VirtualCardEnrollmentState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WalletMaskedCreditCard_VirtualCardEnrollmentState_entries,
          WalletMaskedCreditCard_VirtualCardEnrollmentState_entries_by_number,
          5, WalletMaskedCreditCard_VirtualCardEnrollmentState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WalletMaskedCreditCard_VirtualCardEnrollmentState_entries,
      WalletMaskedCreditCard_VirtualCardEnrollmentState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WalletMaskedCreditCard_VirtualCardEnrollmentState_strings[idx].get();
}
bool WalletMaskedCreditCard_VirtualCardEnrollmentState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletMaskedCreditCard_VirtualCardEnrollmentState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WalletMaskedCreditCard_VirtualCardEnrollmentState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WalletMaskedCreditCard_VirtualCardEnrollmentState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::UNSPECIFIED;
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::UNENROLLED;
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::ENROLLED;
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::UNENROLLED_AND_NOT_ELIGIBLE;
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::UNENROLLED_AND_ELIGIBLE;
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::VirtualCardEnrollmentState_MIN;
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::VirtualCardEnrollmentState_MAX;
constexpr int WalletMaskedCreditCard::VirtualCardEnrollmentState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool AutofillWalletSpecifics_WalletInfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutofillWalletSpecifics_WalletInfoType_strings[5] = {};

static const char AutofillWalletSpecifics_WalletInfoType_names[] =
  "CREDIT_CARD_CLOUD_TOKEN_DATA"
  "CUSTOMER_DATA"
  "MASKED_CREDIT_CARD"
  "POSTAL_ADDRESS"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutofillWalletSpecifics_WalletInfoType_entries[] = {
  { {AutofillWalletSpecifics_WalletInfoType_names + 0, 28}, 4 },
  { {AutofillWalletSpecifics_WalletInfoType_names + 28, 13}, 3 },
  { {AutofillWalletSpecifics_WalletInfoType_names + 41, 18}, 1 },
  { {AutofillWalletSpecifics_WalletInfoType_names + 59, 14}, 2 },
  { {AutofillWalletSpecifics_WalletInfoType_names + 73, 7}, 0 },
};

static const int AutofillWalletSpecifics_WalletInfoType_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  2, // 1 -> MASKED_CREDIT_CARD
  3, // 2 -> POSTAL_ADDRESS
  1, // 3 -> CUSTOMER_DATA
  0, // 4 -> CREDIT_CARD_CLOUD_TOKEN_DATA
};

const std::string& AutofillWalletSpecifics_WalletInfoType_Name(
    AutofillWalletSpecifics_WalletInfoType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutofillWalletSpecifics_WalletInfoType_entries,
          AutofillWalletSpecifics_WalletInfoType_entries_by_number,
          5, AutofillWalletSpecifics_WalletInfoType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutofillWalletSpecifics_WalletInfoType_entries,
      AutofillWalletSpecifics_WalletInfoType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutofillWalletSpecifics_WalletInfoType_strings[idx].get();
}
bool AutofillWalletSpecifics_WalletInfoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutofillWalletSpecifics_WalletInfoType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutofillWalletSpecifics_WalletInfoType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AutofillWalletSpecifics_WalletInfoType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::UNKNOWN;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::MASKED_CREDIT_CARD;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::POSTAL_ADDRESS;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::CUSTOMER_DATA;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::CREDIT_CARD_CLOUD_TOKEN_DATA;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::WalletInfoType_MIN;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::WalletInfoType_MAX;
constexpr int AutofillWalletSpecifics::WalletInfoType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WalletMetadataSpecifics_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WalletMetadataSpecifics_Type_strings[3] = {};

static const char WalletMetadataSpecifics_Type_names[] =
  "ADDRESS"
  "CARD"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WalletMetadataSpecifics_Type_entries[] = {
  { {WalletMetadataSpecifics_Type_names + 0, 7}, 2 },
  { {WalletMetadataSpecifics_Type_names + 7, 4}, 1 },
  { {WalletMetadataSpecifics_Type_names + 11, 7}, 0 },
};

static const int WalletMetadataSpecifics_Type_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> CARD
  0, // 2 -> ADDRESS
};

const std::string& WalletMetadataSpecifics_Type_Name(
    WalletMetadataSpecifics_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WalletMetadataSpecifics_Type_entries,
          WalletMetadataSpecifics_Type_entries_by_number,
          3, WalletMetadataSpecifics_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WalletMetadataSpecifics_Type_entries,
      WalletMetadataSpecifics_Type_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WalletMetadataSpecifics_Type_strings[idx].get();
}
bool WalletMetadataSpecifics_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletMetadataSpecifics_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WalletMetadataSpecifics_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WalletMetadataSpecifics_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::UNKNOWN;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::CARD;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::ADDRESS;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::Type_MIN;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::Type_MAX;
constexpr int WalletMetadataSpecifics::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AutofillProfileSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillProfileSpecifics>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_use_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_profile_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_company_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address_home_line1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_address_home_line2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_address_home_city(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_address_home_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_address_home_zip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_address_home_country(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_address_home_street_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_address_home_sorting_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_address_home_dependent_locality(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_address_home_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_address_home_thoroughfare_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_address_home_thoroughfare_number(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_address_home_dependent_thoroughfare_name(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_address_home_premise_name(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_address_home_subpremise_name(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_address_home_apt_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_address_home_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_address_home_city_status(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_address_home_state_status(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_address_home_zip_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_address_home_country_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_address_home_street_address_status(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_address_home_sorting_code_status(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_address_home_dependent_locality_status(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_address_home_language_code_status(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_address_home_thoroughfare_name_status(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_address_home_thoroughfare_number_status(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_address_home_dependent_thoroughfare_name_status(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_address_home_premise_name_status(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_address_home_subpremise_name_status(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_address_home_apt_num_status(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_address_home_floor_status(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_disallow_settings_visible_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_birthdate_day(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_birthdate_month(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_birthdate_year(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_deprecated_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phone_fax_whole_number(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_validity_state_bitfield(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_is_client_validity_states_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

AutofillProfileSpecifics::AutofillProfileSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  name_first_(arena),
  name_middle_(arena),
  name_last_(arena),
  email_address_(arena),
  phone_home_whole_number_(arena),
  name_full_(arena),
  name_honorific_(arena),
  name_last_first_(arena),
  name_last_conjunction_(arena),
  name_last_second_(arena),
  name_honorific_status_(arena),
  name_first_status_(arena),
  name_middle_status_(arena),
  name_last_status_(arena),
  name_last_first_status_(arena),
  name_last_conjunction_status_(arena),
  name_last_second_status_(arena),
  name_full_status_(arena),
  name_full_with_honorific_(arena),
  name_full_with_honorific_status_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillProfileSpecifics)
}
AutofillProfileSpecifics::AutofillProfileSpecifics(const AutofillProfileSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      name_first_(from.name_first_),
      name_middle_(from.name_middle_),
      name_last_(from.name_last_),
      email_address_(from.email_address_),
      phone_home_whole_number_(from.phone_home_whole_number_),
      name_full_(from.name_full_),
      name_honorific_(from.name_honorific_),
      name_last_first_(from.name_last_first_),
      name_last_conjunction_(from.name_last_conjunction_),
      name_last_second_(from.name_last_second_),
      name_honorific_status_(from.name_honorific_status_),
      name_first_status_(from.name_first_status_),
      name_middle_status_(from.name_middle_status_),
      name_last_status_(from.name_last_status_),
      name_last_first_status_(from.name_last_first_status_),
      name_last_conjunction_status_(from.name_last_conjunction_status_),
      name_last_second_status_(from.name_last_second_status_),
      name_full_status_(from.name_full_status_),
      name_full_with_honorific_(from.name_full_with_honorific_),
      name_full_with_honorific_status_(from.name_full_with_honorific_status_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  deprecated_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deprecated_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deprecated_label()) {
    deprecated_label_.Set(from._internal_deprecated_label(), 
      GetArenaForAllocation());
  }
  company_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_company_name()) {
    company_name_.Set(from._internal_company_name(), 
      GetArenaForAllocation());
  }
  address_home_line1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_line1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_line1()) {
    address_home_line1_.Set(from._internal_address_home_line1(), 
      GetArenaForAllocation());
  }
  address_home_line2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_line2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_line2()) {
    address_home_line2_.Set(from._internal_address_home_line2(), 
      GetArenaForAllocation());
  }
  address_home_city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_city()) {
    address_home_city_.Set(from._internal_address_home_city(), 
      GetArenaForAllocation());
  }
  address_home_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_state()) {
    address_home_state_.Set(from._internal_address_home_state(), 
      GetArenaForAllocation());
  }
  address_home_zip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_zip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_zip()) {
    address_home_zip_.Set(from._internal_address_home_zip(), 
      GetArenaForAllocation());
  }
  address_home_country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_country()) {
    address_home_country_.Set(from._internal_address_home_country(), 
      GetArenaForAllocation());
  }
  phone_fax_whole_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    phone_fax_whole_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phone_fax_whole_number()) {
    phone_fax_whole_number_.Set(from._internal_phone_fax_whole_number(), 
      GetArenaForAllocation());
  }
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  address_home_street_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_street_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_street_address()) {
    address_home_street_address_.Set(from._internal_address_home_street_address(), 
      GetArenaForAllocation());
  }
  address_home_sorting_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_sorting_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_sorting_code()) {
    address_home_sorting_code_.Set(from._internal_address_home_sorting_code(), 
      GetArenaForAllocation());
  }
  address_home_dependent_locality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_dependent_locality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_dependent_locality()) {
    address_home_dependent_locality_.Set(from._internal_address_home_dependent_locality(), 
      GetArenaForAllocation());
  }
  address_home_language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_language_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_language_code()) {
    address_home_language_code_.Set(from._internal_address_home_language_code(), 
      GetArenaForAllocation());
  }
  address_home_thoroughfare_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_thoroughfare_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_thoroughfare_name()) {
    address_home_thoroughfare_name_.Set(from._internal_address_home_thoroughfare_name(), 
      GetArenaForAllocation());
  }
  address_home_thoroughfare_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_thoroughfare_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_thoroughfare_number()) {
    address_home_thoroughfare_number_.Set(from._internal_address_home_thoroughfare_number(), 
      GetArenaForAllocation());
  }
  address_home_dependent_thoroughfare_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_dependent_thoroughfare_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_dependent_thoroughfare_name()) {
    address_home_dependent_thoroughfare_name_.Set(from._internal_address_home_dependent_thoroughfare_name(), 
      GetArenaForAllocation());
  }
  address_home_premise_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_premise_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_premise_name()) {
    address_home_premise_name_.Set(from._internal_address_home_premise_name(), 
      GetArenaForAllocation());
  }
  address_home_subpremise_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_subpremise_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_subpremise_name()) {
    address_home_subpremise_name_.Set(from._internal_address_home_subpremise_name(), 
      GetArenaForAllocation());
  }
  address_home_apt_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_apt_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_apt_num()) {
    address_home_apt_num_.Set(from._internal_address_home_apt_num(), 
      GetArenaForAllocation());
  }
  address_home_floor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_home_floor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_home_floor()) {
    address_home_floor_.Set(from._internal_address_home_floor(), 
      GetArenaForAllocation());
  }
  profile_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profile_label()) {
    profile_label_.Set(from._internal_profile_label(), 
      GetArenaForAllocation());
  }
  ::memcpy(&use_count_, &from.use_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&birthdate_year_) -
    reinterpret_cast<char*>(&use_count_)) + sizeof(birthdate_year_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillProfileSpecifics)
}

inline void AutofillProfileSpecifics::SharedCtor() {
deprecated_label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deprecated_label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
company_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_line1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_line1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_line2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_line2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_city_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_city_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_state_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_state_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_zip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_zip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_country_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_country_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
phone_fax_whole_number_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  phone_fax_whole_number_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_street_address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_street_address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_sorting_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_sorting_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_dependent_locality_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_dependent_locality_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_language_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_language_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_thoroughfare_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_thoroughfare_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_thoroughfare_number_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_thoroughfare_number_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_dependent_thoroughfare_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_dependent_thoroughfare_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_premise_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_premise_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_subpremise_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_subpremise_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_apt_num_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_apt_num_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_home_floor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_home_floor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
profile_label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&birthdate_year_) -
    reinterpret_cast<char*>(&use_count_)) + sizeof(birthdate_year_));
}

AutofillProfileSpecifics::~AutofillProfileSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillProfileSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillProfileSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deprecated_label_.Destroy();
  company_name_.Destroy();
  address_home_line1_.Destroy();
  address_home_line2_.Destroy();
  address_home_city_.Destroy();
  address_home_state_.Destroy();
  address_home_zip_.Destroy();
  address_home_country_.Destroy();
  phone_fax_whole_number_.Destroy();
  guid_.Destroy();
  origin_.Destroy();
  address_home_street_address_.Destroy();
  address_home_sorting_code_.Destroy();
  address_home_dependent_locality_.Destroy();
  address_home_language_code_.Destroy();
  address_home_thoroughfare_name_.Destroy();
  address_home_thoroughfare_number_.Destroy();
  address_home_dependent_thoroughfare_name_.Destroy();
  address_home_premise_name_.Destroy();
  address_home_subpremise_name_.Destroy();
  address_home_apt_num_.Destroy();
  address_home_floor_.Destroy();
  profile_label_.Destroy();
}

void AutofillProfileSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillProfileSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillProfileSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_first_.Clear();
  name_middle_.Clear();
  name_last_.Clear();
  email_address_.Clear();
  phone_home_whole_number_.Clear();
  name_full_.Clear();
  name_honorific_.Clear();
  name_last_first_.Clear();
  name_last_conjunction_.Clear();
  name_last_second_.Clear();
  name_honorific_status_.Clear();
  name_first_status_.Clear();
  name_middle_status_.Clear();
  name_last_status_.Clear();
  name_last_first_status_.Clear();
  name_last_conjunction_status_.Clear();
  name_last_second_status_.Clear();
  name_full_status_.Clear();
  name_full_with_honorific_.Clear();
  name_full_with_honorific_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      deprecated_label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      company_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      address_home_line1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      address_home_line2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      address_home_city_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      address_home_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      address_home_zip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      address_home_country_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      phone_fax_whole_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      origin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      address_home_street_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      address_home_sorting_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      address_home_dependent_locality_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      address_home_language_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      address_home_thoroughfare_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      address_home_thoroughfare_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      address_home_dependent_thoroughfare_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      address_home_premise_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      address_home_subpremise_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      address_home_apt_num_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      address_home_floor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      profile_label_.ClearNonDefaultToEmpty();
    }
  }
  use_count_ = int64_t{0};
  if (cached_has_bits & 0xff000000u) {
    ::memset(&use_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&address_home_country_status_) -
        reinterpret_cast<char*>(&use_date_)) + sizeof(address_home_country_status_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&address_home_street_address_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&address_home_premise_name_status_) -
        reinterpret_cast<char*>(&address_home_street_address_status_)) + sizeof(address_home_premise_name_status_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&address_home_subpremise_name_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&birthdate_year_) -
        reinterpret_cast<char*>(&address_home_subpremise_name_status_)) + sizeof(birthdate_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillProfileSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deprecated_label = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deprecated_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string name_first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_first();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string name_middle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_middle();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string name_last = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_last();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string email_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_email_address();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string company_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_company_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_line1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_address_home_line1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_line2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_address_home_line2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_city = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_address_home_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_address_home_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_zip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_address_home_zip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_country = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_address_home_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string phone_home_whole_number = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_phone_home_whole_number();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string phone_fax_whole_number = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_phone_fax_whole_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string guid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string origin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_street_address = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_address_home_street_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_sorting_code = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_address_home_sorting_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_dependent_locality = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_address_home_dependent_locality();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_language_code = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_address_home_language_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string name_full = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_name_full();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 use_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_use_count(&_has_bits_);
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 use_date = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_use_date(&_has_bits_);
          use_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 validity_state_bitfield = 24 [deprecated = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_validity_state_bitfield(&_has_bits_);
          validity_state_bitfield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_client_validity_states_updated = 25 [deprecated = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_is_client_validity_states_updated(&_has_bits_);
          is_client_validity_states_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string name_honorific = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_name_honorific();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string name_last_first = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_name_last_first();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string name_last_conjunction = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_name_last_conjunction();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string name_last_second = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_name_last_second();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_honorific_status = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_honorific_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_honorific_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 30);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_first_status = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_first_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_first_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 31);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_middle_status = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_middle_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_middle_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 32);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_status = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_last_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_last_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 33);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_first_status = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_last_first_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(34, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_last_first_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 34);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_conjunction_status = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_last_conjunction_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(35, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_last_conjunction_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 35);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_second_status = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_last_second_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_last_second_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 36);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_status = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_full_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<296>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_full_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 37);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_thoroughfare_name = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_address_home_thoroughfare_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_thoroughfare_number = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_address_home_thoroughfare_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_dependent_thoroughfare_name = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_address_home_dependent_thoroughfare_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_premise_name = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_address_home_premise_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_subpremise_name = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_address_home_subpremise_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_city_status = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_city_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(43, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_state_status = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_state_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(44, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_zip_status = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_zip_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(45, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_country_status = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_country_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_street_address_status = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_street_address_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(47, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_sorting_code_status = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_sorting_code_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(48, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_locality_status = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_dependent_locality_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(49, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_language_code_status = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_language_code_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(50, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_name_status = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_thoroughfare_name_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_number_status = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_thoroughfare_number_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_thoroughfare_name_status = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_dependent_thoroughfare_name_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_premise_name_status = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_premise_name_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(54, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_subpremise_name_status = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_subpremise_name_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(55, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_apt_num = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_address_home_apt_num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_home_floor = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_address_home_floor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_apt_num_status = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_apt_num_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(58, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_floor_status = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_address_home_floor_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(59, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string name_full_with_honorific = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_name_full_with_honorific();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_with_honorific_status = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(val))) {
              _internal_add_name_full_with_honorific_status(static_cast<::sync_pb::AutofillProfileSpecifics_VerificationStatus>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(61, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<488>(ptr));
        } else if (static_cast<uint8_t>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_name_full_with_honorific_status(), ptr, ctx, ::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid, &_internal_metadata_, 61);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string profile_label = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_profile_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disallow_settings_visible_updates = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_disallow_settings_visible_updates(&_has_bits_);
          disallow_settings_visible_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 birthdate_day = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_birthdate_day(&_has_bits_);
          birthdate_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 birthdate_month = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_birthdate_month(&_has_bits_);
          birthdate_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 birthdate_year = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_birthdate_year(&_has_bits_);
          birthdate_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillProfileSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillProfileSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string deprecated_label = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deprecated_label(), target);
  }

  // repeated string name_first = 2;
  for (int i = 0, n = this->_internal_name_first_size(); i < n; i++) {
    const auto& s = this->_internal_name_first(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated string name_middle = 3;
  for (int i = 0, n = this->_internal_name_middle_size(); i < n; i++) {
    const auto& s = this->_internal_name_middle(i);
    target = stream->WriteString(3, s, target);
  }

  // repeated string name_last = 4;
  for (int i = 0, n = this->_internal_name_last_size(); i < n; i++) {
    const auto& s = this->_internal_name_last(i);
    target = stream->WriteString(4, s, target);
  }

  // repeated string email_address = 5;
  for (int i = 0, n = this->_internal_email_address_size(); i < n; i++) {
    const auto& s = this->_internal_email_address(i);
    target = stream->WriteString(5, s, target);
  }

  // optional string company_name = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_company_name(), target);
  }

  // optional string address_home_line1 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_address_home_line1(), target);
  }

  // optional string address_home_line2 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_address_home_line2(), target);
  }

  // optional string address_home_city = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_address_home_city(), target);
  }

  // optional string address_home_state = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_address_home_state(), target);
  }

  // optional string address_home_zip = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_address_home_zip(), target);
  }

  // optional string address_home_country = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_address_home_country(), target);
  }

  // repeated string phone_home_whole_number = 13;
  for (int i = 0, n = this->_internal_phone_home_whole_number_size(); i < n; i++) {
    const auto& s = this->_internal_phone_home_whole_number(i);
    target = stream->WriteString(13, s, target);
  }

  // optional string phone_fax_whole_number = 14 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_phone_fax_whole_number(), target);
  }

  // optional string guid = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_guid(), target);
  }

  // optional string origin = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_origin(), target);
  }

  // optional string address_home_street_address = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_address_home_street_address(), target);
  }

  // optional string address_home_sorting_code = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_address_home_sorting_code(), target);
  }

  // optional string address_home_dependent_locality = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_address_home_dependent_locality(), target);
  }

  // optional string address_home_language_code = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_address_home_language_code(), target);
  }

  // repeated string name_full = 21;
  for (int i = 0, n = this->_internal_name_full_size(); i < n; i++) {
    const auto& s = this->_internal_name_full(i);
    target = stream->WriteString(21, s, target);
  }

  // optional int64 use_count = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_use_count(), target);
  }

  // optional int64 use_date = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_use_date(), target);
  }

  // optional int64 validity_state_bitfield = 24 [deprecated = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_validity_state_bitfield(), target);
  }

  // optional bool is_client_validity_states_updated = 25 [deprecated = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_is_client_validity_states_updated(), target);
  }

  // repeated string name_honorific = 26;
  for (int i = 0, n = this->_internal_name_honorific_size(); i < n; i++) {
    const auto& s = this->_internal_name_honorific(i);
    target = stream->WriteString(26, s, target);
  }

  // repeated string name_last_first = 27;
  for (int i = 0, n = this->_internal_name_last_first_size(); i < n; i++) {
    const auto& s = this->_internal_name_last_first(i);
    target = stream->WriteString(27, s, target);
  }

  // repeated string name_last_conjunction = 28;
  for (int i = 0, n = this->_internal_name_last_conjunction_size(); i < n; i++) {
    const auto& s = this->_internal_name_last_conjunction(i);
    target = stream->WriteString(28, s, target);
  }

  // repeated string name_last_second = 29;
  for (int i = 0, n = this->_internal_name_last_second_size(); i < n; i++) {
    const auto& s = this->_internal_name_last_second(i);
    target = stream->WriteString(29, s, target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_honorific_status = 30;
  for (int i = 0, n = this->_internal_name_honorific_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        30, this->_internal_name_honorific_status(i), target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_first_status = 31;
  for (int i = 0, n = this->_internal_name_first_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        31, this->_internal_name_first_status(i), target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_middle_status = 32;
  for (int i = 0, n = this->_internal_name_middle_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        32, this->_internal_name_middle_status(i), target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_status = 33;
  for (int i = 0, n = this->_internal_name_last_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        33, this->_internal_name_last_status(i), target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_first_status = 34;
  for (int i = 0, n = this->_internal_name_last_first_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        34, this->_internal_name_last_first_status(i), target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_conjunction_status = 35;
  for (int i = 0, n = this->_internal_name_last_conjunction_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        35, this->_internal_name_last_conjunction_status(i), target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_second_status = 36;
  for (int i = 0, n = this->_internal_name_last_second_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        36, this->_internal_name_last_second_status(i), target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_status = 37;
  for (int i = 0, n = this->_internal_name_full_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        37, this->_internal_name_full_status(i), target);
  }

  // optional string address_home_thoroughfare_name = 38;
  if (cached_has_bits & 0x00008000u) {
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_address_home_thoroughfare_name(), target);
  }

  // optional string address_home_thoroughfare_number = 39;
  if (cached_has_bits & 0x00010000u) {
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_address_home_thoroughfare_number(), target);
  }

  // optional string address_home_dependent_thoroughfare_name = 40;
  if (cached_has_bits & 0x00020000u) {
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_address_home_dependent_thoroughfare_name(), target);
  }

  // optional string address_home_premise_name = 41;
  if (cached_has_bits & 0x00040000u) {
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_address_home_premise_name(), target);
  }

  // optional string address_home_subpremise_name = 42;
  if (cached_has_bits & 0x00080000u) {
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_address_home_subpremise_name(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_city_status = 43;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      43, this->_internal_address_home_city_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_state_status = 44;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      44, this->_internal_address_home_state_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_zip_status = 45;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      45, this->_internal_address_home_zip_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_country_status = 46;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      46, this->_internal_address_home_country_status(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_street_address_status = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      47, this->_internal_address_home_street_address_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_sorting_code_status = 48;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      48, this->_internal_address_home_sorting_code_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_locality_status = 49;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      49, this->_internal_address_home_dependent_locality_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_language_code_status = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      50, this->_internal_address_home_language_code_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_name_status = 51;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      51, this->_internal_address_home_thoroughfare_name_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_number_status = 52;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      52, this->_internal_address_home_thoroughfare_number_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_thoroughfare_name_status = 53;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      53, this->_internal_address_home_dependent_thoroughfare_name_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_premise_name_status = 54;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      54, this->_internal_address_home_premise_name_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_subpremise_name_status = 55;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      55, this->_internal_address_home_subpremise_name_status(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string address_home_apt_num = 56;
  if (cached_has_bits & 0x00100000u) {
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_address_home_apt_num(), target);
  }

  // optional string address_home_floor = 57;
  if (cached_has_bits & 0x00200000u) {
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_address_home_floor(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_apt_num_status = 58;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      58, this->_internal_address_home_apt_num_status(), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_floor_status = 59;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      59, this->_internal_address_home_floor_status(), target);
  }

  // repeated string name_full_with_honorific = 60;
  for (int i = 0, n = this->_internal_name_full_with_honorific_size(); i < n; i++) {
    const auto& s = this->_internal_name_full_with_honorific(i);
    target = stream->WriteString(60, s, target);
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_with_honorific_status = 61;
  for (int i = 0, n = this->_internal_name_full_with_honorific_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        61, this->_internal_name_full_with_honorific_status(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string profile_label = 62;
  if (cached_has_bits & 0x00400000u) {
    target = stream->WriteStringMaybeAliased(
        62, this->_internal_profile_label(), target);
  }

  // optional bool disallow_settings_visible_updates = 63;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(63, this->_internal_disallow_settings_visible_updates(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 birthdate_day = 64;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(64, this->_internal_birthdate_day(), target);
  }

  // optional int32 birthdate_month = 65;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(65, this->_internal_birthdate_month(), target);
  }

  // optional int32 birthdate_year = 66;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(66, this->_internal_birthdate_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillProfileSpecifics)
  return target;
}

size_t AutofillProfileSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillProfileSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_first = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_first_.size());
  for (int i = 0, n = name_first_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_first_.Get(i));
  }

  // repeated string name_middle = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_middle_.size());
  for (int i = 0, n = name_middle_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_middle_.Get(i));
  }

  // repeated string name_last = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_last_.size());
  for (int i = 0, n = name_last_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_last_.Get(i));
  }

  // repeated string email_address = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(email_address_.size());
  for (int i = 0, n = email_address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      email_address_.Get(i));
  }

  // repeated string phone_home_whole_number = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(phone_home_whole_number_.size());
  for (int i = 0, n = phone_home_whole_number_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      phone_home_whole_number_.Get(i));
  }

  // repeated string name_full = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_full_.size());
  for (int i = 0, n = name_full_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_full_.Get(i));
  }

  // repeated string name_honorific = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_honorific_.size());
  for (int i = 0, n = name_honorific_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_honorific_.Get(i));
  }

  // repeated string name_last_first = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_last_first_.size());
  for (int i = 0, n = name_last_first_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_last_first_.Get(i));
  }

  // repeated string name_last_conjunction = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_last_conjunction_.size());
  for (int i = 0, n = name_last_conjunction_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_last_conjunction_.Get(i));
  }

  // repeated string name_last_second = 29;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_last_second_.size());
  for (int i = 0, n = name_last_second_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_last_second_.Get(i));
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_honorific_status = 30;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_honorific_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_honorific_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_first_status = 31;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_first_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_first_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_middle_status = 32;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_middle_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_middle_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_status = 33;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_last_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_last_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_first_status = 34;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_last_first_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_last_first_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_conjunction_status = 35;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_last_conjunction_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_last_conjunction_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_second_status = 36;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_last_second_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_last_second_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_status = 37;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_full_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_full_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string name_full_with_honorific = 60;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_full_with_honorific_.size());
  for (int i = 0, n = name_full_with_honorific_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_full_with_honorific_.Get(i));
  }

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_with_honorific_status = 61;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_name_full_with_honorific_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_name_full_with_honorific_status(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string deprecated_label = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_label());
    }

    // optional string company_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_company_name());
    }

    // optional string address_home_line1 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_line1());
    }

    // optional string address_home_line2 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_line2());
    }

    // optional string address_home_city = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_city());
    }

    // optional string address_home_state = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_state());
    }

    // optional string address_home_zip = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_zip());
    }

    // optional string address_home_country = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_country());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string phone_fax_whole_number = 14 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phone_fax_whole_number());
    }

    // optional string guid = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional string origin = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional string address_home_street_address = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_street_address());
    }

    // optional string address_home_sorting_code = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_sorting_code());
    }

    // optional string address_home_dependent_locality = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_dependent_locality());
    }

    // optional string address_home_language_code = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_language_code());
    }

    // optional string address_home_thoroughfare_name = 38;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_thoroughfare_name());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string address_home_thoroughfare_number = 39;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_thoroughfare_number());
    }

    // optional string address_home_dependent_thoroughfare_name = 40;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_dependent_thoroughfare_name());
    }

    // optional string address_home_premise_name = 41;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_premise_name());
    }

    // optional string address_home_subpremise_name = 42;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_subpremise_name());
    }

    // optional string address_home_apt_num = 56;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_apt_num());
    }

    // optional string address_home_floor = 57;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_home_floor());
    }

    // optional string profile_label = 62;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_label());
    }

    // optional int64 use_count = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_use_count());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int64 use_date = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_use_date());
    }

    // optional int64 validity_state_bitfield = 24 [deprecated = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_validity_state_bitfield());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_city_status = 43;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_city_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_state_status = 44;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_state_status());
    }

    // optional bool disallow_settings_visible_updates = 63;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_client_validity_states_updated = 25 [deprecated = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_zip_status = 45;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_zip_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_country_status = 46;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_country_status());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_street_address_status = 47;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_street_address_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_sorting_code_status = 48;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_sorting_code_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_locality_status = 49;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_dependent_locality_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_language_code_status = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_language_code_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_name_status = 51;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_thoroughfare_name_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_number_status = 52;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_thoroughfare_number_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_thoroughfare_name_status = 53;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_dependent_thoroughfare_name_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_premise_name_status = 54;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_premise_name_status());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_subpremise_name_status = 55;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_subpremise_name_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_apt_num_status = 58;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_apt_num_status());
    }

    // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_floor_status = 59;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_address_home_floor_status());
    }

    // optional int32 birthdate_day = 64;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_birthdate_day());
    }

    // optional int32 birthdate_month = 65;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_birthdate_month());
    }

    // optional int32 birthdate_year = 66;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_birthdate_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillProfileSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillProfileSpecifics*>(
      &from));
}

void AutofillProfileSpecifics::MergeFrom(const AutofillProfileSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillProfileSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  name_first_.MergeFrom(from.name_first_);
  name_middle_.MergeFrom(from.name_middle_);
  name_last_.MergeFrom(from.name_last_);
  email_address_.MergeFrom(from.email_address_);
  phone_home_whole_number_.MergeFrom(from.phone_home_whole_number_);
  name_full_.MergeFrom(from.name_full_);
  name_honorific_.MergeFrom(from.name_honorific_);
  name_last_first_.MergeFrom(from.name_last_first_);
  name_last_conjunction_.MergeFrom(from.name_last_conjunction_);
  name_last_second_.MergeFrom(from.name_last_second_);
  name_honorific_status_.MergeFrom(from.name_honorific_status_);
  name_first_status_.MergeFrom(from.name_first_status_);
  name_middle_status_.MergeFrom(from.name_middle_status_);
  name_last_status_.MergeFrom(from.name_last_status_);
  name_last_first_status_.MergeFrom(from.name_last_first_status_);
  name_last_conjunction_status_.MergeFrom(from.name_last_conjunction_status_);
  name_last_second_status_.MergeFrom(from.name_last_second_status_);
  name_full_status_.MergeFrom(from.name_full_status_);
  name_full_with_honorific_.MergeFrom(from.name_full_with_honorific_);
  name_full_with_honorific_status_.MergeFrom(from.name_full_with_honorific_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deprecated_label(from._internal_deprecated_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_company_name(from._internal_company_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_address_home_line1(from._internal_address_home_line1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_address_home_line2(from._internal_address_home_line2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_address_home_city(from._internal_address_home_city());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_address_home_state(from._internal_address_home_state());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_address_home_zip(from._internal_address_home_zip());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_address_home_country(from._internal_address_home_country());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_phone_fax_whole_number(from._internal_phone_fax_whole_number());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_address_home_street_address(from._internal_address_home_street_address());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_address_home_sorting_code(from._internal_address_home_sorting_code());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_address_home_dependent_locality(from._internal_address_home_dependent_locality());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_address_home_language_code(from._internal_address_home_language_code());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_address_home_thoroughfare_name(from._internal_address_home_thoroughfare_name());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_address_home_thoroughfare_number(from._internal_address_home_thoroughfare_number());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_address_home_dependent_thoroughfare_name(from._internal_address_home_dependent_thoroughfare_name());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_address_home_premise_name(from._internal_address_home_premise_name());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_address_home_subpremise_name(from._internal_address_home_subpremise_name());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_address_home_apt_num(from._internal_address_home_apt_num());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_address_home_floor(from._internal_address_home_floor());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_profile_label(from._internal_profile_label());
    }
    if (cached_has_bits & 0x00800000u) {
      use_count_ = from.use_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      use_date_ = from.use_date_;
    }
    if (cached_has_bits & 0x02000000u) {
      validity_state_bitfield_ = from.validity_state_bitfield_;
    }
    if (cached_has_bits & 0x04000000u) {
      address_home_city_status_ = from.address_home_city_status_;
    }
    if (cached_has_bits & 0x08000000u) {
      address_home_state_status_ = from.address_home_state_status_;
    }
    if (cached_has_bits & 0x10000000u) {
      disallow_settings_visible_updates_ = from.disallow_settings_visible_updates_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_client_validity_states_updated_ = from.is_client_validity_states_updated_;
    }
    if (cached_has_bits & 0x40000000u) {
      address_home_zip_status_ = from.address_home_zip_status_;
    }
    if (cached_has_bits & 0x80000000u) {
      address_home_country_status_ = from.address_home_country_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      address_home_street_address_status_ = from.address_home_street_address_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      address_home_sorting_code_status_ = from.address_home_sorting_code_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      address_home_dependent_locality_status_ = from.address_home_dependent_locality_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      address_home_language_code_status_ = from.address_home_language_code_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      address_home_thoroughfare_name_status_ = from.address_home_thoroughfare_name_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      address_home_thoroughfare_number_status_ = from.address_home_thoroughfare_number_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      address_home_dependent_thoroughfare_name_status_ = from.address_home_dependent_thoroughfare_name_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      address_home_premise_name_status_ = from.address_home_premise_name_status_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      address_home_subpremise_name_status_ = from.address_home_subpremise_name_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      address_home_apt_num_status_ = from.address_home_apt_num_status_;
    }
    if (cached_has_bits & 0x00000400u) {
      address_home_floor_status_ = from.address_home_floor_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      birthdate_day_ = from.birthdate_day_;
    }
    if (cached_has_bits & 0x00001000u) {
      birthdate_month_ = from.birthdate_month_;
    }
    if (cached_has_bits & 0x00002000u) {
      birthdate_year_ = from.birthdate_year_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillProfileSpecifics::CopyFrom(const AutofillProfileSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillProfileSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillProfileSpecifics::IsInitialized() const {
  return true;
}

void AutofillProfileSpecifics::InternalSwap(AutofillProfileSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  name_first_.InternalSwap(&other->name_first_);
  name_middle_.InternalSwap(&other->name_middle_);
  name_last_.InternalSwap(&other->name_last_);
  email_address_.InternalSwap(&other->email_address_);
  phone_home_whole_number_.InternalSwap(&other->phone_home_whole_number_);
  name_full_.InternalSwap(&other->name_full_);
  name_honorific_.InternalSwap(&other->name_honorific_);
  name_last_first_.InternalSwap(&other->name_last_first_);
  name_last_conjunction_.InternalSwap(&other->name_last_conjunction_);
  name_last_second_.InternalSwap(&other->name_last_second_);
  name_honorific_status_.InternalSwap(&other->name_honorific_status_);
  name_first_status_.InternalSwap(&other->name_first_status_);
  name_middle_status_.InternalSwap(&other->name_middle_status_);
  name_last_status_.InternalSwap(&other->name_last_status_);
  name_last_first_status_.InternalSwap(&other->name_last_first_status_);
  name_last_conjunction_status_.InternalSwap(&other->name_last_conjunction_status_);
  name_last_second_status_.InternalSwap(&other->name_last_second_status_);
  name_full_status_.InternalSwap(&other->name_full_status_);
  name_full_with_honorific_.InternalSwap(&other->name_full_with_honorific_);
  name_full_with_honorific_status_.InternalSwap(&other->name_full_with_honorific_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &deprecated_label_, lhs_arena,
      &other->deprecated_label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &company_name_, lhs_arena,
      &other->company_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_line1_, lhs_arena,
      &other->address_home_line1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_line2_, lhs_arena,
      &other->address_home_line2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_city_, lhs_arena,
      &other->address_home_city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_state_, lhs_arena,
      &other->address_home_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_zip_, lhs_arena,
      &other->address_home_zip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_country_, lhs_arena,
      &other->address_home_country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &phone_fax_whole_number_, lhs_arena,
      &other->phone_fax_whole_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_street_address_, lhs_arena,
      &other->address_home_street_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_sorting_code_, lhs_arena,
      &other->address_home_sorting_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_dependent_locality_, lhs_arena,
      &other->address_home_dependent_locality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_language_code_, lhs_arena,
      &other->address_home_language_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_thoroughfare_name_, lhs_arena,
      &other->address_home_thoroughfare_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_thoroughfare_number_, lhs_arena,
      &other->address_home_thoroughfare_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_dependent_thoroughfare_name_, lhs_arena,
      &other->address_home_dependent_thoroughfare_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_premise_name_, lhs_arena,
      &other->address_home_premise_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_subpremise_name_, lhs_arena,
      &other->address_home_subpremise_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_apt_num_, lhs_arena,
      &other->address_home_apt_num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_home_floor_, lhs_arena,
      &other->address_home_floor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &profile_label_, lhs_arena,
      &other->profile_label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillProfileSpecifics, birthdate_year_)
      + sizeof(AutofillProfileSpecifics::birthdate_year_)
      - PROTOBUF_FIELD_OFFSET(AutofillProfileSpecifics, use_count_)>(
          reinterpret_cast<char*>(&use_count_),
          reinterpret_cast<char*>(&other->use_count_));
}

std::string AutofillProfileSpecifics::GetTypeName() const {
  return "sync_pb.AutofillProfileSpecifics";
}


// ===================================================================

class AutofillSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillSpecifics>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::AutofillProfileSpecifics& profile(const AutofillSpecifics* msg);
  static void set_has_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::AutofillProfileSpecifics&
AutofillSpecifics::_Internal::profile(const AutofillSpecifics* msg) {
  return *msg->profile_;
}
AutofillSpecifics::AutofillSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  usage_timestamp_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillSpecifics)
}
AutofillSpecifics::AutofillSpecifics(const AutofillSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      usage_timestamp_(from.usage_timestamp_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_profile()) {
    profile_ = new ::sync_pb::AutofillProfileSpecifics(*from.profile_);
  } else {
    profile_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillSpecifics)
}

inline void AutofillSpecifics::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
profile_ = nullptr;
}

AutofillSpecifics::~AutofillSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  value_.Destroy();
  if (this != internal_default_instance()) delete profile_;
}

void AutofillSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usage_timestamp_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(profile_ != nullptr);
      profile_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 usage_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_usage_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_usage_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // repeated int64 usage_timestamp = 3;
  for (int i = 0, n = this->_internal_usage_timestamp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_usage_timestamp(i), target);
  }

  // optional .sync_pb.AutofillProfileSpecifics profile = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::profile(this),
        _Internal::profile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillSpecifics)
  return target;
}

size_t AutofillSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 usage_timestamp = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->usage_timestamp_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_usage_timestamp_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional .sync_pb.AutofillProfileSpecifics profile = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillSpecifics*>(
      &from));
}

void AutofillSpecifics::MergeFrom(const AutofillSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  usage_timestamp_.MergeFrom(from.usage_timestamp_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from._internal_profile());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillSpecifics::CopyFrom(const AutofillSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillSpecifics::IsInitialized() const {
  return true;
}

void AutofillSpecifics::InternalSwap(AutofillSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  usage_timestamp_.InternalSwap(&other->usage_timestamp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(profile_, other->profile_);
}

std::string AutofillSpecifics::GetTypeName() const {
  return "sync_pb.AutofillSpecifics";
}


// ===================================================================

class CloudTokenData::_Internal {
 public:
  using HasBits = decltype(std::declval<CloudTokenData>()._has_bits_);
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exp_month(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_exp_year(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_art_fife_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_instrument_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CloudTokenData::CloudTokenData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.CloudTokenData)
}
CloudTokenData::CloudTokenData(const CloudTokenData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suffix()) {
    suffix_.Set(from._internal_suffix(), 
      GetArenaForAllocation());
  }
  art_fife_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    art_fife_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_art_fife_url()) {
    art_fife_url_.Set(from._internal_art_fife_url(), 
      GetArenaForAllocation());
  }
  instrument_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instrument_token()) {
    instrument_token_.Set(from._internal_instrument_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&exp_month_, &from.exp_month_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_year_) -
    reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.CloudTokenData)
}

inline void CloudTokenData::SharedCtor() {
suffix_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  suffix_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
art_fife_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  art_fife_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exp_month_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exp_year_) -
    reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
}

CloudTokenData::~CloudTokenData() {
  // @@protoc_insertion_point(destructor:sync_pb.CloudTokenData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloudTokenData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  suffix_.Destroy();
  art_fife_url_.Destroy();
  instrument_token_.Destroy();
}

void CloudTokenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloudTokenData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CloudTokenData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      art_fife_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      instrument_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&exp_month_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_year_) -
        reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CloudTokenData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string suffix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_suffix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 exp_month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_exp_month(&has_bits);
          exp_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 exp_year = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_exp_year(&has_bits);
          exp_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string art_fife_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_art_fife_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instrument_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_instrument_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloudTokenData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.CloudTokenData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string suffix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_suffix(), target);
  }

  // optional int32 exp_month = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_exp_month(), target);
  }

  // optional int32 exp_year = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_exp_year(), target);
  }

  // optional string art_fife_url = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_art_fife_url(), target);
  }

  // optional string instrument_token = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_instrument_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.CloudTokenData)
  return target;
}

size_t CloudTokenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CloudTokenData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string suffix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suffix());
    }

    // optional string art_fife_url = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_art_fife_url());
    }

    // optional string instrument_token = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instrument_token());
    }

    // optional int32 exp_month = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp_month());
    }

    // optional int32 exp_year = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudTokenData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CloudTokenData*>(
      &from));
}

void CloudTokenData::MergeFrom(const CloudTokenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CloudTokenData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_suffix(from._internal_suffix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_art_fife_url(from._internal_art_fife_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_instrument_token(from._internal_instrument_token());
    }
    if (cached_has_bits & 0x00000008u) {
      exp_month_ = from.exp_month_;
    }
    if (cached_has_bits & 0x00000010u) {
      exp_year_ = from.exp_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CloudTokenData::CopyFrom(const CloudTokenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CloudTokenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudTokenData::IsInitialized() const {
  return true;
}

void CloudTokenData::InternalSwap(CloudTokenData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &suffix_, lhs_arena,
      &other->suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &art_fife_url_, lhs_arena,
      &other->art_fife_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instrument_token_, lhs_arena,
      &other->instrument_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloudTokenData, exp_year_)
      + sizeof(CloudTokenData::exp_year_)
      - PROTOBUF_FIELD_OFFSET(CloudTokenData, exp_month_)>(
          reinterpret_cast<char*>(&exp_month_),
          reinterpret_cast<char*>(&other->exp_month_));
}

std::string CloudTokenData::GetTypeName() const {
  return "sync_pb.CloudTokenData";
}


// ===================================================================

class CardIssuer::_Internal {
 public:
  using HasBits = decltype(std::declval<CardIssuer>()._has_bits_);
  static void set_has_issuer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CardIssuer::CardIssuer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.CardIssuer)
}
CardIssuer::CardIssuer(const CardIssuer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  issuer_ = from.issuer_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.CardIssuer)
}

inline void CardIssuer::SharedCtor() {
issuer_ = 0;
}

CardIssuer::~CardIssuer() {
  // @@protoc_insertion_point(destructor:sync_pb.CardIssuer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CardIssuer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CardIssuer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CardIssuer::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CardIssuer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  issuer_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CardIssuer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.CardIssuer.Issuer issuer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::CardIssuer_Issuer_IsValid(val))) {
            _internal_set_issuer(static_cast<::sync_pb::CardIssuer_Issuer>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CardIssuer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.CardIssuer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.CardIssuer.Issuer issuer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_issuer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.CardIssuer)
  return target;
}

size_t CardIssuer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CardIssuer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.CardIssuer.Issuer issuer = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_issuer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardIssuer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CardIssuer*>(
      &from));
}

void CardIssuer::MergeFrom(const CardIssuer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CardIssuer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_issuer()) {
    _internal_set_issuer(from._internal_issuer());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CardIssuer::CopyFrom(const CardIssuer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CardIssuer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardIssuer::IsInitialized() const {
  return true;
}

void CardIssuer::InternalSwap(CardIssuer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(issuer_, other->issuer_);
}

std::string CardIssuer::GetTypeName() const {
  return "sync_pb.CardIssuer";
}


// ===================================================================

class WalletMaskedCreditCard::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletMaskedCreditCard>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_name_on_card(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_last_four(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exp_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_exp_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_billing_address_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bank_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::CloudTokenData& cloud_token_data(const WalletMaskedCreditCard* msg);
  static void set_has_cloud_token_data(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::CardIssuer& card_issuer(const WalletMaskedCreditCard* msg);
  static void set_has_card_issuer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_virtual_card_enrollment_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_card_art_url(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_product_description(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::sync_pb::CloudTokenData&
WalletMaskedCreditCard::_Internal::cloud_token_data(const WalletMaskedCreditCard* msg) {
  return *msg->cloud_token_data_;
}
const ::sync_pb::CardIssuer&
WalletMaskedCreditCard::_Internal::card_issuer(const WalletMaskedCreditCard* msg) {
  return *msg->card_issuer_;
}
WalletMaskedCreditCard::WalletMaskedCreditCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WalletMaskedCreditCard)
}
WalletMaskedCreditCard::WalletMaskedCreditCard(const WalletMaskedCreditCard& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  name_on_card_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_on_card_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_on_card()) {
    name_on_card_.Set(from._internal_name_on_card(), 
      GetArenaForAllocation());
  }
  last_four_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_four_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_four()) {
    last_four_.Set(from._internal_last_four(), 
      GetArenaForAllocation());
  }
  billing_address_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    billing_address_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_billing_address_id()) {
    billing_address_id_.Set(from._internal_billing_address_id(), 
      GetArenaForAllocation());
  }
  bank_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bank_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bank_name()) {
    bank_name_.Set(from._internal_bank_name(), 
      GetArenaForAllocation());
  }
  nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    nickname_.Set(from._internal_nickname(), 
      GetArenaForAllocation());
  }
  card_art_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    card_art_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_card_art_url()) {
    card_art_url_.Set(from._internal_card_art_url(), 
      GetArenaForAllocation());
  }
  product_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product_description()) {
    product_description_.Set(from._internal_product_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cloud_token_data()) {
    cloud_token_data_ = new ::sync_pb::CloudTokenData(*from.cloud_token_data_);
  } else {
    cloud_token_data_ = nullptr;
  }
  if (from._internal_has_card_issuer()) {
    card_issuer_ = new ::sync_pb::CardIssuer(*from.card_issuer_);
  } else {
    card_issuer_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_card_enrollment_state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(virtual_card_enrollment_state_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletMaskedCreditCard)
}

inline void WalletMaskedCreditCard::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_on_card_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_on_card_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_four_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_four_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
billing_address_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  billing_address_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bank_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bank_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nickname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
card_art_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  card_art_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
product_description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cloud_token_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&virtual_card_enrollment_state_) -
    reinterpret_cast<char*>(&cloud_token_data_)) + sizeof(virtual_card_enrollment_state_));
}

WalletMaskedCreditCard::~WalletMaskedCreditCard() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletMaskedCreditCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletMaskedCreditCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  name_on_card_.Destroy();
  last_four_.Destroy();
  billing_address_id_.Destroy();
  bank_name_.Destroy();
  nickname_.Destroy();
  card_art_url_.Destroy();
  product_description_.Destroy();
  if (this != internal_default_instance()) delete cloud_token_data_;
  if (this != internal_default_instance()) delete card_issuer_;
}

void WalletMaskedCreditCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WalletMaskedCreditCard::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletMaskedCreditCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_on_card_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      last_four_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      billing_address_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      bank_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      card_art_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      product_description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(cloud_token_data_ != nullptr);
      cloud_token_data_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(card_issuer_ != nullptr);
      card_issuer_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_card_enrollment_state_) -
        reinterpret_cast<char*>(&status_)) + sizeof(virtual_card_enrollment_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WalletMaskedCreditCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WalletMaskedCreditCard_WalletCardStatus_IsValid(val))) {
            _internal_set_status(static_cast<::sync_pb::WalletMaskedCreditCard_WalletCardStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string name_on_card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name_on_card();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WalletMaskedCreditCard_WalletCardType_IsValid(val))) {
            _internal_set_type(static_cast<::sync_pb::WalletMaskedCreditCard_WalletCardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string last_four = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_last_four();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 exp_month = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_exp_month(&has_bits);
          exp_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 exp_year = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_exp_year(&has_bits);
          exp_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string billing_address_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_billing_address_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bank_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_bank_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.CloudTokenData cloud_token_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud_token_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.CardIssuer card_issuer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_card_issuer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 instrument_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_instrument_id(&has_bits);
          instrument_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentState virtual_card_enrollment_state = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState_IsValid(val))) {
            _internal_set_virtual_card_enrollment_state(static_cast<::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string card_art_url = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_card_art_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string product_description = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_product_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletMaskedCreditCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WalletMaskedCreditCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // optional string name_on_card = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name_on_card(), target);
  }

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional string last_four = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_last_four(), target);
  }

  // optional int32 exp_month = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_exp_month(), target);
  }

  // optional int32 exp_year = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_exp_year(), target);
  }

  // optional string billing_address_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_billing_address_id(), target);
  }

  // optional string bank_name = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_bank_name(), target);
  }

  // optional .sync_pb.CloudTokenData cloud_token_data = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::cloud_token_data(this),
        _Internal::cloud_token_data(this).GetCachedSize(), target, stream);
  }

  // optional string nickname = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_nickname(), target);
  }

  // optional .sync_pb.CardIssuer card_issuer = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::card_issuer(this),
        _Internal::card_issuer(this).GetCachedSize(), target, stream);
  }

  // optional int64 instrument_id = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_instrument_id(), target);
  }

  // optional .sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentState virtual_card_enrollment_state = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_virtual_card_enrollment_state(), target);
  }

  // optional string card_art_url = 17;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_card_art_url(), target);
  }

  // optional string product_description = 18;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_product_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WalletMaskedCreditCard)
  return target;
}

size_t WalletMaskedCreditCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletMaskedCreditCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name_on_card = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_on_card());
    }

    // optional string last_four = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_four());
    }

    // optional string billing_address_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_billing_address_id());
    }

    // optional string bank_name = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bank_name());
    }

    // optional string nickname = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional string card_art_url = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_card_art_url());
    }

    // optional string product_description = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product_description());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .sync_pb.CloudTokenData cloud_token_data = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloud_token_data_);
    }

    // optional .sync_pb.CardIssuer card_issuer = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *card_issuer_);
    }

    // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 exp_month = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp_month());
    }

    // optional int32 exp_year = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp_year());
    }

    // optional int64 instrument_id = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_instrument_id());
    }

    // optional .sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentState virtual_card_enrollment_state = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_virtual_card_enrollment_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletMaskedCreditCard::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WalletMaskedCreditCard*>(
      &from));
}

void WalletMaskedCreditCard::MergeFrom(const WalletMaskedCreditCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletMaskedCreditCard)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name_on_card(from._internal_name_on_card());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_last_four(from._internal_last_four());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_billing_address_id(from._internal_billing_address_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_bank_name(from._internal_bank_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_card_art_url(from._internal_card_art_url());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_product_description(from._internal_product_description());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_cloud_token_data()->::sync_pb::CloudTokenData::MergeFrom(from._internal_cloud_token_data());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_card_issuer()->::sync_pb::CardIssuer::MergeFrom(from._internal_card_issuer());
    }
    if (cached_has_bits & 0x00000400u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      exp_month_ = from.exp_month_;
    }
    if (cached_has_bits & 0x00002000u) {
      exp_year_ = from.exp_year_;
    }
    if (cached_has_bits & 0x00004000u) {
      instrument_id_ = from.instrument_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      virtual_card_enrollment_state_ = from.virtual_card_enrollment_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WalletMaskedCreditCard::CopyFrom(const WalletMaskedCreditCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletMaskedCreditCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletMaskedCreditCard::IsInitialized() const {
  return true;
}

void WalletMaskedCreditCard::InternalSwap(WalletMaskedCreditCard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_on_card_, lhs_arena,
      &other->name_on_card_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_four_, lhs_arena,
      &other->last_four_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &billing_address_id_, lhs_arena,
      &other->billing_address_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bank_name_, lhs_arena,
      &other->bank_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &card_art_url_, lhs_arena,
      &other->card_art_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &product_description_, lhs_arena,
      &other->product_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WalletMaskedCreditCard, virtual_card_enrollment_state_)
      + sizeof(WalletMaskedCreditCard::virtual_card_enrollment_state_)
      - PROTOBUF_FIELD_OFFSET(WalletMaskedCreditCard, cloud_token_data_)>(
          reinterpret_cast<char*>(&cloud_token_data_),
          reinterpret_cast<char*>(&other->cloud_token_data_));
}

std::string WalletMaskedCreditCard::GetTypeName() const {
  return "sync_pb.WalletMaskedCreditCard";
}


// ===================================================================

class WalletPostalAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletPostalAddress>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recipient_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_company_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_address_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_address_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_address_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_postal_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sorting_code(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_phone_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

WalletPostalAddress::WalletPostalAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  street_address_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WalletPostalAddress)
}
WalletPostalAddress::WalletPostalAddress(const WalletPostalAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      street_address_(from.street_address_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  company_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_company_name()) {
    company_name_.Set(from._internal_company_name(), 
      GetArenaForAllocation());
  }
  address_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_1()) {
    address_1_.Set(from._internal_address_1(), 
      GetArenaForAllocation());
  }
  address_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_2()) {
    address_2_.Set(from._internal_address_2(), 
      GetArenaForAllocation());
  }
  address_3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_3()) {
    address_3_.Set(from._internal_address_3(), 
      GetArenaForAllocation());
  }
  address_4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_4()) {
    address_4_.Set(from._internal_address_4(), 
      GetArenaForAllocation());
  }
  postal_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    postal_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_postal_code()) {
    postal_code_.Set(from._internal_postal_code(), 
      GetArenaForAllocation());
  }
  sorting_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sorting_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sorting_code()) {
    sorting_code_.Set(from._internal_sorting_code(), 
      GetArenaForAllocation());
  }
  country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    country_code_.Set(from._internal_country_code(), 
      GetArenaForAllocation());
  }
  language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language_code()) {
    language_code_.Set(from._internal_language_code(), 
      GetArenaForAllocation());
  }
  recipient_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recipient_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recipient_name()) {
    recipient_name_.Set(from._internal_recipient_name(), 
      GetArenaForAllocation());
  }
  phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phone_number()) {
    phone_number_.Set(from._internal_phone_number(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletPostalAddress)
}

inline void WalletPostalAddress::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
company_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_3_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_3_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_4_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_4_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
postal_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  postal_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sorting_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sorting_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
recipient_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recipient_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
phone_number_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  phone_number_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WalletPostalAddress::~WalletPostalAddress() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletPostalAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletPostalAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  company_name_.Destroy();
  address_1_.Destroy();
  address_2_.Destroy();
  address_3_.Destroy();
  address_4_.Destroy();
  postal_code_.Destroy();
  sorting_code_.Destroy();
  country_code_.Destroy();
  language_code_.Destroy();
  recipient_name_.Destroy();
  phone_number_.Destroy();
}

void WalletPostalAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WalletPostalAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletPostalAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  street_address_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      company_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      address_1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      address_2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      address_3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      address_4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      postal_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      sorting_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      language_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      recipient_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      phone_number_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WalletPostalAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string company_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_company_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string street_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_street_address();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string address_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_address_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_address_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_address_3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_address_4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string postal_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_postal_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sorting_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sorting_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_language_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string recipient_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_recipient_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string phone_number = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletPostalAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WalletPostalAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string company_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company_name(), target);
  }

  // repeated string street_address = 3;
  for (int i = 0, n = this->_internal_street_address_size(); i < n; i++) {
    const auto& s = this->_internal_street_address(i);
    target = stream->WriteString(3, s, target);
  }

  // optional string address_1 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address_1(), target);
  }

  // optional string address_2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_address_2(), target);
  }

  // optional string address_3 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_address_3(), target);
  }

  // optional string address_4 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_address_4(), target);
  }

  // optional string postal_code = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_postal_code(), target);
  }

  // optional string sorting_code = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sorting_code(), target);
  }

  // optional string country_code = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_country_code(), target);
  }

  // optional string language_code = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_language_code(), target);
  }

  // optional string recipient_name = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_recipient_name(), target);
  }

  // optional string phone_number = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_phone_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WalletPostalAddress)
  return target;
}

size_t WalletPostalAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletPostalAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string street_address = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(street_address_.size());
  for (int i = 0, n = street_address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      street_address_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string company_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_company_name());
    }

    // optional string address_1 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_1());
    }

    // optional string address_2 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_2());
    }

    // optional string address_3 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_3());
    }

    // optional string address_4 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_4());
    }

    // optional string postal_code = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_postal_code());
    }

    // optional string sorting_code = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sorting_code());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string country_code = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string language_code = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_code());
    }

    // optional string recipient_name = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recipient_name());
    }

    // optional string phone_number = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phone_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletPostalAddress::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WalletPostalAddress*>(
      &from));
}

void WalletPostalAddress::MergeFrom(const WalletPostalAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletPostalAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  street_address_.MergeFrom(from.street_address_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_company_name(from._internal_company_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_address_1(from._internal_address_1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_address_2(from._internal_address_2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_address_3(from._internal_address_3());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_address_4(from._internal_address_4());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_postal_code(from._internal_postal_code());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_sorting_code(from._internal_sorting_code());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_language_code(from._internal_language_code());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_recipient_name(from._internal_recipient_name());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_phone_number(from._internal_phone_number());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WalletPostalAddress::CopyFrom(const WalletPostalAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletPostalAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletPostalAddress::IsInitialized() const {
  return true;
}

void WalletPostalAddress::InternalSwap(WalletPostalAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  street_address_.InternalSwap(&other->street_address_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &company_name_, lhs_arena,
      &other->company_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_1_, lhs_arena,
      &other->address_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_2_, lhs_arena,
      &other->address_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_3_, lhs_arena,
      &other->address_3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_4_, lhs_arena,
      &other->address_4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &postal_code_, lhs_arena,
      &other->postal_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sorting_code_, lhs_arena,
      &other->sorting_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &language_code_, lhs_arena,
      &other->language_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &recipient_name_, lhs_arena,
      &other->recipient_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &phone_number_, lhs_arena,
      &other->phone_number_, rhs_arena
  );
}

std::string WalletPostalAddress::GetTypeName() const {
  return "sync_pb.WalletPostalAddress";
}


// ===================================================================

class PaymentsCustomerData::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentsCustomerData>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PaymentsCustomerData::PaymentsCustomerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.PaymentsCustomerData)
}
PaymentsCustomerData::PaymentsCustomerData(const PaymentsCustomerData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.PaymentsCustomerData)
}

inline void PaymentsCustomerData::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaymentsCustomerData::~PaymentsCustomerData() {
  // @@protoc_insertion_point(destructor:sync_pb.PaymentsCustomerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentsCustomerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void PaymentsCustomerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaymentsCustomerData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.PaymentsCustomerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PaymentsCustomerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentsCustomerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.PaymentsCustomerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.PaymentsCustomerData)
  return target;
}

size_t PaymentsCustomerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.PaymentsCustomerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentsCustomerData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PaymentsCustomerData*>(
      &from));
}

void PaymentsCustomerData::MergeFrom(const PaymentsCustomerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PaymentsCustomerData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PaymentsCustomerData::CopyFrom(const PaymentsCustomerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PaymentsCustomerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentsCustomerData::IsInitialized() const {
  return true;
}

void PaymentsCustomerData::InternalSwap(PaymentsCustomerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

std::string PaymentsCustomerData::GetTypeName() const {
  return "sync_pb.PaymentsCustomerData";
}


// ===================================================================

class WalletCreditCardCloudTokenData::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletCreditCardCloudTokenData>()._has_bits_);
  static void set_has_masked_card_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp_month(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_exp_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_art_fife_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_instrument_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WalletCreditCardCloudTokenData::WalletCreditCardCloudTokenData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WalletCreditCardCloudTokenData)
}
WalletCreditCardCloudTokenData::WalletCreditCardCloudTokenData(const WalletCreditCardCloudTokenData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  masked_card_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    masked_card_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_masked_card_id()) {
    masked_card_id_.Set(from._internal_masked_card_id(), 
      GetArenaForAllocation());
  }
  suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suffix()) {
    suffix_.Set(from._internal_suffix(), 
      GetArenaForAllocation());
  }
  art_fife_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    art_fife_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_art_fife_url()) {
    art_fife_url_.Set(from._internal_art_fife_url(), 
      GetArenaForAllocation());
  }
  instrument_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instrument_token()) {
    instrument_token_.Set(from._internal_instrument_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&exp_month_, &from.exp_month_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_year_) -
    reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletCreditCardCloudTokenData)
}

inline void WalletCreditCardCloudTokenData::SharedCtor() {
masked_card_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  masked_card_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
suffix_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  suffix_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
art_fife_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  art_fife_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exp_month_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exp_year_) -
    reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
}

WalletCreditCardCloudTokenData::~WalletCreditCardCloudTokenData() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletCreditCardCloudTokenData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletCreditCardCloudTokenData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  masked_card_id_.Destroy();
  suffix_.Destroy();
  art_fife_url_.Destroy();
  instrument_token_.Destroy();
}

void WalletCreditCardCloudTokenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WalletCreditCardCloudTokenData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletCreditCardCloudTokenData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      masked_card_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      art_fife_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      instrument_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&exp_month_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_year_) -
        reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WalletCreditCardCloudTokenData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string masked_card_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_masked_card_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string suffix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_suffix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 exp_month = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_exp_month(&has_bits);
          exp_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 exp_year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_exp_year(&has_bits);
          exp_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string art_fife_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_art_fife_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instrument_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_instrument_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletCreditCardCloudTokenData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WalletCreditCardCloudTokenData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string masked_card_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_masked_card_id(), target);
  }

  // optional string suffix = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_suffix(), target);
  }

  // optional int32 exp_month = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_exp_month(), target);
  }

  // optional int32 exp_year = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_exp_year(), target);
  }

  // optional string art_fife_url = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_art_fife_url(), target);
  }

  // optional string instrument_token = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_instrument_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WalletCreditCardCloudTokenData)
  return target;
}

size_t WalletCreditCardCloudTokenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletCreditCardCloudTokenData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string masked_card_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_masked_card_id());
    }

    // optional string suffix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suffix());
    }

    // optional string art_fife_url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_art_fife_url());
    }

    // optional string instrument_token = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instrument_token());
    }

    // optional int32 exp_month = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp_month());
    }

    // optional int32 exp_year = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletCreditCardCloudTokenData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WalletCreditCardCloudTokenData*>(
      &from));
}

void WalletCreditCardCloudTokenData::MergeFrom(const WalletCreditCardCloudTokenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletCreditCardCloudTokenData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_masked_card_id(from._internal_masked_card_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_suffix(from._internal_suffix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_art_fife_url(from._internal_art_fife_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_instrument_token(from._internal_instrument_token());
    }
    if (cached_has_bits & 0x00000010u) {
      exp_month_ = from.exp_month_;
    }
    if (cached_has_bits & 0x00000020u) {
      exp_year_ = from.exp_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WalletCreditCardCloudTokenData::CopyFrom(const WalletCreditCardCloudTokenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletCreditCardCloudTokenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletCreditCardCloudTokenData::IsInitialized() const {
  return true;
}

void WalletCreditCardCloudTokenData::InternalSwap(WalletCreditCardCloudTokenData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &masked_card_id_, lhs_arena,
      &other->masked_card_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &suffix_, lhs_arena,
      &other->suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &art_fife_url_, lhs_arena,
      &other->art_fife_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instrument_token_, lhs_arena,
      &other->instrument_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WalletCreditCardCloudTokenData, exp_year_)
      + sizeof(WalletCreditCardCloudTokenData::exp_year_)
      - PROTOBUF_FIELD_OFFSET(WalletCreditCardCloudTokenData, exp_month_)>(
          reinterpret_cast<char*>(&exp_month_),
          reinterpret_cast<char*>(&other->exp_month_));
}

std::string WalletCreditCardCloudTokenData::GetTypeName() const {
  return "sync_pb.WalletCreditCardCloudTokenData";
}


// ===================================================================

class AutofillWalletSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillWalletSpecifics>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::WalletMaskedCreditCard& masked_card(const AutofillWalletSpecifics* msg);
  static void set_has_masked_card(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::WalletPostalAddress& address(const AutofillWalletSpecifics* msg);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::PaymentsCustomerData& customer_data(const AutofillWalletSpecifics* msg);
  static void set_has_customer_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::WalletCreditCardCloudTokenData& cloud_token_data(const AutofillWalletSpecifics* msg);
  static void set_has_cloud_token_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sync_pb::WalletMaskedCreditCard&
AutofillWalletSpecifics::_Internal::masked_card(const AutofillWalletSpecifics* msg) {
  return *msg->masked_card_;
}
const ::sync_pb::WalletPostalAddress&
AutofillWalletSpecifics::_Internal::address(const AutofillWalletSpecifics* msg) {
  return *msg->address_;
}
const ::sync_pb::PaymentsCustomerData&
AutofillWalletSpecifics::_Internal::customer_data(const AutofillWalletSpecifics* msg) {
  return *msg->customer_data_;
}
const ::sync_pb::WalletCreditCardCloudTokenData&
AutofillWalletSpecifics::_Internal::cloud_token_data(const AutofillWalletSpecifics* msg) {
  return *msg->cloud_token_data_;
}
AutofillWalletSpecifics::AutofillWalletSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillWalletSpecifics)
}
AutofillWalletSpecifics::AutofillWalletSpecifics(const AutofillWalletSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_masked_card()) {
    masked_card_ = new ::sync_pb::WalletMaskedCreditCard(*from.masked_card_);
  } else {
    masked_card_ = nullptr;
  }
  if (from._internal_has_address()) {
    address_ = new ::sync_pb::WalletPostalAddress(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_customer_data()) {
    customer_data_ = new ::sync_pb::PaymentsCustomerData(*from.customer_data_);
  } else {
    customer_data_ = nullptr;
  }
  if (from._internal_has_cloud_token_data()) {
    cloud_token_data_ = new ::sync_pb::WalletCreditCardCloudTokenData(*from.cloud_token_data_);
  } else {
    cloud_token_data_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillWalletSpecifics)
}

inline void AutofillWalletSpecifics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&masked_card_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&masked_card_)) + sizeof(type_));
}

AutofillWalletSpecifics::~AutofillWalletSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillWalletSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillWalletSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete masked_card_;
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete customer_data_;
  if (this != internal_default_instance()) delete cloud_token_data_;
}

void AutofillWalletSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillWalletSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillWalletSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(masked_card_ != nullptr);
      masked_card_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(address_ != nullptr);
      address_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(customer_data_ != nullptr);
      customer_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cloud_token_data_ != nullptr);
      cloud_token_data_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillWalletSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillWalletSpecifics_WalletInfoType_IsValid(val))) {
            _internal_set_type(static_cast<::sync_pb::AutofillWalletSpecifics_WalletInfoType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_masked_card(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WalletPostalAddress address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.PaymentsCustomerData customer_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud_token_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillWalletSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillWalletSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::masked_card(this),
        _Internal::masked_card(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.WalletPostalAddress address = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.PaymentsCustomerData customer_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::customer_data(this),
        _Internal::customer_data(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cloud_token_data(this),
        _Internal::cloud_token_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillWalletSpecifics)
  return target;
}

size_t AutofillWalletSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillWalletSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *masked_card_);
    }

    // optional .sync_pb.WalletPostalAddress address = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_);
    }

    // optional .sync_pb.PaymentsCustomerData customer_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_data_);
    }

    // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloud_token_data_);
    }

    // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillWalletSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillWalletSpecifics*>(
      &from));
}

void AutofillWalletSpecifics::MergeFrom(const AutofillWalletSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillWalletSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_masked_card()->::sync_pb::WalletMaskedCreditCard::MergeFrom(from._internal_masked_card());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_address()->::sync_pb::WalletPostalAddress::MergeFrom(from._internal_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_customer_data()->::sync_pb::PaymentsCustomerData::MergeFrom(from._internal_customer_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cloud_token_data()->::sync_pb::WalletCreditCardCloudTokenData::MergeFrom(from._internal_cloud_token_data());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillWalletSpecifics::CopyFrom(const AutofillWalletSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillWalletSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillWalletSpecifics::IsInitialized() const {
  return true;
}

void AutofillWalletSpecifics::InternalSwap(AutofillWalletSpecifics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillWalletSpecifics, type_)
      + sizeof(AutofillWalletSpecifics::type_)
      - PROTOBUF_FIELD_OFFSET(AutofillWalletSpecifics, masked_card_)>(
          reinterpret_cast<char*>(&masked_card_),
          reinterpret_cast<char*>(&other->masked_card_));
}

std::string AutofillWalletSpecifics::GetTypeName() const {
  return "sync_pb.AutofillWalletSpecifics";
}


// ===================================================================

class WalletMetadataSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletMetadataSpecifics>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_card_billing_address_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address_has_converted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

WalletMetadataSpecifics::WalletMetadataSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WalletMetadataSpecifics)
}
WalletMetadataSpecifics::WalletMetadataSpecifics(const WalletMetadataSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  card_billing_address_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    card_billing_address_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_card_billing_address_id()) {
    card_billing_address_id_.Set(from._internal_card_billing_address_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&use_count_, &from.use_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_date_) -
    reinterpret_cast<char*>(&use_count_)) + sizeof(use_date_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletMetadataSpecifics)
}

inline void WalletMetadataSpecifics::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
card_billing_address_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  card_billing_address_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_date_) -
    reinterpret_cast<char*>(&use_count_)) + sizeof(use_date_));
}

WalletMetadataSpecifics::~WalletMetadataSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletMetadataSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletMetadataSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  card_billing_address_id_.Destroy();
}

void WalletMetadataSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WalletMetadataSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletMetadataSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      card_billing_address_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&use_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_date_) -
        reinterpret_cast<char*>(&use_count_)) + sizeof(use_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WalletMetadataSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WalletMetadataSpecifics_Type_IsValid(val))) {
            _internal_set_type(static_cast<::sync_pb::WalletMetadataSpecifics_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 use_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_count(&has_bits);
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 use_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_date(&has_bits);
          use_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string card_billing_address_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_card_billing_address_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool address_has_converted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_address_has_converted(&has_bits);
          address_has_converted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletMetadataSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WalletMetadataSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional int64 use_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_use_count(), target);
  }

  // optional int64 use_date = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_use_date(), target);
  }

  // optional string card_billing_address_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_card_billing_address_id(), target);
  }

  // optional bool address_has_converted = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_address_has_converted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WalletMetadataSpecifics)
  return target;
}

size_t WalletMetadataSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletMetadataSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string card_billing_address_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_card_billing_address_id());
    }

    // optional int64 use_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_use_count());
    }

    // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool address_has_converted = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int64 use_date = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_use_date());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletMetadataSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WalletMetadataSpecifics*>(
      &from));
}

void WalletMetadataSpecifics::MergeFrom(const WalletMetadataSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletMetadataSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_card_billing_address_id(from._internal_card_billing_address_id());
    }
    if (cached_has_bits & 0x00000004u) {
      use_count_ = from.use_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      address_has_converted_ = from.address_has_converted_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_date_ = from.use_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WalletMetadataSpecifics::CopyFrom(const WalletMetadataSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletMetadataSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletMetadataSpecifics::IsInitialized() const {
  return true;
}

void WalletMetadataSpecifics::InternalSwap(WalletMetadataSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &card_billing_address_id_, lhs_arena,
      &other->card_billing_address_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WalletMetadataSpecifics, use_date_)
      + sizeof(WalletMetadataSpecifics::use_date_)
      - PROTOBUF_FIELD_OFFSET(WalletMetadataSpecifics, use_count_)>(
          reinterpret_cast<char*>(&use_count_),
          reinterpret_cast<char*>(&other->use_count_));
}

std::string WalletMetadataSpecifics::GetTypeName() const {
  return "sync_pb.WalletMetadataSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillProfileSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::AutofillProfileSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillProfileSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::AutofillSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CloudTokenData*
Arena::CreateMaybeMessage< ::sync_pb::CloudTokenData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::CloudTokenData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CardIssuer*
Arena::CreateMaybeMessage< ::sync_pb::CardIssuer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::CardIssuer >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletMaskedCreditCard*
Arena::CreateMaybeMessage< ::sync_pb::WalletMaskedCreditCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WalletMaskedCreditCard >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletPostalAddress*
Arena::CreateMaybeMessage< ::sync_pb::WalletPostalAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WalletPostalAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::PaymentsCustomerData*
Arena::CreateMaybeMessage< ::sync_pb::PaymentsCustomerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::PaymentsCustomerData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletCreditCardCloudTokenData*
Arena::CreateMaybeMessage< ::sync_pb::WalletCreditCardCloudTokenData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WalletCreditCardCloudTokenData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillWalletSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::AutofillWalletSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillWalletSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletMetadataSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::WalletMetadataSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WalletMetadataSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
