// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/model_type_state.proto

#include "components/sync/protocol/model_type_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR ModelTypeState::ModelTypeState(
    ::_pbi::ConstantInitialized)
  : encryption_key_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cache_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , authenticated_account_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , progress_marker_(nullptr)
  , type_context_(nullptr)
  , initial_sync_done_(false){}
struct ModelTypeStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelTypeStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelTypeStateDefaultTypeInternal() {}
  union {
    ModelTypeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelTypeStateDefaultTypeInternal _ModelTypeState_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class ModelTypeState::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelTypeState>()._has_bits_);
  static const ::sync_pb::DataTypeProgressMarker& progress_marker(const ModelTypeState* msg);
  static void set_has_progress_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::DataTypeContext& type_context(const ModelTypeState* msg);
  static void set_has_type_context(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encryption_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_sync_done(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cache_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_authenticated_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::DataTypeProgressMarker&
ModelTypeState::_Internal::progress_marker(const ModelTypeState* msg) {
  return *msg->progress_marker_;
}
const ::sync_pb::DataTypeContext&
ModelTypeState::_Internal::type_context(const ModelTypeState* msg) {
  return *msg->type_context_;
}
void ModelTypeState::clear_progress_marker() {
  if (progress_marker_ != nullptr) progress_marker_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ModelTypeState::clear_type_context() {
  if (type_context_ != nullptr) type_context_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ModelTypeState::ModelTypeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ModelTypeState)
}
ModelTypeState::ModelTypeState(const ModelTypeState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  encryption_key_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encryption_key_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encryption_key_name()) {
    encryption_key_name_.Set(from._internal_encryption_key_name(), 
      GetArenaForAllocation());
  }
  cache_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cache_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cache_guid()) {
    cache_guid_.Set(from._internal_cache_guid(), 
      GetArenaForAllocation());
  }
  authenticated_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    authenticated_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authenticated_account_id()) {
    authenticated_account_id_.Set(from._internal_authenticated_account_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_progress_marker()) {
    progress_marker_ = new ::sync_pb::DataTypeProgressMarker(*from.progress_marker_);
  } else {
    progress_marker_ = nullptr;
  }
  if (from._internal_has_type_context()) {
    type_context_ = new ::sync_pb::DataTypeContext(*from.type_context_);
  } else {
    type_context_ = nullptr;
  }
  initial_sync_done_ = from.initial_sync_done_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ModelTypeState)
}

inline void ModelTypeState::SharedCtor() {
encryption_key_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encryption_key_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cache_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cache_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
authenticated_account_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  authenticated_account_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&progress_marker_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initial_sync_done_) -
    reinterpret_cast<char*>(&progress_marker_)) + sizeof(initial_sync_done_));
}

ModelTypeState::~ModelTypeState() {
  // @@protoc_insertion_point(destructor:sync_pb.ModelTypeState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelTypeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encryption_key_name_.Destroy();
  cache_guid_.Destroy();
  authenticated_account_id_.Destroy();
  if (this != internal_default_instance()) delete progress_marker_;
  if (this != internal_default_instance()) delete type_context_;
}

void ModelTypeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelTypeState::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ModelTypeState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      encryption_key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cache_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      authenticated_account_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(progress_marker_ != nullptr);
      progress_marker_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(type_context_ != nullptr);
      type_context_->Clear();
    }
  }
  initial_sync_done_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelTypeState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress_marker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.DataTypeContext type_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string encryption_key_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_encryption_key_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool initial_sync_done = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_initial_sync_done(&has_bits);
          initial_sync_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cache_guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cache_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string authenticated_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_authenticated_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelTypeState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ModelTypeState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::progress_marker(this),
        _Internal::progress_marker(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.DataTypeContext type_context = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type_context(this),
        _Internal::type_context(this).GetCachedSize(), target, stream);
  }

  // optional string encryption_key_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encryption_key_name(), target);
  }

  // optional bool initial_sync_done = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_initial_sync_done(), target);
  }

  // optional string cache_guid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cache_guid(), target);
  }

  // optional string authenticated_account_id = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_authenticated_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ModelTypeState)
  return target;
}

size_t ModelTypeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ModelTypeState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string encryption_key_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_encryption_key_name());
    }

    // optional string cache_guid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_guid());
    }

    // optional string authenticated_account_id = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authenticated_account_id());
    }

    // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *progress_marker_);
    }

    // optional .sync_pb.DataTypeContext type_context = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_context_);
    }

    // optional bool initial_sync_done = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTypeState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelTypeState*>(
      &from));
}

void ModelTypeState::MergeFrom(const ModelTypeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ModelTypeState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encryption_key_name(from._internal_encryption_key_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cache_guid(from._internal_cache_guid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_authenticated_account_id(from._internal_authenticated_account_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_progress_marker()->::sync_pb::DataTypeProgressMarker::MergeFrom(from._internal_progress_marker());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_type_context()->::sync_pb::DataTypeContext::MergeFrom(from._internal_type_context());
    }
    if (cached_has_bits & 0x00000020u) {
      initial_sync_done_ = from.initial_sync_done_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelTypeState::CopyFrom(const ModelTypeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ModelTypeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeState::IsInitialized() const {
  return true;
}

void ModelTypeState::InternalSwap(ModelTypeState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &encryption_key_name_, lhs_arena,
      &other->encryption_key_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cache_guid_, lhs_arena,
      &other->cache_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &authenticated_account_id_, lhs_arena,
      &other->authenticated_account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelTypeState, initial_sync_done_)
      + sizeof(ModelTypeState::initial_sync_done_)
      - PROTOBUF_FIELD_OFFSET(ModelTypeState, progress_marker_)>(
          reinterpret_cast<char*>(&progress_marker_),
          reinterpret_cast<char*>(&other->progress_marker_));
}

std::string ModelTypeState::GetTypeName() const {
  return "sync_pb.ModelTypeState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::ModelTypeState*
Arena::CreateMaybeMessage< ::sync_pb::ModelTypeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ModelTypeState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
