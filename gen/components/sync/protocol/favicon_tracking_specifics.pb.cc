// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/favicon_tracking_specifics.proto

#include "components/sync/protocol/favicon_tracking_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR FaviconTrackingSpecifics::FaviconTrackingSpecifics(
    ::_pbi::ConstantInitialized)
  : favicon_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_visit_time_ms_(int64_t{0})
  , is_bookmarked_(false){}
struct FaviconTrackingSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaviconTrackingSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaviconTrackingSpecificsDefaultTypeInternal() {}
  union {
    FaviconTrackingSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaviconTrackingSpecificsDefaultTypeInternal _FaviconTrackingSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class FaviconTrackingSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<FaviconTrackingSpecifics>()._has_bits_);
  static void set_has_favicon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_visit_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_bookmarked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FaviconTrackingSpecifics::FaviconTrackingSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.FaviconTrackingSpecifics)
}
FaviconTrackingSpecifics::FaviconTrackingSpecifics(const FaviconTrackingSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  favicon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    favicon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_favicon_url()) {
    favicon_url_.Set(from._internal_favicon_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&last_visit_time_ms_, &from.last_visit_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_bookmarked_) -
    reinterpret_cast<char*>(&last_visit_time_ms_)) + sizeof(is_bookmarked_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.FaviconTrackingSpecifics)
}

inline void FaviconTrackingSpecifics::SharedCtor() {
favicon_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  favicon_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_visit_time_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_bookmarked_) -
    reinterpret_cast<char*>(&last_visit_time_ms_)) + sizeof(is_bookmarked_));
}

FaviconTrackingSpecifics::~FaviconTrackingSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.FaviconTrackingSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaviconTrackingSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  favicon_url_.Destroy();
}

void FaviconTrackingSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaviconTrackingSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.FaviconTrackingSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    favicon_url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&last_visit_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_bookmarked_) -
        reinterpret_cast<char*>(&last_visit_time_ms_)) + sizeof(is_bookmarked_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FaviconTrackingSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string favicon_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_favicon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_visit_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_visit_time_ms(&has_bits);
          last_visit_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_bookmarked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_bookmarked(&has_bits);
          is_bookmarked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaviconTrackingSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.FaviconTrackingSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string favicon_url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_favicon_url(), target);
  }

  // optional int64 last_visit_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_visit_time_ms(), target);
  }

  // optional bool is_bookmarked = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_bookmarked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.FaviconTrackingSpecifics)
  return target;
}

size_t FaviconTrackingSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.FaviconTrackingSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string favicon_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_favicon_url());
    }

    // optional int64 last_visit_time_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_visit_time_ms());
    }

    // optional bool is_bookmarked = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaviconTrackingSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FaviconTrackingSpecifics*>(
      &from));
}

void FaviconTrackingSpecifics::MergeFrom(const FaviconTrackingSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.FaviconTrackingSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_favicon_url(from._internal_favicon_url());
    }
    if (cached_has_bits & 0x00000002u) {
      last_visit_time_ms_ = from.last_visit_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_bookmarked_ = from.is_bookmarked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FaviconTrackingSpecifics::CopyFrom(const FaviconTrackingSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.FaviconTrackingSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconTrackingSpecifics::IsInitialized() const {
  return true;
}

void FaviconTrackingSpecifics::InternalSwap(FaviconTrackingSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &favicon_url_, lhs_arena,
      &other->favicon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaviconTrackingSpecifics, is_bookmarked_)
      + sizeof(FaviconTrackingSpecifics::is_bookmarked_)
      - PROTOBUF_FIELD_OFFSET(FaviconTrackingSpecifics, last_visit_time_ms_)>(
          reinterpret_cast<char*>(&last_visit_time_ms_),
          reinterpret_cast<char*>(&other->last_visit_time_ms_));
}

std::string FaviconTrackingSpecifics::GetTypeName() const {
  return "sync_pb.FaviconTrackingSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::FaviconTrackingSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::FaviconTrackingSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::FaviconTrackingSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
