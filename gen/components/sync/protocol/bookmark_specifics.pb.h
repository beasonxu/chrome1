// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/bookmark_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fbookmark_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fbookmark_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/sync/protocol/unique_position.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fbookmark_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fbookmark_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class BookmarkSpecifics;
struct BookmarkSpecificsDefaultTypeInternal;
extern BookmarkSpecificsDefaultTypeInternal _BookmarkSpecifics_default_instance_;
class MetaInfo;
struct MetaInfoDefaultTypeInternal;
extern MetaInfoDefaultTypeInternal _MetaInfo_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::BookmarkSpecifics* Arena::CreateMaybeMessage<::sync_pb::BookmarkSpecifics>(Arena*);
template<> ::sync_pb::MetaInfo* Arena::CreateMaybeMessage<::sync_pb::MetaInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum BookmarkSpecifics_Type : int {
  BookmarkSpecifics_Type_UNSPECIFIED = 0,
  BookmarkSpecifics_Type_URL = 1,
  BookmarkSpecifics_Type_FOLDER = 2
};
bool BookmarkSpecifics_Type_IsValid(int value);
constexpr BookmarkSpecifics_Type BookmarkSpecifics_Type_Type_MIN = BookmarkSpecifics_Type_UNSPECIFIED;
constexpr BookmarkSpecifics_Type BookmarkSpecifics_Type_Type_MAX = BookmarkSpecifics_Type_FOLDER;
constexpr int BookmarkSpecifics_Type_Type_ARRAYSIZE = BookmarkSpecifics_Type_Type_MAX + 1;

const std::string& BookmarkSpecifics_Type_Name(BookmarkSpecifics_Type value);
template<typename T>
inline const std::string& BookmarkSpecifics_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BookmarkSpecifics_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BookmarkSpecifics_Type_Name.");
  return BookmarkSpecifics_Type_Name(static_cast<BookmarkSpecifics_Type>(enum_t_value));
}
bool BookmarkSpecifics_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BookmarkSpecifics_Type* value);
// ===================================================================

class MetaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.MetaInfo) */ {
 public:
  inline MetaInfo() : MetaInfo(nullptr) {}
  ~MetaInfo() override;
  explicit PROTOBUF_CONSTEXPR MetaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaInfo(const MetaInfo& from);
  MetaInfo(MetaInfo&& from) noexcept
    : MetaInfo() {
    *this = ::std::move(from);
  }

  inline MetaInfo& operator=(const MetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaInfo& operator=(MetaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MetaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaInfo* internal_default_instance() {
    return reinterpret_cast<const MetaInfo*>(
               &_MetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetaInfo& a, MetaInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MetaInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MetaInfo& from);
  void MergeFrom(const MetaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetaInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.MetaInfo";
  }
  protected:
  explicit MetaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.MetaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fbookmark_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class BookmarkSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.BookmarkSpecifics) */ {
 public:
  inline BookmarkSpecifics() : BookmarkSpecifics(nullptr) {}
  ~BookmarkSpecifics() override;
  explicit PROTOBUF_CONSTEXPR BookmarkSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookmarkSpecifics(const BookmarkSpecifics& from);
  BookmarkSpecifics(BookmarkSpecifics&& from) noexcept
    : BookmarkSpecifics() {
    *this = ::std::move(from);
  }

  inline BookmarkSpecifics& operator=(const BookmarkSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookmarkSpecifics& operator=(BookmarkSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BookmarkSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookmarkSpecifics* internal_default_instance() {
    return reinterpret_cast<const BookmarkSpecifics*>(
               &_BookmarkSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookmarkSpecifics& a, BookmarkSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BookmarkSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookmarkSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookmarkSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookmarkSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BookmarkSpecifics& from);
  void MergeFrom(const BookmarkSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BookmarkSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.BookmarkSpecifics";
  }
  protected:
  explicit BookmarkSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BookmarkSpecifics_Type Type;
  static constexpr Type UNSPECIFIED =
    BookmarkSpecifics_Type_UNSPECIFIED;
  static constexpr Type URL =
    BookmarkSpecifics_Type_URL;
  static constexpr Type FOLDER =
    BookmarkSpecifics_Type_FOLDER;
  static inline bool Type_IsValid(int value) {
    return BookmarkSpecifics_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BookmarkSpecifics_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BookmarkSpecifics_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BookmarkSpecifics_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BookmarkSpecifics_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return BookmarkSpecifics_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 6,
    kUrlFieldNumber = 1,
    kFaviconFieldNumber = 2,
    kLegacyCanonicalizedTitleFieldNumber = 3,
    kIconUrlFieldNumber = 5,
    kGuidFieldNumber = 10,
    kFullTitleFieldNumber = 11,
    kParentGuidFieldNumber = 14,
    kUniquePositionFieldNumber = 16,
    kCreationTimeUsFieldNumber = 4,
    kLastUsedTimeUsFieldNumber = 17,
    kTypeFieldNumber = 15,
  };
  // repeated .sync_pb.MetaInfo meta_info = 6;
  int meta_info_size() const;
  private:
  int _internal_meta_info_size() const;
  public:
  void clear_meta_info();
  ::sync_pb::MetaInfo* mutable_meta_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo >*
      mutable_meta_info();
  private:
  const ::sync_pb::MetaInfo& _internal_meta_info(int index) const;
  ::sync_pb::MetaInfo* _internal_add_meta_info();
  public:
  const ::sync_pb::MetaInfo& meta_info(int index) const;
  ::sync_pb::MetaInfo* add_meta_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo >&
      meta_info() const;

  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional bytes favicon = 2;
  bool has_favicon() const;
  private:
  bool _internal_has_favicon() const;
  public:
  void clear_favicon();
  const std::string& favicon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_favicon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_favicon();
  PROTOBUF_NODISCARD std::string* release_favicon();
  void set_allocated_favicon(std::string* favicon);
  private:
  const std::string& _internal_favicon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_favicon(const std::string& value);
  std::string* _internal_mutable_favicon();
  public:

  // optional string legacy_canonicalized_title = 3;
  bool has_legacy_canonicalized_title() const;
  private:
  bool _internal_has_legacy_canonicalized_title() const;
  public:
  void clear_legacy_canonicalized_title();
  const std::string& legacy_canonicalized_title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legacy_canonicalized_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legacy_canonicalized_title();
  PROTOBUF_NODISCARD std::string* release_legacy_canonicalized_title();
  void set_allocated_legacy_canonicalized_title(std::string* legacy_canonicalized_title);
  private:
  const std::string& _internal_legacy_canonicalized_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legacy_canonicalized_title(const std::string& value);
  std::string* _internal_mutable_legacy_canonicalized_title();
  public:

  // optional string icon_url = 5;
  bool has_icon_url() const;
  private:
  bool _internal_has_icon_url() const;
  public:
  void clear_icon_url();
  const std::string& icon_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_url();
  PROTOBUF_NODISCARD std::string* release_icon_url();
  void set_allocated_icon_url(std::string* icon_url);
  private:
  const std::string& _internal_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url(const std::string& value);
  std::string* _internal_mutable_icon_url();
  public:

  // optional string guid = 10;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // optional string full_title = 11;
  bool has_full_title() const;
  private:
  bool _internal_has_full_title() const;
  public:
  void clear_full_title();
  const std::string& full_title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_title();
  PROTOBUF_NODISCARD std::string* release_full_title();
  void set_allocated_full_title(std::string* full_title);
  private:
  const std::string& _internal_full_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_title(const std::string& value);
  std::string* _internal_mutable_full_title();
  public:

  // optional string parent_guid = 14;
  bool has_parent_guid() const;
  private:
  bool _internal_has_parent_guid() const;
  public:
  void clear_parent_guid();
  const std::string& parent_guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_guid();
  PROTOBUF_NODISCARD std::string* release_parent_guid();
  void set_allocated_parent_guid(std::string* parent_guid);
  private:
  const std::string& _internal_parent_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_guid(const std::string& value);
  std::string* _internal_mutable_parent_guid();
  public:

  // optional .sync_pb.UniquePosition unique_position = 16;
  bool has_unique_position() const;
  private:
  bool _internal_has_unique_position() const;
  public:
  void clear_unique_position();
  const ::sync_pb::UniquePosition& unique_position() const;
  PROTOBUF_NODISCARD ::sync_pb::UniquePosition* release_unique_position();
  ::sync_pb::UniquePosition* mutable_unique_position();
  void set_allocated_unique_position(::sync_pb::UniquePosition* unique_position);
  private:
  const ::sync_pb::UniquePosition& _internal_unique_position() const;
  ::sync_pb::UniquePosition* _internal_mutable_unique_position();
  public:
  void unsafe_arena_set_allocated_unique_position(
      ::sync_pb::UniquePosition* unique_position);
  ::sync_pb::UniquePosition* unsafe_arena_release_unique_position();

  // optional int64 creation_time_us = 4;
  bool has_creation_time_us() const;
  private:
  bool _internal_has_creation_time_us() const;
  public:
  void clear_creation_time_us();
  int64_t creation_time_us() const;
  void set_creation_time_us(int64_t value);
  private:
  int64_t _internal_creation_time_us() const;
  void _internal_set_creation_time_us(int64_t value);
  public:

  // optional int64 last_used_time_us = 17;
  bool has_last_used_time_us() const;
  private:
  bool _internal_has_last_used_time_us() const;
  public:
  void clear_last_used_time_us();
  int64_t last_used_time_us() const;
  void set_last_used_time_us(int64_t value);
  private:
  int64_t _internal_last_used_time_us() const;
  void _internal_set_last_used_time_us(int64_t value);
  public:

  // optional .sync_pb.BookmarkSpecifics.Type type = 15;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sync_pb::BookmarkSpecifics_Type type() const;
  void set_type(::sync_pb::BookmarkSpecifics_Type value);
  private:
  ::sync_pb::BookmarkSpecifics_Type _internal_type() const;
  void _internal_set_type(::sync_pb::BookmarkSpecifics_Type value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.BookmarkSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo > meta_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_canonicalized_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_guid_;
  ::sync_pb::UniquePosition* unique_position_;
  int64_t creation_time_us_;
  int64_t last_used_time_us_;
  int type_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fbookmark_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetaInfo

// optional string key = 1;
inline bool MetaInfo::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetaInfo::has_key() const {
  return _internal_has_key();
}
inline void MetaInfo::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetaInfo::key() const {
  // @@protoc_insertion_point(field_get:sync_pb.MetaInfo.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaInfo::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.MetaInfo.key)
}
inline std::string* MetaInfo::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.MetaInfo.key)
  return _s;
}
inline const std::string& MetaInfo::_internal_key() const {
  return key_.Get();
}
inline void MetaInfo::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaInfo::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* MetaInfo::release_key() {
  // @@protoc_insertion_point(field_release:sync_pb.MetaInfo.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MetaInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.MetaInfo.key)
}

// optional string value = 2;
inline bool MetaInfo::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MetaInfo::has_value() const {
  return _internal_has_value();
}
inline void MetaInfo::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MetaInfo::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.MetaInfo.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaInfo::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.MetaInfo.value)
}
inline std::string* MetaInfo::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.MetaInfo.value)
  return _s;
}
inline const std::string& MetaInfo::_internal_value() const {
  return value_.Get();
}
inline void MetaInfo::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaInfo::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* MetaInfo::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.MetaInfo.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MetaInfo::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.MetaInfo.value)
}

// -------------------------------------------------------------------

// BookmarkSpecifics

// optional string url = 1;
inline bool BookmarkSpecifics::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_url() const {
  return _internal_has_url();
}
inline void BookmarkSpecifics::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BookmarkSpecifics::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookmarkSpecifics::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.url)
}
inline std::string* BookmarkSpecifics::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.url)
  return _s;
}
inline const std::string& BookmarkSpecifics::_internal_url() const {
  return url_.Get();
}
inline void BookmarkSpecifics::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BookmarkSpecifics::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.url)
}

// optional bytes favicon = 2;
inline bool BookmarkSpecifics::_internal_has_favicon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_favicon() const {
  return _internal_has_favicon();
}
inline void BookmarkSpecifics::clear_favicon() {
  favicon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BookmarkSpecifics::favicon() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.favicon)
  return _internal_favicon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookmarkSpecifics::set_favicon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 favicon_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.favicon)
}
inline std::string* BookmarkSpecifics::mutable_favicon() {
  std::string* _s = _internal_mutable_favicon();
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.favicon)
  return _s;
}
inline const std::string& BookmarkSpecifics::_internal_favicon() const {
  return favicon_.Get();
}
inline void BookmarkSpecifics::_internal_set_favicon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  favicon_.Set(value, GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::_internal_mutable_favicon() {
  _has_bits_[0] |= 0x00000002u;
  return favicon_.Mutable(GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::release_favicon() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.favicon)
  if (!_internal_has_favicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = favicon_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (favicon_.IsDefault()) {
    favicon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BookmarkSpecifics::set_allocated_favicon(std::string* favicon) {
  if (favicon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  favicon_.SetAllocated(favicon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (favicon_.IsDefault()) {
    favicon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.favicon)
}

// optional string legacy_canonicalized_title = 3;
inline bool BookmarkSpecifics::_internal_has_legacy_canonicalized_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_legacy_canonicalized_title() const {
  return _internal_has_legacy_canonicalized_title();
}
inline void BookmarkSpecifics::clear_legacy_canonicalized_title() {
  legacy_canonicalized_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BookmarkSpecifics::legacy_canonicalized_title() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.legacy_canonicalized_title)
  return _internal_legacy_canonicalized_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookmarkSpecifics::set_legacy_canonicalized_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 legacy_canonicalized_title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.legacy_canonicalized_title)
}
inline std::string* BookmarkSpecifics::mutable_legacy_canonicalized_title() {
  std::string* _s = _internal_mutable_legacy_canonicalized_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.legacy_canonicalized_title)
  return _s;
}
inline const std::string& BookmarkSpecifics::_internal_legacy_canonicalized_title() const {
  return legacy_canonicalized_title_.Get();
}
inline void BookmarkSpecifics::_internal_set_legacy_canonicalized_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  legacy_canonicalized_title_.Set(value, GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::_internal_mutable_legacy_canonicalized_title() {
  _has_bits_[0] |= 0x00000004u;
  return legacy_canonicalized_title_.Mutable(GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::release_legacy_canonicalized_title() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.legacy_canonicalized_title)
  if (!_internal_has_legacy_canonicalized_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = legacy_canonicalized_title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (legacy_canonicalized_title_.IsDefault()) {
    legacy_canonicalized_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BookmarkSpecifics::set_allocated_legacy_canonicalized_title(std::string* legacy_canonicalized_title) {
  if (legacy_canonicalized_title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  legacy_canonicalized_title_.SetAllocated(legacy_canonicalized_title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (legacy_canonicalized_title_.IsDefault()) {
    legacy_canonicalized_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.legacy_canonicalized_title)
}

// optional int64 creation_time_us = 4;
inline bool BookmarkSpecifics::_internal_has_creation_time_us() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_creation_time_us() const {
  return _internal_has_creation_time_us();
}
inline void BookmarkSpecifics::clear_creation_time_us() {
  creation_time_us_ = int64_t{0};
  _has_bits_[0] &= ~0x00000100u;
}
inline int64_t BookmarkSpecifics::_internal_creation_time_us() const {
  return creation_time_us_;
}
inline int64_t BookmarkSpecifics::creation_time_us() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.creation_time_us)
  return _internal_creation_time_us();
}
inline void BookmarkSpecifics::_internal_set_creation_time_us(int64_t value) {
  _has_bits_[0] |= 0x00000100u;
  creation_time_us_ = value;
}
inline void BookmarkSpecifics::set_creation_time_us(int64_t value) {
  _internal_set_creation_time_us(value);
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.creation_time_us)
}

// optional string icon_url = 5;
inline bool BookmarkSpecifics::_internal_has_icon_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_icon_url() const {
  return _internal_has_icon_url();
}
inline void BookmarkSpecifics::clear_icon_url() {
  icon_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BookmarkSpecifics::icon_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.icon_url)
  return _internal_icon_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookmarkSpecifics::set_icon_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 icon_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.icon_url)
}
inline std::string* BookmarkSpecifics::mutable_icon_url() {
  std::string* _s = _internal_mutable_icon_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.icon_url)
  return _s;
}
inline const std::string& BookmarkSpecifics::_internal_icon_url() const {
  return icon_url_.Get();
}
inline void BookmarkSpecifics::_internal_set_icon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::_internal_mutable_icon_url() {
  _has_bits_[0] |= 0x00000008u;
  return icon_url_.Mutable(GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::release_icon_url() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.icon_url)
  if (!_internal_has_icon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = icon_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_.IsDefault()) {
    icon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BookmarkSpecifics::set_allocated_icon_url(std::string* icon_url) {
  if (icon_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  icon_url_.SetAllocated(icon_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_.IsDefault()) {
    icon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.icon_url)
}

// repeated .sync_pb.MetaInfo meta_info = 6;
inline int BookmarkSpecifics::_internal_meta_info_size() const {
  return meta_info_.size();
}
inline int BookmarkSpecifics::meta_info_size() const {
  return _internal_meta_info_size();
}
inline void BookmarkSpecifics::clear_meta_info() {
  meta_info_.Clear();
}
inline ::sync_pb::MetaInfo* BookmarkSpecifics::mutable_meta_info(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.meta_info)
  return meta_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo >*
BookmarkSpecifics::mutable_meta_info() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.BookmarkSpecifics.meta_info)
  return &meta_info_;
}
inline const ::sync_pb::MetaInfo& BookmarkSpecifics::_internal_meta_info(int index) const {
  return meta_info_.Get(index);
}
inline const ::sync_pb::MetaInfo& BookmarkSpecifics::meta_info(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.meta_info)
  return _internal_meta_info(index);
}
inline ::sync_pb::MetaInfo* BookmarkSpecifics::_internal_add_meta_info() {
  return meta_info_.Add();
}
inline ::sync_pb::MetaInfo* BookmarkSpecifics::add_meta_info() {
  ::sync_pb::MetaInfo* _add = _internal_add_meta_info();
  // @@protoc_insertion_point(field_add:sync_pb.BookmarkSpecifics.meta_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo >&
BookmarkSpecifics::meta_info() const {
  // @@protoc_insertion_point(field_list:sync_pb.BookmarkSpecifics.meta_info)
  return meta_info_;
}

// optional string guid = 10;
inline bool BookmarkSpecifics::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_guid() const {
  return _internal_has_guid();
}
inline void BookmarkSpecifics::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BookmarkSpecifics::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookmarkSpecifics::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.guid)
}
inline std::string* BookmarkSpecifics::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.guid)
  return _s;
}
inline const std::string& BookmarkSpecifics::_internal_guid() const {
  return guid_.Get();
}
inline void BookmarkSpecifics::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  guid_.Set(value, GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000010u;
  return guid_.Mutable(GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BookmarkSpecifics::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  guid_.SetAllocated(guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.guid)
}

// optional string full_title = 11;
inline bool BookmarkSpecifics::_internal_has_full_title() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_full_title() const {
  return _internal_has_full_title();
}
inline void BookmarkSpecifics::clear_full_title() {
  full_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& BookmarkSpecifics::full_title() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.full_title)
  return _internal_full_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookmarkSpecifics::set_full_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 full_title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.full_title)
}
inline std::string* BookmarkSpecifics::mutable_full_title() {
  std::string* _s = _internal_mutable_full_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.full_title)
  return _s;
}
inline const std::string& BookmarkSpecifics::_internal_full_title() const {
  return full_title_.Get();
}
inline void BookmarkSpecifics::_internal_set_full_title(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  full_title_.Set(value, GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::_internal_mutable_full_title() {
  _has_bits_[0] |= 0x00000020u;
  return full_title_.Mutable(GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::release_full_title() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.full_title)
  if (!_internal_has_full_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = full_title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (full_title_.IsDefault()) {
    full_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BookmarkSpecifics::set_allocated_full_title(std::string* full_title) {
  if (full_title != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  full_title_.SetAllocated(full_title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (full_title_.IsDefault()) {
    full_title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.full_title)
}

// optional string parent_guid = 14;
inline bool BookmarkSpecifics::_internal_has_parent_guid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_parent_guid() const {
  return _internal_has_parent_guid();
}
inline void BookmarkSpecifics::clear_parent_guid() {
  parent_guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& BookmarkSpecifics::parent_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.parent_guid)
  return _internal_parent_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookmarkSpecifics::set_parent_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 parent_guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.parent_guid)
}
inline std::string* BookmarkSpecifics::mutable_parent_guid() {
  std::string* _s = _internal_mutable_parent_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.parent_guid)
  return _s;
}
inline const std::string& BookmarkSpecifics::_internal_parent_guid() const {
  return parent_guid_.Get();
}
inline void BookmarkSpecifics::_internal_set_parent_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  parent_guid_.Set(value, GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::_internal_mutable_parent_guid() {
  _has_bits_[0] |= 0x00000040u;
  return parent_guid_.Mutable(GetArenaForAllocation());
}
inline std::string* BookmarkSpecifics::release_parent_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.parent_guid)
  if (!_internal_has_parent_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = parent_guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_guid_.IsDefault()) {
    parent_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BookmarkSpecifics::set_allocated_parent_guid(std::string* parent_guid) {
  if (parent_guid != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  parent_guid_.SetAllocated(parent_guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_guid_.IsDefault()) {
    parent_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.parent_guid)
}

// optional .sync_pb.BookmarkSpecifics.Type type = 15;
inline bool BookmarkSpecifics::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_type() const {
  return _internal_has_type();
}
inline void BookmarkSpecifics::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::sync_pb::BookmarkSpecifics_Type BookmarkSpecifics::_internal_type() const {
  return static_cast< ::sync_pb::BookmarkSpecifics_Type >(type_);
}
inline ::sync_pb::BookmarkSpecifics_Type BookmarkSpecifics::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.type)
  return _internal_type();
}
inline void BookmarkSpecifics::_internal_set_type(::sync_pb::BookmarkSpecifics_Type value) {
  assert(::sync_pb::BookmarkSpecifics_Type_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  type_ = value;
}
inline void BookmarkSpecifics::set_type(::sync_pb::BookmarkSpecifics_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.type)
}

// optional .sync_pb.UniquePosition unique_position = 16;
inline bool BookmarkSpecifics::_internal_has_unique_position() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || unique_position_ != nullptr);
  return value;
}
inline bool BookmarkSpecifics::has_unique_position() const {
  return _internal_has_unique_position();
}
inline const ::sync_pb::UniquePosition& BookmarkSpecifics::_internal_unique_position() const {
  const ::sync_pb::UniquePosition* p = unique_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::UniquePosition&>(
      ::sync_pb::_UniquePosition_default_instance_);
}
inline const ::sync_pb::UniquePosition& BookmarkSpecifics::unique_position() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.unique_position)
  return _internal_unique_position();
}
inline void BookmarkSpecifics::unsafe_arena_set_allocated_unique_position(
    ::sync_pb::UniquePosition* unique_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unique_position_);
  }
  unique_position_ = unique_position;
  if (unique_position) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.BookmarkSpecifics.unique_position)
}
inline ::sync_pb::UniquePosition* BookmarkSpecifics::release_unique_position() {
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::UniquePosition* temp = unique_position_;
  unique_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::UniquePosition* BookmarkSpecifics::unsafe_arena_release_unique_position() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.unique_position)
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::UniquePosition* temp = unique_position_;
  unique_position_ = nullptr;
  return temp;
}
inline ::sync_pb::UniquePosition* BookmarkSpecifics::_internal_mutable_unique_position() {
  _has_bits_[0] |= 0x00000080u;
  if (unique_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::UniquePosition>(GetArenaForAllocation());
    unique_position_ = p;
  }
  return unique_position_;
}
inline ::sync_pb::UniquePosition* BookmarkSpecifics::mutable_unique_position() {
  ::sync_pb::UniquePosition* _msg = _internal_mutable_unique_position();
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.unique_position)
  return _msg;
}
inline void BookmarkSpecifics::set_allocated_unique_position(::sync_pb::UniquePosition* unique_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unique_position_);
  }
  if (unique_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unique_position));
    if (message_arena != submessage_arena) {
      unique_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unique_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  unique_position_ = unique_position;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.unique_position)
}

// optional int64 last_used_time_us = 17;
inline bool BookmarkSpecifics::_internal_has_last_used_time_us() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BookmarkSpecifics::has_last_used_time_us() const {
  return _internal_has_last_used_time_us();
}
inline void BookmarkSpecifics::clear_last_used_time_us() {
  last_used_time_us_ = int64_t{0};
  _has_bits_[0] &= ~0x00000200u;
}
inline int64_t BookmarkSpecifics::_internal_last_used_time_us() const {
  return last_used_time_us_;
}
inline int64_t BookmarkSpecifics::last_used_time_us() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.last_used_time_us)
  return _internal_last_used_time_us();
}
inline void BookmarkSpecifics::_internal_set_last_used_time_us(int64_t value) {
  _has_bits_[0] |= 0x00000200u;
  last_used_time_us_ = value;
}
inline void BookmarkSpecifics::set_last_used_time_us(int64_t value) {
  _internal_set_last_used_time_us(value);
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.last_used_time_us)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::BookmarkSpecifics_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fbookmark_5fspecifics_2eproto
