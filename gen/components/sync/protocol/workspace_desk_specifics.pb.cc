// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/workspace_desk_specifics.proto

#include "components/sync/protocol/workspace_desk_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_Desk::WorkspaceDeskSpecifics_Desk(
    ::_pbi::ConstantInitialized)
  : apps_(){}
struct WorkspaceDeskSpecifics_DeskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_DeskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_DeskDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_Desk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_DeskDefaultTypeInternal _WorkspaceDeskSpecifics_Desk_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_App::WorkspaceDeskSpecifics_App(
    ::_pbi::ConstantInitialized)
  : app_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , window_bound_(nullptr)
  , app_(nullptr)
  , window_state_(0)

  , z_index_(0)
  , display_id_(int64_t{0})
  , window_id_(0)
  , pre_minimized_window_state_(0)

  , container_(0)

  , disposition_(0)

  , snap_percentage_(0){}
struct WorkspaceDeskSpecifics_AppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_AppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_AppDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_AppDefaultTypeInternal _WorkspaceDeskSpecifics_App_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_AppOneOf::WorkspaceDeskSpecifics_AppOneOf(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct WorkspaceDeskSpecifics_AppOneOfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_AppOneOfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_AppOneOfDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_AppOneOf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_AppOneOfDefaultTypeInternal _WorkspaceDeskSpecifics_AppOneOf_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTabDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTabDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTabDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTabDefaultTypeInternal _WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , first_index_(0)
  , last_index_(0)
  , color_(0)

  , is_collapsed_(false){}
struct WorkspaceDeskSpecifics_BrowserAppWindow_TabGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindow_TabGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_BrowserAppWindow_TabGroupDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_BrowserAppWindow_TabGroupDefaultTypeInternal _WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindow::WorkspaceDeskSpecifics_BrowserAppWindow(
    ::_pbi::ConstantInitialized)
  : tabs_()
  , tab_groups_()
  , active_tab_index_(0)
  , show_as_app_(false)
  , first_non_pinned_tab_index_(0){}
struct WorkspaceDeskSpecifics_BrowserAppWindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_BrowserAppWindowDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_BrowserAppWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_BrowserAppWindowDefaultTypeInternal _WorkspaceDeskSpecifics_BrowserAppWindow_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ChromeApp::WorkspaceDeskSpecifics_ChromeApp(
    ::_pbi::ConstantInitialized)
  : app_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WorkspaceDeskSpecifics_ChromeAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ChromeAppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_ChromeAppDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_ChromeApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_ChromeAppDefaultTypeInternal _WorkspaceDeskSpecifics_ChromeApp_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ProgressiveWebApp::WorkspaceDeskSpecifics_ProgressiveWebApp(
    ::_pbi::ConstantInitialized)
  : app_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WorkspaceDeskSpecifics_ProgressiveWebAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ProgressiveWebAppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_ProgressiveWebAppDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_ProgressiveWebApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_ProgressiveWebAppDefaultTypeInternal _WorkspaceDeskSpecifics_ProgressiveWebApp_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ArcApp_WindowSize::WorkspaceDeskSpecifics_ArcApp_WindowSize(
    ::_pbi::ConstantInitialized)
  : width_(0)
  , height_(0){}
struct WorkspaceDeskSpecifics_ArcApp_WindowSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ArcApp_WindowSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_ArcApp_WindowSizeDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_ArcApp_WindowSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_ArcApp_WindowSizeDefaultTypeInternal _WorkspaceDeskSpecifics_ArcApp_WindowSize_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ArcApp::WorkspaceDeskSpecifics_ArcApp(
    ::_pbi::ConstantInitialized)
  : app_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , minimum_size_(nullptr)
  , maximum_size_(nullptr)
  , bounds_in_root_(nullptr){}
struct WorkspaceDeskSpecifics_ArcAppDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ArcAppDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_ArcAppDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_ArcApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_ArcAppDefaultTypeInternal _WorkspaceDeskSpecifics_ArcApp_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_WindowBound::WorkspaceDeskSpecifics_WindowBound(
    ::_pbi::ConstantInitialized)
  : top_(0)
  , left_(0)
  , width_(0)
  , height_(0){}
struct WorkspaceDeskSpecifics_WindowBoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_WindowBoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecifics_WindowBoundDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics_WindowBound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecifics_WindowBoundDefaultTypeInternal _WorkspaceDeskSpecifics_WindowBound_default_instance_;
PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics::WorkspaceDeskSpecifics(
    ::_pbi::ConstantInitialized)
  : uuid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desk_(nullptr)
  , created_time_windows_epoch_micros_(int64_t{0})
  , updated_time_windows_epoch_micros_(int64_t{0})
  , desk_type_(0)
{}
struct WorkspaceDeskSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkspaceDeskSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkspaceDeskSpecificsDefaultTypeInternal() {}
  union {
    WorkspaceDeskSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkspaceDeskSpecificsDefaultTypeInternal _WorkspaceDeskSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool WorkspaceDeskSpecifics_LaunchContainer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WorkspaceDeskSpecifics_LaunchContainer_strings[5] = {};

static const char WorkspaceDeskSpecifics_LaunchContainer_names[] =
  "LAUNCH_CONTAINER_NONE"
  "LAUNCH_CONTAINER_PANEL_DEPRECATED"
  "LAUNCH_CONTAINER_TAB"
  "LAUNCH_CONTAINER_UNSPECIFIED"
  "LAUNCH_CONTAINER_WINDOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WorkspaceDeskSpecifics_LaunchContainer_entries[] = {
  { {WorkspaceDeskSpecifics_LaunchContainer_names + 0, 21}, 4 },
  { {WorkspaceDeskSpecifics_LaunchContainer_names + 21, 33}, 2 },
  { {WorkspaceDeskSpecifics_LaunchContainer_names + 54, 20}, 3 },
  { {WorkspaceDeskSpecifics_LaunchContainer_names + 74, 28}, 0 },
  { {WorkspaceDeskSpecifics_LaunchContainer_names + 102, 23}, 1 },
};

static const int WorkspaceDeskSpecifics_LaunchContainer_entries_by_number[] = {
  3, // 0 -> LAUNCH_CONTAINER_UNSPECIFIED
  4, // 1 -> LAUNCH_CONTAINER_WINDOW
  1, // 2 -> LAUNCH_CONTAINER_PANEL_DEPRECATED
  2, // 3 -> LAUNCH_CONTAINER_TAB
  0, // 4 -> LAUNCH_CONTAINER_NONE
};

const std::string& WorkspaceDeskSpecifics_LaunchContainer_Name(
    WorkspaceDeskSpecifics_LaunchContainer value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WorkspaceDeskSpecifics_LaunchContainer_entries,
          WorkspaceDeskSpecifics_LaunchContainer_entries_by_number,
          5, WorkspaceDeskSpecifics_LaunchContainer_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WorkspaceDeskSpecifics_LaunchContainer_entries,
      WorkspaceDeskSpecifics_LaunchContainer_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WorkspaceDeskSpecifics_LaunchContainer_strings[idx].get();
}
bool WorkspaceDeskSpecifics_LaunchContainer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_LaunchContainer* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WorkspaceDeskSpecifics_LaunchContainer_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WorkspaceDeskSpecifics_LaunchContainer>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics::LAUNCH_CONTAINER_UNSPECIFIED;
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics::LAUNCH_CONTAINER_WINDOW;
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics::LAUNCH_CONTAINER_PANEL_DEPRECATED;
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics::LAUNCH_CONTAINER_TAB;
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics::LAUNCH_CONTAINER_NONE;
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics::LaunchContainer_MIN;
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics::LaunchContainer_MAX;
constexpr int WorkspaceDeskSpecifics::LaunchContainer_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WorkspaceDeskSpecifics_WindowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WorkspaceDeskSpecifics_WindowState_strings[7] = {};

static const char WorkspaceDeskSpecifics_WindowState_names[] =
  "FULLSCREEN"
  "MAXIMIZED"
  "MINIMIZED"
  "NORMAL"
  "PRIMARY_SNAPPED"
  "SECONDARY_SNAPPED"
  "UNKNOWN_WINDOW_STATE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WorkspaceDeskSpecifics_WindowState_entries[] = {
  { {WorkspaceDeskSpecifics_WindowState_names + 0, 10}, 4 },
  { {WorkspaceDeskSpecifics_WindowState_names + 10, 9}, 3 },
  { {WorkspaceDeskSpecifics_WindowState_names + 19, 9}, 2 },
  { {WorkspaceDeskSpecifics_WindowState_names + 28, 6}, 1 },
  { {WorkspaceDeskSpecifics_WindowState_names + 34, 15}, 5 },
  { {WorkspaceDeskSpecifics_WindowState_names + 49, 17}, 6 },
  { {WorkspaceDeskSpecifics_WindowState_names + 66, 20}, 0 },
};

static const int WorkspaceDeskSpecifics_WindowState_entries_by_number[] = {
  6, // 0 -> UNKNOWN_WINDOW_STATE
  3, // 1 -> NORMAL
  2, // 2 -> MINIMIZED
  1, // 3 -> MAXIMIZED
  0, // 4 -> FULLSCREEN
  4, // 5 -> PRIMARY_SNAPPED
  5, // 6 -> SECONDARY_SNAPPED
};

const std::string& WorkspaceDeskSpecifics_WindowState_Name(
    WorkspaceDeskSpecifics_WindowState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WorkspaceDeskSpecifics_WindowState_entries,
          WorkspaceDeskSpecifics_WindowState_entries_by_number,
          7, WorkspaceDeskSpecifics_WindowState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WorkspaceDeskSpecifics_WindowState_entries,
      WorkspaceDeskSpecifics_WindowState_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WorkspaceDeskSpecifics_WindowState_strings[idx].get();
}
bool WorkspaceDeskSpecifics_WindowState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_WindowState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WorkspaceDeskSpecifics_WindowState_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<WorkspaceDeskSpecifics_WindowState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::UNKNOWN_WINDOW_STATE;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::NORMAL;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::MINIMIZED;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::MAXIMIZED;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::FULLSCREEN;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::PRIMARY_SNAPPED;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::SECONDARY_SNAPPED;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::WindowState_MIN;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics::WindowState_MAX;
constexpr int WorkspaceDeskSpecifics::WindowState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WorkspaceDeskSpecifics_WindowOpenDisposition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WorkspaceDeskSpecifics_WindowOpenDisposition_strings[12] = {};

static const char WorkspaceDeskSpecifics_WindowOpenDisposition_names[] =
  "CURRENT_TAB"
  "IGNORE_ACTION"
  "NEW_BACKGROUND_TAB"
  "NEW_FOREGROUND_TAB"
  "NEW_PICTURE_IN_PICTURE"
  "NEW_POPUP"
  "NEW_WINDOW"
  "OFF_THE_RECORD"
  "SAVE_TO_DISK"
  "SINGLETON_TAB"
  "SWITCH_TO_TAB"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WorkspaceDeskSpecifics_WindowOpenDisposition_entries[] = {
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 0, 11}, 1 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 11, 13}, 9 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 24, 18}, 4 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 42, 18}, 3 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 60, 22}, 11 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 82, 9}, 5 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 91, 10}, 6 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 101, 14}, 8 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 115, 12}, 7 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 127, 13}, 2 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 140, 13}, 10 },
  { {WorkspaceDeskSpecifics_WindowOpenDisposition_names + 153, 7}, 0 },
};

static const int WorkspaceDeskSpecifics_WindowOpenDisposition_entries_by_number[] = {
  11, // 0 -> UNKNOWN
  0, // 1 -> CURRENT_TAB
  9, // 2 -> SINGLETON_TAB
  3, // 3 -> NEW_FOREGROUND_TAB
  2, // 4 -> NEW_BACKGROUND_TAB
  5, // 5 -> NEW_POPUP
  6, // 6 -> NEW_WINDOW
  8, // 7 -> SAVE_TO_DISK
  7, // 8 -> OFF_THE_RECORD
  1, // 9 -> IGNORE_ACTION
  10, // 10 -> SWITCH_TO_TAB
  4, // 11 -> NEW_PICTURE_IN_PICTURE
};

const std::string& WorkspaceDeskSpecifics_WindowOpenDisposition_Name(
    WorkspaceDeskSpecifics_WindowOpenDisposition value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WorkspaceDeskSpecifics_WindowOpenDisposition_entries,
          WorkspaceDeskSpecifics_WindowOpenDisposition_entries_by_number,
          12, WorkspaceDeskSpecifics_WindowOpenDisposition_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WorkspaceDeskSpecifics_WindowOpenDisposition_entries,
      WorkspaceDeskSpecifics_WindowOpenDisposition_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WorkspaceDeskSpecifics_WindowOpenDisposition_strings[idx].get();
}
bool WorkspaceDeskSpecifics_WindowOpenDisposition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_WindowOpenDisposition* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WorkspaceDeskSpecifics_WindowOpenDisposition_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<WorkspaceDeskSpecifics_WindowOpenDisposition>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::UNKNOWN;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::CURRENT_TAB;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::SINGLETON_TAB;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::NEW_FOREGROUND_TAB;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::NEW_BACKGROUND_TAB;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::NEW_POPUP;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::NEW_WINDOW;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::SAVE_TO_DISK;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::OFF_THE_RECORD;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::IGNORE_ACTION;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::SWITCH_TO_TAB;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::NEW_PICTURE_IN_PICTURE;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::WindowOpenDisposition_MIN;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics::WindowOpenDisposition_MAX;
constexpr int WorkspaceDeskSpecifics::WindowOpenDisposition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WorkspaceDeskSpecifics_DeskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WorkspaceDeskSpecifics_DeskType_strings[3] = {};

static const char WorkspaceDeskSpecifics_DeskType_names[] =
  "SAVE_AND_RECALL"
  "TEMPLATE"
  "UNKNOWN_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WorkspaceDeskSpecifics_DeskType_entries[] = {
  { {WorkspaceDeskSpecifics_DeskType_names + 0, 15}, 2 },
  { {WorkspaceDeskSpecifics_DeskType_names + 15, 8}, 1 },
  { {WorkspaceDeskSpecifics_DeskType_names + 23, 12}, 0 },
};

static const int WorkspaceDeskSpecifics_DeskType_entries_by_number[] = {
  2, // 0 -> UNKNOWN_TYPE
  1, // 1 -> TEMPLATE
  0, // 2 -> SAVE_AND_RECALL
};

const std::string& WorkspaceDeskSpecifics_DeskType_Name(
    WorkspaceDeskSpecifics_DeskType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WorkspaceDeskSpecifics_DeskType_entries,
          WorkspaceDeskSpecifics_DeskType_entries_by_number,
          3, WorkspaceDeskSpecifics_DeskType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WorkspaceDeskSpecifics_DeskType_entries,
      WorkspaceDeskSpecifics_DeskType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WorkspaceDeskSpecifics_DeskType_strings[idx].get();
}
bool WorkspaceDeskSpecifics_DeskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_DeskType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WorkspaceDeskSpecifics_DeskType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WorkspaceDeskSpecifics_DeskType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics::UNKNOWN_TYPE;
constexpr WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics::TEMPLATE;
constexpr WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics::SAVE_AND_RECALL;
constexpr WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics::DeskType_MIN;
constexpr WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics::DeskType_MAX;
constexpr int WorkspaceDeskSpecifics::DeskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WorkspaceDeskSpecifics_TabGroupColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WorkspaceDeskSpecifics_TabGroupColor_strings[10] = {};

static const char WorkspaceDeskSpecifics_TabGroupColor_names[] =
  "BLUE"
  "CYAN"
  "GREEN"
  "GREY"
  "ORANGE"
  "PINK"
  "PURPLE"
  "RED"
  "UNKNOWN_COLOR"
  "YELLOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WorkspaceDeskSpecifics_TabGroupColor_entries[] = {
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 0, 4}, 2 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 4, 4}, 8 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 8, 5}, 5 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 13, 4}, 1 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 17, 6}, 9 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 23, 4}, 6 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 27, 6}, 7 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 33, 3}, 3 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 36, 13}, 0 },
  { {WorkspaceDeskSpecifics_TabGroupColor_names + 49, 6}, 4 },
};

static const int WorkspaceDeskSpecifics_TabGroupColor_entries_by_number[] = {
  8, // 0 -> UNKNOWN_COLOR
  3, // 1 -> GREY
  0, // 2 -> BLUE
  7, // 3 -> RED
  9, // 4 -> YELLOW
  2, // 5 -> GREEN
  5, // 6 -> PINK
  6, // 7 -> PURPLE
  1, // 8 -> CYAN
  4, // 9 -> ORANGE
};

const std::string& WorkspaceDeskSpecifics_TabGroupColor_Name(
    WorkspaceDeskSpecifics_TabGroupColor value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WorkspaceDeskSpecifics_TabGroupColor_entries,
          WorkspaceDeskSpecifics_TabGroupColor_entries_by_number,
          10, WorkspaceDeskSpecifics_TabGroupColor_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WorkspaceDeskSpecifics_TabGroupColor_entries,
      WorkspaceDeskSpecifics_TabGroupColor_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WorkspaceDeskSpecifics_TabGroupColor_strings[idx].get();
}
bool WorkspaceDeskSpecifics_TabGroupColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_TabGroupColor* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WorkspaceDeskSpecifics_TabGroupColor_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<WorkspaceDeskSpecifics_TabGroupColor>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::UNKNOWN_COLOR;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::GREY;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::BLUE;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::RED;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::YELLOW;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::GREEN;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::PINK;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::PURPLE;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::CYAN;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::ORANGE;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::TabGroupColor_MIN;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics::TabGroupColor_MAX;
constexpr int WorkspaceDeskSpecifics::TabGroupColor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WorkspaceDeskSpecifics_Desk::_Internal {
 public:
};

WorkspaceDeskSpecifics_Desk::WorkspaceDeskSpecifics_Desk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.Desk)
}
WorkspaceDeskSpecifics_Desk::WorkspaceDeskSpecifics_Desk(const WorkspaceDeskSpecifics_Desk& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.Desk)
}

inline void WorkspaceDeskSpecifics_Desk::SharedCtor() {
}

WorkspaceDeskSpecifics_Desk::~WorkspaceDeskSpecifics_Desk() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.Desk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_Desk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceDeskSpecifics_Desk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_Desk::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.Desk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_Desk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sync_pb.WorkspaceDeskSpecifics.App apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_Desk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.Desk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.WorkspaceDeskSpecifics.App apps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_apps_size()); i < n; i++) {
    const auto& repfield = this->_internal_apps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.Desk)
  return target;
}

size_t WorkspaceDeskSpecifics_Desk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.Desk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.WorkspaceDeskSpecifics.App apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_Desk::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_Desk*>(
      &from));
}

void WorkspaceDeskSpecifics_Desk::MergeFrom(const WorkspaceDeskSpecifics_Desk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.Desk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_Desk::CopyFrom(const WorkspaceDeskSpecifics_Desk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.Desk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_Desk::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_Desk::InternalSwap(WorkspaceDeskSpecifics_Desk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
}

std::string WorkspaceDeskSpecifics_Desk::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.Desk";
}


// ===================================================================

class WorkspaceDeskSpecifics_App::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_App>()._has_bits_);
  static const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& window_bound(const WorkspaceDeskSpecifics_App* msg);
  static void set_has_window_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_window_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::WorkspaceDeskSpecifics_AppOneOf& app(const WorkspaceDeskSpecifics_App* msg);
  static void set_has_app(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pre_minimized_window_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_container(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_disposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_snap_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::sync_pb::WorkspaceDeskSpecifics_WindowBound&
WorkspaceDeskSpecifics_App::_Internal::window_bound(const WorkspaceDeskSpecifics_App* msg) {
  return *msg->window_bound_;
}
const ::sync_pb::WorkspaceDeskSpecifics_AppOneOf&
WorkspaceDeskSpecifics_App::_Internal::app(const WorkspaceDeskSpecifics_App* msg) {
  return *msg->app_;
}
WorkspaceDeskSpecifics_App::WorkspaceDeskSpecifics_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.App)
}
WorkspaceDeskSpecifics_App::WorkspaceDeskSpecifics_App(const WorkspaceDeskSpecifics_App& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    app_name_.Set(from._internal_app_name(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_window_bound()) {
    window_bound_ = new ::sync_pb::WorkspaceDeskSpecifics_WindowBound(*from.window_bound_);
  } else {
    window_bound_ = nullptr;
  }
  if (from._internal_has_app()) {
    app_ = new ::sync_pb::WorkspaceDeskSpecifics_AppOneOf(*from.app_);
  } else {
    app_ = nullptr;
  }
  ::memcpy(&window_state_, &from.window_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&snap_percentage_) -
    reinterpret_cast<char*>(&window_state_)) + sizeof(snap_percentage_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.App)
}

inline void WorkspaceDeskSpecifics_App::SharedCtor() {
app_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&window_bound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&snap_percentage_) -
    reinterpret_cast<char*>(&window_bound_)) + sizeof(snap_percentage_));
}

WorkspaceDeskSpecifics_App::~WorkspaceDeskSpecifics_App() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.App)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_name_.Destroy();
  title_.Destroy();
  if (this != internal_default_instance()) delete window_bound_;
  if (this != internal_default_instance()) delete app_;
}

void WorkspaceDeskSpecifics_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_App::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.App)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(window_bound_ != nullptr);
      window_bound_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(app_ != nullptr);
      app_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&window_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&window_id_) -
        reinterpret_cast<char*>(&window_state_)) + sizeof(window_id_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&pre_minimized_window_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&snap_percentage_) -
        reinterpret_cast<char*>(&pre_minimized_window_state_)) + sizeof(snap_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_App::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.WorkspaceDeskSpecifics.WindowBound window_bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_bound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.WindowState window_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WorkspaceDeskSpecifics_WindowState_IsValid(val))) {
            _internal_set_window_state(static_cast<::sync_pb::WorkspaceDeskSpecifics_WindowState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 z_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_z_index(&has_bits);
          z_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.AppOneOf app = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 window_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_window_id(&has_bits);
          window_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 display_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_display_id(&has_bits);
          display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.WindowState pre_minimized_window_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WorkspaceDeskSpecifics_WindowState_IsValid(val))) {
            _internal_set_pre_minimized_window_state(static_cast<::sync_pb::WorkspaceDeskSpecifics_WindowState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.LaunchContainer container = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WorkspaceDeskSpecifics_LaunchContainer_IsValid(val))) {
            _internal_set_container(static_cast<::sync_pb::WorkspaceDeskSpecifics_LaunchContainer>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.WindowOpenDisposition disposition = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition_IsValid(val))) {
            _internal_set_disposition(static_cast<::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string app_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 snap_percentage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_snap_percentage(&has_bits);
          snap_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_App::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.App)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.WorkspaceDeskSpecifics.WindowBound window_bound = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::window_bound(this),
        _Internal::window_bound(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowState window_state = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_window_state(), target);
  }

  // optional int32 z_index = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_z_index(), target);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.AppOneOf app = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::app(this),
        _Internal::app(this).GetCachedSize(), target, stream);
  }

  // optional int32 window_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_window_id(), target);
  }

  // optional int64 display_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_display_id(), target);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowState pre_minimized_window_state = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_pre_minimized_window_state(), target);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.LaunchContainer container = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_container(), target);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowOpenDisposition disposition = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_disposition(), target);
  }

  // optional string app_name = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_app_name(), target);
  }

  // optional string title = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_title(), target);
  }

  // optional int32 snap_percentage = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_snap_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.App)
  return target;
}

size_t WorkspaceDeskSpecifics_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.App)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string app_name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_name());
    }

    // optional string title = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.WindowBound window_bound = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_bound_);
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.AppOneOf app = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_);
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.WindowState window_state = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_window_state());
    }

    // optional int32 z_index = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z_index());
    }

    // optional int64 display_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_display_id());
    }

    // optional int32 window_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_window_id());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .sync_pb.WorkspaceDeskSpecifics.WindowState pre_minimized_window_state = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pre_minimized_window_state());
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.LaunchContainer container = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_container());
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.WindowOpenDisposition disposition = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_disposition());
    }

    // optional int32 snap_percentage = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_snap_percentage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_App::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_App*>(
      &from));
}

void WorkspaceDeskSpecifics_App::MergeFrom(const WorkspaceDeskSpecifics_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.App)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_window_bound()->::sync_pb::WorkspaceDeskSpecifics_WindowBound::MergeFrom(from._internal_window_bound());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_app()->::sync_pb::WorkspaceDeskSpecifics_AppOneOf::MergeFrom(from._internal_app());
    }
    if (cached_has_bits & 0x00000010u) {
      window_state_ = from.window_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_index_ = from.z_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      display_id_ = from.display_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      window_id_ = from.window_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      pre_minimized_window_state_ = from.pre_minimized_window_state_;
    }
    if (cached_has_bits & 0x00000200u) {
      container_ = from.container_;
    }
    if (cached_has_bits & 0x00000400u) {
      disposition_ = from.disposition_;
    }
    if (cached_has_bits & 0x00000800u) {
      snap_percentage_ = from.snap_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_App::CopyFrom(const WorkspaceDeskSpecifics_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_App::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_App::InternalSwap(WorkspaceDeskSpecifics_App* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_name_, lhs_arena,
      &other->app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_App, snap_percentage_)
      + sizeof(WorkspaceDeskSpecifics_App::snap_percentage_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_App, window_bound_)>(
          reinterpret_cast<char*>(&window_bound_),
          reinterpret_cast<char*>(&other->window_bound_));
}

std::string WorkspaceDeskSpecifics_App::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.App";
}


// ===================================================================

class WorkspaceDeskSpecifics_AppOneOf::_Internal {
 public:
  static const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow& browser_app_window(const WorkspaceDeskSpecifics_AppOneOf* msg);
  static const ::sync_pb::WorkspaceDeskSpecifics_ChromeApp& chrome_app(const WorkspaceDeskSpecifics_AppOneOf* msg);
  static const ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp& progress_web_app(const WorkspaceDeskSpecifics_AppOneOf* msg);
  static const ::sync_pb::WorkspaceDeskSpecifics_ArcApp& arc_app(const WorkspaceDeskSpecifics_AppOneOf* msg);
};

const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow&
WorkspaceDeskSpecifics_AppOneOf::_Internal::browser_app_window(const WorkspaceDeskSpecifics_AppOneOf* msg) {
  return *msg->app_.browser_app_window_;
}
const ::sync_pb::WorkspaceDeskSpecifics_ChromeApp&
WorkspaceDeskSpecifics_AppOneOf::_Internal::chrome_app(const WorkspaceDeskSpecifics_AppOneOf* msg) {
  return *msg->app_.chrome_app_;
}
const ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp&
WorkspaceDeskSpecifics_AppOneOf::_Internal::progress_web_app(const WorkspaceDeskSpecifics_AppOneOf* msg) {
  return *msg->app_.progress_web_app_;
}
const ::sync_pb::WorkspaceDeskSpecifics_ArcApp&
WorkspaceDeskSpecifics_AppOneOf::_Internal::arc_app(const WorkspaceDeskSpecifics_AppOneOf* msg) {
  return *msg->app_.arc_app_;
}
void WorkspaceDeskSpecifics_AppOneOf::set_allocated_browser_app_window(::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* browser_app_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_app();
  if (browser_app_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(browser_app_window);
    if (message_arena != submessage_arena) {
      browser_app_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, browser_app_window, submessage_arena);
    }
    set_has_browser_app_window();
    app_.browser_app_window_ = browser_app_window;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.AppOneOf.browser_app_window)
}
void WorkspaceDeskSpecifics_AppOneOf::set_allocated_chrome_app(::sync_pb::WorkspaceDeskSpecifics_ChromeApp* chrome_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_app();
  if (chrome_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_app);
    if (message_arena != submessage_arena) {
      chrome_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_app, submessage_arena);
    }
    set_has_chrome_app();
    app_.chrome_app_ = chrome_app;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.AppOneOf.chrome_app)
}
void WorkspaceDeskSpecifics_AppOneOf::set_allocated_progress_web_app(::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* progress_web_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_app();
  if (progress_web_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(progress_web_app);
    if (message_arena != submessage_arena) {
      progress_web_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_web_app, submessage_arena);
    }
    set_has_progress_web_app();
    app_.progress_web_app_ = progress_web_app;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.AppOneOf.progress_web_app)
}
void WorkspaceDeskSpecifics_AppOneOf::set_allocated_arc_app(::sync_pb::WorkspaceDeskSpecifics_ArcApp* arc_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_app();
  if (arc_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(arc_app);
    if (message_arena != submessage_arena) {
      arc_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_app, submessage_arena);
    }
    set_has_arc_app();
    app_.arc_app_ = arc_app;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.AppOneOf.arc_app)
}
WorkspaceDeskSpecifics_AppOneOf::WorkspaceDeskSpecifics_AppOneOf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
}
WorkspaceDeskSpecifics_AppOneOf::WorkspaceDeskSpecifics_AppOneOf(const WorkspaceDeskSpecifics_AppOneOf& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_app();
  switch (from.app_case()) {
    case kBrowserAppWindow: {
      _internal_mutable_browser_app_window()->::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow::MergeFrom(from._internal_browser_app_window());
      break;
    }
    case kChromeApp: {
      _internal_mutable_chrome_app()->::sync_pb::WorkspaceDeskSpecifics_ChromeApp::MergeFrom(from._internal_chrome_app());
      break;
    }
    case kProgressWebApp: {
      _internal_mutable_progress_web_app()->::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp::MergeFrom(from._internal_progress_web_app());
      break;
    }
    case kArcApp: {
      _internal_mutable_arc_app()->::sync_pb::WorkspaceDeskSpecifics_ArcApp::MergeFrom(from._internal_arc_app());
      break;
    }
    case APP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
}

inline void WorkspaceDeskSpecifics_AppOneOf::SharedCtor() {
clear_has_app();
}

WorkspaceDeskSpecifics_AppOneOf::~WorkspaceDeskSpecifics_AppOneOf() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_AppOneOf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_app()) {
    clear_app();
  }
}

void WorkspaceDeskSpecifics_AppOneOf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_AppOneOf::clear_app() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
  switch (app_case()) {
    case kBrowserAppWindow: {
      if (GetArenaForAllocation() == nullptr) {
        delete app_.browser_app_window_;
      }
      break;
    }
    case kChromeApp: {
      if (GetArenaForAllocation() == nullptr) {
        delete app_.chrome_app_;
      }
      break;
    }
    case kProgressWebApp: {
      if (GetArenaForAllocation() == nullptr) {
        delete app_.progress_web_app_;
      }
      break;
    }
    case kArcApp: {
      if (GetArenaForAllocation() == nullptr) {
        delete app_.arc_app_;
      }
      break;
    }
    case APP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = APP_NOT_SET;
}


void WorkspaceDeskSpecifics_AppOneOf::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_app();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_AppOneOf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow browser_app_window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_browser_app_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.WorkspaceDeskSpecifics.ChromeApp chrome_app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp progress_web_app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress_web_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.WorkspaceDeskSpecifics.ArcApp arc_app = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_AppOneOf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (app_case()) {
    case kBrowserAppWindow: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::browser_app_window(this),
          _Internal::browser_app_window(this).GetCachedSize(), target, stream);
      break;
    }
    case kChromeApp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::chrome_app(this),
          _Internal::chrome_app(this).GetCachedSize(), target, stream);
      break;
    }
    case kProgressWebApp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::progress_web_app(this),
          _Internal::progress_web_app(this).GetCachedSize(), target, stream);
      break;
    }
    case kArcApp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::arc_app(this),
          _Internal::arc_app(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
  return target;
}

size_t WorkspaceDeskSpecifics_AppOneOf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (app_case()) {
    // .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow browser_app_window = 1;
    case kBrowserAppWindow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_.browser_app_window_);
      break;
    }
    // .sync_pb.WorkspaceDeskSpecifics.ChromeApp chrome_app = 2;
    case kChromeApp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_.chrome_app_);
      break;
    }
    // .sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp progress_web_app = 3;
    case kProgressWebApp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_.progress_web_app_);
      break;
    }
    // .sync_pb.WorkspaceDeskSpecifics.ArcApp arc_app = 4;
    case kArcApp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_.arc_app_);
      break;
    }
    case APP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_AppOneOf::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_AppOneOf*>(
      &from));
}

void WorkspaceDeskSpecifics_AppOneOf::MergeFrom(const WorkspaceDeskSpecifics_AppOneOf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.app_case()) {
    case kBrowserAppWindow: {
      _internal_mutable_browser_app_window()->::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow::MergeFrom(from._internal_browser_app_window());
      break;
    }
    case kChromeApp: {
      _internal_mutable_chrome_app()->::sync_pb::WorkspaceDeskSpecifics_ChromeApp::MergeFrom(from._internal_chrome_app());
      break;
    }
    case kProgressWebApp: {
      _internal_mutable_progress_web_app()->::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp::MergeFrom(from._internal_progress_web_app());
      break;
    }
    case kArcApp: {
      _internal_mutable_arc_app()->::sync_pb::WorkspaceDeskSpecifics_ArcApp::MergeFrom(from._internal_arc_app());
      break;
    }
    case APP_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_AppOneOf::CopyFrom(const WorkspaceDeskSpecifics_AppOneOf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_AppOneOf::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_AppOneOf::InternalSwap(WorkspaceDeskSpecifics_AppOneOf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(app_, other->app_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string WorkspaceDeskSpecifics_AppOneOf::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.AppOneOf";
}


// ===================================================================

class WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
}
WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab(const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
}

inline void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::~WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  title_.Destroy();
}

void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
  return target;
}

size_t WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab*>(
      &from));
}

void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::MergeFrom(const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::CopyFrom(const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::InternalSwap(WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
}

std::string WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab";
}


// ===================================================================

class WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup>()._has_bits_);
  static void set_has_first_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
}
WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup(const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  ::memcpy(&first_index_, &from.first_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_collapsed_) -
    reinterpret_cast<char*>(&first_index_)) + sizeof(is_collapsed_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
}

inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_collapsed_) -
    reinterpret_cast<char*>(&first_index_)) + sizeof(is_collapsed_));
}

WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::~WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
}

void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&first_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_collapsed_) -
        reinterpret_cast<char*>(&first_index_)) + sizeof(is_collapsed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 first_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_first_index(&has_bits);
          first_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_index(&has_bits);
          last_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.TabGroupColor color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WorkspaceDeskSpecifics_TabGroupColor_IsValid(val))) {
            _internal_set_color(static_cast<::sync_pb::WorkspaceDeskSpecifics_TabGroupColor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_collapsed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_collapsed(&has_bits);
          is_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 first_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_first_index(), target);
  }

  // optional int32 last_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_last_index(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.TabGroupColor color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_color(), target);
  }

  // optional bool is_collapsed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_collapsed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
  return target;
}

size_t WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional int32 first_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first_index());
    }

    // optional int32 last_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_index());
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.TabGroupColor color = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool is_collapsed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup*>(
      &from));
}

void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::MergeFrom(const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      first_index_ = from.first_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_index_ = from.last_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_collapsed_ = from.is_collapsed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::CopyFrom(const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::InternalSwap(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup, is_collapsed_)
      + sizeof(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::is_collapsed_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup, first_index_)>(
          reinterpret_cast<char*>(&first_index_),
          reinterpret_cast<char*>(&other->first_index_));
}

std::string WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup";
}


// ===================================================================

class WorkspaceDeskSpecifics_BrowserAppWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_BrowserAppWindow>()._has_bits_);
  static void set_has_active_tab_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_as_app(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_non_pinned_tab_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WorkspaceDeskSpecifics_BrowserAppWindow::WorkspaceDeskSpecifics_BrowserAppWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tabs_(arena),
  tab_groups_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
}
WorkspaceDeskSpecifics_BrowserAppWindow::WorkspaceDeskSpecifics_BrowserAppWindow(const WorkspaceDeskSpecifics_BrowserAppWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      tabs_(from.tabs_),
      tab_groups_(from.tab_groups_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&active_tab_index_, &from.active_tab_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_non_pinned_tab_index_) -
    reinterpret_cast<char*>(&active_tab_index_)) + sizeof(first_non_pinned_tab_index_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
}

inline void WorkspaceDeskSpecifics_BrowserAppWindow::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&active_tab_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_non_pinned_tab_index_) -
    reinterpret_cast<char*>(&active_tab_index_)) + sizeof(first_non_pinned_tab_index_));
}

WorkspaceDeskSpecifics_BrowserAppWindow::~WorkspaceDeskSpecifics_BrowserAppWindow() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_BrowserAppWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceDeskSpecifics_BrowserAppWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_BrowserAppWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tabs_.Clear();
  tab_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&active_tab_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_non_pinned_tab_index_) -
        reinterpret_cast<char*>(&active_tab_index_)) + sizeof(first_non_pinned_tab_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_BrowserAppWindow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab tabs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 active_tab_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_active_tab_index(&has_bits);
          active_tab_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_as_app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_show_as_app(&has_bits);
          show_as_app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup tab_groups = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tab_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_non_pinned_tab_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_first_non_pinned_tab_index(&has_bits);
          first_non_pinned_tab_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_BrowserAppWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab tabs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tabs_size()); i < n; i++) {
    const auto& repfield = this->_internal_tabs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 active_tab_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_active_tab_index(), target);
  }

  // optional bool show_as_app = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_show_as_app(), target);
  }

  // repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup tab_groups = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tab_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_tab_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 first_non_pinned_tab_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_first_non_pinned_tab_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
  return target;
}

size_t WorkspaceDeskSpecifics_BrowserAppWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab tabs = 1;
  total_size += 1UL * this->_internal_tabs_size();
  for (const auto& msg : this->tabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup tab_groups = 4;
  total_size += 1UL * this->_internal_tab_groups_size();
  for (const auto& msg : this->tab_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 active_tab_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_active_tab_index());
    }

    // optional bool show_as_app = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 first_non_pinned_tab_index = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first_non_pinned_tab_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_BrowserAppWindow::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_BrowserAppWindow*>(
      &from));
}

void WorkspaceDeskSpecifics_BrowserAppWindow::MergeFrom(const WorkspaceDeskSpecifics_BrowserAppWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tabs_.MergeFrom(from.tabs_);
  tab_groups_.MergeFrom(from.tab_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      active_tab_index_ = from.active_tab_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_as_app_ = from.show_as_app_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_non_pinned_tab_index_ = from.first_non_pinned_tab_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_BrowserAppWindow::CopyFrom(const WorkspaceDeskSpecifics_BrowserAppWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_BrowserAppWindow::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_BrowserAppWindow::InternalSwap(WorkspaceDeskSpecifics_BrowserAppWindow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tabs_.InternalSwap(&other->tabs_);
  tab_groups_.InternalSwap(&other->tab_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_BrowserAppWindow, first_non_pinned_tab_index_)
      + sizeof(WorkspaceDeskSpecifics_BrowserAppWindow::first_non_pinned_tab_index_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_BrowserAppWindow, active_tab_index_)>(
          reinterpret_cast<char*>(&active_tab_index_),
          reinterpret_cast<char*>(&other->active_tab_index_));
}

std::string WorkspaceDeskSpecifics_BrowserAppWindow::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow";
}


// ===================================================================

class WorkspaceDeskSpecifics_ChromeApp::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_ChromeApp>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WorkspaceDeskSpecifics_ChromeApp::WorkspaceDeskSpecifics_ChromeApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
}
WorkspaceDeskSpecifics_ChromeApp::WorkspaceDeskSpecifics_ChromeApp(const WorkspaceDeskSpecifics_ChromeApp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_id()) {
    app_id_.Set(from._internal_app_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
}

inline void WorkspaceDeskSpecifics_ChromeApp::SharedCtor() {
app_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkspaceDeskSpecifics_ChromeApp::~WorkspaceDeskSpecifics_ChromeApp() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_ChromeApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.Destroy();
}

void WorkspaceDeskSpecifics_ChromeApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_ChromeApp::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    app_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_ChromeApp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_ChromeApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
  return target;
}

size_t WorkspaceDeskSpecifics_ChromeApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string app_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_ChromeApp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_ChromeApp*>(
      &from));
}

void WorkspaceDeskSpecifics_ChromeApp::MergeFrom(const WorkspaceDeskSpecifics_ChromeApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app_id()) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_ChromeApp::CopyFrom(const WorkspaceDeskSpecifics_ChromeApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_ChromeApp::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_ChromeApp::InternalSwap(WorkspaceDeskSpecifics_ChromeApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
}

std::string WorkspaceDeskSpecifics_ChromeApp::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.ChromeApp";
}


// ===================================================================

class WorkspaceDeskSpecifics_ProgressiveWebApp::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_ProgressiveWebApp>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WorkspaceDeskSpecifics_ProgressiveWebApp::WorkspaceDeskSpecifics_ProgressiveWebApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
}
WorkspaceDeskSpecifics_ProgressiveWebApp::WorkspaceDeskSpecifics_ProgressiveWebApp(const WorkspaceDeskSpecifics_ProgressiveWebApp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_id()) {
    app_id_.Set(from._internal_app_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
}

inline void WorkspaceDeskSpecifics_ProgressiveWebApp::SharedCtor() {
app_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkspaceDeskSpecifics_ProgressiveWebApp::~WorkspaceDeskSpecifics_ProgressiveWebApp() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_ProgressiveWebApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.Destroy();
}

void WorkspaceDeskSpecifics_ProgressiveWebApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_ProgressiveWebApp::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    app_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_ProgressiveWebApp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_ProgressiveWebApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
  return target;
}

size_t WorkspaceDeskSpecifics_ProgressiveWebApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string app_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_ProgressiveWebApp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_ProgressiveWebApp*>(
      &from));
}

void WorkspaceDeskSpecifics_ProgressiveWebApp::MergeFrom(const WorkspaceDeskSpecifics_ProgressiveWebApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app_id()) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_ProgressiveWebApp::CopyFrom(const WorkspaceDeskSpecifics_ProgressiveWebApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_ProgressiveWebApp::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_ProgressiveWebApp::InternalSwap(WorkspaceDeskSpecifics_ProgressiveWebApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
}

std::string WorkspaceDeskSpecifics_ProgressiveWebApp::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp";
}


// ===================================================================

class WorkspaceDeskSpecifics_ArcApp_WindowSize::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_ArcApp_WindowSize>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WorkspaceDeskSpecifics_ArcApp_WindowSize::WorkspaceDeskSpecifics_ArcApp_WindowSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
}
WorkspaceDeskSpecifics_ArcApp_WindowSize::WorkspaceDeskSpecifics_ArcApp_WindowSize(const WorkspaceDeskSpecifics_ArcApp_WindowSize& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
}

inline void WorkspaceDeskSpecifics_ArcApp_WindowSize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

WorkspaceDeskSpecifics_ArcApp_WindowSize::~WorkspaceDeskSpecifics_ArcApp_WindowSize() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_ArcApp_WindowSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceDeskSpecifics_ArcApp_WindowSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_ArcApp_WindowSize::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_ArcApp_WindowSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_ArcApp_WindowSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
  return target;
}

size_t WorkspaceDeskSpecifics_ArcApp_WindowSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_ArcApp_WindowSize::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_ArcApp_WindowSize*>(
      &from));
}

void WorkspaceDeskSpecifics_ArcApp_WindowSize::MergeFrom(const WorkspaceDeskSpecifics_ArcApp_WindowSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_ArcApp_WindowSize::CopyFrom(const WorkspaceDeskSpecifics_ArcApp_WindowSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_ArcApp_WindowSize::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_ArcApp_WindowSize::InternalSwap(WorkspaceDeskSpecifics_ArcApp_WindowSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_ArcApp_WindowSize, height_)
      + sizeof(WorkspaceDeskSpecifics_ArcApp_WindowSize::height_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_ArcApp_WindowSize, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

std::string WorkspaceDeskSpecifics_ArcApp_WindowSize::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize";
}


// ===================================================================

class WorkspaceDeskSpecifics_ArcApp::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_ArcApp>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& minimum_size(const WorkspaceDeskSpecifics_ArcApp* msg);
  static void set_has_minimum_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& maximum_size(const WorkspaceDeskSpecifics_ArcApp* msg);
  static void set_has_maximum_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& bounds_in_root(const WorkspaceDeskSpecifics_ArcApp* msg);
  static void set_has_bounds_in_root(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize&
WorkspaceDeskSpecifics_ArcApp::_Internal::minimum_size(const WorkspaceDeskSpecifics_ArcApp* msg) {
  return *msg->minimum_size_;
}
const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize&
WorkspaceDeskSpecifics_ArcApp::_Internal::maximum_size(const WorkspaceDeskSpecifics_ArcApp* msg) {
  return *msg->maximum_size_;
}
const ::sync_pb::WorkspaceDeskSpecifics_WindowBound&
WorkspaceDeskSpecifics_ArcApp::_Internal::bounds_in_root(const WorkspaceDeskSpecifics_ArcApp* msg) {
  return *msg->bounds_in_root_;
}
WorkspaceDeskSpecifics_ArcApp::WorkspaceDeskSpecifics_ArcApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.ArcApp)
}
WorkspaceDeskSpecifics_ArcApp::WorkspaceDeskSpecifics_ArcApp(const WorkspaceDeskSpecifics_ArcApp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_id()) {
    app_id_.Set(from._internal_app_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_minimum_size()) {
    minimum_size_ = new ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize(*from.minimum_size_);
  } else {
    minimum_size_ = nullptr;
  }
  if (from._internal_has_maximum_size()) {
    maximum_size_ = new ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize(*from.maximum_size_);
  } else {
    maximum_size_ = nullptr;
  }
  if (from._internal_has_bounds_in_root()) {
    bounds_in_root_ = new ::sync_pb::WorkspaceDeskSpecifics_WindowBound(*from.bounds_in_root_);
  } else {
    bounds_in_root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.ArcApp)
}

inline void WorkspaceDeskSpecifics_ArcApp::SharedCtor() {
app_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minimum_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bounds_in_root_) -
    reinterpret_cast<char*>(&minimum_size_)) + sizeof(bounds_in_root_));
}

WorkspaceDeskSpecifics_ArcApp::~WorkspaceDeskSpecifics_ArcApp() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.ArcApp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_ArcApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.Destroy();
  if (this != internal_default_instance()) delete minimum_size_;
  if (this != internal_default_instance()) delete maximum_size_;
  if (this != internal_default_instance()) delete bounds_in_root_;
}

void WorkspaceDeskSpecifics_ArcApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_ArcApp::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.ArcApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(minimum_size_ != nullptr);
      minimum_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(maximum_size_ != nullptr);
      maximum_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bounds_in_root_ != nullptr);
      bounds_in_root_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_ArcApp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize minimum_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize maximum_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximum_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.WindowBound bounds_in_root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds_in_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_ArcApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.ArcApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize minimum_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::minimum_size(this),
        _Internal::minimum_size(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize maximum_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::maximum_size(this),
        _Internal::maximum_size(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowBound bounds_in_root = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bounds_in_root(this),
        _Internal::bounds_in_root(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.ArcApp)
  return target;
}

size_t WorkspaceDeskSpecifics_ArcApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.ArcApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_id());
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize minimum_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *minimum_size_);
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize maximum_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maximum_size_);
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.WindowBound bounds_in_root = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bounds_in_root_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_ArcApp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_ArcApp*>(
      &from));
}

void WorkspaceDeskSpecifics_ArcApp::MergeFrom(const WorkspaceDeskSpecifics_ArcApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.ArcApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_id(from._internal_app_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_minimum_size()->::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize::MergeFrom(from._internal_minimum_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_maximum_size()->::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize::MergeFrom(from._internal_maximum_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_bounds_in_root()->::sync_pb::WorkspaceDeskSpecifics_WindowBound::MergeFrom(from._internal_bounds_in_root());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_ArcApp::CopyFrom(const WorkspaceDeskSpecifics_ArcApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.ArcApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_ArcApp::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_ArcApp::InternalSwap(WorkspaceDeskSpecifics_ArcApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_ArcApp, bounds_in_root_)
      + sizeof(WorkspaceDeskSpecifics_ArcApp::bounds_in_root_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_ArcApp, minimum_size_)>(
          reinterpret_cast<char*>(&minimum_size_),
          reinterpret_cast<char*>(&other->minimum_size_));
}

std::string WorkspaceDeskSpecifics_ArcApp::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.ArcApp";
}


// ===================================================================

class WorkspaceDeskSpecifics_WindowBound::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics_WindowBound>()._has_bits_);
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WorkspaceDeskSpecifics_WindowBound::WorkspaceDeskSpecifics_WindowBound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics.WindowBound)
}
WorkspaceDeskSpecifics_WindowBound::WorkspaceDeskSpecifics_WindowBound(const WorkspaceDeskSpecifics_WindowBound& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&top_, &from.top_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics.WindowBound)
}

inline void WorkspaceDeskSpecifics_WindowBound::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_)) + sizeof(height_));
}

WorkspaceDeskSpecifics_WindowBound::~WorkspaceDeskSpecifics_WindowBound() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics.WindowBound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics_WindowBound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkspaceDeskSpecifics_WindowBound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics_WindowBound::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics.WindowBound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&top_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&top_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics_WindowBound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics_WindowBound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics.WindowBound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 top = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_top(), target);
  }

  // optional int32 left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_left(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics.WindowBound)
  return target;
}

size_t WorkspaceDeskSpecifics_WindowBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics.WindowBound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 top = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_top());
    }

    // optional int32 left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics_WindowBound::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics_WindowBound*>(
      &from));
}

void WorkspaceDeskSpecifics_WindowBound::MergeFrom(const WorkspaceDeskSpecifics_WindowBound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics.WindowBound)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics_WindowBound::CopyFrom(const WorkspaceDeskSpecifics_WindowBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics.WindowBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics_WindowBound::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics_WindowBound::InternalSwap(WorkspaceDeskSpecifics_WindowBound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_WindowBound, height_)
      + sizeof(WorkspaceDeskSpecifics_WindowBound::height_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics_WindowBound, top_)>(
          reinterpret_cast<char*>(&top_),
          reinterpret_cast<char*>(&other->top_));
}

std::string WorkspaceDeskSpecifics_WindowBound::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics.WindowBound";
}


// ===================================================================

class WorkspaceDeskSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkspaceDeskSpecifics>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_created_time_windows_epoch_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_updated_time_windows_epoch_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::WorkspaceDeskSpecifics_Desk& desk(const WorkspaceDeskSpecifics* msg);
  static void set_has_desk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desk_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::sync_pb::WorkspaceDeskSpecifics_Desk&
WorkspaceDeskSpecifics::_Internal::desk(const WorkspaceDeskSpecifics* msg) {
  return *msg->desk_;
}
WorkspaceDeskSpecifics::WorkspaceDeskSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WorkspaceDeskSpecifics)
}
WorkspaceDeskSpecifics::WorkspaceDeskSpecifics(const WorkspaceDeskSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    uuid_.Set(from._internal_uuid(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_desk()) {
    desk_ = new ::sync_pb::WorkspaceDeskSpecifics_Desk(*from.desk_);
  } else {
    desk_ = nullptr;
  }
  ::memcpy(&created_time_windows_epoch_micros_, &from.created_time_windows_epoch_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&desk_type_) -
    reinterpret_cast<char*>(&created_time_windows_epoch_micros_)) + sizeof(desk_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WorkspaceDeskSpecifics)
}

inline void WorkspaceDeskSpecifics::SharedCtor() {
uuid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uuid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&desk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&desk_type_) -
    reinterpret_cast<char*>(&desk_)) + sizeof(desk_type_));
}

WorkspaceDeskSpecifics::~WorkspaceDeskSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.WorkspaceDeskSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkspaceDeskSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.Destroy();
  name_.Destroy();
  if (this != internal_default_instance()) delete desk_;
}

void WorkspaceDeskSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkspaceDeskSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WorkspaceDeskSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(desk_ != nullptr);
      desk_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&created_time_windows_epoch_micros_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desk_type_) -
        reinterpret_cast<char*>(&created_time_windows_epoch_micros_)) + sizeof(desk_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkspaceDeskSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 created_time_windows_epoch_micros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_created_time_windows_epoch_micros(&has_bits);
          created_time_windows_epoch_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.Desk desk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_desk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 updated_time_windows_epoch_micros = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_updated_time_windows_epoch_micros(&has_bits);
          updated_time_windows_epoch_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WorkspaceDeskSpecifics.DeskType desk_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WorkspaceDeskSpecifics_DeskType_IsValid(val))) {
            _internal_set_desk_type(static_cast<::sync_pb::WorkspaceDeskSpecifics_DeskType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkspaceDeskSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WorkspaceDeskSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int64 created_time_windows_epoch_micros = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_created_time_windows_epoch_micros(), target);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.Desk desk = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::desk(this),
        _Internal::desk(this).GetCachedSize(), target, stream);
  }

  // optional int64 updated_time_windows_epoch_micros = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_updated_time_windows_epoch_micros(), target);
  }

  // optional .sync_pb.WorkspaceDeskSpecifics.DeskType desk_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_desk_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WorkspaceDeskSpecifics)
  return target;
}

size_t WorkspaceDeskSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WorkspaceDeskSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string uuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.Desk desk = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desk_);
    }

    // optional int64 created_time_windows_epoch_micros = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_created_time_windows_epoch_micros());
    }

    // optional int64 updated_time_windows_epoch_micros = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updated_time_windows_epoch_micros());
    }

    // optional .sync_pb.WorkspaceDeskSpecifics.DeskType desk_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_desk_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkspaceDeskSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkspaceDeskSpecifics*>(
      &from));
}

void WorkspaceDeskSpecifics::MergeFrom(const WorkspaceDeskSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WorkspaceDeskSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_desk()->::sync_pb::WorkspaceDeskSpecifics_Desk::MergeFrom(from._internal_desk());
    }
    if (cached_has_bits & 0x00000008u) {
      created_time_windows_epoch_micros_ = from.created_time_windows_epoch_micros_;
    }
    if (cached_has_bits & 0x00000010u) {
      updated_time_windows_epoch_micros_ = from.updated_time_windows_epoch_micros_;
    }
    if (cached_has_bits & 0x00000020u) {
      desk_type_ = from.desk_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkspaceDeskSpecifics::CopyFrom(const WorkspaceDeskSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WorkspaceDeskSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkspaceDeskSpecifics::IsInitialized() const {
  return true;
}

void WorkspaceDeskSpecifics::InternalSwap(WorkspaceDeskSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uuid_, lhs_arena,
      &other->uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics, desk_type_)
      + sizeof(WorkspaceDeskSpecifics::desk_type_)
      - PROTOBUF_FIELD_OFFSET(WorkspaceDeskSpecifics, desk_)>(
          reinterpret_cast<char*>(&desk_),
          reinterpret_cast<char*>(&other->desk_));
}

std::string WorkspaceDeskSpecifics::GetTypeName() const {
  return "sync_pb.WorkspaceDeskSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_Desk*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_Desk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_Desk >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_App*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_App >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_AppOneOf*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_AppOneOf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_AppOneOf >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_ChromeApp*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_ChromeApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_ChromeApp >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_ArcApp*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_ArcApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_ArcApp >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics_WindowBound*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_WindowBound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics_WindowBound >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WorkspaceDeskSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WorkspaceDeskSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
