// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/app_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/sync/protocol/extension_specifics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fapp_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fapp_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class AppNotificationSettings;
struct AppNotificationSettingsDefaultTypeInternal;
extern AppNotificationSettingsDefaultTypeInternal _AppNotificationSettings_default_instance_;
class AppSpecifics;
struct AppSpecificsDefaultTypeInternal;
extern AppSpecificsDefaultTypeInternal _AppSpecifics_default_instance_;
class LinkedAppIconInfo;
struct LinkedAppIconInfoDefaultTypeInternal;
extern LinkedAppIconInfoDefaultTypeInternal _LinkedAppIconInfo_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AppNotificationSettings* Arena::CreateMaybeMessage<::sync_pb::AppNotificationSettings>(Arena*);
template<> ::sync_pb::AppSpecifics* Arena::CreateMaybeMessage<::sync_pb::AppSpecifics>(Arena*);
template<> ::sync_pb::LinkedAppIconInfo* Arena::CreateMaybeMessage<::sync_pb::LinkedAppIconInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum AppSpecifics_LaunchType : int {
  AppSpecifics_LaunchType_PINNED = 0,
  AppSpecifics_LaunchType_REGULAR = 1,
  AppSpecifics_LaunchType_FULLSCREEN = 2,
  AppSpecifics_LaunchType_WINDOW = 3
};
bool AppSpecifics_LaunchType_IsValid(int value);
constexpr AppSpecifics_LaunchType AppSpecifics_LaunchType_LaunchType_MIN = AppSpecifics_LaunchType_PINNED;
constexpr AppSpecifics_LaunchType AppSpecifics_LaunchType_LaunchType_MAX = AppSpecifics_LaunchType_WINDOW;
constexpr int AppSpecifics_LaunchType_LaunchType_ARRAYSIZE = AppSpecifics_LaunchType_LaunchType_MAX + 1;

const std::string& AppSpecifics_LaunchType_Name(AppSpecifics_LaunchType value);
template<typename T>
inline const std::string& AppSpecifics_LaunchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppSpecifics_LaunchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppSpecifics_LaunchType_Name.");
  return AppSpecifics_LaunchType_Name(static_cast<AppSpecifics_LaunchType>(enum_t_value));
}
bool AppSpecifics_LaunchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppSpecifics_LaunchType* value);
// ===================================================================

class AppNotificationSettings final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AppNotificationSettings) */ {
 public:
  inline AppNotificationSettings() : AppNotificationSettings(nullptr) {}
  ~AppNotificationSettings() override;
  explicit PROTOBUF_CONSTEXPR AppNotificationSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppNotificationSettings(const AppNotificationSettings& from);
  AppNotificationSettings(AppNotificationSettings&& from) noexcept
    : AppNotificationSettings() {
    *this = ::std::move(from);
  }

  inline AppNotificationSettings& operator=(const AppNotificationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppNotificationSettings& operator=(AppNotificationSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AppNotificationSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppNotificationSettings* internal_default_instance() {
    return reinterpret_cast<const AppNotificationSettings*>(
               &_AppNotificationSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppNotificationSettings& a, AppNotificationSettings& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AppNotificationSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppNotificationSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppNotificationSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppNotificationSettings>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AppNotificationSettings& from);
  void MergeFrom(const AppNotificationSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppNotificationSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AppNotificationSettings";
  }
  protected:
  explicit AppNotificationSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOauthClientIdFieldNumber = 3,
    kInitialSetupDoneFieldNumber = 1,
    kDisabledFieldNumber = 2,
  };
  // optional string oauth_client_id = 3;
  bool has_oauth_client_id() const;
  private:
  bool _internal_has_oauth_client_id() const;
  public:
  void clear_oauth_client_id();
  const std::string& oauth_client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oauth_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oauth_client_id();
  PROTOBUF_NODISCARD std::string* release_oauth_client_id();
  void set_allocated_oauth_client_id(std::string* oauth_client_id);
  private:
  const std::string& _internal_oauth_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oauth_client_id(const std::string& value);
  std::string* _internal_mutable_oauth_client_id();
  public:

  // optional bool initial_setup_done = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_initial_setup_done() const;
  private:
  bool _internal_has_initial_setup_done() const;
  public:
  PROTOBUF_DEPRECATED void clear_initial_setup_done();
  PROTOBUF_DEPRECATED bool initial_setup_done() const;
  PROTOBUF_DEPRECATED void set_initial_setup_done(bool value);
  private:
  bool _internal_initial_setup_done() const;
  void _internal_set_initial_setup_done(bool value);
  public:

  // optional bool disabled = 2;
  bool has_disabled() const;
  private:
  bool _internal_has_disabled() const;
  public:
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AppNotificationSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oauth_client_id_;
  bool initial_setup_done_;
  bool disabled_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fapp_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class LinkedAppIconInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LinkedAppIconInfo) */ {
 public:
  inline LinkedAppIconInfo() : LinkedAppIconInfo(nullptr) {}
  ~LinkedAppIconInfo() override;
  explicit PROTOBUF_CONSTEXPR LinkedAppIconInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkedAppIconInfo(const LinkedAppIconInfo& from);
  LinkedAppIconInfo(LinkedAppIconInfo&& from) noexcept
    : LinkedAppIconInfo() {
    *this = ::std::move(from);
  }

  inline LinkedAppIconInfo& operator=(const LinkedAppIconInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkedAppIconInfo& operator=(LinkedAppIconInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LinkedAppIconInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkedAppIconInfo* internal_default_instance() {
    return reinterpret_cast<const LinkedAppIconInfo*>(
               &_LinkedAppIconInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LinkedAppIconInfo& a, LinkedAppIconInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LinkedAppIconInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkedAppIconInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkedAppIconInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkedAppIconInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LinkedAppIconInfo& from);
  void MergeFrom(const LinkedAppIconInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinkedAppIconInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LinkedAppIconInfo";
  }
  protected:
  explicit LinkedAppIconInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.LinkedAppIconInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fapp_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AppSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AppSpecifics) */ {
 public:
  inline AppSpecifics() : AppSpecifics(nullptr) {}
  ~AppSpecifics() override;
  explicit PROTOBUF_CONSTEXPR AppSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppSpecifics(const AppSpecifics& from);
  AppSpecifics(AppSpecifics&& from) noexcept
    : AppSpecifics() {
    *this = ::std::move(from);
  }

  inline AppSpecifics& operator=(const AppSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppSpecifics& operator=(AppSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AppSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppSpecifics* internal_default_instance() {
    return reinterpret_cast<const AppSpecifics*>(
               &_AppSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppSpecifics& a, AppSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AppSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AppSpecifics& from);
  void MergeFrom(const AppSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AppSpecifics";
  }
  protected:
  explicit AppSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppSpecifics_LaunchType LaunchType;
  static constexpr LaunchType PINNED =
    AppSpecifics_LaunchType_PINNED;
  static constexpr LaunchType REGULAR =
    AppSpecifics_LaunchType_REGULAR;
  static constexpr LaunchType FULLSCREEN =
    AppSpecifics_LaunchType_FULLSCREEN;
  static constexpr LaunchType WINDOW =
    AppSpecifics_LaunchType_WINDOW;
  static inline bool LaunchType_IsValid(int value) {
    return AppSpecifics_LaunchType_IsValid(value);
  }
  static constexpr LaunchType LaunchType_MIN =
    AppSpecifics_LaunchType_LaunchType_MIN;
  static constexpr LaunchType LaunchType_MAX =
    AppSpecifics_LaunchType_LaunchType_MAX;
  static constexpr int LaunchType_ARRAYSIZE =
    AppSpecifics_LaunchType_LaunchType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LaunchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LaunchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LaunchType_Name.");
    return AppSpecifics_LaunchType_Name(enum_t_value);
  }
  static inline bool LaunchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LaunchType* value) {
    return AppSpecifics_LaunchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLinkedAppIconsFieldNumber = 9,
    kAppLaunchOrdinalFieldNumber = 3,
    kPageOrdinalFieldNumber = 4,
    kBookmarkAppUrlFieldNumber = 6,
    kBookmarkAppDescriptionFieldNumber = 7,
    kBookmarkAppIconColorFieldNumber = 8,
    kBookmarkAppScopeFieldNumber = 10,
    kExtensionFieldNumber = 1,
    kNotificationSettingsFieldNumber = 2,
    kLaunchTypeFieldNumber = 5,
    kBookmarkAppThemeColorFieldNumber = 11,
  };
  // repeated .sync_pb.LinkedAppIconInfo linked_app_icons = 9;
  int linked_app_icons_size() const;
  private:
  int _internal_linked_app_icons_size() const;
  public:
  void clear_linked_app_icons();
  ::sync_pb::LinkedAppIconInfo* mutable_linked_app_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LinkedAppIconInfo >*
      mutable_linked_app_icons();
  private:
  const ::sync_pb::LinkedAppIconInfo& _internal_linked_app_icons(int index) const;
  ::sync_pb::LinkedAppIconInfo* _internal_add_linked_app_icons();
  public:
  const ::sync_pb::LinkedAppIconInfo& linked_app_icons(int index) const;
  ::sync_pb::LinkedAppIconInfo* add_linked_app_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LinkedAppIconInfo >&
      linked_app_icons() const;

  // optional string app_launch_ordinal = 3;
  bool has_app_launch_ordinal() const;
  private:
  bool _internal_has_app_launch_ordinal() const;
  public:
  void clear_app_launch_ordinal();
  const std::string& app_launch_ordinal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_launch_ordinal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_launch_ordinal();
  PROTOBUF_NODISCARD std::string* release_app_launch_ordinal();
  void set_allocated_app_launch_ordinal(std::string* app_launch_ordinal);
  private:
  const std::string& _internal_app_launch_ordinal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_launch_ordinal(const std::string& value);
  std::string* _internal_mutable_app_launch_ordinal();
  public:

  // optional string page_ordinal = 4;
  bool has_page_ordinal() const;
  private:
  bool _internal_has_page_ordinal() const;
  public:
  void clear_page_ordinal();
  const std::string& page_ordinal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_ordinal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_ordinal();
  PROTOBUF_NODISCARD std::string* release_page_ordinal();
  void set_allocated_page_ordinal(std::string* page_ordinal);
  private:
  const std::string& _internal_page_ordinal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_ordinal(const std::string& value);
  std::string* _internal_mutable_page_ordinal();
  public:

  // optional string bookmark_app_url = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_bookmark_app_url() const;
  private:
  bool _internal_has_bookmark_app_url() const;
  public:
  PROTOBUF_DEPRECATED void clear_bookmark_app_url();
  PROTOBUF_DEPRECATED const std::string& bookmark_app_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_bookmark_app_url(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_bookmark_app_url();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_bookmark_app_url();
  PROTOBUF_DEPRECATED void set_allocated_bookmark_app_url(std::string* bookmark_app_url);
  private:
  const std::string& _internal_bookmark_app_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookmark_app_url(const std::string& value);
  std::string* _internal_mutable_bookmark_app_url();
  public:

  // optional string bookmark_app_description = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_bookmark_app_description() const;
  private:
  bool _internal_has_bookmark_app_description() const;
  public:
  PROTOBUF_DEPRECATED void clear_bookmark_app_description();
  PROTOBUF_DEPRECATED const std::string& bookmark_app_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_bookmark_app_description(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_bookmark_app_description();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_bookmark_app_description();
  PROTOBUF_DEPRECATED void set_allocated_bookmark_app_description(std::string* bookmark_app_description);
  private:
  const std::string& _internal_bookmark_app_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookmark_app_description(const std::string& value);
  std::string* _internal_mutable_bookmark_app_description();
  public:

  // optional string bookmark_app_icon_color = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_bookmark_app_icon_color() const;
  private:
  bool _internal_has_bookmark_app_icon_color() const;
  public:
  PROTOBUF_DEPRECATED void clear_bookmark_app_icon_color();
  PROTOBUF_DEPRECATED const std::string& bookmark_app_icon_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_bookmark_app_icon_color(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_bookmark_app_icon_color();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_bookmark_app_icon_color();
  PROTOBUF_DEPRECATED void set_allocated_bookmark_app_icon_color(std::string* bookmark_app_icon_color);
  private:
  const std::string& _internal_bookmark_app_icon_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookmark_app_icon_color(const std::string& value);
  std::string* _internal_mutable_bookmark_app_icon_color();
  public:

  // optional string bookmark_app_scope = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_bookmark_app_scope() const;
  private:
  bool _internal_has_bookmark_app_scope() const;
  public:
  PROTOBUF_DEPRECATED void clear_bookmark_app_scope();
  PROTOBUF_DEPRECATED const std::string& bookmark_app_scope() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_bookmark_app_scope(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_bookmark_app_scope();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_bookmark_app_scope();
  PROTOBUF_DEPRECATED void set_allocated_bookmark_app_scope(std::string* bookmark_app_scope);
  private:
  const std::string& _internal_bookmark_app_scope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookmark_app_scope(const std::string& value);
  std::string* _internal_mutable_bookmark_app_scope();
  public:

  // optional .sync_pb.ExtensionSpecifics extension = 1;
  bool has_extension() const;
  private:
  bool _internal_has_extension() const;
  public:
  void clear_extension();
  const ::sync_pb::ExtensionSpecifics& extension() const;
  PROTOBUF_NODISCARD ::sync_pb::ExtensionSpecifics* release_extension();
  ::sync_pb::ExtensionSpecifics* mutable_extension();
  void set_allocated_extension(::sync_pb::ExtensionSpecifics* extension);
  private:
  const ::sync_pb::ExtensionSpecifics& _internal_extension() const;
  ::sync_pb::ExtensionSpecifics* _internal_mutable_extension();
  public:
  void unsafe_arena_set_allocated_extension(
      ::sync_pb::ExtensionSpecifics* extension);
  ::sync_pb::ExtensionSpecifics* unsafe_arena_release_extension();

  // optional .sync_pb.AppNotificationSettings notification_settings = 2;
  bool has_notification_settings() const;
  private:
  bool _internal_has_notification_settings() const;
  public:
  void clear_notification_settings();
  const ::sync_pb::AppNotificationSettings& notification_settings() const;
  PROTOBUF_NODISCARD ::sync_pb::AppNotificationSettings* release_notification_settings();
  ::sync_pb::AppNotificationSettings* mutable_notification_settings();
  void set_allocated_notification_settings(::sync_pb::AppNotificationSettings* notification_settings);
  private:
  const ::sync_pb::AppNotificationSettings& _internal_notification_settings() const;
  ::sync_pb::AppNotificationSettings* _internal_mutable_notification_settings();
  public:
  void unsafe_arena_set_allocated_notification_settings(
      ::sync_pb::AppNotificationSettings* notification_settings);
  ::sync_pb::AppNotificationSettings* unsafe_arena_release_notification_settings();

  // optional .sync_pb.AppSpecifics.LaunchType launch_type = 5;
  bool has_launch_type() const;
  private:
  bool _internal_has_launch_type() const;
  public:
  void clear_launch_type();
  ::sync_pb::AppSpecifics_LaunchType launch_type() const;
  void set_launch_type(::sync_pb::AppSpecifics_LaunchType value);
  private:
  ::sync_pb::AppSpecifics_LaunchType _internal_launch_type() const;
  void _internal_set_launch_type(::sync_pb::AppSpecifics_LaunchType value);
  public:

  // optional uint32 bookmark_app_theme_color = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_bookmark_app_theme_color() const;
  private:
  bool _internal_has_bookmark_app_theme_color() const;
  public:
  PROTOBUF_DEPRECATED void clear_bookmark_app_theme_color();
  PROTOBUF_DEPRECATED uint32_t bookmark_app_theme_color() const;
  PROTOBUF_DEPRECATED void set_bookmark_app_theme_color(uint32_t value);
  private:
  uint32_t _internal_bookmark_app_theme_color() const;
  void _internal_set_bookmark_app_theme_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AppSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LinkedAppIconInfo > linked_app_icons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_launch_ordinal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_ordinal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookmark_app_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookmark_app_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookmark_app_icon_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookmark_app_scope_;
  ::sync_pb::ExtensionSpecifics* extension_;
  ::sync_pb::AppNotificationSettings* notification_settings_;
  int launch_type_;
  uint32_t bookmark_app_theme_color_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fapp_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppNotificationSettings

// optional bool initial_setup_done = 1 [deprecated = true];
inline bool AppNotificationSettings::_internal_has_initial_setup_done() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppNotificationSettings::has_initial_setup_done() const {
  return _internal_has_initial_setup_done();
}
inline void AppNotificationSettings::clear_initial_setup_done() {
  initial_setup_done_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AppNotificationSettings::_internal_initial_setup_done() const {
  return initial_setup_done_;
}
inline bool AppNotificationSettings::initial_setup_done() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotificationSettings.initial_setup_done)
  return _internal_initial_setup_done();
}
inline void AppNotificationSettings::_internal_set_initial_setup_done(bool value) {
  _has_bits_[0] |= 0x00000002u;
  initial_setup_done_ = value;
}
inline void AppNotificationSettings::set_initial_setup_done(bool value) {
  _internal_set_initial_setup_done(value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotificationSettings.initial_setup_done)
}

// optional bool disabled = 2;
inline bool AppNotificationSettings::_internal_has_disabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppNotificationSettings::has_disabled() const {
  return _internal_has_disabled();
}
inline void AppNotificationSettings::clear_disabled() {
  disabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AppNotificationSettings::_internal_disabled() const {
  return disabled_;
}
inline bool AppNotificationSettings::disabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotificationSettings.disabled)
  return _internal_disabled();
}
inline void AppNotificationSettings::_internal_set_disabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  disabled_ = value;
}
inline void AppNotificationSettings::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotificationSettings.disabled)
}

// optional string oauth_client_id = 3;
inline bool AppNotificationSettings::_internal_has_oauth_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppNotificationSettings::has_oauth_client_id() const {
  return _internal_has_oauth_client_id();
}
inline void AppNotificationSettings::clear_oauth_client_id() {
  oauth_client_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppNotificationSettings::oauth_client_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotificationSettings.oauth_client_id)
  return _internal_oauth_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppNotificationSettings::set_oauth_client_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 oauth_client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppNotificationSettings.oauth_client_id)
}
inline std::string* AppNotificationSettings::mutable_oauth_client_id() {
  std::string* _s = _internal_mutable_oauth_client_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotificationSettings.oauth_client_id)
  return _s;
}
inline const std::string& AppNotificationSettings::_internal_oauth_client_id() const {
  return oauth_client_id_.Get();
}
inline void AppNotificationSettings::_internal_set_oauth_client_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  oauth_client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AppNotificationSettings::_internal_mutable_oauth_client_id() {
  _has_bits_[0] |= 0x00000001u;
  return oauth_client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AppNotificationSettings::release_oauth_client_id() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotificationSettings.oauth_client_id)
  if (!_internal_has_oauth_client_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = oauth_client_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oauth_client_id_.IsDefault()) {
    oauth_client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppNotificationSettings::set_allocated_oauth_client_id(std::string* oauth_client_id) {
  if (oauth_client_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oauth_client_id_.SetAllocated(oauth_client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oauth_client_id_.IsDefault()) {
    oauth_client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotificationSettings.oauth_client_id)
}

// -------------------------------------------------------------------

// LinkedAppIconInfo

// optional string url = 1;
inline bool LinkedAppIconInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinkedAppIconInfo::has_url() const {
  return _internal_has_url();
}
inline void LinkedAppIconInfo::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinkedAppIconInfo::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.LinkedAppIconInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkedAppIconInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.LinkedAppIconInfo.url)
}
inline std::string* LinkedAppIconInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.LinkedAppIconInfo.url)
  return _s;
}
inline const std::string& LinkedAppIconInfo::_internal_url() const {
  return url_.Get();
}
inline void LinkedAppIconInfo::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* LinkedAppIconInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* LinkedAppIconInfo::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.LinkedAppIconInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LinkedAppIconInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LinkedAppIconInfo.url)
}

// optional uint32 size = 2;
inline bool LinkedAppIconInfo::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinkedAppIconInfo::has_size() const {
  return _internal_has_size();
}
inline void LinkedAppIconInfo::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LinkedAppIconInfo::_internal_size() const {
  return size_;
}
inline uint32_t LinkedAppIconInfo::size() const {
  // @@protoc_insertion_point(field_get:sync_pb.LinkedAppIconInfo.size)
  return _internal_size();
}
inline void LinkedAppIconInfo::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void LinkedAppIconInfo::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:sync_pb.LinkedAppIconInfo.size)
}

// -------------------------------------------------------------------

// AppSpecifics

// optional .sync_pb.ExtensionSpecifics extension = 1;
inline bool AppSpecifics::_internal_has_extension() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || extension_ != nullptr);
  return value;
}
inline bool AppSpecifics::has_extension() const {
  return _internal_has_extension();
}
inline const ::sync_pb::ExtensionSpecifics& AppSpecifics::_internal_extension() const {
  const ::sync_pb::ExtensionSpecifics* p = extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ExtensionSpecifics&>(
      ::sync_pb::_ExtensionSpecifics_default_instance_);
}
inline const ::sync_pb::ExtensionSpecifics& AppSpecifics::extension() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.extension)
  return _internal_extension();
}
inline void AppSpecifics::unsafe_arena_set_allocated_extension(
    ::sync_pb::ExtensionSpecifics* extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_);
  }
  extension_ = extension;
  if (extension) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AppSpecifics.extension)
}
inline ::sync_pb::ExtensionSpecifics* AppSpecifics::release_extension() {
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::ExtensionSpecifics* temp = extension_;
  extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ExtensionSpecifics* AppSpecifics::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_release:sync_pb.AppSpecifics.extension)
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::ExtensionSpecifics* temp = extension_;
  extension_ = nullptr;
  return temp;
}
inline ::sync_pb::ExtensionSpecifics* AppSpecifics::_internal_mutable_extension() {
  _has_bits_[0] |= 0x00000040u;
  if (extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ExtensionSpecifics>(GetArenaForAllocation());
    extension_ = p;
  }
  return extension_;
}
inline ::sync_pb::ExtensionSpecifics* AppSpecifics::mutable_extension() {
  ::sync_pb::ExtensionSpecifics* _msg = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.extension)
  return _msg;
}
inline void AppSpecifics::set_allocated_extension(::sync_pb::ExtensionSpecifics* extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_);
  }
  if (extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension));
    if (message_arena != submessage_arena) {
      extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  extension_ = extension;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppSpecifics.extension)
}

// optional .sync_pb.AppNotificationSettings notification_settings = 2;
inline bool AppSpecifics::_internal_has_notification_settings() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || notification_settings_ != nullptr);
  return value;
}
inline bool AppSpecifics::has_notification_settings() const {
  return _internal_has_notification_settings();
}
inline void AppSpecifics::clear_notification_settings() {
  if (notification_settings_ != nullptr) notification_settings_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::sync_pb::AppNotificationSettings& AppSpecifics::_internal_notification_settings() const {
  const ::sync_pb::AppNotificationSettings* p = notification_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::AppNotificationSettings&>(
      ::sync_pb::_AppNotificationSettings_default_instance_);
}
inline const ::sync_pb::AppNotificationSettings& AppSpecifics::notification_settings() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.notification_settings)
  return _internal_notification_settings();
}
inline void AppSpecifics::unsafe_arena_set_allocated_notification_settings(
    ::sync_pb::AppNotificationSettings* notification_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notification_settings_);
  }
  notification_settings_ = notification_settings;
  if (notification_settings) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AppSpecifics.notification_settings)
}
inline ::sync_pb::AppNotificationSettings* AppSpecifics::release_notification_settings() {
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::AppNotificationSettings* temp = notification_settings_;
  notification_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::AppNotificationSettings* AppSpecifics::unsafe_arena_release_notification_settings() {
  // @@protoc_insertion_point(field_release:sync_pb.AppSpecifics.notification_settings)
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::AppNotificationSettings* temp = notification_settings_;
  notification_settings_ = nullptr;
  return temp;
}
inline ::sync_pb::AppNotificationSettings* AppSpecifics::_internal_mutable_notification_settings() {
  _has_bits_[0] |= 0x00000080u;
  if (notification_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::AppNotificationSettings>(GetArenaForAllocation());
    notification_settings_ = p;
  }
  return notification_settings_;
}
inline ::sync_pb::AppNotificationSettings* AppSpecifics::mutable_notification_settings() {
  ::sync_pb::AppNotificationSettings* _msg = _internal_mutable_notification_settings();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.notification_settings)
  return _msg;
}
inline void AppSpecifics::set_allocated_notification_settings(::sync_pb::AppNotificationSettings* notification_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete notification_settings_;
  }
  if (notification_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notification_settings);
    if (message_arena != submessage_arena) {
      notification_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  notification_settings_ = notification_settings;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppSpecifics.notification_settings)
}

// optional string app_launch_ordinal = 3;
inline bool AppSpecifics::_internal_has_app_launch_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppSpecifics::has_app_launch_ordinal() const {
  return _internal_has_app_launch_ordinal();
}
inline void AppSpecifics::clear_app_launch_ordinal() {
  app_launch_ordinal_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppSpecifics::app_launch_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.app_launch_ordinal)
  return _internal_app_launch_ordinal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSpecifics::set_app_launch_ordinal(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_launch_ordinal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppSpecifics.app_launch_ordinal)
}
inline std::string* AppSpecifics::mutable_app_launch_ordinal() {
  std::string* _s = _internal_mutable_app_launch_ordinal();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.app_launch_ordinal)
  return _s;
}
inline const std::string& AppSpecifics::_internal_app_launch_ordinal() const {
  return app_launch_ordinal_.Get();
}
inline void AppSpecifics::_internal_set_app_launch_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_launch_ordinal_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSpecifics::_internal_mutable_app_launch_ordinal() {
  _has_bits_[0] |= 0x00000001u;
  return app_launch_ordinal_.Mutable(GetArenaForAllocation());
}
inline std::string* AppSpecifics::release_app_launch_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.AppSpecifics.app_launch_ordinal)
  if (!_internal_has_app_launch_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = app_launch_ordinal_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_launch_ordinal_.IsDefault()) {
    app_launch_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppSpecifics::set_allocated_app_launch_ordinal(std::string* app_launch_ordinal) {
  if (app_launch_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_launch_ordinal_.SetAllocated(app_launch_ordinal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_launch_ordinal_.IsDefault()) {
    app_launch_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppSpecifics.app_launch_ordinal)
}

// optional string page_ordinal = 4;
inline bool AppSpecifics::_internal_has_page_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppSpecifics::has_page_ordinal() const {
  return _internal_has_page_ordinal();
}
inline void AppSpecifics::clear_page_ordinal() {
  page_ordinal_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppSpecifics::page_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.page_ordinal)
  return _internal_page_ordinal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSpecifics::set_page_ordinal(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 page_ordinal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppSpecifics.page_ordinal)
}
inline std::string* AppSpecifics::mutable_page_ordinal() {
  std::string* _s = _internal_mutable_page_ordinal();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.page_ordinal)
  return _s;
}
inline const std::string& AppSpecifics::_internal_page_ordinal() const {
  return page_ordinal_.Get();
}
inline void AppSpecifics::_internal_set_page_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  page_ordinal_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSpecifics::_internal_mutable_page_ordinal() {
  _has_bits_[0] |= 0x00000002u;
  return page_ordinal_.Mutable(GetArenaForAllocation());
}
inline std::string* AppSpecifics::release_page_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.AppSpecifics.page_ordinal)
  if (!_internal_has_page_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = page_ordinal_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_ordinal_.IsDefault()) {
    page_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppSpecifics::set_allocated_page_ordinal(std::string* page_ordinal) {
  if (page_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  page_ordinal_.SetAllocated(page_ordinal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_ordinal_.IsDefault()) {
    page_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppSpecifics.page_ordinal)
}

// optional .sync_pb.AppSpecifics.LaunchType launch_type = 5;
inline bool AppSpecifics::_internal_has_launch_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AppSpecifics::has_launch_type() const {
  return _internal_has_launch_type();
}
inline void AppSpecifics::clear_launch_type() {
  launch_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::sync_pb::AppSpecifics_LaunchType AppSpecifics::_internal_launch_type() const {
  return static_cast< ::sync_pb::AppSpecifics_LaunchType >(launch_type_);
}
inline ::sync_pb::AppSpecifics_LaunchType AppSpecifics::launch_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.launch_type)
  return _internal_launch_type();
}
inline void AppSpecifics::_internal_set_launch_type(::sync_pb::AppSpecifics_LaunchType value) {
  assert(::sync_pb::AppSpecifics_LaunchType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  launch_type_ = value;
}
inline void AppSpecifics::set_launch_type(::sync_pb::AppSpecifics_LaunchType value) {
  _internal_set_launch_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.AppSpecifics.launch_type)
}

// optional string bookmark_app_url = 6 [deprecated = true];
inline bool AppSpecifics::_internal_has_bookmark_app_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppSpecifics::has_bookmark_app_url() const {
  return _internal_has_bookmark_app_url();
}
inline void AppSpecifics::clear_bookmark_app_url() {
  bookmark_app_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppSpecifics::bookmark_app_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.bookmark_app_url)
  return _internal_bookmark_app_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSpecifics::set_bookmark_app_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 bookmark_app_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppSpecifics.bookmark_app_url)
}
inline std::string* AppSpecifics::mutable_bookmark_app_url() {
  std::string* _s = _internal_mutable_bookmark_app_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.bookmark_app_url)
  return _s;
}
inline const std::string& AppSpecifics::_internal_bookmark_app_url() const {
  return bookmark_app_url_.Get();
}
inline void AppSpecifics::_internal_set_bookmark_app_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  bookmark_app_url_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSpecifics::_internal_mutable_bookmark_app_url() {
  _has_bits_[0] |= 0x00000004u;
  return bookmark_app_url_.Mutable(GetArenaForAllocation());
}
inline std::string* AppSpecifics::release_bookmark_app_url() {
  // @@protoc_insertion_point(field_release:sync_pb.AppSpecifics.bookmark_app_url)
  if (!_internal_has_bookmark_app_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = bookmark_app_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bookmark_app_url_.IsDefault()) {
    bookmark_app_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppSpecifics::set_allocated_bookmark_app_url(std::string* bookmark_app_url) {
  if (bookmark_app_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bookmark_app_url_.SetAllocated(bookmark_app_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bookmark_app_url_.IsDefault()) {
    bookmark_app_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppSpecifics.bookmark_app_url)
}

// optional string bookmark_app_description = 7 [deprecated = true];
inline bool AppSpecifics::_internal_has_bookmark_app_description() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppSpecifics::has_bookmark_app_description() const {
  return _internal_has_bookmark_app_description();
}
inline void AppSpecifics::clear_bookmark_app_description() {
  bookmark_app_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppSpecifics::bookmark_app_description() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.bookmark_app_description)
  return _internal_bookmark_app_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSpecifics::set_bookmark_app_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 bookmark_app_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppSpecifics.bookmark_app_description)
}
inline std::string* AppSpecifics::mutable_bookmark_app_description() {
  std::string* _s = _internal_mutable_bookmark_app_description();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.bookmark_app_description)
  return _s;
}
inline const std::string& AppSpecifics::_internal_bookmark_app_description() const {
  return bookmark_app_description_.Get();
}
inline void AppSpecifics::_internal_set_bookmark_app_description(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  bookmark_app_description_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSpecifics::_internal_mutable_bookmark_app_description() {
  _has_bits_[0] |= 0x00000008u;
  return bookmark_app_description_.Mutable(GetArenaForAllocation());
}
inline std::string* AppSpecifics::release_bookmark_app_description() {
  // @@protoc_insertion_point(field_release:sync_pb.AppSpecifics.bookmark_app_description)
  if (!_internal_has_bookmark_app_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = bookmark_app_description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bookmark_app_description_.IsDefault()) {
    bookmark_app_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppSpecifics::set_allocated_bookmark_app_description(std::string* bookmark_app_description) {
  if (bookmark_app_description != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bookmark_app_description_.SetAllocated(bookmark_app_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bookmark_app_description_.IsDefault()) {
    bookmark_app_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppSpecifics.bookmark_app_description)
}

// optional string bookmark_app_icon_color = 8 [deprecated = true];
inline bool AppSpecifics::_internal_has_bookmark_app_icon_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppSpecifics::has_bookmark_app_icon_color() const {
  return _internal_has_bookmark_app_icon_color();
}
inline void AppSpecifics::clear_bookmark_app_icon_color() {
  bookmark_app_icon_color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppSpecifics::bookmark_app_icon_color() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.bookmark_app_icon_color)
  return _internal_bookmark_app_icon_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSpecifics::set_bookmark_app_icon_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 bookmark_app_icon_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppSpecifics.bookmark_app_icon_color)
}
inline std::string* AppSpecifics::mutable_bookmark_app_icon_color() {
  std::string* _s = _internal_mutable_bookmark_app_icon_color();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.bookmark_app_icon_color)
  return _s;
}
inline const std::string& AppSpecifics::_internal_bookmark_app_icon_color() const {
  return bookmark_app_icon_color_.Get();
}
inline void AppSpecifics::_internal_set_bookmark_app_icon_color(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bookmark_app_icon_color_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSpecifics::_internal_mutable_bookmark_app_icon_color() {
  _has_bits_[0] |= 0x00000010u;
  return bookmark_app_icon_color_.Mutable(GetArenaForAllocation());
}
inline std::string* AppSpecifics::release_bookmark_app_icon_color() {
  // @@protoc_insertion_point(field_release:sync_pb.AppSpecifics.bookmark_app_icon_color)
  if (!_internal_has_bookmark_app_icon_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = bookmark_app_icon_color_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bookmark_app_icon_color_.IsDefault()) {
    bookmark_app_icon_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppSpecifics::set_allocated_bookmark_app_icon_color(std::string* bookmark_app_icon_color) {
  if (bookmark_app_icon_color != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bookmark_app_icon_color_.SetAllocated(bookmark_app_icon_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bookmark_app_icon_color_.IsDefault()) {
    bookmark_app_icon_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppSpecifics.bookmark_app_icon_color)
}

// repeated .sync_pb.LinkedAppIconInfo linked_app_icons = 9;
inline int AppSpecifics::_internal_linked_app_icons_size() const {
  return linked_app_icons_.size();
}
inline int AppSpecifics::linked_app_icons_size() const {
  return _internal_linked_app_icons_size();
}
inline void AppSpecifics::clear_linked_app_icons() {
  linked_app_icons_.Clear();
}
inline ::sync_pb::LinkedAppIconInfo* AppSpecifics::mutable_linked_app_icons(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.linked_app_icons)
  return linked_app_icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LinkedAppIconInfo >*
AppSpecifics::mutable_linked_app_icons() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AppSpecifics.linked_app_icons)
  return &linked_app_icons_;
}
inline const ::sync_pb::LinkedAppIconInfo& AppSpecifics::_internal_linked_app_icons(int index) const {
  return linked_app_icons_.Get(index);
}
inline const ::sync_pb::LinkedAppIconInfo& AppSpecifics::linked_app_icons(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.linked_app_icons)
  return _internal_linked_app_icons(index);
}
inline ::sync_pb::LinkedAppIconInfo* AppSpecifics::_internal_add_linked_app_icons() {
  return linked_app_icons_.Add();
}
inline ::sync_pb::LinkedAppIconInfo* AppSpecifics::add_linked_app_icons() {
  ::sync_pb::LinkedAppIconInfo* _add = _internal_add_linked_app_icons();
  // @@protoc_insertion_point(field_add:sync_pb.AppSpecifics.linked_app_icons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LinkedAppIconInfo >&
AppSpecifics::linked_app_icons() const {
  // @@protoc_insertion_point(field_list:sync_pb.AppSpecifics.linked_app_icons)
  return linked_app_icons_;
}

// optional string bookmark_app_scope = 10 [deprecated = true];
inline bool AppSpecifics::_internal_has_bookmark_app_scope() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppSpecifics::has_bookmark_app_scope() const {
  return _internal_has_bookmark_app_scope();
}
inline void AppSpecifics::clear_bookmark_app_scope() {
  bookmark_app_scope_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppSpecifics::bookmark_app_scope() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.bookmark_app_scope)
  return _internal_bookmark_app_scope();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppSpecifics::set_bookmark_app_scope(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 bookmark_app_scope_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppSpecifics.bookmark_app_scope)
}
inline std::string* AppSpecifics::mutable_bookmark_app_scope() {
  std::string* _s = _internal_mutable_bookmark_app_scope();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppSpecifics.bookmark_app_scope)
  return _s;
}
inline const std::string& AppSpecifics::_internal_bookmark_app_scope() const {
  return bookmark_app_scope_.Get();
}
inline void AppSpecifics::_internal_set_bookmark_app_scope(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  bookmark_app_scope_.Set(value, GetArenaForAllocation());
}
inline std::string* AppSpecifics::_internal_mutable_bookmark_app_scope() {
  _has_bits_[0] |= 0x00000020u;
  return bookmark_app_scope_.Mutable(GetArenaForAllocation());
}
inline std::string* AppSpecifics::release_bookmark_app_scope() {
  // @@protoc_insertion_point(field_release:sync_pb.AppSpecifics.bookmark_app_scope)
  if (!_internal_has_bookmark_app_scope()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = bookmark_app_scope_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bookmark_app_scope_.IsDefault()) {
    bookmark_app_scope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppSpecifics::set_allocated_bookmark_app_scope(std::string* bookmark_app_scope) {
  if (bookmark_app_scope != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  bookmark_app_scope_.SetAllocated(bookmark_app_scope, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bookmark_app_scope_.IsDefault()) {
    bookmark_app_scope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppSpecifics.bookmark_app_scope)
}

// optional uint32 bookmark_app_theme_color = 11 [deprecated = true];
inline bool AppSpecifics::_internal_has_bookmark_app_theme_color() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AppSpecifics::has_bookmark_app_theme_color() const {
  return _internal_has_bookmark_app_theme_color();
}
inline void AppSpecifics::clear_bookmark_app_theme_color() {
  bookmark_app_theme_color_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t AppSpecifics::_internal_bookmark_app_theme_color() const {
  return bookmark_app_theme_color_;
}
inline uint32_t AppSpecifics::bookmark_app_theme_color() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppSpecifics.bookmark_app_theme_color)
  return _internal_bookmark_app_theme_color();
}
inline void AppSpecifics::_internal_set_bookmark_app_theme_color(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  bookmark_app_theme_color_ = value;
}
inline void AppSpecifics::set_bookmark_app_theme_color(uint32_t value) {
  _internal_set_bookmark_app_theme_color(value);
  // @@protoc_insertion_point(field_set:sync_pb.AppSpecifics.bookmark_app_theme_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::AppSpecifics_LaunchType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5fspecifics_2eproto
