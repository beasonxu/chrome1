// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/app_list_specifics.proto

#include "components/sync/protocol/app_list_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR AppListSpecifics_IconColor::AppListSpecifics_IconColor(
    ::_pbi::ConstantInitialized)
  : background_color_(0)

  , hue_(0){}
struct AppListSpecifics_IconColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppListSpecifics_IconColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppListSpecifics_IconColorDefaultTypeInternal() {}
  union {
    AppListSpecifics_IconColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppListSpecifics_IconColorDefaultTypeInternal _AppListSpecifics_IconColor_default_instance_;
PROTOBUF_CONSTEXPR AppListSpecifics::AppListSpecifics(
    ::_pbi::ConstantInitialized)
  : item_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , item_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , parent_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , obsolete_page_ordinal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , item_ordinal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , item_pin_ordinal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , item_color_(nullptr)
  , item_type_(1)
{}
struct AppListSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppListSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppListSpecificsDefaultTypeInternal() {}
  union {
    AppListSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppListSpecificsDefaultTypeInternal _AppListSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool AppListSpecifics_AppListItemType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AppListSpecifics_AppListItemType_strings[5] = {};

static const char AppListSpecifics_AppListItemType_names[] =
  "TYPE_APP"
  "TYPE_FOLDER"
  "TYPE_OBSOLETE_URL"
  "TYPE_PAGE_BREAK"
  "TYPE_REMOVE_DEFAULT_APP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AppListSpecifics_AppListItemType_entries[] = {
  { {AppListSpecifics_AppListItemType_names + 0, 8}, 1 },
  { {AppListSpecifics_AppListItemType_names + 8, 11}, 3 },
  { {AppListSpecifics_AppListItemType_names + 19, 17}, 4 },
  { {AppListSpecifics_AppListItemType_names + 36, 15}, 5 },
  { {AppListSpecifics_AppListItemType_names + 51, 23}, 2 },
};

static const int AppListSpecifics_AppListItemType_entries_by_number[] = {
  0, // 1 -> TYPE_APP
  4, // 2 -> TYPE_REMOVE_DEFAULT_APP
  1, // 3 -> TYPE_FOLDER
  2, // 4 -> TYPE_OBSOLETE_URL
  3, // 5 -> TYPE_PAGE_BREAK
};

const std::string& AppListSpecifics_AppListItemType_Name(
    AppListSpecifics_AppListItemType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AppListSpecifics_AppListItemType_entries,
          AppListSpecifics_AppListItemType_entries_by_number,
          5, AppListSpecifics_AppListItemType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AppListSpecifics_AppListItemType_entries,
      AppListSpecifics_AppListItemType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AppListSpecifics_AppListItemType_strings[idx].get();
}
bool AppListSpecifics_AppListItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppListSpecifics_AppListItemType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AppListSpecifics_AppListItemType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AppListSpecifics_AppListItemType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AppListSpecifics_AppListItemType AppListSpecifics::TYPE_APP;
constexpr AppListSpecifics_AppListItemType AppListSpecifics::TYPE_REMOVE_DEFAULT_APP;
constexpr AppListSpecifics_AppListItemType AppListSpecifics::TYPE_FOLDER;
constexpr AppListSpecifics_AppListItemType AppListSpecifics::TYPE_OBSOLETE_URL;
constexpr AppListSpecifics_AppListItemType AppListSpecifics::TYPE_PAGE_BREAK;
constexpr AppListSpecifics_AppListItemType AppListSpecifics::AppListItemType_MIN;
constexpr AppListSpecifics_AppListItemType AppListSpecifics::AppListItemType_MAX;
constexpr int AppListSpecifics::AppListItemType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool AppListSpecifics_ColorGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AppListSpecifics_ColorGroup_strings[9] = {};

static const char AppListSpecifics_ColorGroup_names[] =
  "COLOR_BLACK"
  "COLOR_BLUE"
  "COLOR_EMPTY"
  "COLOR_GREEN"
  "COLOR_MAGENTA"
  "COLOR_ORANGE"
  "COLOR_RED"
  "COLOR_WHITE"
  "COLOR_YELLOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AppListSpecifics_ColorGroup_entries[] = {
  { {AppListSpecifics_ColorGroup_names + 0, 11}, 8 },
  { {AppListSpecifics_ColorGroup_names + 11, 10}, 6 },
  { {AppListSpecifics_ColorGroup_names + 21, 11}, 0 },
  { {AppListSpecifics_ColorGroup_names + 32, 11}, 5 },
  { {AppListSpecifics_ColorGroup_names + 43, 13}, 7 },
  { {AppListSpecifics_ColorGroup_names + 56, 12}, 3 },
  { {AppListSpecifics_ColorGroup_names + 68, 9}, 2 },
  { {AppListSpecifics_ColorGroup_names + 77, 11}, 1 },
  { {AppListSpecifics_ColorGroup_names + 88, 12}, 4 },
};

static const int AppListSpecifics_ColorGroup_entries_by_number[] = {
  2, // 0 -> COLOR_EMPTY
  7, // 1 -> COLOR_WHITE
  6, // 2 -> COLOR_RED
  5, // 3 -> COLOR_ORANGE
  8, // 4 -> COLOR_YELLOW
  3, // 5 -> COLOR_GREEN
  1, // 6 -> COLOR_BLUE
  4, // 7 -> COLOR_MAGENTA
  0, // 8 -> COLOR_BLACK
};

const std::string& AppListSpecifics_ColorGroup_Name(
    AppListSpecifics_ColorGroup value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AppListSpecifics_ColorGroup_entries,
          AppListSpecifics_ColorGroup_entries_by_number,
          9, AppListSpecifics_ColorGroup_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AppListSpecifics_ColorGroup_entries,
      AppListSpecifics_ColorGroup_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AppListSpecifics_ColorGroup_strings[idx].get();
}
bool AppListSpecifics_ColorGroup_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppListSpecifics_ColorGroup* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AppListSpecifics_ColorGroup_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<AppListSpecifics_ColorGroup>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_EMPTY;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_WHITE;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_RED;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_ORANGE;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_YELLOW;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_GREEN;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_BLUE;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_MAGENTA;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::COLOR_BLACK;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::ColorGroup_MIN;
constexpr AppListSpecifics_ColorGroup AppListSpecifics::ColorGroup_MAX;
constexpr int AppListSpecifics::ColorGroup_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AppListSpecifics_IconColor::_Internal {
 public:
  using HasBits = decltype(std::declval<AppListSpecifics_IconColor>()._has_bits_);
  static void set_has_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppListSpecifics_IconColor::AppListSpecifics_IconColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AppListSpecifics.IconColor)
}
AppListSpecifics_IconColor::AppListSpecifics_IconColor(const AppListSpecifics_IconColor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&background_color_, &from.background_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&hue_) -
    reinterpret_cast<char*>(&background_color_)) + sizeof(hue_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.AppListSpecifics.IconColor)
}

inline void AppListSpecifics_IconColor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&background_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hue_) -
    reinterpret_cast<char*>(&background_color_)) + sizeof(hue_));
}

AppListSpecifics_IconColor::~AppListSpecifics_IconColor() {
  // @@protoc_insertion_point(destructor:sync_pb.AppListSpecifics.IconColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppListSpecifics_IconColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppListSpecifics_IconColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppListSpecifics_IconColor::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AppListSpecifics.IconColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&background_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hue_) -
        reinterpret_cast<char*>(&background_color_)) + sizeof(hue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AppListSpecifics_IconColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.AppListSpecifics.ColorGroup background_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AppListSpecifics_ColorGroup_IsValid(val))) {
            _internal_set_background_color(static_cast<::sync_pb::AppListSpecifics_ColorGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 hue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hue(&has_bits);
          hue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppListSpecifics_IconColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AppListSpecifics.IconColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.AppListSpecifics.ColorGroup background_color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_background_color(), target);
  }

  // optional int32 hue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AppListSpecifics.IconColor)
  return target;
}

size_t AppListSpecifics_IconColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AppListSpecifics.IconColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sync_pb.AppListSpecifics.ColorGroup background_color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_background_color());
    }

    // optional int32 hue = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hue());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppListSpecifics_IconColor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AppListSpecifics_IconColor*>(
      &from));
}

void AppListSpecifics_IconColor::MergeFrom(const AppListSpecifics_IconColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AppListSpecifics.IconColor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      background_color_ = from.background_color_;
    }
    if (cached_has_bits & 0x00000002u) {
      hue_ = from.hue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AppListSpecifics_IconColor::CopyFrom(const AppListSpecifics_IconColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AppListSpecifics.IconColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppListSpecifics_IconColor::IsInitialized() const {
  return true;
}

void AppListSpecifics_IconColor::InternalSwap(AppListSpecifics_IconColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppListSpecifics_IconColor, hue_)
      + sizeof(AppListSpecifics_IconColor::hue_)
      - PROTOBUF_FIELD_OFFSET(AppListSpecifics_IconColor, background_color_)>(
          reinterpret_cast<char*>(&background_color_),
          reinterpret_cast<char*>(&other->background_color_));
}

std::string AppListSpecifics_IconColor::GetTypeName() const {
  return "sync_pb.AppListSpecifics.IconColor";
}


// ===================================================================

class AppListSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AppListSpecifics>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_obsolete_page_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_pin_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::AppListSpecifics_IconColor& item_color(const AppListSpecifics* msg);
  static void set_has_item_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::sync_pb::AppListSpecifics_IconColor&
AppListSpecifics::_Internal::item_color(const AppListSpecifics* msg) {
  return *msg->item_color_;
}
AppListSpecifics::AppListSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AppListSpecifics)
}
AppListSpecifics::AppListSpecifics(const AppListSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  item_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    item_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_id()) {
    item_id_.Set(from._internal_item_id(), 
      GetArenaForAllocation());
  }
  item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_name()) {
    item_name_.Set(from._internal_item_name(), 
      GetArenaForAllocation());
  }
  parent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parent_id()) {
    parent_id_.Set(from._internal_parent_id(), 
      GetArenaForAllocation());
  }
  obsolete_page_ordinal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    obsolete_page_ordinal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obsolete_page_ordinal()) {
    obsolete_page_ordinal_.Set(from._internal_obsolete_page_ordinal(), 
      GetArenaForAllocation());
  }
  item_ordinal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    item_ordinal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_ordinal()) {
    item_ordinal_.Set(from._internal_item_ordinal(), 
      GetArenaForAllocation());
  }
  item_pin_ordinal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    item_pin_ordinal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_pin_ordinal()) {
    item_pin_ordinal_.Set(from._internal_item_pin_ordinal(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_item_color()) {
    item_color_ = new ::sync_pb::AppListSpecifics_IconColor(*from.item_color_);
  } else {
    item_color_ = nullptr;
  }
  item_type_ = from.item_type_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.AppListSpecifics)
}

inline void AppListSpecifics::SharedCtor() {
item_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  item_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  item_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
obsolete_page_ordinal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  obsolete_page_ordinal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_ordinal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  item_ordinal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_pin_ordinal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  item_pin_ordinal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_color_ = nullptr;
item_type_ = 1;
}

AppListSpecifics::~AppListSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AppListSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppListSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  item_id_.Destroy();
  item_name_.Destroy();
  parent_id_.Destroy();
  obsolete_page_ordinal_.Destroy();
  item_ordinal_.Destroy();
  item_pin_ordinal_.Destroy();
  if (this != internal_default_instance()) delete item_color_;
}

void AppListSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppListSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AppListSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      item_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      parent_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      obsolete_page_ordinal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      item_ordinal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      item_pin_ordinal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(item_color_ != nullptr);
      item_color_->Clear();
    }
    item_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AppListSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_item_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AppListSpecifics_AppListItemType_IsValid(val))) {
            _internal_set_item_type(static_cast<::sync_pb::AppListSpecifics_AppListItemType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string item_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_item_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string parent_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_parent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string OBSOLETE_page_ordinal = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_obsolete_page_ordinal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string item_ordinal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_item_ordinal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string item_pin_ordinal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_item_pin_ordinal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AppListSpecifics.IconColor item_color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppListSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AppListSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_item_id(), target);
  }

  // optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_item_type(), target);
  }

  // optional string item_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_name(), target);
  }

  // optional string parent_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_parent_id(), target);
  }

  // optional string OBSOLETE_page_ordinal = 5 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_obsolete_page_ordinal(), target);
  }

  // optional string item_ordinal = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_item_ordinal(), target);
  }

  // optional string item_pin_ordinal = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_item_pin_ordinal(), target);
  }

  // optional .sync_pb.AppListSpecifics.IconColor item_color = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::item_color(this),
        _Internal::item_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AppListSpecifics)
  return target;
}

size_t AppListSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AppListSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_id());
    }

    // optional string item_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_name());
    }

    // optional string parent_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parent_id());
    }

    // optional string OBSOLETE_page_ordinal = 5 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_page_ordinal());
    }

    // optional string item_ordinal = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_ordinal());
    }

    // optional string item_pin_ordinal = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_pin_ordinal());
    }

    // optional .sync_pb.AppListSpecifics.IconColor item_color = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_color_);
    }

    // optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_item_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppListSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AppListSpecifics*>(
      &from));
}

void AppListSpecifics::MergeFrom(const AppListSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AppListSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_id(from._internal_item_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_item_name(from._internal_item_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_parent_id(from._internal_parent_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_obsolete_page_ordinal(from._internal_obsolete_page_ordinal());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_item_ordinal(from._internal_item_ordinal());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_item_pin_ordinal(from._internal_item_pin_ordinal());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_item_color()->::sync_pb::AppListSpecifics_IconColor::MergeFrom(from._internal_item_color());
    }
    if (cached_has_bits & 0x00000080u) {
      item_type_ = from.item_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AppListSpecifics::CopyFrom(const AppListSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AppListSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppListSpecifics::IsInitialized() const {
  return true;
}

void AppListSpecifics::InternalSwap(AppListSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &item_id_, lhs_arena,
      &other->item_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &item_name_, lhs_arena,
      &other->item_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_id_, lhs_arena,
      &other->parent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &obsolete_page_ordinal_, lhs_arena,
      &other->obsolete_page_ordinal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &item_ordinal_, lhs_arena,
      &other->item_ordinal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &item_pin_ordinal_, lhs_arena,
      &other->item_pin_ordinal_, rhs_arena
  );
  swap(item_color_, other->item_color_);
  swap(item_type_, other->item_type_);
}

std::string AppListSpecifics::GetTypeName() const {
  return "sync_pb.AppListSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::AppListSpecifics_IconColor*
Arena::CreateMaybeMessage< ::sync_pb::AppListSpecifics_IconColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AppListSpecifics_IconColor >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AppListSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::AppListSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AppListSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
