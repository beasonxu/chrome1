// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/web_app_specifics.proto

#include "components/sync/protocol/web_app_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR WebAppIconInfo::WebAppIconInfo(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , size_in_px_(0)
  , purpose_(0)
{}
struct WebAppIconInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebAppIconInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebAppIconInfoDefaultTypeInternal() {}
  union {
    WebAppIconInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebAppIconInfoDefaultTypeInternal _WebAppIconInfo_default_instance_;
PROTOBUF_CONSTEXPR WebAppSpecifics::WebAppSpecifics(
    ::_pbi::ConstantInitialized)
  : icon_infos_()
  , start_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , scope_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_page_ordinal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_launch_ordinal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , manifest_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_display_mode_(0)

  , theme_color_(0u){}
struct WebAppSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebAppSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebAppSpecificsDefaultTypeInternal() {}
  union {
    WebAppSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebAppSpecificsDefaultTypeInternal _WebAppSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool WebAppIconInfo_Purpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WebAppIconInfo_Purpose_strings[4] = {};

static const char WebAppIconInfo_Purpose_names[] =
  "ANY"
  "MASKABLE"
  "MONOCHROME"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WebAppIconInfo_Purpose_entries[] = {
  { {WebAppIconInfo_Purpose_names + 0, 3}, 1 },
  { {WebAppIconInfo_Purpose_names + 3, 8}, 2 },
  { {WebAppIconInfo_Purpose_names + 11, 10}, 3 },
  { {WebAppIconInfo_Purpose_names + 21, 11}, 0 },
};

static const int WebAppIconInfo_Purpose_entries_by_number[] = {
  3, // 0 -> UNSPECIFIED
  0, // 1 -> ANY
  1, // 2 -> MASKABLE
  2, // 3 -> MONOCHROME
};

const std::string& WebAppIconInfo_Purpose_Name(
    WebAppIconInfo_Purpose value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WebAppIconInfo_Purpose_entries,
          WebAppIconInfo_Purpose_entries_by_number,
          4, WebAppIconInfo_Purpose_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WebAppIconInfo_Purpose_entries,
      WebAppIconInfo_Purpose_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WebAppIconInfo_Purpose_strings[idx].get();
}
bool WebAppIconInfo_Purpose_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebAppIconInfo_Purpose* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WebAppIconInfo_Purpose_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WebAppIconInfo_Purpose>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebAppIconInfo_Purpose WebAppIconInfo::UNSPECIFIED;
constexpr WebAppIconInfo_Purpose WebAppIconInfo::ANY;
constexpr WebAppIconInfo_Purpose WebAppIconInfo::MASKABLE;
constexpr WebAppIconInfo_Purpose WebAppIconInfo::MONOCHROME;
constexpr WebAppIconInfo_Purpose WebAppIconInfo::Purpose_MIN;
constexpr WebAppIconInfo_Purpose WebAppIconInfo::Purpose_MAX;
constexpr int WebAppIconInfo::Purpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WebAppSpecifics_UserDisplayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WebAppSpecifics_UserDisplayMode_strings[4] = {};

static const char WebAppSpecifics_UserDisplayMode_names[] =
  "BROWSER"
  "STANDALONE"
  "TABBED"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WebAppSpecifics_UserDisplayMode_entries[] = {
  { {WebAppSpecifics_UserDisplayMode_names + 0, 7}, 1 },
  { {WebAppSpecifics_UserDisplayMode_names + 7, 10}, 3 },
  { {WebAppSpecifics_UserDisplayMode_names + 17, 6}, 6 },
  { {WebAppSpecifics_UserDisplayMode_names + 23, 11}, 0 },
};

static const int WebAppSpecifics_UserDisplayMode_entries_by_number[] = {
  3, // 0 -> UNSPECIFIED
  0, // 1 -> BROWSER
  1, // 3 -> STANDALONE
  2, // 6 -> TABBED
};

const std::string& WebAppSpecifics_UserDisplayMode_Name(
    WebAppSpecifics_UserDisplayMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WebAppSpecifics_UserDisplayMode_entries,
          WebAppSpecifics_UserDisplayMode_entries_by_number,
          4, WebAppSpecifics_UserDisplayMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WebAppSpecifics_UserDisplayMode_entries,
      WebAppSpecifics_UserDisplayMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WebAppSpecifics_UserDisplayMode_strings[idx].get();
}
bool WebAppSpecifics_UserDisplayMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebAppSpecifics_UserDisplayMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WebAppSpecifics_UserDisplayMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WebAppSpecifics_UserDisplayMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics::UNSPECIFIED;
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics::BROWSER;
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics::STANDALONE;
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics::TABBED;
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics::UserDisplayMode_MIN;
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics::UserDisplayMode_MAX;
constexpr int WebAppSpecifics::UserDisplayMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WebAppIconInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WebAppIconInfo>()._has_bits_);
  static void set_has_size_in_px(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WebAppIconInfo::WebAppIconInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WebAppIconInfo)
}
WebAppIconInfo::WebAppIconInfo(const WebAppIconInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_in_px_, &from.size_in_px_,
    static_cast<size_t>(reinterpret_cast<char*>(&purpose_) -
    reinterpret_cast<char*>(&size_in_px_)) + sizeof(purpose_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WebAppIconInfo)
}

inline void WebAppIconInfo::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_in_px_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purpose_) -
    reinterpret_cast<char*>(&size_in_px_)) + sizeof(purpose_));
}

WebAppIconInfo::~WebAppIconInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.WebAppIconInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebAppIconInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void WebAppIconInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebAppIconInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WebAppIconInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&size_in_px_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purpose_) -
        reinterpret_cast<char*>(&size_in_px_)) + sizeof(purpose_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebAppIconInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 size_in_px = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_size_in_px(&has_bits);
          size_in_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WebAppIconInfo.Purpose purpose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WebAppIconInfo_Purpose_IsValid(val))) {
            _internal_set_purpose(static_cast<::sync_pb::WebAppIconInfo_Purpose>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebAppIconInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WebAppIconInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 size_in_px = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_size_in_px(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional .sync_pb.WebAppIconInfo.Purpose purpose = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_purpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WebAppIconInfo)
  return target;
}

size_t WebAppIconInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WebAppIconInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional int32 size_in_px = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size_in_px());
    }

    // optional .sync_pb.WebAppIconInfo.Purpose purpose = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_purpose());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebAppIconInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebAppIconInfo*>(
      &from));
}

void WebAppIconInfo::MergeFrom(const WebAppIconInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WebAppIconInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      size_in_px_ = from.size_in_px_;
    }
    if (cached_has_bits & 0x00000004u) {
      purpose_ = from.purpose_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebAppIconInfo::CopyFrom(const WebAppIconInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WebAppIconInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebAppIconInfo::IsInitialized() const {
  return true;
}

void WebAppIconInfo::InternalSwap(WebAppIconInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebAppIconInfo, purpose_)
      + sizeof(WebAppIconInfo::purpose_)
      - PROTOBUF_FIELD_OFFSET(WebAppIconInfo, size_in_px_)>(
          reinterpret_cast<char*>(&size_in_px_),
          reinterpret_cast<char*>(&other->size_in_px_));
}

std::string WebAppIconInfo::GetTypeName() const {
  return "sync_pb.WebAppIconInfo";
}


// ===================================================================

class WebAppSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<WebAppSpecifics>()._has_bits_);
  static void set_has_start_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_display_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_theme_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_page_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_launch_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_manifest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

WebAppSpecifics::WebAppSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  icon_infos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WebAppSpecifics)
}
WebAppSpecifics::WebAppSpecifics(const WebAppSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      icon_infos_(from.icon_infos_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  start_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_url()) {
    start_url_.Set(from._internal_start_url(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scope()) {
    scope_.Set(from._internal_scope(), 
      GetArenaForAllocation());
  }
  user_page_ordinal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_page_ordinal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_page_ordinal()) {
    user_page_ordinal_.Set(from._internal_user_page_ordinal(), 
      GetArenaForAllocation());
  }
  user_launch_ordinal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_launch_ordinal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_launch_ordinal()) {
    user_launch_ordinal_.Set(from._internal_user_launch_ordinal(), 
      GetArenaForAllocation());
  }
  manifest_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manifest_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manifest_id()) {
    manifest_id_.Set(from._internal_manifest_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_display_mode_, &from.user_display_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&theme_color_) -
    reinterpret_cast<char*>(&user_display_mode_)) + sizeof(theme_color_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WebAppSpecifics)
}

inline void WebAppSpecifics::SharedCtor() {
start_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
scope_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scope_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_page_ordinal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_page_ordinal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_launch_ordinal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_launch_ordinal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manifest_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manifest_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_display_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&theme_color_) -
    reinterpret_cast<char*>(&user_display_mode_)) + sizeof(theme_color_));
}

WebAppSpecifics::~WebAppSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.WebAppSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebAppSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  start_url_.Destroy();
  name_.Destroy();
  scope_.Destroy();
  user_page_ordinal_.Destroy();
  user_launch_ordinal_.Destroy();
  manifest_id_.Destroy();
}

void WebAppSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebAppSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WebAppSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      start_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      scope_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      user_page_ordinal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      user_launch_ordinal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      manifest_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&user_display_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&theme_color_) -
        reinterpret_cast<char*>(&user_display_mode_)) + sizeof(theme_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebAppSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string start_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_start_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WebAppSpecifics.UserDisplayMode user_display_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WebAppSpecifics_UserDisplayMode_IsValid(val))) {
            _internal_set_user_display_mode(static_cast<::sync_pb::WebAppSpecifics_UserDisplayMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 theme_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_theme_color(&has_bits);
          theme_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string scope = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_scope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.WebAppIconInfo icon_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_icon_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string user_page_ordinal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_user_page_ordinal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_launch_ordinal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_user_launch_ordinal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string manifest_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_manifest_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebAppSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WebAppSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string start_url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_url(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .sync_pb.WebAppSpecifics.UserDisplayMode user_display_mode = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_user_display_mode(), target);
  }

  // optional uint32 theme_color = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_theme_color(), target);
  }

  // optional string scope = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_scope(), target);
  }

  // repeated .sync_pb.WebAppIconInfo icon_infos = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_icon_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_icon_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string user_page_ordinal = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_page_ordinal(), target);
  }

  // optional string user_launch_ordinal = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_user_launch_ordinal(), target);
  }

  // optional string manifest_id = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_manifest_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WebAppSpecifics)
  return target;
}

size_t WebAppSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WebAppSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.WebAppIconInfo icon_infos = 6;
  total_size += 1UL * this->_internal_icon_infos_size();
  for (const auto& msg : this->icon_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string start_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_url());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string scope = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scope());
    }

    // optional string user_page_ordinal = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_page_ordinal());
    }

    // optional string user_launch_ordinal = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_launch_ordinal());
    }

    // optional string manifest_id = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manifest_id());
    }

    // optional .sync_pb.WebAppSpecifics.UserDisplayMode user_display_mode = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_user_display_mode());
    }

    // optional uint32 theme_color = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_theme_color());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebAppSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebAppSpecifics*>(
      &from));
}

void WebAppSpecifics::MergeFrom(const WebAppSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WebAppSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  icon_infos_.MergeFrom(from.icon_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_start_url(from._internal_start_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_scope(from._internal_scope());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_user_page_ordinal(from._internal_user_page_ordinal());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_user_launch_ordinal(from._internal_user_launch_ordinal());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_manifest_id(from._internal_manifest_id());
    }
    if (cached_has_bits & 0x00000040u) {
      user_display_mode_ = from.user_display_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      theme_color_ = from.theme_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebAppSpecifics::CopyFrom(const WebAppSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WebAppSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebAppSpecifics::IsInitialized() const {
  return true;
}

void WebAppSpecifics::InternalSwap(WebAppSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  icon_infos_.InternalSwap(&other->icon_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &start_url_, lhs_arena,
      &other->start_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &scope_, lhs_arena,
      &other->scope_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_page_ordinal_, lhs_arena,
      &other->user_page_ordinal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_launch_ordinal_, lhs_arena,
      &other->user_launch_ordinal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &manifest_id_, lhs_arena,
      &other->manifest_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebAppSpecifics, theme_color_)
      + sizeof(WebAppSpecifics::theme_color_)
      - PROTOBUF_FIELD_OFFSET(WebAppSpecifics, user_display_mode_)>(
          reinterpret_cast<char*>(&user_display_mode_),
          reinterpret_cast<char*>(&other->user_display_mode_));
}

std::string WebAppSpecifics::GetTypeName() const {
  return "sync_pb.WebAppSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::WebAppIconInfo*
Arena::CreateMaybeMessage< ::sync_pb::WebAppIconInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WebAppIconInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WebAppSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::WebAppSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WebAppSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
