// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/data_type_progress_marker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class DataTypeContext;
struct DataTypeContextDefaultTypeInternal;
extern DataTypeContextDefaultTypeInternal _DataTypeContext_default_instance_;
class DataTypeProgressMarker;
struct DataTypeProgressMarkerDefaultTypeInternal;
extern DataTypeProgressMarkerDefaultTypeInternal _DataTypeProgressMarker_default_instance_;
class GarbageCollectionDirective;
struct GarbageCollectionDirectiveDefaultTypeInternal;
extern GarbageCollectionDirectiveDefaultTypeInternal _GarbageCollectionDirective_default_instance_;
class GetUpdateTriggers;
struct GetUpdateTriggersDefaultTypeInternal;
extern GetUpdateTriggersDefaultTypeInternal _GetUpdateTriggers_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::DataTypeContext* Arena::CreateMaybeMessage<::sync_pb::DataTypeContext>(Arena*);
template<> ::sync_pb::DataTypeProgressMarker* Arena::CreateMaybeMessage<::sync_pb::DataTypeProgressMarker>(Arena*);
template<> ::sync_pb::GarbageCollectionDirective* Arena::CreateMaybeMessage<::sync_pb::GarbageCollectionDirective>(Arena*);
template<> ::sync_pb::GetUpdateTriggers* Arena::CreateMaybeMessage<::sync_pb::GetUpdateTriggers>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum GarbageCollectionDirective_Type : int {
  GarbageCollectionDirective_Type_UNKNOWN = 0,
  GarbageCollectionDirective_Type_VERSION_WATERMARK = 1,
  GarbageCollectionDirective_Type_AGE_WATERMARK = 2,
  GarbageCollectionDirective_Type_DEPRECATED_MAX_ITEM_COUNT PROTOBUF_DEPRECATED_ENUM = 3
};
bool GarbageCollectionDirective_Type_IsValid(int value);
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective_Type_Type_MIN = GarbageCollectionDirective_Type_UNKNOWN;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective_Type_Type_MAX = GarbageCollectionDirective_Type_DEPRECATED_MAX_ITEM_COUNT;
constexpr int GarbageCollectionDirective_Type_Type_ARRAYSIZE = GarbageCollectionDirective_Type_Type_MAX + 1;

const std::string& GarbageCollectionDirective_Type_Name(GarbageCollectionDirective_Type value);
template<typename T>
inline const std::string& GarbageCollectionDirective_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GarbageCollectionDirective_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GarbageCollectionDirective_Type_Name.");
  return GarbageCollectionDirective_Type_Name(static_cast<GarbageCollectionDirective_Type>(enum_t_value));
}
bool GarbageCollectionDirective_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GarbageCollectionDirective_Type* value);
// ===================================================================

class DataTypeProgressMarker final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.DataTypeProgressMarker) */ {
 public:
  inline DataTypeProgressMarker() : DataTypeProgressMarker(nullptr) {}
  ~DataTypeProgressMarker() override;
  explicit PROTOBUF_CONSTEXPR DataTypeProgressMarker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataTypeProgressMarker(const DataTypeProgressMarker& from);
  DataTypeProgressMarker(DataTypeProgressMarker&& from) noexcept
    : DataTypeProgressMarker() {
    *this = ::std::move(from);
  }

  inline DataTypeProgressMarker& operator=(const DataTypeProgressMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataTypeProgressMarker& operator=(DataTypeProgressMarker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DataTypeProgressMarker& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataTypeProgressMarker* internal_default_instance() {
    return reinterpret_cast<const DataTypeProgressMarker*>(
               &_DataTypeProgressMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataTypeProgressMarker& a, DataTypeProgressMarker& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DataTypeProgressMarker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataTypeProgressMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataTypeProgressMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataTypeProgressMarker>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DataTypeProgressMarker& from);
  void MergeFrom(const DataTypeProgressMarker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataTypeProgressMarker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.DataTypeProgressMarker";
  }
  protected:
  explicit DataTypeProgressMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kGetUpdateTriggersFieldNumber = 5,
    kGcDirectiveFieldNumber = 6,
    kDataTypeIdFieldNumber = 1,
  };
  // optional bytes token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
  bool has_get_update_triggers() const;
  private:
  bool _internal_has_get_update_triggers() const;
  public:
  void clear_get_update_triggers();
  const ::sync_pb::GetUpdateTriggers& get_update_triggers() const;
  PROTOBUF_NODISCARD ::sync_pb::GetUpdateTriggers* release_get_update_triggers();
  ::sync_pb::GetUpdateTriggers* mutable_get_update_triggers();
  void set_allocated_get_update_triggers(::sync_pb::GetUpdateTriggers* get_update_triggers);
  private:
  const ::sync_pb::GetUpdateTriggers& _internal_get_update_triggers() const;
  ::sync_pb::GetUpdateTriggers* _internal_mutable_get_update_triggers();
  public:
  void unsafe_arena_set_allocated_get_update_triggers(
      ::sync_pb::GetUpdateTriggers* get_update_triggers);
  ::sync_pb::GetUpdateTriggers* unsafe_arena_release_get_update_triggers();

  // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
  bool has_gc_directive() const;
  private:
  bool _internal_has_gc_directive() const;
  public:
  void clear_gc_directive();
  const ::sync_pb::GarbageCollectionDirective& gc_directive() const;
  PROTOBUF_NODISCARD ::sync_pb::GarbageCollectionDirective* release_gc_directive();
  ::sync_pb::GarbageCollectionDirective* mutable_gc_directive();
  void set_allocated_gc_directive(::sync_pb::GarbageCollectionDirective* gc_directive);
  private:
  const ::sync_pb::GarbageCollectionDirective& _internal_gc_directive() const;
  ::sync_pb::GarbageCollectionDirective* _internal_mutable_gc_directive();
  public:
  void unsafe_arena_set_allocated_gc_directive(
      ::sync_pb::GarbageCollectionDirective* gc_directive);
  ::sync_pb::GarbageCollectionDirective* unsafe_arena_release_gc_directive();

  // optional int32 data_type_id = 1;
  bool has_data_type_id() const;
  private:
  bool _internal_has_data_type_id() const;
  public:
  void clear_data_type_id();
  int32_t data_type_id() const;
  void set_data_type_id(int32_t value);
  private:
  int32_t _internal_data_type_id() const;
  void _internal_set_data_type_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.DataTypeProgressMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::sync_pb::GetUpdateTriggers* get_update_triggers_;
  ::sync_pb::GarbageCollectionDirective* gc_directive_;
  int32_t data_type_id_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto;
};
// -------------------------------------------------------------------

class DataTypeContext final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.DataTypeContext) */ {
 public:
  inline DataTypeContext() : DataTypeContext(nullptr) {}
  ~DataTypeContext() override;
  explicit PROTOBUF_CONSTEXPR DataTypeContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataTypeContext(const DataTypeContext& from);
  DataTypeContext(DataTypeContext&& from) noexcept
    : DataTypeContext() {
    *this = ::std::move(from);
  }

  inline DataTypeContext& operator=(const DataTypeContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataTypeContext& operator=(DataTypeContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DataTypeContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataTypeContext* internal_default_instance() {
    return reinterpret_cast<const DataTypeContext*>(
               &_DataTypeContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataTypeContext& a, DataTypeContext& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DataTypeContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataTypeContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataTypeContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataTypeContext>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DataTypeContext& from);
  void MergeFrom(const DataTypeContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataTypeContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.DataTypeContext";
  }
  protected:
  explicit DataTypeContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 2,
    kVersionFieldNumber = 3,
    kDataTypeIdFieldNumber = 1,
  };
  // optional bytes context = 2;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // optional int64 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // optional int32 data_type_id = 1;
  bool has_data_type_id() const;
  private:
  bool _internal_has_data_type_id() const;
  public:
  void clear_data_type_id();
  int32_t data_type_id() const;
  void set_data_type_id(int32_t value);
  private:
  int32_t _internal_data_type_id() const;
  void _internal_set_data_type_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.DataTypeContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  int64_t version_;
  int32_t data_type_id_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto;
};
// -------------------------------------------------------------------

class GarbageCollectionDirective final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GarbageCollectionDirective) */ {
 public:
  inline GarbageCollectionDirective() : GarbageCollectionDirective(nullptr) {}
  ~GarbageCollectionDirective() override;
  explicit PROTOBUF_CONSTEXPR GarbageCollectionDirective(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GarbageCollectionDirective(const GarbageCollectionDirective& from);
  GarbageCollectionDirective(GarbageCollectionDirective&& from) noexcept
    : GarbageCollectionDirective() {
    *this = ::std::move(from);
  }

  inline GarbageCollectionDirective& operator=(const GarbageCollectionDirective& from) {
    CopyFrom(from);
    return *this;
  }
  inline GarbageCollectionDirective& operator=(GarbageCollectionDirective&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GarbageCollectionDirective& default_instance() {
    return *internal_default_instance();
  }
  static inline const GarbageCollectionDirective* internal_default_instance() {
    return reinterpret_cast<const GarbageCollectionDirective*>(
               &_GarbageCollectionDirective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GarbageCollectionDirective& a, GarbageCollectionDirective& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GarbageCollectionDirective* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GarbageCollectionDirective* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GarbageCollectionDirective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GarbageCollectionDirective>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GarbageCollectionDirective& from);
  void MergeFrom(const GarbageCollectionDirective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GarbageCollectionDirective* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GarbageCollectionDirective";
  }
  protected:
  explicit GarbageCollectionDirective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GarbageCollectionDirective_Type Type;
  static constexpr Type UNKNOWN =
    GarbageCollectionDirective_Type_UNKNOWN;
  static constexpr Type VERSION_WATERMARK =
    GarbageCollectionDirective_Type_VERSION_WATERMARK;
  static constexpr Type AGE_WATERMARK =
    GarbageCollectionDirective_Type_AGE_WATERMARK;
  PROTOBUF_DEPRECATED_ENUM static constexpr Type DEPRECATED_MAX_ITEM_COUNT =
    GarbageCollectionDirective_Type_DEPRECATED_MAX_ITEM_COUNT;
  static inline bool Type_IsValid(int value) {
    return GarbageCollectionDirective_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GarbageCollectionDirective_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GarbageCollectionDirective_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GarbageCollectionDirective_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GarbageCollectionDirective_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return GarbageCollectionDirective_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionWatermarkFieldNumber = 2,
    kTypeFieldNumber = 1,
    kAgeWatermarkInDaysFieldNumber = 3,
  };
  // optional int64 version_watermark = 2;
  bool has_version_watermark() const;
  private:
  bool _internal_has_version_watermark() const;
  public:
  void clear_version_watermark();
  int64_t version_watermark() const;
  void set_version_watermark(int64_t value);
  private:
  int64_t _internal_version_watermark() const;
  void _internal_set_version_watermark(int64_t value);
  public:

  // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sync_pb::GarbageCollectionDirective_Type type() const;
  void set_type(::sync_pb::GarbageCollectionDirective_Type value);
  private:
  ::sync_pb::GarbageCollectionDirective_Type _internal_type() const;
  void _internal_set_type(::sync_pb::GarbageCollectionDirective_Type value);
  public:

  // optional int32 age_watermark_in_days = 3;
  bool has_age_watermark_in_days() const;
  private:
  bool _internal_has_age_watermark_in_days() const;
  public:
  void clear_age_watermark_in_days();
  int32_t age_watermark_in_days() const;
  void set_age_watermark_in_days(int32_t value);
  private:
  int32_t _internal_age_watermark_in_days() const;
  void _internal_set_age_watermark_in_days(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.GarbageCollectionDirective)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t version_watermark_;
  int type_;
  int32_t age_watermark_in_days_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto;
};
// -------------------------------------------------------------------

class GetUpdateTriggers final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GetUpdateTriggers) */ {
 public:
  inline GetUpdateTriggers() : GetUpdateTriggers(nullptr) {}
  ~GetUpdateTriggers() override;
  explicit PROTOBUF_CONSTEXPR GetUpdateTriggers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUpdateTriggers(const GetUpdateTriggers& from);
  GetUpdateTriggers(GetUpdateTriggers&& from) noexcept
    : GetUpdateTriggers() {
    *this = ::std::move(from);
  }

  inline GetUpdateTriggers& operator=(const GetUpdateTriggers& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdateTriggers& operator=(GetUpdateTriggers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetUpdateTriggers& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUpdateTriggers* internal_default_instance() {
    return reinterpret_cast<const GetUpdateTriggers*>(
               &_GetUpdateTriggers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUpdateTriggers& a, GetUpdateTriggers& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GetUpdateTriggers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUpdateTriggers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUpdateTriggers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUpdateTriggers>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetUpdateTriggers& from);
  void MergeFrom(const GetUpdateTriggers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetUpdateTriggers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GetUpdateTriggers";
  }
  protected:
  explicit GetUpdateTriggers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationHintFieldNumber = 1,
    kLocalModificationNudgesFieldNumber = 4,
    kDatatypeRefreshNudgesFieldNumber = 5,
    kClientDroppedHintsFieldNumber = 2,
    kInvalidationsOutOfSyncFieldNumber = 3,
    kServerDroppedHintsFieldNumber = 6,
    kInitialSyncInProgressFieldNumber = 7,
    kSyncForResolveConflictInProgressFieldNumber = 8,
  };
  // repeated string notification_hint = 1;
  int notification_hint_size() const;
  private:
  int _internal_notification_hint_size() const;
  public:
  void clear_notification_hint();
  const std::string& notification_hint(int index) const;
  std::string* mutable_notification_hint(int index);
  void set_notification_hint(int index, const std::string& value);
  void set_notification_hint(int index, std::string&& value);
  void set_notification_hint(int index, const char* value);
  void set_notification_hint(int index, const char* value, size_t size);
  std::string* add_notification_hint();
  void add_notification_hint(const std::string& value);
  void add_notification_hint(std::string&& value);
  void add_notification_hint(const char* value);
  void add_notification_hint(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_hint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_hint();
  private:
  const std::string& _internal_notification_hint(int index) const;
  std::string* _internal_add_notification_hint();
  public:

  // optional int64 local_modification_nudges = 4;
  bool has_local_modification_nudges() const;
  private:
  bool _internal_has_local_modification_nudges() const;
  public:
  void clear_local_modification_nudges();
  int64_t local_modification_nudges() const;
  void set_local_modification_nudges(int64_t value);
  private:
  int64_t _internal_local_modification_nudges() const;
  void _internal_set_local_modification_nudges(int64_t value);
  public:

  // optional int64 datatype_refresh_nudges = 5;
  bool has_datatype_refresh_nudges() const;
  private:
  bool _internal_has_datatype_refresh_nudges() const;
  public:
  void clear_datatype_refresh_nudges();
  int64_t datatype_refresh_nudges() const;
  void set_datatype_refresh_nudges(int64_t value);
  private:
  int64_t _internal_datatype_refresh_nudges() const;
  void _internal_set_datatype_refresh_nudges(int64_t value);
  public:

  // optional bool client_dropped_hints = 2;
  bool has_client_dropped_hints() const;
  private:
  bool _internal_has_client_dropped_hints() const;
  public:
  void clear_client_dropped_hints();
  bool client_dropped_hints() const;
  void set_client_dropped_hints(bool value);
  private:
  bool _internal_client_dropped_hints() const;
  void _internal_set_client_dropped_hints(bool value);
  public:

  // optional bool invalidations_out_of_sync = 3;
  bool has_invalidations_out_of_sync() const;
  private:
  bool _internal_has_invalidations_out_of_sync() const;
  public:
  void clear_invalidations_out_of_sync();
  bool invalidations_out_of_sync() const;
  void set_invalidations_out_of_sync(bool value);
  private:
  bool _internal_invalidations_out_of_sync() const;
  void _internal_set_invalidations_out_of_sync(bool value);
  public:

  // optional bool server_dropped_hints = 6;
  bool has_server_dropped_hints() const;
  private:
  bool _internal_has_server_dropped_hints() const;
  public:
  void clear_server_dropped_hints();
  bool server_dropped_hints() const;
  void set_server_dropped_hints(bool value);
  private:
  bool _internal_server_dropped_hints() const;
  void _internal_set_server_dropped_hints(bool value);
  public:

  // optional bool initial_sync_in_progress = 7;
  bool has_initial_sync_in_progress() const;
  private:
  bool _internal_has_initial_sync_in_progress() const;
  public:
  void clear_initial_sync_in_progress();
  bool initial_sync_in_progress() const;
  void set_initial_sync_in_progress(bool value);
  private:
  bool _internal_initial_sync_in_progress() const;
  void _internal_set_initial_sync_in_progress(bool value);
  public:

  // optional bool sync_for_resolve_conflict_in_progress = 8;
  bool has_sync_for_resolve_conflict_in_progress() const;
  private:
  bool _internal_has_sync_for_resolve_conflict_in_progress() const;
  public:
  void clear_sync_for_resolve_conflict_in_progress();
  bool sync_for_resolve_conflict_in_progress() const;
  void set_sync_for_resolve_conflict_in_progress(bool value);
  private:
  bool _internal_sync_for_resolve_conflict_in_progress() const;
  void _internal_set_sync_for_resolve_conflict_in_progress(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.GetUpdateTriggers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_hint_;
  int64_t local_modification_nudges_;
  int64_t datatype_refresh_nudges_;
  bool client_dropped_hints_;
  bool invalidations_out_of_sync_;
  bool server_dropped_hints_;
  bool initial_sync_in_progress_;
  bool sync_for_resolve_conflict_in_progress_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataTypeProgressMarker

// optional int32 data_type_id = 1;
inline bool DataTypeProgressMarker::_internal_has_data_type_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataTypeProgressMarker::has_data_type_id() const {
  return _internal_has_data_type_id();
}
inline void DataTypeProgressMarker::clear_data_type_id() {
  data_type_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t DataTypeProgressMarker::_internal_data_type_id() const {
  return data_type_id_;
}
inline int32_t DataTypeProgressMarker::data_type_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.data_type_id)
  return _internal_data_type_id();
}
inline void DataTypeProgressMarker::_internal_set_data_type_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  data_type_id_ = value;
}
inline void DataTypeProgressMarker::set_data_type_id(int32_t value) {
  _internal_set_data_type_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.data_type_id)
}

// optional bytes token = 2;
inline bool DataTypeProgressMarker::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataTypeProgressMarker::has_token() const {
  return _internal_has_token();
}
inline void DataTypeProgressMarker::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataTypeProgressMarker::token() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataTypeProgressMarker::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.token)
}
inline std::string* DataTypeProgressMarker::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.token)
  return _s;
}
inline const std::string& DataTypeProgressMarker::_internal_token() const {
  return token_.Get();
}
inline void DataTypeProgressMarker::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* DataTypeProgressMarker::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* DataTypeProgressMarker::release_token() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataTypeProgressMarker::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.token)
}

// optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
inline bool DataTypeProgressMarker::_internal_has_get_update_triggers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || get_update_triggers_ != nullptr);
  return value;
}
inline bool DataTypeProgressMarker::has_get_update_triggers() const {
  return _internal_has_get_update_triggers();
}
inline void DataTypeProgressMarker::clear_get_update_triggers() {
  if (get_update_triggers_ != nullptr) get_update_triggers_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::GetUpdateTriggers& DataTypeProgressMarker::_internal_get_update_triggers() const {
  const ::sync_pb::GetUpdateTriggers* p = get_update_triggers_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::GetUpdateTriggers&>(
      ::sync_pb::_GetUpdateTriggers_default_instance_);
}
inline const ::sync_pb::GetUpdateTriggers& DataTypeProgressMarker::get_update_triggers() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.get_update_triggers)
  return _internal_get_update_triggers();
}
inline void DataTypeProgressMarker::unsafe_arena_set_allocated_get_update_triggers(
    ::sync_pb::GetUpdateTriggers* get_update_triggers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_update_triggers_);
  }
  get_update_triggers_ = get_update_triggers;
  if (get_update_triggers) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.DataTypeProgressMarker.get_update_triggers)
}
inline ::sync_pb::GetUpdateTriggers* DataTypeProgressMarker::release_get_update_triggers() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::GetUpdateTriggers* temp = get_update_triggers_;
  get_update_triggers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::GetUpdateTriggers* DataTypeProgressMarker::unsafe_arena_release_get_update_triggers() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.get_update_triggers)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::GetUpdateTriggers* temp = get_update_triggers_;
  get_update_triggers_ = nullptr;
  return temp;
}
inline ::sync_pb::GetUpdateTriggers* DataTypeProgressMarker::_internal_mutable_get_update_triggers() {
  _has_bits_[0] |= 0x00000002u;
  if (get_update_triggers_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GetUpdateTriggers>(GetArenaForAllocation());
    get_update_triggers_ = p;
  }
  return get_update_triggers_;
}
inline ::sync_pb::GetUpdateTriggers* DataTypeProgressMarker::mutable_get_update_triggers() {
  ::sync_pb::GetUpdateTriggers* _msg = _internal_mutable_get_update_triggers();
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.get_update_triggers)
  return _msg;
}
inline void DataTypeProgressMarker::set_allocated_get_update_triggers(::sync_pb::GetUpdateTriggers* get_update_triggers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_update_triggers_;
  }
  if (get_update_triggers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_update_triggers);
    if (message_arena != submessage_arena) {
      get_update_triggers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_update_triggers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  get_update_triggers_ = get_update_triggers;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.get_update_triggers)
}

// optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
inline bool DataTypeProgressMarker::_internal_has_gc_directive() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || gc_directive_ != nullptr);
  return value;
}
inline bool DataTypeProgressMarker::has_gc_directive() const {
  return _internal_has_gc_directive();
}
inline void DataTypeProgressMarker::clear_gc_directive() {
  if (gc_directive_ != nullptr) gc_directive_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::GarbageCollectionDirective& DataTypeProgressMarker::_internal_gc_directive() const {
  const ::sync_pb::GarbageCollectionDirective* p = gc_directive_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::GarbageCollectionDirective&>(
      ::sync_pb::_GarbageCollectionDirective_default_instance_);
}
inline const ::sync_pb::GarbageCollectionDirective& DataTypeProgressMarker::gc_directive() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.gc_directive)
  return _internal_gc_directive();
}
inline void DataTypeProgressMarker::unsafe_arena_set_allocated_gc_directive(
    ::sync_pb::GarbageCollectionDirective* gc_directive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gc_directive_);
  }
  gc_directive_ = gc_directive;
  if (gc_directive) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.DataTypeProgressMarker.gc_directive)
}
inline ::sync_pb::GarbageCollectionDirective* DataTypeProgressMarker::release_gc_directive() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::GarbageCollectionDirective* temp = gc_directive_;
  gc_directive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::GarbageCollectionDirective* DataTypeProgressMarker::unsafe_arena_release_gc_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.gc_directive)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::GarbageCollectionDirective* temp = gc_directive_;
  gc_directive_ = nullptr;
  return temp;
}
inline ::sync_pb::GarbageCollectionDirective* DataTypeProgressMarker::_internal_mutable_gc_directive() {
  _has_bits_[0] |= 0x00000004u;
  if (gc_directive_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GarbageCollectionDirective>(GetArenaForAllocation());
    gc_directive_ = p;
  }
  return gc_directive_;
}
inline ::sync_pb::GarbageCollectionDirective* DataTypeProgressMarker::mutable_gc_directive() {
  ::sync_pb::GarbageCollectionDirective* _msg = _internal_mutable_gc_directive();
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.gc_directive)
  return _msg;
}
inline void DataTypeProgressMarker::set_allocated_gc_directive(::sync_pb::GarbageCollectionDirective* gc_directive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gc_directive_;
  }
  if (gc_directive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gc_directive);
    if (message_arena != submessage_arena) {
      gc_directive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gc_directive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gc_directive_ = gc_directive;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.gc_directive)
}

// -------------------------------------------------------------------

// DataTypeContext

// optional int32 data_type_id = 1;
inline bool DataTypeContext::_internal_has_data_type_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataTypeContext::has_data_type_id() const {
  return _internal_has_data_type_id();
}
inline void DataTypeContext::clear_data_type_id() {
  data_type_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t DataTypeContext::_internal_data_type_id() const {
  return data_type_id_;
}
inline int32_t DataTypeContext::data_type_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.data_type_id)
  return _internal_data_type_id();
}
inline void DataTypeContext::_internal_set_data_type_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  data_type_id_ = value;
}
inline void DataTypeContext::set_data_type_id(int32_t value) {
  _internal_set_data_type_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.data_type_id)
}

// optional bytes context = 2;
inline bool DataTypeContext::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataTypeContext::has_context() const {
  return _internal_has_context();
}
inline void DataTypeContext::clear_context() {
  context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataTypeContext::context() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataTypeContext::set_context(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 context_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.context)
}
inline std::string* DataTypeContext::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeContext.context)
  return _s;
}
inline const std::string& DataTypeContext::_internal_context() const {
  return context_.Get();
}
inline void DataTypeContext::_internal_set_context(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(value, GetArenaForAllocation());
}
inline std::string* DataTypeContext::_internal_mutable_context() {
  _has_bits_[0] |= 0x00000001u;
  return context_.Mutable(GetArenaForAllocation());
}
inline std::string* DataTypeContext::release_context() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeContext.context)
  if (!_internal_has_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = context_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (context_.IsDefault()) {
    context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataTypeContext::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_.SetAllocated(context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (context_.IsDefault()) {
    context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeContext.context)
}

// optional int64 version = 3;
inline bool DataTypeContext::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataTypeContext::has_version() const {
  return _internal_has_version();
}
inline void DataTypeContext::clear_version() {
  version_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t DataTypeContext::_internal_version() const {
  return version_;
}
inline int64_t DataTypeContext::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.version)
  return _internal_version();
}
inline void DataTypeContext::_internal_set_version(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void DataTypeContext::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.version)
}

// -------------------------------------------------------------------

// GarbageCollectionDirective

// optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
inline bool GarbageCollectionDirective::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GarbageCollectionDirective::has_type() const {
  return _internal_has_type();
}
inline void GarbageCollectionDirective::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::GarbageCollectionDirective_Type GarbageCollectionDirective::_internal_type() const {
  return static_cast< ::sync_pb::GarbageCollectionDirective_Type >(type_);
}
inline ::sync_pb::GarbageCollectionDirective_Type GarbageCollectionDirective::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.type)
  return _internal_type();
}
inline void GarbageCollectionDirective::_internal_set_type(::sync_pb::GarbageCollectionDirective_Type value) {
  assert(::sync_pb::GarbageCollectionDirective_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void GarbageCollectionDirective::set_type(::sync_pb::GarbageCollectionDirective_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.type)
}

// optional int64 version_watermark = 2;
inline bool GarbageCollectionDirective::_internal_has_version_watermark() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GarbageCollectionDirective::has_version_watermark() const {
  return _internal_has_version_watermark();
}
inline void GarbageCollectionDirective::clear_version_watermark() {
  version_watermark_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t GarbageCollectionDirective::_internal_version_watermark() const {
  return version_watermark_;
}
inline int64_t GarbageCollectionDirective::version_watermark() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.version_watermark)
  return _internal_version_watermark();
}
inline void GarbageCollectionDirective::_internal_set_version_watermark(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  version_watermark_ = value;
}
inline void GarbageCollectionDirective::set_version_watermark(int64_t value) {
  _internal_set_version_watermark(value);
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.version_watermark)
}

// optional int32 age_watermark_in_days = 3;
inline bool GarbageCollectionDirective::_internal_has_age_watermark_in_days() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GarbageCollectionDirective::has_age_watermark_in_days() const {
  return _internal_has_age_watermark_in_days();
}
inline void GarbageCollectionDirective::clear_age_watermark_in_days() {
  age_watermark_in_days_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t GarbageCollectionDirective::_internal_age_watermark_in_days() const {
  return age_watermark_in_days_;
}
inline int32_t GarbageCollectionDirective::age_watermark_in_days() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.age_watermark_in_days)
  return _internal_age_watermark_in_days();
}
inline void GarbageCollectionDirective::_internal_set_age_watermark_in_days(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  age_watermark_in_days_ = value;
}
inline void GarbageCollectionDirective::set_age_watermark_in_days(int32_t value) {
  _internal_set_age_watermark_in_days(value);
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.age_watermark_in_days)
}

// -------------------------------------------------------------------

// GetUpdateTriggers

// repeated string notification_hint = 1;
inline int GetUpdateTriggers::_internal_notification_hint_size() const {
  return notification_hint_.size();
}
inline int GetUpdateTriggers::notification_hint_size() const {
  return _internal_notification_hint_size();
}
inline void GetUpdateTriggers::clear_notification_hint() {
  notification_hint_.Clear();
}
inline std::string* GetUpdateTriggers::add_notification_hint() {
  std::string* _s = _internal_add_notification_hint();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.GetUpdateTriggers.notification_hint)
  return _s;
}
inline const std::string& GetUpdateTriggers::_internal_notification_hint(int index) const {
  return notification_hint_.Get(index);
}
inline const std::string& GetUpdateTriggers::notification_hint(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.notification_hint)
  return _internal_notification_hint(index);
}
inline std::string* GetUpdateTriggers::mutable_notification_hint(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_.Mutable(index);
}
inline void GetUpdateTriggers::set_notification_hint(int index, const std::string& value) {
  notification_hint_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::set_notification_hint(int index, std::string&& value) {
  notification_hint_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::set_notification_hint(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_hint_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::set_notification_hint(int index, const char* value, size_t size) {
  notification_hint_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetUpdateTriggers.notification_hint)
}
inline std::string* GetUpdateTriggers::_internal_add_notification_hint() {
  return notification_hint_.Add();
}
inline void GetUpdateTriggers::add_notification_hint(const std::string& value) {
  notification_hint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::add_notification_hint(std::string&& value) {
  notification_hint_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::add_notification_hint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_hint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::add_notification_hint(const char* value, size_t size) {
  notification_hint_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.GetUpdateTriggers.notification_hint)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetUpdateTriggers::notification_hint() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetUpdateTriggers::mutable_notification_hint() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdateTriggers.notification_hint)
  return &notification_hint_;
}

// optional bool client_dropped_hints = 2;
inline bool GetUpdateTriggers::_internal_has_client_dropped_hints() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetUpdateTriggers::has_client_dropped_hints() const {
  return _internal_has_client_dropped_hints();
}
inline void GetUpdateTriggers::clear_client_dropped_hints() {
  client_dropped_hints_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GetUpdateTriggers::_internal_client_dropped_hints() const {
  return client_dropped_hints_;
}
inline bool GetUpdateTriggers::client_dropped_hints() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.client_dropped_hints)
  return _internal_client_dropped_hints();
}
inline void GetUpdateTriggers::_internal_set_client_dropped_hints(bool value) {
  _has_bits_[0] |= 0x00000004u;
  client_dropped_hints_ = value;
}
inline void GetUpdateTriggers::set_client_dropped_hints(bool value) {
  _internal_set_client_dropped_hints(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.client_dropped_hints)
}

// optional bool invalidations_out_of_sync = 3;
inline bool GetUpdateTriggers::_internal_has_invalidations_out_of_sync() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetUpdateTriggers::has_invalidations_out_of_sync() const {
  return _internal_has_invalidations_out_of_sync();
}
inline void GetUpdateTriggers::clear_invalidations_out_of_sync() {
  invalidations_out_of_sync_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GetUpdateTriggers::_internal_invalidations_out_of_sync() const {
  return invalidations_out_of_sync_;
}
inline bool GetUpdateTriggers::invalidations_out_of_sync() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.invalidations_out_of_sync)
  return _internal_invalidations_out_of_sync();
}
inline void GetUpdateTriggers::_internal_set_invalidations_out_of_sync(bool value) {
  _has_bits_[0] |= 0x00000008u;
  invalidations_out_of_sync_ = value;
}
inline void GetUpdateTriggers::set_invalidations_out_of_sync(bool value) {
  _internal_set_invalidations_out_of_sync(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.invalidations_out_of_sync)
}

// optional int64 local_modification_nudges = 4;
inline bool GetUpdateTriggers::_internal_has_local_modification_nudges() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetUpdateTriggers::has_local_modification_nudges() const {
  return _internal_has_local_modification_nudges();
}
inline void GetUpdateTriggers::clear_local_modification_nudges() {
  local_modification_nudges_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t GetUpdateTriggers::_internal_local_modification_nudges() const {
  return local_modification_nudges_;
}
inline int64_t GetUpdateTriggers::local_modification_nudges() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.local_modification_nudges)
  return _internal_local_modification_nudges();
}
inline void GetUpdateTriggers::_internal_set_local_modification_nudges(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  local_modification_nudges_ = value;
}
inline void GetUpdateTriggers::set_local_modification_nudges(int64_t value) {
  _internal_set_local_modification_nudges(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.local_modification_nudges)
}

// optional int64 datatype_refresh_nudges = 5;
inline bool GetUpdateTriggers::_internal_has_datatype_refresh_nudges() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetUpdateTriggers::has_datatype_refresh_nudges() const {
  return _internal_has_datatype_refresh_nudges();
}
inline void GetUpdateTriggers::clear_datatype_refresh_nudges() {
  datatype_refresh_nudges_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t GetUpdateTriggers::_internal_datatype_refresh_nudges() const {
  return datatype_refresh_nudges_;
}
inline int64_t GetUpdateTriggers::datatype_refresh_nudges() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.datatype_refresh_nudges)
  return _internal_datatype_refresh_nudges();
}
inline void GetUpdateTriggers::_internal_set_datatype_refresh_nudges(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  datatype_refresh_nudges_ = value;
}
inline void GetUpdateTriggers::set_datatype_refresh_nudges(int64_t value) {
  _internal_set_datatype_refresh_nudges(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.datatype_refresh_nudges)
}

// optional bool server_dropped_hints = 6;
inline bool GetUpdateTriggers::_internal_has_server_dropped_hints() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetUpdateTriggers::has_server_dropped_hints() const {
  return _internal_has_server_dropped_hints();
}
inline void GetUpdateTriggers::clear_server_dropped_hints() {
  server_dropped_hints_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GetUpdateTriggers::_internal_server_dropped_hints() const {
  return server_dropped_hints_;
}
inline bool GetUpdateTriggers::server_dropped_hints() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.server_dropped_hints)
  return _internal_server_dropped_hints();
}
inline void GetUpdateTriggers::_internal_set_server_dropped_hints(bool value) {
  _has_bits_[0] |= 0x00000010u;
  server_dropped_hints_ = value;
}
inline void GetUpdateTriggers::set_server_dropped_hints(bool value) {
  _internal_set_server_dropped_hints(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.server_dropped_hints)
}

// optional bool initial_sync_in_progress = 7;
inline bool GetUpdateTriggers::_internal_has_initial_sync_in_progress() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GetUpdateTriggers::has_initial_sync_in_progress() const {
  return _internal_has_initial_sync_in_progress();
}
inline void GetUpdateTriggers::clear_initial_sync_in_progress() {
  initial_sync_in_progress_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool GetUpdateTriggers::_internal_initial_sync_in_progress() const {
  return initial_sync_in_progress_;
}
inline bool GetUpdateTriggers::initial_sync_in_progress() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.initial_sync_in_progress)
  return _internal_initial_sync_in_progress();
}
inline void GetUpdateTriggers::_internal_set_initial_sync_in_progress(bool value) {
  _has_bits_[0] |= 0x00000020u;
  initial_sync_in_progress_ = value;
}
inline void GetUpdateTriggers::set_initial_sync_in_progress(bool value) {
  _internal_set_initial_sync_in_progress(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.initial_sync_in_progress)
}

// optional bool sync_for_resolve_conflict_in_progress = 8;
inline bool GetUpdateTriggers::_internal_has_sync_for_resolve_conflict_in_progress() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GetUpdateTriggers::has_sync_for_resolve_conflict_in_progress() const {
  return _internal_has_sync_for_resolve_conflict_in_progress();
}
inline void GetUpdateTriggers::clear_sync_for_resolve_conflict_in_progress() {
  sync_for_resolve_conflict_in_progress_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool GetUpdateTriggers::_internal_sync_for_resolve_conflict_in_progress() const {
  return sync_for_resolve_conflict_in_progress_;
}
inline bool GetUpdateTriggers::sync_for_resolve_conflict_in_progress() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.sync_for_resolve_conflict_in_progress)
  return _internal_sync_for_resolve_conflict_in_progress();
}
inline void GetUpdateTriggers::_internal_set_sync_for_resolve_conflict_in_progress(bool value) {
  _has_bits_[0] |= 0x00000040u;
  sync_for_resolve_conflict_in_progress_ = value;
}
inline void GetUpdateTriggers::set_sync_for_resolve_conflict_in_progress(bool value) {
  _internal_set_sync_for_resolve_conflict_in_progress(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.sync_for_resolve_conflict_in_progress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::GarbageCollectionDirective_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fdata_5ftype_5fprogress_5fmarker_2eproto
