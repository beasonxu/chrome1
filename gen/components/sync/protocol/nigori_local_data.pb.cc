// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/nigori_local_data.proto

#include "components/sync/protocol/nigori_local_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR CryptographerData::CryptographerData(
    ::_pbi::ConstantInitialized)
  : default_key_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_bag_(nullptr){}
struct CryptographerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptographerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptographerDataDefaultTypeInternal() {}
  union {
    CryptographerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptographerDataDefaultTypeInternal _CryptographerData_default_instance_;
PROTOBUF_CONSTEXPR CustomPassphraseKeyDerivationParams::CustomPassphraseKeyDerivationParams(
    ::_pbi::ConstantInitialized)
  : custom_passphrase_key_derivation_salt_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , custom_passphrase_key_derivation_method_(0)
{}
struct CustomPassphraseKeyDerivationParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomPassphraseKeyDerivationParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomPassphraseKeyDerivationParamsDefaultTypeInternal() {}
  union {
    CustomPassphraseKeyDerivationParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomPassphraseKeyDerivationParamsDefaultTypeInternal _CustomPassphraseKeyDerivationParams_default_instance_;
PROTOBUF_CONSTEXPR NigoriModel::NigoriModel(
    ::_pbi::ConstantInitialized)
  : encrypted_types_specifics_field_number_()
  , keystore_key_()
  , current_keystore_key_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_default_trusted_vault_key_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cryptographer_data_(nullptr)
  , pending_keys_(nullptr)
  , custom_passphrase_key_derivation_params_(nullptr)
  , pending_keystore_decryptor_token_(nullptr)
  , trusted_vault_debug_info_(nullptr)
  , keystore_migration_time_(int64_t{0})
  , custom_passphrase_time_(int64_t{0})
  , passphrase_type_(0)

  , encrypt_everything_(false){}
struct NigoriModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NigoriModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NigoriModelDefaultTypeInternal() {}
  union {
    NigoriModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NigoriModelDefaultTypeInternal _NigoriModel_default_instance_;
PROTOBUF_CONSTEXPR NigoriLocalData::NigoriLocalData(
    ::_pbi::ConstantInitialized)
  : model_type_state_(nullptr)
  , entity_metadata_(nullptr)
  , nigori_model_(nullptr){}
struct NigoriLocalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NigoriLocalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NigoriLocalDataDefaultTypeInternal() {}
  union {
    NigoriLocalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NigoriLocalDataDefaultTypeInternal _NigoriLocalData_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class CryptographerData::_Internal {
 public:
  using HasBits = decltype(std::declval<CryptographerData>()._has_bits_);
  static const ::sync_pb::NigoriKeyBag& key_bag(const CryptographerData* msg);
  static void set_has_key_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::NigoriKeyBag&
CryptographerData::_Internal::key_bag(const CryptographerData* msg) {
  return *msg->key_bag_;
}
void CryptographerData::clear_key_bag() {
  if (key_bag_ != nullptr) key_bag_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CryptographerData::CryptographerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.CryptographerData)
}
CryptographerData::CryptographerData(const CryptographerData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  default_key_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    default_key_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_key_name()) {
    default_key_name_.Set(from._internal_default_key_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_key_bag()) {
    key_bag_ = new ::sync_pb::NigoriKeyBag(*from.key_bag_);
  } else {
    key_bag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.CryptographerData)
}

inline void CryptographerData::SharedCtor() {
default_key_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  default_key_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_bag_ = nullptr;
}

CryptographerData::~CryptographerData() {
  // @@protoc_insertion_point(destructor:sync_pb.CryptographerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptographerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  default_key_name_.Destroy();
  if (this != internal_default_instance()) delete key_bag_;
}

void CryptographerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CryptographerData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CryptographerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      default_key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(key_bag_ != nullptr);
      key_bag_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CryptographerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.NigoriKeyBag key_bag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_bag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string default_key_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_default_key_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptographerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.CryptographerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.NigoriKeyBag key_bag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key_bag(this),
        _Internal::key_bag(this).GetCachedSize(), target, stream);
  }

  // optional string default_key_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_default_key_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.CryptographerData)
  return target;
}

size_t CryptographerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CryptographerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string default_key_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_key_name());
    }

    // optional .sync_pb.NigoriKeyBag key_bag = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_bag_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptographerData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CryptographerData*>(
      &from));
}

void CryptographerData::MergeFrom(const CryptographerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CryptographerData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_default_key_name(from._internal_default_key_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_key_bag()->::sync_pb::NigoriKeyBag::MergeFrom(from._internal_key_bag());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CryptographerData::CopyFrom(const CryptographerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CryptographerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptographerData::IsInitialized() const {
  return true;
}

void CryptographerData::InternalSwap(CryptographerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_key_name_, lhs_arena,
      &other->default_key_name_, rhs_arena
  );
  swap(key_bag_, other->key_bag_);
}

std::string CryptographerData::GetTypeName() const {
  return "sync_pb.CryptographerData";
}


// ===================================================================

class CustomPassphraseKeyDerivationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomPassphraseKeyDerivationParams>()._has_bits_);
  static void set_has_custom_passphrase_key_derivation_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_passphrase_key_derivation_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CustomPassphraseKeyDerivationParams::CustomPassphraseKeyDerivationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.CustomPassphraseKeyDerivationParams)
}
CustomPassphraseKeyDerivationParams::CustomPassphraseKeyDerivationParams(const CustomPassphraseKeyDerivationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  custom_passphrase_key_derivation_salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    custom_passphrase_key_derivation_salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_passphrase_key_derivation_salt()) {
    custom_passphrase_key_derivation_salt_.Set(from._internal_custom_passphrase_key_derivation_salt(), 
      GetArenaForAllocation());
  }
  custom_passphrase_key_derivation_method_ = from.custom_passphrase_key_derivation_method_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.CustomPassphraseKeyDerivationParams)
}

inline void CustomPassphraseKeyDerivationParams::SharedCtor() {
custom_passphrase_key_derivation_salt_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  custom_passphrase_key_derivation_salt_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
custom_passphrase_key_derivation_method_ = 0;
}

CustomPassphraseKeyDerivationParams::~CustomPassphraseKeyDerivationParams() {
  // @@protoc_insertion_point(destructor:sync_pb.CustomPassphraseKeyDerivationParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomPassphraseKeyDerivationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  custom_passphrase_key_derivation_salt_.Destroy();
}

void CustomPassphraseKeyDerivationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomPassphraseKeyDerivationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CustomPassphraseKeyDerivationParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    custom_passphrase_key_derivation_salt_.ClearNonDefaultToEmpty();
  }
  custom_passphrase_key_derivation_method_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CustomPassphraseKeyDerivationParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::NigoriSpecifics_KeyDerivationMethod_IsValid(val))) {
            _internal_set_custom_passphrase_key_derivation_method(static_cast<::sync_pb::NigoriSpecifics_KeyDerivationMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string custom_passphrase_key_derivation_salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_custom_passphrase_key_derivation_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomPassphraseKeyDerivationParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.CustomPassphraseKeyDerivationParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_custom_passphrase_key_derivation_method(), target);
  }

  // optional string custom_passphrase_key_derivation_salt = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_custom_passphrase_key_derivation_salt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.CustomPassphraseKeyDerivationParams)
  return target;
}

size_t CustomPassphraseKeyDerivationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CustomPassphraseKeyDerivationParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string custom_passphrase_key_derivation_salt = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_passphrase_key_derivation_salt());
    }

    // optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_passphrase_key_derivation_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomPassphraseKeyDerivationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CustomPassphraseKeyDerivationParams*>(
      &from));
}

void CustomPassphraseKeyDerivationParams::MergeFrom(const CustomPassphraseKeyDerivationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CustomPassphraseKeyDerivationParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_custom_passphrase_key_derivation_salt(from._internal_custom_passphrase_key_derivation_salt());
    }
    if (cached_has_bits & 0x00000002u) {
      custom_passphrase_key_derivation_method_ = from.custom_passphrase_key_derivation_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CustomPassphraseKeyDerivationParams::CopyFrom(const CustomPassphraseKeyDerivationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CustomPassphraseKeyDerivationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomPassphraseKeyDerivationParams::IsInitialized() const {
  return true;
}

void CustomPassphraseKeyDerivationParams::InternalSwap(CustomPassphraseKeyDerivationParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &custom_passphrase_key_derivation_salt_, lhs_arena,
      &other->custom_passphrase_key_derivation_salt_, rhs_arena
  );
  swap(custom_passphrase_key_derivation_method_, other->custom_passphrase_key_derivation_method_);
}

std::string CustomPassphraseKeyDerivationParams::GetTypeName() const {
  return "sync_pb.CustomPassphraseKeyDerivationParams";
}


// ===================================================================

class NigoriModel::_Internal {
 public:
  using HasBits = decltype(std::declval<NigoriModel>()._has_bits_);
  static const ::sync_pb::CryptographerData& cryptographer_data(const NigoriModel* msg);
  static void set_has_cryptographer_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_keystore_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::EncryptedData& pending_keys(const NigoriModel* msg);
  static void set_has_pending_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_passphrase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_keystore_migration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_custom_passphrase_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::sync_pb::CustomPassphraseKeyDerivationParams& custom_passphrase_key_derivation_params(const NigoriModel* msg);
  static void set_has_custom_passphrase_key_derivation_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encrypt_everything(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::sync_pb::EncryptedData& pending_keystore_decryptor_token(const NigoriModel* msg);
  static void set_has_pending_keystore_decryptor_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_default_trusted_vault_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo& trusted_vault_debug_info(const NigoriModel* msg);
  static void set_has_trusted_vault_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::sync_pb::CryptographerData&
NigoriModel::_Internal::cryptographer_data(const NigoriModel* msg) {
  return *msg->cryptographer_data_;
}
const ::sync_pb::EncryptedData&
NigoriModel::_Internal::pending_keys(const NigoriModel* msg) {
  return *msg->pending_keys_;
}
const ::sync_pb::CustomPassphraseKeyDerivationParams&
NigoriModel::_Internal::custom_passphrase_key_derivation_params(const NigoriModel* msg) {
  return *msg->custom_passphrase_key_derivation_params_;
}
const ::sync_pb::EncryptedData&
NigoriModel::_Internal::pending_keystore_decryptor_token(const NigoriModel* msg) {
  return *msg->pending_keystore_decryptor_token_;
}
const ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo&
NigoriModel::_Internal::trusted_vault_debug_info(const NigoriModel* msg) {
  return *msg->trusted_vault_debug_info_;
}
void NigoriModel::clear_pending_keys() {
  if (pending_keys_ != nullptr) pending_keys_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void NigoriModel::clear_pending_keystore_decryptor_token() {
  if (pending_keystore_decryptor_token_ != nullptr) pending_keystore_decryptor_token_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void NigoriModel::clear_trusted_vault_debug_info() {
  if (trusted_vault_debug_info_ != nullptr) trusted_vault_debug_info_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
NigoriModel::NigoriModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  encrypted_types_specifics_field_number_(arena),
  keystore_key_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.NigoriModel)
}
NigoriModel::NigoriModel(const NigoriModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      encrypted_types_specifics_field_number_(from.encrypted_types_specifics_field_number_),
      keystore_key_(from.keystore_key_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  current_keystore_key_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    current_keystore_key_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_keystore_key_name()) {
    current_keystore_key_name_.Set(from._internal_current_keystore_key_name(), 
      GetArenaForAllocation());
  }
  last_default_trusted_vault_key_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_default_trusted_vault_key_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_default_trusted_vault_key_name()) {
    last_default_trusted_vault_key_name_.Set(from._internal_last_default_trusted_vault_key_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cryptographer_data()) {
    cryptographer_data_ = new ::sync_pb::CryptographerData(*from.cryptographer_data_);
  } else {
    cryptographer_data_ = nullptr;
  }
  if (from._internal_has_pending_keys()) {
    pending_keys_ = new ::sync_pb::EncryptedData(*from.pending_keys_);
  } else {
    pending_keys_ = nullptr;
  }
  if (from._internal_has_custom_passphrase_key_derivation_params()) {
    custom_passphrase_key_derivation_params_ = new ::sync_pb::CustomPassphraseKeyDerivationParams(*from.custom_passphrase_key_derivation_params_);
  } else {
    custom_passphrase_key_derivation_params_ = nullptr;
  }
  if (from._internal_has_pending_keystore_decryptor_token()) {
    pending_keystore_decryptor_token_ = new ::sync_pb::EncryptedData(*from.pending_keystore_decryptor_token_);
  } else {
    pending_keystore_decryptor_token_ = nullptr;
  }
  if (from._internal_has_trusted_vault_debug_info()) {
    trusted_vault_debug_info_ = new ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo(*from.trusted_vault_debug_info_);
  } else {
    trusted_vault_debug_info_ = nullptr;
  }
  ::memcpy(&keystore_migration_time_, &from.keystore_migration_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&encrypt_everything_) -
    reinterpret_cast<char*>(&keystore_migration_time_)) + sizeof(encrypt_everything_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriModel)
}

inline void NigoriModel::SharedCtor() {
current_keystore_key_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  current_keystore_key_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_default_trusted_vault_key_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_default_trusted_vault_key_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cryptographer_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encrypt_everything_) -
    reinterpret_cast<char*>(&cryptographer_data_)) + sizeof(encrypt_everything_));
}

NigoriModel::~NigoriModel() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NigoriModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_keystore_key_name_.Destroy();
  last_default_trusted_vault_key_name_.Destroy();
  if (this != internal_default_instance()) delete cryptographer_data_;
  if (this != internal_default_instance()) delete pending_keys_;
  if (this != internal_default_instance()) delete custom_passphrase_key_derivation_params_;
  if (this != internal_default_instance()) delete pending_keystore_decryptor_token_;
  if (this != internal_default_instance()) delete trusted_vault_debug_info_;
}

void NigoriModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NigoriModel::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_types_specifics_field_number_.Clear();
  keystore_key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      current_keystore_key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      last_default_trusted_vault_key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cryptographer_data_ != nullptr);
      cryptographer_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pending_keys_ != nullptr);
      pending_keys_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(custom_passphrase_key_derivation_params_ != nullptr);
      custom_passphrase_key_derivation_params_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(pending_keystore_decryptor_token_ != nullptr);
      pending_keystore_decryptor_token_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(trusted_vault_debug_info_ != nullptr);
      trusted_vault_debug_info_->Clear();
    }
  }
  keystore_migration_time_ = int64_t{0};
  if (cached_has_bits & 0x00000700u) {
    ::memset(&custom_passphrase_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_everything_) -
        reinterpret_cast<char*>(&custom_passphrase_time_)) + sizeof(encrypt_everything_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NigoriModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.CryptographerData cryptographer_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptographer_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string current_keystore_key_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_current_keystore_key_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.EncryptedData pending_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pending_keys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::NigoriSpecifics_PassphraseType_IsValid(val))) {
            _internal_set_passphrase_type(static_cast<::sync_pb::NigoriSpecifics_PassphraseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 keystore_migration_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_keystore_migration_time(&has_bits);
          keystore_migration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 custom_passphrase_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_custom_passphrase_time(&has_bits);
          custom_passphrase_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_passphrase_key_derivation_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool encrypt_everything = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_encrypt_everything(&has_bits);
          encrypt_everything_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 encrypted_types_specifics_field_number = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_encrypted_types_specifics_field_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_encrypted_types_specifics_field_number(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string keystore_key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keystore_key();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pending_keystore_decryptor_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_default_trusted_vault_key_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_last_default_trusted_vault_key_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.NigoriSpecifics.TrustedVaultDebugInfo trusted_vault_debug_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusted_vault_debug_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NigoriModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.NigoriModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.CryptographerData cryptographer_data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cryptographer_data(this),
        _Internal::cryptographer_data(this).GetCachedSize(), target, stream);
  }

  // optional string current_keystore_key_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_current_keystore_key_name(), target);
  }

  // optional .sync_pb.EncryptedData pending_keys = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pending_keys(this),
        _Internal::pending_keys(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_passphrase_type(), target);
  }

  // optional int64 keystore_migration_time = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_keystore_migration_time(), target);
  }

  // optional int64 custom_passphrase_time = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_custom_passphrase_time(), target);
  }

  // optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::custom_passphrase_key_derivation_params(this),
        _Internal::custom_passphrase_key_derivation_params(this).GetCachedSize(), target, stream);
  }

  // optional bool encrypt_everything = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_encrypt_everything(), target);
  }

  // repeated int32 encrypted_types_specifics_field_number = 9;
  for (int i = 0, n = this->_internal_encrypted_types_specifics_field_number_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_encrypted_types_specifics_field_number(i), target);
  }

  // repeated string keystore_key = 10;
  for (int i = 0, n = this->_internal_keystore_key_size(); i < n; i++) {
    const auto& s = this->_internal_keystore_key(i);
    target = stream->WriteString(10, s, target);
  }

  // optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::pending_keystore_decryptor_token(this),
        _Internal::pending_keystore_decryptor_token(this).GetCachedSize(), target, stream);
  }

  // optional string last_default_trusted_vault_key_name = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_last_default_trusted_vault_key_name(), target);
  }

  // optional .sync_pb.NigoriSpecifics.TrustedVaultDebugInfo trusted_vault_debug_info = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::trusted_vault_debug_info(this),
        _Internal::trusted_vault_debug_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.NigoriModel)
  return target;
}

size_t NigoriModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 encrypted_types_specifics_field_number = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->encrypted_types_specifics_field_number_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_encrypted_types_specifics_field_number_size());
    total_size += data_size;
  }

  // repeated string keystore_key = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keystore_key_.size());
  for (int i = 0, n = keystore_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keystore_key_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string current_keystore_key_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_keystore_key_name());
    }

    // optional string last_default_trusted_vault_key_name = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_default_trusted_vault_key_name());
    }

    // optional .sync_pb.CryptographerData cryptographer_data = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cryptographer_data_);
    }

    // optional .sync_pb.EncryptedData pending_keys = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pending_keys_);
    }

    // optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_passphrase_key_derivation_params_);
    }

    // optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pending_keystore_decryptor_token_);
    }

    // optional .sync_pb.NigoriSpecifics.TrustedVaultDebugInfo trusted_vault_debug_info = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trusted_vault_debug_info_);
    }

    // optional int64 keystore_migration_time = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_keystore_migration_time());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 custom_passphrase_time = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_custom_passphrase_time());
    }

    // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_passphrase_type());
    }

    // optional bool encrypt_everything = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NigoriModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NigoriModel*>(
      &from));
}

void NigoriModel::MergeFrom(const NigoriModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  encrypted_types_specifics_field_number_.MergeFrom(from.encrypted_types_specifics_field_number_);
  keystore_key_.MergeFrom(from.keystore_key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_current_keystore_key_name(from._internal_current_keystore_key_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_last_default_trusted_vault_key_name(from._internal_last_default_trusted_vault_key_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cryptographer_data()->::sync_pb::CryptographerData::MergeFrom(from._internal_cryptographer_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_pending_keys()->::sync_pb::EncryptedData::MergeFrom(from._internal_pending_keys());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_custom_passphrase_key_derivation_params()->::sync_pb::CustomPassphraseKeyDerivationParams::MergeFrom(from._internal_custom_passphrase_key_derivation_params());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_pending_keystore_decryptor_token()->::sync_pb::EncryptedData::MergeFrom(from._internal_pending_keystore_decryptor_token());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_trusted_vault_debug_info()->::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo::MergeFrom(from._internal_trusted_vault_debug_info());
    }
    if (cached_has_bits & 0x00000080u) {
      keystore_migration_time_ = from.keystore_migration_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      custom_passphrase_time_ = from.custom_passphrase_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      passphrase_type_ = from.passphrase_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      encrypt_everything_ = from.encrypt_everything_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NigoriModel::CopyFrom(const NigoriModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriModel::IsInitialized() const {
  return true;
}

void NigoriModel::InternalSwap(NigoriModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_types_specifics_field_number_.InternalSwap(&other->encrypted_types_specifics_field_number_);
  keystore_key_.InternalSwap(&other->keystore_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &current_keystore_key_name_, lhs_arena,
      &other->current_keystore_key_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_default_trusted_vault_key_name_, lhs_arena,
      &other->last_default_trusted_vault_key_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NigoriModel, encrypt_everything_)
      + sizeof(NigoriModel::encrypt_everything_)
      - PROTOBUF_FIELD_OFFSET(NigoriModel, cryptographer_data_)>(
          reinterpret_cast<char*>(&cryptographer_data_),
          reinterpret_cast<char*>(&other->cryptographer_data_));
}

std::string NigoriModel::GetTypeName() const {
  return "sync_pb.NigoriModel";
}


// ===================================================================

class NigoriLocalData::_Internal {
 public:
  using HasBits = decltype(std::declval<NigoriLocalData>()._has_bits_);
  static const ::sync_pb::ModelTypeState& model_type_state(const NigoriLocalData* msg);
  static void set_has_model_type_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::EntityMetadata& entity_metadata(const NigoriLocalData* msg);
  static void set_has_entity_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::NigoriModel& nigori_model(const NigoriLocalData* msg);
  static void set_has_nigori_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::ModelTypeState&
NigoriLocalData::_Internal::model_type_state(const NigoriLocalData* msg) {
  return *msg->model_type_state_;
}
const ::sync_pb::EntityMetadata&
NigoriLocalData::_Internal::entity_metadata(const NigoriLocalData* msg) {
  return *msg->entity_metadata_;
}
const ::sync_pb::NigoriModel&
NigoriLocalData::_Internal::nigori_model(const NigoriLocalData* msg) {
  return *msg->nigori_model_;
}
void NigoriLocalData::clear_model_type_state() {
  if (model_type_state_ != nullptr) model_type_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void NigoriLocalData::clear_entity_metadata() {
  if (entity_metadata_ != nullptr) entity_metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
NigoriLocalData::NigoriLocalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.NigoriLocalData)
}
NigoriLocalData::NigoriLocalData(const NigoriLocalData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_model_type_state()) {
    model_type_state_ = new ::sync_pb::ModelTypeState(*from.model_type_state_);
  } else {
    model_type_state_ = nullptr;
  }
  if (from._internal_has_entity_metadata()) {
    entity_metadata_ = new ::sync_pb::EntityMetadata(*from.entity_metadata_);
  } else {
    entity_metadata_ = nullptr;
  }
  if (from._internal_has_nigori_model()) {
    nigori_model_ = new ::sync_pb::NigoriModel(*from.nigori_model_);
  } else {
    nigori_model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriLocalData)
}

inline void NigoriLocalData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_type_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nigori_model_) -
    reinterpret_cast<char*>(&model_type_state_)) + sizeof(nigori_model_));
}

NigoriLocalData::~NigoriLocalData() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriLocalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NigoriLocalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete model_type_state_;
  if (this != internal_default_instance()) delete entity_metadata_;
  if (this != internal_default_instance()) delete nigori_model_;
}

void NigoriLocalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NigoriLocalData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriLocalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(model_type_state_ != nullptr);
      model_type_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entity_metadata_ != nullptr);
      entity_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(nigori_model_ != nullptr);
      nigori_model_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NigoriLocalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.ModelTypeState model_type_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_type_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.EntityMetadata entity_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.NigoriModel nigori_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nigori_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NigoriLocalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.NigoriLocalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.ModelTypeState model_type_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_type_state(this),
        _Internal::model_type_state(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.EntityMetadata entity_metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::entity_metadata(this),
        _Internal::entity_metadata(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.NigoriModel nigori_model = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nigori_model(this),
        _Internal::nigori_model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.NigoriLocalData)
  return target;
}

size_t NigoriLocalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriLocalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .sync_pb.ModelTypeState model_type_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_type_state_);
    }

    // optional .sync_pb.EntityMetadata entity_metadata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_metadata_);
    }

    // optional .sync_pb.NigoriModel nigori_model = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nigori_model_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NigoriLocalData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NigoriLocalData*>(
      &from));
}

void NigoriLocalData::MergeFrom(const NigoriLocalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriLocalData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_model_type_state()->::sync_pb::ModelTypeState::MergeFrom(from._internal_model_type_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entity_metadata()->::sync_pb::EntityMetadata::MergeFrom(from._internal_entity_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_nigori_model()->::sync_pb::NigoriModel::MergeFrom(from._internal_nigori_model());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NigoriLocalData::CopyFrom(const NigoriLocalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriLocalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriLocalData::IsInitialized() const {
  return true;
}

void NigoriLocalData::InternalSwap(NigoriLocalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NigoriLocalData, nigori_model_)
      + sizeof(NigoriLocalData::nigori_model_)
      - PROTOBUF_FIELD_OFFSET(NigoriLocalData, model_type_state_)>(
          reinterpret_cast<char*>(&model_type_state_),
          reinterpret_cast<char*>(&other->model_type_state_));
}

std::string NigoriLocalData::GetTypeName() const {
  return "sync_pb.NigoriLocalData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::CryptographerData*
Arena::CreateMaybeMessage< ::sync_pb::CryptographerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::CryptographerData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CustomPassphraseKeyDerivationParams*
Arena::CreateMaybeMessage< ::sync_pb::CustomPassphraseKeyDerivationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::CustomPassphraseKeyDerivationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::NigoriModel*
Arena::CreateMaybeMessage< ::sync_pb::NigoriModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::NigoriModel >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::NigoriLocalData*
Arena::CreateMaybeMessage< ::sync_pb::NigoriLocalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::NigoriLocalData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
