// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/bookmark_specifics.proto

#include "components/sync/protocol/bookmark_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR MetaInfo::MetaInfo(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MetaInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaInfoDefaultTypeInternal() {}
  union {
    MetaInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaInfoDefaultTypeInternal _MetaInfo_default_instance_;
PROTOBUF_CONSTEXPR BookmarkSpecifics::BookmarkSpecifics(
    ::_pbi::ConstantInitialized)
  : meta_info_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , favicon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , legacy_canonicalized_title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , full_title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , parent_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , unique_position_(nullptr)
  , creation_time_us_(int64_t{0})
  , last_used_time_us_(int64_t{0})
  , type_(0)
{}
struct BookmarkSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookmarkSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookmarkSpecificsDefaultTypeInternal() {}
  union {
    BookmarkSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookmarkSpecificsDefaultTypeInternal _BookmarkSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool BookmarkSpecifics_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BookmarkSpecifics_Type_strings[3] = {};

static const char BookmarkSpecifics_Type_names[] =
  "FOLDER"
  "UNSPECIFIED"
  "URL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BookmarkSpecifics_Type_entries[] = {
  { {BookmarkSpecifics_Type_names + 0, 6}, 2 },
  { {BookmarkSpecifics_Type_names + 6, 11}, 0 },
  { {BookmarkSpecifics_Type_names + 17, 3}, 1 },
};

static const int BookmarkSpecifics_Type_entries_by_number[] = {
  1, // 0 -> UNSPECIFIED
  2, // 1 -> URL
  0, // 2 -> FOLDER
};

const std::string& BookmarkSpecifics_Type_Name(
    BookmarkSpecifics_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BookmarkSpecifics_Type_entries,
          BookmarkSpecifics_Type_entries_by_number,
          3, BookmarkSpecifics_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BookmarkSpecifics_Type_entries,
      BookmarkSpecifics_Type_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BookmarkSpecifics_Type_strings[idx].get();
}
bool BookmarkSpecifics_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BookmarkSpecifics_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BookmarkSpecifics_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BookmarkSpecifics_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BookmarkSpecifics_Type BookmarkSpecifics::UNSPECIFIED;
constexpr BookmarkSpecifics_Type BookmarkSpecifics::URL;
constexpr BookmarkSpecifics_Type BookmarkSpecifics::FOLDER;
constexpr BookmarkSpecifics_Type BookmarkSpecifics::Type_MIN;
constexpr BookmarkSpecifics_Type BookmarkSpecifics::Type_MAX;
constexpr int BookmarkSpecifics::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MetaInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaInfo>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MetaInfo::MetaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.MetaInfo)
}
MetaInfo::MetaInfo(const MetaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.MetaInfo)
}

inline void MetaInfo::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetaInfo::~MetaInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.MetaInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  value_.Destroy();
}

void MetaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.MetaInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MetaInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.MetaInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.MetaInfo)
  return target;
}

size_t MetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.MetaInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MetaInfo*>(
      &from));
}

void MetaInfo::MergeFrom(const MetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.MetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MetaInfo::CopyFrom(const MetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.MetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaInfo::IsInitialized() const {
  return true;
}

void MetaInfo::InternalSwap(MetaInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string MetaInfo::GetTypeName() const {
  return "sync_pb.MetaInfo";
}


// ===================================================================

class BookmarkSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<BookmarkSpecifics>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_favicon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_canonicalized_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_icon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_full_title(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parent_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::sync_pb::UniquePosition& unique_position(const BookmarkSpecifics* msg);
  static void set_has_unique_position(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_used_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::sync_pb::UniquePosition&
BookmarkSpecifics::_Internal::unique_position(const BookmarkSpecifics* msg) {
  return *msg->unique_position_;
}
void BookmarkSpecifics::clear_unique_position() {
  if (unique_position_ != nullptr) unique_position_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
BookmarkSpecifics::BookmarkSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  meta_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.BookmarkSpecifics)
}
BookmarkSpecifics::BookmarkSpecifics(const BookmarkSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      meta_info_(from.meta_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  favicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    favicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_favicon()) {
    favicon_.Set(from._internal_favicon(), 
      GetArenaForAllocation());
  }
  legacy_canonicalized_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    legacy_canonicalized_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_legacy_canonicalized_title()) {
    legacy_canonicalized_title_.Set(from._internal_legacy_canonicalized_title(), 
      GetArenaForAllocation());
  }
  icon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_url()) {
    icon_url_.Set(from._internal_icon_url(), 
      GetArenaForAllocation());
  }
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  full_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_title()) {
    full_title_.Set(from._internal_full_title(), 
      GetArenaForAllocation());
  }
  parent_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parent_guid()) {
    parent_guid_.Set(from._internal_parent_guid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_unique_position()) {
    unique_position_ = new ::sync_pb::UniquePosition(*from.unique_position_);
  } else {
    unique_position_ = nullptr;
  }
  ::memcpy(&creation_time_us_, &from.creation_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&creation_time_us_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.BookmarkSpecifics)
}

inline void BookmarkSpecifics::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
favicon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  favicon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
legacy_canonicalized_title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  legacy_canonicalized_title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
full_title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unique_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&unique_position_)) + sizeof(type_));
}

BookmarkSpecifics::~BookmarkSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.BookmarkSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookmarkSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  favicon_.Destroy();
  legacy_canonicalized_title_.Destroy();
  icon_url_.Destroy();
  guid_.Destroy();
  full_title_.Destroy();
  parent_guid_.Destroy();
  if (this != internal_default_instance()) delete unique_position_;
}

void BookmarkSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BookmarkSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.BookmarkSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meta_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      favicon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_canonicalized_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      icon_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      full_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      parent_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(unique_position_ != nullptr);
      unique_position_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&creation_time_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&creation_time_us_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BookmarkSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes favicon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_favicon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string legacy_canonicalized_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_legacy_canonicalized_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 creation_time_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_creation_time_us(&has_bits);
          creation_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_icon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.MetaInfo meta_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meta_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string guid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string full_title = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_full_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string parent_guid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_parent_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.BookmarkSpecifics.Type type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::BookmarkSpecifics_Type_IsValid(val))) {
            _internal_set_type(static_cast<::sync_pb::BookmarkSpecifics_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.UniquePosition unique_position = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_unique_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_used_time_us = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_last_used_time_us(&has_bits);
          last_used_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookmarkSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.BookmarkSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional bytes favicon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_favicon(), target);
  }

  // optional string legacy_canonicalized_title = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_legacy_canonicalized_title(), target);
  }

  // optional int64 creation_time_us = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_creation_time_us(), target);
  }

  // optional string icon_url = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_icon_url(), target);
  }

  // repeated .sync_pb.MetaInfo meta_info = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_meta_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_meta_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string guid = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_guid(), target);
  }

  // optional string full_title = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_full_title(), target);
  }

  // optional string parent_guid = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_parent_guid(), target);
  }

  // optional .sync_pb.BookmarkSpecifics.Type type = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_type(), target);
  }

  // optional .sync_pb.UniquePosition unique_position = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::unique_position(this),
        _Internal::unique_position(this).GetCachedSize(), target, stream);
  }

  // optional int64 last_used_time_us = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_last_used_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.BookmarkSpecifics)
  return target;
}

size_t BookmarkSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.BookmarkSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.MetaInfo meta_info = 6;
  total_size += 1UL * this->_internal_meta_info_size();
  for (const auto& msg : this->meta_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bytes favicon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_favicon());
    }

    // optional string legacy_canonicalized_title = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_legacy_canonicalized_title());
    }

    // optional string icon_url = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_url());
    }

    // optional string guid = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional string full_title = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_title());
    }

    // optional string parent_guid = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parent_guid());
    }

    // optional .sync_pb.UniquePosition unique_position = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unique_position_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 creation_time_us = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time_us());
    }

    // optional int64 last_used_time_us = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_last_used_time_us());
    }

    // optional .sync_pb.BookmarkSpecifics.Type type = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BookmarkSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BookmarkSpecifics*>(
      &from));
}

void BookmarkSpecifics::MergeFrom(const BookmarkSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.BookmarkSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  meta_info_.MergeFrom(from.meta_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_favicon(from._internal_favicon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_legacy_canonicalized_title(from._internal_legacy_canonicalized_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_icon_url(from._internal_icon_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_full_title(from._internal_full_title());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_parent_guid(from._internal_parent_guid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_unique_position()->::sync_pb::UniquePosition::MergeFrom(from._internal_unique_position());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      creation_time_us_ = from.creation_time_us_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_used_time_us_ = from.last_used_time_us_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BookmarkSpecifics::CopyFrom(const BookmarkSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.BookmarkSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkSpecifics::IsInitialized() const {
  return true;
}

void BookmarkSpecifics::InternalSwap(BookmarkSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  meta_info_.InternalSwap(&other->meta_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &favicon_, lhs_arena,
      &other->favicon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &legacy_canonicalized_title_, lhs_arena,
      &other->legacy_canonicalized_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_url_, lhs_arena,
      &other->icon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &full_title_, lhs_arena,
      &other->full_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_guid_, lhs_arena,
      &other->parent_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookmarkSpecifics, type_)
      + sizeof(BookmarkSpecifics::type_)
      - PROTOBUF_FIELD_OFFSET(BookmarkSpecifics, unique_position_)>(
          reinterpret_cast<char*>(&unique_position_),
          reinterpret_cast<char*>(&other->unique_position_));
}

std::string BookmarkSpecifics::GetTypeName() const {
  return "sync_pb.BookmarkSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::MetaInfo*
Arena::CreateMaybeMessage< ::sync_pb::MetaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::MetaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::BookmarkSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::BookmarkSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::BookmarkSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
