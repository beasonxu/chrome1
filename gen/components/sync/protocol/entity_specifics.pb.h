// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/entity_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fentity_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fentity_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/sync/protocol/encryption.pb.h"
#include "components/sync/protocol/app_list_specifics.pb.h"
#include "components/sync/protocol/app_notification_specifics.pb.h"
#include "components/sync/protocol/app_setting_specifics.pb.h"
#include "components/sync/protocol/app_specifics.pb.h"
#include "components/sync/protocol/arc_package_specifics.pb.h"
#include "components/sync/protocol/autofill_specifics.pb.h"
#include "components/sync/protocol/autofill_offer_specifics.pb.h"
#include "components/sync/protocol/autofill_wallet_usage_specifics.pb.h"
#include "components/sync/protocol/bookmark_specifics.pb.h"
#include "components/sync/protocol/device_info_specifics.pb.h"
#include "components/sync/protocol/dictionary_specifics.pb.h"
#include "components/sync/protocol/experiments_specifics.pb.h"
#include "components/sync/protocol/extension_setting_specifics.pb.h"
#include "components/sync/protocol/extension_specifics.pb.h"
#include "components/sync/protocol/favicon_image_specifics.pb.h"
#include "components/sync/protocol/favicon_tracking_specifics.pb.h"
#include "components/sync/protocol/history_delete_directive_specifics.pb.h"
#include "components/sync/protocol/history_specifics.pb.h"
#include "components/sync/protocol/managed_user_setting_specifics.pb.h"
#include "components/sync/protocol/managed_user_shared_setting_specifics.pb.h"
#include "components/sync/protocol/managed_user_specifics.pb.h"
#include "components/sync/protocol/nigori_specifics.pb.h"
#include "components/sync/protocol/os_preference_specifics.pb.h"
#include "components/sync/protocol/os_priority_preference_specifics.pb.h"
#include "components/sync/protocol/password_specifics.pb.h"
#include "components/sync/protocol/preference_specifics.pb.h"
#include "components/sync/protocol/printer_specifics.pb.h"
#include "components/sync/protocol/printers_authorization_server_specifics.pb.h"
#include "components/sync/protocol/priority_preference_specifics.pb.h"
#include "components/sync/protocol/reading_list_specifics.pb.h"
#include "components/sync/protocol/saved_tab_group_specifics.pb.h"
#include "components/sync/protocol/search_engine_specifics.pb.h"
#include "components/sync/protocol/security_event_specifics.pb.h"
#include "components/sync/protocol/send_tab_to_self_specifics.pb.h"
#include "components/sync/protocol/session_specifics.pb.h"
#include "components/sync/protocol/sharing_message_specifics.pb.h"
#include "components/sync/protocol/synced_notification_app_info_specifics.pb.h"
#include "components/sync/protocol/synced_notification_specifics.pb.h"
#include "components/sync/protocol/theme_specifics.pb.h"
#include "components/sync/protocol/typed_url_specifics.pb.h"
#include "components/sync/protocol/user_consent_specifics.pb.h"
#include "components/sync/protocol/user_event_specifics.pb.h"
#include "components/sync/protocol/web_app_specifics.pb.h"
#include "components/sync/protocol/webauthn_credential_specifics.pb.h"
#include "components/sync/protocol/wifi_configuration_specifics.pb.h"
#include "components/sync/protocol/workspace_desk_specifics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fentity_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fentity_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class EmptySpecifics;
struct EmptySpecificsDefaultTypeInternal;
extern EmptySpecificsDefaultTypeInternal _EmptySpecifics_default_instance_;
class EntitySpecifics;
struct EntitySpecificsDefaultTypeInternal;
extern EntitySpecificsDefaultTypeInternal _EntitySpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::EmptySpecifics* Arena::CreateMaybeMessage<::sync_pb::EmptySpecifics>(Arena*);
template<> ::sync_pb::EntitySpecifics* Arena::CreateMaybeMessage<::sync_pb::EntitySpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class EntitySpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.EntitySpecifics) */ {
 public:
  inline EntitySpecifics() : EntitySpecifics(nullptr) {}
  ~EntitySpecifics() override;
  explicit PROTOBUF_CONSTEXPR EntitySpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntitySpecifics(const EntitySpecifics& from);
  EntitySpecifics(EntitySpecifics&& from) noexcept
    : EntitySpecifics() {
    *this = ::std::move(from);
  }

  inline EntitySpecifics& operator=(const EntitySpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntitySpecifics& operator=(EntitySpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EntitySpecifics& default_instance() {
    return *internal_default_instance();
  }
  enum SpecificsVariantCase {
    kAutofill = 31729,
    kBookmark = 32904,
    kPreference = 37702,
    kTypedUrl = 40781,
    kTheme = 41210,
    kAppNotification = 45184,
    kPassword = 45873,
    kNigori = 47745,
    kExtension = 48119,
    kApp = 48364,
    kSession = 50119,
    kAutofillProfile = 63951,
    kSearchEngine = 88610,
    kExtensionSetting = 96159,
    kAppSetting = 103656,
    kHistoryDeleteDirective = 150251,
    kSyncedNotification = 153108,
    kSyncedNotificationAppInfo = 235816,
    kDeviceInfo = 154522,
    kExperiments = 161496,
    kPriorityPreference = 163425,
    kDictionary = 170540,
    kFaviconTracking = 181534,
    kFaviconImage = 182019,
    kManagedUserSetting = 186662,
    kManagedUser = 194582,
    kManagedUserSharedSetting = 202026,
    kAppList = 229170,
    kManagedUserAllowlist = 306060,
    kAutofillWallet = 306270,
    kWalletMetadata = 330441,
    kArcPackage = 340906,
    kPrinter = 410745,
    kReadingList = 411028,
    kUserEvent = 455206,
    kUserConsent = 556014,
    kSendTabToSelf = 601980,
    kSecurityEvent = 600372,
    kWebApp = 673225,
    kWifiConfiguration = 662827,
    kOsPreference = 702141,
    kOsPriorityPreference = 703915,
    kSharingMessage = 728866,
    kAutofillOffer = 774329,
    kWorkspaceDesk = 874841,
    kWebauthnCredential = 895275,
    kHistory = 963985,
    kPrintersAuthorizationServer = 974304,
    kSavedTabGroup = 1004874,
    kAutofillWalletUsage = 1033580,
    SPECIFICS_VARIANT_NOT_SET = 0,
  };

  static inline const EntitySpecifics* internal_default_instance() {
    return reinterpret_cast<const EntitySpecifics*>(
               &_EntitySpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntitySpecifics& a, EntitySpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EntitySpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntitySpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntitySpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntitySpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EntitySpecifics& from);
  void MergeFrom(const EntitySpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntitySpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.EntitySpecifics";
  }
  protected:
  explicit EntitySpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedFieldNumber = 1,
    kAutofillFieldNumber = 31729,
    kBookmarkFieldNumber = 32904,
    kPreferenceFieldNumber = 37702,
    kTypedUrlFieldNumber = 40781,
    kThemeFieldNumber = 41210,
    kAppNotificationFieldNumber = 45184,
    kPasswordFieldNumber = 45873,
    kNigoriFieldNumber = 47745,
    kExtensionFieldNumber = 48119,
    kAppFieldNumber = 48364,
    kSessionFieldNumber = 50119,
    kAutofillProfileFieldNumber = 63951,
    kSearchEngineFieldNumber = 88610,
    kExtensionSettingFieldNumber = 96159,
    kAppSettingFieldNumber = 103656,
    kHistoryDeleteDirectiveFieldNumber = 150251,
    kSyncedNotificationFieldNumber = 153108,
    kSyncedNotificationAppInfoFieldNumber = 235816,
    kDeviceInfoFieldNumber = 154522,
    kExperimentsFieldNumber = 161496,
    kPriorityPreferenceFieldNumber = 163425,
    kDictionaryFieldNumber = 170540,
    kFaviconTrackingFieldNumber = 181534,
    kFaviconImageFieldNumber = 182019,
    kManagedUserSettingFieldNumber = 186662,
    kManagedUserFieldNumber = 194582,
    kManagedUserSharedSettingFieldNumber = 202026,
    kAppListFieldNumber = 229170,
    kManagedUserAllowlistFieldNumber = 306060,
    kAutofillWalletFieldNumber = 306270,
    kWalletMetadataFieldNumber = 330441,
    kArcPackageFieldNumber = 340906,
    kPrinterFieldNumber = 410745,
    kReadingListFieldNumber = 411028,
    kUserEventFieldNumber = 455206,
    kUserConsentFieldNumber = 556014,
    kSendTabToSelfFieldNumber = 601980,
    kSecurityEventFieldNumber = 600372,
    kWebAppFieldNumber = 673225,
    kWifiConfigurationFieldNumber = 662827,
    kOsPreferenceFieldNumber = 702141,
    kOsPriorityPreferenceFieldNumber = 703915,
    kSharingMessageFieldNumber = 728866,
    kAutofillOfferFieldNumber = 774329,
    kWorkspaceDeskFieldNumber = 874841,
    kWebauthnCredentialFieldNumber = 895275,
    kHistoryFieldNumber = 963985,
    kPrintersAuthorizationServerFieldNumber = 974304,
    kSavedTabGroupFieldNumber = 1004874,
    kAutofillWalletUsageFieldNumber = 1033580,
  };
  // optional .sync_pb.EncryptedData encrypted = 1;
  bool has_encrypted() const;
  private:
  bool _internal_has_encrypted() const;
  public:
  void clear_encrypted();
  const ::sync_pb::EncryptedData& encrypted() const;
  PROTOBUF_NODISCARD ::sync_pb::EncryptedData* release_encrypted();
  ::sync_pb::EncryptedData* mutable_encrypted();
  void set_allocated_encrypted(::sync_pb::EncryptedData* encrypted);
  private:
  const ::sync_pb::EncryptedData& _internal_encrypted() const;
  ::sync_pb::EncryptedData* _internal_mutable_encrypted();
  public:
  void unsafe_arena_set_allocated_encrypted(
      ::sync_pb::EncryptedData* encrypted);
  ::sync_pb::EncryptedData* unsafe_arena_release_encrypted();

  // .sync_pb.AutofillSpecifics autofill = 31729;
  bool has_autofill() const;
  private:
  bool _internal_has_autofill() const;
  public:
  void clear_autofill();
  const ::sync_pb::AutofillSpecifics& autofill() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillSpecifics* release_autofill();
  ::sync_pb::AutofillSpecifics* mutable_autofill();
  void set_allocated_autofill(::sync_pb::AutofillSpecifics* autofill);
  private:
  const ::sync_pb::AutofillSpecifics& _internal_autofill() const;
  ::sync_pb::AutofillSpecifics* _internal_mutable_autofill();
  public:
  void unsafe_arena_set_allocated_autofill(
      ::sync_pb::AutofillSpecifics* autofill);
  ::sync_pb::AutofillSpecifics* unsafe_arena_release_autofill();

  // .sync_pb.BookmarkSpecifics bookmark = 32904;
  bool has_bookmark() const;
  private:
  bool _internal_has_bookmark() const;
  public:
  void clear_bookmark();
  const ::sync_pb::BookmarkSpecifics& bookmark() const;
  PROTOBUF_NODISCARD ::sync_pb::BookmarkSpecifics* release_bookmark();
  ::sync_pb::BookmarkSpecifics* mutable_bookmark();
  void set_allocated_bookmark(::sync_pb::BookmarkSpecifics* bookmark);
  private:
  const ::sync_pb::BookmarkSpecifics& _internal_bookmark() const;
  ::sync_pb::BookmarkSpecifics* _internal_mutable_bookmark();
  public:
  void unsafe_arena_set_allocated_bookmark(
      ::sync_pb::BookmarkSpecifics* bookmark);
  ::sync_pb::BookmarkSpecifics* unsafe_arena_release_bookmark();

  // .sync_pb.PreferenceSpecifics preference = 37702;
  bool has_preference() const;
  private:
  bool _internal_has_preference() const;
  public:
  void clear_preference();
  const ::sync_pb::PreferenceSpecifics& preference() const;
  PROTOBUF_NODISCARD ::sync_pb::PreferenceSpecifics* release_preference();
  ::sync_pb::PreferenceSpecifics* mutable_preference();
  void set_allocated_preference(::sync_pb::PreferenceSpecifics* preference);
  private:
  const ::sync_pb::PreferenceSpecifics& _internal_preference() const;
  ::sync_pb::PreferenceSpecifics* _internal_mutable_preference();
  public:
  void unsafe_arena_set_allocated_preference(
      ::sync_pb::PreferenceSpecifics* preference);
  ::sync_pb::PreferenceSpecifics* unsafe_arena_release_preference();

  // .sync_pb.TypedUrlSpecifics typed_url = 40781;
  bool has_typed_url() const;
  private:
  bool _internal_has_typed_url() const;
  public:
  void clear_typed_url();
  const ::sync_pb::TypedUrlSpecifics& typed_url() const;
  PROTOBUF_NODISCARD ::sync_pb::TypedUrlSpecifics* release_typed_url();
  ::sync_pb::TypedUrlSpecifics* mutable_typed_url();
  void set_allocated_typed_url(::sync_pb::TypedUrlSpecifics* typed_url);
  private:
  const ::sync_pb::TypedUrlSpecifics& _internal_typed_url() const;
  ::sync_pb::TypedUrlSpecifics* _internal_mutable_typed_url();
  public:
  void unsafe_arena_set_allocated_typed_url(
      ::sync_pb::TypedUrlSpecifics* typed_url);
  ::sync_pb::TypedUrlSpecifics* unsafe_arena_release_typed_url();

  // .sync_pb.ThemeSpecifics theme = 41210;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::sync_pb::ThemeSpecifics& theme() const;
  PROTOBUF_NODISCARD ::sync_pb::ThemeSpecifics* release_theme();
  ::sync_pb::ThemeSpecifics* mutable_theme();
  void set_allocated_theme(::sync_pb::ThemeSpecifics* theme);
  private:
  const ::sync_pb::ThemeSpecifics& _internal_theme() const;
  ::sync_pb::ThemeSpecifics* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::sync_pb::ThemeSpecifics* theme);
  ::sync_pb::ThemeSpecifics* unsafe_arena_release_theme();

  // .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_app_notification() const;
  private:
  bool _internal_has_app_notification() const;
  public:
  PROTOBUF_DEPRECATED void clear_app_notification();
  PROTOBUF_DEPRECATED const ::sync_pb::AppNotification& app_notification() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::AppNotification* release_app_notification();
  PROTOBUF_DEPRECATED ::sync_pb::AppNotification* mutable_app_notification();
  PROTOBUF_DEPRECATED void set_allocated_app_notification(::sync_pb::AppNotification* app_notification);
  private:
  const ::sync_pb::AppNotification& _internal_app_notification() const;
  ::sync_pb::AppNotification* _internal_mutable_app_notification();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_app_notification(
      ::sync_pb::AppNotification* app_notification);
  PROTOBUF_DEPRECATED ::sync_pb::AppNotification* unsafe_arena_release_app_notification();

  // .sync_pb.PasswordSpecifics password = 45873;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const ::sync_pb::PasswordSpecifics& password() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecifics* release_password();
  ::sync_pb::PasswordSpecifics* mutable_password();
  void set_allocated_password(::sync_pb::PasswordSpecifics* password);
  private:
  const ::sync_pb::PasswordSpecifics& _internal_password() const;
  ::sync_pb::PasswordSpecifics* _internal_mutable_password();
  public:
  void unsafe_arena_set_allocated_password(
      ::sync_pb::PasswordSpecifics* password);
  ::sync_pb::PasswordSpecifics* unsafe_arena_release_password();

  // .sync_pb.NigoriSpecifics nigori = 47745;
  bool has_nigori() const;
  private:
  bool _internal_has_nigori() const;
  public:
  void clear_nigori();
  const ::sync_pb::NigoriSpecifics& nigori() const;
  PROTOBUF_NODISCARD ::sync_pb::NigoriSpecifics* release_nigori();
  ::sync_pb::NigoriSpecifics* mutable_nigori();
  void set_allocated_nigori(::sync_pb::NigoriSpecifics* nigori);
  private:
  const ::sync_pb::NigoriSpecifics& _internal_nigori() const;
  ::sync_pb::NigoriSpecifics* _internal_mutable_nigori();
  public:
  void unsafe_arena_set_allocated_nigori(
      ::sync_pb::NigoriSpecifics* nigori);
  ::sync_pb::NigoriSpecifics* unsafe_arena_release_nigori();

  // .sync_pb.ExtensionSpecifics extension = 48119;
  bool has_extension() const;
  private:
  bool _internal_has_extension() const;
  public:
  void clear_extension();
  const ::sync_pb::ExtensionSpecifics& extension() const;
  PROTOBUF_NODISCARD ::sync_pb::ExtensionSpecifics* release_extension();
  ::sync_pb::ExtensionSpecifics* mutable_extension();
  void set_allocated_extension(::sync_pb::ExtensionSpecifics* extension);
  private:
  const ::sync_pb::ExtensionSpecifics& _internal_extension() const;
  ::sync_pb::ExtensionSpecifics* _internal_mutable_extension();
  public:
  void unsafe_arena_set_allocated_extension(
      ::sync_pb::ExtensionSpecifics* extension);
  ::sync_pb::ExtensionSpecifics* unsafe_arena_release_extension();

  // .sync_pb.AppSpecifics app = 48364;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::sync_pb::AppSpecifics& app() const;
  PROTOBUF_NODISCARD ::sync_pb::AppSpecifics* release_app();
  ::sync_pb::AppSpecifics* mutable_app();
  void set_allocated_app(::sync_pb::AppSpecifics* app);
  private:
  const ::sync_pb::AppSpecifics& _internal_app() const;
  ::sync_pb::AppSpecifics* _internal_mutable_app();
  public:
  void unsafe_arena_set_allocated_app(
      ::sync_pb::AppSpecifics* app);
  ::sync_pb::AppSpecifics* unsafe_arena_release_app();

  // .sync_pb.SessionSpecifics session = 50119;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::sync_pb::SessionSpecifics& session() const;
  PROTOBUF_NODISCARD ::sync_pb::SessionSpecifics* release_session();
  ::sync_pb::SessionSpecifics* mutable_session();
  void set_allocated_session(::sync_pb::SessionSpecifics* session);
  private:
  const ::sync_pb::SessionSpecifics& _internal_session() const;
  ::sync_pb::SessionSpecifics* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::sync_pb::SessionSpecifics* session);
  ::sync_pb::SessionSpecifics* unsafe_arena_release_session();

  // .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
  bool has_autofill_profile() const;
  private:
  bool _internal_has_autofill_profile() const;
  public:
  void clear_autofill_profile();
  const ::sync_pb::AutofillProfileSpecifics& autofill_profile() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillProfileSpecifics* release_autofill_profile();
  ::sync_pb::AutofillProfileSpecifics* mutable_autofill_profile();
  void set_allocated_autofill_profile(::sync_pb::AutofillProfileSpecifics* autofill_profile);
  private:
  const ::sync_pb::AutofillProfileSpecifics& _internal_autofill_profile() const;
  ::sync_pb::AutofillProfileSpecifics* _internal_mutable_autofill_profile();
  public:
  void unsafe_arena_set_allocated_autofill_profile(
      ::sync_pb::AutofillProfileSpecifics* autofill_profile);
  ::sync_pb::AutofillProfileSpecifics* unsafe_arena_release_autofill_profile();

  // .sync_pb.SearchEngineSpecifics search_engine = 88610;
  bool has_search_engine() const;
  private:
  bool _internal_has_search_engine() const;
  public:
  void clear_search_engine();
  const ::sync_pb::SearchEngineSpecifics& search_engine() const;
  PROTOBUF_NODISCARD ::sync_pb::SearchEngineSpecifics* release_search_engine();
  ::sync_pb::SearchEngineSpecifics* mutable_search_engine();
  void set_allocated_search_engine(::sync_pb::SearchEngineSpecifics* search_engine);
  private:
  const ::sync_pb::SearchEngineSpecifics& _internal_search_engine() const;
  ::sync_pb::SearchEngineSpecifics* _internal_mutable_search_engine();
  public:
  void unsafe_arena_set_allocated_search_engine(
      ::sync_pb::SearchEngineSpecifics* search_engine);
  ::sync_pb::SearchEngineSpecifics* unsafe_arena_release_search_engine();

  // .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
  bool has_extension_setting() const;
  private:
  bool _internal_has_extension_setting() const;
  public:
  void clear_extension_setting();
  const ::sync_pb::ExtensionSettingSpecifics& extension_setting() const;
  PROTOBUF_NODISCARD ::sync_pb::ExtensionSettingSpecifics* release_extension_setting();
  ::sync_pb::ExtensionSettingSpecifics* mutable_extension_setting();
  void set_allocated_extension_setting(::sync_pb::ExtensionSettingSpecifics* extension_setting);
  private:
  const ::sync_pb::ExtensionSettingSpecifics& _internal_extension_setting() const;
  ::sync_pb::ExtensionSettingSpecifics* _internal_mutable_extension_setting();
  public:
  void unsafe_arena_set_allocated_extension_setting(
      ::sync_pb::ExtensionSettingSpecifics* extension_setting);
  ::sync_pb::ExtensionSettingSpecifics* unsafe_arena_release_extension_setting();

  // .sync_pb.AppSettingSpecifics app_setting = 103656;
  bool has_app_setting() const;
  private:
  bool _internal_has_app_setting() const;
  public:
  void clear_app_setting();
  const ::sync_pb::AppSettingSpecifics& app_setting() const;
  PROTOBUF_NODISCARD ::sync_pb::AppSettingSpecifics* release_app_setting();
  ::sync_pb::AppSettingSpecifics* mutable_app_setting();
  void set_allocated_app_setting(::sync_pb::AppSettingSpecifics* app_setting);
  private:
  const ::sync_pb::AppSettingSpecifics& _internal_app_setting() const;
  ::sync_pb::AppSettingSpecifics* _internal_mutable_app_setting();
  public:
  void unsafe_arena_set_allocated_app_setting(
      ::sync_pb::AppSettingSpecifics* app_setting);
  ::sync_pb::AppSettingSpecifics* unsafe_arena_release_app_setting();

  // .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
  bool has_history_delete_directive() const;
  private:
  bool _internal_has_history_delete_directive() const;
  public:
  void clear_history_delete_directive();
  const ::sync_pb::HistoryDeleteDirectiveSpecifics& history_delete_directive() const;
  PROTOBUF_NODISCARD ::sync_pb::HistoryDeleteDirectiveSpecifics* release_history_delete_directive();
  ::sync_pb::HistoryDeleteDirectiveSpecifics* mutable_history_delete_directive();
  void set_allocated_history_delete_directive(::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive);
  private:
  const ::sync_pb::HistoryDeleteDirectiveSpecifics& _internal_history_delete_directive() const;
  ::sync_pb::HistoryDeleteDirectiveSpecifics* _internal_mutable_history_delete_directive();
  public:
  void unsafe_arena_set_allocated_history_delete_directive(
      ::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive);
  ::sync_pb::HistoryDeleteDirectiveSpecifics* unsafe_arena_release_history_delete_directive();

  // .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_synced_notification() const;
  private:
  bool _internal_has_synced_notification() const;
  public:
  PROTOBUF_DEPRECATED void clear_synced_notification();
  PROTOBUF_DEPRECATED const ::sync_pb::SyncedNotificationSpecifics& synced_notification() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationSpecifics* release_synced_notification();
  PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationSpecifics* mutable_synced_notification();
  PROTOBUF_DEPRECATED void set_allocated_synced_notification(::sync_pb::SyncedNotificationSpecifics* synced_notification);
  private:
  const ::sync_pb::SyncedNotificationSpecifics& _internal_synced_notification() const;
  ::sync_pb::SyncedNotificationSpecifics* _internal_mutable_synced_notification();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_synced_notification(
      ::sync_pb::SyncedNotificationSpecifics* synced_notification);
  PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationSpecifics* unsafe_arena_release_synced_notification();

  // .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_synced_notification_app_info() const;
  private:
  bool _internal_has_synced_notification_app_info() const;
  public:
  PROTOBUF_DEPRECATED void clear_synced_notification_app_info();
  PROTOBUF_DEPRECATED const ::sync_pb::SyncedNotificationAppInfoSpecifics& synced_notification_app_info() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationAppInfoSpecifics* release_synced_notification_app_info();
  PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationAppInfoSpecifics* mutable_synced_notification_app_info();
  PROTOBUF_DEPRECATED void set_allocated_synced_notification_app_info(::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info);
  private:
  const ::sync_pb::SyncedNotificationAppInfoSpecifics& _internal_synced_notification_app_info() const;
  ::sync_pb::SyncedNotificationAppInfoSpecifics* _internal_mutable_synced_notification_app_info();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_synced_notification_app_info(
      ::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info);
  PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationAppInfoSpecifics* unsafe_arena_release_synced_notification_app_info();

  // .sync_pb.DeviceInfoSpecifics device_info = 154522;
  bool has_device_info() const;
  private:
  bool _internal_has_device_info() const;
  public:
  void clear_device_info();
  const ::sync_pb::DeviceInfoSpecifics& device_info() const;
  PROTOBUF_NODISCARD ::sync_pb::DeviceInfoSpecifics* release_device_info();
  ::sync_pb::DeviceInfoSpecifics* mutable_device_info();
  void set_allocated_device_info(::sync_pb::DeviceInfoSpecifics* device_info);
  private:
  const ::sync_pb::DeviceInfoSpecifics& _internal_device_info() const;
  ::sync_pb::DeviceInfoSpecifics* _internal_mutable_device_info();
  public:
  void unsafe_arena_set_allocated_device_info(
      ::sync_pb::DeviceInfoSpecifics* device_info);
  ::sync_pb::DeviceInfoSpecifics* unsafe_arena_release_device_info();

  // .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_experiments() const;
  private:
  bool _internal_has_experiments() const;
  public:
  PROTOBUF_DEPRECATED void clear_experiments();
  PROTOBUF_DEPRECATED const ::sync_pb::ExperimentsSpecifics& experiments() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::ExperimentsSpecifics* release_experiments();
  PROTOBUF_DEPRECATED ::sync_pb::ExperimentsSpecifics* mutable_experiments();
  PROTOBUF_DEPRECATED void set_allocated_experiments(::sync_pb::ExperimentsSpecifics* experiments);
  private:
  const ::sync_pb::ExperimentsSpecifics& _internal_experiments() const;
  ::sync_pb::ExperimentsSpecifics* _internal_mutable_experiments();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_experiments(
      ::sync_pb::ExperimentsSpecifics* experiments);
  PROTOBUF_DEPRECATED ::sync_pb::ExperimentsSpecifics* unsafe_arena_release_experiments();

  // .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
  bool has_priority_preference() const;
  private:
  bool _internal_has_priority_preference() const;
  public:
  void clear_priority_preference();
  const ::sync_pb::PriorityPreferenceSpecifics& priority_preference() const;
  PROTOBUF_NODISCARD ::sync_pb::PriorityPreferenceSpecifics* release_priority_preference();
  ::sync_pb::PriorityPreferenceSpecifics* mutable_priority_preference();
  void set_allocated_priority_preference(::sync_pb::PriorityPreferenceSpecifics* priority_preference);
  private:
  const ::sync_pb::PriorityPreferenceSpecifics& _internal_priority_preference() const;
  ::sync_pb::PriorityPreferenceSpecifics* _internal_mutable_priority_preference();
  public:
  void unsafe_arena_set_allocated_priority_preference(
      ::sync_pb::PriorityPreferenceSpecifics* priority_preference);
  ::sync_pb::PriorityPreferenceSpecifics* unsafe_arena_release_priority_preference();

  // .sync_pb.DictionarySpecifics dictionary = 170540;
  bool has_dictionary() const;
  private:
  bool _internal_has_dictionary() const;
  public:
  void clear_dictionary();
  const ::sync_pb::DictionarySpecifics& dictionary() const;
  PROTOBUF_NODISCARD ::sync_pb::DictionarySpecifics* release_dictionary();
  ::sync_pb::DictionarySpecifics* mutable_dictionary();
  void set_allocated_dictionary(::sync_pb::DictionarySpecifics* dictionary);
  private:
  const ::sync_pb::DictionarySpecifics& _internal_dictionary() const;
  ::sync_pb::DictionarySpecifics* _internal_mutable_dictionary();
  public:
  void unsafe_arena_set_allocated_dictionary(
      ::sync_pb::DictionarySpecifics* dictionary);
  ::sync_pb::DictionarySpecifics* unsafe_arena_release_dictionary();

  // .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_favicon_tracking() const;
  private:
  bool _internal_has_favicon_tracking() const;
  public:
  PROTOBUF_DEPRECATED void clear_favicon_tracking();
  PROTOBUF_DEPRECATED const ::sync_pb::FaviconTrackingSpecifics& favicon_tracking() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::FaviconTrackingSpecifics* release_favicon_tracking();
  PROTOBUF_DEPRECATED ::sync_pb::FaviconTrackingSpecifics* mutable_favicon_tracking();
  PROTOBUF_DEPRECATED void set_allocated_favicon_tracking(::sync_pb::FaviconTrackingSpecifics* favicon_tracking);
  private:
  const ::sync_pb::FaviconTrackingSpecifics& _internal_favicon_tracking() const;
  ::sync_pb::FaviconTrackingSpecifics* _internal_mutable_favicon_tracking();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_favicon_tracking(
      ::sync_pb::FaviconTrackingSpecifics* favicon_tracking);
  PROTOBUF_DEPRECATED ::sync_pb::FaviconTrackingSpecifics* unsafe_arena_release_favicon_tracking();

  // .sync_pb.FaviconImageSpecifics favicon_image = 182019 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_favicon_image() const;
  private:
  bool _internal_has_favicon_image() const;
  public:
  PROTOBUF_DEPRECATED void clear_favicon_image();
  PROTOBUF_DEPRECATED const ::sync_pb::FaviconImageSpecifics& favicon_image() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::FaviconImageSpecifics* release_favicon_image();
  PROTOBUF_DEPRECATED ::sync_pb::FaviconImageSpecifics* mutable_favicon_image();
  PROTOBUF_DEPRECATED void set_allocated_favicon_image(::sync_pb::FaviconImageSpecifics* favicon_image);
  private:
  const ::sync_pb::FaviconImageSpecifics& _internal_favicon_image() const;
  ::sync_pb::FaviconImageSpecifics* _internal_mutable_favicon_image();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_favicon_image(
      ::sync_pb::FaviconImageSpecifics* favicon_image);
  PROTOBUF_DEPRECATED ::sync_pb::FaviconImageSpecifics* unsafe_arena_release_favicon_image();

  // .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
  bool has_managed_user_setting() const;
  private:
  bool _internal_has_managed_user_setting() const;
  public:
  void clear_managed_user_setting();
  const ::sync_pb::ManagedUserSettingSpecifics& managed_user_setting() const;
  PROTOBUF_NODISCARD ::sync_pb::ManagedUserSettingSpecifics* release_managed_user_setting();
  ::sync_pb::ManagedUserSettingSpecifics* mutable_managed_user_setting();
  void set_allocated_managed_user_setting(::sync_pb::ManagedUserSettingSpecifics* managed_user_setting);
  private:
  const ::sync_pb::ManagedUserSettingSpecifics& _internal_managed_user_setting() const;
  ::sync_pb::ManagedUserSettingSpecifics* _internal_mutable_managed_user_setting();
  public:
  void unsafe_arena_set_allocated_managed_user_setting(
      ::sync_pb::ManagedUserSettingSpecifics* managed_user_setting);
  ::sync_pb::ManagedUserSettingSpecifics* unsafe_arena_release_managed_user_setting();

  // .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_managed_user() const;
  private:
  bool _internal_has_managed_user() const;
  public:
  PROTOBUF_DEPRECATED void clear_managed_user();
  PROTOBUF_DEPRECATED const ::sync_pb::ManagedUserSpecifics& managed_user() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSpecifics* release_managed_user();
  PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSpecifics* mutable_managed_user();
  PROTOBUF_DEPRECATED void set_allocated_managed_user(::sync_pb::ManagedUserSpecifics* managed_user);
  private:
  const ::sync_pb::ManagedUserSpecifics& _internal_managed_user() const;
  ::sync_pb::ManagedUserSpecifics* _internal_mutable_managed_user();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_managed_user(
      ::sync_pb::ManagedUserSpecifics* managed_user);
  PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSpecifics* unsafe_arena_release_managed_user();

  // .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_managed_user_shared_setting() const;
  private:
  bool _internal_has_managed_user_shared_setting() const;
  public:
  PROTOBUF_DEPRECATED void clear_managed_user_shared_setting();
  PROTOBUF_DEPRECATED const ::sync_pb::ManagedUserSharedSettingSpecifics& managed_user_shared_setting() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSharedSettingSpecifics* release_managed_user_shared_setting();
  PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSharedSettingSpecifics* mutable_managed_user_shared_setting();
  PROTOBUF_DEPRECATED void set_allocated_managed_user_shared_setting(::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting);
  private:
  const ::sync_pb::ManagedUserSharedSettingSpecifics& _internal_managed_user_shared_setting() const;
  ::sync_pb::ManagedUserSharedSettingSpecifics* _internal_mutable_managed_user_shared_setting();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_managed_user_shared_setting(
      ::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting);
  PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSharedSettingSpecifics* unsafe_arena_release_managed_user_shared_setting();

  // .sync_pb.AppListSpecifics app_list = 229170;
  bool has_app_list() const;
  private:
  bool _internal_has_app_list() const;
  public:
  void clear_app_list();
  const ::sync_pb::AppListSpecifics& app_list() const;
  PROTOBUF_NODISCARD ::sync_pb::AppListSpecifics* release_app_list();
  ::sync_pb::AppListSpecifics* mutable_app_list();
  void set_allocated_app_list(::sync_pb::AppListSpecifics* app_list);
  private:
  const ::sync_pb::AppListSpecifics& _internal_app_list() const;
  ::sync_pb::AppListSpecifics* _internal_mutable_app_list();
  public:
  void unsafe_arena_set_allocated_app_list(
      ::sync_pb::AppListSpecifics* app_list);
  ::sync_pb::AppListSpecifics* unsafe_arena_release_app_list();

  // .sync_pb.EmptySpecifics managed_user_allowlist = 306060 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_managed_user_allowlist() const;
  private:
  bool _internal_has_managed_user_allowlist() const;
  public:
  PROTOBUF_DEPRECATED void clear_managed_user_allowlist();
  PROTOBUF_DEPRECATED const ::sync_pb::EmptySpecifics& managed_user_allowlist() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::EmptySpecifics* release_managed_user_allowlist();
  PROTOBUF_DEPRECATED ::sync_pb::EmptySpecifics* mutable_managed_user_allowlist();
  PROTOBUF_DEPRECATED void set_allocated_managed_user_allowlist(::sync_pb::EmptySpecifics* managed_user_allowlist);
  private:
  const ::sync_pb::EmptySpecifics& _internal_managed_user_allowlist() const;
  ::sync_pb::EmptySpecifics* _internal_mutable_managed_user_allowlist();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_managed_user_allowlist(
      ::sync_pb::EmptySpecifics* managed_user_allowlist);
  PROTOBUF_DEPRECATED ::sync_pb::EmptySpecifics* unsafe_arena_release_managed_user_allowlist();

  // .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
  bool has_autofill_wallet() const;
  private:
  bool _internal_has_autofill_wallet() const;
  public:
  void clear_autofill_wallet();
  const ::sync_pb::AutofillWalletSpecifics& autofill_wallet() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillWalletSpecifics* release_autofill_wallet();
  ::sync_pb::AutofillWalletSpecifics* mutable_autofill_wallet();
  void set_allocated_autofill_wallet(::sync_pb::AutofillWalletSpecifics* autofill_wallet);
  private:
  const ::sync_pb::AutofillWalletSpecifics& _internal_autofill_wallet() const;
  ::sync_pb::AutofillWalletSpecifics* _internal_mutable_autofill_wallet();
  public:
  void unsafe_arena_set_allocated_autofill_wallet(
      ::sync_pb::AutofillWalletSpecifics* autofill_wallet);
  ::sync_pb::AutofillWalletSpecifics* unsafe_arena_release_autofill_wallet();

  // .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
  bool has_wallet_metadata() const;
  private:
  bool _internal_has_wallet_metadata() const;
  public:
  void clear_wallet_metadata();
  const ::sync_pb::WalletMetadataSpecifics& wallet_metadata() const;
  PROTOBUF_NODISCARD ::sync_pb::WalletMetadataSpecifics* release_wallet_metadata();
  ::sync_pb::WalletMetadataSpecifics* mutable_wallet_metadata();
  void set_allocated_wallet_metadata(::sync_pb::WalletMetadataSpecifics* wallet_metadata);
  private:
  const ::sync_pb::WalletMetadataSpecifics& _internal_wallet_metadata() const;
  ::sync_pb::WalletMetadataSpecifics* _internal_mutable_wallet_metadata();
  public:
  void unsafe_arena_set_allocated_wallet_metadata(
      ::sync_pb::WalletMetadataSpecifics* wallet_metadata);
  ::sync_pb::WalletMetadataSpecifics* unsafe_arena_release_wallet_metadata();

  // .sync_pb.ArcPackageSpecifics arc_package = 340906;
  bool has_arc_package() const;
  private:
  bool _internal_has_arc_package() const;
  public:
  void clear_arc_package();
  const ::sync_pb::ArcPackageSpecifics& arc_package() const;
  PROTOBUF_NODISCARD ::sync_pb::ArcPackageSpecifics* release_arc_package();
  ::sync_pb::ArcPackageSpecifics* mutable_arc_package();
  void set_allocated_arc_package(::sync_pb::ArcPackageSpecifics* arc_package);
  private:
  const ::sync_pb::ArcPackageSpecifics& _internal_arc_package() const;
  ::sync_pb::ArcPackageSpecifics* _internal_mutable_arc_package();
  public:
  void unsafe_arena_set_allocated_arc_package(
      ::sync_pb::ArcPackageSpecifics* arc_package);
  ::sync_pb::ArcPackageSpecifics* unsafe_arena_release_arc_package();

  // .sync_pb.PrinterSpecifics printer = 410745;
  bool has_printer() const;
  private:
  bool _internal_has_printer() const;
  public:
  void clear_printer();
  const ::sync_pb::PrinterSpecifics& printer() const;
  PROTOBUF_NODISCARD ::sync_pb::PrinterSpecifics* release_printer();
  ::sync_pb::PrinterSpecifics* mutable_printer();
  void set_allocated_printer(::sync_pb::PrinterSpecifics* printer);
  private:
  const ::sync_pb::PrinterSpecifics& _internal_printer() const;
  ::sync_pb::PrinterSpecifics* _internal_mutable_printer();
  public:
  void unsafe_arena_set_allocated_printer(
      ::sync_pb::PrinterSpecifics* printer);
  ::sync_pb::PrinterSpecifics* unsafe_arena_release_printer();

  // .sync_pb.ReadingListSpecifics reading_list = 411028;
  bool has_reading_list() const;
  private:
  bool _internal_has_reading_list() const;
  public:
  void clear_reading_list();
  const ::sync_pb::ReadingListSpecifics& reading_list() const;
  PROTOBUF_NODISCARD ::sync_pb::ReadingListSpecifics* release_reading_list();
  ::sync_pb::ReadingListSpecifics* mutable_reading_list();
  void set_allocated_reading_list(::sync_pb::ReadingListSpecifics* reading_list);
  private:
  const ::sync_pb::ReadingListSpecifics& _internal_reading_list() const;
  ::sync_pb::ReadingListSpecifics* _internal_mutable_reading_list();
  public:
  void unsafe_arena_set_allocated_reading_list(
      ::sync_pb::ReadingListSpecifics* reading_list);
  ::sync_pb::ReadingListSpecifics* unsafe_arena_release_reading_list();

  // .sync_pb.UserEventSpecifics user_event = 455206;
  bool has_user_event() const;
  private:
  bool _internal_has_user_event() const;
  public:
  void clear_user_event();
  const ::sync_pb::UserEventSpecifics& user_event() const;
  PROTOBUF_NODISCARD ::sync_pb::UserEventSpecifics* release_user_event();
  ::sync_pb::UserEventSpecifics* mutable_user_event();
  void set_allocated_user_event(::sync_pb::UserEventSpecifics* user_event);
  private:
  const ::sync_pb::UserEventSpecifics& _internal_user_event() const;
  ::sync_pb::UserEventSpecifics* _internal_mutable_user_event();
  public:
  void unsafe_arena_set_allocated_user_event(
      ::sync_pb::UserEventSpecifics* user_event);
  ::sync_pb::UserEventSpecifics* unsafe_arena_release_user_event();

  // .sync_pb.UserConsentSpecifics user_consent = 556014;
  bool has_user_consent() const;
  private:
  bool _internal_has_user_consent() const;
  public:
  void clear_user_consent();
  const ::sync_pb::UserConsentSpecifics& user_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentSpecifics* release_user_consent();
  ::sync_pb::UserConsentSpecifics* mutable_user_consent();
  void set_allocated_user_consent(::sync_pb::UserConsentSpecifics* user_consent);
  private:
  const ::sync_pb::UserConsentSpecifics& _internal_user_consent() const;
  ::sync_pb::UserConsentSpecifics* _internal_mutable_user_consent();
  public:
  void unsafe_arena_set_allocated_user_consent(
      ::sync_pb::UserConsentSpecifics* user_consent);
  ::sync_pb::UserConsentSpecifics* unsafe_arena_release_user_consent();

  // .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
  bool has_send_tab_to_self() const;
  private:
  bool _internal_has_send_tab_to_self() const;
  public:
  void clear_send_tab_to_self();
  const ::sync_pb::SendTabToSelfSpecifics& send_tab_to_self() const;
  PROTOBUF_NODISCARD ::sync_pb::SendTabToSelfSpecifics* release_send_tab_to_self();
  ::sync_pb::SendTabToSelfSpecifics* mutable_send_tab_to_self();
  void set_allocated_send_tab_to_self(::sync_pb::SendTabToSelfSpecifics* send_tab_to_self);
  private:
  const ::sync_pb::SendTabToSelfSpecifics& _internal_send_tab_to_self() const;
  ::sync_pb::SendTabToSelfSpecifics* _internal_mutable_send_tab_to_self();
  public:
  void unsafe_arena_set_allocated_send_tab_to_self(
      ::sync_pb::SendTabToSelfSpecifics* send_tab_to_self);
  ::sync_pb::SendTabToSelfSpecifics* unsafe_arena_release_send_tab_to_self();

  // .sync_pb.SecurityEventSpecifics security_event = 600372;
  bool has_security_event() const;
  private:
  bool _internal_has_security_event() const;
  public:
  void clear_security_event();
  const ::sync_pb::SecurityEventSpecifics& security_event() const;
  PROTOBUF_NODISCARD ::sync_pb::SecurityEventSpecifics* release_security_event();
  ::sync_pb::SecurityEventSpecifics* mutable_security_event();
  void set_allocated_security_event(::sync_pb::SecurityEventSpecifics* security_event);
  private:
  const ::sync_pb::SecurityEventSpecifics& _internal_security_event() const;
  ::sync_pb::SecurityEventSpecifics* _internal_mutable_security_event();
  public:
  void unsafe_arena_set_allocated_security_event(
      ::sync_pb::SecurityEventSpecifics* security_event);
  ::sync_pb::SecurityEventSpecifics* unsafe_arena_release_security_event();

  // .sync_pb.WebAppSpecifics web_app = 673225;
  bool has_web_app() const;
  private:
  bool _internal_has_web_app() const;
  public:
  void clear_web_app();
  const ::sync_pb::WebAppSpecifics& web_app() const;
  PROTOBUF_NODISCARD ::sync_pb::WebAppSpecifics* release_web_app();
  ::sync_pb::WebAppSpecifics* mutable_web_app();
  void set_allocated_web_app(::sync_pb::WebAppSpecifics* web_app);
  private:
  const ::sync_pb::WebAppSpecifics& _internal_web_app() const;
  ::sync_pb::WebAppSpecifics* _internal_mutable_web_app();
  public:
  void unsafe_arena_set_allocated_web_app(
      ::sync_pb::WebAppSpecifics* web_app);
  ::sync_pb::WebAppSpecifics* unsafe_arena_release_web_app();

  // .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
  bool has_wifi_configuration() const;
  private:
  bool _internal_has_wifi_configuration() const;
  public:
  void clear_wifi_configuration();
  const ::sync_pb::WifiConfigurationSpecifics& wifi_configuration() const;
  PROTOBUF_NODISCARD ::sync_pb::WifiConfigurationSpecifics* release_wifi_configuration();
  ::sync_pb::WifiConfigurationSpecifics* mutable_wifi_configuration();
  void set_allocated_wifi_configuration(::sync_pb::WifiConfigurationSpecifics* wifi_configuration);
  private:
  const ::sync_pb::WifiConfigurationSpecifics& _internal_wifi_configuration() const;
  ::sync_pb::WifiConfigurationSpecifics* _internal_mutable_wifi_configuration();
  public:
  void unsafe_arena_set_allocated_wifi_configuration(
      ::sync_pb::WifiConfigurationSpecifics* wifi_configuration);
  ::sync_pb::WifiConfigurationSpecifics* unsafe_arena_release_wifi_configuration();

  // .sync_pb.OsPreferenceSpecifics os_preference = 702141;
  bool has_os_preference() const;
  private:
  bool _internal_has_os_preference() const;
  public:
  void clear_os_preference();
  const ::sync_pb::OsPreferenceSpecifics& os_preference() const;
  PROTOBUF_NODISCARD ::sync_pb::OsPreferenceSpecifics* release_os_preference();
  ::sync_pb::OsPreferenceSpecifics* mutable_os_preference();
  void set_allocated_os_preference(::sync_pb::OsPreferenceSpecifics* os_preference);
  private:
  const ::sync_pb::OsPreferenceSpecifics& _internal_os_preference() const;
  ::sync_pb::OsPreferenceSpecifics* _internal_mutable_os_preference();
  public:
  void unsafe_arena_set_allocated_os_preference(
      ::sync_pb::OsPreferenceSpecifics* os_preference);
  ::sync_pb::OsPreferenceSpecifics* unsafe_arena_release_os_preference();

  // .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
  bool has_os_priority_preference() const;
  private:
  bool _internal_has_os_priority_preference() const;
  public:
  void clear_os_priority_preference();
  const ::sync_pb::OsPriorityPreferenceSpecifics& os_priority_preference() const;
  PROTOBUF_NODISCARD ::sync_pb::OsPriorityPreferenceSpecifics* release_os_priority_preference();
  ::sync_pb::OsPriorityPreferenceSpecifics* mutable_os_priority_preference();
  void set_allocated_os_priority_preference(::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference);
  private:
  const ::sync_pb::OsPriorityPreferenceSpecifics& _internal_os_priority_preference() const;
  ::sync_pb::OsPriorityPreferenceSpecifics* _internal_mutable_os_priority_preference();
  public:
  void unsafe_arena_set_allocated_os_priority_preference(
      ::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference);
  ::sync_pb::OsPriorityPreferenceSpecifics* unsafe_arena_release_os_priority_preference();

  // .sync_pb.SharingMessageSpecifics sharing_message = 728866;
  bool has_sharing_message() const;
  private:
  bool _internal_has_sharing_message() const;
  public:
  void clear_sharing_message();
  const ::sync_pb::SharingMessageSpecifics& sharing_message() const;
  PROTOBUF_NODISCARD ::sync_pb::SharingMessageSpecifics* release_sharing_message();
  ::sync_pb::SharingMessageSpecifics* mutable_sharing_message();
  void set_allocated_sharing_message(::sync_pb::SharingMessageSpecifics* sharing_message);
  private:
  const ::sync_pb::SharingMessageSpecifics& _internal_sharing_message() const;
  ::sync_pb::SharingMessageSpecifics* _internal_mutable_sharing_message();
  public:
  void unsafe_arena_set_allocated_sharing_message(
      ::sync_pb::SharingMessageSpecifics* sharing_message);
  ::sync_pb::SharingMessageSpecifics* unsafe_arena_release_sharing_message();

  // .sync_pb.AutofillOfferSpecifics autofill_offer = 774329;
  bool has_autofill_offer() const;
  private:
  bool _internal_has_autofill_offer() const;
  public:
  void clear_autofill_offer();
  const ::sync_pb::AutofillOfferSpecifics& autofill_offer() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillOfferSpecifics* release_autofill_offer();
  ::sync_pb::AutofillOfferSpecifics* mutable_autofill_offer();
  void set_allocated_autofill_offer(::sync_pb::AutofillOfferSpecifics* autofill_offer);
  private:
  const ::sync_pb::AutofillOfferSpecifics& _internal_autofill_offer() const;
  ::sync_pb::AutofillOfferSpecifics* _internal_mutable_autofill_offer();
  public:
  void unsafe_arena_set_allocated_autofill_offer(
      ::sync_pb::AutofillOfferSpecifics* autofill_offer);
  ::sync_pb::AutofillOfferSpecifics* unsafe_arena_release_autofill_offer();

  // .sync_pb.WorkspaceDeskSpecifics workspace_desk = 874841;
  bool has_workspace_desk() const;
  private:
  bool _internal_has_workspace_desk() const;
  public:
  void clear_workspace_desk();
  const ::sync_pb::WorkspaceDeskSpecifics& workspace_desk() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics* release_workspace_desk();
  ::sync_pb::WorkspaceDeskSpecifics* mutable_workspace_desk();
  void set_allocated_workspace_desk(::sync_pb::WorkspaceDeskSpecifics* workspace_desk);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics& _internal_workspace_desk() const;
  ::sync_pb::WorkspaceDeskSpecifics* _internal_mutable_workspace_desk();
  public:
  void unsafe_arena_set_allocated_workspace_desk(
      ::sync_pb::WorkspaceDeskSpecifics* workspace_desk);
  ::sync_pb::WorkspaceDeskSpecifics* unsafe_arena_release_workspace_desk();

  // .sync_pb.WebauthnCredentialSpecifics webauthn_credential = 895275;
  bool has_webauthn_credential() const;
  private:
  bool _internal_has_webauthn_credential() const;
  public:
  void clear_webauthn_credential();
  const ::sync_pb::WebauthnCredentialSpecifics& webauthn_credential() const;
  PROTOBUF_NODISCARD ::sync_pb::WebauthnCredentialSpecifics* release_webauthn_credential();
  ::sync_pb::WebauthnCredentialSpecifics* mutable_webauthn_credential();
  void set_allocated_webauthn_credential(::sync_pb::WebauthnCredentialSpecifics* webauthn_credential);
  private:
  const ::sync_pb::WebauthnCredentialSpecifics& _internal_webauthn_credential() const;
  ::sync_pb::WebauthnCredentialSpecifics* _internal_mutable_webauthn_credential();
  public:
  void unsafe_arena_set_allocated_webauthn_credential(
      ::sync_pb::WebauthnCredentialSpecifics* webauthn_credential);
  ::sync_pb::WebauthnCredentialSpecifics* unsafe_arena_release_webauthn_credential();

  // .sync_pb.HistorySpecifics history = 963985;
  bool has_history() const;
  private:
  bool _internal_has_history() const;
  public:
  void clear_history();
  const ::sync_pb::HistorySpecifics& history() const;
  PROTOBUF_NODISCARD ::sync_pb::HistorySpecifics* release_history();
  ::sync_pb::HistorySpecifics* mutable_history();
  void set_allocated_history(::sync_pb::HistorySpecifics* history);
  private:
  const ::sync_pb::HistorySpecifics& _internal_history() const;
  ::sync_pb::HistorySpecifics* _internal_mutable_history();
  public:
  void unsafe_arena_set_allocated_history(
      ::sync_pb::HistorySpecifics* history);
  ::sync_pb::HistorySpecifics* unsafe_arena_release_history();

  // .sync_pb.PrintersAuthorizationServerSpecifics printers_authorization_server = 974304;
  bool has_printers_authorization_server() const;
  private:
  bool _internal_has_printers_authorization_server() const;
  public:
  void clear_printers_authorization_server();
  const ::sync_pb::PrintersAuthorizationServerSpecifics& printers_authorization_server() const;
  PROTOBUF_NODISCARD ::sync_pb::PrintersAuthorizationServerSpecifics* release_printers_authorization_server();
  ::sync_pb::PrintersAuthorizationServerSpecifics* mutable_printers_authorization_server();
  void set_allocated_printers_authorization_server(::sync_pb::PrintersAuthorizationServerSpecifics* printers_authorization_server);
  private:
  const ::sync_pb::PrintersAuthorizationServerSpecifics& _internal_printers_authorization_server() const;
  ::sync_pb::PrintersAuthorizationServerSpecifics* _internal_mutable_printers_authorization_server();
  public:
  void unsafe_arena_set_allocated_printers_authorization_server(
      ::sync_pb::PrintersAuthorizationServerSpecifics* printers_authorization_server);
  ::sync_pb::PrintersAuthorizationServerSpecifics* unsafe_arena_release_printers_authorization_server();

  // .sync_pb.SavedTabGroupSpecifics saved_tab_group = 1004874;
  bool has_saved_tab_group() const;
  private:
  bool _internal_has_saved_tab_group() const;
  public:
  void clear_saved_tab_group();
  const ::sync_pb::SavedTabGroupSpecifics& saved_tab_group() const;
  PROTOBUF_NODISCARD ::sync_pb::SavedTabGroupSpecifics* release_saved_tab_group();
  ::sync_pb::SavedTabGroupSpecifics* mutable_saved_tab_group();
  void set_allocated_saved_tab_group(::sync_pb::SavedTabGroupSpecifics* saved_tab_group);
  private:
  const ::sync_pb::SavedTabGroupSpecifics& _internal_saved_tab_group() const;
  ::sync_pb::SavedTabGroupSpecifics* _internal_mutable_saved_tab_group();
  public:
  void unsafe_arena_set_allocated_saved_tab_group(
      ::sync_pb::SavedTabGroupSpecifics* saved_tab_group);
  ::sync_pb::SavedTabGroupSpecifics* unsafe_arena_release_saved_tab_group();

  // .sync_pb.AutofillWalletUsageSpecifics autofill_wallet_usage = 1033580;
  bool has_autofill_wallet_usage() const;
  private:
  bool _internal_has_autofill_wallet_usage() const;
  public:
  void clear_autofill_wallet_usage();
  const ::sync_pb::AutofillWalletUsageSpecifics& autofill_wallet_usage() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillWalletUsageSpecifics* release_autofill_wallet_usage();
  ::sync_pb::AutofillWalletUsageSpecifics* mutable_autofill_wallet_usage();
  void set_allocated_autofill_wallet_usage(::sync_pb::AutofillWalletUsageSpecifics* autofill_wallet_usage);
  private:
  const ::sync_pb::AutofillWalletUsageSpecifics& _internal_autofill_wallet_usage() const;
  ::sync_pb::AutofillWalletUsageSpecifics* _internal_mutable_autofill_wallet_usage();
  public:
  void unsafe_arena_set_allocated_autofill_wallet_usage(
      ::sync_pb::AutofillWalletUsageSpecifics* autofill_wallet_usage);
  ::sync_pb::AutofillWalletUsageSpecifics* unsafe_arena_release_autofill_wallet_usage();

  void clear_specifics_variant();
  SpecificsVariantCase specifics_variant_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.EntitySpecifics)
 private:
  class _Internal;
  void set_has_autofill();
  void set_has_bookmark();
  void set_has_preference();
  void set_has_typed_url();
  void set_has_theme();
  void set_has_app_notification();
  void set_has_password();
  void set_has_nigori();
  void set_has_extension();
  void set_has_app();
  void set_has_session();
  void set_has_autofill_profile();
  void set_has_search_engine();
  void set_has_extension_setting();
  void set_has_app_setting();
  void set_has_history_delete_directive();
  void set_has_synced_notification();
  void set_has_synced_notification_app_info();
  void set_has_device_info();
  void set_has_experiments();
  void set_has_priority_preference();
  void set_has_dictionary();
  void set_has_favicon_tracking();
  void set_has_favicon_image();
  void set_has_managed_user_setting();
  void set_has_managed_user();
  void set_has_managed_user_shared_setting();
  void set_has_app_list();
  void set_has_managed_user_allowlist();
  void set_has_autofill_wallet();
  void set_has_wallet_metadata();
  void set_has_arc_package();
  void set_has_printer();
  void set_has_reading_list();
  void set_has_user_event();
  void set_has_user_consent();
  void set_has_send_tab_to_self();
  void set_has_security_event();
  void set_has_web_app();
  void set_has_wifi_configuration();
  void set_has_os_preference();
  void set_has_os_priority_preference();
  void set_has_sharing_message();
  void set_has_autofill_offer();
  void set_has_workspace_desk();
  void set_has_webauthn_credential();
  void set_has_history();
  void set_has_printers_authorization_server();
  void set_has_saved_tab_group();
  void set_has_autofill_wallet_usage();

  inline bool has_specifics_variant() const;
  inline void clear_has_specifics_variant();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::EncryptedData* encrypted_;
  union SpecificsVariantUnion {
    constexpr SpecificsVariantUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::AutofillSpecifics* autofill_;
    ::sync_pb::BookmarkSpecifics* bookmark_;
    ::sync_pb::PreferenceSpecifics* preference_;
    ::sync_pb::TypedUrlSpecifics* typed_url_;
    ::sync_pb::ThemeSpecifics* theme_;
    ::sync_pb::AppNotification* app_notification_;
    ::sync_pb::PasswordSpecifics* password_;
    ::sync_pb::NigoriSpecifics* nigori_;
    ::sync_pb::ExtensionSpecifics* extension_;
    ::sync_pb::AppSpecifics* app_;
    ::sync_pb::SessionSpecifics* session_;
    ::sync_pb::AutofillProfileSpecifics* autofill_profile_;
    ::sync_pb::SearchEngineSpecifics* search_engine_;
    ::sync_pb::ExtensionSettingSpecifics* extension_setting_;
    ::sync_pb::AppSettingSpecifics* app_setting_;
    ::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive_;
    ::sync_pb::SyncedNotificationSpecifics* synced_notification_;
    ::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info_;
    ::sync_pb::DeviceInfoSpecifics* device_info_;
    ::sync_pb::ExperimentsSpecifics* experiments_;
    ::sync_pb::PriorityPreferenceSpecifics* priority_preference_;
    ::sync_pb::DictionarySpecifics* dictionary_;
    ::sync_pb::FaviconTrackingSpecifics* favicon_tracking_;
    ::sync_pb::FaviconImageSpecifics* favicon_image_;
    ::sync_pb::ManagedUserSettingSpecifics* managed_user_setting_;
    ::sync_pb::ManagedUserSpecifics* managed_user_;
    ::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting_;
    ::sync_pb::AppListSpecifics* app_list_;
    ::sync_pb::EmptySpecifics* managed_user_allowlist_;
    ::sync_pb::AutofillWalletSpecifics* autofill_wallet_;
    ::sync_pb::WalletMetadataSpecifics* wallet_metadata_;
    ::sync_pb::ArcPackageSpecifics* arc_package_;
    ::sync_pb::PrinterSpecifics* printer_;
    ::sync_pb::ReadingListSpecifics* reading_list_;
    ::sync_pb::UserEventSpecifics* user_event_;
    ::sync_pb::UserConsentSpecifics* user_consent_;
    ::sync_pb::SendTabToSelfSpecifics* send_tab_to_self_;
    ::sync_pb::SecurityEventSpecifics* security_event_;
    ::sync_pb::WebAppSpecifics* web_app_;
    ::sync_pb::WifiConfigurationSpecifics* wifi_configuration_;
    ::sync_pb::OsPreferenceSpecifics* os_preference_;
    ::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference_;
    ::sync_pb::SharingMessageSpecifics* sharing_message_;
    ::sync_pb::AutofillOfferSpecifics* autofill_offer_;
    ::sync_pb::WorkspaceDeskSpecifics* workspace_desk_;
    ::sync_pb::WebauthnCredentialSpecifics* webauthn_credential_;
    ::sync_pb::HistorySpecifics* history_;
    ::sync_pb::PrintersAuthorizationServerSpecifics* printers_authorization_server_;
    ::sync_pb::SavedTabGroupSpecifics* saved_tab_group_;
    ::sync_pb::AutofillWalletUsageSpecifics* autofill_wallet_usage_;
  } specifics_variant_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fentity_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class EmptySpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.EmptySpecifics) */ {
 public:
  inline EmptySpecifics() : EmptySpecifics(nullptr) {}
  ~EmptySpecifics() override;
  explicit PROTOBUF_CONSTEXPR EmptySpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptySpecifics(const EmptySpecifics& from);
  EmptySpecifics(EmptySpecifics&& from) noexcept
    : EmptySpecifics() {
    *this = ::std::move(from);
  }

  inline EmptySpecifics& operator=(const EmptySpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptySpecifics& operator=(EmptySpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EmptySpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptySpecifics* internal_default_instance() {
    return reinterpret_cast<const EmptySpecifics*>(
               &_EmptySpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmptySpecifics& a, EmptySpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EmptySpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptySpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptySpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptySpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EmptySpecifics& from);
  void MergeFrom(const EmptySpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmptySpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.EmptySpecifics";
  }
  protected:
  explicit EmptySpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.EmptySpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fentity_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntitySpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
inline bool EntitySpecifics::_internal_has_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || encrypted_ != nullptr);
  return value;
}
inline bool EntitySpecifics::has_encrypted() const {
  return _internal_has_encrypted();
}
inline const ::sync_pb::EncryptedData& EntitySpecifics::_internal_encrypted() const {
  const ::sync_pb::EncryptedData* p = encrypted_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::EncryptedData&>(
      ::sync_pb::_EncryptedData_default_instance_);
}
inline const ::sync_pb::EncryptedData& EntitySpecifics::encrypted() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.encrypted)
  return _internal_encrypted();
}
inline void EntitySpecifics::unsafe_arena_set_allocated_encrypted(
    ::sync_pb::EncryptedData* encrypted) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_);
  }
  encrypted_ = encrypted;
  if (encrypted) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.encrypted)
}
inline ::sync_pb::EncryptedData* EntitySpecifics::release_encrypted() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::EncryptedData* EntitySpecifics::unsafe_arena_release_encrypted() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.encrypted)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = nullptr;
  return temp;
}
inline ::sync_pb::EncryptedData* EntitySpecifics::_internal_mutable_encrypted() {
  _has_bits_[0] |= 0x00000001u;
  if (encrypted_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EncryptedData>(GetArenaForAllocation());
    encrypted_ = p;
  }
  return encrypted_;
}
inline ::sync_pb::EncryptedData* EntitySpecifics::mutable_encrypted() {
  ::sync_pb::EncryptedData* _msg = _internal_mutable_encrypted();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.encrypted)
  return _msg;
}
inline void EntitySpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_);
  }
  if (encrypted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted));
    if (message_arena != submessage_arena) {
      encrypted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_ = encrypted;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.encrypted)
}

// .sync_pb.AutofillSpecifics autofill = 31729;
inline bool EntitySpecifics::_internal_has_autofill() const {
  return specifics_variant_case() == kAutofill;
}
inline bool EntitySpecifics::has_autofill() const {
  return _internal_has_autofill();
}
inline void EntitySpecifics::set_has_autofill() {
  _oneof_case_[0] = kAutofill;
}
inline ::sync_pb::AutofillSpecifics* EntitySpecifics::release_autofill() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill)
  if (_internal_has_autofill()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillSpecifics* temp = specifics_variant_.autofill_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.autofill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillSpecifics& EntitySpecifics::_internal_autofill() const {
  return _internal_has_autofill()
      ? *specifics_variant_.autofill_
      : reinterpret_cast< ::sync_pb::AutofillSpecifics&>(::sync_pb::_AutofillSpecifics_default_instance_);
}
inline const ::sync_pb::AutofillSpecifics& EntitySpecifics::autofill() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill)
  return _internal_autofill();
}
inline ::sync_pb::AutofillSpecifics* EntitySpecifics::unsafe_arena_release_autofill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.autofill)
  if (_internal_has_autofill()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillSpecifics* temp = specifics_variant_.autofill_;
    specifics_variant_.autofill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_autofill(::sync_pb::AutofillSpecifics* autofill) {
  clear_specifics_variant();
  if (autofill) {
    set_has_autofill();
    specifics_variant_.autofill_ = autofill;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.autofill)
}
inline ::sync_pb::AutofillSpecifics* EntitySpecifics::_internal_mutable_autofill() {
  if (!_internal_has_autofill()) {
    clear_specifics_variant();
    set_has_autofill();
    specifics_variant_.autofill_ = CreateMaybeMessage< ::sync_pb::AutofillSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.autofill_;
}
inline ::sync_pb::AutofillSpecifics* EntitySpecifics::mutable_autofill() {
  ::sync_pb::AutofillSpecifics* _msg = _internal_mutable_autofill();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill)
  return _msg;
}

// .sync_pb.BookmarkSpecifics bookmark = 32904;
inline bool EntitySpecifics::_internal_has_bookmark() const {
  return specifics_variant_case() == kBookmark;
}
inline bool EntitySpecifics::has_bookmark() const {
  return _internal_has_bookmark();
}
inline void EntitySpecifics::set_has_bookmark() {
  _oneof_case_[0] = kBookmark;
}
inline ::sync_pb::BookmarkSpecifics* EntitySpecifics::release_bookmark() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.bookmark)
  if (_internal_has_bookmark()) {
    clear_has_specifics_variant();
    ::sync_pb::BookmarkSpecifics* temp = specifics_variant_.bookmark_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.bookmark_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::BookmarkSpecifics& EntitySpecifics::_internal_bookmark() const {
  return _internal_has_bookmark()
      ? *specifics_variant_.bookmark_
      : reinterpret_cast< ::sync_pb::BookmarkSpecifics&>(::sync_pb::_BookmarkSpecifics_default_instance_);
}
inline const ::sync_pb::BookmarkSpecifics& EntitySpecifics::bookmark() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.bookmark)
  return _internal_bookmark();
}
inline ::sync_pb::BookmarkSpecifics* EntitySpecifics::unsafe_arena_release_bookmark() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.bookmark)
  if (_internal_has_bookmark()) {
    clear_has_specifics_variant();
    ::sync_pb::BookmarkSpecifics* temp = specifics_variant_.bookmark_;
    specifics_variant_.bookmark_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_bookmark(::sync_pb::BookmarkSpecifics* bookmark) {
  clear_specifics_variant();
  if (bookmark) {
    set_has_bookmark();
    specifics_variant_.bookmark_ = bookmark;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.bookmark)
}
inline ::sync_pb::BookmarkSpecifics* EntitySpecifics::_internal_mutable_bookmark() {
  if (!_internal_has_bookmark()) {
    clear_specifics_variant();
    set_has_bookmark();
    specifics_variant_.bookmark_ = CreateMaybeMessage< ::sync_pb::BookmarkSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.bookmark_;
}
inline ::sync_pb::BookmarkSpecifics* EntitySpecifics::mutable_bookmark() {
  ::sync_pb::BookmarkSpecifics* _msg = _internal_mutable_bookmark();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.bookmark)
  return _msg;
}

// .sync_pb.PreferenceSpecifics preference = 37702;
inline bool EntitySpecifics::_internal_has_preference() const {
  return specifics_variant_case() == kPreference;
}
inline bool EntitySpecifics::has_preference() const {
  return _internal_has_preference();
}
inline void EntitySpecifics::set_has_preference() {
  _oneof_case_[0] = kPreference;
}
inline ::sync_pb::PreferenceSpecifics* EntitySpecifics::release_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.preference)
  if (_internal_has_preference()) {
    clear_has_specifics_variant();
    ::sync_pb::PreferenceSpecifics* temp = specifics_variant_.preference_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PreferenceSpecifics& EntitySpecifics::_internal_preference() const {
  return _internal_has_preference()
      ? *specifics_variant_.preference_
      : reinterpret_cast< ::sync_pb::PreferenceSpecifics&>(::sync_pb::_PreferenceSpecifics_default_instance_);
}
inline const ::sync_pb::PreferenceSpecifics& EntitySpecifics::preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.preference)
  return _internal_preference();
}
inline ::sync_pb::PreferenceSpecifics* EntitySpecifics::unsafe_arena_release_preference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.preference)
  if (_internal_has_preference()) {
    clear_has_specifics_variant();
    ::sync_pb::PreferenceSpecifics* temp = specifics_variant_.preference_;
    specifics_variant_.preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_preference(::sync_pb::PreferenceSpecifics* preference) {
  clear_specifics_variant();
  if (preference) {
    set_has_preference();
    specifics_variant_.preference_ = preference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.preference)
}
inline ::sync_pb::PreferenceSpecifics* EntitySpecifics::_internal_mutable_preference() {
  if (!_internal_has_preference()) {
    clear_specifics_variant();
    set_has_preference();
    specifics_variant_.preference_ = CreateMaybeMessage< ::sync_pb::PreferenceSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.preference_;
}
inline ::sync_pb::PreferenceSpecifics* EntitySpecifics::mutable_preference() {
  ::sync_pb::PreferenceSpecifics* _msg = _internal_mutable_preference();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.preference)
  return _msg;
}

// .sync_pb.TypedUrlSpecifics typed_url = 40781;
inline bool EntitySpecifics::_internal_has_typed_url() const {
  return specifics_variant_case() == kTypedUrl;
}
inline bool EntitySpecifics::has_typed_url() const {
  return _internal_has_typed_url();
}
inline void EntitySpecifics::set_has_typed_url() {
  _oneof_case_[0] = kTypedUrl;
}
inline ::sync_pb::TypedUrlSpecifics* EntitySpecifics::release_typed_url() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.typed_url)
  if (_internal_has_typed_url()) {
    clear_has_specifics_variant();
    ::sync_pb::TypedUrlSpecifics* temp = specifics_variant_.typed_url_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.typed_url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::TypedUrlSpecifics& EntitySpecifics::_internal_typed_url() const {
  return _internal_has_typed_url()
      ? *specifics_variant_.typed_url_
      : reinterpret_cast< ::sync_pb::TypedUrlSpecifics&>(::sync_pb::_TypedUrlSpecifics_default_instance_);
}
inline const ::sync_pb::TypedUrlSpecifics& EntitySpecifics::typed_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.typed_url)
  return _internal_typed_url();
}
inline ::sync_pb::TypedUrlSpecifics* EntitySpecifics::unsafe_arena_release_typed_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.typed_url)
  if (_internal_has_typed_url()) {
    clear_has_specifics_variant();
    ::sync_pb::TypedUrlSpecifics* temp = specifics_variant_.typed_url_;
    specifics_variant_.typed_url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_typed_url(::sync_pb::TypedUrlSpecifics* typed_url) {
  clear_specifics_variant();
  if (typed_url) {
    set_has_typed_url();
    specifics_variant_.typed_url_ = typed_url;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.typed_url)
}
inline ::sync_pb::TypedUrlSpecifics* EntitySpecifics::_internal_mutable_typed_url() {
  if (!_internal_has_typed_url()) {
    clear_specifics_variant();
    set_has_typed_url();
    specifics_variant_.typed_url_ = CreateMaybeMessage< ::sync_pb::TypedUrlSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.typed_url_;
}
inline ::sync_pb::TypedUrlSpecifics* EntitySpecifics::mutable_typed_url() {
  ::sync_pb::TypedUrlSpecifics* _msg = _internal_mutable_typed_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.typed_url)
  return _msg;
}

// .sync_pb.ThemeSpecifics theme = 41210;
inline bool EntitySpecifics::_internal_has_theme() const {
  return specifics_variant_case() == kTheme;
}
inline bool EntitySpecifics::has_theme() const {
  return _internal_has_theme();
}
inline void EntitySpecifics::set_has_theme() {
  _oneof_case_[0] = kTheme;
}
inline ::sync_pb::ThemeSpecifics* EntitySpecifics::release_theme() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.theme)
  if (_internal_has_theme()) {
    clear_has_specifics_variant();
    ::sync_pb::ThemeSpecifics* temp = specifics_variant_.theme_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.theme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ThemeSpecifics& EntitySpecifics::_internal_theme() const {
  return _internal_has_theme()
      ? *specifics_variant_.theme_
      : reinterpret_cast< ::sync_pb::ThemeSpecifics&>(::sync_pb::_ThemeSpecifics_default_instance_);
}
inline const ::sync_pb::ThemeSpecifics& EntitySpecifics::theme() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.theme)
  return _internal_theme();
}
inline ::sync_pb::ThemeSpecifics* EntitySpecifics::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.theme)
  if (_internal_has_theme()) {
    clear_has_specifics_variant();
    ::sync_pb::ThemeSpecifics* temp = specifics_variant_.theme_;
    specifics_variant_.theme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_theme(::sync_pb::ThemeSpecifics* theme) {
  clear_specifics_variant();
  if (theme) {
    set_has_theme();
    specifics_variant_.theme_ = theme;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.theme)
}
inline ::sync_pb::ThemeSpecifics* EntitySpecifics::_internal_mutable_theme() {
  if (!_internal_has_theme()) {
    clear_specifics_variant();
    set_has_theme();
    specifics_variant_.theme_ = CreateMaybeMessage< ::sync_pb::ThemeSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.theme_;
}
inline ::sync_pb::ThemeSpecifics* EntitySpecifics::mutable_theme() {
  ::sync_pb::ThemeSpecifics* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.theme)
  return _msg;
}

// .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
inline bool EntitySpecifics::_internal_has_app_notification() const {
  return specifics_variant_case() == kAppNotification;
}
inline bool EntitySpecifics::has_app_notification() const {
  return _internal_has_app_notification();
}
inline void EntitySpecifics::set_has_app_notification() {
  _oneof_case_[0] = kAppNotification;
}
inline ::sync_pb::AppNotification* EntitySpecifics::release_app_notification() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_notification)
  if (_internal_has_app_notification()) {
    clear_has_specifics_variant();
    ::sync_pb::AppNotification* temp = specifics_variant_.app_notification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.app_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AppNotification& EntitySpecifics::_internal_app_notification() const {
  return _internal_has_app_notification()
      ? *specifics_variant_.app_notification_
      : reinterpret_cast< ::sync_pb::AppNotification&>(::sync_pb::_AppNotification_default_instance_);
}
inline const ::sync_pb::AppNotification& EntitySpecifics::app_notification() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_notification)
  return _internal_app_notification();
}
inline ::sync_pb::AppNotification* EntitySpecifics::unsafe_arena_release_app_notification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.app_notification)
  if (_internal_has_app_notification()) {
    clear_has_specifics_variant();
    ::sync_pb::AppNotification* temp = specifics_variant_.app_notification_;
    specifics_variant_.app_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_app_notification(::sync_pb::AppNotification* app_notification) {
  clear_specifics_variant();
  if (app_notification) {
    set_has_app_notification();
    specifics_variant_.app_notification_ = app_notification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.app_notification)
}
inline ::sync_pb::AppNotification* EntitySpecifics::_internal_mutable_app_notification() {
  if (!_internal_has_app_notification()) {
    clear_specifics_variant();
    set_has_app_notification();
    specifics_variant_.app_notification_ = CreateMaybeMessage< ::sync_pb::AppNotification >(GetArenaForAllocation());
  }
  return specifics_variant_.app_notification_;
}
inline ::sync_pb::AppNotification* EntitySpecifics::mutable_app_notification() {
  ::sync_pb::AppNotification* _msg = _internal_mutable_app_notification();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_notification)
  return _msg;
}

// .sync_pb.PasswordSpecifics password = 45873;
inline bool EntitySpecifics::_internal_has_password() const {
  return specifics_variant_case() == kPassword;
}
inline bool EntitySpecifics::has_password() const {
  return _internal_has_password();
}
inline void EntitySpecifics::set_has_password() {
  _oneof_case_[0] = kPassword;
}
inline ::sync_pb::PasswordSpecifics* EntitySpecifics::release_password() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.password)
  if (_internal_has_password()) {
    clear_has_specifics_variant();
    ::sync_pb::PasswordSpecifics* temp = specifics_variant_.password_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PasswordSpecifics& EntitySpecifics::_internal_password() const {
  return _internal_has_password()
      ? *specifics_variant_.password_
      : reinterpret_cast< ::sync_pb::PasswordSpecifics&>(::sync_pb::_PasswordSpecifics_default_instance_);
}
inline const ::sync_pb::PasswordSpecifics& EntitySpecifics::password() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.password)
  return _internal_password();
}
inline ::sync_pb::PasswordSpecifics* EntitySpecifics::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.password)
  if (_internal_has_password()) {
    clear_has_specifics_variant();
    ::sync_pb::PasswordSpecifics* temp = specifics_variant_.password_;
    specifics_variant_.password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_password(::sync_pb::PasswordSpecifics* password) {
  clear_specifics_variant();
  if (password) {
    set_has_password();
    specifics_variant_.password_ = password;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.password)
}
inline ::sync_pb::PasswordSpecifics* EntitySpecifics::_internal_mutable_password() {
  if (!_internal_has_password()) {
    clear_specifics_variant();
    set_has_password();
    specifics_variant_.password_ = CreateMaybeMessage< ::sync_pb::PasswordSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.password_;
}
inline ::sync_pb::PasswordSpecifics* EntitySpecifics::mutable_password() {
  ::sync_pb::PasswordSpecifics* _msg = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.password)
  return _msg;
}

// .sync_pb.NigoriSpecifics nigori = 47745;
inline bool EntitySpecifics::_internal_has_nigori() const {
  return specifics_variant_case() == kNigori;
}
inline bool EntitySpecifics::has_nigori() const {
  return _internal_has_nigori();
}
inline void EntitySpecifics::set_has_nigori() {
  _oneof_case_[0] = kNigori;
}
inline ::sync_pb::NigoriSpecifics* EntitySpecifics::release_nigori() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.nigori)
  if (_internal_has_nigori()) {
    clear_has_specifics_variant();
    ::sync_pb::NigoriSpecifics* temp = specifics_variant_.nigori_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.nigori_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::NigoriSpecifics& EntitySpecifics::_internal_nigori() const {
  return _internal_has_nigori()
      ? *specifics_variant_.nigori_
      : reinterpret_cast< ::sync_pb::NigoriSpecifics&>(::sync_pb::_NigoriSpecifics_default_instance_);
}
inline const ::sync_pb::NigoriSpecifics& EntitySpecifics::nigori() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.nigori)
  return _internal_nigori();
}
inline ::sync_pb::NigoriSpecifics* EntitySpecifics::unsafe_arena_release_nigori() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.nigori)
  if (_internal_has_nigori()) {
    clear_has_specifics_variant();
    ::sync_pb::NigoriSpecifics* temp = specifics_variant_.nigori_;
    specifics_variant_.nigori_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_nigori(::sync_pb::NigoriSpecifics* nigori) {
  clear_specifics_variant();
  if (nigori) {
    set_has_nigori();
    specifics_variant_.nigori_ = nigori;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.nigori)
}
inline ::sync_pb::NigoriSpecifics* EntitySpecifics::_internal_mutable_nigori() {
  if (!_internal_has_nigori()) {
    clear_specifics_variant();
    set_has_nigori();
    specifics_variant_.nigori_ = CreateMaybeMessage< ::sync_pb::NigoriSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.nigori_;
}
inline ::sync_pb::NigoriSpecifics* EntitySpecifics::mutable_nigori() {
  ::sync_pb::NigoriSpecifics* _msg = _internal_mutable_nigori();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.nigori)
  return _msg;
}

// .sync_pb.ExtensionSpecifics extension = 48119;
inline bool EntitySpecifics::_internal_has_extension() const {
  return specifics_variant_case() == kExtension;
}
inline bool EntitySpecifics::has_extension() const {
  return _internal_has_extension();
}
inline void EntitySpecifics::set_has_extension() {
  _oneof_case_[0] = kExtension;
}
inline ::sync_pb::ExtensionSpecifics* EntitySpecifics::release_extension() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.extension)
  if (_internal_has_extension()) {
    clear_has_specifics_variant();
    ::sync_pb::ExtensionSpecifics* temp = specifics_variant_.extension_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ExtensionSpecifics& EntitySpecifics::_internal_extension() const {
  return _internal_has_extension()
      ? *specifics_variant_.extension_
      : reinterpret_cast< ::sync_pb::ExtensionSpecifics&>(::sync_pb::_ExtensionSpecifics_default_instance_);
}
inline const ::sync_pb::ExtensionSpecifics& EntitySpecifics::extension() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.extension)
  return _internal_extension();
}
inline ::sync_pb::ExtensionSpecifics* EntitySpecifics::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.extension)
  if (_internal_has_extension()) {
    clear_has_specifics_variant();
    ::sync_pb::ExtensionSpecifics* temp = specifics_variant_.extension_;
    specifics_variant_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_extension(::sync_pb::ExtensionSpecifics* extension) {
  clear_specifics_variant();
  if (extension) {
    set_has_extension();
    specifics_variant_.extension_ = extension;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.extension)
}
inline ::sync_pb::ExtensionSpecifics* EntitySpecifics::_internal_mutable_extension() {
  if (!_internal_has_extension()) {
    clear_specifics_variant();
    set_has_extension();
    specifics_variant_.extension_ = CreateMaybeMessage< ::sync_pb::ExtensionSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.extension_;
}
inline ::sync_pb::ExtensionSpecifics* EntitySpecifics::mutable_extension() {
  ::sync_pb::ExtensionSpecifics* _msg = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.extension)
  return _msg;
}

// .sync_pb.AppSpecifics app = 48364;
inline bool EntitySpecifics::_internal_has_app() const {
  return specifics_variant_case() == kApp;
}
inline bool EntitySpecifics::has_app() const {
  return _internal_has_app();
}
inline void EntitySpecifics::set_has_app() {
  _oneof_case_[0] = kApp;
}
inline ::sync_pb::AppSpecifics* EntitySpecifics::release_app() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app)
  if (_internal_has_app()) {
    clear_has_specifics_variant();
    ::sync_pb::AppSpecifics* temp = specifics_variant_.app_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AppSpecifics& EntitySpecifics::_internal_app() const {
  return _internal_has_app()
      ? *specifics_variant_.app_
      : reinterpret_cast< ::sync_pb::AppSpecifics&>(::sync_pb::_AppSpecifics_default_instance_);
}
inline const ::sync_pb::AppSpecifics& EntitySpecifics::app() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app)
  return _internal_app();
}
inline ::sync_pb::AppSpecifics* EntitySpecifics::unsafe_arena_release_app() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.app)
  if (_internal_has_app()) {
    clear_has_specifics_variant();
    ::sync_pb::AppSpecifics* temp = specifics_variant_.app_;
    specifics_variant_.app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_app(::sync_pb::AppSpecifics* app) {
  clear_specifics_variant();
  if (app) {
    set_has_app();
    specifics_variant_.app_ = app;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.app)
}
inline ::sync_pb::AppSpecifics* EntitySpecifics::_internal_mutable_app() {
  if (!_internal_has_app()) {
    clear_specifics_variant();
    set_has_app();
    specifics_variant_.app_ = CreateMaybeMessage< ::sync_pb::AppSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.app_;
}
inline ::sync_pb::AppSpecifics* EntitySpecifics::mutable_app() {
  ::sync_pb::AppSpecifics* _msg = _internal_mutable_app();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app)
  return _msg;
}

// .sync_pb.SessionSpecifics session = 50119;
inline bool EntitySpecifics::_internal_has_session() const {
  return specifics_variant_case() == kSession;
}
inline bool EntitySpecifics::has_session() const {
  return _internal_has_session();
}
inline void EntitySpecifics::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline ::sync_pb::SessionSpecifics* EntitySpecifics::release_session() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.session)
  if (_internal_has_session()) {
    clear_has_specifics_variant();
    ::sync_pb::SessionSpecifics* temp = specifics_variant_.session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SessionSpecifics& EntitySpecifics::_internal_session() const {
  return _internal_has_session()
      ? *specifics_variant_.session_
      : reinterpret_cast< ::sync_pb::SessionSpecifics&>(::sync_pb::_SessionSpecifics_default_instance_);
}
inline const ::sync_pb::SessionSpecifics& EntitySpecifics::session() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.session)
  return _internal_session();
}
inline ::sync_pb::SessionSpecifics* EntitySpecifics::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.session)
  if (_internal_has_session()) {
    clear_has_specifics_variant();
    ::sync_pb::SessionSpecifics* temp = specifics_variant_.session_;
    specifics_variant_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_session(::sync_pb::SessionSpecifics* session) {
  clear_specifics_variant();
  if (session) {
    set_has_session();
    specifics_variant_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.session)
}
inline ::sync_pb::SessionSpecifics* EntitySpecifics::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_specifics_variant();
    set_has_session();
    specifics_variant_.session_ = CreateMaybeMessage< ::sync_pb::SessionSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.session_;
}
inline ::sync_pb::SessionSpecifics* EntitySpecifics::mutable_session() {
  ::sync_pb::SessionSpecifics* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.session)
  return _msg;
}

// .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
inline bool EntitySpecifics::_internal_has_autofill_profile() const {
  return specifics_variant_case() == kAutofillProfile;
}
inline bool EntitySpecifics::has_autofill_profile() const {
  return _internal_has_autofill_profile();
}
inline void EntitySpecifics::set_has_autofill_profile() {
  _oneof_case_[0] = kAutofillProfile;
}
inline ::sync_pb::AutofillProfileSpecifics* EntitySpecifics::release_autofill_profile() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill_profile)
  if (_internal_has_autofill_profile()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillProfileSpecifics* temp = specifics_variant_.autofill_profile_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.autofill_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillProfileSpecifics& EntitySpecifics::_internal_autofill_profile() const {
  return _internal_has_autofill_profile()
      ? *specifics_variant_.autofill_profile_
      : reinterpret_cast< ::sync_pb::AutofillProfileSpecifics&>(::sync_pb::_AutofillProfileSpecifics_default_instance_);
}
inline const ::sync_pb::AutofillProfileSpecifics& EntitySpecifics::autofill_profile() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill_profile)
  return _internal_autofill_profile();
}
inline ::sync_pb::AutofillProfileSpecifics* EntitySpecifics::unsafe_arena_release_autofill_profile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.autofill_profile)
  if (_internal_has_autofill_profile()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillProfileSpecifics* temp = specifics_variant_.autofill_profile_;
    specifics_variant_.autofill_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_autofill_profile(::sync_pb::AutofillProfileSpecifics* autofill_profile) {
  clear_specifics_variant();
  if (autofill_profile) {
    set_has_autofill_profile();
    specifics_variant_.autofill_profile_ = autofill_profile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.autofill_profile)
}
inline ::sync_pb::AutofillProfileSpecifics* EntitySpecifics::_internal_mutable_autofill_profile() {
  if (!_internal_has_autofill_profile()) {
    clear_specifics_variant();
    set_has_autofill_profile();
    specifics_variant_.autofill_profile_ = CreateMaybeMessage< ::sync_pb::AutofillProfileSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.autofill_profile_;
}
inline ::sync_pb::AutofillProfileSpecifics* EntitySpecifics::mutable_autofill_profile() {
  ::sync_pb::AutofillProfileSpecifics* _msg = _internal_mutable_autofill_profile();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill_profile)
  return _msg;
}

// .sync_pb.SearchEngineSpecifics search_engine = 88610;
inline bool EntitySpecifics::_internal_has_search_engine() const {
  return specifics_variant_case() == kSearchEngine;
}
inline bool EntitySpecifics::has_search_engine() const {
  return _internal_has_search_engine();
}
inline void EntitySpecifics::set_has_search_engine() {
  _oneof_case_[0] = kSearchEngine;
}
inline ::sync_pb::SearchEngineSpecifics* EntitySpecifics::release_search_engine() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.search_engine)
  if (_internal_has_search_engine()) {
    clear_has_specifics_variant();
    ::sync_pb::SearchEngineSpecifics* temp = specifics_variant_.search_engine_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.search_engine_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SearchEngineSpecifics& EntitySpecifics::_internal_search_engine() const {
  return _internal_has_search_engine()
      ? *specifics_variant_.search_engine_
      : reinterpret_cast< ::sync_pb::SearchEngineSpecifics&>(::sync_pb::_SearchEngineSpecifics_default_instance_);
}
inline const ::sync_pb::SearchEngineSpecifics& EntitySpecifics::search_engine() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.search_engine)
  return _internal_search_engine();
}
inline ::sync_pb::SearchEngineSpecifics* EntitySpecifics::unsafe_arena_release_search_engine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.search_engine)
  if (_internal_has_search_engine()) {
    clear_has_specifics_variant();
    ::sync_pb::SearchEngineSpecifics* temp = specifics_variant_.search_engine_;
    specifics_variant_.search_engine_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_search_engine(::sync_pb::SearchEngineSpecifics* search_engine) {
  clear_specifics_variant();
  if (search_engine) {
    set_has_search_engine();
    specifics_variant_.search_engine_ = search_engine;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.search_engine)
}
inline ::sync_pb::SearchEngineSpecifics* EntitySpecifics::_internal_mutable_search_engine() {
  if (!_internal_has_search_engine()) {
    clear_specifics_variant();
    set_has_search_engine();
    specifics_variant_.search_engine_ = CreateMaybeMessage< ::sync_pb::SearchEngineSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.search_engine_;
}
inline ::sync_pb::SearchEngineSpecifics* EntitySpecifics::mutable_search_engine() {
  ::sync_pb::SearchEngineSpecifics* _msg = _internal_mutable_search_engine();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.search_engine)
  return _msg;
}

// .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
inline bool EntitySpecifics::_internal_has_extension_setting() const {
  return specifics_variant_case() == kExtensionSetting;
}
inline bool EntitySpecifics::has_extension_setting() const {
  return _internal_has_extension_setting();
}
inline void EntitySpecifics::set_has_extension_setting() {
  _oneof_case_[0] = kExtensionSetting;
}
inline ::sync_pb::ExtensionSettingSpecifics* EntitySpecifics::release_extension_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.extension_setting)
  if (_internal_has_extension_setting()) {
    clear_has_specifics_variant();
    ::sync_pb::ExtensionSettingSpecifics* temp = specifics_variant_.extension_setting_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.extension_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ExtensionSettingSpecifics& EntitySpecifics::_internal_extension_setting() const {
  return _internal_has_extension_setting()
      ? *specifics_variant_.extension_setting_
      : reinterpret_cast< ::sync_pb::ExtensionSettingSpecifics&>(::sync_pb::_ExtensionSettingSpecifics_default_instance_);
}
inline const ::sync_pb::ExtensionSettingSpecifics& EntitySpecifics::extension_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.extension_setting)
  return _internal_extension_setting();
}
inline ::sync_pb::ExtensionSettingSpecifics* EntitySpecifics::unsafe_arena_release_extension_setting() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.extension_setting)
  if (_internal_has_extension_setting()) {
    clear_has_specifics_variant();
    ::sync_pb::ExtensionSettingSpecifics* temp = specifics_variant_.extension_setting_;
    specifics_variant_.extension_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_extension_setting(::sync_pb::ExtensionSettingSpecifics* extension_setting) {
  clear_specifics_variant();
  if (extension_setting) {
    set_has_extension_setting();
    specifics_variant_.extension_setting_ = extension_setting;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.extension_setting)
}
inline ::sync_pb::ExtensionSettingSpecifics* EntitySpecifics::_internal_mutable_extension_setting() {
  if (!_internal_has_extension_setting()) {
    clear_specifics_variant();
    set_has_extension_setting();
    specifics_variant_.extension_setting_ = CreateMaybeMessage< ::sync_pb::ExtensionSettingSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.extension_setting_;
}
inline ::sync_pb::ExtensionSettingSpecifics* EntitySpecifics::mutable_extension_setting() {
  ::sync_pb::ExtensionSettingSpecifics* _msg = _internal_mutable_extension_setting();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.extension_setting)
  return _msg;
}

// .sync_pb.AppSettingSpecifics app_setting = 103656;
inline bool EntitySpecifics::_internal_has_app_setting() const {
  return specifics_variant_case() == kAppSetting;
}
inline bool EntitySpecifics::has_app_setting() const {
  return _internal_has_app_setting();
}
inline void EntitySpecifics::set_has_app_setting() {
  _oneof_case_[0] = kAppSetting;
}
inline ::sync_pb::AppSettingSpecifics* EntitySpecifics::release_app_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_setting)
  if (_internal_has_app_setting()) {
    clear_has_specifics_variant();
    ::sync_pb::AppSettingSpecifics* temp = specifics_variant_.app_setting_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.app_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AppSettingSpecifics& EntitySpecifics::_internal_app_setting() const {
  return _internal_has_app_setting()
      ? *specifics_variant_.app_setting_
      : reinterpret_cast< ::sync_pb::AppSettingSpecifics&>(::sync_pb::_AppSettingSpecifics_default_instance_);
}
inline const ::sync_pb::AppSettingSpecifics& EntitySpecifics::app_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_setting)
  return _internal_app_setting();
}
inline ::sync_pb::AppSettingSpecifics* EntitySpecifics::unsafe_arena_release_app_setting() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.app_setting)
  if (_internal_has_app_setting()) {
    clear_has_specifics_variant();
    ::sync_pb::AppSettingSpecifics* temp = specifics_variant_.app_setting_;
    specifics_variant_.app_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_app_setting(::sync_pb::AppSettingSpecifics* app_setting) {
  clear_specifics_variant();
  if (app_setting) {
    set_has_app_setting();
    specifics_variant_.app_setting_ = app_setting;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.app_setting)
}
inline ::sync_pb::AppSettingSpecifics* EntitySpecifics::_internal_mutable_app_setting() {
  if (!_internal_has_app_setting()) {
    clear_specifics_variant();
    set_has_app_setting();
    specifics_variant_.app_setting_ = CreateMaybeMessage< ::sync_pb::AppSettingSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.app_setting_;
}
inline ::sync_pb::AppSettingSpecifics* EntitySpecifics::mutable_app_setting() {
  ::sync_pb::AppSettingSpecifics* _msg = _internal_mutable_app_setting();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_setting)
  return _msg;
}

// .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
inline bool EntitySpecifics::_internal_has_history_delete_directive() const {
  return specifics_variant_case() == kHistoryDeleteDirective;
}
inline bool EntitySpecifics::has_history_delete_directive() const {
  return _internal_has_history_delete_directive();
}
inline void EntitySpecifics::set_has_history_delete_directive() {
  _oneof_case_[0] = kHistoryDeleteDirective;
}
inline ::sync_pb::HistoryDeleteDirectiveSpecifics* EntitySpecifics::release_history_delete_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.history_delete_directive)
  if (_internal_has_history_delete_directive()) {
    clear_has_specifics_variant();
    ::sync_pb::HistoryDeleteDirectiveSpecifics* temp = specifics_variant_.history_delete_directive_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.history_delete_directive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::HistoryDeleteDirectiveSpecifics& EntitySpecifics::_internal_history_delete_directive() const {
  return _internal_has_history_delete_directive()
      ? *specifics_variant_.history_delete_directive_
      : reinterpret_cast< ::sync_pb::HistoryDeleteDirectiveSpecifics&>(::sync_pb::_HistoryDeleteDirectiveSpecifics_default_instance_);
}
inline const ::sync_pb::HistoryDeleteDirectiveSpecifics& EntitySpecifics::history_delete_directive() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.history_delete_directive)
  return _internal_history_delete_directive();
}
inline ::sync_pb::HistoryDeleteDirectiveSpecifics* EntitySpecifics::unsafe_arena_release_history_delete_directive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.history_delete_directive)
  if (_internal_has_history_delete_directive()) {
    clear_has_specifics_variant();
    ::sync_pb::HistoryDeleteDirectiveSpecifics* temp = specifics_variant_.history_delete_directive_;
    specifics_variant_.history_delete_directive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_history_delete_directive(::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive) {
  clear_specifics_variant();
  if (history_delete_directive) {
    set_has_history_delete_directive();
    specifics_variant_.history_delete_directive_ = history_delete_directive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.history_delete_directive)
}
inline ::sync_pb::HistoryDeleteDirectiveSpecifics* EntitySpecifics::_internal_mutable_history_delete_directive() {
  if (!_internal_has_history_delete_directive()) {
    clear_specifics_variant();
    set_has_history_delete_directive();
    specifics_variant_.history_delete_directive_ = CreateMaybeMessage< ::sync_pb::HistoryDeleteDirectiveSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.history_delete_directive_;
}
inline ::sync_pb::HistoryDeleteDirectiveSpecifics* EntitySpecifics::mutable_history_delete_directive() {
  ::sync_pb::HistoryDeleteDirectiveSpecifics* _msg = _internal_mutable_history_delete_directive();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.history_delete_directive)
  return _msg;
}

// .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
inline bool EntitySpecifics::_internal_has_synced_notification() const {
  return specifics_variant_case() == kSyncedNotification;
}
inline bool EntitySpecifics::has_synced_notification() const {
  return _internal_has_synced_notification();
}
inline void EntitySpecifics::set_has_synced_notification() {
  _oneof_case_[0] = kSyncedNotification;
}
inline ::sync_pb::SyncedNotificationSpecifics* EntitySpecifics::release_synced_notification() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.synced_notification)
  if (_internal_has_synced_notification()) {
    clear_has_specifics_variant();
    ::sync_pb::SyncedNotificationSpecifics* temp = specifics_variant_.synced_notification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.synced_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SyncedNotificationSpecifics& EntitySpecifics::_internal_synced_notification() const {
  return _internal_has_synced_notification()
      ? *specifics_variant_.synced_notification_
      : reinterpret_cast< ::sync_pb::SyncedNotificationSpecifics&>(::sync_pb::_SyncedNotificationSpecifics_default_instance_);
}
inline const ::sync_pb::SyncedNotificationSpecifics& EntitySpecifics::synced_notification() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.synced_notification)
  return _internal_synced_notification();
}
inline ::sync_pb::SyncedNotificationSpecifics* EntitySpecifics::unsafe_arena_release_synced_notification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.synced_notification)
  if (_internal_has_synced_notification()) {
    clear_has_specifics_variant();
    ::sync_pb::SyncedNotificationSpecifics* temp = specifics_variant_.synced_notification_;
    specifics_variant_.synced_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_synced_notification(::sync_pb::SyncedNotificationSpecifics* synced_notification) {
  clear_specifics_variant();
  if (synced_notification) {
    set_has_synced_notification();
    specifics_variant_.synced_notification_ = synced_notification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.synced_notification)
}
inline ::sync_pb::SyncedNotificationSpecifics* EntitySpecifics::_internal_mutable_synced_notification() {
  if (!_internal_has_synced_notification()) {
    clear_specifics_variant();
    set_has_synced_notification();
    specifics_variant_.synced_notification_ = CreateMaybeMessage< ::sync_pb::SyncedNotificationSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.synced_notification_;
}
inline ::sync_pb::SyncedNotificationSpecifics* EntitySpecifics::mutable_synced_notification() {
  ::sync_pb::SyncedNotificationSpecifics* _msg = _internal_mutable_synced_notification();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.synced_notification)
  return _msg;
}

// .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
inline bool EntitySpecifics::_internal_has_synced_notification_app_info() const {
  return specifics_variant_case() == kSyncedNotificationAppInfo;
}
inline bool EntitySpecifics::has_synced_notification_app_info() const {
  return _internal_has_synced_notification_app_info();
}
inline void EntitySpecifics::set_has_synced_notification_app_info() {
  _oneof_case_[0] = kSyncedNotificationAppInfo;
}
inline ::sync_pb::SyncedNotificationAppInfoSpecifics* EntitySpecifics::release_synced_notification_app_info() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.synced_notification_app_info)
  if (_internal_has_synced_notification_app_info()) {
    clear_has_specifics_variant();
    ::sync_pb::SyncedNotificationAppInfoSpecifics* temp = specifics_variant_.synced_notification_app_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.synced_notification_app_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SyncedNotificationAppInfoSpecifics& EntitySpecifics::_internal_synced_notification_app_info() const {
  return _internal_has_synced_notification_app_info()
      ? *specifics_variant_.synced_notification_app_info_
      : reinterpret_cast< ::sync_pb::SyncedNotificationAppInfoSpecifics&>(::sync_pb::_SyncedNotificationAppInfoSpecifics_default_instance_);
}
inline const ::sync_pb::SyncedNotificationAppInfoSpecifics& EntitySpecifics::synced_notification_app_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.synced_notification_app_info)
  return _internal_synced_notification_app_info();
}
inline ::sync_pb::SyncedNotificationAppInfoSpecifics* EntitySpecifics::unsafe_arena_release_synced_notification_app_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.synced_notification_app_info)
  if (_internal_has_synced_notification_app_info()) {
    clear_has_specifics_variant();
    ::sync_pb::SyncedNotificationAppInfoSpecifics* temp = specifics_variant_.synced_notification_app_info_;
    specifics_variant_.synced_notification_app_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_synced_notification_app_info(::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info) {
  clear_specifics_variant();
  if (synced_notification_app_info) {
    set_has_synced_notification_app_info();
    specifics_variant_.synced_notification_app_info_ = synced_notification_app_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.synced_notification_app_info)
}
inline ::sync_pb::SyncedNotificationAppInfoSpecifics* EntitySpecifics::_internal_mutable_synced_notification_app_info() {
  if (!_internal_has_synced_notification_app_info()) {
    clear_specifics_variant();
    set_has_synced_notification_app_info();
    specifics_variant_.synced_notification_app_info_ = CreateMaybeMessage< ::sync_pb::SyncedNotificationAppInfoSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.synced_notification_app_info_;
}
inline ::sync_pb::SyncedNotificationAppInfoSpecifics* EntitySpecifics::mutable_synced_notification_app_info() {
  ::sync_pb::SyncedNotificationAppInfoSpecifics* _msg = _internal_mutable_synced_notification_app_info();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.synced_notification_app_info)
  return _msg;
}

// .sync_pb.DeviceInfoSpecifics device_info = 154522;
inline bool EntitySpecifics::_internal_has_device_info() const {
  return specifics_variant_case() == kDeviceInfo;
}
inline bool EntitySpecifics::has_device_info() const {
  return _internal_has_device_info();
}
inline void EntitySpecifics::set_has_device_info() {
  _oneof_case_[0] = kDeviceInfo;
}
inline ::sync_pb::DeviceInfoSpecifics* EntitySpecifics::release_device_info() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.device_info)
  if (_internal_has_device_info()) {
    clear_has_specifics_variant();
    ::sync_pb::DeviceInfoSpecifics* temp = specifics_variant_.device_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::DeviceInfoSpecifics& EntitySpecifics::_internal_device_info() const {
  return _internal_has_device_info()
      ? *specifics_variant_.device_info_
      : reinterpret_cast< ::sync_pb::DeviceInfoSpecifics&>(::sync_pb::_DeviceInfoSpecifics_default_instance_);
}
inline const ::sync_pb::DeviceInfoSpecifics& EntitySpecifics::device_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.device_info)
  return _internal_device_info();
}
inline ::sync_pb::DeviceInfoSpecifics* EntitySpecifics::unsafe_arena_release_device_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.device_info)
  if (_internal_has_device_info()) {
    clear_has_specifics_variant();
    ::sync_pb::DeviceInfoSpecifics* temp = specifics_variant_.device_info_;
    specifics_variant_.device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_device_info(::sync_pb::DeviceInfoSpecifics* device_info) {
  clear_specifics_variant();
  if (device_info) {
    set_has_device_info();
    specifics_variant_.device_info_ = device_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.device_info)
}
inline ::sync_pb::DeviceInfoSpecifics* EntitySpecifics::_internal_mutable_device_info() {
  if (!_internal_has_device_info()) {
    clear_specifics_variant();
    set_has_device_info();
    specifics_variant_.device_info_ = CreateMaybeMessage< ::sync_pb::DeviceInfoSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.device_info_;
}
inline ::sync_pb::DeviceInfoSpecifics* EntitySpecifics::mutable_device_info() {
  ::sync_pb::DeviceInfoSpecifics* _msg = _internal_mutable_device_info();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.device_info)
  return _msg;
}

// .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
inline bool EntitySpecifics::_internal_has_experiments() const {
  return specifics_variant_case() == kExperiments;
}
inline bool EntitySpecifics::has_experiments() const {
  return _internal_has_experiments();
}
inline void EntitySpecifics::set_has_experiments() {
  _oneof_case_[0] = kExperiments;
}
inline ::sync_pb::ExperimentsSpecifics* EntitySpecifics::release_experiments() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.experiments)
  if (_internal_has_experiments()) {
    clear_has_specifics_variant();
    ::sync_pb::ExperimentsSpecifics* temp = specifics_variant_.experiments_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.experiments_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ExperimentsSpecifics& EntitySpecifics::_internal_experiments() const {
  return _internal_has_experiments()
      ? *specifics_variant_.experiments_
      : reinterpret_cast< ::sync_pb::ExperimentsSpecifics&>(::sync_pb::_ExperimentsSpecifics_default_instance_);
}
inline const ::sync_pb::ExperimentsSpecifics& EntitySpecifics::experiments() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.experiments)
  return _internal_experiments();
}
inline ::sync_pb::ExperimentsSpecifics* EntitySpecifics::unsafe_arena_release_experiments() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.experiments)
  if (_internal_has_experiments()) {
    clear_has_specifics_variant();
    ::sync_pb::ExperimentsSpecifics* temp = specifics_variant_.experiments_;
    specifics_variant_.experiments_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_experiments(::sync_pb::ExperimentsSpecifics* experiments) {
  clear_specifics_variant();
  if (experiments) {
    set_has_experiments();
    specifics_variant_.experiments_ = experiments;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.experiments)
}
inline ::sync_pb::ExperimentsSpecifics* EntitySpecifics::_internal_mutable_experiments() {
  if (!_internal_has_experiments()) {
    clear_specifics_variant();
    set_has_experiments();
    specifics_variant_.experiments_ = CreateMaybeMessage< ::sync_pb::ExperimentsSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.experiments_;
}
inline ::sync_pb::ExperimentsSpecifics* EntitySpecifics::mutable_experiments() {
  ::sync_pb::ExperimentsSpecifics* _msg = _internal_mutable_experiments();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.experiments)
  return _msg;
}

// .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
inline bool EntitySpecifics::_internal_has_priority_preference() const {
  return specifics_variant_case() == kPriorityPreference;
}
inline bool EntitySpecifics::has_priority_preference() const {
  return _internal_has_priority_preference();
}
inline void EntitySpecifics::set_has_priority_preference() {
  _oneof_case_[0] = kPriorityPreference;
}
inline ::sync_pb::PriorityPreferenceSpecifics* EntitySpecifics::release_priority_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.priority_preference)
  if (_internal_has_priority_preference()) {
    clear_has_specifics_variant();
    ::sync_pb::PriorityPreferenceSpecifics* temp = specifics_variant_.priority_preference_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.priority_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PriorityPreferenceSpecifics& EntitySpecifics::_internal_priority_preference() const {
  return _internal_has_priority_preference()
      ? *specifics_variant_.priority_preference_
      : reinterpret_cast< ::sync_pb::PriorityPreferenceSpecifics&>(::sync_pb::_PriorityPreferenceSpecifics_default_instance_);
}
inline const ::sync_pb::PriorityPreferenceSpecifics& EntitySpecifics::priority_preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.priority_preference)
  return _internal_priority_preference();
}
inline ::sync_pb::PriorityPreferenceSpecifics* EntitySpecifics::unsafe_arena_release_priority_preference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.priority_preference)
  if (_internal_has_priority_preference()) {
    clear_has_specifics_variant();
    ::sync_pb::PriorityPreferenceSpecifics* temp = specifics_variant_.priority_preference_;
    specifics_variant_.priority_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_priority_preference(::sync_pb::PriorityPreferenceSpecifics* priority_preference) {
  clear_specifics_variant();
  if (priority_preference) {
    set_has_priority_preference();
    specifics_variant_.priority_preference_ = priority_preference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.priority_preference)
}
inline ::sync_pb::PriorityPreferenceSpecifics* EntitySpecifics::_internal_mutable_priority_preference() {
  if (!_internal_has_priority_preference()) {
    clear_specifics_variant();
    set_has_priority_preference();
    specifics_variant_.priority_preference_ = CreateMaybeMessage< ::sync_pb::PriorityPreferenceSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.priority_preference_;
}
inline ::sync_pb::PriorityPreferenceSpecifics* EntitySpecifics::mutable_priority_preference() {
  ::sync_pb::PriorityPreferenceSpecifics* _msg = _internal_mutable_priority_preference();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.priority_preference)
  return _msg;
}

// .sync_pb.DictionarySpecifics dictionary = 170540;
inline bool EntitySpecifics::_internal_has_dictionary() const {
  return specifics_variant_case() == kDictionary;
}
inline bool EntitySpecifics::has_dictionary() const {
  return _internal_has_dictionary();
}
inline void EntitySpecifics::set_has_dictionary() {
  _oneof_case_[0] = kDictionary;
}
inline ::sync_pb::DictionarySpecifics* EntitySpecifics::release_dictionary() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.dictionary)
  if (_internal_has_dictionary()) {
    clear_has_specifics_variant();
    ::sync_pb::DictionarySpecifics* temp = specifics_variant_.dictionary_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.dictionary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::DictionarySpecifics& EntitySpecifics::_internal_dictionary() const {
  return _internal_has_dictionary()
      ? *specifics_variant_.dictionary_
      : reinterpret_cast< ::sync_pb::DictionarySpecifics&>(::sync_pb::_DictionarySpecifics_default_instance_);
}
inline const ::sync_pb::DictionarySpecifics& EntitySpecifics::dictionary() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.dictionary)
  return _internal_dictionary();
}
inline ::sync_pb::DictionarySpecifics* EntitySpecifics::unsafe_arena_release_dictionary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.dictionary)
  if (_internal_has_dictionary()) {
    clear_has_specifics_variant();
    ::sync_pb::DictionarySpecifics* temp = specifics_variant_.dictionary_;
    specifics_variant_.dictionary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_dictionary(::sync_pb::DictionarySpecifics* dictionary) {
  clear_specifics_variant();
  if (dictionary) {
    set_has_dictionary();
    specifics_variant_.dictionary_ = dictionary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.dictionary)
}
inline ::sync_pb::DictionarySpecifics* EntitySpecifics::_internal_mutable_dictionary() {
  if (!_internal_has_dictionary()) {
    clear_specifics_variant();
    set_has_dictionary();
    specifics_variant_.dictionary_ = CreateMaybeMessage< ::sync_pb::DictionarySpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.dictionary_;
}
inline ::sync_pb::DictionarySpecifics* EntitySpecifics::mutable_dictionary() {
  ::sync_pb::DictionarySpecifics* _msg = _internal_mutable_dictionary();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.dictionary)
  return _msg;
}

// .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534 [deprecated = true];
inline bool EntitySpecifics::_internal_has_favicon_tracking() const {
  return specifics_variant_case() == kFaviconTracking;
}
inline bool EntitySpecifics::has_favicon_tracking() const {
  return _internal_has_favicon_tracking();
}
inline void EntitySpecifics::set_has_favicon_tracking() {
  _oneof_case_[0] = kFaviconTracking;
}
inline ::sync_pb::FaviconTrackingSpecifics* EntitySpecifics::release_favicon_tracking() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.favicon_tracking)
  if (_internal_has_favicon_tracking()) {
    clear_has_specifics_variant();
    ::sync_pb::FaviconTrackingSpecifics* temp = specifics_variant_.favicon_tracking_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.favicon_tracking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::FaviconTrackingSpecifics& EntitySpecifics::_internal_favicon_tracking() const {
  return _internal_has_favicon_tracking()
      ? *specifics_variant_.favicon_tracking_
      : reinterpret_cast< ::sync_pb::FaviconTrackingSpecifics&>(::sync_pb::_FaviconTrackingSpecifics_default_instance_);
}
inline const ::sync_pb::FaviconTrackingSpecifics& EntitySpecifics::favicon_tracking() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.favicon_tracking)
  return _internal_favicon_tracking();
}
inline ::sync_pb::FaviconTrackingSpecifics* EntitySpecifics::unsafe_arena_release_favicon_tracking() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.favicon_tracking)
  if (_internal_has_favicon_tracking()) {
    clear_has_specifics_variant();
    ::sync_pb::FaviconTrackingSpecifics* temp = specifics_variant_.favicon_tracking_;
    specifics_variant_.favicon_tracking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_favicon_tracking(::sync_pb::FaviconTrackingSpecifics* favicon_tracking) {
  clear_specifics_variant();
  if (favicon_tracking) {
    set_has_favicon_tracking();
    specifics_variant_.favicon_tracking_ = favicon_tracking;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.favicon_tracking)
}
inline ::sync_pb::FaviconTrackingSpecifics* EntitySpecifics::_internal_mutable_favicon_tracking() {
  if (!_internal_has_favicon_tracking()) {
    clear_specifics_variant();
    set_has_favicon_tracking();
    specifics_variant_.favicon_tracking_ = CreateMaybeMessage< ::sync_pb::FaviconTrackingSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.favicon_tracking_;
}
inline ::sync_pb::FaviconTrackingSpecifics* EntitySpecifics::mutable_favicon_tracking() {
  ::sync_pb::FaviconTrackingSpecifics* _msg = _internal_mutable_favicon_tracking();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.favicon_tracking)
  return _msg;
}

// .sync_pb.FaviconImageSpecifics favicon_image = 182019 [deprecated = true];
inline bool EntitySpecifics::_internal_has_favicon_image() const {
  return specifics_variant_case() == kFaviconImage;
}
inline bool EntitySpecifics::has_favicon_image() const {
  return _internal_has_favicon_image();
}
inline void EntitySpecifics::set_has_favicon_image() {
  _oneof_case_[0] = kFaviconImage;
}
inline ::sync_pb::FaviconImageSpecifics* EntitySpecifics::release_favicon_image() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.favicon_image)
  if (_internal_has_favicon_image()) {
    clear_has_specifics_variant();
    ::sync_pb::FaviconImageSpecifics* temp = specifics_variant_.favicon_image_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.favicon_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::FaviconImageSpecifics& EntitySpecifics::_internal_favicon_image() const {
  return _internal_has_favicon_image()
      ? *specifics_variant_.favicon_image_
      : reinterpret_cast< ::sync_pb::FaviconImageSpecifics&>(::sync_pb::_FaviconImageSpecifics_default_instance_);
}
inline const ::sync_pb::FaviconImageSpecifics& EntitySpecifics::favicon_image() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.favicon_image)
  return _internal_favicon_image();
}
inline ::sync_pb::FaviconImageSpecifics* EntitySpecifics::unsafe_arena_release_favicon_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.favicon_image)
  if (_internal_has_favicon_image()) {
    clear_has_specifics_variant();
    ::sync_pb::FaviconImageSpecifics* temp = specifics_variant_.favicon_image_;
    specifics_variant_.favicon_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_favicon_image(::sync_pb::FaviconImageSpecifics* favicon_image) {
  clear_specifics_variant();
  if (favicon_image) {
    set_has_favicon_image();
    specifics_variant_.favicon_image_ = favicon_image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.favicon_image)
}
inline ::sync_pb::FaviconImageSpecifics* EntitySpecifics::_internal_mutable_favicon_image() {
  if (!_internal_has_favicon_image()) {
    clear_specifics_variant();
    set_has_favicon_image();
    specifics_variant_.favicon_image_ = CreateMaybeMessage< ::sync_pb::FaviconImageSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.favicon_image_;
}
inline ::sync_pb::FaviconImageSpecifics* EntitySpecifics::mutable_favicon_image() {
  ::sync_pb::FaviconImageSpecifics* _msg = _internal_mutable_favicon_image();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.favicon_image)
  return _msg;
}

// .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
inline bool EntitySpecifics::_internal_has_managed_user_setting() const {
  return specifics_variant_case() == kManagedUserSetting;
}
inline bool EntitySpecifics::has_managed_user_setting() const {
  return _internal_has_managed_user_setting();
}
inline void EntitySpecifics::set_has_managed_user_setting() {
  _oneof_case_[0] = kManagedUserSetting;
}
inline ::sync_pb::ManagedUserSettingSpecifics* EntitySpecifics::release_managed_user_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_setting)
  if (_internal_has_managed_user_setting()) {
    clear_has_specifics_variant();
    ::sync_pb::ManagedUserSettingSpecifics* temp = specifics_variant_.managed_user_setting_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.managed_user_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ManagedUserSettingSpecifics& EntitySpecifics::_internal_managed_user_setting() const {
  return _internal_has_managed_user_setting()
      ? *specifics_variant_.managed_user_setting_
      : reinterpret_cast< ::sync_pb::ManagedUserSettingSpecifics&>(::sync_pb::_ManagedUserSettingSpecifics_default_instance_);
}
inline const ::sync_pb::ManagedUserSettingSpecifics& EntitySpecifics::managed_user_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_setting)
  return _internal_managed_user_setting();
}
inline ::sync_pb::ManagedUserSettingSpecifics* EntitySpecifics::unsafe_arena_release_managed_user_setting() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.managed_user_setting)
  if (_internal_has_managed_user_setting()) {
    clear_has_specifics_variant();
    ::sync_pb::ManagedUserSettingSpecifics* temp = specifics_variant_.managed_user_setting_;
    specifics_variant_.managed_user_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_managed_user_setting(::sync_pb::ManagedUserSettingSpecifics* managed_user_setting) {
  clear_specifics_variant();
  if (managed_user_setting) {
    set_has_managed_user_setting();
    specifics_variant_.managed_user_setting_ = managed_user_setting;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.managed_user_setting)
}
inline ::sync_pb::ManagedUserSettingSpecifics* EntitySpecifics::_internal_mutable_managed_user_setting() {
  if (!_internal_has_managed_user_setting()) {
    clear_specifics_variant();
    set_has_managed_user_setting();
    specifics_variant_.managed_user_setting_ = CreateMaybeMessage< ::sync_pb::ManagedUserSettingSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.managed_user_setting_;
}
inline ::sync_pb::ManagedUserSettingSpecifics* EntitySpecifics::mutable_managed_user_setting() {
  ::sync_pb::ManagedUserSettingSpecifics* _msg = _internal_mutable_managed_user_setting();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_setting)
  return _msg;
}

// .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
inline bool EntitySpecifics::_internal_has_managed_user() const {
  return specifics_variant_case() == kManagedUser;
}
inline bool EntitySpecifics::has_managed_user() const {
  return _internal_has_managed_user();
}
inline void EntitySpecifics::set_has_managed_user() {
  _oneof_case_[0] = kManagedUser;
}
inline ::sync_pb::ManagedUserSpecifics* EntitySpecifics::release_managed_user() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user)
  if (_internal_has_managed_user()) {
    clear_has_specifics_variant();
    ::sync_pb::ManagedUserSpecifics* temp = specifics_variant_.managed_user_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.managed_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ManagedUserSpecifics& EntitySpecifics::_internal_managed_user() const {
  return _internal_has_managed_user()
      ? *specifics_variant_.managed_user_
      : reinterpret_cast< ::sync_pb::ManagedUserSpecifics&>(::sync_pb::_ManagedUserSpecifics_default_instance_);
}
inline const ::sync_pb::ManagedUserSpecifics& EntitySpecifics::managed_user() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user)
  return _internal_managed_user();
}
inline ::sync_pb::ManagedUserSpecifics* EntitySpecifics::unsafe_arena_release_managed_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.managed_user)
  if (_internal_has_managed_user()) {
    clear_has_specifics_variant();
    ::sync_pb::ManagedUserSpecifics* temp = specifics_variant_.managed_user_;
    specifics_variant_.managed_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_managed_user(::sync_pb::ManagedUserSpecifics* managed_user) {
  clear_specifics_variant();
  if (managed_user) {
    set_has_managed_user();
    specifics_variant_.managed_user_ = managed_user;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.managed_user)
}
inline ::sync_pb::ManagedUserSpecifics* EntitySpecifics::_internal_mutable_managed_user() {
  if (!_internal_has_managed_user()) {
    clear_specifics_variant();
    set_has_managed_user();
    specifics_variant_.managed_user_ = CreateMaybeMessage< ::sync_pb::ManagedUserSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.managed_user_;
}
inline ::sync_pb::ManagedUserSpecifics* EntitySpecifics::mutable_managed_user() {
  ::sync_pb::ManagedUserSpecifics* _msg = _internal_mutable_managed_user();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user)
  return _msg;
}

// .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
inline bool EntitySpecifics::_internal_has_managed_user_shared_setting() const {
  return specifics_variant_case() == kManagedUserSharedSetting;
}
inline bool EntitySpecifics::has_managed_user_shared_setting() const {
  return _internal_has_managed_user_shared_setting();
}
inline void EntitySpecifics::set_has_managed_user_shared_setting() {
  _oneof_case_[0] = kManagedUserSharedSetting;
}
inline ::sync_pb::ManagedUserSharedSettingSpecifics* EntitySpecifics::release_managed_user_shared_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_shared_setting)
  if (_internal_has_managed_user_shared_setting()) {
    clear_has_specifics_variant();
    ::sync_pb::ManagedUserSharedSettingSpecifics* temp = specifics_variant_.managed_user_shared_setting_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.managed_user_shared_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ManagedUserSharedSettingSpecifics& EntitySpecifics::_internal_managed_user_shared_setting() const {
  return _internal_has_managed_user_shared_setting()
      ? *specifics_variant_.managed_user_shared_setting_
      : reinterpret_cast< ::sync_pb::ManagedUserSharedSettingSpecifics&>(::sync_pb::_ManagedUserSharedSettingSpecifics_default_instance_);
}
inline const ::sync_pb::ManagedUserSharedSettingSpecifics& EntitySpecifics::managed_user_shared_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_shared_setting)
  return _internal_managed_user_shared_setting();
}
inline ::sync_pb::ManagedUserSharedSettingSpecifics* EntitySpecifics::unsafe_arena_release_managed_user_shared_setting() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.managed_user_shared_setting)
  if (_internal_has_managed_user_shared_setting()) {
    clear_has_specifics_variant();
    ::sync_pb::ManagedUserSharedSettingSpecifics* temp = specifics_variant_.managed_user_shared_setting_;
    specifics_variant_.managed_user_shared_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_managed_user_shared_setting(::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting) {
  clear_specifics_variant();
  if (managed_user_shared_setting) {
    set_has_managed_user_shared_setting();
    specifics_variant_.managed_user_shared_setting_ = managed_user_shared_setting;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.managed_user_shared_setting)
}
inline ::sync_pb::ManagedUserSharedSettingSpecifics* EntitySpecifics::_internal_mutable_managed_user_shared_setting() {
  if (!_internal_has_managed_user_shared_setting()) {
    clear_specifics_variant();
    set_has_managed_user_shared_setting();
    specifics_variant_.managed_user_shared_setting_ = CreateMaybeMessage< ::sync_pb::ManagedUserSharedSettingSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.managed_user_shared_setting_;
}
inline ::sync_pb::ManagedUserSharedSettingSpecifics* EntitySpecifics::mutable_managed_user_shared_setting() {
  ::sync_pb::ManagedUserSharedSettingSpecifics* _msg = _internal_mutable_managed_user_shared_setting();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_shared_setting)
  return _msg;
}

// .sync_pb.AppListSpecifics app_list = 229170;
inline bool EntitySpecifics::_internal_has_app_list() const {
  return specifics_variant_case() == kAppList;
}
inline bool EntitySpecifics::has_app_list() const {
  return _internal_has_app_list();
}
inline void EntitySpecifics::set_has_app_list() {
  _oneof_case_[0] = kAppList;
}
inline ::sync_pb::AppListSpecifics* EntitySpecifics::release_app_list() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_list)
  if (_internal_has_app_list()) {
    clear_has_specifics_variant();
    ::sync_pb::AppListSpecifics* temp = specifics_variant_.app_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.app_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AppListSpecifics& EntitySpecifics::_internal_app_list() const {
  return _internal_has_app_list()
      ? *specifics_variant_.app_list_
      : reinterpret_cast< ::sync_pb::AppListSpecifics&>(::sync_pb::_AppListSpecifics_default_instance_);
}
inline const ::sync_pb::AppListSpecifics& EntitySpecifics::app_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_list)
  return _internal_app_list();
}
inline ::sync_pb::AppListSpecifics* EntitySpecifics::unsafe_arena_release_app_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.app_list)
  if (_internal_has_app_list()) {
    clear_has_specifics_variant();
    ::sync_pb::AppListSpecifics* temp = specifics_variant_.app_list_;
    specifics_variant_.app_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_app_list(::sync_pb::AppListSpecifics* app_list) {
  clear_specifics_variant();
  if (app_list) {
    set_has_app_list();
    specifics_variant_.app_list_ = app_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.app_list)
}
inline ::sync_pb::AppListSpecifics* EntitySpecifics::_internal_mutable_app_list() {
  if (!_internal_has_app_list()) {
    clear_specifics_variant();
    set_has_app_list();
    specifics_variant_.app_list_ = CreateMaybeMessage< ::sync_pb::AppListSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.app_list_;
}
inline ::sync_pb::AppListSpecifics* EntitySpecifics::mutable_app_list() {
  ::sync_pb::AppListSpecifics* _msg = _internal_mutable_app_list();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_list)
  return _msg;
}

// .sync_pb.EmptySpecifics managed_user_allowlist = 306060 [deprecated = true];
inline bool EntitySpecifics::_internal_has_managed_user_allowlist() const {
  return specifics_variant_case() == kManagedUserAllowlist;
}
inline bool EntitySpecifics::has_managed_user_allowlist() const {
  return _internal_has_managed_user_allowlist();
}
inline void EntitySpecifics::set_has_managed_user_allowlist() {
  _oneof_case_[0] = kManagedUserAllowlist;
}
inline void EntitySpecifics::clear_managed_user_allowlist() {
  if (_internal_has_managed_user_allowlist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.managed_user_allowlist_;
    }
    clear_has_specifics_variant();
  }
}
inline ::sync_pb::EmptySpecifics* EntitySpecifics::release_managed_user_allowlist() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_allowlist)
  if (_internal_has_managed_user_allowlist()) {
    clear_has_specifics_variant();
    ::sync_pb::EmptySpecifics* temp = specifics_variant_.managed_user_allowlist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.managed_user_allowlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::EmptySpecifics& EntitySpecifics::_internal_managed_user_allowlist() const {
  return _internal_has_managed_user_allowlist()
      ? *specifics_variant_.managed_user_allowlist_
      : reinterpret_cast< ::sync_pb::EmptySpecifics&>(::sync_pb::_EmptySpecifics_default_instance_);
}
inline const ::sync_pb::EmptySpecifics& EntitySpecifics::managed_user_allowlist() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_allowlist)
  return _internal_managed_user_allowlist();
}
inline ::sync_pb::EmptySpecifics* EntitySpecifics::unsafe_arena_release_managed_user_allowlist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.managed_user_allowlist)
  if (_internal_has_managed_user_allowlist()) {
    clear_has_specifics_variant();
    ::sync_pb::EmptySpecifics* temp = specifics_variant_.managed_user_allowlist_;
    specifics_variant_.managed_user_allowlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_managed_user_allowlist(::sync_pb::EmptySpecifics* managed_user_allowlist) {
  clear_specifics_variant();
  if (managed_user_allowlist) {
    set_has_managed_user_allowlist();
    specifics_variant_.managed_user_allowlist_ = managed_user_allowlist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.managed_user_allowlist)
}
inline ::sync_pb::EmptySpecifics* EntitySpecifics::_internal_mutable_managed_user_allowlist() {
  if (!_internal_has_managed_user_allowlist()) {
    clear_specifics_variant();
    set_has_managed_user_allowlist();
    specifics_variant_.managed_user_allowlist_ = CreateMaybeMessage< ::sync_pb::EmptySpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.managed_user_allowlist_;
}
inline ::sync_pb::EmptySpecifics* EntitySpecifics::mutable_managed_user_allowlist() {
  ::sync_pb::EmptySpecifics* _msg = _internal_mutable_managed_user_allowlist();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_allowlist)
  return _msg;
}

// .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
inline bool EntitySpecifics::_internal_has_autofill_wallet() const {
  return specifics_variant_case() == kAutofillWallet;
}
inline bool EntitySpecifics::has_autofill_wallet() const {
  return _internal_has_autofill_wallet();
}
inline void EntitySpecifics::set_has_autofill_wallet() {
  _oneof_case_[0] = kAutofillWallet;
}
inline ::sync_pb::AutofillWalletSpecifics* EntitySpecifics::release_autofill_wallet() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill_wallet)
  if (_internal_has_autofill_wallet()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillWalletSpecifics* temp = specifics_variant_.autofill_wallet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.autofill_wallet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillWalletSpecifics& EntitySpecifics::_internal_autofill_wallet() const {
  return _internal_has_autofill_wallet()
      ? *specifics_variant_.autofill_wallet_
      : reinterpret_cast< ::sync_pb::AutofillWalletSpecifics&>(::sync_pb::_AutofillWalletSpecifics_default_instance_);
}
inline const ::sync_pb::AutofillWalletSpecifics& EntitySpecifics::autofill_wallet() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill_wallet)
  return _internal_autofill_wallet();
}
inline ::sync_pb::AutofillWalletSpecifics* EntitySpecifics::unsafe_arena_release_autofill_wallet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.autofill_wallet)
  if (_internal_has_autofill_wallet()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillWalletSpecifics* temp = specifics_variant_.autofill_wallet_;
    specifics_variant_.autofill_wallet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_autofill_wallet(::sync_pb::AutofillWalletSpecifics* autofill_wallet) {
  clear_specifics_variant();
  if (autofill_wallet) {
    set_has_autofill_wallet();
    specifics_variant_.autofill_wallet_ = autofill_wallet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.autofill_wallet)
}
inline ::sync_pb::AutofillWalletSpecifics* EntitySpecifics::_internal_mutable_autofill_wallet() {
  if (!_internal_has_autofill_wallet()) {
    clear_specifics_variant();
    set_has_autofill_wallet();
    specifics_variant_.autofill_wallet_ = CreateMaybeMessage< ::sync_pb::AutofillWalletSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.autofill_wallet_;
}
inline ::sync_pb::AutofillWalletSpecifics* EntitySpecifics::mutable_autofill_wallet() {
  ::sync_pb::AutofillWalletSpecifics* _msg = _internal_mutable_autofill_wallet();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill_wallet)
  return _msg;
}

// .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
inline bool EntitySpecifics::_internal_has_wallet_metadata() const {
  return specifics_variant_case() == kWalletMetadata;
}
inline bool EntitySpecifics::has_wallet_metadata() const {
  return _internal_has_wallet_metadata();
}
inline void EntitySpecifics::set_has_wallet_metadata() {
  _oneof_case_[0] = kWalletMetadata;
}
inline ::sync_pb::WalletMetadataSpecifics* EntitySpecifics::release_wallet_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.wallet_metadata)
  if (_internal_has_wallet_metadata()) {
    clear_has_specifics_variant();
    ::sync_pb::WalletMetadataSpecifics* temp = specifics_variant_.wallet_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.wallet_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WalletMetadataSpecifics& EntitySpecifics::_internal_wallet_metadata() const {
  return _internal_has_wallet_metadata()
      ? *specifics_variant_.wallet_metadata_
      : reinterpret_cast< ::sync_pb::WalletMetadataSpecifics&>(::sync_pb::_WalletMetadataSpecifics_default_instance_);
}
inline const ::sync_pb::WalletMetadataSpecifics& EntitySpecifics::wallet_metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.wallet_metadata)
  return _internal_wallet_metadata();
}
inline ::sync_pb::WalletMetadataSpecifics* EntitySpecifics::unsafe_arena_release_wallet_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.wallet_metadata)
  if (_internal_has_wallet_metadata()) {
    clear_has_specifics_variant();
    ::sync_pb::WalletMetadataSpecifics* temp = specifics_variant_.wallet_metadata_;
    specifics_variant_.wallet_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_wallet_metadata(::sync_pb::WalletMetadataSpecifics* wallet_metadata) {
  clear_specifics_variant();
  if (wallet_metadata) {
    set_has_wallet_metadata();
    specifics_variant_.wallet_metadata_ = wallet_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.wallet_metadata)
}
inline ::sync_pb::WalletMetadataSpecifics* EntitySpecifics::_internal_mutable_wallet_metadata() {
  if (!_internal_has_wallet_metadata()) {
    clear_specifics_variant();
    set_has_wallet_metadata();
    specifics_variant_.wallet_metadata_ = CreateMaybeMessage< ::sync_pb::WalletMetadataSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.wallet_metadata_;
}
inline ::sync_pb::WalletMetadataSpecifics* EntitySpecifics::mutable_wallet_metadata() {
  ::sync_pb::WalletMetadataSpecifics* _msg = _internal_mutable_wallet_metadata();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.wallet_metadata)
  return _msg;
}

// .sync_pb.ArcPackageSpecifics arc_package = 340906;
inline bool EntitySpecifics::_internal_has_arc_package() const {
  return specifics_variant_case() == kArcPackage;
}
inline bool EntitySpecifics::has_arc_package() const {
  return _internal_has_arc_package();
}
inline void EntitySpecifics::set_has_arc_package() {
  _oneof_case_[0] = kArcPackage;
}
inline ::sync_pb::ArcPackageSpecifics* EntitySpecifics::release_arc_package() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.arc_package)
  if (_internal_has_arc_package()) {
    clear_has_specifics_variant();
    ::sync_pb::ArcPackageSpecifics* temp = specifics_variant_.arc_package_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.arc_package_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ArcPackageSpecifics& EntitySpecifics::_internal_arc_package() const {
  return _internal_has_arc_package()
      ? *specifics_variant_.arc_package_
      : reinterpret_cast< ::sync_pb::ArcPackageSpecifics&>(::sync_pb::_ArcPackageSpecifics_default_instance_);
}
inline const ::sync_pb::ArcPackageSpecifics& EntitySpecifics::arc_package() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.arc_package)
  return _internal_arc_package();
}
inline ::sync_pb::ArcPackageSpecifics* EntitySpecifics::unsafe_arena_release_arc_package() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.arc_package)
  if (_internal_has_arc_package()) {
    clear_has_specifics_variant();
    ::sync_pb::ArcPackageSpecifics* temp = specifics_variant_.arc_package_;
    specifics_variant_.arc_package_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_arc_package(::sync_pb::ArcPackageSpecifics* arc_package) {
  clear_specifics_variant();
  if (arc_package) {
    set_has_arc_package();
    specifics_variant_.arc_package_ = arc_package;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.arc_package)
}
inline ::sync_pb::ArcPackageSpecifics* EntitySpecifics::_internal_mutable_arc_package() {
  if (!_internal_has_arc_package()) {
    clear_specifics_variant();
    set_has_arc_package();
    specifics_variant_.arc_package_ = CreateMaybeMessage< ::sync_pb::ArcPackageSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.arc_package_;
}
inline ::sync_pb::ArcPackageSpecifics* EntitySpecifics::mutable_arc_package() {
  ::sync_pb::ArcPackageSpecifics* _msg = _internal_mutable_arc_package();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.arc_package)
  return _msg;
}

// .sync_pb.PrinterSpecifics printer = 410745;
inline bool EntitySpecifics::_internal_has_printer() const {
  return specifics_variant_case() == kPrinter;
}
inline bool EntitySpecifics::has_printer() const {
  return _internal_has_printer();
}
inline void EntitySpecifics::set_has_printer() {
  _oneof_case_[0] = kPrinter;
}
inline ::sync_pb::PrinterSpecifics* EntitySpecifics::release_printer() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.printer)
  if (_internal_has_printer()) {
    clear_has_specifics_variant();
    ::sync_pb::PrinterSpecifics* temp = specifics_variant_.printer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.printer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PrinterSpecifics& EntitySpecifics::_internal_printer() const {
  return _internal_has_printer()
      ? *specifics_variant_.printer_
      : reinterpret_cast< ::sync_pb::PrinterSpecifics&>(::sync_pb::_PrinterSpecifics_default_instance_);
}
inline const ::sync_pb::PrinterSpecifics& EntitySpecifics::printer() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.printer)
  return _internal_printer();
}
inline ::sync_pb::PrinterSpecifics* EntitySpecifics::unsafe_arena_release_printer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.printer)
  if (_internal_has_printer()) {
    clear_has_specifics_variant();
    ::sync_pb::PrinterSpecifics* temp = specifics_variant_.printer_;
    specifics_variant_.printer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_printer(::sync_pb::PrinterSpecifics* printer) {
  clear_specifics_variant();
  if (printer) {
    set_has_printer();
    specifics_variant_.printer_ = printer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.printer)
}
inline ::sync_pb::PrinterSpecifics* EntitySpecifics::_internal_mutable_printer() {
  if (!_internal_has_printer()) {
    clear_specifics_variant();
    set_has_printer();
    specifics_variant_.printer_ = CreateMaybeMessage< ::sync_pb::PrinterSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.printer_;
}
inline ::sync_pb::PrinterSpecifics* EntitySpecifics::mutable_printer() {
  ::sync_pb::PrinterSpecifics* _msg = _internal_mutable_printer();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.printer)
  return _msg;
}

// .sync_pb.ReadingListSpecifics reading_list = 411028;
inline bool EntitySpecifics::_internal_has_reading_list() const {
  return specifics_variant_case() == kReadingList;
}
inline bool EntitySpecifics::has_reading_list() const {
  return _internal_has_reading_list();
}
inline void EntitySpecifics::set_has_reading_list() {
  _oneof_case_[0] = kReadingList;
}
inline ::sync_pb::ReadingListSpecifics* EntitySpecifics::release_reading_list() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.reading_list)
  if (_internal_has_reading_list()) {
    clear_has_specifics_variant();
    ::sync_pb::ReadingListSpecifics* temp = specifics_variant_.reading_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.reading_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ReadingListSpecifics& EntitySpecifics::_internal_reading_list() const {
  return _internal_has_reading_list()
      ? *specifics_variant_.reading_list_
      : reinterpret_cast< ::sync_pb::ReadingListSpecifics&>(::sync_pb::_ReadingListSpecifics_default_instance_);
}
inline const ::sync_pb::ReadingListSpecifics& EntitySpecifics::reading_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.reading_list)
  return _internal_reading_list();
}
inline ::sync_pb::ReadingListSpecifics* EntitySpecifics::unsafe_arena_release_reading_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.reading_list)
  if (_internal_has_reading_list()) {
    clear_has_specifics_variant();
    ::sync_pb::ReadingListSpecifics* temp = specifics_variant_.reading_list_;
    specifics_variant_.reading_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_reading_list(::sync_pb::ReadingListSpecifics* reading_list) {
  clear_specifics_variant();
  if (reading_list) {
    set_has_reading_list();
    specifics_variant_.reading_list_ = reading_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.reading_list)
}
inline ::sync_pb::ReadingListSpecifics* EntitySpecifics::_internal_mutable_reading_list() {
  if (!_internal_has_reading_list()) {
    clear_specifics_variant();
    set_has_reading_list();
    specifics_variant_.reading_list_ = CreateMaybeMessage< ::sync_pb::ReadingListSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.reading_list_;
}
inline ::sync_pb::ReadingListSpecifics* EntitySpecifics::mutable_reading_list() {
  ::sync_pb::ReadingListSpecifics* _msg = _internal_mutable_reading_list();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.reading_list)
  return _msg;
}

// .sync_pb.UserEventSpecifics user_event = 455206;
inline bool EntitySpecifics::_internal_has_user_event() const {
  return specifics_variant_case() == kUserEvent;
}
inline bool EntitySpecifics::has_user_event() const {
  return _internal_has_user_event();
}
inline void EntitySpecifics::set_has_user_event() {
  _oneof_case_[0] = kUserEvent;
}
inline ::sync_pb::UserEventSpecifics* EntitySpecifics::release_user_event() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.user_event)
  if (_internal_has_user_event()) {
    clear_has_specifics_variant();
    ::sync_pb::UserEventSpecifics* temp = specifics_variant_.user_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.user_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics& EntitySpecifics::_internal_user_event() const {
  return _internal_has_user_event()
      ? *specifics_variant_.user_event_
      : reinterpret_cast< ::sync_pb::UserEventSpecifics&>(::sync_pb::_UserEventSpecifics_default_instance_);
}
inline const ::sync_pb::UserEventSpecifics& EntitySpecifics::user_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.user_event)
  return _internal_user_event();
}
inline ::sync_pb::UserEventSpecifics* EntitySpecifics::unsafe_arena_release_user_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.user_event)
  if (_internal_has_user_event()) {
    clear_has_specifics_variant();
    ::sync_pb::UserEventSpecifics* temp = specifics_variant_.user_event_;
    specifics_variant_.user_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_user_event(::sync_pb::UserEventSpecifics* user_event) {
  clear_specifics_variant();
  if (user_event) {
    set_has_user_event();
    specifics_variant_.user_event_ = user_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.user_event)
}
inline ::sync_pb::UserEventSpecifics* EntitySpecifics::_internal_mutable_user_event() {
  if (!_internal_has_user_event()) {
    clear_specifics_variant();
    set_has_user_event();
    specifics_variant_.user_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.user_event_;
}
inline ::sync_pb::UserEventSpecifics* EntitySpecifics::mutable_user_event() {
  ::sync_pb::UserEventSpecifics* _msg = _internal_mutable_user_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.user_event)
  return _msg;
}

// .sync_pb.UserConsentSpecifics user_consent = 556014;
inline bool EntitySpecifics::_internal_has_user_consent() const {
  return specifics_variant_case() == kUserConsent;
}
inline bool EntitySpecifics::has_user_consent() const {
  return _internal_has_user_consent();
}
inline void EntitySpecifics::set_has_user_consent() {
  _oneof_case_[0] = kUserConsent;
}
inline ::sync_pb::UserConsentSpecifics* EntitySpecifics::release_user_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.user_consent)
  if (_internal_has_user_consent()) {
    clear_has_specifics_variant();
    ::sync_pb::UserConsentSpecifics* temp = specifics_variant_.user_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.user_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentSpecifics& EntitySpecifics::_internal_user_consent() const {
  return _internal_has_user_consent()
      ? *specifics_variant_.user_consent_
      : reinterpret_cast< ::sync_pb::UserConsentSpecifics&>(::sync_pb::_UserConsentSpecifics_default_instance_);
}
inline const ::sync_pb::UserConsentSpecifics& EntitySpecifics::user_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.user_consent)
  return _internal_user_consent();
}
inline ::sync_pb::UserConsentSpecifics* EntitySpecifics::unsafe_arena_release_user_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.user_consent)
  if (_internal_has_user_consent()) {
    clear_has_specifics_variant();
    ::sync_pb::UserConsentSpecifics* temp = specifics_variant_.user_consent_;
    specifics_variant_.user_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_user_consent(::sync_pb::UserConsentSpecifics* user_consent) {
  clear_specifics_variant();
  if (user_consent) {
    set_has_user_consent();
    specifics_variant_.user_consent_ = user_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.user_consent)
}
inline ::sync_pb::UserConsentSpecifics* EntitySpecifics::_internal_mutable_user_consent() {
  if (!_internal_has_user_consent()) {
    clear_specifics_variant();
    set_has_user_consent();
    specifics_variant_.user_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.user_consent_;
}
inline ::sync_pb::UserConsentSpecifics* EntitySpecifics::mutable_user_consent() {
  ::sync_pb::UserConsentSpecifics* _msg = _internal_mutable_user_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.user_consent)
  return _msg;
}

// .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
inline bool EntitySpecifics::_internal_has_send_tab_to_self() const {
  return specifics_variant_case() == kSendTabToSelf;
}
inline bool EntitySpecifics::has_send_tab_to_self() const {
  return _internal_has_send_tab_to_self();
}
inline void EntitySpecifics::set_has_send_tab_to_self() {
  _oneof_case_[0] = kSendTabToSelf;
}
inline ::sync_pb::SendTabToSelfSpecifics* EntitySpecifics::release_send_tab_to_self() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.send_tab_to_self)
  if (_internal_has_send_tab_to_self()) {
    clear_has_specifics_variant();
    ::sync_pb::SendTabToSelfSpecifics* temp = specifics_variant_.send_tab_to_self_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.send_tab_to_self_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SendTabToSelfSpecifics& EntitySpecifics::_internal_send_tab_to_self() const {
  return _internal_has_send_tab_to_self()
      ? *specifics_variant_.send_tab_to_self_
      : reinterpret_cast< ::sync_pb::SendTabToSelfSpecifics&>(::sync_pb::_SendTabToSelfSpecifics_default_instance_);
}
inline const ::sync_pb::SendTabToSelfSpecifics& EntitySpecifics::send_tab_to_self() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.send_tab_to_self)
  return _internal_send_tab_to_self();
}
inline ::sync_pb::SendTabToSelfSpecifics* EntitySpecifics::unsafe_arena_release_send_tab_to_self() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.send_tab_to_self)
  if (_internal_has_send_tab_to_self()) {
    clear_has_specifics_variant();
    ::sync_pb::SendTabToSelfSpecifics* temp = specifics_variant_.send_tab_to_self_;
    specifics_variant_.send_tab_to_self_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_send_tab_to_self(::sync_pb::SendTabToSelfSpecifics* send_tab_to_self) {
  clear_specifics_variant();
  if (send_tab_to_self) {
    set_has_send_tab_to_self();
    specifics_variant_.send_tab_to_self_ = send_tab_to_self;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.send_tab_to_self)
}
inline ::sync_pb::SendTabToSelfSpecifics* EntitySpecifics::_internal_mutable_send_tab_to_self() {
  if (!_internal_has_send_tab_to_self()) {
    clear_specifics_variant();
    set_has_send_tab_to_self();
    specifics_variant_.send_tab_to_self_ = CreateMaybeMessage< ::sync_pb::SendTabToSelfSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.send_tab_to_self_;
}
inline ::sync_pb::SendTabToSelfSpecifics* EntitySpecifics::mutable_send_tab_to_self() {
  ::sync_pb::SendTabToSelfSpecifics* _msg = _internal_mutable_send_tab_to_self();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.send_tab_to_self)
  return _msg;
}

// .sync_pb.SecurityEventSpecifics security_event = 600372;
inline bool EntitySpecifics::_internal_has_security_event() const {
  return specifics_variant_case() == kSecurityEvent;
}
inline bool EntitySpecifics::has_security_event() const {
  return _internal_has_security_event();
}
inline void EntitySpecifics::set_has_security_event() {
  _oneof_case_[0] = kSecurityEvent;
}
inline ::sync_pb::SecurityEventSpecifics* EntitySpecifics::release_security_event() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.security_event)
  if (_internal_has_security_event()) {
    clear_has_specifics_variant();
    ::sync_pb::SecurityEventSpecifics* temp = specifics_variant_.security_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.security_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SecurityEventSpecifics& EntitySpecifics::_internal_security_event() const {
  return _internal_has_security_event()
      ? *specifics_variant_.security_event_
      : reinterpret_cast< ::sync_pb::SecurityEventSpecifics&>(::sync_pb::_SecurityEventSpecifics_default_instance_);
}
inline const ::sync_pb::SecurityEventSpecifics& EntitySpecifics::security_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.security_event)
  return _internal_security_event();
}
inline ::sync_pb::SecurityEventSpecifics* EntitySpecifics::unsafe_arena_release_security_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.security_event)
  if (_internal_has_security_event()) {
    clear_has_specifics_variant();
    ::sync_pb::SecurityEventSpecifics* temp = specifics_variant_.security_event_;
    specifics_variant_.security_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_security_event(::sync_pb::SecurityEventSpecifics* security_event) {
  clear_specifics_variant();
  if (security_event) {
    set_has_security_event();
    specifics_variant_.security_event_ = security_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.security_event)
}
inline ::sync_pb::SecurityEventSpecifics* EntitySpecifics::_internal_mutable_security_event() {
  if (!_internal_has_security_event()) {
    clear_specifics_variant();
    set_has_security_event();
    specifics_variant_.security_event_ = CreateMaybeMessage< ::sync_pb::SecurityEventSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.security_event_;
}
inline ::sync_pb::SecurityEventSpecifics* EntitySpecifics::mutable_security_event() {
  ::sync_pb::SecurityEventSpecifics* _msg = _internal_mutable_security_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.security_event)
  return _msg;
}

// .sync_pb.WebAppSpecifics web_app = 673225;
inline bool EntitySpecifics::_internal_has_web_app() const {
  return specifics_variant_case() == kWebApp;
}
inline bool EntitySpecifics::has_web_app() const {
  return _internal_has_web_app();
}
inline void EntitySpecifics::set_has_web_app() {
  _oneof_case_[0] = kWebApp;
}
inline ::sync_pb::WebAppSpecifics* EntitySpecifics::release_web_app() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.web_app)
  if (_internal_has_web_app()) {
    clear_has_specifics_variant();
    ::sync_pb::WebAppSpecifics* temp = specifics_variant_.web_app_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.web_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WebAppSpecifics& EntitySpecifics::_internal_web_app() const {
  return _internal_has_web_app()
      ? *specifics_variant_.web_app_
      : reinterpret_cast< ::sync_pb::WebAppSpecifics&>(::sync_pb::_WebAppSpecifics_default_instance_);
}
inline const ::sync_pb::WebAppSpecifics& EntitySpecifics::web_app() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.web_app)
  return _internal_web_app();
}
inline ::sync_pb::WebAppSpecifics* EntitySpecifics::unsafe_arena_release_web_app() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.web_app)
  if (_internal_has_web_app()) {
    clear_has_specifics_variant();
    ::sync_pb::WebAppSpecifics* temp = specifics_variant_.web_app_;
    specifics_variant_.web_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_web_app(::sync_pb::WebAppSpecifics* web_app) {
  clear_specifics_variant();
  if (web_app) {
    set_has_web_app();
    specifics_variant_.web_app_ = web_app;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.web_app)
}
inline ::sync_pb::WebAppSpecifics* EntitySpecifics::_internal_mutable_web_app() {
  if (!_internal_has_web_app()) {
    clear_specifics_variant();
    set_has_web_app();
    specifics_variant_.web_app_ = CreateMaybeMessage< ::sync_pb::WebAppSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.web_app_;
}
inline ::sync_pb::WebAppSpecifics* EntitySpecifics::mutable_web_app() {
  ::sync_pb::WebAppSpecifics* _msg = _internal_mutable_web_app();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.web_app)
  return _msg;
}

// .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
inline bool EntitySpecifics::_internal_has_wifi_configuration() const {
  return specifics_variant_case() == kWifiConfiguration;
}
inline bool EntitySpecifics::has_wifi_configuration() const {
  return _internal_has_wifi_configuration();
}
inline void EntitySpecifics::set_has_wifi_configuration() {
  _oneof_case_[0] = kWifiConfiguration;
}
inline ::sync_pb::WifiConfigurationSpecifics* EntitySpecifics::release_wifi_configuration() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.wifi_configuration)
  if (_internal_has_wifi_configuration()) {
    clear_has_specifics_variant();
    ::sync_pb::WifiConfigurationSpecifics* temp = specifics_variant_.wifi_configuration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.wifi_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WifiConfigurationSpecifics& EntitySpecifics::_internal_wifi_configuration() const {
  return _internal_has_wifi_configuration()
      ? *specifics_variant_.wifi_configuration_
      : reinterpret_cast< ::sync_pb::WifiConfigurationSpecifics&>(::sync_pb::_WifiConfigurationSpecifics_default_instance_);
}
inline const ::sync_pb::WifiConfigurationSpecifics& EntitySpecifics::wifi_configuration() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.wifi_configuration)
  return _internal_wifi_configuration();
}
inline ::sync_pb::WifiConfigurationSpecifics* EntitySpecifics::unsafe_arena_release_wifi_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.wifi_configuration)
  if (_internal_has_wifi_configuration()) {
    clear_has_specifics_variant();
    ::sync_pb::WifiConfigurationSpecifics* temp = specifics_variant_.wifi_configuration_;
    specifics_variant_.wifi_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_wifi_configuration(::sync_pb::WifiConfigurationSpecifics* wifi_configuration) {
  clear_specifics_variant();
  if (wifi_configuration) {
    set_has_wifi_configuration();
    specifics_variant_.wifi_configuration_ = wifi_configuration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.wifi_configuration)
}
inline ::sync_pb::WifiConfigurationSpecifics* EntitySpecifics::_internal_mutable_wifi_configuration() {
  if (!_internal_has_wifi_configuration()) {
    clear_specifics_variant();
    set_has_wifi_configuration();
    specifics_variant_.wifi_configuration_ = CreateMaybeMessage< ::sync_pb::WifiConfigurationSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.wifi_configuration_;
}
inline ::sync_pb::WifiConfigurationSpecifics* EntitySpecifics::mutable_wifi_configuration() {
  ::sync_pb::WifiConfigurationSpecifics* _msg = _internal_mutable_wifi_configuration();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.wifi_configuration)
  return _msg;
}

// .sync_pb.OsPreferenceSpecifics os_preference = 702141;
inline bool EntitySpecifics::_internal_has_os_preference() const {
  return specifics_variant_case() == kOsPreference;
}
inline bool EntitySpecifics::has_os_preference() const {
  return _internal_has_os_preference();
}
inline void EntitySpecifics::set_has_os_preference() {
  _oneof_case_[0] = kOsPreference;
}
inline ::sync_pb::OsPreferenceSpecifics* EntitySpecifics::release_os_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.os_preference)
  if (_internal_has_os_preference()) {
    clear_has_specifics_variant();
    ::sync_pb::OsPreferenceSpecifics* temp = specifics_variant_.os_preference_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.os_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::OsPreferenceSpecifics& EntitySpecifics::_internal_os_preference() const {
  return _internal_has_os_preference()
      ? *specifics_variant_.os_preference_
      : reinterpret_cast< ::sync_pb::OsPreferenceSpecifics&>(::sync_pb::_OsPreferenceSpecifics_default_instance_);
}
inline const ::sync_pb::OsPreferenceSpecifics& EntitySpecifics::os_preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.os_preference)
  return _internal_os_preference();
}
inline ::sync_pb::OsPreferenceSpecifics* EntitySpecifics::unsafe_arena_release_os_preference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.os_preference)
  if (_internal_has_os_preference()) {
    clear_has_specifics_variant();
    ::sync_pb::OsPreferenceSpecifics* temp = specifics_variant_.os_preference_;
    specifics_variant_.os_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_os_preference(::sync_pb::OsPreferenceSpecifics* os_preference) {
  clear_specifics_variant();
  if (os_preference) {
    set_has_os_preference();
    specifics_variant_.os_preference_ = os_preference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.os_preference)
}
inline ::sync_pb::OsPreferenceSpecifics* EntitySpecifics::_internal_mutable_os_preference() {
  if (!_internal_has_os_preference()) {
    clear_specifics_variant();
    set_has_os_preference();
    specifics_variant_.os_preference_ = CreateMaybeMessage< ::sync_pb::OsPreferenceSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.os_preference_;
}
inline ::sync_pb::OsPreferenceSpecifics* EntitySpecifics::mutable_os_preference() {
  ::sync_pb::OsPreferenceSpecifics* _msg = _internal_mutable_os_preference();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.os_preference)
  return _msg;
}

// .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
inline bool EntitySpecifics::_internal_has_os_priority_preference() const {
  return specifics_variant_case() == kOsPriorityPreference;
}
inline bool EntitySpecifics::has_os_priority_preference() const {
  return _internal_has_os_priority_preference();
}
inline void EntitySpecifics::set_has_os_priority_preference() {
  _oneof_case_[0] = kOsPriorityPreference;
}
inline ::sync_pb::OsPriorityPreferenceSpecifics* EntitySpecifics::release_os_priority_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.os_priority_preference)
  if (_internal_has_os_priority_preference()) {
    clear_has_specifics_variant();
    ::sync_pb::OsPriorityPreferenceSpecifics* temp = specifics_variant_.os_priority_preference_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.os_priority_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::OsPriorityPreferenceSpecifics& EntitySpecifics::_internal_os_priority_preference() const {
  return _internal_has_os_priority_preference()
      ? *specifics_variant_.os_priority_preference_
      : reinterpret_cast< ::sync_pb::OsPriorityPreferenceSpecifics&>(::sync_pb::_OsPriorityPreferenceSpecifics_default_instance_);
}
inline const ::sync_pb::OsPriorityPreferenceSpecifics& EntitySpecifics::os_priority_preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.os_priority_preference)
  return _internal_os_priority_preference();
}
inline ::sync_pb::OsPriorityPreferenceSpecifics* EntitySpecifics::unsafe_arena_release_os_priority_preference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.os_priority_preference)
  if (_internal_has_os_priority_preference()) {
    clear_has_specifics_variant();
    ::sync_pb::OsPriorityPreferenceSpecifics* temp = specifics_variant_.os_priority_preference_;
    specifics_variant_.os_priority_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_os_priority_preference(::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference) {
  clear_specifics_variant();
  if (os_priority_preference) {
    set_has_os_priority_preference();
    specifics_variant_.os_priority_preference_ = os_priority_preference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.os_priority_preference)
}
inline ::sync_pb::OsPriorityPreferenceSpecifics* EntitySpecifics::_internal_mutable_os_priority_preference() {
  if (!_internal_has_os_priority_preference()) {
    clear_specifics_variant();
    set_has_os_priority_preference();
    specifics_variant_.os_priority_preference_ = CreateMaybeMessage< ::sync_pb::OsPriorityPreferenceSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.os_priority_preference_;
}
inline ::sync_pb::OsPriorityPreferenceSpecifics* EntitySpecifics::mutable_os_priority_preference() {
  ::sync_pb::OsPriorityPreferenceSpecifics* _msg = _internal_mutable_os_priority_preference();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.os_priority_preference)
  return _msg;
}

// .sync_pb.SharingMessageSpecifics sharing_message = 728866;
inline bool EntitySpecifics::_internal_has_sharing_message() const {
  return specifics_variant_case() == kSharingMessage;
}
inline bool EntitySpecifics::has_sharing_message() const {
  return _internal_has_sharing_message();
}
inline void EntitySpecifics::set_has_sharing_message() {
  _oneof_case_[0] = kSharingMessage;
}
inline ::sync_pb::SharingMessageSpecifics* EntitySpecifics::release_sharing_message() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.sharing_message)
  if (_internal_has_sharing_message()) {
    clear_has_specifics_variant();
    ::sync_pb::SharingMessageSpecifics* temp = specifics_variant_.sharing_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.sharing_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SharingMessageSpecifics& EntitySpecifics::_internal_sharing_message() const {
  return _internal_has_sharing_message()
      ? *specifics_variant_.sharing_message_
      : reinterpret_cast< ::sync_pb::SharingMessageSpecifics&>(::sync_pb::_SharingMessageSpecifics_default_instance_);
}
inline const ::sync_pb::SharingMessageSpecifics& EntitySpecifics::sharing_message() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.sharing_message)
  return _internal_sharing_message();
}
inline ::sync_pb::SharingMessageSpecifics* EntitySpecifics::unsafe_arena_release_sharing_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.sharing_message)
  if (_internal_has_sharing_message()) {
    clear_has_specifics_variant();
    ::sync_pb::SharingMessageSpecifics* temp = specifics_variant_.sharing_message_;
    specifics_variant_.sharing_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_sharing_message(::sync_pb::SharingMessageSpecifics* sharing_message) {
  clear_specifics_variant();
  if (sharing_message) {
    set_has_sharing_message();
    specifics_variant_.sharing_message_ = sharing_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.sharing_message)
}
inline ::sync_pb::SharingMessageSpecifics* EntitySpecifics::_internal_mutable_sharing_message() {
  if (!_internal_has_sharing_message()) {
    clear_specifics_variant();
    set_has_sharing_message();
    specifics_variant_.sharing_message_ = CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.sharing_message_;
}
inline ::sync_pb::SharingMessageSpecifics* EntitySpecifics::mutable_sharing_message() {
  ::sync_pb::SharingMessageSpecifics* _msg = _internal_mutable_sharing_message();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.sharing_message)
  return _msg;
}

// .sync_pb.AutofillOfferSpecifics autofill_offer = 774329;
inline bool EntitySpecifics::_internal_has_autofill_offer() const {
  return specifics_variant_case() == kAutofillOffer;
}
inline bool EntitySpecifics::has_autofill_offer() const {
  return _internal_has_autofill_offer();
}
inline void EntitySpecifics::set_has_autofill_offer() {
  _oneof_case_[0] = kAutofillOffer;
}
inline ::sync_pb::AutofillOfferSpecifics* EntitySpecifics::release_autofill_offer() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill_offer)
  if (_internal_has_autofill_offer()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillOfferSpecifics* temp = specifics_variant_.autofill_offer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.autofill_offer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillOfferSpecifics& EntitySpecifics::_internal_autofill_offer() const {
  return _internal_has_autofill_offer()
      ? *specifics_variant_.autofill_offer_
      : reinterpret_cast< ::sync_pb::AutofillOfferSpecifics&>(::sync_pb::_AutofillOfferSpecifics_default_instance_);
}
inline const ::sync_pb::AutofillOfferSpecifics& EntitySpecifics::autofill_offer() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill_offer)
  return _internal_autofill_offer();
}
inline ::sync_pb::AutofillOfferSpecifics* EntitySpecifics::unsafe_arena_release_autofill_offer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.autofill_offer)
  if (_internal_has_autofill_offer()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillOfferSpecifics* temp = specifics_variant_.autofill_offer_;
    specifics_variant_.autofill_offer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_autofill_offer(::sync_pb::AutofillOfferSpecifics* autofill_offer) {
  clear_specifics_variant();
  if (autofill_offer) {
    set_has_autofill_offer();
    specifics_variant_.autofill_offer_ = autofill_offer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.autofill_offer)
}
inline ::sync_pb::AutofillOfferSpecifics* EntitySpecifics::_internal_mutable_autofill_offer() {
  if (!_internal_has_autofill_offer()) {
    clear_specifics_variant();
    set_has_autofill_offer();
    specifics_variant_.autofill_offer_ = CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.autofill_offer_;
}
inline ::sync_pb::AutofillOfferSpecifics* EntitySpecifics::mutable_autofill_offer() {
  ::sync_pb::AutofillOfferSpecifics* _msg = _internal_mutable_autofill_offer();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill_offer)
  return _msg;
}

// .sync_pb.WorkspaceDeskSpecifics workspace_desk = 874841;
inline bool EntitySpecifics::_internal_has_workspace_desk() const {
  return specifics_variant_case() == kWorkspaceDesk;
}
inline bool EntitySpecifics::has_workspace_desk() const {
  return _internal_has_workspace_desk();
}
inline void EntitySpecifics::set_has_workspace_desk() {
  _oneof_case_[0] = kWorkspaceDesk;
}
inline ::sync_pb::WorkspaceDeskSpecifics* EntitySpecifics::release_workspace_desk() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.workspace_desk)
  if (_internal_has_workspace_desk()) {
    clear_has_specifics_variant();
    ::sync_pb::WorkspaceDeskSpecifics* temp = specifics_variant_.workspace_desk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.workspace_desk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WorkspaceDeskSpecifics& EntitySpecifics::_internal_workspace_desk() const {
  return _internal_has_workspace_desk()
      ? *specifics_variant_.workspace_desk_
      : reinterpret_cast< ::sync_pb::WorkspaceDeskSpecifics&>(::sync_pb::_WorkspaceDeskSpecifics_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics& EntitySpecifics::workspace_desk() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.workspace_desk)
  return _internal_workspace_desk();
}
inline ::sync_pb::WorkspaceDeskSpecifics* EntitySpecifics::unsafe_arena_release_workspace_desk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.workspace_desk)
  if (_internal_has_workspace_desk()) {
    clear_has_specifics_variant();
    ::sync_pb::WorkspaceDeskSpecifics* temp = specifics_variant_.workspace_desk_;
    specifics_variant_.workspace_desk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_workspace_desk(::sync_pb::WorkspaceDeskSpecifics* workspace_desk) {
  clear_specifics_variant();
  if (workspace_desk) {
    set_has_workspace_desk();
    specifics_variant_.workspace_desk_ = workspace_desk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.workspace_desk)
}
inline ::sync_pb::WorkspaceDeskSpecifics* EntitySpecifics::_internal_mutable_workspace_desk() {
  if (!_internal_has_workspace_desk()) {
    clear_specifics_variant();
    set_has_workspace_desk();
    specifics_variant_.workspace_desk_ = CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.workspace_desk_;
}
inline ::sync_pb::WorkspaceDeskSpecifics* EntitySpecifics::mutable_workspace_desk() {
  ::sync_pb::WorkspaceDeskSpecifics* _msg = _internal_mutable_workspace_desk();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.workspace_desk)
  return _msg;
}

// .sync_pb.WebauthnCredentialSpecifics webauthn_credential = 895275;
inline bool EntitySpecifics::_internal_has_webauthn_credential() const {
  return specifics_variant_case() == kWebauthnCredential;
}
inline bool EntitySpecifics::has_webauthn_credential() const {
  return _internal_has_webauthn_credential();
}
inline void EntitySpecifics::set_has_webauthn_credential() {
  _oneof_case_[0] = kWebauthnCredential;
}
inline ::sync_pb::WebauthnCredentialSpecifics* EntitySpecifics::release_webauthn_credential() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.webauthn_credential)
  if (_internal_has_webauthn_credential()) {
    clear_has_specifics_variant();
    ::sync_pb::WebauthnCredentialSpecifics* temp = specifics_variant_.webauthn_credential_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.webauthn_credential_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WebauthnCredentialSpecifics& EntitySpecifics::_internal_webauthn_credential() const {
  return _internal_has_webauthn_credential()
      ? *specifics_variant_.webauthn_credential_
      : reinterpret_cast< ::sync_pb::WebauthnCredentialSpecifics&>(::sync_pb::_WebauthnCredentialSpecifics_default_instance_);
}
inline const ::sync_pb::WebauthnCredentialSpecifics& EntitySpecifics::webauthn_credential() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.webauthn_credential)
  return _internal_webauthn_credential();
}
inline ::sync_pb::WebauthnCredentialSpecifics* EntitySpecifics::unsafe_arena_release_webauthn_credential() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.webauthn_credential)
  if (_internal_has_webauthn_credential()) {
    clear_has_specifics_variant();
    ::sync_pb::WebauthnCredentialSpecifics* temp = specifics_variant_.webauthn_credential_;
    specifics_variant_.webauthn_credential_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_webauthn_credential(::sync_pb::WebauthnCredentialSpecifics* webauthn_credential) {
  clear_specifics_variant();
  if (webauthn_credential) {
    set_has_webauthn_credential();
    specifics_variant_.webauthn_credential_ = webauthn_credential;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.webauthn_credential)
}
inline ::sync_pb::WebauthnCredentialSpecifics* EntitySpecifics::_internal_mutable_webauthn_credential() {
  if (!_internal_has_webauthn_credential()) {
    clear_specifics_variant();
    set_has_webauthn_credential();
    specifics_variant_.webauthn_credential_ = CreateMaybeMessage< ::sync_pb::WebauthnCredentialSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.webauthn_credential_;
}
inline ::sync_pb::WebauthnCredentialSpecifics* EntitySpecifics::mutable_webauthn_credential() {
  ::sync_pb::WebauthnCredentialSpecifics* _msg = _internal_mutable_webauthn_credential();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.webauthn_credential)
  return _msg;
}

// .sync_pb.HistorySpecifics history = 963985;
inline bool EntitySpecifics::_internal_has_history() const {
  return specifics_variant_case() == kHistory;
}
inline bool EntitySpecifics::has_history() const {
  return _internal_has_history();
}
inline void EntitySpecifics::set_has_history() {
  _oneof_case_[0] = kHistory;
}
inline ::sync_pb::HistorySpecifics* EntitySpecifics::release_history() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.history)
  if (_internal_has_history()) {
    clear_has_specifics_variant();
    ::sync_pb::HistorySpecifics* temp = specifics_variant_.history_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::HistorySpecifics& EntitySpecifics::_internal_history() const {
  return _internal_has_history()
      ? *specifics_variant_.history_
      : reinterpret_cast< ::sync_pb::HistorySpecifics&>(::sync_pb::_HistorySpecifics_default_instance_);
}
inline const ::sync_pb::HistorySpecifics& EntitySpecifics::history() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.history)
  return _internal_history();
}
inline ::sync_pb::HistorySpecifics* EntitySpecifics::unsafe_arena_release_history() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.history)
  if (_internal_has_history()) {
    clear_has_specifics_variant();
    ::sync_pb::HistorySpecifics* temp = specifics_variant_.history_;
    specifics_variant_.history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_history(::sync_pb::HistorySpecifics* history) {
  clear_specifics_variant();
  if (history) {
    set_has_history();
    specifics_variant_.history_ = history;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.history)
}
inline ::sync_pb::HistorySpecifics* EntitySpecifics::_internal_mutable_history() {
  if (!_internal_has_history()) {
    clear_specifics_variant();
    set_has_history();
    specifics_variant_.history_ = CreateMaybeMessage< ::sync_pb::HistorySpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.history_;
}
inline ::sync_pb::HistorySpecifics* EntitySpecifics::mutable_history() {
  ::sync_pb::HistorySpecifics* _msg = _internal_mutable_history();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.history)
  return _msg;
}

// .sync_pb.PrintersAuthorizationServerSpecifics printers_authorization_server = 974304;
inline bool EntitySpecifics::_internal_has_printers_authorization_server() const {
  return specifics_variant_case() == kPrintersAuthorizationServer;
}
inline bool EntitySpecifics::has_printers_authorization_server() const {
  return _internal_has_printers_authorization_server();
}
inline void EntitySpecifics::set_has_printers_authorization_server() {
  _oneof_case_[0] = kPrintersAuthorizationServer;
}
inline ::sync_pb::PrintersAuthorizationServerSpecifics* EntitySpecifics::release_printers_authorization_server() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.printers_authorization_server)
  if (_internal_has_printers_authorization_server()) {
    clear_has_specifics_variant();
    ::sync_pb::PrintersAuthorizationServerSpecifics* temp = specifics_variant_.printers_authorization_server_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.printers_authorization_server_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PrintersAuthorizationServerSpecifics& EntitySpecifics::_internal_printers_authorization_server() const {
  return _internal_has_printers_authorization_server()
      ? *specifics_variant_.printers_authorization_server_
      : reinterpret_cast< ::sync_pb::PrintersAuthorizationServerSpecifics&>(::sync_pb::_PrintersAuthorizationServerSpecifics_default_instance_);
}
inline const ::sync_pb::PrintersAuthorizationServerSpecifics& EntitySpecifics::printers_authorization_server() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.printers_authorization_server)
  return _internal_printers_authorization_server();
}
inline ::sync_pb::PrintersAuthorizationServerSpecifics* EntitySpecifics::unsafe_arena_release_printers_authorization_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.printers_authorization_server)
  if (_internal_has_printers_authorization_server()) {
    clear_has_specifics_variant();
    ::sync_pb::PrintersAuthorizationServerSpecifics* temp = specifics_variant_.printers_authorization_server_;
    specifics_variant_.printers_authorization_server_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_printers_authorization_server(::sync_pb::PrintersAuthorizationServerSpecifics* printers_authorization_server) {
  clear_specifics_variant();
  if (printers_authorization_server) {
    set_has_printers_authorization_server();
    specifics_variant_.printers_authorization_server_ = printers_authorization_server;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.printers_authorization_server)
}
inline ::sync_pb::PrintersAuthorizationServerSpecifics* EntitySpecifics::_internal_mutable_printers_authorization_server() {
  if (!_internal_has_printers_authorization_server()) {
    clear_specifics_variant();
    set_has_printers_authorization_server();
    specifics_variant_.printers_authorization_server_ = CreateMaybeMessage< ::sync_pb::PrintersAuthorizationServerSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.printers_authorization_server_;
}
inline ::sync_pb::PrintersAuthorizationServerSpecifics* EntitySpecifics::mutable_printers_authorization_server() {
  ::sync_pb::PrintersAuthorizationServerSpecifics* _msg = _internal_mutable_printers_authorization_server();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.printers_authorization_server)
  return _msg;
}

// .sync_pb.SavedTabGroupSpecifics saved_tab_group = 1004874;
inline bool EntitySpecifics::_internal_has_saved_tab_group() const {
  return specifics_variant_case() == kSavedTabGroup;
}
inline bool EntitySpecifics::has_saved_tab_group() const {
  return _internal_has_saved_tab_group();
}
inline void EntitySpecifics::set_has_saved_tab_group() {
  _oneof_case_[0] = kSavedTabGroup;
}
inline ::sync_pb::SavedTabGroupSpecifics* EntitySpecifics::release_saved_tab_group() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.saved_tab_group)
  if (_internal_has_saved_tab_group()) {
    clear_has_specifics_variant();
    ::sync_pb::SavedTabGroupSpecifics* temp = specifics_variant_.saved_tab_group_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.saved_tab_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SavedTabGroupSpecifics& EntitySpecifics::_internal_saved_tab_group() const {
  return _internal_has_saved_tab_group()
      ? *specifics_variant_.saved_tab_group_
      : reinterpret_cast< ::sync_pb::SavedTabGroupSpecifics&>(::sync_pb::_SavedTabGroupSpecifics_default_instance_);
}
inline const ::sync_pb::SavedTabGroupSpecifics& EntitySpecifics::saved_tab_group() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.saved_tab_group)
  return _internal_saved_tab_group();
}
inline ::sync_pb::SavedTabGroupSpecifics* EntitySpecifics::unsafe_arena_release_saved_tab_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.saved_tab_group)
  if (_internal_has_saved_tab_group()) {
    clear_has_specifics_variant();
    ::sync_pb::SavedTabGroupSpecifics* temp = specifics_variant_.saved_tab_group_;
    specifics_variant_.saved_tab_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_saved_tab_group(::sync_pb::SavedTabGroupSpecifics* saved_tab_group) {
  clear_specifics_variant();
  if (saved_tab_group) {
    set_has_saved_tab_group();
    specifics_variant_.saved_tab_group_ = saved_tab_group;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.saved_tab_group)
}
inline ::sync_pb::SavedTabGroupSpecifics* EntitySpecifics::_internal_mutable_saved_tab_group() {
  if (!_internal_has_saved_tab_group()) {
    clear_specifics_variant();
    set_has_saved_tab_group();
    specifics_variant_.saved_tab_group_ = CreateMaybeMessage< ::sync_pb::SavedTabGroupSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.saved_tab_group_;
}
inline ::sync_pb::SavedTabGroupSpecifics* EntitySpecifics::mutable_saved_tab_group() {
  ::sync_pb::SavedTabGroupSpecifics* _msg = _internal_mutable_saved_tab_group();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.saved_tab_group)
  return _msg;
}

// .sync_pb.AutofillWalletUsageSpecifics autofill_wallet_usage = 1033580;
inline bool EntitySpecifics::_internal_has_autofill_wallet_usage() const {
  return specifics_variant_case() == kAutofillWalletUsage;
}
inline bool EntitySpecifics::has_autofill_wallet_usage() const {
  return _internal_has_autofill_wallet_usage();
}
inline void EntitySpecifics::set_has_autofill_wallet_usage() {
  _oneof_case_[0] = kAutofillWalletUsage;
}
inline ::sync_pb::AutofillWalletUsageSpecifics* EntitySpecifics::release_autofill_wallet_usage() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill_wallet_usage)
  if (_internal_has_autofill_wallet_usage()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillWalletUsageSpecifics* temp = specifics_variant_.autofill_wallet_usage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specifics_variant_.autofill_wallet_usage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillWalletUsageSpecifics& EntitySpecifics::_internal_autofill_wallet_usage() const {
  return _internal_has_autofill_wallet_usage()
      ? *specifics_variant_.autofill_wallet_usage_
      : reinterpret_cast< ::sync_pb::AutofillWalletUsageSpecifics&>(::sync_pb::_AutofillWalletUsageSpecifics_default_instance_);
}
inline const ::sync_pb::AutofillWalletUsageSpecifics& EntitySpecifics::autofill_wallet_usage() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill_wallet_usage)
  return _internal_autofill_wallet_usage();
}
inline ::sync_pb::AutofillWalletUsageSpecifics* EntitySpecifics::unsafe_arena_release_autofill_wallet_usage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.EntitySpecifics.autofill_wallet_usage)
  if (_internal_has_autofill_wallet_usage()) {
    clear_has_specifics_variant();
    ::sync_pb::AutofillWalletUsageSpecifics* temp = specifics_variant_.autofill_wallet_usage_;
    specifics_variant_.autofill_wallet_usage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntitySpecifics::unsafe_arena_set_allocated_autofill_wallet_usage(::sync_pb::AutofillWalletUsageSpecifics* autofill_wallet_usage) {
  clear_specifics_variant();
  if (autofill_wallet_usage) {
    set_has_autofill_wallet_usage();
    specifics_variant_.autofill_wallet_usage_ = autofill_wallet_usage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.EntitySpecifics.autofill_wallet_usage)
}
inline ::sync_pb::AutofillWalletUsageSpecifics* EntitySpecifics::_internal_mutable_autofill_wallet_usage() {
  if (!_internal_has_autofill_wallet_usage()) {
    clear_specifics_variant();
    set_has_autofill_wallet_usage();
    specifics_variant_.autofill_wallet_usage_ = CreateMaybeMessage< ::sync_pb::AutofillWalletUsageSpecifics >(GetArenaForAllocation());
  }
  return specifics_variant_.autofill_wallet_usage_;
}
inline ::sync_pb::AutofillWalletUsageSpecifics* EntitySpecifics::mutable_autofill_wallet_usage() {
  ::sync_pb::AutofillWalletUsageSpecifics* _msg = _internal_mutable_autofill_wallet_usage();
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill_wallet_usage)
  return _msg;
}

inline bool EntitySpecifics::has_specifics_variant() const {
  return specifics_variant_case() != SPECIFICS_VARIANT_NOT_SET;
}
inline void EntitySpecifics::clear_has_specifics_variant() {
  _oneof_case_[0] = SPECIFICS_VARIANT_NOT_SET;
}
inline EntitySpecifics::SpecificsVariantCase EntitySpecifics::specifics_variant_case() const {
  return EntitySpecifics::SpecificsVariantCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EmptySpecifics

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fentity_5fspecifics_2eproto
