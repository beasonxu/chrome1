// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/history_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fhistory_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fhistory_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/sync/protocol/sync_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fhistory_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fhistory_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class HistorySpecifics;
struct HistorySpecificsDefaultTypeInternal;
extern HistorySpecificsDefaultTypeInternal _HistorySpecifics_default_instance_;
class HistorySpecifics_PageTransition;
struct HistorySpecifics_PageTransitionDefaultTypeInternal;
extern HistorySpecifics_PageTransitionDefaultTypeInternal _HistorySpecifics_PageTransition_default_instance_;
class HistorySpecifics_RedirectEntry;
struct HistorySpecifics_RedirectEntryDefaultTypeInternal;
extern HistorySpecifics_RedirectEntryDefaultTypeInternal _HistorySpecifics_RedirectEntry_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::HistorySpecifics* Arena::CreateMaybeMessage<::sync_pb::HistorySpecifics>(Arena*);
template<> ::sync_pb::HistorySpecifics_PageTransition* Arena::CreateMaybeMessage<::sync_pb::HistorySpecifics_PageTransition>(Arena*);
template<> ::sync_pb::HistorySpecifics_RedirectEntry* Arena::CreateMaybeMessage<::sync_pb::HistorySpecifics_RedirectEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class HistorySpecifics_RedirectEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.HistorySpecifics.RedirectEntry) */ {
 public:
  inline HistorySpecifics_RedirectEntry() : HistorySpecifics_RedirectEntry(nullptr) {}
  ~HistorySpecifics_RedirectEntry() override;
  explicit PROTOBUF_CONSTEXPR HistorySpecifics_RedirectEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistorySpecifics_RedirectEntry(const HistorySpecifics_RedirectEntry& from);
  HistorySpecifics_RedirectEntry(HistorySpecifics_RedirectEntry&& from) noexcept
    : HistorySpecifics_RedirectEntry() {
    *this = ::std::move(from);
  }

  inline HistorySpecifics_RedirectEntry& operator=(const HistorySpecifics_RedirectEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistorySpecifics_RedirectEntry& operator=(HistorySpecifics_RedirectEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HistorySpecifics_RedirectEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistorySpecifics_RedirectEntry* internal_default_instance() {
    return reinterpret_cast<const HistorySpecifics_RedirectEntry*>(
               &_HistorySpecifics_RedirectEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistorySpecifics_RedirectEntry& a, HistorySpecifics_RedirectEntry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HistorySpecifics_RedirectEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistorySpecifics_RedirectEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistorySpecifics_RedirectEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HistorySpecifics_RedirectEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HistorySpecifics_RedirectEntry& from);
  void MergeFrom(const HistorySpecifics_RedirectEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HistorySpecifics_RedirectEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.HistorySpecifics.RedirectEntry";
  }
  protected:
  explicit HistorySpecifics_RedirectEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kTitleFieldNumber = 3,
    kOriginatorVisitIdFieldNumber = 1,
    kHiddenFieldNumber = 4,
    kRedirectTypeFieldNumber = 5,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional int64 originator_visit_id = 1;
  bool has_originator_visit_id() const;
  private:
  bool _internal_has_originator_visit_id() const;
  public:
  void clear_originator_visit_id();
  int64_t originator_visit_id() const;
  void set_originator_visit_id(int64_t value);
  private:
  int64_t _internal_originator_visit_id() const;
  void _internal_set_originator_visit_id(int64_t value);
  public:

  // optional bool hidden = 4;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 5;
  bool has_redirect_type() const;
  private:
  bool _internal_has_redirect_type() const;
  public:
  void clear_redirect_type();
  ::sync_pb::SyncEnums_PageTransitionRedirectType redirect_type() const;
  void set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value);
  private:
  ::sync_pb::SyncEnums_PageTransitionRedirectType _internal_redirect_type() const;
  void _internal_set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.HistorySpecifics.RedirectEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  int64_t originator_visit_id_;
  bool hidden_;
  int redirect_type_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fhistory_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class HistorySpecifics_PageTransition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.HistorySpecifics.PageTransition) */ {
 public:
  inline HistorySpecifics_PageTransition() : HistorySpecifics_PageTransition(nullptr) {}
  ~HistorySpecifics_PageTransition() override;
  explicit PROTOBUF_CONSTEXPR HistorySpecifics_PageTransition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistorySpecifics_PageTransition(const HistorySpecifics_PageTransition& from);
  HistorySpecifics_PageTransition(HistorySpecifics_PageTransition&& from) noexcept
    : HistorySpecifics_PageTransition() {
    *this = ::std::move(from);
  }

  inline HistorySpecifics_PageTransition& operator=(const HistorySpecifics_PageTransition& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistorySpecifics_PageTransition& operator=(HistorySpecifics_PageTransition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HistorySpecifics_PageTransition& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistorySpecifics_PageTransition* internal_default_instance() {
    return reinterpret_cast<const HistorySpecifics_PageTransition*>(
               &_HistorySpecifics_PageTransition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HistorySpecifics_PageTransition& a, HistorySpecifics_PageTransition& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HistorySpecifics_PageTransition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistorySpecifics_PageTransition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistorySpecifics_PageTransition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HistorySpecifics_PageTransition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HistorySpecifics_PageTransition& from);
  void MergeFrom(const HistorySpecifics_PageTransition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HistorySpecifics_PageTransition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.HistorySpecifics.PageTransition";
  }
  protected:
  explicit HistorySpecifics_PageTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoreTransitionFieldNumber = 1,
    kBlockedFieldNumber = 2,
    kForwardBackFieldNumber = 3,
    kFromAddressBarFieldNumber = 4,
    kHomePageFieldNumber = 5,
  };
  // optional .sync_pb.SyncEnums.PageTransition core_transition = 1 [default = LINK];
  bool has_core_transition() const;
  private:
  bool _internal_has_core_transition() const;
  public:
  void clear_core_transition();
  ::sync_pb::SyncEnums_PageTransition core_transition() const;
  void set_core_transition(::sync_pb::SyncEnums_PageTransition value);
  private:
  ::sync_pb::SyncEnums_PageTransition _internal_core_transition() const;
  void _internal_set_core_transition(::sync_pb::SyncEnums_PageTransition value);
  public:

  // optional bool blocked = 2;
  bool has_blocked() const;
  private:
  bool _internal_has_blocked() const;
  public:
  void clear_blocked();
  bool blocked() const;
  void set_blocked(bool value);
  private:
  bool _internal_blocked() const;
  void _internal_set_blocked(bool value);
  public:

  // optional bool forward_back = 3;
  bool has_forward_back() const;
  private:
  bool _internal_has_forward_back() const;
  public:
  void clear_forward_back();
  bool forward_back() const;
  void set_forward_back(bool value);
  private:
  bool _internal_forward_back() const;
  void _internal_set_forward_back(bool value);
  public:

  // optional bool from_address_bar = 4;
  bool has_from_address_bar() const;
  private:
  bool _internal_has_from_address_bar() const;
  public:
  void clear_from_address_bar();
  bool from_address_bar() const;
  void set_from_address_bar(bool value);
  private:
  bool _internal_from_address_bar() const;
  void _internal_set_from_address_bar(bool value);
  public:

  // optional bool home_page = 5;
  bool has_home_page() const;
  private:
  bool _internal_has_home_page() const;
  public:
  void clear_home_page();
  bool home_page() const;
  void set_home_page(bool value);
  private:
  bool _internal_home_page() const;
  void _internal_set_home_page(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.HistorySpecifics.PageTransition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int core_transition_;
  bool blocked_;
  bool forward_back_;
  bool from_address_bar_;
  bool home_page_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fhistory_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class HistorySpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.HistorySpecifics) */ {
 public:
  inline HistorySpecifics() : HistorySpecifics(nullptr) {}
  ~HistorySpecifics() override;
  explicit PROTOBUF_CONSTEXPR HistorySpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistorySpecifics(const HistorySpecifics& from);
  HistorySpecifics(HistorySpecifics&& from) noexcept
    : HistorySpecifics() {
    *this = ::std::move(from);
  }

  inline HistorySpecifics& operator=(const HistorySpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistorySpecifics& operator=(HistorySpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HistorySpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistorySpecifics* internal_default_instance() {
    return reinterpret_cast<const HistorySpecifics*>(
               &_HistorySpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HistorySpecifics& a, HistorySpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HistorySpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistorySpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistorySpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HistorySpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HistorySpecifics& from);
  void MergeFrom(const HistorySpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HistorySpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.HistorySpecifics";
  }
  protected:
  explicit HistorySpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef HistorySpecifics_RedirectEntry RedirectEntry;
  typedef HistorySpecifics_PageTransition PageTransition;

  // accessors -------------------------------------------------------

  enum : int {
    kRedirectEntriesFieldNumber = 3,
    kOriginatorCacheGuidFieldNumber = 2,
    kPageTransitionFieldNumber = 4,
    kVisitTimeWindowsEpochMicrosFieldNumber = 1,
    kOriginatorReferringVisitIdFieldNumber = 5,
    kOriginatorOpenerVisitIdFieldNumber = 6,
    kVisitDurationMicrosFieldNumber = 7,
  };
  // repeated .sync_pb.HistorySpecifics.RedirectEntry redirect_entries = 3;
  int redirect_entries_size() const;
  private:
  int _internal_redirect_entries_size() const;
  public:
  void clear_redirect_entries();
  ::sync_pb::HistorySpecifics_RedirectEntry* mutable_redirect_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::HistorySpecifics_RedirectEntry >*
      mutable_redirect_entries();
  private:
  const ::sync_pb::HistorySpecifics_RedirectEntry& _internal_redirect_entries(int index) const;
  ::sync_pb::HistorySpecifics_RedirectEntry* _internal_add_redirect_entries();
  public:
  const ::sync_pb::HistorySpecifics_RedirectEntry& redirect_entries(int index) const;
  ::sync_pb::HistorySpecifics_RedirectEntry* add_redirect_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::HistorySpecifics_RedirectEntry >&
      redirect_entries() const;

  // optional string originator_cache_guid = 2;
  bool has_originator_cache_guid() const;
  private:
  bool _internal_has_originator_cache_guid() const;
  public:
  void clear_originator_cache_guid();
  const std::string& originator_cache_guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originator_cache_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originator_cache_guid();
  PROTOBUF_NODISCARD std::string* release_originator_cache_guid();
  void set_allocated_originator_cache_guid(std::string* originator_cache_guid);
  private:
  const std::string& _internal_originator_cache_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originator_cache_guid(const std::string& value);
  std::string* _internal_mutable_originator_cache_guid();
  public:

  // optional .sync_pb.HistorySpecifics.PageTransition page_transition = 4;
  bool has_page_transition() const;
  private:
  bool _internal_has_page_transition() const;
  public:
  void clear_page_transition();
  const ::sync_pb::HistorySpecifics_PageTransition& page_transition() const;
  PROTOBUF_NODISCARD ::sync_pb::HistorySpecifics_PageTransition* release_page_transition();
  ::sync_pb::HistorySpecifics_PageTransition* mutable_page_transition();
  void set_allocated_page_transition(::sync_pb::HistorySpecifics_PageTransition* page_transition);
  private:
  const ::sync_pb::HistorySpecifics_PageTransition& _internal_page_transition() const;
  ::sync_pb::HistorySpecifics_PageTransition* _internal_mutable_page_transition();
  public:
  void unsafe_arena_set_allocated_page_transition(
      ::sync_pb::HistorySpecifics_PageTransition* page_transition);
  ::sync_pb::HistorySpecifics_PageTransition* unsafe_arena_release_page_transition();

  // optional int64 visit_time_windows_epoch_micros = 1;
  bool has_visit_time_windows_epoch_micros() const;
  private:
  bool _internal_has_visit_time_windows_epoch_micros() const;
  public:
  void clear_visit_time_windows_epoch_micros();
  int64_t visit_time_windows_epoch_micros() const;
  void set_visit_time_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_visit_time_windows_epoch_micros() const;
  void _internal_set_visit_time_windows_epoch_micros(int64_t value);
  public:

  // optional int64 originator_referring_visit_id = 5;
  bool has_originator_referring_visit_id() const;
  private:
  bool _internal_has_originator_referring_visit_id() const;
  public:
  void clear_originator_referring_visit_id();
  int64_t originator_referring_visit_id() const;
  void set_originator_referring_visit_id(int64_t value);
  private:
  int64_t _internal_originator_referring_visit_id() const;
  void _internal_set_originator_referring_visit_id(int64_t value);
  public:

  // optional int64 originator_opener_visit_id = 6;
  bool has_originator_opener_visit_id() const;
  private:
  bool _internal_has_originator_opener_visit_id() const;
  public:
  void clear_originator_opener_visit_id();
  int64_t originator_opener_visit_id() const;
  void set_originator_opener_visit_id(int64_t value);
  private:
  int64_t _internal_originator_opener_visit_id() const;
  void _internal_set_originator_opener_visit_id(int64_t value);
  public:

  // optional int64 visit_duration_micros = 7;
  bool has_visit_duration_micros() const;
  private:
  bool _internal_has_visit_duration_micros() const;
  public:
  void clear_visit_duration_micros();
  int64_t visit_duration_micros() const;
  void set_visit_duration_micros(int64_t value);
  private:
  int64_t _internal_visit_duration_micros() const;
  void _internal_set_visit_duration_micros(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.HistorySpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::HistorySpecifics_RedirectEntry > redirect_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originator_cache_guid_;
  ::sync_pb::HistorySpecifics_PageTransition* page_transition_;
  int64_t visit_time_windows_epoch_micros_;
  int64_t originator_referring_visit_id_;
  int64_t originator_opener_visit_id_;
  int64_t visit_duration_micros_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fhistory_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistorySpecifics_RedirectEntry

// optional int64 originator_visit_id = 1;
inline bool HistorySpecifics_RedirectEntry::_internal_has_originator_visit_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HistorySpecifics_RedirectEntry::has_originator_visit_id() const {
  return _internal_has_originator_visit_id();
}
inline void HistorySpecifics_RedirectEntry::clear_originator_visit_id() {
  originator_visit_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t HistorySpecifics_RedirectEntry::_internal_originator_visit_id() const {
  return originator_visit_id_;
}
inline int64_t HistorySpecifics_RedirectEntry::originator_visit_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.RedirectEntry.originator_visit_id)
  return _internal_originator_visit_id();
}
inline void HistorySpecifics_RedirectEntry::_internal_set_originator_visit_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  originator_visit_id_ = value;
}
inline void HistorySpecifics_RedirectEntry::set_originator_visit_id(int64_t value) {
  _internal_set_originator_visit_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.RedirectEntry.originator_visit_id)
}

// optional string url = 2;
inline bool HistorySpecifics_RedirectEntry::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistorySpecifics_RedirectEntry::has_url() const {
  return _internal_has_url();
}
inline void HistorySpecifics_RedirectEntry::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HistorySpecifics_RedirectEntry::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.RedirectEntry.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HistorySpecifics_RedirectEntry::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.RedirectEntry.url)
}
inline std::string* HistorySpecifics_RedirectEntry::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.HistorySpecifics.RedirectEntry.url)
  return _s;
}
inline const std::string& HistorySpecifics_RedirectEntry::_internal_url() const {
  return url_.Get();
}
inline void HistorySpecifics_RedirectEntry::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* HistorySpecifics_RedirectEntry::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* HistorySpecifics_RedirectEntry::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.HistorySpecifics.RedirectEntry.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HistorySpecifics_RedirectEntry::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistorySpecifics.RedirectEntry.url)
}

// optional string title = 3;
inline bool HistorySpecifics_RedirectEntry::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistorySpecifics_RedirectEntry::has_title() const {
  return _internal_has_title();
}
inline void HistorySpecifics_RedirectEntry::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HistorySpecifics_RedirectEntry::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.RedirectEntry.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HistorySpecifics_RedirectEntry::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.RedirectEntry.title)
}
inline std::string* HistorySpecifics_RedirectEntry::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.HistorySpecifics.RedirectEntry.title)
  return _s;
}
inline const std::string& HistorySpecifics_RedirectEntry::_internal_title() const {
  return title_.Get();
}
inline void HistorySpecifics_RedirectEntry::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* HistorySpecifics_RedirectEntry::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* HistorySpecifics_RedirectEntry::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.HistorySpecifics.RedirectEntry.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HistorySpecifics_RedirectEntry::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistorySpecifics.RedirectEntry.title)
}

// optional bool hidden = 4;
inline bool HistorySpecifics_RedirectEntry::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HistorySpecifics_RedirectEntry::has_hidden() const {
  return _internal_has_hidden();
}
inline void HistorySpecifics_RedirectEntry::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool HistorySpecifics_RedirectEntry::_internal_hidden() const {
  return hidden_;
}
inline bool HistorySpecifics_RedirectEntry::hidden() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.RedirectEntry.hidden)
  return _internal_hidden();
}
inline void HistorySpecifics_RedirectEntry::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000008u;
  hidden_ = value;
}
inline void HistorySpecifics_RedirectEntry::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.RedirectEntry.hidden)
}

// optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 5;
inline bool HistorySpecifics_RedirectEntry::_internal_has_redirect_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HistorySpecifics_RedirectEntry::has_redirect_type() const {
  return _internal_has_redirect_type();
}
inline void HistorySpecifics_RedirectEntry::clear_redirect_type() {
  redirect_type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::SyncEnums_PageTransitionRedirectType HistorySpecifics_RedirectEntry::_internal_redirect_type() const {
  return static_cast< ::sync_pb::SyncEnums_PageTransitionRedirectType >(redirect_type_);
}
inline ::sync_pb::SyncEnums_PageTransitionRedirectType HistorySpecifics_RedirectEntry::redirect_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.RedirectEntry.redirect_type)
  return _internal_redirect_type();
}
inline void HistorySpecifics_RedirectEntry::_internal_set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value) {
  assert(::sync_pb::SyncEnums_PageTransitionRedirectType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  redirect_type_ = value;
}
inline void HistorySpecifics_RedirectEntry::set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value) {
  _internal_set_redirect_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.RedirectEntry.redirect_type)
}

// -------------------------------------------------------------------

// HistorySpecifics_PageTransition

// optional .sync_pb.SyncEnums.PageTransition core_transition = 1 [default = LINK];
inline bool HistorySpecifics_PageTransition::_internal_has_core_transition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistorySpecifics_PageTransition::has_core_transition() const {
  return _internal_has_core_transition();
}
inline void HistorySpecifics_PageTransition::clear_core_transition() {
  core_transition_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::SyncEnums_PageTransition HistorySpecifics_PageTransition::_internal_core_transition() const {
  return static_cast< ::sync_pb::SyncEnums_PageTransition >(core_transition_);
}
inline ::sync_pb::SyncEnums_PageTransition HistorySpecifics_PageTransition::core_transition() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.PageTransition.core_transition)
  return _internal_core_transition();
}
inline void HistorySpecifics_PageTransition::_internal_set_core_transition(::sync_pb::SyncEnums_PageTransition value) {
  assert(::sync_pb::SyncEnums_PageTransition_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  core_transition_ = value;
}
inline void HistorySpecifics_PageTransition::set_core_transition(::sync_pb::SyncEnums_PageTransition value) {
  _internal_set_core_transition(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.PageTransition.core_transition)
}

// optional bool blocked = 2;
inline bool HistorySpecifics_PageTransition::_internal_has_blocked() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistorySpecifics_PageTransition::has_blocked() const {
  return _internal_has_blocked();
}
inline void HistorySpecifics_PageTransition::clear_blocked() {
  blocked_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool HistorySpecifics_PageTransition::_internal_blocked() const {
  return blocked_;
}
inline bool HistorySpecifics_PageTransition::blocked() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.PageTransition.blocked)
  return _internal_blocked();
}
inline void HistorySpecifics_PageTransition::_internal_set_blocked(bool value) {
  _has_bits_[0] |= 0x00000002u;
  blocked_ = value;
}
inline void HistorySpecifics_PageTransition::set_blocked(bool value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.PageTransition.blocked)
}

// optional bool forward_back = 3;
inline bool HistorySpecifics_PageTransition::_internal_has_forward_back() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HistorySpecifics_PageTransition::has_forward_back() const {
  return _internal_has_forward_back();
}
inline void HistorySpecifics_PageTransition::clear_forward_back() {
  forward_back_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HistorySpecifics_PageTransition::_internal_forward_back() const {
  return forward_back_;
}
inline bool HistorySpecifics_PageTransition::forward_back() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.PageTransition.forward_back)
  return _internal_forward_back();
}
inline void HistorySpecifics_PageTransition::_internal_set_forward_back(bool value) {
  _has_bits_[0] |= 0x00000004u;
  forward_back_ = value;
}
inline void HistorySpecifics_PageTransition::set_forward_back(bool value) {
  _internal_set_forward_back(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.PageTransition.forward_back)
}

// optional bool from_address_bar = 4;
inline bool HistorySpecifics_PageTransition::_internal_has_from_address_bar() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HistorySpecifics_PageTransition::has_from_address_bar() const {
  return _internal_has_from_address_bar();
}
inline void HistorySpecifics_PageTransition::clear_from_address_bar() {
  from_address_bar_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool HistorySpecifics_PageTransition::_internal_from_address_bar() const {
  return from_address_bar_;
}
inline bool HistorySpecifics_PageTransition::from_address_bar() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.PageTransition.from_address_bar)
  return _internal_from_address_bar();
}
inline void HistorySpecifics_PageTransition::_internal_set_from_address_bar(bool value) {
  _has_bits_[0] |= 0x00000008u;
  from_address_bar_ = value;
}
inline void HistorySpecifics_PageTransition::set_from_address_bar(bool value) {
  _internal_set_from_address_bar(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.PageTransition.from_address_bar)
}

// optional bool home_page = 5;
inline bool HistorySpecifics_PageTransition::_internal_has_home_page() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HistorySpecifics_PageTransition::has_home_page() const {
  return _internal_has_home_page();
}
inline void HistorySpecifics_PageTransition::clear_home_page() {
  home_page_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool HistorySpecifics_PageTransition::_internal_home_page() const {
  return home_page_;
}
inline bool HistorySpecifics_PageTransition::home_page() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.PageTransition.home_page)
  return _internal_home_page();
}
inline void HistorySpecifics_PageTransition::_internal_set_home_page(bool value) {
  _has_bits_[0] |= 0x00000010u;
  home_page_ = value;
}
inline void HistorySpecifics_PageTransition::set_home_page(bool value) {
  _internal_set_home_page(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.PageTransition.home_page)
}

// -------------------------------------------------------------------

// HistorySpecifics

// optional int64 visit_time_windows_epoch_micros = 1;
inline bool HistorySpecifics::_internal_has_visit_time_windows_epoch_micros() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HistorySpecifics::has_visit_time_windows_epoch_micros() const {
  return _internal_has_visit_time_windows_epoch_micros();
}
inline void HistorySpecifics::clear_visit_time_windows_epoch_micros() {
  visit_time_windows_epoch_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t HistorySpecifics::_internal_visit_time_windows_epoch_micros() const {
  return visit_time_windows_epoch_micros_;
}
inline int64_t HistorySpecifics::visit_time_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.visit_time_windows_epoch_micros)
  return _internal_visit_time_windows_epoch_micros();
}
inline void HistorySpecifics::_internal_set_visit_time_windows_epoch_micros(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  visit_time_windows_epoch_micros_ = value;
}
inline void HistorySpecifics::set_visit_time_windows_epoch_micros(int64_t value) {
  _internal_set_visit_time_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.visit_time_windows_epoch_micros)
}

// optional string originator_cache_guid = 2;
inline bool HistorySpecifics::_internal_has_originator_cache_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistorySpecifics::has_originator_cache_guid() const {
  return _internal_has_originator_cache_guid();
}
inline void HistorySpecifics::clear_originator_cache_guid() {
  originator_cache_guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HistorySpecifics::originator_cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.originator_cache_guid)
  return _internal_originator_cache_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HistorySpecifics::set_originator_cache_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 originator_cache_guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.originator_cache_guid)
}
inline std::string* HistorySpecifics::mutable_originator_cache_guid() {
  std::string* _s = _internal_mutable_originator_cache_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.HistorySpecifics.originator_cache_guid)
  return _s;
}
inline const std::string& HistorySpecifics::_internal_originator_cache_guid() const {
  return originator_cache_guid_.Get();
}
inline void HistorySpecifics::_internal_set_originator_cache_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  originator_cache_guid_.Set(value, GetArenaForAllocation());
}
inline std::string* HistorySpecifics::_internal_mutable_originator_cache_guid() {
  _has_bits_[0] |= 0x00000001u;
  return originator_cache_guid_.Mutable(GetArenaForAllocation());
}
inline std::string* HistorySpecifics::release_originator_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.HistorySpecifics.originator_cache_guid)
  if (!_internal_has_originator_cache_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = originator_cache_guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (originator_cache_guid_.IsDefault()) {
    originator_cache_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HistorySpecifics::set_allocated_originator_cache_guid(std::string* originator_cache_guid) {
  if (originator_cache_guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  originator_cache_guid_.SetAllocated(originator_cache_guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (originator_cache_guid_.IsDefault()) {
    originator_cache_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistorySpecifics.originator_cache_guid)
}

// repeated .sync_pb.HistorySpecifics.RedirectEntry redirect_entries = 3;
inline int HistorySpecifics::_internal_redirect_entries_size() const {
  return redirect_entries_.size();
}
inline int HistorySpecifics::redirect_entries_size() const {
  return _internal_redirect_entries_size();
}
inline void HistorySpecifics::clear_redirect_entries() {
  redirect_entries_.Clear();
}
inline ::sync_pb::HistorySpecifics_RedirectEntry* HistorySpecifics::mutable_redirect_entries(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.HistorySpecifics.redirect_entries)
  return redirect_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::HistorySpecifics_RedirectEntry >*
HistorySpecifics::mutable_redirect_entries() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.HistorySpecifics.redirect_entries)
  return &redirect_entries_;
}
inline const ::sync_pb::HistorySpecifics_RedirectEntry& HistorySpecifics::_internal_redirect_entries(int index) const {
  return redirect_entries_.Get(index);
}
inline const ::sync_pb::HistorySpecifics_RedirectEntry& HistorySpecifics::redirect_entries(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.redirect_entries)
  return _internal_redirect_entries(index);
}
inline ::sync_pb::HistorySpecifics_RedirectEntry* HistorySpecifics::_internal_add_redirect_entries() {
  return redirect_entries_.Add();
}
inline ::sync_pb::HistorySpecifics_RedirectEntry* HistorySpecifics::add_redirect_entries() {
  ::sync_pb::HistorySpecifics_RedirectEntry* _add = _internal_add_redirect_entries();
  // @@protoc_insertion_point(field_add:sync_pb.HistorySpecifics.redirect_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::HistorySpecifics_RedirectEntry >&
HistorySpecifics::redirect_entries() const {
  // @@protoc_insertion_point(field_list:sync_pb.HistorySpecifics.redirect_entries)
  return redirect_entries_;
}

// optional .sync_pb.HistorySpecifics.PageTransition page_transition = 4;
inline bool HistorySpecifics::_internal_has_page_transition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || page_transition_ != nullptr);
  return value;
}
inline bool HistorySpecifics::has_page_transition() const {
  return _internal_has_page_transition();
}
inline void HistorySpecifics::clear_page_transition() {
  if (page_transition_ != nullptr) page_transition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::HistorySpecifics_PageTransition& HistorySpecifics::_internal_page_transition() const {
  const ::sync_pb::HistorySpecifics_PageTransition* p = page_transition_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::HistorySpecifics_PageTransition&>(
      ::sync_pb::_HistorySpecifics_PageTransition_default_instance_);
}
inline const ::sync_pb::HistorySpecifics_PageTransition& HistorySpecifics::page_transition() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.page_transition)
  return _internal_page_transition();
}
inline void HistorySpecifics::unsafe_arena_set_allocated_page_transition(
    ::sync_pb::HistorySpecifics_PageTransition* page_transition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_transition_);
  }
  page_transition_ = page_transition;
  if (page_transition) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.HistorySpecifics.page_transition)
}
inline ::sync_pb::HistorySpecifics_PageTransition* HistorySpecifics::release_page_transition() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::HistorySpecifics_PageTransition* temp = page_transition_;
  page_transition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::HistorySpecifics_PageTransition* HistorySpecifics::unsafe_arena_release_page_transition() {
  // @@protoc_insertion_point(field_release:sync_pb.HistorySpecifics.page_transition)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::HistorySpecifics_PageTransition* temp = page_transition_;
  page_transition_ = nullptr;
  return temp;
}
inline ::sync_pb::HistorySpecifics_PageTransition* HistorySpecifics::_internal_mutable_page_transition() {
  _has_bits_[0] |= 0x00000002u;
  if (page_transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::HistorySpecifics_PageTransition>(GetArenaForAllocation());
    page_transition_ = p;
  }
  return page_transition_;
}
inline ::sync_pb::HistorySpecifics_PageTransition* HistorySpecifics::mutable_page_transition() {
  ::sync_pb::HistorySpecifics_PageTransition* _msg = _internal_mutable_page_transition();
  // @@protoc_insertion_point(field_mutable:sync_pb.HistorySpecifics.page_transition)
  return _msg;
}
inline void HistorySpecifics::set_allocated_page_transition(::sync_pb::HistorySpecifics_PageTransition* page_transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete page_transition_;
  }
  if (page_transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(page_transition);
    if (message_arena != submessage_arena) {
      page_transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_transition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  page_transition_ = page_transition;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistorySpecifics.page_transition)
}

// optional int64 originator_referring_visit_id = 5;
inline bool HistorySpecifics::_internal_has_originator_referring_visit_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HistorySpecifics::has_originator_referring_visit_id() const {
  return _internal_has_originator_referring_visit_id();
}
inline void HistorySpecifics::clear_originator_referring_visit_id() {
  originator_referring_visit_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t HistorySpecifics::_internal_originator_referring_visit_id() const {
  return originator_referring_visit_id_;
}
inline int64_t HistorySpecifics::originator_referring_visit_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.originator_referring_visit_id)
  return _internal_originator_referring_visit_id();
}
inline void HistorySpecifics::_internal_set_originator_referring_visit_id(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  originator_referring_visit_id_ = value;
}
inline void HistorySpecifics::set_originator_referring_visit_id(int64_t value) {
  _internal_set_originator_referring_visit_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.originator_referring_visit_id)
}

// optional int64 originator_opener_visit_id = 6;
inline bool HistorySpecifics::_internal_has_originator_opener_visit_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HistorySpecifics::has_originator_opener_visit_id() const {
  return _internal_has_originator_opener_visit_id();
}
inline void HistorySpecifics::clear_originator_opener_visit_id() {
  originator_opener_visit_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t HistorySpecifics::_internal_originator_opener_visit_id() const {
  return originator_opener_visit_id_;
}
inline int64_t HistorySpecifics::originator_opener_visit_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.originator_opener_visit_id)
  return _internal_originator_opener_visit_id();
}
inline void HistorySpecifics::_internal_set_originator_opener_visit_id(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  originator_opener_visit_id_ = value;
}
inline void HistorySpecifics::set_originator_opener_visit_id(int64_t value) {
  _internal_set_originator_opener_visit_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.originator_opener_visit_id)
}

// optional int64 visit_duration_micros = 7;
inline bool HistorySpecifics::_internal_has_visit_duration_micros() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HistorySpecifics::has_visit_duration_micros() const {
  return _internal_has_visit_duration_micros();
}
inline void HistorySpecifics::clear_visit_duration_micros() {
  visit_duration_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t HistorySpecifics::_internal_visit_duration_micros() const {
  return visit_duration_micros_;
}
inline int64_t HistorySpecifics::visit_duration_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistorySpecifics.visit_duration_micros)
  return _internal_visit_duration_micros();
}
inline void HistorySpecifics::_internal_set_visit_duration_micros(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  visit_duration_micros_ = value;
}
inline void HistorySpecifics::set_visit_duration_micros(int64_t value) {
  _internal_set_visit_duration_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistorySpecifics.visit_duration_micros)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fhistory_5fspecifics_2eproto
