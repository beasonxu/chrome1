// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/contact_info_specifics.proto

#include "components/sync/protocol/contact_info_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR ContactInfoSpecifics_TokenMetadata::ContactInfoSpecifics_TokenMetadata(
    ::_pbi::ConstantInitialized)
  : status_(0)
{}
struct ContactInfoSpecifics_TokenMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactInfoSpecifics_TokenMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactInfoSpecifics_TokenMetadataDefaultTypeInternal() {}
  union {
    ContactInfoSpecifics_TokenMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactInfoSpecifics_TokenMetadataDefaultTypeInternal _ContactInfoSpecifics_TokenMetadata_default_instance_;
PROTOBUF_CONSTEXPR ContactInfoSpecifics_StringToken::ContactInfoSpecifics_StringToken(
    ::_pbi::ConstantInitialized)
  : value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , metadata_(nullptr){}
struct ContactInfoSpecifics_StringTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactInfoSpecifics_StringTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactInfoSpecifics_StringTokenDefaultTypeInternal() {}
  union {
    ContactInfoSpecifics_StringToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactInfoSpecifics_StringTokenDefaultTypeInternal _ContactInfoSpecifics_StringToken_default_instance_;
PROTOBUF_CONSTEXPR ContactInfoSpecifics_IntegerToken::ContactInfoSpecifics_IntegerToken(
    ::_pbi::ConstantInitialized)
  : metadata_(nullptr)
  , value_(int64_t{0}){}
struct ContactInfoSpecifics_IntegerTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactInfoSpecifics_IntegerTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactInfoSpecifics_IntegerTokenDefaultTypeInternal() {}
  union {
    ContactInfoSpecifics_IntegerToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactInfoSpecifics_IntegerTokenDefaultTypeInternal _ContactInfoSpecifics_IntegerToken_default_instance_;
PROTOBUF_CONSTEXPR ContactInfoSpecifics::ContactInfoSpecifics(
    ::_pbi::ConstantInitialized)
  : guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , profile_label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_honorific_(nullptr)
  , name_first_(nullptr)
  , name_middle_(nullptr)
  , name_last_(nullptr)
  , name_last_first_(nullptr)
  , name_last_conjunction_(nullptr)
  , name_last_second_(nullptr)
  , name_full_(nullptr)
  , name_full_with_honorific_(nullptr)
  , email_address_(nullptr)
  , company_name_(nullptr)
  , address_city_(nullptr)
  , address_state_(nullptr)
  , address_zip_(nullptr)
  , address_country_(nullptr)
  , address_street_address_(nullptr)
  , address_sorting_code_(nullptr)
  , address_dependent_locality_(nullptr)
  , address_language_code_(nullptr)
  , address_thoroughfare_name_(nullptr)
  , address_thoroughfare_number_(nullptr)
  , address_dependent_thoroughfare_name_(nullptr)
  , address_thoroughfare_and_dependent_thoroughfare_name_(nullptr)
  , address_premise_name_(nullptr)
  , address_subpremise_name_(nullptr)
  , address_apt_num_(nullptr)
  , address_floor_(nullptr)
  , phone_home_whole_number_(nullptr)
  , birthdate_day_(nullptr)
  , birthdate_month_(nullptr)
  , birthdate_year_(nullptr)
  , use_count_(int64_t{0})
  , use_date_windows_epoch_micros_(int64_t{0}){}
struct ContactInfoSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactInfoSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactInfoSpecificsDefaultTypeInternal() {}
  union {
    ContactInfoSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactInfoSpecificsDefaultTypeInternal _ContactInfoSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool ContactInfoSpecifics_VerificationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ContactInfoSpecifics_VerificationStatus_strings[6] = {};

static const char ContactInfoSpecifics_VerificationStatus_names[] =
  "FORMATTED"
  "OBSERVED"
  "PARSED"
  "SERVER_PARSED"
  "USER_VERIFIED"
  "VERIFICATION_STATUS_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ContactInfoSpecifics_VerificationStatus_entries[] = {
  { {ContactInfoSpecifics_VerificationStatus_names + 0, 9}, 2 },
  { {ContactInfoSpecifics_VerificationStatus_names + 9, 8}, 3 },
  { {ContactInfoSpecifics_VerificationStatus_names + 17, 6}, 1 },
  { {ContactInfoSpecifics_VerificationStatus_names + 23, 13}, 5 },
  { {ContactInfoSpecifics_VerificationStatus_names + 36, 13}, 4 },
  { {ContactInfoSpecifics_VerificationStatus_names + 49, 31}, 0 },
};

static const int ContactInfoSpecifics_VerificationStatus_entries_by_number[] = {
  5, // 0 -> VERIFICATION_STATUS_UNSPECIFIED
  2, // 1 -> PARSED
  0, // 2 -> FORMATTED
  1, // 3 -> OBSERVED
  4, // 4 -> USER_VERIFIED
  3, // 5 -> SERVER_PARSED
};

const std::string& ContactInfoSpecifics_VerificationStatus_Name(
    ContactInfoSpecifics_VerificationStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ContactInfoSpecifics_VerificationStatus_entries,
          ContactInfoSpecifics_VerificationStatus_entries_by_number,
          6, ContactInfoSpecifics_VerificationStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ContactInfoSpecifics_VerificationStatus_entries,
      ContactInfoSpecifics_VerificationStatus_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ContactInfoSpecifics_VerificationStatus_strings[idx].get();
}
bool ContactInfoSpecifics_VerificationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContactInfoSpecifics_VerificationStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ContactInfoSpecifics_VerificationStatus_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ContactInfoSpecifics_VerificationStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics::VERIFICATION_STATUS_UNSPECIFIED;
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics::PARSED;
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics::FORMATTED;
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics::OBSERVED;
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics::USER_VERIFIED;
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics::SERVER_PARSED;
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics::VerificationStatus_MIN;
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics::VerificationStatus_MAX;
constexpr int ContactInfoSpecifics::VerificationStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ContactInfoSpecifics_TokenMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactInfoSpecifics_TokenMetadata>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContactInfoSpecifics_TokenMetadata::ContactInfoSpecifics_TokenMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ContactInfoSpecifics.TokenMetadata)
}
ContactInfoSpecifics_TokenMetadata::ContactInfoSpecifics_TokenMetadata(const ContactInfoSpecifics_TokenMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ContactInfoSpecifics.TokenMetadata)
}

inline void ContactInfoSpecifics_TokenMetadata::SharedCtor() {
status_ = 0;
}

ContactInfoSpecifics_TokenMetadata::~ContactInfoSpecifics_TokenMetadata() {
  // @@protoc_insertion_point(destructor:sync_pb.ContactInfoSpecifics.TokenMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContactInfoSpecifics_TokenMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContactInfoSpecifics_TokenMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContactInfoSpecifics_TokenMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ContactInfoSpecifics.TokenMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ContactInfoSpecifics_TokenMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.ContactInfoSpecifics.VerificationStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::ContactInfoSpecifics_VerificationStatus_IsValid(val))) {
            _internal_set_status(static_cast<::sync_pb::ContactInfoSpecifics_VerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContactInfoSpecifics_TokenMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ContactInfoSpecifics.TokenMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.ContactInfoSpecifics.VerificationStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ContactInfoSpecifics.TokenMetadata)
  return target;
}

size_t ContactInfoSpecifics_TokenMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ContactInfoSpecifics.TokenMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.ContactInfoSpecifics.VerificationStatus status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactInfoSpecifics_TokenMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ContactInfoSpecifics_TokenMetadata*>(
      &from));
}

void ContactInfoSpecifics_TokenMetadata::MergeFrom(const ContactInfoSpecifics_TokenMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ContactInfoSpecifics.TokenMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ContactInfoSpecifics_TokenMetadata::CopyFrom(const ContactInfoSpecifics_TokenMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ContactInfoSpecifics.TokenMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactInfoSpecifics_TokenMetadata::IsInitialized() const {
  return true;
}

void ContactInfoSpecifics_TokenMetadata::InternalSwap(ContactInfoSpecifics_TokenMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

std::string ContactInfoSpecifics_TokenMetadata::GetTypeName() const {
  return "sync_pb.ContactInfoSpecifics.TokenMetadata";
}


// ===================================================================

class ContactInfoSpecifics_StringToken::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactInfoSpecifics_StringToken>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::ContactInfoSpecifics_TokenMetadata& metadata(const ContactInfoSpecifics_StringToken* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::ContactInfoSpecifics_TokenMetadata&
ContactInfoSpecifics_StringToken::_Internal::metadata(const ContactInfoSpecifics_StringToken* msg) {
  return *msg->metadata_;
}
ContactInfoSpecifics_StringToken::ContactInfoSpecifics_StringToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ContactInfoSpecifics.StringToken)
}
ContactInfoSpecifics_StringToken::ContactInfoSpecifics_StringToken(const ContactInfoSpecifics_StringToken& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::sync_pb::ContactInfoSpecifics_TokenMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.ContactInfoSpecifics.StringToken)
}

inline void ContactInfoSpecifics_StringToken::SharedCtor() {
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

ContactInfoSpecifics_StringToken::~ContactInfoSpecifics_StringToken() {
  // @@protoc_insertion_point(destructor:sync_pb.ContactInfoSpecifics.StringToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContactInfoSpecifics_StringToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.Destroy();
  if (this != internal_default_instance()) delete metadata_;
}

void ContactInfoSpecifics_StringToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContactInfoSpecifics_StringToken::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ContactInfoSpecifics.StringToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ContactInfoSpecifics_StringToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContactInfoSpecifics_StringToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ContactInfoSpecifics.StringToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ContactInfoSpecifics.StringToken)
  return target;
}

size_t ContactInfoSpecifics_StringToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ContactInfoSpecifics.StringToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactInfoSpecifics_StringToken::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ContactInfoSpecifics_StringToken*>(
      &from));
}

void ContactInfoSpecifics_StringToken::MergeFrom(const ContactInfoSpecifics_StringToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ContactInfoSpecifics.StringToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_metadata()->::sync_pb::ContactInfoSpecifics_TokenMetadata::MergeFrom(from._internal_metadata());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ContactInfoSpecifics_StringToken::CopyFrom(const ContactInfoSpecifics_StringToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ContactInfoSpecifics.StringToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactInfoSpecifics_StringToken::IsInitialized() const {
  return true;
}

void ContactInfoSpecifics_StringToken::InternalSwap(ContactInfoSpecifics_StringToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(metadata_, other->metadata_);
}

std::string ContactInfoSpecifics_StringToken::GetTypeName() const {
  return "sync_pb.ContactInfoSpecifics.StringToken";
}


// ===================================================================

class ContactInfoSpecifics_IntegerToken::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactInfoSpecifics_IntegerToken>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::ContactInfoSpecifics_TokenMetadata& metadata(const ContactInfoSpecifics_IntegerToken* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::ContactInfoSpecifics_TokenMetadata&
ContactInfoSpecifics_IntegerToken::_Internal::metadata(const ContactInfoSpecifics_IntegerToken* msg) {
  return *msg->metadata_;
}
ContactInfoSpecifics_IntegerToken::ContactInfoSpecifics_IntegerToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ContactInfoSpecifics.IntegerToken)
}
ContactInfoSpecifics_IntegerToken::ContactInfoSpecifics_IntegerToken(const ContactInfoSpecifics_IntegerToken& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::sync_pb::ContactInfoSpecifics_TokenMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ContactInfoSpecifics.IntegerToken)
}

inline void ContactInfoSpecifics_IntegerToken::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(value_));
}

ContactInfoSpecifics_IntegerToken::~ContactInfoSpecifics_IntegerToken() {
  // @@protoc_insertion_point(destructor:sync_pb.ContactInfoSpecifics.IntegerToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContactInfoSpecifics_IntegerToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void ContactInfoSpecifics_IntegerToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContactInfoSpecifics_IntegerToken::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ContactInfoSpecifics.IntegerToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  value_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ContactInfoSpecifics_IntegerToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContactInfoSpecifics_IntegerToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ContactInfoSpecifics.IntegerToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ContactInfoSpecifics.IntegerToken)
  return target;
}

size_t ContactInfoSpecifics_IntegerToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ContactInfoSpecifics.IntegerToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional int64 value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactInfoSpecifics_IntegerToken::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ContactInfoSpecifics_IntegerToken*>(
      &from));
}

void ContactInfoSpecifics_IntegerToken::MergeFrom(const ContactInfoSpecifics_IntegerToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ContactInfoSpecifics.IntegerToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::sync_pb::ContactInfoSpecifics_TokenMetadata::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ContactInfoSpecifics_IntegerToken::CopyFrom(const ContactInfoSpecifics_IntegerToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ContactInfoSpecifics.IntegerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactInfoSpecifics_IntegerToken::IsInitialized() const {
  return true;
}

void ContactInfoSpecifics_IntegerToken::InternalSwap(ContactInfoSpecifics_IntegerToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContactInfoSpecifics_IntegerToken, value_)
      + sizeof(ContactInfoSpecifics_IntegerToken::value_)
      - PROTOBUF_FIELD_OFFSET(ContactInfoSpecifics_IntegerToken, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

std::string ContactInfoSpecifics_IntegerToken::GetTypeName() const {
  return "sync_pb.ContactInfoSpecifics.IntegerToken";
}


// ===================================================================

class ContactInfoSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactInfoSpecifics>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_count(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_use_date_windows_epoch_micros(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_profile_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_honorific(const ContactInfoSpecifics* msg);
  static void set_has_name_honorific(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_first(const ContactInfoSpecifics* msg);
  static void set_has_name_first(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_middle(const ContactInfoSpecifics* msg);
  static void set_has_name_middle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_last(const ContactInfoSpecifics* msg);
  static void set_has_name_last(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_last_first(const ContactInfoSpecifics* msg);
  static void set_has_name_last_first(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_last_conjunction(const ContactInfoSpecifics* msg);
  static void set_has_name_last_conjunction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_last_second(const ContactInfoSpecifics* msg);
  static void set_has_name_last_second(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_full(const ContactInfoSpecifics* msg);
  static void set_has_name_full(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& name_full_with_honorific(const ContactInfoSpecifics* msg);
  static void set_has_name_full_with_honorific(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& email_address(const ContactInfoSpecifics* msg);
  static void set_has_email_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& company_name(const ContactInfoSpecifics* msg);
  static void set_has_company_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_city(const ContactInfoSpecifics* msg);
  static void set_has_address_city(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_state(const ContactInfoSpecifics* msg);
  static void set_has_address_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_zip(const ContactInfoSpecifics* msg);
  static void set_has_address_zip(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_country(const ContactInfoSpecifics* msg);
  static void set_has_address_country(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_street_address(const ContactInfoSpecifics* msg);
  static void set_has_address_street_address(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_sorting_code(const ContactInfoSpecifics* msg);
  static void set_has_address_sorting_code(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_dependent_locality(const ContactInfoSpecifics* msg);
  static void set_has_address_dependent_locality(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_language_code(const ContactInfoSpecifics* msg);
  static void set_has_address_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_thoroughfare_name(const ContactInfoSpecifics* msg);
  static void set_has_address_thoroughfare_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_thoroughfare_number(const ContactInfoSpecifics* msg);
  static void set_has_address_thoroughfare_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_dependent_thoroughfare_name(const ContactInfoSpecifics* msg);
  static void set_has_address_dependent_thoroughfare_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_thoroughfare_and_dependent_thoroughfare_name(const ContactInfoSpecifics* msg);
  static void set_has_address_thoroughfare_and_dependent_thoroughfare_name(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_premise_name(const ContactInfoSpecifics* msg);
  static void set_has_address_premise_name(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_subpremise_name(const ContactInfoSpecifics* msg);
  static void set_has_address_subpremise_name(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_apt_num(const ContactInfoSpecifics* msg);
  static void set_has_address_apt_num(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& address_floor(const ContactInfoSpecifics* msg);
  static void set_has_address_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::sync_pb::ContactInfoSpecifics_StringToken& phone_home_whole_number(const ContactInfoSpecifics* msg);
  static void set_has_phone_home_whole_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::sync_pb::ContactInfoSpecifics_IntegerToken& birthdate_day(const ContactInfoSpecifics* msg);
  static void set_has_birthdate_day(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::sync_pb::ContactInfoSpecifics_IntegerToken& birthdate_month(const ContactInfoSpecifics* msg);
  static void set_has_birthdate_month(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::sync_pb::ContactInfoSpecifics_IntegerToken& birthdate_year(const ContactInfoSpecifics* msg);
  static void set_has_birthdate_year(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
};

const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_honorific(const ContactInfoSpecifics* msg) {
  return *msg->name_honorific_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_first(const ContactInfoSpecifics* msg) {
  return *msg->name_first_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_middle(const ContactInfoSpecifics* msg) {
  return *msg->name_middle_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_last(const ContactInfoSpecifics* msg) {
  return *msg->name_last_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_last_first(const ContactInfoSpecifics* msg) {
  return *msg->name_last_first_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_last_conjunction(const ContactInfoSpecifics* msg) {
  return *msg->name_last_conjunction_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_last_second(const ContactInfoSpecifics* msg) {
  return *msg->name_last_second_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_full(const ContactInfoSpecifics* msg) {
  return *msg->name_full_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::name_full_with_honorific(const ContactInfoSpecifics* msg) {
  return *msg->name_full_with_honorific_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::email_address(const ContactInfoSpecifics* msg) {
  return *msg->email_address_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::company_name(const ContactInfoSpecifics* msg) {
  return *msg->company_name_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_city(const ContactInfoSpecifics* msg) {
  return *msg->address_city_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_state(const ContactInfoSpecifics* msg) {
  return *msg->address_state_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_zip(const ContactInfoSpecifics* msg) {
  return *msg->address_zip_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_country(const ContactInfoSpecifics* msg) {
  return *msg->address_country_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_street_address(const ContactInfoSpecifics* msg) {
  return *msg->address_street_address_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_sorting_code(const ContactInfoSpecifics* msg) {
  return *msg->address_sorting_code_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_dependent_locality(const ContactInfoSpecifics* msg) {
  return *msg->address_dependent_locality_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_language_code(const ContactInfoSpecifics* msg) {
  return *msg->address_language_code_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_thoroughfare_name(const ContactInfoSpecifics* msg) {
  return *msg->address_thoroughfare_name_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_thoroughfare_number(const ContactInfoSpecifics* msg) {
  return *msg->address_thoroughfare_number_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_dependent_thoroughfare_name(const ContactInfoSpecifics* msg) {
  return *msg->address_dependent_thoroughfare_name_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_thoroughfare_and_dependent_thoroughfare_name(const ContactInfoSpecifics* msg) {
  return *msg->address_thoroughfare_and_dependent_thoroughfare_name_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_premise_name(const ContactInfoSpecifics* msg) {
  return *msg->address_premise_name_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_subpremise_name(const ContactInfoSpecifics* msg) {
  return *msg->address_subpremise_name_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_apt_num(const ContactInfoSpecifics* msg) {
  return *msg->address_apt_num_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::address_floor(const ContactInfoSpecifics* msg) {
  return *msg->address_floor_;
}
const ::sync_pb::ContactInfoSpecifics_StringToken&
ContactInfoSpecifics::_Internal::phone_home_whole_number(const ContactInfoSpecifics* msg) {
  return *msg->phone_home_whole_number_;
}
const ::sync_pb::ContactInfoSpecifics_IntegerToken&
ContactInfoSpecifics::_Internal::birthdate_day(const ContactInfoSpecifics* msg) {
  return *msg->birthdate_day_;
}
const ::sync_pb::ContactInfoSpecifics_IntegerToken&
ContactInfoSpecifics::_Internal::birthdate_month(const ContactInfoSpecifics* msg) {
  return *msg->birthdate_month_;
}
const ::sync_pb::ContactInfoSpecifics_IntegerToken&
ContactInfoSpecifics::_Internal::birthdate_year(const ContactInfoSpecifics* msg) {
  return *msg->birthdate_year_;
}
ContactInfoSpecifics::ContactInfoSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ContactInfoSpecifics)
}
ContactInfoSpecifics::ContactInfoSpecifics(const ContactInfoSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  profile_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profile_label()) {
    profile_label_.Set(from._internal_profile_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_name_honorific()) {
    name_honorific_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_honorific_);
  } else {
    name_honorific_ = nullptr;
  }
  if (from._internal_has_name_first()) {
    name_first_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_first_);
  } else {
    name_first_ = nullptr;
  }
  if (from._internal_has_name_middle()) {
    name_middle_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_middle_);
  } else {
    name_middle_ = nullptr;
  }
  if (from._internal_has_name_last()) {
    name_last_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_last_);
  } else {
    name_last_ = nullptr;
  }
  if (from._internal_has_name_last_first()) {
    name_last_first_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_last_first_);
  } else {
    name_last_first_ = nullptr;
  }
  if (from._internal_has_name_last_conjunction()) {
    name_last_conjunction_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_last_conjunction_);
  } else {
    name_last_conjunction_ = nullptr;
  }
  if (from._internal_has_name_last_second()) {
    name_last_second_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_last_second_);
  } else {
    name_last_second_ = nullptr;
  }
  if (from._internal_has_name_full()) {
    name_full_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_full_);
  } else {
    name_full_ = nullptr;
  }
  if (from._internal_has_name_full_with_honorific()) {
    name_full_with_honorific_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.name_full_with_honorific_);
  } else {
    name_full_with_honorific_ = nullptr;
  }
  if (from._internal_has_email_address()) {
    email_address_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.email_address_);
  } else {
    email_address_ = nullptr;
  }
  if (from._internal_has_company_name()) {
    company_name_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.company_name_);
  } else {
    company_name_ = nullptr;
  }
  if (from._internal_has_address_city()) {
    address_city_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_city_);
  } else {
    address_city_ = nullptr;
  }
  if (from._internal_has_address_state()) {
    address_state_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_state_);
  } else {
    address_state_ = nullptr;
  }
  if (from._internal_has_address_zip()) {
    address_zip_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_zip_);
  } else {
    address_zip_ = nullptr;
  }
  if (from._internal_has_address_country()) {
    address_country_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_country_);
  } else {
    address_country_ = nullptr;
  }
  if (from._internal_has_address_street_address()) {
    address_street_address_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_street_address_);
  } else {
    address_street_address_ = nullptr;
  }
  if (from._internal_has_address_sorting_code()) {
    address_sorting_code_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_sorting_code_);
  } else {
    address_sorting_code_ = nullptr;
  }
  if (from._internal_has_address_dependent_locality()) {
    address_dependent_locality_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_dependent_locality_);
  } else {
    address_dependent_locality_ = nullptr;
  }
  if (from._internal_has_address_language_code()) {
    address_language_code_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_language_code_);
  } else {
    address_language_code_ = nullptr;
  }
  if (from._internal_has_address_thoroughfare_name()) {
    address_thoroughfare_name_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_thoroughfare_name_);
  } else {
    address_thoroughfare_name_ = nullptr;
  }
  if (from._internal_has_address_thoroughfare_number()) {
    address_thoroughfare_number_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_thoroughfare_number_);
  } else {
    address_thoroughfare_number_ = nullptr;
  }
  if (from._internal_has_address_dependent_thoroughfare_name()) {
    address_dependent_thoroughfare_name_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_dependent_thoroughfare_name_);
  } else {
    address_dependent_thoroughfare_name_ = nullptr;
  }
  if (from._internal_has_address_thoroughfare_and_dependent_thoroughfare_name()) {
    address_thoroughfare_and_dependent_thoroughfare_name_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_thoroughfare_and_dependent_thoroughfare_name_);
  } else {
    address_thoroughfare_and_dependent_thoroughfare_name_ = nullptr;
  }
  if (from._internal_has_address_premise_name()) {
    address_premise_name_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_premise_name_);
  } else {
    address_premise_name_ = nullptr;
  }
  if (from._internal_has_address_subpremise_name()) {
    address_subpremise_name_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_subpremise_name_);
  } else {
    address_subpremise_name_ = nullptr;
  }
  if (from._internal_has_address_apt_num()) {
    address_apt_num_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_apt_num_);
  } else {
    address_apt_num_ = nullptr;
  }
  if (from._internal_has_address_floor()) {
    address_floor_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.address_floor_);
  } else {
    address_floor_ = nullptr;
  }
  if (from._internal_has_phone_home_whole_number()) {
    phone_home_whole_number_ = new ::sync_pb::ContactInfoSpecifics_StringToken(*from.phone_home_whole_number_);
  } else {
    phone_home_whole_number_ = nullptr;
  }
  if (from._internal_has_birthdate_day()) {
    birthdate_day_ = new ::sync_pb::ContactInfoSpecifics_IntegerToken(*from.birthdate_day_);
  } else {
    birthdate_day_ = nullptr;
  }
  if (from._internal_has_birthdate_month()) {
    birthdate_month_ = new ::sync_pb::ContactInfoSpecifics_IntegerToken(*from.birthdate_month_);
  } else {
    birthdate_month_ = nullptr;
  }
  if (from._internal_has_birthdate_year()) {
    birthdate_year_ = new ::sync_pb::ContactInfoSpecifics_IntegerToken(*from.birthdate_year_);
  } else {
    birthdate_year_ = nullptr;
  }
  ::memcpy(&use_count_, &from.use_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_date_windows_epoch_micros_) -
    reinterpret_cast<char*>(&use_count_)) + sizeof(use_date_windows_epoch_micros_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ContactInfoSpecifics)
}

inline void ContactInfoSpecifics::SharedCtor() {
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
profile_label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_honorific_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_date_windows_epoch_micros_) -
    reinterpret_cast<char*>(&name_honorific_)) + sizeof(use_date_windows_epoch_micros_));
}

ContactInfoSpecifics::~ContactInfoSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.ContactInfoSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContactInfoSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.Destroy();
  source_.Destroy();
  profile_label_.Destroy();
  if (this != internal_default_instance()) delete name_honorific_;
  if (this != internal_default_instance()) delete name_first_;
  if (this != internal_default_instance()) delete name_middle_;
  if (this != internal_default_instance()) delete name_last_;
  if (this != internal_default_instance()) delete name_last_first_;
  if (this != internal_default_instance()) delete name_last_conjunction_;
  if (this != internal_default_instance()) delete name_last_second_;
  if (this != internal_default_instance()) delete name_full_;
  if (this != internal_default_instance()) delete name_full_with_honorific_;
  if (this != internal_default_instance()) delete email_address_;
  if (this != internal_default_instance()) delete company_name_;
  if (this != internal_default_instance()) delete address_city_;
  if (this != internal_default_instance()) delete address_state_;
  if (this != internal_default_instance()) delete address_zip_;
  if (this != internal_default_instance()) delete address_country_;
  if (this != internal_default_instance()) delete address_street_address_;
  if (this != internal_default_instance()) delete address_sorting_code_;
  if (this != internal_default_instance()) delete address_dependent_locality_;
  if (this != internal_default_instance()) delete address_language_code_;
  if (this != internal_default_instance()) delete address_thoroughfare_name_;
  if (this != internal_default_instance()) delete address_thoroughfare_number_;
  if (this != internal_default_instance()) delete address_dependent_thoroughfare_name_;
  if (this != internal_default_instance()) delete address_thoroughfare_and_dependent_thoroughfare_name_;
  if (this != internal_default_instance()) delete address_premise_name_;
  if (this != internal_default_instance()) delete address_subpremise_name_;
  if (this != internal_default_instance()) delete address_apt_num_;
  if (this != internal_default_instance()) delete address_floor_;
  if (this != internal_default_instance()) delete phone_home_whole_number_;
  if (this != internal_default_instance()) delete birthdate_day_;
  if (this != internal_default_instance()) delete birthdate_month_;
  if (this != internal_default_instance()) delete birthdate_year_;
}

void ContactInfoSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContactInfoSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ContactInfoSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      profile_label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(name_honorific_ != nullptr);
      name_honorific_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(name_first_ != nullptr);
      name_first_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(name_middle_ != nullptr);
      name_middle_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(name_last_ != nullptr);
      name_last_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(name_last_first_ != nullptr);
      name_last_first_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(name_last_conjunction_ != nullptr);
      name_last_conjunction_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(name_last_second_ != nullptr);
      name_last_second_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(name_full_ != nullptr);
      name_full_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(name_full_with_honorific_ != nullptr);
      name_full_with_honorific_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(email_address_ != nullptr);
      email_address_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(company_name_ != nullptr);
      company_name_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(address_city_ != nullptr);
      address_city_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(address_state_ != nullptr);
      address_state_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(address_zip_ != nullptr);
      address_zip_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(address_country_ != nullptr);
      address_country_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(address_street_address_ != nullptr);
      address_street_address_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(address_sorting_code_ != nullptr);
      address_sorting_code_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(address_dependent_locality_ != nullptr);
      address_dependent_locality_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(address_language_code_ != nullptr);
      address_language_code_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(address_thoroughfare_name_ != nullptr);
      address_thoroughfare_name_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(address_thoroughfare_number_ != nullptr);
      address_thoroughfare_number_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(address_dependent_thoroughfare_name_ != nullptr);
      address_dependent_thoroughfare_name_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(address_thoroughfare_and_dependent_thoroughfare_name_ != nullptr);
      address_thoroughfare_and_dependent_thoroughfare_name_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(address_premise_name_ != nullptr);
      address_premise_name_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(address_subpremise_name_ != nullptr);
      address_subpremise_name_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(address_apt_num_ != nullptr);
      address_apt_num_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(address_floor_ != nullptr);
      address_floor_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(phone_home_whole_number_ != nullptr);
      phone_home_whole_number_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(birthdate_day_ != nullptr);
      birthdate_day_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(birthdate_month_ != nullptr);
      birthdate_month_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(birthdate_year_ != nullptr);
      birthdate_year_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&use_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_date_windows_epoch_micros_) -
        reinterpret_cast<char*>(&use_count_)) + sizeof(use_date_windows_epoch_micros_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ContactInfoSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 use_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_count(&_has_bits_);
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 use_date_windows_epoch_micros = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_date_windows_epoch_micros(&_has_bits_);
          use_date_windows_epoch_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string profile_label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_profile_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_honorific = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_honorific(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_first = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_middle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_middle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_last = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_last(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_first = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_last_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_conjunction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_last_conjunction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_second = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_last_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_full = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_full(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken name_full_with_honorific = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_full_with_honorific(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken email_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_email_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken company_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_company_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_city = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_city(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_zip = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_zip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_country = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_country(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_street_address = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_street_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_sorting_code = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_sorting_code(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_locality = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_dependent_locality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_language_code = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_language_code(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_thoroughfare_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_number = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_thoroughfare_number(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_thoroughfare_name = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_dependent_thoroughfare_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_and_dependent_thoroughfare_name = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_thoroughfare_and_dependent_thoroughfare_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_premise_name = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_premise_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_subpremise_name = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_subpremise_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_apt_num = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_apt_num(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken address_floor = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_address_floor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.StringToken phone_home_whole_number = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phone_home_whole_number(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_day = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_birthdate_day(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_month = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_birthdate_month(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_year = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_birthdate_year(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContactInfoSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ContactInfoSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  // optional string source = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 use_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_use_count(), target);
  }

  // optional int64 use_date_windows_epoch_micros = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_use_date_windows_epoch_micros(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string profile_label = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_profile_label(), target);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_honorific = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::name_honorific(this),
        _Internal::name_honorific(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_first = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::name_first(this),
        _Internal::name_first(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_middle = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::name_middle(this),
        _Internal::name_middle(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_last = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::name_last(this),
        _Internal::name_last(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_first = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::name_last_first(this),
        _Internal::name_last_first(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_conjunction = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::name_last_conjunction(this),
        _Internal::name_last_conjunction(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_second = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::name_last_second(this),
        _Internal::name_last_second(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_full = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::name_full(this),
        _Internal::name_full(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_full_with_honorific = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::name_full_with_honorific(this),
        _Internal::name_full_with_honorific(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken email_address = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::email_address(this),
        _Internal::email_address(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken company_name = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::company_name(this),
        _Internal::company_name(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_city = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::address_city(this),
        _Internal::address_city(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_state = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::address_state(this),
        _Internal::address_state(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_zip = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::address_zip(this),
        _Internal::address_zip(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_country = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::address_country(this),
        _Internal::address_country(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_street_address = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::address_street_address(this),
        _Internal::address_street_address(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_sorting_code = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::address_sorting_code(this),
        _Internal::address_sorting_code(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_locality = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::address_dependent_locality(this),
        _Internal::address_dependent_locality(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_language_code = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::address_language_code(this),
        _Internal::address_language_code(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_name = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::address_thoroughfare_name(this),
        _Internal::address_thoroughfare_name(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_number = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::address_thoroughfare_number(this),
        _Internal::address_thoroughfare_number(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_thoroughfare_name = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::address_dependent_thoroughfare_name(this),
        _Internal::address_dependent_thoroughfare_name(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_and_dependent_thoroughfare_name = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::address_thoroughfare_and_dependent_thoroughfare_name(this),
        _Internal::address_thoroughfare_and_dependent_thoroughfare_name(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_premise_name = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::address_premise_name(this),
        _Internal::address_premise_name(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_subpremise_name = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::address_subpremise_name(this),
        _Internal::address_subpremise_name(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_apt_num = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::address_apt_num(this),
        _Internal::address_apt_num(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_floor = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::address_floor(this),
        _Internal::address_floor(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.StringToken phone_home_whole_number = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::phone_home_whole_number(this),
        _Internal::phone_home_whole_number(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_day = 34;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::birthdate_day(this),
        _Internal::birthdate_day(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_month = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::birthdate_month(this),
        _Internal::birthdate_month(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_year = 36;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::birthdate_year(this),
        _Internal::birthdate_year(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ContactInfoSpecifics)
  return target;
}

size_t ContactInfoSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ContactInfoSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string guid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional string source = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string profile_label = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_label());
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken name_honorific = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_honorific_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken name_first = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_first_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken name_middle = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_middle_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken name_last = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_last_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_first = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_last_first_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_conjunction = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_last_conjunction_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_second = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_last_second_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken name_full = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_full_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken name_full_with_honorific = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_full_with_honorific_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken email_address = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *email_address_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken company_name = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *company_name_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_city = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_city_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_state = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_state_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .sync_pb.ContactInfoSpecifics.StringToken address_zip = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_zip_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_country = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_country_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_street_address = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_street_address_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_sorting_code = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_sorting_code_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_locality = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_dependent_locality_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_language_code = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_language_code_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_name = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_thoroughfare_name_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_number = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_thoroughfare_number_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_thoroughfare_name = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_dependent_thoroughfare_name_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_and_dependent_thoroughfare_name = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_thoroughfare_and_dependent_thoroughfare_name_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_premise_name = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_premise_name_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_subpremise_name = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_subpremise_name_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_apt_num = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_apt_num_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken address_floor = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_floor_);
    }

    // optional .sync_pb.ContactInfoSpecifics.StringToken phone_home_whole_number = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *phone_home_whole_number_);
    }

    // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_day = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *birthdate_day_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_month = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *birthdate_month_);
    }

    // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_year = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *birthdate_year_);
    }

    // optional int64 use_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_use_count());
    }

    // optional int64 use_date_windows_epoch_micros = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_use_date_windows_epoch_micros());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactInfoSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ContactInfoSpecifics*>(
      &from));
}

void ContactInfoSpecifics::MergeFrom(const ContactInfoSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ContactInfoSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_profile_label(from._internal_profile_label());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_name_honorific()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_honorific());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_name_first()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_first());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_name_middle()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_middle());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_name_last()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_last());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_name_last_first()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_last_first());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_name_last_conjunction()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_last_conjunction());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_name_last_second()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_last_second());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_name_full()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_full());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_name_full_with_honorific()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_name_full_with_honorific());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_email_address()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_email_address());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_company_name()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_company_name());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_address_city()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_city());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_address_state()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_state());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_address_zip()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_zip());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_address_country()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_country());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_address_street_address()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_street_address());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_address_sorting_code()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_sorting_code());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_address_dependent_locality()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_dependent_locality());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_address_language_code()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_language_code());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_address_thoroughfare_name()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_thoroughfare_name());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_address_thoroughfare_number()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_thoroughfare_number());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_address_dependent_thoroughfare_name()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_dependent_thoroughfare_name());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_address_thoroughfare_and_dependent_thoroughfare_name()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_thoroughfare_and_dependent_thoroughfare_name());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_address_premise_name()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_premise_name());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_address_subpremise_name()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_subpremise_name());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_address_apt_num()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_apt_num());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_address_floor()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_address_floor());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_phone_home_whole_number()->::sync_pb::ContactInfoSpecifics_StringToken::MergeFrom(from._internal_phone_home_whole_number());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_birthdate_day()->::sync_pb::ContactInfoSpecifics_IntegerToken::MergeFrom(from._internal_birthdate_day());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_birthdate_month()->::sync_pb::ContactInfoSpecifics_IntegerToken::MergeFrom(from._internal_birthdate_month());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_birthdate_year()->::sync_pb::ContactInfoSpecifics_IntegerToken::MergeFrom(from._internal_birthdate_year());
    }
    if (cached_has_bits & 0x00000004u) {
      use_count_ = from.use_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_date_windows_epoch_micros_ = from.use_date_windows_epoch_micros_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ContactInfoSpecifics::CopyFrom(const ContactInfoSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ContactInfoSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactInfoSpecifics::IsInitialized() const {
  return true;
}

void ContactInfoSpecifics::InternalSwap(ContactInfoSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &profile_label_, lhs_arena,
      &other->profile_label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContactInfoSpecifics, use_date_windows_epoch_micros_)
      + sizeof(ContactInfoSpecifics::use_date_windows_epoch_micros_)
      - PROTOBUF_FIELD_OFFSET(ContactInfoSpecifics, name_honorific_)>(
          reinterpret_cast<char*>(&name_honorific_),
          reinterpret_cast<char*>(&other->name_honorific_));
}

std::string ContactInfoSpecifics::GetTypeName() const {
  return "sync_pb.ContactInfoSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::ContactInfoSpecifics_TokenMetadata*
Arena::CreateMaybeMessage< ::sync_pb::ContactInfoSpecifics_TokenMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ContactInfoSpecifics_TokenMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ContactInfoSpecifics_StringToken*
Arena::CreateMaybeMessage< ::sync_pb::ContactInfoSpecifics_StringToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ContactInfoSpecifics_StringToken >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ContactInfoSpecifics_IntegerToken*
Arena::CreateMaybeMessage< ::sync_pb::ContactInfoSpecifics_IntegerToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ContactInfoSpecifics_IntegerToken >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ContactInfoSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::ContactInfoSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ContactInfoSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
