// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/user_consent_specifics.proto

#include "components/sync/protocol/user_consent_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR UserConsentSpecifics::UserConsentSpecifics(
    ::_pbi::ConstantInitialized)
  : description_grd_ids_()
  , locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , feature_(0)

  , confirmation_grd_id_(0)
  , client_consent_time_usec_(int64_t{0})
  , status_(0)

  , _oneof_case_{}{}
struct UserConsentSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserConsentSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserConsentSpecificsDefaultTypeInternal() {}
  union {
    UserConsentSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserConsentSpecificsDefaultTypeInternal _UserConsentSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool UserConsentSpecifics_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserConsentSpecifics_Feature_strings[7] = {};

static const char UserConsentSpecifics_Feature_names[] =
  "ASSISTANT_ACTIVITY_CONTROL"
  "BACKUP_AND_RESTORE"
  "CHROME_SYNC"
  "CHROME_UNIFIED_CONSENT"
  "FEATURE_UNSPECIFIED"
  "GOOGLE_LOCATION_SERVICE"
  "PLAY_STORE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserConsentSpecifics_Feature_entries[] = {
  { {UserConsentSpecifics_Feature_names + 0, 26}, 6 },
  { {UserConsentSpecifics_Feature_names + 26, 18}, 3 },
  { {UserConsentSpecifics_Feature_names + 44, 11}, 1 },
  { {UserConsentSpecifics_Feature_names + 55, 22}, 5 },
  { {UserConsentSpecifics_Feature_names + 77, 19}, 0 },
  { {UserConsentSpecifics_Feature_names + 96, 23}, 4 },
  { {UserConsentSpecifics_Feature_names + 119, 10}, 2 },
};

static const int UserConsentSpecifics_Feature_entries_by_number[] = {
  4, // 0 -> FEATURE_UNSPECIFIED
  2, // 1 -> CHROME_SYNC
  6, // 2 -> PLAY_STORE
  1, // 3 -> BACKUP_AND_RESTORE
  5, // 4 -> GOOGLE_LOCATION_SERVICE
  3, // 5 -> CHROME_UNIFIED_CONSENT
  0, // 6 -> ASSISTANT_ACTIVITY_CONTROL
};

const std::string& UserConsentSpecifics_Feature_Name(
    UserConsentSpecifics_Feature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserConsentSpecifics_Feature_entries,
          UserConsentSpecifics_Feature_entries_by_number,
          7, UserConsentSpecifics_Feature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserConsentSpecifics_Feature_entries,
      UserConsentSpecifics_Feature_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserConsentSpecifics_Feature_strings[idx].get();
}
bool UserConsentSpecifics_Feature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserConsentSpecifics_Feature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserConsentSpecifics_Feature_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<UserConsentSpecifics_Feature>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::FEATURE_UNSPECIFIED;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::CHROME_SYNC;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::PLAY_STORE;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::BACKUP_AND_RESTORE;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::GOOGLE_LOCATION_SERVICE;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::CHROME_UNIFIED_CONSENT;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::ASSISTANT_ACTIVITY_CONTROL;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::Feature_MIN;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::Feature_MAX;
constexpr int UserConsentSpecifics::Feature_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class UserConsentSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<UserConsentSpecifics>()._has_bits_);
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_consent_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::UserConsentTypes_SyncConsent& sync_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& arc_backup_and_restore_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& arc_location_service_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& arc_play_terms_of_service_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_UnifiedConsent& unified_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent& assistant_activity_control_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_AccountPasswordsConsent& account_passwords_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_AutofillAssistantConsent& autofill_assistant_consent(const UserConsentSpecifics* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_confirmation_grd_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::sync_pb::UserConsentTypes_SyncConsent&
UserConsentSpecifics::_Internal::sync_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.sync_consent_;
}
const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent&
UserConsentSpecifics::_Internal::arc_backup_and_restore_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.arc_backup_and_restore_consent_;
}
const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent&
UserConsentSpecifics::_Internal::arc_location_service_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.arc_location_service_consent_;
}
const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent&
UserConsentSpecifics::_Internal::arc_play_terms_of_service_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.arc_play_terms_of_service_consent_;
}
const ::sync_pb::UserConsentTypes_UnifiedConsent&
UserConsentSpecifics::_Internal::unified_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.unified_consent_;
}
const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent&
UserConsentSpecifics::_Internal::assistant_activity_control_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.assistant_activity_control_consent_;
}
const ::sync_pb::UserConsentTypes_AccountPasswordsConsent&
UserConsentSpecifics::_Internal::account_passwords_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.account_passwords_consent_;
}
const ::sync_pb::UserConsentTypes_AutofillAssistantConsent&
UserConsentSpecifics::_Internal::autofill_assistant_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.autofill_assistant_consent_;
}
void UserConsentSpecifics::set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consent();
  if (sync_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_consent));
    if (message_arena != submessage_arena) {
      sync_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_consent, submessage_arena);
    }
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.sync_consent)
}
void UserConsentSpecifics::clear_sync_consent() {
  if (_internal_has_sync_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consent_.sync_consent_;
    }
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consent();
  if (arc_backup_and_restore_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arc_backup_and_restore_consent));
    if (message_arena != submessage_arena) {
      arc_backup_and_restore_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_backup_and_restore_consent, submessage_arena);
    }
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
}
void UserConsentSpecifics::clear_arc_backup_and_restore_consent() {
  if (_internal_has_arc_backup_and_restore_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consent_.arc_backup_and_restore_consent_;
    }
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consent();
  if (arc_location_service_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arc_location_service_consent));
    if (message_arena != submessage_arena) {
      arc_location_service_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_location_service_consent, submessage_arena);
    }
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_location_service_consent)
}
void UserConsentSpecifics::clear_arc_location_service_consent() {
  if (_internal_has_arc_location_service_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consent_.arc_location_service_consent_;
    }
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arc_play_terms_of_service_consent));
    if (message_arena != submessage_arena) {
      arc_play_terms_of_service_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_play_terms_of_service_consent, submessage_arena);
    }
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
}
void UserConsentSpecifics::clear_arc_play_terms_of_service_consent() {
  if (_internal_has_arc_play_terms_of_service_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consent_.arc_play_terms_of_service_consent_;
    }
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_unified_consent(::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consent();
  if (unified_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unified_consent));
    if (message_arena != submessage_arena) {
      unified_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unified_consent, submessage_arena);
    }
    set_has_unified_consent();
    consent_.unified_consent_ = unified_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.unified_consent)
}
void UserConsentSpecifics::clear_unified_consent() {
  if (_internal_has_unified_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consent_.unified_consent_;
    }
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_assistant_activity_control_consent(::sync_pb::UserConsentTypes_AssistantActivityControlConsent* assistant_activity_control_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consent();
  if (assistant_activity_control_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(assistant_activity_control_consent));
    if (message_arena != submessage_arena) {
      assistant_activity_control_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assistant_activity_control_consent, submessage_arena);
    }
    set_has_assistant_activity_control_consent();
    consent_.assistant_activity_control_consent_ = assistant_activity_control_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.assistant_activity_control_consent)
}
void UserConsentSpecifics::clear_assistant_activity_control_consent() {
  if (_internal_has_assistant_activity_control_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consent_.assistant_activity_control_consent_;
    }
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_account_passwords_consent(::sync_pb::UserConsentTypes_AccountPasswordsConsent* account_passwords_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consent();
  if (account_passwords_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_passwords_consent));
    if (message_arena != submessage_arena) {
      account_passwords_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_passwords_consent, submessage_arena);
    }
    set_has_account_passwords_consent();
    consent_.account_passwords_consent_ = account_passwords_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.account_passwords_consent)
}
void UserConsentSpecifics::clear_account_passwords_consent() {
  if (_internal_has_account_passwords_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consent_.account_passwords_consent_;
    }
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_autofill_assistant_consent(::sync_pb::UserConsentTypes_AutofillAssistantConsent* autofill_assistant_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consent();
  if (autofill_assistant_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autofill_assistant_consent));
    if (message_arena != submessage_arena) {
      autofill_assistant_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill_assistant_consent, submessage_arena);
    }
    set_has_autofill_assistant_consent();
    consent_.autofill_assistant_consent_ = autofill_assistant_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.autofill_assistant_consent)
}
void UserConsentSpecifics::clear_autofill_assistant_consent() {
  if (_internal_has_autofill_assistant_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consent_.autofill_assistant_consent_;
    }
    clear_has_consent();
  }
}
UserConsentSpecifics::UserConsentSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  description_grd_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.UserConsentSpecifics)
}
UserConsentSpecifics::UserConsentSpecifics(const UserConsentSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    locale_.Set(from._internal_locale(), 
      GetArenaForAllocation());
  }
  account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_id()) {
    account_id_.Set(from._internal_account_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&feature_, &from.feature_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&feature_)) + sizeof(status_));
  clear_has_consent();
  switch (from.consent_case()) {
    case kSyncConsent: {
      _internal_mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from._internal_sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      _internal_mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from._internal_arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      _internal_mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from._internal_arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      _internal_mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from._internal_arc_play_terms_of_service_consent());
      break;
    }
    case kUnifiedConsent: {
      _internal_mutable_unified_consent()->::sync_pb::UserConsentTypes_UnifiedConsent::MergeFrom(from._internal_unified_consent());
      break;
    }
    case kAssistantActivityControlConsent: {
      _internal_mutable_assistant_activity_control_consent()->::sync_pb::UserConsentTypes_AssistantActivityControlConsent::MergeFrom(from._internal_assistant_activity_control_consent());
      break;
    }
    case kAccountPasswordsConsent: {
      _internal_mutable_account_passwords_consent()->::sync_pb::UserConsentTypes_AccountPasswordsConsent::MergeFrom(from._internal_account_passwords_consent());
      break;
    }
    case kAutofillAssistantConsent: {
      _internal_mutable_autofill_assistant_consent()->::sync_pb::UserConsentTypes_AutofillAssistantConsent::MergeFrom(from._internal_autofill_assistant_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentSpecifics)
}

inline void UserConsentSpecifics::SharedCtor() {
locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&feature_)) + sizeof(status_));
clear_has_consent();
}

UserConsentSpecifics::~UserConsentSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserConsentSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  locale_.Destroy();
  account_id_.Destroy();
  if (has_consent()) {
    clear_consent();
  }
}

void UserConsentSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserConsentSpecifics::clear_consent() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.UserConsentSpecifics)
  switch (consent_case()) {
    case kSyncConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete consent_.sync_consent_;
      }
      break;
    }
    case kArcBackupAndRestoreConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete consent_.arc_backup_and_restore_consent_;
      }
      break;
    }
    case kArcLocationServiceConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete consent_.arc_location_service_consent_;
      }
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete consent_.arc_play_terms_of_service_consent_;
      }
      break;
    }
    case kUnifiedConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete consent_.unified_consent_;
      }
      break;
    }
    case kAssistantActivityControlConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete consent_.assistant_activity_control_consent_;
      }
      break;
    }
    case kAccountPasswordsConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete consent_.account_passwords_consent_;
      }
      break;
    }
    case kAutofillAssistantConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete consent_.autofill_assistant_consent_;
      }
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSENT_NOT_SET;
}


void UserConsentSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_grd_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&feature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&feature_)) + sizeof(status_));
  }
  clear_consent();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserConsentSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::UserConsentSpecifics_Feature_IsValid(val))) {
            _internal_set_feature(static_cast<::sync_pb::UserConsentSpecifics_Feature>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 description_grd_ids = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_description_grd_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 confirmation_grd_id = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_confirmation_grd_id(&has_bits);
          confirmation_grd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(val))) {
            _internal_set_status(static_cast<::sync_pb::UserConsentTypes_ConsentStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc_backup_and_restore_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc_location_service_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc_play_terms_of_service_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 client_consent_time_usec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_client_consent_time_usec(&has_bits);
          client_consent_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_unified_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_assistant_activity_control_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_passwords_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentTypes.AutofillAssistantConsent autofill_assistant_consent = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_autofill_assistant_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserConsentSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.UserConsentSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_feature(), target);
  }

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  for (int i = 0, n = this->_internal_description_grd_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_description_grd_ids(i), target);
  }

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_confirmation_grd_id(), target);
  }

  // optional string locale = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_locale(), target);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // optional string account_id = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_account_id(), target);
  }

  switch (consent_case()) {
    case kSyncConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::sync_consent(this),
          _Internal::sync_consent(this).GetCachedSize(), target, stream);
      break;
    }
    case kArcBackupAndRestoreConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::arc_backup_and_restore_consent(this),
          _Internal::arc_backup_and_restore_consent(this).GetCachedSize(), target, stream);
      break;
    }
    case kArcLocationServiceConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::arc_location_service_consent(this),
          _Internal::arc_location_service_consent(this).GetCachedSize(), target, stream);
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::arc_play_terms_of_service_consent(this),
          _Internal::arc_play_terms_of_service_consent(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional int64 client_consent_time_usec = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_client_consent_time_usec(), target);
  }

  switch (consent_case()) {
    case kUnifiedConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::unified_consent(this),
          _Internal::unified_consent(this).GetCachedSize(), target, stream);
      break;
    }
    case kAssistantActivityControlConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::assistant_activity_control_consent(this),
          _Internal::assistant_activity_control_consent(this).GetCachedSize(), target, stream);
      break;
    }
    case kAccountPasswordsConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::account_passwords_consent(this),
          _Internal::account_passwords_consent(this).GetCachedSize(), target, stream);
      break;
    }
    case kAutofillAssistantConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::autofill_assistant_consent(this),
          _Internal::autofill_assistant_consent(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.UserConsentSpecifics)
  return target;
}

size_t UserConsentSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_description_grd_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string locale = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional string account_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_id());
    }

    // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_feature());
    }

    // optional int32 confirmation_grd_id = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_confirmation_grd_id());
    }

    // optional int64 client_consent_time_usec = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_client_consent_time_usec());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  switch (consent_case()) {
    // .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
    case kSyncConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.sync_consent_);
      break;
    }
    // .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
    case kArcBackupAndRestoreConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_backup_and_restore_consent_);
      break;
    }
    // .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
    case kArcLocationServiceConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_location_service_consent_);
      break;
    }
    // .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
    case kArcPlayTermsOfServiceConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_play_terms_of_service_consent_);
      break;
    }
    // .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];
    case kUnifiedConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.unified_consent_);
      break;
    }
    // .sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;
    case kAssistantActivityControlConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.assistant_activity_control_consent_);
      break;
    }
    // .sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;
    case kAccountPasswordsConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.account_passwords_consent_);
      break;
    }
    // .sync_pb.UserConsentTypes.AutofillAssistantConsent autofill_assistant_consent = 16;
    case kAutofillAssistantConsent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.autofill_assistant_consent_);
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserConsentSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UserConsentSpecifics*>(
      &from));
}

void UserConsentSpecifics::MergeFrom(const UserConsentSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_account_id(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000004u) {
      feature_ = from.feature_;
    }
    if (cached_has_bits & 0x00000008u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_consent_time_usec_ = from.client_consent_time_usec_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.consent_case()) {
    case kSyncConsent: {
      _internal_mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from._internal_sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      _internal_mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from._internal_arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      _internal_mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from._internal_arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      _internal_mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from._internal_arc_play_terms_of_service_consent());
      break;
    }
    case kUnifiedConsent: {
      _internal_mutable_unified_consent()->::sync_pb::UserConsentTypes_UnifiedConsent::MergeFrom(from._internal_unified_consent());
      break;
    }
    case kAssistantActivityControlConsent: {
      _internal_mutable_assistant_activity_control_consent()->::sync_pb::UserConsentTypes_AssistantActivityControlConsent::MergeFrom(from._internal_assistant_activity_control_consent());
      break;
    }
    case kAccountPasswordsConsent: {
      _internal_mutable_account_passwords_consent()->::sync_pb::UserConsentTypes_AccountPasswordsConsent::MergeFrom(from._internal_account_passwords_consent());
      break;
    }
    case kAutofillAssistantConsent: {
      _internal_mutable_autofill_assistant_consent()->::sync_pb::UserConsentTypes_AutofillAssistantConsent::MergeFrom(from._internal_autofill_assistant_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserConsentSpecifics::CopyFrom(const UserConsentSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentSpecifics::IsInitialized() const {
  return true;
}

void UserConsentSpecifics::InternalSwap(UserConsentSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_id_, lhs_arena,
      &other->account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserConsentSpecifics, status_)
      + sizeof(UserConsentSpecifics::status_)
      - PROTOBUF_FIELD_OFFSET(UserConsentSpecifics, feature_)>(
          reinterpret_cast<char*>(&feature_),
          reinterpret_cast<char*>(&other->feature_));
  swap(consent_, other->consent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string UserConsentSpecifics::GetTypeName() const {
  return "sync_pb.UserConsentSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::UserConsentSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::UserConsentSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::UserConsentSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
