// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/vault.proto

#include "components/sync/protocol/vault.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR SharedMemberKey::SharedMemberKey(
    ::_pbi::ConstantInitialized)
  : wrapped_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , member_proof_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , epoch_(0){}
struct SharedMemberKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharedMemberKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharedMemberKeyDefaultTypeInternal() {}
  union {
    SharedMemberKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharedMemberKeyDefaultTypeInternal _SharedMemberKey_default_instance_;
PROTOBUF_CONSTEXPR RotationProof::RotationProof(
    ::_pbi::ConstantInitialized)
  : rotation_proof_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , new_epoch_(0){}
struct RotationProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotationProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotationProofDefaultTypeInternal() {}
  union {
    RotationProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotationProofDefaultTypeInternal _RotationProof_default_instance_;
PROTOBUF_CONSTEXPR SecurityDomainDetails_SyncDetails::SecurityDomainDetails_SyncDetails(
    ::_pbi::ConstantInitialized)
  : degraded_recoverability_(false){}
struct SecurityDomainDetails_SyncDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityDomainDetails_SyncDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityDomainDetails_SyncDetailsDefaultTypeInternal() {}
  union {
    SecurityDomainDetails_SyncDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityDomainDetails_SyncDetailsDefaultTypeInternal _SecurityDomainDetails_SyncDetails_default_instance_;
PROTOBUF_CONSTEXPR SecurityDomainDetails::SecurityDomainDetails(
    ::_pbi::ConstantInitialized)
  : sync_details_(nullptr){}
struct SecurityDomainDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityDomainDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityDomainDetailsDefaultTypeInternal() {}
  union {
    SecurityDomainDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityDomainDetailsDefaultTypeInternal _SecurityDomainDetails_default_instance_;
PROTOBUF_CONSTEXPR SecurityDomain::SecurityDomain(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , security_domain_details_(nullptr)
  , current_epoch_(0){}
struct SecurityDomainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityDomainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityDomainDefaultTypeInternal() {}
  union {
    SecurityDomain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityDomainDefaultTypeInternal _SecurityDomain_default_instance_;
PROTOBUF_CONSTEXPR SecurityDomainMember_SecurityDomainMembership::SecurityDomainMember_SecurityDomainMembership(
    ::_pbi::ConstantInitialized)
  : keys_()
  , rotation_proofs_()
  , security_domain_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SecurityDomainMember_SecurityDomainMembershipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityDomainMember_SecurityDomainMembershipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityDomainMember_SecurityDomainMembershipDefaultTypeInternal() {}
  union {
    SecurityDomainMember_SecurityDomainMembership _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityDomainMember_SecurityDomainMembershipDefaultTypeInternal _SecurityDomainMember_SecurityDomainMembership_default_instance_;
PROTOBUF_CONSTEXPR SecurityDomainMember::SecurityDomainMember(
    ::_pbi::ConstantInitialized)
  : memberships_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , public_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , member_type_(0)
{}
struct SecurityDomainMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityDomainMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityDomainMemberDefaultTypeInternal() {}
  union {
    SecurityDomainMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityDomainMemberDefaultTypeInternal _SecurityDomainMember_default_instance_;
PROTOBUF_CONSTEXPR JoinSecurityDomainsRequest::JoinSecurityDomainsRequest(
    ::_pbi::ConstantInitialized)
  : shared_member_key_()
  , security_domain_(nullptr)
  , security_domain_member_(nullptr)
  , member_type_hint_(0){}
struct JoinSecurityDomainsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinSecurityDomainsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinSecurityDomainsRequestDefaultTypeInternal() {}
  union {
    JoinSecurityDomainsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinSecurityDomainsRequestDefaultTypeInternal _JoinSecurityDomainsRequest_default_instance_;
PROTOBUF_CONSTEXPR JoinSecurityDomainsResponse::JoinSecurityDomainsResponse(
    ::_pbi::ConstantInitialized)
  : security_domain_(nullptr){}
struct JoinSecurityDomainsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinSecurityDomainsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinSecurityDomainsResponseDefaultTypeInternal() {}
  union {
    JoinSecurityDomainsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinSecurityDomainsResponseDefaultTypeInternal _JoinSecurityDomainsResponse_default_instance_;
PROTOBUF_CONSTEXPR JoinSecurityDomainsErrorDetail::JoinSecurityDomainsErrorDetail(
    ::_pbi::ConstantInitialized)
  : already_exists_response_(nullptr){}
struct JoinSecurityDomainsErrorDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinSecurityDomainsErrorDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinSecurityDomainsErrorDetailDefaultTypeInternal() {}
  union {
    JoinSecurityDomainsErrorDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinSecurityDomainsErrorDetailDefaultTypeInternal _JoinSecurityDomainsErrorDetail_default_instance_;
PROTOBUF_CONSTEXPR Proto3Any::Proto3Any(
    ::_pbi::ConstantInitialized)
  : type_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Proto3AnyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Proto3AnyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Proto3AnyDefaultTypeInternal() {}
  union {
    Proto3Any _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Proto3AnyDefaultTypeInternal _Proto3Any_default_instance_;
PROTOBUF_CONSTEXPR RPCStatus::RPCStatus(
    ::_pbi::ConstantInitialized)
  : details_(){}
struct RPCStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPCStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPCStatusDefaultTypeInternal() {}
  union {
    RPCStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPCStatusDefaultTypeInternal _RPCStatus_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool SecurityDomainMember_MemberType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SecurityDomainMember_MemberType_strings[2] = {};

static const char SecurityDomainMember_MemberType_names[] =
  "MEMBER_TYPE_PHYSICAL_DEVICE"
  "MEMBER_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SecurityDomainMember_MemberType_entries[] = {
  { {SecurityDomainMember_MemberType_names + 0, 27}, 1 },
  { {SecurityDomainMember_MemberType_names + 27, 23}, 0 },
};

static const int SecurityDomainMember_MemberType_entries_by_number[] = {
  1, // 0 -> MEMBER_TYPE_UNSPECIFIED
  0, // 1 -> MEMBER_TYPE_PHYSICAL_DEVICE
};

const std::string& SecurityDomainMember_MemberType_Name(
    SecurityDomainMember_MemberType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SecurityDomainMember_MemberType_entries,
          SecurityDomainMember_MemberType_entries_by_number,
          2, SecurityDomainMember_MemberType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SecurityDomainMember_MemberType_entries,
      SecurityDomainMember_MemberType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SecurityDomainMember_MemberType_strings[idx].get();
}
bool SecurityDomainMember_MemberType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityDomainMember_MemberType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SecurityDomainMember_MemberType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<SecurityDomainMember_MemberType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SecurityDomainMember_MemberType SecurityDomainMember::MEMBER_TYPE_UNSPECIFIED;
constexpr SecurityDomainMember_MemberType SecurityDomainMember::MEMBER_TYPE_PHYSICAL_DEVICE;
constexpr SecurityDomainMember_MemberType SecurityDomainMember::MemberType_MIN;
constexpr SecurityDomainMember_MemberType SecurityDomainMember::MemberType_MAX;
constexpr int SecurityDomainMember::MemberType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SharedMemberKey::_Internal {
 public:
};

SharedMemberKey::SharedMemberKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SharedMemberKey)
}
SharedMemberKey::SharedMemberKey(const SharedMemberKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  wrapped_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    wrapped_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wrapped_key().empty()) {
    wrapped_key_.Set(from._internal_wrapped_key(), 
      GetArenaForAllocation());
  }
  member_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    member_proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_member_proof().empty()) {
    member_proof_.Set(from._internal_member_proof(), 
      GetArenaForAllocation());
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharedMemberKey)
}

inline void SharedMemberKey::SharedCtor() {
wrapped_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  wrapped_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
member_proof_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  member_proof_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
epoch_ = 0;
}

SharedMemberKey::~SharedMemberKey() {
  // @@protoc_insertion_point(destructor:sync_pb.SharedMemberKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharedMemberKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  wrapped_key_.Destroy();
  member_proof_.Destroy();
}

void SharedMemberKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharedMemberKey::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharedMemberKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wrapped_key_.ClearToEmpty();
  member_proof_.ClearToEmpty();
  epoch_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* SharedMemberKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes wrapped_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wrapped_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes member_proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_member_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharedMemberKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SharedMemberKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_epoch(), target);
  }

  // bytes wrapped_key = 2;
  if (!this->_internal_wrapped_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_wrapped_key(), target);
  }

  // bytes member_proof = 3;
  if (!this->_internal_member_proof().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_member_proof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SharedMemberKey)
  return target;
}

size_t SharedMemberKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharedMemberKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes wrapped_key = 2;
  if (!this->_internal_wrapped_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_wrapped_key());
  }

  // bytes member_proof = 3;
  if (!this->_internal_member_proof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_member_proof());
  }

  // int32 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedMemberKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharedMemberKey*>(
      &from));
}

void SharedMemberKey::MergeFrom(const SharedMemberKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharedMemberKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_wrapped_key().empty()) {
    _internal_set_wrapped_key(from._internal_wrapped_key());
  }
  if (!from._internal_member_proof().empty()) {
    _internal_set_member_proof(from._internal_member_proof());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharedMemberKey::CopyFrom(const SharedMemberKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharedMemberKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedMemberKey::IsInitialized() const {
  return true;
}

void SharedMemberKey::InternalSwap(SharedMemberKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &wrapped_key_, lhs_arena,
      &other->wrapped_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &member_proof_, lhs_arena,
      &other->member_proof_, rhs_arena
  );
  swap(epoch_, other->epoch_);
}

std::string SharedMemberKey::GetTypeName() const {
  return "sync_pb.SharedMemberKey";
}


// ===================================================================

class RotationProof::_Internal {
 public:
};

RotationProof::RotationProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.RotationProof)
}
RotationProof::RotationProof(const RotationProof& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  rotation_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rotation_proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rotation_proof().empty()) {
    rotation_proof_.Set(from._internal_rotation_proof(), 
      GetArenaForAllocation());
  }
  new_epoch_ = from.new_epoch_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.RotationProof)
}

inline void RotationProof::SharedCtor() {
rotation_proof_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rotation_proof_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_epoch_ = 0;
}

RotationProof::~RotationProof() {
  // @@protoc_insertion_point(destructor:sync_pb.RotationProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RotationProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rotation_proof_.Destroy();
}

void RotationProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RotationProof::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.RotationProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotation_proof_.ClearToEmpty();
  new_epoch_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* RotationProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 new_epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          new_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rotation_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rotation_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RotationProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.RotationProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 new_epoch = 1;
  if (this->_internal_new_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_new_epoch(), target);
  }

  // bytes rotation_proof = 2;
  if (!this->_internal_rotation_proof().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rotation_proof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.RotationProof)
  return target;
}

size_t RotationProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.RotationProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rotation_proof = 2;
  if (!this->_internal_rotation_proof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rotation_proof());
  }

  // int32 new_epoch = 1;
  if (this->_internal_new_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationProof::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RotationProof*>(
      &from));
}

void RotationProof::MergeFrom(const RotationProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.RotationProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rotation_proof().empty()) {
    _internal_set_rotation_proof(from._internal_rotation_proof());
  }
  if (from._internal_new_epoch() != 0) {
    _internal_set_new_epoch(from._internal_new_epoch());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RotationProof::CopyFrom(const RotationProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.RotationProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationProof::IsInitialized() const {
  return true;
}

void RotationProof::InternalSwap(RotationProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rotation_proof_, lhs_arena,
      &other->rotation_proof_, rhs_arena
  );
  swap(new_epoch_, other->new_epoch_);
}

std::string RotationProof::GetTypeName() const {
  return "sync_pb.RotationProof";
}


// ===================================================================

class SecurityDomainDetails_SyncDetails::_Internal {
 public:
};

SecurityDomainDetails_SyncDetails::SecurityDomainDetails_SyncDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SecurityDomainDetails.SyncDetails)
}
SecurityDomainDetails_SyncDetails::SecurityDomainDetails_SyncDetails(const SecurityDomainDetails_SyncDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  degraded_recoverability_ = from.degraded_recoverability_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SecurityDomainDetails.SyncDetails)
}

inline void SecurityDomainDetails_SyncDetails::SharedCtor() {
degraded_recoverability_ = false;
}

SecurityDomainDetails_SyncDetails::~SecurityDomainDetails_SyncDetails() {
  // @@protoc_insertion_point(destructor:sync_pb.SecurityDomainDetails.SyncDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityDomainDetails_SyncDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SecurityDomainDetails_SyncDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityDomainDetails_SyncDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SecurityDomainDetails.SyncDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  degraded_recoverability_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* SecurityDomainDetails_SyncDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool degraded_recoverability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          degraded_recoverability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityDomainDetails_SyncDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SecurityDomainDetails.SyncDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool degraded_recoverability = 1;
  if (this->_internal_degraded_recoverability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_degraded_recoverability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SecurityDomainDetails.SyncDetails)
  return target;
}

size_t SecurityDomainDetails_SyncDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SecurityDomainDetails.SyncDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool degraded_recoverability = 1;
  if (this->_internal_degraded_recoverability() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDomainDetails_SyncDetails::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SecurityDomainDetails_SyncDetails*>(
      &from));
}

void SecurityDomainDetails_SyncDetails::MergeFrom(const SecurityDomainDetails_SyncDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SecurityDomainDetails.SyncDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_degraded_recoverability() != 0) {
    _internal_set_degraded_recoverability(from._internal_degraded_recoverability());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SecurityDomainDetails_SyncDetails::CopyFrom(const SecurityDomainDetails_SyncDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SecurityDomainDetails.SyncDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDomainDetails_SyncDetails::IsInitialized() const {
  return true;
}

void SecurityDomainDetails_SyncDetails::InternalSwap(SecurityDomainDetails_SyncDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(degraded_recoverability_, other->degraded_recoverability_);
}

std::string SecurityDomainDetails_SyncDetails::GetTypeName() const {
  return "sync_pb.SecurityDomainDetails.SyncDetails";
}


// ===================================================================

class SecurityDomainDetails::_Internal {
 public:
  static const ::sync_pb::SecurityDomainDetails_SyncDetails& sync_details(const SecurityDomainDetails* msg);
};

const ::sync_pb::SecurityDomainDetails_SyncDetails&
SecurityDomainDetails::_Internal::sync_details(const SecurityDomainDetails* msg) {
  return *msg->sync_details_;
}
SecurityDomainDetails::SecurityDomainDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SecurityDomainDetails)
}
SecurityDomainDetails::SecurityDomainDetails(const SecurityDomainDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sync_details()) {
    sync_details_ = new ::sync_pb::SecurityDomainDetails_SyncDetails(*from.sync_details_);
  } else {
    sync_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SecurityDomainDetails)
}

inline void SecurityDomainDetails::SharedCtor() {
sync_details_ = nullptr;
}

SecurityDomainDetails::~SecurityDomainDetails() {
  // @@protoc_insertion_point(destructor:sync_pb.SecurityDomainDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityDomainDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sync_details_;
}

void SecurityDomainDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityDomainDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SecurityDomainDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sync_details_ != nullptr) {
    delete sync_details_;
  }
  sync_details_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* SecurityDomainDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sync_pb.SecurityDomainDetails.SyncDetails sync_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityDomainDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SecurityDomainDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sync_pb.SecurityDomainDetails.SyncDetails sync_details = 1;
  if (this->_internal_has_sync_details()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sync_details(this),
        _Internal::sync_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SecurityDomainDetails)
  return target;
}

size_t SecurityDomainDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SecurityDomainDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sync_pb.SecurityDomainDetails.SyncDetails sync_details = 1;
  if (this->_internal_has_sync_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDomainDetails::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SecurityDomainDetails*>(
      &from));
}

void SecurityDomainDetails::MergeFrom(const SecurityDomainDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SecurityDomainDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sync_details()) {
    _internal_mutable_sync_details()->::sync_pb::SecurityDomainDetails_SyncDetails::MergeFrom(from._internal_sync_details());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SecurityDomainDetails::CopyFrom(const SecurityDomainDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SecurityDomainDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDomainDetails::IsInitialized() const {
  return true;
}

void SecurityDomainDetails::InternalSwap(SecurityDomainDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sync_details_, other->sync_details_);
}

std::string SecurityDomainDetails::GetTypeName() const {
  return "sync_pb.SecurityDomainDetails";
}


// ===================================================================

class SecurityDomain::_Internal {
 public:
  static const ::sync_pb::SecurityDomainDetails& security_domain_details(const SecurityDomain* msg);
};

const ::sync_pb::SecurityDomainDetails&
SecurityDomain::_Internal::security_domain_details(const SecurityDomain* msg) {
  return *msg->security_domain_details_;
}
SecurityDomain::SecurityDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SecurityDomain)
}
SecurityDomain::SecurityDomain(const SecurityDomain& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_security_domain_details()) {
    security_domain_details_ = new ::sync_pb::SecurityDomainDetails(*from.security_domain_details_);
  } else {
    security_domain_details_ = nullptr;
  }
  current_epoch_ = from.current_epoch_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SecurityDomain)
}

inline void SecurityDomain::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_domain_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_epoch_) -
    reinterpret_cast<char*>(&security_domain_details_)) + sizeof(current_epoch_));
}

SecurityDomain::~SecurityDomain() {
  // @@protoc_insertion_point(destructor:sync_pb.SecurityDomain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityDomain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete security_domain_details_;
}

void SecurityDomain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SecurityDomain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && security_domain_details_ != nullptr) {
    delete security_domain_details_;
  }
  security_domain_details_ = nullptr;
  current_epoch_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* SecurityDomain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int32 current_epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          current_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SecurityDomainDetails security_domain_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_domain_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityDomain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SecurityDomain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sync_pb.SecurityDomain.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 current_epoch = 2;
  if (this->_internal_current_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_epoch(), target);
  }

  // .sync_pb.SecurityDomainDetails security_domain_details = 3;
  if (this->_internal_has_security_domain_details()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::security_domain_details(this),
        _Internal::security_domain_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SecurityDomain)
  return target;
}

size_t SecurityDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SecurityDomain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .sync_pb.SecurityDomainDetails security_domain_details = 3;
  if (this->_internal_has_security_domain_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_domain_details_);
  }

  // int32 current_epoch = 2;
  if (this->_internal_current_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDomain::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SecurityDomain*>(
      &from));
}

void SecurityDomain::MergeFrom(const SecurityDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SecurityDomain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_security_domain_details()) {
    _internal_mutable_security_domain_details()->::sync_pb::SecurityDomainDetails::MergeFrom(from._internal_security_domain_details());
  }
  if (from._internal_current_epoch() != 0) {
    _internal_set_current_epoch(from._internal_current_epoch());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SecurityDomain::CopyFrom(const SecurityDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SecurityDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDomain::IsInitialized() const {
  return true;
}

void SecurityDomain::InternalSwap(SecurityDomain* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityDomain, current_epoch_)
      + sizeof(SecurityDomain::current_epoch_)
      - PROTOBUF_FIELD_OFFSET(SecurityDomain, security_domain_details_)>(
          reinterpret_cast<char*>(&security_domain_details_),
          reinterpret_cast<char*>(&other->security_domain_details_));
}

std::string SecurityDomain::GetTypeName() const {
  return "sync_pb.SecurityDomain";
}


// ===================================================================

class SecurityDomainMember_SecurityDomainMembership::_Internal {
 public:
};

SecurityDomainMember_SecurityDomainMembership::SecurityDomainMember_SecurityDomainMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  keys_(arena),
  rotation_proofs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SecurityDomainMember.SecurityDomainMembership)
}
SecurityDomainMember_SecurityDomainMembership::SecurityDomainMember_SecurityDomainMembership(const SecurityDomainMember_SecurityDomainMembership& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      keys_(from.keys_),
      rotation_proofs_(from.rotation_proofs_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  security_domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    security_domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_security_domain().empty()) {
    security_domain_.Set(from._internal_security_domain(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SecurityDomainMember.SecurityDomainMembership)
}

inline void SecurityDomainMember_SecurityDomainMembership::SharedCtor() {
security_domain_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  security_domain_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecurityDomainMember_SecurityDomainMembership::~SecurityDomainMember_SecurityDomainMembership() {
  // @@protoc_insertion_point(destructor:sync_pb.SecurityDomainMember.SecurityDomainMembership)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityDomainMember_SecurityDomainMembership::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  security_domain_.Destroy();
}

void SecurityDomainMember_SecurityDomainMembership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityDomainMember_SecurityDomainMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SecurityDomainMember.SecurityDomainMembership)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  rotation_proofs_.Clear();
  security_domain_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* SecurityDomainMember_SecurityDomainMembership::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string security_domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_security_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.SharedMemberKey keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.RotationProof rotation_proofs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rotation_proofs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityDomainMember_SecurityDomainMembership::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SecurityDomainMember.SecurityDomainMembership)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string security_domain = 1;
  if (!this->_internal_security_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_domain().data(), static_cast<int>(this->_internal_security_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sync_pb.SecurityDomainMember.SecurityDomainMembership.security_domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_security_domain(), target);
  }

  // repeated .sync_pb.SharedMemberKey keys = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sync_pb.RotationProof rotation_proofs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rotation_proofs_size()); i < n; i++) {
    const auto& repfield = this->_internal_rotation_proofs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SecurityDomainMember.SecurityDomainMembership)
  return target;
}

size_t SecurityDomainMember_SecurityDomainMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SecurityDomainMember.SecurityDomainMembership)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.SharedMemberKey keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sync_pb.RotationProof rotation_proofs = 4;
  total_size += 1UL * this->_internal_rotation_proofs_size();
  for (const auto& msg : this->rotation_proofs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string security_domain = 1;
  if (!this->_internal_security_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_domain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDomainMember_SecurityDomainMembership::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SecurityDomainMember_SecurityDomainMembership*>(
      &from));
}

void SecurityDomainMember_SecurityDomainMembership::MergeFrom(const SecurityDomainMember_SecurityDomainMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SecurityDomainMember.SecurityDomainMembership)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  rotation_proofs_.MergeFrom(from.rotation_proofs_);
  if (!from._internal_security_domain().empty()) {
    _internal_set_security_domain(from._internal_security_domain());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SecurityDomainMember_SecurityDomainMembership::CopyFrom(const SecurityDomainMember_SecurityDomainMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SecurityDomainMember.SecurityDomainMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDomainMember_SecurityDomainMembership::IsInitialized() const {
  return true;
}

void SecurityDomainMember_SecurityDomainMembership::InternalSwap(SecurityDomainMember_SecurityDomainMembership* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  rotation_proofs_.InternalSwap(&other->rotation_proofs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &security_domain_, lhs_arena,
      &other->security_domain_, rhs_arena
  );
}

std::string SecurityDomainMember_SecurityDomainMembership::GetTypeName() const {
  return "sync_pb.SecurityDomainMember.SecurityDomainMembership";
}


// ===================================================================

class SecurityDomainMember::_Internal {
 public:
};

SecurityDomainMember::SecurityDomainMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  memberships_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SecurityDomainMember)
}
SecurityDomainMember::SecurityDomainMember(const SecurityDomainMember& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      memberships_(from.memberships_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(from._internal_public_key(), 
      GetArenaForAllocation());
  }
  member_type_ = from.member_type_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SecurityDomainMember)
}

inline void SecurityDomainMember::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
member_type_ = 0;
}

SecurityDomainMember::~SecurityDomainMember() {
  // @@protoc_insertion_point(destructor:sync_pb.SecurityDomainMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityDomainMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  public_key_.Destroy();
}

void SecurityDomainMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityDomainMember::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SecurityDomainMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memberships_.Clear();
  name_.ClearToEmpty();
  public_key_.ClearToEmpty();
  member_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* SecurityDomainMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.SecurityDomainMember.SecurityDomainMembership memberships = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memberships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SecurityDomainMember.MemberType member_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_member_type(static_cast<::sync_pb::SecurityDomainMember_MemberType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityDomainMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SecurityDomainMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sync_pb.SecurityDomainMember.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // repeated .sync_pb.SecurityDomainMember.SecurityDomainMembership memberships = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_memberships_size()); i < n; i++) {
    const auto& repfield = this->_internal_memberships(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sync_pb.SecurityDomainMember.MemberType member_type = 4;
  if (this->_internal_member_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_member_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SecurityDomainMember)
  return target;
}

size_t SecurityDomainMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SecurityDomainMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.SecurityDomainMember.SecurityDomainMembership memberships = 3;
  total_size += 1UL * this->_internal_memberships_size();
  for (const auto& msg : this->memberships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // .sync_pb.SecurityDomainMember.MemberType member_type = 4;
  if (this->_internal_member_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_member_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDomainMember::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SecurityDomainMember*>(
      &from));
}

void SecurityDomainMember::MergeFrom(const SecurityDomainMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SecurityDomainMember)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  memberships_.MergeFrom(from.memberships_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_member_type() != 0) {
    _internal_set_member_type(from._internal_member_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SecurityDomainMember::CopyFrom(const SecurityDomainMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SecurityDomainMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDomainMember::IsInitialized() const {
  return true;
}

void SecurityDomainMember::InternalSwap(SecurityDomainMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  memberships_.InternalSwap(&other->memberships_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
  swap(member_type_, other->member_type_);
}

std::string SecurityDomainMember::GetTypeName() const {
  return "sync_pb.SecurityDomainMember";
}


// ===================================================================

class JoinSecurityDomainsRequest::_Internal {
 public:
  static const ::sync_pb::SecurityDomain& security_domain(const JoinSecurityDomainsRequest* msg);
  static const ::sync_pb::SecurityDomainMember& security_domain_member(const JoinSecurityDomainsRequest* msg);
};

const ::sync_pb::SecurityDomain&
JoinSecurityDomainsRequest::_Internal::security_domain(const JoinSecurityDomainsRequest* msg) {
  return *msg->security_domain_;
}
const ::sync_pb::SecurityDomainMember&
JoinSecurityDomainsRequest::_Internal::security_domain_member(const JoinSecurityDomainsRequest* msg) {
  return *msg->security_domain_member_;
}
JoinSecurityDomainsRequest::JoinSecurityDomainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  shared_member_key_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.JoinSecurityDomainsRequest)
}
JoinSecurityDomainsRequest::JoinSecurityDomainsRequest(const JoinSecurityDomainsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      shared_member_key_(from.shared_member_key_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_security_domain()) {
    security_domain_ = new ::sync_pb::SecurityDomain(*from.security_domain_);
  } else {
    security_domain_ = nullptr;
  }
  if (from._internal_has_security_domain_member()) {
    security_domain_member_ = new ::sync_pb::SecurityDomainMember(*from.security_domain_member_);
  } else {
    security_domain_member_ = nullptr;
  }
  member_type_hint_ = from.member_type_hint_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.JoinSecurityDomainsRequest)
}

inline void JoinSecurityDomainsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_domain_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_type_hint_) -
    reinterpret_cast<char*>(&security_domain_)) + sizeof(member_type_hint_));
}

JoinSecurityDomainsRequest::~JoinSecurityDomainsRequest() {
  // @@protoc_insertion_point(destructor:sync_pb.JoinSecurityDomainsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinSecurityDomainsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete security_domain_;
  if (this != internal_default_instance()) delete security_domain_member_;
}

void JoinSecurityDomainsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinSecurityDomainsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.JoinSecurityDomainsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shared_member_key_.Clear();
  if (GetArenaForAllocation() == nullptr && security_domain_ != nullptr) {
    delete security_domain_;
  }
  security_domain_ = nullptr;
  if (GetArenaForAllocation() == nullptr && security_domain_member_ != nullptr) {
    delete security_domain_member_;
  }
  security_domain_member_ = nullptr;
  member_type_hint_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* JoinSecurityDomainsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sync_pb.SecurityDomain security_domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_domain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SecurityDomainMember security_domain_member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_domain_member(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.SharedMemberKey shared_member_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shared_member_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 member_type_hint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          member_type_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinSecurityDomainsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.JoinSecurityDomainsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sync_pb.SecurityDomain security_domain = 1;
  if (this->_internal_has_security_domain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::security_domain(this),
        _Internal::security_domain(this).GetCachedSize(), target, stream);
  }

  // .sync_pb.SecurityDomainMember security_domain_member = 2;
  if (this->_internal_has_security_domain_member()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::security_domain_member(this),
        _Internal::security_domain_member(this).GetCachedSize(), target, stream);
  }

  // repeated .sync_pb.SharedMemberKey shared_member_key = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shared_member_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_shared_member_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 member_type_hint = 4;
  if (this->_internal_member_type_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_member_type_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.JoinSecurityDomainsRequest)
  return target;
}

size_t JoinSecurityDomainsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.JoinSecurityDomainsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.SharedMemberKey shared_member_key = 3;
  total_size += 1UL * this->_internal_shared_member_key_size();
  for (const auto& msg : this->shared_member_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sync_pb.SecurityDomain security_domain = 1;
  if (this->_internal_has_security_domain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_domain_);
  }

  // .sync_pb.SecurityDomainMember security_domain_member = 2;
  if (this->_internal_has_security_domain_member()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_domain_member_);
  }

  // int32 member_type_hint = 4;
  if (this->_internal_member_type_hint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_member_type_hint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinSecurityDomainsRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const JoinSecurityDomainsRequest*>(
      &from));
}

void JoinSecurityDomainsRequest::MergeFrom(const JoinSecurityDomainsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.JoinSecurityDomainsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shared_member_key_.MergeFrom(from.shared_member_key_);
  if (from._internal_has_security_domain()) {
    _internal_mutable_security_domain()->::sync_pb::SecurityDomain::MergeFrom(from._internal_security_domain());
  }
  if (from._internal_has_security_domain_member()) {
    _internal_mutable_security_domain_member()->::sync_pb::SecurityDomainMember::MergeFrom(from._internal_security_domain_member());
  }
  if (from._internal_member_type_hint() != 0) {
    _internal_set_member_type_hint(from._internal_member_type_hint());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void JoinSecurityDomainsRequest::CopyFrom(const JoinSecurityDomainsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.JoinSecurityDomainsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSecurityDomainsRequest::IsInitialized() const {
  return true;
}

void JoinSecurityDomainsRequest::InternalSwap(JoinSecurityDomainsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shared_member_key_.InternalSwap(&other->shared_member_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinSecurityDomainsRequest, member_type_hint_)
      + sizeof(JoinSecurityDomainsRequest::member_type_hint_)
      - PROTOBUF_FIELD_OFFSET(JoinSecurityDomainsRequest, security_domain_)>(
          reinterpret_cast<char*>(&security_domain_),
          reinterpret_cast<char*>(&other->security_domain_));
}

std::string JoinSecurityDomainsRequest::GetTypeName() const {
  return "sync_pb.JoinSecurityDomainsRequest";
}


// ===================================================================

class JoinSecurityDomainsResponse::_Internal {
 public:
  static const ::sync_pb::SecurityDomain& security_domain(const JoinSecurityDomainsResponse* msg);
};

const ::sync_pb::SecurityDomain&
JoinSecurityDomainsResponse::_Internal::security_domain(const JoinSecurityDomainsResponse* msg) {
  return *msg->security_domain_;
}
JoinSecurityDomainsResponse::JoinSecurityDomainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.JoinSecurityDomainsResponse)
}
JoinSecurityDomainsResponse::JoinSecurityDomainsResponse(const JoinSecurityDomainsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_security_domain()) {
    security_domain_ = new ::sync_pb::SecurityDomain(*from.security_domain_);
  } else {
    security_domain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.JoinSecurityDomainsResponse)
}

inline void JoinSecurityDomainsResponse::SharedCtor() {
security_domain_ = nullptr;
}

JoinSecurityDomainsResponse::~JoinSecurityDomainsResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.JoinSecurityDomainsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinSecurityDomainsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete security_domain_;
}

void JoinSecurityDomainsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinSecurityDomainsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.JoinSecurityDomainsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && security_domain_ != nullptr) {
    delete security_domain_;
  }
  security_domain_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* JoinSecurityDomainsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sync_pb.SecurityDomain security_domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_domain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinSecurityDomainsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.JoinSecurityDomainsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sync_pb.SecurityDomain security_domain = 1;
  if (this->_internal_has_security_domain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::security_domain(this),
        _Internal::security_domain(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.JoinSecurityDomainsResponse)
  return target;
}

size_t JoinSecurityDomainsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.JoinSecurityDomainsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sync_pb.SecurityDomain security_domain = 1;
  if (this->_internal_has_security_domain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_domain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinSecurityDomainsResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const JoinSecurityDomainsResponse*>(
      &from));
}

void JoinSecurityDomainsResponse::MergeFrom(const JoinSecurityDomainsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.JoinSecurityDomainsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_security_domain()) {
    _internal_mutable_security_domain()->::sync_pb::SecurityDomain::MergeFrom(from._internal_security_domain());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void JoinSecurityDomainsResponse::CopyFrom(const JoinSecurityDomainsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.JoinSecurityDomainsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSecurityDomainsResponse::IsInitialized() const {
  return true;
}

void JoinSecurityDomainsResponse::InternalSwap(JoinSecurityDomainsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(security_domain_, other->security_domain_);
}

std::string JoinSecurityDomainsResponse::GetTypeName() const {
  return "sync_pb.JoinSecurityDomainsResponse";
}


// ===================================================================

class JoinSecurityDomainsErrorDetail::_Internal {
 public:
  static const ::sync_pb::JoinSecurityDomainsResponse& already_exists_response(const JoinSecurityDomainsErrorDetail* msg);
};

const ::sync_pb::JoinSecurityDomainsResponse&
JoinSecurityDomainsErrorDetail::_Internal::already_exists_response(const JoinSecurityDomainsErrorDetail* msg) {
  return *msg->already_exists_response_;
}
JoinSecurityDomainsErrorDetail::JoinSecurityDomainsErrorDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.JoinSecurityDomainsErrorDetail)
}
JoinSecurityDomainsErrorDetail::JoinSecurityDomainsErrorDetail(const JoinSecurityDomainsErrorDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_already_exists_response()) {
    already_exists_response_ = new ::sync_pb::JoinSecurityDomainsResponse(*from.already_exists_response_);
  } else {
    already_exists_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.JoinSecurityDomainsErrorDetail)
}

inline void JoinSecurityDomainsErrorDetail::SharedCtor() {
already_exists_response_ = nullptr;
}

JoinSecurityDomainsErrorDetail::~JoinSecurityDomainsErrorDetail() {
  // @@protoc_insertion_point(destructor:sync_pb.JoinSecurityDomainsErrorDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinSecurityDomainsErrorDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete already_exists_response_;
}

void JoinSecurityDomainsErrorDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinSecurityDomainsErrorDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.JoinSecurityDomainsErrorDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && already_exists_response_ != nullptr) {
    delete already_exists_response_;
  }
  already_exists_response_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* JoinSecurityDomainsErrorDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sync_pb.JoinSecurityDomainsResponse already_exists_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_already_exists_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinSecurityDomainsErrorDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.JoinSecurityDomainsErrorDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sync_pb.JoinSecurityDomainsResponse already_exists_response = 1;
  if (this->_internal_has_already_exists_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::already_exists_response(this),
        _Internal::already_exists_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.JoinSecurityDomainsErrorDetail)
  return target;
}

size_t JoinSecurityDomainsErrorDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.JoinSecurityDomainsErrorDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sync_pb.JoinSecurityDomainsResponse already_exists_response = 1;
  if (this->_internal_has_already_exists_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *already_exists_response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinSecurityDomainsErrorDetail::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const JoinSecurityDomainsErrorDetail*>(
      &from));
}

void JoinSecurityDomainsErrorDetail::MergeFrom(const JoinSecurityDomainsErrorDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.JoinSecurityDomainsErrorDetail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_already_exists_response()) {
    _internal_mutable_already_exists_response()->::sync_pb::JoinSecurityDomainsResponse::MergeFrom(from._internal_already_exists_response());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void JoinSecurityDomainsErrorDetail::CopyFrom(const JoinSecurityDomainsErrorDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.JoinSecurityDomainsErrorDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSecurityDomainsErrorDetail::IsInitialized() const {
  return true;
}

void JoinSecurityDomainsErrorDetail::InternalSwap(JoinSecurityDomainsErrorDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(already_exists_response_, other->already_exists_response_);
}

std::string JoinSecurityDomainsErrorDetail::GetTypeName() const {
  return "sync_pb.JoinSecurityDomainsErrorDetail";
}


// ===================================================================

class Proto3Any::_Internal {
 public:
};

Proto3Any::Proto3Any(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.Proto3Any)
}
Proto3Any::Proto3Any(const Proto3Any& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  type_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_url().empty()) {
    type_url_.Set(from._internal_type_url(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.Proto3Any)
}

inline void Proto3Any::SharedCtor() {
type_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Proto3Any::~Proto3Any() {
  // @@protoc_insertion_point(destructor:sync_pb.Proto3Any)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Proto3Any::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_url_.Destroy();
  value_.Destroy();
}

void Proto3Any::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Proto3Any::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.Proto3Any)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_url_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Proto3Any::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Proto3Any::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.Proto3Any)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type_url = 1;
  if (!this->_internal_type_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_url().data(), static_cast<int>(this->_internal_type_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sync_pb.Proto3Any.type_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_url(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.Proto3Any)
  return target;
}

size_t Proto3Any::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.Proto3Any)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_url = 1;
  if (!this->_internal_type_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_url());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proto3Any::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Proto3Any*>(
      &from));
}

void Proto3Any::MergeFrom(const Proto3Any& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.Proto3Any)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type_url().empty()) {
    _internal_set_type_url(from._internal_type_url());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Proto3Any::CopyFrom(const Proto3Any& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.Proto3Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto3Any::IsInitialized() const {
  return true;
}

void Proto3Any::InternalSwap(Proto3Any* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_url_, lhs_arena,
      &other->type_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string Proto3Any::GetTypeName() const {
  return "sync_pb.Proto3Any";
}


// ===================================================================

class RPCStatus::_Internal {
 public:
};

RPCStatus::RPCStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  details_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.RPCStatus)
}
RPCStatus::RPCStatus(const RPCStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      details_(from.details_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.RPCStatus)
}

inline void RPCStatus::SharedCtor() {
}

RPCStatus::~RPCStatus() {
  // @@protoc_insertion_point(destructor:sync_pb.RPCStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPCStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RPCStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.RPCStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RPCStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sync_pb.Proto3Any details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.RPCStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.Proto3Any details = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.RPCStatus)
  return target;
}

size_t RPCStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.RPCStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.Proto3Any details = 3;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RPCStatus*>(
      &from));
}

void RPCStatus::MergeFrom(const RPCStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.RPCStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RPCStatus::CopyFrom(const RPCStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.RPCStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCStatus::IsInitialized() const {
  return true;
}

void RPCStatus::InternalSwap(RPCStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  details_.InternalSwap(&other->details_);
}

std::string RPCStatus::GetTypeName() const {
  return "sync_pb.RPCStatus";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SharedMemberKey*
Arena::CreateMaybeMessage< ::sync_pb::SharedMemberKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SharedMemberKey >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::RotationProof*
Arena::CreateMaybeMessage< ::sync_pb::RotationProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::RotationProof >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SecurityDomainDetails_SyncDetails*
Arena::CreateMaybeMessage< ::sync_pb::SecurityDomainDetails_SyncDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SecurityDomainDetails_SyncDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SecurityDomainDetails*
Arena::CreateMaybeMessage< ::sync_pb::SecurityDomainDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SecurityDomainDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SecurityDomain*
Arena::CreateMaybeMessage< ::sync_pb::SecurityDomain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SecurityDomain >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SecurityDomainMember_SecurityDomainMembership*
Arena::CreateMaybeMessage< ::sync_pb::SecurityDomainMember_SecurityDomainMembership >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SecurityDomainMember_SecurityDomainMembership >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SecurityDomainMember*
Arena::CreateMaybeMessage< ::sync_pb::SecurityDomainMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SecurityDomainMember >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::JoinSecurityDomainsRequest*
Arena::CreateMaybeMessage< ::sync_pb::JoinSecurityDomainsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::JoinSecurityDomainsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::JoinSecurityDomainsResponse*
Arena::CreateMaybeMessage< ::sync_pb::JoinSecurityDomainsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::JoinSecurityDomainsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::JoinSecurityDomainsErrorDetail*
Arena::CreateMaybeMessage< ::sync_pb::JoinSecurityDomainsErrorDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::JoinSecurityDomainsErrorDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::Proto3Any*
Arena::CreateMaybeMessage< ::sync_pb::Proto3Any >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::Proto3Any >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::RPCStatus*
Arena::CreateMaybeMessage< ::sync_pb::RPCStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::RPCStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
