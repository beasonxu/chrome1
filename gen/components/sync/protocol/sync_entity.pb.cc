// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sync_entity.proto

#include "components/sync/protocol/sync_entity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR SyncEntity::SyncEntity(
    ::_pbi::ConstantInitialized)
  : id_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , parent_id_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , non_unique_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , server_defined_unique_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insert_after_item_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , originator_cache_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , originator_client_item_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_defined_unique_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , specifics_(nullptr)
  , unique_position_(nullptr)
  , version_(int64_t{0})
  , mtime_(int64_t{0})
  , ctime_(int64_t{0})
  , position_in_parent_(int64_t{0})
  , deleted_(false)
  , folder_(false){}
struct SyncEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncEntityDefaultTypeInternal() {}
  union {
    SyncEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncEntityDefaultTypeInternal _SyncEntity_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class SyncEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncEntity>()._has_bits_);
  static void set_has_id_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parent_id_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ctime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_non_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_defined_unique_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_position_in_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_insert_after_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_originator_cache_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_originator_client_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::sync_pb::EntitySpecifics& specifics(const SyncEntity* msg);
  static void set_has_specifics(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_client_defined_unique_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::sync_pb::UniquePosition& unique_position(const SyncEntity* msg);
  static void set_has_unique_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::sync_pb::EntitySpecifics&
SyncEntity::_Internal::specifics(const SyncEntity* msg) {
  return *msg->specifics_;
}
const ::sync_pb::UniquePosition&
SyncEntity::_Internal::unique_position(const SyncEntity* msg) {
  return *msg->unique_position_;
}
void SyncEntity::clear_specifics() {
  if (specifics_ != nullptr) specifics_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void SyncEntity::clear_unique_position() {
  if (unique_position_ != nullptr) unique_position_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
SyncEntity::SyncEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SyncEntity)
}
SyncEntity::SyncEntity(const SyncEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id_string()) {
    id_string_.Set(from._internal_id_string(), 
      GetArenaForAllocation());
  }
  parent_id_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_id_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parent_id_string()) {
    parent_id_string_.Set(from._internal_parent_id_string(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  non_unique_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    non_unique_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_non_unique_name()) {
    non_unique_name_.Set(from._internal_non_unique_name(), 
      GetArenaForAllocation());
  }
  server_defined_unique_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_defined_unique_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_defined_unique_tag()) {
    server_defined_unique_tag_.Set(from._internal_server_defined_unique_tag(), 
      GetArenaForAllocation());
  }
  insert_after_item_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    insert_after_item_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_insert_after_item_id()) {
    insert_after_item_id_.Set(from._internal_insert_after_item_id(), 
      GetArenaForAllocation());
  }
  originator_cache_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    originator_cache_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originator_cache_guid()) {
    originator_cache_guid_.Set(from._internal_originator_cache_guid(), 
      GetArenaForAllocation());
  }
  originator_client_item_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    originator_client_item_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originator_client_item_id()) {
    originator_client_item_id_.Set(from._internal_originator_client_item_id(), 
      GetArenaForAllocation());
  }
  client_defined_unique_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_defined_unique_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_defined_unique_tag()) {
    client_defined_unique_tag_.Set(from._internal_client_defined_unique_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_specifics()) {
    specifics_ = new ::sync_pb::EntitySpecifics(*from.specifics_);
  } else {
    specifics_ = nullptr;
  }
  if (from._internal_has_unique_position()) {
    unique_position_ = new ::sync_pb::UniquePosition(*from.unique_position_);
  } else {
    unique_position_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&folder_) -
    reinterpret_cast<char*>(&version_)) + sizeof(folder_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncEntity)
}

inline void SyncEntity::SharedCtor() {
id_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_id_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_id_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
non_unique_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  non_unique_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
server_defined_unique_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_defined_unique_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insert_after_item_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  insert_after_item_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
originator_cache_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  originator_cache_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
originator_client_item_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  originator_client_item_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_defined_unique_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_defined_unique_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&specifics_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&folder_) -
    reinterpret_cast<char*>(&specifics_)) + sizeof(folder_));
}

SyncEntity::~SyncEntity() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_string_.Destroy();
  parent_id_string_.Destroy();
  name_.Destroy();
  non_unique_name_.Destroy();
  server_defined_unique_tag_.Destroy();
  insert_after_item_id_.Destroy();
  originator_cache_guid_.Destroy();
  originator_client_item_id_.Destroy();
  client_defined_unique_tag_.Destroy();
  if (this != internal_default_instance()) delete specifics_;
  if (this != internal_default_instance()) delete unique_position_;
}

void SyncEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      parent_id_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      non_unique_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      server_defined_unique_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      insert_after_item_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      originator_cache_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      originator_client_item_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      client_defined_unique_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(specifics_ != nullptr);
      specifics_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(unique_position_ != nullptr);
      unique_position_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deleted_) -
        reinterpret_cast<char*>(&version_)) + sizeof(deleted_));
  }
  folder_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SyncEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string parent_id_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_parent_id_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mtime(&has_bits);
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ctime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ctime(&has_bits);
          ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string non_unique_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_non_unique_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_defined_unique_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_server_defined_unique_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 position_in_parent = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_position_in_parent(&has_bits);
          position_in_parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string insert_after_item_id = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_insert_after_item_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deleted = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_deleted(&has_bits);
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string originator_cache_guid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_originator_cache_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string originator_client_item_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_originator_client_item_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.EntitySpecifics specifics = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_specifics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool folder = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_folder(&has_bits);
          folder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string client_defined_unique_tag = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_client_defined_unique_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.UniquePosition unique_position = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_unique_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SyncEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id_string = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id_string(), target);
  }

  // optional string parent_id_string = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parent_id_string(), target);
  }

  // optional int64 version = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_version(), target);
  }

  // optional int64 mtime = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_mtime(), target);
  }

  // optional int64 ctime = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_ctime(), target);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  // optional string non_unique_name = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_non_unique_name(), target);
  }

  // optional string server_defined_unique_tag = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_server_defined_unique_tag(), target);
  }

  // optional int64 position_in_parent = 15 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_position_in_parent(), target);
  }

  // optional string insert_after_item_id = 16 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_insert_after_item_id(), target);
  }

  // optional bool deleted = 18 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_deleted(), target);
  }

  // optional string originator_cache_guid = 19;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_originator_cache_guid(), target);
  }

  // optional string originator_client_item_id = 20;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_originator_client_item_id(), target);
  }

  // optional .sync_pb.EntitySpecifics specifics = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::specifics(this),
        _Internal::specifics(this).GetCachedSize(), target, stream);
  }

  // optional bool folder = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_folder(), target);
  }

  // optional string client_defined_unique_tag = 23;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_client_defined_unique_tag(), target);
  }

  // optional .sync_pb.UniquePosition unique_position = 25;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::unique_position(this),
        _Internal::unique_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SyncEntity)
  return target;
}

size_t SyncEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id_string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id_string());
    }

    // optional string parent_id_string = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parent_id_string());
    }

    // optional string name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string non_unique_name = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_non_unique_name());
    }

    // optional string server_defined_unique_tag = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_defined_unique_tag());
    }

    // optional string insert_after_item_id = 16 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_insert_after_item_id());
    }

    // optional string originator_cache_guid = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originator_cache_guid());
    }

    // optional string originator_client_item_id = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originator_client_item_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string client_defined_unique_tag = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_defined_unique_tag());
    }

    // optional .sync_pb.EntitySpecifics specifics = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_);
    }

    // optional .sync_pb.UniquePosition unique_position = 25;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unique_position_);
    }

    // optional int64 version = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
    }

    // optional int64 mtime = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mtime());
    }

    // optional int64 ctime = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ctime());
    }

    // optional int64 position_in_parent = 15 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_position_in_parent());
    }

    // optional bool deleted = 18 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool folder = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncEntity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SyncEntity*>(
      &from));
}

void SyncEntity::MergeFrom(const SyncEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncEntity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id_string(from._internal_id_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_parent_id_string(from._internal_parent_id_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_non_unique_name(from._internal_non_unique_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_server_defined_unique_tag(from._internal_server_defined_unique_tag());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_insert_after_item_id(from._internal_insert_after_item_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_originator_cache_guid(from._internal_originator_cache_guid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_originator_client_item_id(from._internal_originator_client_item_id());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_client_defined_unique_tag(from._internal_client_defined_unique_tag());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_specifics()->::sync_pb::EntitySpecifics::MergeFrom(from._internal_specifics());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_unique_position()->::sync_pb::UniquePosition::MergeFrom(from._internal_unique_position());
    }
    if (cached_has_bits & 0x00000800u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00001000u) {
      mtime_ = from.mtime_;
    }
    if (cached_has_bits & 0x00002000u) {
      ctime_ = from.ctime_;
    }
    if (cached_has_bits & 0x00004000u) {
      position_in_parent_ = from.position_in_parent_;
    }
    if (cached_has_bits & 0x00008000u) {
      deleted_ = from.deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_folder(from._internal_folder());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SyncEntity::CopyFrom(const SyncEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEntity::IsInitialized() const {
  return true;
}

void SyncEntity::InternalSwap(SyncEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_string_, lhs_arena,
      &other->id_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_id_string_, lhs_arena,
      &other->parent_id_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &non_unique_name_, lhs_arena,
      &other->non_unique_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &server_defined_unique_tag_, lhs_arena,
      &other->server_defined_unique_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &insert_after_item_id_, lhs_arena,
      &other->insert_after_item_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &originator_cache_guid_, lhs_arena,
      &other->originator_cache_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &originator_client_item_id_, lhs_arena,
      &other->originator_client_item_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_defined_unique_tag_, lhs_arena,
      &other->client_defined_unique_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncEntity, folder_)
      + sizeof(SyncEntity::folder_)
      - PROTOBUF_FIELD_OFFSET(SyncEntity, specifics_)>(
          reinterpret_cast<char*>(&specifics_),
          reinterpret_cast<char*>(&other->specifics_));
}

std::string SyncEntity::GetTypeName() const {
  return "sync_pb.SyncEntity";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SyncEntity*
Arena::CreateMaybeMessage< ::sync_pb::SyncEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SyncEntity >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
