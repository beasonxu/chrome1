// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/entity_specifics.proto

#include "components/sync/protocol/entity_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR EntitySpecifics::EntitySpecifics(
    ::_pbi::ConstantInitialized)
  : encrypted_(nullptr)
  , _oneof_case_{}{}
struct EntitySpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntitySpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntitySpecificsDefaultTypeInternal() {}
  union {
    EntitySpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntitySpecificsDefaultTypeInternal _EntitySpecifics_default_instance_;
PROTOBUF_CONSTEXPR EmptySpecifics::EmptySpecifics(
    ::_pbi::ConstantInitialized){}
struct EmptySpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptySpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptySpecificsDefaultTypeInternal() {}
  union {
    EmptySpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptySpecificsDefaultTypeInternal _EmptySpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class EntitySpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<EntitySpecifics>()._has_bits_);
  static const ::sync_pb::EncryptedData& encrypted(const EntitySpecifics* msg);
  static void set_has_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::AutofillSpecifics& autofill(const EntitySpecifics* msg);
  static const ::sync_pb::BookmarkSpecifics& bookmark(const EntitySpecifics* msg);
  static const ::sync_pb::PreferenceSpecifics& preference(const EntitySpecifics* msg);
  static const ::sync_pb::TypedUrlSpecifics& typed_url(const EntitySpecifics* msg);
  static const ::sync_pb::ThemeSpecifics& theme(const EntitySpecifics* msg);
  static const ::sync_pb::AppNotification& app_notification(const EntitySpecifics* msg);
  static const ::sync_pb::PasswordSpecifics& password(const EntitySpecifics* msg);
  static const ::sync_pb::NigoriSpecifics& nigori(const EntitySpecifics* msg);
  static const ::sync_pb::ExtensionSpecifics& extension(const EntitySpecifics* msg);
  static const ::sync_pb::AppSpecifics& app(const EntitySpecifics* msg);
  static const ::sync_pb::SessionSpecifics& session(const EntitySpecifics* msg);
  static const ::sync_pb::AutofillProfileSpecifics& autofill_profile(const EntitySpecifics* msg);
  static const ::sync_pb::SearchEngineSpecifics& search_engine(const EntitySpecifics* msg);
  static const ::sync_pb::ExtensionSettingSpecifics& extension_setting(const EntitySpecifics* msg);
  static const ::sync_pb::AppSettingSpecifics& app_setting(const EntitySpecifics* msg);
  static const ::sync_pb::HistoryDeleteDirectiveSpecifics& history_delete_directive(const EntitySpecifics* msg);
  static const ::sync_pb::SyncedNotificationSpecifics& synced_notification(const EntitySpecifics* msg);
  static const ::sync_pb::SyncedNotificationAppInfoSpecifics& synced_notification_app_info(const EntitySpecifics* msg);
  static const ::sync_pb::DeviceInfoSpecifics& device_info(const EntitySpecifics* msg);
  static const ::sync_pb::ExperimentsSpecifics& experiments(const EntitySpecifics* msg);
  static const ::sync_pb::PriorityPreferenceSpecifics& priority_preference(const EntitySpecifics* msg);
  static const ::sync_pb::DictionarySpecifics& dictionary(const EntitySpecifics* msg);
  static const ::sync_pb::FaviconTrackingSpecifics& favicon_tracking(const EntitySpecifics* msg);
  static const ::sync_pb::FaviconImageSpecifics& favicon_image(const EntitySpecifics* msg);
  static const ::sync_pb::ManagedUserSettingSpecifics& managed_user_setting(const EntitySpecifics* msg);
  static const ::sync_pb::ManagedUserSpecifics& managed_user(const EntitySpecifics* msg);
  static const ::sync_pb::ManagedUserSharedSettingSpecifics& managed_user_shared_setting(const EntitySpecifics* msg);
  static const ::sync_pb::AppListSpecifics& app_list(const EntitySpecifics* msg);
  static const ::sync_pb::EmptySpecifics& managed_user_allowlist(const EntitySpecifics* msg);
  static const ::sync_pb::AutofillWalletSpecifics& autofill_wallet(const EntitySpecifics* msg);
  static const ::sync_pb::WalletMetadataSpecifics& wallet_metadata(const EntitySpecifics* msg);
  static const ::sync_pb::ArcPackageSpecifics& arc_package(const EntitySpecifics* msg);
  static const ::sync_pb::PrinterSpecifics& printer(const EntitySpecifics* msg);
  static const ::sync_pb::ReadingListSpecifics& reading_list(const EntitySpecifics* msg);
  static const ::sync_pb::UserEventSpecifics& user_event(const EntitySpecifics* msg);
  static const ::sync_pb::UserConsentSpecifics& user_consent(const EntitySpecifics* msg);
  static const ::sync_pb::SendTabToSelfSpecifics& send_tab_to_self(const EntitySpecifics* msg);
  static const ::sync_pb::SecurityEventSpecifics& security_event(const EntitySpecifics* msg);
  static const ::sync_pb::WebAppSpecifics& web_app(const EntitySpecifics* msg);
  static const ::sync_pb::WifiConfigurationSpecifics& wifi_configuration(const EntitySpecifics* msg);
  static const ::sync_pb::OsPreferenceSpecifics& os_preference(const EntitySpecifics* msg);
  static const ::sync_pb::OsPriorityPreferenceSpecifics& os_priority_preference(const EntitySpecifics* msg);
  static const ::sync_pb::SharingMessageSpecifics& sharing_message(const EntitySpecifics* msg);
  static const ::sync_pb::AutofillOfferSpecifics& autofill_offer(const EntitySpecifics* msg);
  static const ::sync_pb::WorkspaceDeskSpecifics& workspace_desk(const EntitySpecifics* msg);
  static const ::sync_pb::WebauthnCredentialSpecifics& webauthn_credential(const EntitySpecifics* msg);
  static const ::sync_pb::HistorySpecifics& history(const EntitySpecifics* msg);
  static const ::sync_pb::PrintersAuthorizationServerSpecifics& printers_authorization_server(const EntitySpecifics* msg);
  static const ::sync_pb::SavedTabGroupSpecifics& saved_tab_group(const EntitySpecifics* msg);
  static const ::sync_pb::AutofillWalletUsageSpecifics& autofill_wallet_usage(const EntitySpecifics* msg);
};

const ::sync_pb::EncryptedData&
EntitySpecifics::_Internal::encrypted(const EntitySpecifics* msg) {
  return *msg->encrypted_;
}
const ::sync_pb::AutofillSpecifics&
EntitySpecifics::_Internal::autofill(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.autofill_;
}
const ::sync_pb::BookmarkSpecifics&
EntitySpecifics::_Internal::bookmark(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.bookmark_;
}
const ::sync_pb::PreferenceSpecifics&
EntitySpecifics::_Internal::preference(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.preference_;
}
const ::sync_pb::TypedUrlSpecifics&
EntitySpecifics::_Internal::typed_url(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.typed_url_;
}
const ::sync_pb::ThemeSpecifics&
EntitySpecifics::_Internal::theme(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.theme_;
}
const ::sync_pb::AppNotification&
EntitySpecifics::_Internal::app_notification(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.app_notification_;
}
const ::sync_pb::PasswordSpecifics&
EntitySpecifics::_Internal::password(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.password_;
}
const ::sync_pb::NigoriSpecifics&
EntitySpecifics::_Internal::nigori(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.nigori_;
}
const ::sync_pb::ExtensionSpecifics&
EntitySpecifics::_Internal::extension(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.extension_;
}
const ::sync_pb::AppSpecifics&
EntitySpecifics::_Internal::app(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.app_;
}
const ::sync_pb::SessionSpecifics&
EntitySpecifics::_Internal::session(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.session_;
}
const ::sync_pb::AutofillProfileSpecifics&
EntitySpecifics::_Internal::autofill_profile(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.autofill_profile_;
}
const ::sync_pb::SearchEngineSpecifics&
EntitySpecifics::_Internal::search_engine(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.search_engine_;
}
const ::sync_pb::ExtensionSettingSpecifics&
EntitySpecifics::_Internal::extension_setting(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.extension_setting_;
}
const ::sync_pb::AppSettingSpecifics&
EntitySpecifics::_Internal::app_setting(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.app_setting_;
}
const ::sync_pb::HistoryDeleteDirectiveSpecifics&
EntitySpecifics::_Internal::history_delete_directive(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.history_delete_directive_;
}
const ::sync_pb::SyncedNotificationSpecifics&
EntitySpecifics::_Internal::synced_notification(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.synced_notification_;
}
const ::sync_pb::SyncedNotificationAppInfoSpecifics&
EntitySpecifics::_Internal::synced_notification_app_info(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.synced_notification_app_info_;
}
const ::sync_pb::DeviceInfoSpecifics&
EntitySpecifics::_Internal::device_info(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.device_info_;
}
const ::sync_pb::ExperimentsSpecifics&
EntitySpecifics::_Internal::experiments(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.experiments_;
}
const ::sync_pb::PriorityPreferenceSpecifics&
EntitySpecifics::_Internal::priority_preference(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.priority_preference_;
}
const ::sync_pb::DictionarySpecifics&
EntitySpecifics::_Internal::dictionary(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.dictionary_;
}
const ::sync_pb::FaviconTrackingSpecifics&
EntitySpecifics::_Internal::favicon_tracking(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.favicon_tracking_;
}
const ::sync_pb::FaviconImageSpecifics&
EntitySpecifics::_Internal::favicon_image(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.favicon_image_;
}
const ::sync_pb::ManagedUserSettingSpecifics&
EntitySpecifics::_Internal::managed_user_setting(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.managed_user_setting_;
}
const ::sync_pb::ManagedUserSpecifics&
EntitySpecifics::_Internal::managed_user(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.managed_user_;
}
const ::sync_pb::ManagedUserSharedSettingSpecifics&
EntitySpecifics::_Internal::managed_user_shared_setting(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.managed_user_shared_setting_;
}
const ::sync_pb::AppListSpecifics&
EntitySpecifics::_Internal::app_list(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.app_list_;
}
const ::sync_pb::EmptySpecifics&
EntitySpecifics::_Internal::managed_user_allowlist(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.managed_user_allowlist_;
}
const ::sync_pb::AutofillWalletSpecifics&
EntitySpecifics::_Internal::autofill_wallet(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.autofill_wallet_;
}
const ::sync_pb::WalletMetadataSpecifics&
EntitySpecifics::_Internal::wallet_metadata(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.wallet_metadata_;
}
const ::sync_pb::ArcPackageSpecifics&
EntitySpecifics::_Internal::arc_package(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.arc_package_;
}
const ::sync_pb::PrinterSpecifics&
EntitySpecifics::_Internal::printer(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.printer_;
}
const ::sync_pb::ReadingListSpecifics&
EntitySpecifics::_Internal::reading_list(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.reading_list_;
}
const ::sync_pb::UserEventSpecifics&
EntitySpecifics::_Internal::user_event(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.user_event_;
}
const ::sync_pb::UserConsentSpecifics&
EntitySpecifics::_Internal::user_consent(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.user_consent_;
}
const ::sync_pb::SendTabToSelfSpecifics&
EntitySpecifics::_Internal::send_tab_to_self(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.send_tab_to_self_;
}
const ::sync_pb::SecurityEventSpecifics&
EntitySpecifics::_Internal::security_event(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.security_event_;
}
const ::sync_pb::WebAppSpecifics&
EntitySpecifics::_Internal::web_app(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.web_app_;
}
const ::sync_pb::WifiConfigurationSpecifics&
EntitySpecifics::_Internal::wifi_configuration(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.wifi_configuration_;
}
const ::sync_pb::OsPreferenceSpecifics&
EntitySpecifics::_Internal::os_preference(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.os_preference_;
}
const ::sync_pb::OsPriorityPreferenceSpecifics&
EntitySpecifics::_Internal::os_priority_preference(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.os_priority_preference_;
}
const ::sync_pb::SharingMessageSpecifics&
EntitySpecifics::_Internal::sharing_message(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.sharing_message_;
}
const ::sync_pb::AutofillOfferSpecifics&
EntitySpecifics::_Internal::autofill_offer(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.autofill_offer_;
}
const ::sync_pb::WorkspaceDeskSpecifics&
EntitySpecifics::_Internal::workspace_desk(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.workspace_desk_;
}
const ::sync_pb::WebauthnCredentialSpecifics&
EntitySpecifics::_Internal::webauthn_credential(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.webauthn_credential_;
}
const ::sync_pb::HistorySpecifics&
EntitySpecifics::_Internal::history(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.history_;
}
const ::sync_pb::PrintersAuthorizationServerSpecifics&
EntitySpecifics::_Internal::printers_authorization_server(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.printers_authorization_server_;
}
const ::sync_pb::SavedTabGroupSpecifics&
EntitySpecifics::_Internal::saved_tab_group(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.saved_tab_group_;
}
const ::sync_pb::AutofillWalletUsageSpecifics&
EntitySpecifics::_Internal::autofill_wallet_usage(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.autofill_wallet_usage_;
}
void EntitySpecifics::clear_encrypted() {
  if (encrypted_ != nullptr) encrypted_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void EntitySpecifics::set_allocated_autofill(::sync_pb::AutofillSpecifics* autofill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (autofill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autofill));
    if (message_arena != submessage_arena) {
      autofill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill, submessage_arena);
    }
    set_has_autofill();
    specifics_variant_.autofill_ = autofill;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill)
}
void EntitySpecifics::clear_autofill() {
  if (_internal_has_autofill()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.autofill_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_bookmark(::sync_pb::BookmarkSpecifics* bookmark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (bookmark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bookmark));
    if (message_arena != submessage_arena) {
      bookmark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bookmark, submessage_arena);
    }
    set_has_bookmark();
    specifics_variant_.bookmark_ = bookmark;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.bookmark)
}
void EntitySpecifics::clear_bookmark() {
  if (_internal_has_bookmark()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.bookmark_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_preference(::sync_pb::PreferenceSpecifics* preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preference));
    if (message_arena != submessage_arena) {
      preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preference, submessage_arena);
    }
    set_has_preference();
    specifics_variant_.preference_ = preference;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.preference)
}
void EntitySpecifics::clear_preference() {
  if (_internal_has_preference()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.preference_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_typed_url(::sync_pb::TypedUrlSpecifics* typed_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (typed_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(typed_url));
    if (message_arena != submessage_arena) {
      typed_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typed_url, submessage_arena);
    }
    set_has_typed_url();
    specifics_variant_.typed_url_ = typed_url;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.typed_url)
}
void EntitySpecifics::clear_typed_url() {
  if (_internal_has_typed_url()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.typed_url_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_theme(::sync_pb::ThemeSpecifics* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    set_has_theme();
    specifics_variant_.theme_ = theme;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.theme)
}
void EntitySpecifics::clear_theme() {
  if (_internal_has_theme()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.theme_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_app_notification(::sync_pb::AppNotification* app_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (app_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_notification));
    if (message_arena != submessage_arena) {
      app_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_notification, submessage_arena);
    }
    set_has_app_notification();
    specifics_variant_.app_notification_ = app_notification;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_notification)
}
void EntitySpecifics::clear_app_notification() {
  if (_internal_has_app_notification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.app_notification_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_password(::sync_pb::PasswordSpecifics* password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password));
    if (message_arena != submessage_arena) {
      password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    set_has_password();
    specifics_variant_.password_ = password;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.password)
}
void EntitySpecifics::clear_password() {
  if (_internal_has_password()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.password_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_nigori(::sync_pb::NigoriSpecifics* nigori) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (nigori) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nigori));
    if (message_arena != submessage_arena) {
      nigori = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nigori, submessage_arena);
    }
    set_has_nigori();
    specifics_variant_.nigori_ = nigori;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.nigori)
}
void EntitySpecifics::clear_nigori() {
  if (_internal_has_nigori()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.nigori_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_extension(::sync_pb::ExtensionSpecifics* extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension));
    if (message_arena != submessage_arena) {
      extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    set_has_extension();
    specifics_variant_.extension_ = extension;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.extension)
}
void EntitySpecifics::clear_extension() {
  if (_internal_has_extension()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.extension_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_app(::sync_pb::AppSpecifics* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app));
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    set_has_app();
    specifics_variant_.app_ = app;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app)
}
void EntitySpecifics::clear_app() {
  if (_internal_has_app()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.app_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_session(::sync_pb::SessionSpecifics* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session));
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    specifics_variant_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.session)
}
void EntitySpecifics::clear_session() {
  if (_internal_has_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.session_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_autofill_profile(::sync_pb::AutofillProfileSpecifics* autofill_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (autofill_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autofill_profile));
    if (message_arena != submessage_arena) {
      autofill_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill_profile, submessage_arena);
    }
    set_has_autofill_profile();
    specifics_variant_.autofill_profile_ = autofill_profile;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill_profile)
}
void EntitySpecifics::clear_autofill_profile() {
  if (_internal_has_autofill_profile()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.autofill_profile_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_search_engine(::sync_pb::SearchEngineSpecifics* search_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (search_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_engine));
    if (message_arena != submessage_arena) {
      search_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_engine, submessage_arena);
    }
    set_has_search_engine();
    specifics_variant_.search_engine_ = search_engine;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.search_engine)
}
void EntitySpecifics::clear_search_engine() {
  if (_internal_has_search_engine()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.search_engine_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_extension_setting(::sync_pb::ExtensionSettingSpecifics* extension_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (extension_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_setting));
    if (message_arena != submessage_arena) {
      extension_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_setting, submessage_arena);
    }
    set_has_extension_setting();
    specifics_variant_.extension_setting_ = extension_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.extension_setting)
}
void EntitySpecifics::clear_extension_setting() {
  if (_internal_has_extension_setting()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.extension_setting_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_app_setting(::sync_pb::AppSettingSpecifics* app_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (app_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_setting));
    if (message_arena != submessage_arena) {
      app_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_setting, submessage_arena);
    }
    set_has_app_setting();
    specifics_variant_.app_setting_ = app_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_setting)
}
void EntitySpecifics::clear_app_setting() {
  if (_internal_has_app_setting()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.app_setting_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_history_delete_directive(::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (history_delete_directive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(history_delete_directive));
    if (message_arena != submessage_arena) {
      history_delete_directive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history_delete_directive, submessage_arena);
    }
    set_has_history_delete_directive();
    specifics_variant_.history_delete_directive_ = history_delete_directive;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.history_delete_directive)
}
void EntitySpecifics::clear_history_delete_directive() {
  if (_internal_has_history_delete_directive()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.history_delete_directive_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_synced_notification(::sync_pb::SyncedNotificationSpecifics* synced_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (synced_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synced_notification));
    if (message_arena != submessage_arena) {
      synced_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synced_notification, submessage_arena);
    }
    set_has_synced_notification();
    specifics_variant_.synced_notification_ = synced_notification;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.synced_notification)
}
void EntitySpecifics::clear_synced_notification() {
  if (_internal_has_synced_notification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.synced_notification_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_synced_notification_app_info(::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (synced_notification_app_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(synced_notification_app_info));
    if (message_arena != submessage_arena) {
      synced_notification_app_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synced_notification_app_info, submessage_arena);
    }
    set_has_synced_notification_app_info();
    specifics_variant_.synced_notification_app_info_ = synced_notification_app_info;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.synced_notification_app_info)
}
void EntitySpecifics::clear_synced_notification_app_info() {
  if (_internal_has_synced_notification_app_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.synced_notification_app_info_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_device_info(::sync_pb::DeviceInfoSpecifics* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info));
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    set_has_device_info();
    specifics_variant_.device_info_ = device_info;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.device_info)
}
void EntitySpecifics::clear_device_info() {
  if (_internal_has_device_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.device_info_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_experiments(::sync_pb::ExperimentsSpecifics* experiments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (experiments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(experiments));
    if (message_arena != submessage_arena) {
      experiments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, experiments, submessage_arena);
    }
    set_has_experiments();
    specifics_variant_.experiments_ = experiments;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.experiments)
}
void EntitySpecifics::clear_experiments() {
  if (_internal_has_experiments()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.experiments_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_priority_preference(::sync_pb::PriorityPreferenceSpecifics* priority_preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (priority_preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority_preference));
    if (message_arena != submessage_arena) {
      priority_preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority_preference, submessage_arena);
    }
    set_has_priority_preference();
    specifics_variant_.priority_preference_ = priority_preference;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.priority_preference)
}
void EntitySpecifics::clear_priority_preference() {
  if (_internal_has_priority_preference()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.priority_preference_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_dictionary(::sync_pb::DictionarySpecifics* dictionary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (dictionary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dictionary));
    if (message_arena != submessage_arena) {
      dictionary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dictionary, submessage_arena);
    }
    set_has_dictionary();
    specifics_variant_.dictionary_ = dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.dictionary)
}
void EntitySpecifics::clear_dictionary() {
  if (_internal_has_dictionary()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.dictionary_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_favicon_tracking(::sync_pb::FaviconTrackingSpecifics* favicon_tracking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (favicon_tracking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(favicon_tracking));
    if (message_arena != submessage_arena) {
      favicon_tracking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_tracking, submessage_arena);
    }
    set_has_favicon_tracking();
    specifics_variant_.favicon_tracking_ = favicon_tracking;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.favicon_tracking)
}
void EntitySpecifics::clear_favicon_tracking() {
  if (_internal_has_favicon_tracking()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.favicon_tracking_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_favicon_image(::sync_pb::FaviconImageSpecifics* favicon_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (favicon_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(favicon_image));
    if (message_arena != submessage_arena) {
      favicon_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_image, submessage_arena);
    }
    set_has_favicon_image();
    specifics_variant_.favicon_image_ = favicon_image;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.favicon_image)
}
void EntitySpecifics::clear_favicon_image() {
  if (_internal_has_favicon_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.favicon_image_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_managed_user_setting(::sync_pb::ManagedUserSettingSpecifics* managed_user_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (managed_user_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(managed_user_setting));
    if (message_arena != submessage_arena) {
      managed_user_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_user_setting, submessage_arena);
    }
    set_has_managed_user_setting();
    specifics_variant_.managed_user_setting_ = managed_user_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_setting)
}
void EntitySpecifics::clear_managed_user_setting() {
  if (_internal_has_managed_user_setting()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.managed_user_setting_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_managed_user(::sync_pb::ManagedUserSpecifics* managed_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (managed_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(managed_user));
    if (message_arena != submessage_arena) {
      managed_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_user, submessage_arena);
    }
    set_has_managed_user();
    specifics_variant_.managed_user_ = managed_user;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user)
}
void EntitySpecifics::clear_managed_user() {
  if (_internal_has_managed_user()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.managed_user_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_managed_user_shared_setting(::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (managed_user_shared_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(managed_user_shared_setting));
    if (message_arena != submessage_arena) {
      managed_user_shared_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_user_shared_setting, submessage_arena);
    }
    set_has_managed_user_shared_setting();
    specifics_variant_.managed_user_shared_setting_ = managed_user_shared_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_shared_setting)
}
void EntitySpecifics::clear_managed_user_shared_setting() {
  if (_internal_has_managed_user_shared_setting()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.managed_user_shared_setting_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_app_list(::sync_pb::AppListSpecifics* app_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (app_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_list));
    if (message_arena != submessage_arena) {
      app_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_list, submessage_arena);
    }
    set_has_app_list();
    specifics_variant_.app_list_ = app_list;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_list)
}
void EntitySpecifics::clear_app_list() {
  if (_internal_has_app_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.app_list_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_managed_user_allowlist(::sync_pb::EmptySpecifics* managed_user_allowlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (managed_user_allowlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(managed_user_allowlist);
    if (message_arena != submessage_arena) {
      managed_user_allowlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_user_allowlist, submessage_arena);
    }
    set_has_managed_user_allowlist();
    specifics_variant_.managed_user_allowlist_ = managed_user_allowlist;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_allowlist)
}
void EntitySpecifics::set_allocated_autofill_wallet(::sync_pb::AutofillWalletSpecifics* autofill_wallet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (autofill_wallet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autofill_wallet));
    if (message_arena != submessage_arena) {
      autofill_wallet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill_wallet, submessage_arena);
    }
    set_has_autofill_wallet();
    specifics_variant_.autofill_wallet_ = autofill_wallet;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill_wallet)
}
void EntitySpecifics::clear_autofill_wallet() {
  if (_internal_has_autofill_wallet()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.autofill_wallet_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_wallet_metadata(::sync_pb::WalletMetadataSpecifics* wallet_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (wallet_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wallet_metadata));
    if (message_arena != submessage_arena) {
      wallet_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wallet_metadata, submessage_arena);
    }
    set_has_wallet_metadata();
    specifics_variant_.wallet_metadata_ = wallet_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.wallet_metadata)
}
void EntitySpecifics::clear_wallet_metadata() {
  if (_internal_has_wallet_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.wallet_metadata_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_arc_package(::sync_pb::ArcPackageSpecifics* arc_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (arc_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arc_package));
    if (message_arena != submessage_arena) {
      arc_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_package, submessage_arena);
    }
    set_has_arc_package();
    specifics_variant_.arc_package_ = arc_package;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.arc_package)
}
void EntitySpecifics::clear_arc_package() {
  if (_internal_has_arc_package()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.arc_package_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_printer(::sync_pb::PrinterSpecifics* printer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (printer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(printer));
    if (message_arena != submessage_arena) {
      printer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, printer, submessage_arena);
    }
    set_has_printer();
    specifics_variant_.printer_ = printer;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.printer)
}
void EntitySpecifics::clear_printer() {
  if (_internal_has_printer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.printer_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_reading_list(::sync_pb::ReadingListSpecifics* reading_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (reading_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reading_list));
    if (message_arena != submessage_arena) {
      reading_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reading_list, submessage_arena);
    }
    set_has_reading_list();
    specifics_variant_.reading_list_ = reading_list;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.reading_list)
}
void EntitySpecifics::clear_reading_list() {
  if (_internal_has_reading_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.reading_list_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_user_event(::sync_pb::UserEventSpecifics* user_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (user_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_event));
    if (message_arena != submessage_arena) {
      user_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_event, submessage_arena);
    }
    set_has_user_event();
    specifics_variant_.user_event_ = user_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.user_event)
}
void EntitySpecifics::clear_user_event() {
  if (_internal_has_user_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.user_event_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_user_consent(::sync_pb::UserConsentSpecifics* user_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (user_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_consent));
    if (message_arena != submessage_arena) {
      user_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_consent, submessage_arena);
    }
    set_has_user_consent();
    specifics_variant_.user_consent_ = user_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.user_consent)
}
void EntitySpecifics::clear_user_consent() {
  if (_internal_has_user_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.user_consent_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_send_tab_to_self(::sync_pb::SendTabToSelfSpecifics* send_tab_to_self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (send_tab_to_self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_tab_to_self));
    if (message_arena != submessage_arena) {
      send_tab_to_self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_tab_to_self, submessage_arena);
    }
    set_has_send_tab_to_self();
    specifics_variant_.send_tab_to_self_ = send_tab_to_self;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.send_tab_to_self)
}
void EntitySpecifics::clear_send_tab_to_self() {
  if (_internal_has_send_tab_to_self()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.send_tab_to_self_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_security_event(::sync_pb::SecurityEventSpecifics* security_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (security_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_event));
    if (message_arena != submessage_arena) {
      security_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_event, submessage_arena);
    }
    set_has_security_event();
    specifics_variant_.security_event_ = security_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.security_event)
}
void EntitySpecifics::clear_security_event() {
  if (_internal_has_security_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.security_event_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_web_app(::sync_pb::WebAppSpecifics* web_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (web_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_app));
    if (message_arena != submessage_arena) {
      web_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_app, submessage_arena);
    }
    set_has_web_app();
    specifics_variant_.web_app_ = web_app;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.web_app)
}
void EntitySpecifics::clear_web_app() {
  if (_internal_has_web_app()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.web_app_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_wifi_configuration(::sync_pb::WifiConfigurationSpecifics* wifi_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (wifi_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wifi_configuration));
    if (message_arena != submessage_arena) {
      wifi_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_configuration, submessage_arena);
    }
    set_has_wifi_configuration();
    specifics_variant_.wifi_configuration_ = wifi_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.wifi_configuration)
}
void EntitySpecifics::clear_wifi_configuration() {
  if (_internal_has_wifi_configuration()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.wifi_configuration_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_os_preference(::sync_pb::OsPreferenceSpecifics* os_preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (os_preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(os_preference));
    if (message_arena != submessage_arena) {
      os_preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, os_preference, submessage_arena);
    }
    set_has_os_preference();
    specifics_variant_.os_preference_ = os_preference;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.os_preference)
}
void EntitySpecifics::clear_os_preference() {
  if (_internal_has_os_preference()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.os_preference_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_os_priority_preference(::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (os_priority_preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(os_priority_preference));
    if (message_arena != submessage_arena) {
      os_priority_preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, os_priority_preference, submessage_arena);
    }
    set_has_os_priority_preference();
    specifics_variant_.os_priority_preference_ = os_priority_preference;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.os_priority_preference)
}
void EntitySpecifics::clear_os_priority_preference() {
  if (_internal_has_os_priority_preference()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.os_priority_preference_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_sharing_message(::sync_pb::SharingMessageSpecifics* sharing_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (sharing_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sharing_message));
    if (message_arena != submessage_arena) {
      sharing_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharing_message, submessage_arena);
    }
    set_has_sharing_message();
    specifics_variant_.sharing_message_ = sharing_message;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.sharing_message)
}
void EntitySpecifics::clear_sharing_message() {
  if (_internal_has_sharing_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.sharing_message_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_autofill_offer(::sync_pb::AutofillOfferSpecifics* autofill_offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (autofill_offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autofill_offer));
    if (message_arena != submessage_arena) {
      autofill_offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill_offer, submessage_arena);
    }
    set_has_autofill_offer();
    specifics_variant_.autofill_offer_ = autofill_offer;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill_offer)
}
void EntitySpecifics::clear_autofill_offer() {
  if (_internal_has_autofill_offer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.autofill_offer_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_workspace_desk(::sync_pb::WorkspaceDeskSpecifics* workspace_desk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (workspace_desk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workspace_desk));
    if (message_arena != submessage_arena) {
      workspace_desk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workspace_desk, submessage_arena);
    }
    set_has_workspace_desk();
    specifics_variant_.workspace_desk_ = workspace_desk;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.workspace_desk)
}
void EntitySpecifics::clear_workspace_desk() {
  if (_internal_has_workspace_desk()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.workspace_desk_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_webauthn_credential(::sync_pb::WebauthnCredentialSpecifics* webauthn_credential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (webauthn_credential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webauthn_credential));
    if (message_arena != submessage_arena) {
      webauthn_credential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, webauthn_credential, submessage_arena);
    }
    set_has_webauthn_credential();
    specifics_variant_.webauthn_credential_ = webauthn_credential;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.webauthn_credential)
}
void EntitySpecifics::clear_webauthn_credential() {
  if (_internal_has_webauthn_credential()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.webauthn_credential_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_history(::sync_pb::HistorySpecifics* history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(history));
    if (message_arena != submessage_arena) {
      history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history, submessage_arena);
    }
    set_has_history();
    specifics_variant_.history_ = history;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.history)
}
void EntitySpecifics::clear_history() {
  if (_internal_has_history()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.history_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_printers_authorization_server(::sync_pb::PrintersAuthorizationServerSpecifics* printers_authorization_server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (printers_authorization_server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(printers_authorization_server));
    if (message_arena != submessage_arena) {
      printers_authorization_server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, printers_authorization_server, submessage_arena);
    }
    set_has_printers_authorization_server();
    specifics_variant_.printers_authorization_server_ = printers_authorization_server;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.printers_authorization_server)
}
void EntitySpecifics::clear_printers_authorization_server() {
  if (_internal_has_printers_authorization_server()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.printers_authorization_server_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_saved_tab_group(::sync_pb::SavedTabGroupSpecifics* saved_tab_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (saved_tab_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saved_tab_group));
    if (message_arena != submessage_arena) {
      saved_tab_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saved_tab_group, submessage_arena);
    }
    set_has_saved_tab_group();
    specifics_variant_.saved_tab_group_ = saved_tab_group;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.saved_tab_group)
}
void EntitySpecifics::clear_saved_tab_group() {
  if (_internal_has_saved_tab_group()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.saved_tab_group_;
    }
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_autofill_wallet_usage(::sync_pb::AutofillWalletUsageSpecifics* autofill_wallet_usage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specifics_variant();
  if (autofill_wallet_usage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autofill_wallet_usage));
    if (message_arena != submessage_arena) {
      autofill_wallet_usage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill_wallet_usage, submessage_arena);
    }
    set_has_autofill_wallet_usage();
    specifics_variant_.autofill_wallet_usage_ = autofill_wallet_usage;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill_wallet_usage)
}
void EntitySpecifics::clear_autofill_wallet_usage() {
  if (_internal_has_autofill_wallet_usage()) {
    if (GetArenaForAllocation() == nullptr) {
      delete specifics_variant_.autofill_wallet_usage_;
    }
    clear_has_specifics_variant();
  }
}
EntitySpecifics::EntitySpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.EntitySpecifics)
}
EntitySpecifics::EntitySpecifics(const EntitySpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_encrypted()) {
    encrypted_ = new ::sync_pb::EncryptedData(*from.encrypted_);
  } else {
    encrypted_ = nullptr;
  }
  clear_has_specifics_variant();
  switch (from.specifics_variant_case()) {
    case kAutofill: {
      _internal_mutable_autofill()->::sync_pb::AutofillSpecifics::MergeFrom(from._internal_autofill());
      break;
    }
    case kBookmark: {
      _internal_mutable_bookmark()->::sync_pb::BookmarkSpecifics::MergeFrom(from._internal_bookmark());
      break;
    }
    case kPreference: {
      _internal_mutable_preference()->::sync_pb::PreferenceSpecifics::MergeFrom(from._internal_preference());
      break;
    }
    case kTypedUrl: {
      _internal_mutable_typed_url()->::sync_pb::TypedUrlSpecifics::MergeFrom(from._internal_typed_url());
      break;
    }
    case kTheme: {
      _internal_mutable_theme()->::sync_pb::ThemeSpecifics::MergeFrom(from._internal_theme());
      break;
    }
    case kAppNotification: {
      _internal_mutable_app_notification()->::sync_pb::AppNotification::MergeFrom(from._internal_app_notification());
      break;
    }
    case kPassword: {
      _internal_mutable_password()->::sync_pb::PasswordSpecifics::MergeFrom(from._internal_password());
      break;
    }
    case kNigori: {
      _internal_mutable_nigori()->::sync_pb::NigoriSpecifics::MergeFrom(from._internal_nigori());
      break;
    }
    case kExtension: {
      _internal_mutable_extension()->::sync_pb::ExtensionSpecifics::MergeFrom(from._internal_extension());
      break;
    }
    case kApp: {
      _internal_mutable_app()->::sync_pb::AppSpecifics::MergeFrom(from._internal_app());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::sync_pb::SessionSpecifics::MergeFrom(from._internal_session());
      break;
    }
    case kAutofillProfile: {
      _internal_mutable_autofill_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from._internal_autofill_profile());
      break;
    }
    case kSearchEngine: {
      _internal_mutable_search_engine()->::sync_pb::SearchEngineSpecifics::MergeFrom(from._internal_search_engine());
      break;
    }
    case kExtensionSetting: {
      _internal_mutable_extension_setting()->::sync_pb::ExtensionSettingSpecifics::MergeFrom(from._internal_extension_setting());
      break;
    }
    case kAppSetting: {
      _internal_mutable_app_setting()->::sync_pb::AppSettingSpecifics::MergeFrom(from._internal_app_setting());
      break;
    }
    case kHistoryDeleteDirective: {
      _internal_mutable_history_delete_directive()->::sync_pb::HistoryDeleteDirectiveSpecifics::MergeFrom(from._internal_history_delete_directive());
      break;
    }
    case kSyncedNotification: {
      _internal_mutable_synced_notification()->::sync_pb::SyncedNotificationSpecifics::MergeFrom(from._internal_synced_notification());
      break;
    }
    case kSyncedNotificationAppInfo: {
      _internal_mutable_synced_notification_app_info()->::sync_pb::SyncedNotificationAppInfoSpecifics::MergeFrom(from._internal_synced_notification_app_info());
      break;
    }
    case kDeviceInfo: {
      _internal_mutable_device_info()->::sync_pb::DeviceInfoSpecifics::MergeFrom(from._internal_device_info());
      break;
    }
    case kExperiments: {
      _internal_mutable_experiments()->::sync_pb::ExperimentsSpecifics::MergeFrom(from._internal_experiments());
      break;
    }
    case kPriorityPreference: {
      _internal_mutable_priority_preference()->::sync_pb::PriorityPreferenceSpecifics::MergeFrom(from._internal_priority_preference());
      break;
    }
    case kDictionary: {
      _internal_mutable_dictionary()->::sync_pb::DictionarySpecifics::MergeFrom(from._internal_dictionary());
      break;
    }
    case kFaviconTracking: {
      _internal_mutable_favicon_tracking()->::sync_pb::FaviconTrackingSpecifics::MergeFrom(from._internal_favicon_tracking());
      break;
    }
    case kFaviconImage: {
      _internal_mutable_favicon_image()->::sync_pb::FaviconImageSpecifics::MergeFrom(from._internal_favicon_image());
      break;
    }
    case kManagedUserSetting: {
      _internal_mutable_managed_user_setting()->::sync_pb::ManagedUserSettingSpecifics::MergeFrom(from._internal_managed_user_setting());
      break;
    }
    case kManagedUser: {
      _internal_mutable_managed_user()->::sync_pb::ManagedUserSpecifics::MergeFrom(from._internal_managed_user());
      break;
    }
    case kManagedUserSharedSetting: {
      _internal_mutable_managed_user_shared_setting()->::sync_pb::ManagedUserSharedSettingSpecifics::MergeFrom(from._internal_managed_user_shared_setting());
      break;
    }
    case kAppList: {
      _internal_mutable_app_list()->::sync_pb::AppListSpecifics::MergeFrom(from._internal_app_list());
      break;
    }
    case kManagedUserAllowlist: {
      _internal_mutable_managed_user_allowlist()->::sync_pb::EmptySpecifics::MergeFrom(from._internal_managed_user_allowlist());
      break;
    }
    case kAutofillWallet: {
      _internal_mutable_autofill_wallet()->::sync_pb::AutofillWalletSpecifics::MergeFrom(from._internal_autofill_wallet());
      break;
    }
    case kWalletMetadata: {
      _internal_mutable_wallet_metadata()->::sync_pb::WalletMetadataSpecifics::MergeFrom(from._internal_wallet_metadata());
      break;
    }
    case kArcPackage: {
      _internal_mutable_arc_package()->::sync_pb::ArcPackageSpecifics::MergeFrom(from._internal_arc_package());
      break;
    }
    case kPrinter: {
      _internal_mutable_printer()->::sync_pb::PrinterSpecifics::MergeFrom(from._internal_printer());
      break;
    }
    case kReadingList: {
      _internal_mutable_reading_list()->::sync_pb::ReadingListSpecifics::MergeFrom(from._internal_reading_list());
      break;
    }
    case kUserEvent: {
      _internal_mutable_user_event()->::sync_pb::UserEventSpecifics::MergeFrom(from._internal_user_event());
      break;
    }
    case kUserConsent: {
      _internal_mutable_user_consent()->::sync_pb::UserConsentSpecifics::MergeFrom(from._internal_user_consent());
      break;
    }
    case kSendTabToSelf: {
      _internal_mutable_send_tab_to_self()->::sync_pb::SendTabToSelfSpecifics::MergeFrom(from._internal_send_tab_to_self());
      break;
    }
    case kSecurityEvent: {
      _internal_mutable_security_event()->::sync_pb::SecurityEventSpecifics::MergeFrom(from._internal_security_event());
      break;
    }
    case kWebApp: {
      _internal_mutable_web_app()->::sync_pb::WebAppSpecifics::MergeFrom(from._internal_web_app());
      break;
    }
    case kWifiConfiguration: {
      _internal_mutable_wifi_configuration()->::sync_pb::WifiConfigurationSpecifics::MergeFrom(from._internal_wifi_configuration());
      break;
    }
    case kOsPreference: {
      _internal_mutable_os_preference()->::sync_pb::OsPreferenceSpecifics::MergeFrom(from._internal_os_preference());
      break;
    }
    case kOsPriorityPreference: {
      _internal_mutable_os_priority_preference()->::sync_pb::OsPriorityPreferenceSpecifics::MergeFrom(from._internal_os_priority_preference());
      break;
    }
    case kSharingMessage: {
      _internal_mutable_sharing_message()->::sync_pb::SharingMessageSpecifics::MergeFrom(from._internal_sharing_message());
      break;
    }
    case kAutofillOffer: {
      _internal_mutable_autofill_offer()->::sync_pb::AutofillOfferSpecifics::MergeFrom(from._internal_autofill_offer());
      break;
    }
    case kWorkspaceDesk: {
      _internal_mutable_workspace_desk()->::sync_pb::WorkspaceDeskSpecifics::MergeFrom(from._internal_workspace_desk());
      break;
    }
    case kWebauthnCredential: {
      _internal_mutable_webauthn_credential()->::sync_pb::WebauthnCredentialSpecifics::MergeFrom(from._internal_webauthn_credential());
      break;
    }
    case kHistory: {
      _internal_mutable_history()->::sync_pb::HistorySpecifics::MergeFrom(from._internal_history());
      break;
    }
    case kPrintersAuthorizationServer: {
      _internal_mutable_printers_authorization_server()->::sync_pb::PrintersAuthorizationServerSpecifics::MergeFrom(from._internal_printers_authorization_server());
      break;
    }
    case kSavedTabGroup: {
      _internal_mutable_saved_tab_group()->::sync_pb::SavedTabGroupSpecifics::MergeFrom(from._internal_saved_tab_group());
      break;
    }
    case kAutofillWalletUsage: {
      _internal_mutable_autofill_wallet_usage()->::sync_pb::AutofillWalletUsageSpecifics::MergeFrom(from._internal_autofill_wallet_usage());
      break;
    }
    case SPECIFICS_VARIANT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.EntitySpecifics)
}

inline void EntitySpecifics::SharedCtor() {
encrypted_ = nullptr;
clear_has_specifics_variant();
}

EntitySpecifics::~EntitySpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.EntitySpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntitySpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete encrypted_;
  if (has_specifics_variant()) {
    clear_specifics_variant();
  }
}

void EntitySpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EntitySpecifics::clear_specifics_variant() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.EntitySpecifics)
  switch (specifics_variant_case()) {
    case kAutofill: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.autofill_;
      }
      break;
    }
    case kBookmark: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.bookmark_;
      }
      break;
    }
    case kPreference: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.preference_;
      }
      break;
    }
    case kTypedUrl: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.typed_url_;
      }
      break;
    }
    case kTheme: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.theme_;
      }
      break;
    }
    case kAppNotification: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.app_notification_;
      }
      break;
    }
    case kPassword: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.password_;
      }
      break;
    }
    case kNigori: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.nigori_;
      }
      break;
    }
    case kExtension: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.extension_;
      }
      break;
    }
    case kApp: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.app_;
      }
      break;
    }
    case kSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.session_;
      }
      break;
    }
    case kAutofillProfile: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.autofill_profile_;
      }
      break;
    }
    case kSearchEngine: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.search_engine_;
      }
      break;
    }
    case kExtensionSetting: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.extension_setting_;
      }
      break;
    }
    case kAppSetting: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.app_setting_;
      }
      break;
    }
    case kHistoryDeleteDirective: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.history_delete_directive_;
      }
      break;
    }
    case kSyncedNotification: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.synced_notification_;
      }
      break;
    }
    case kSyncedNotificationAppInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.synced_notification_app_info_;
      }
      break;
    }
    case kDeviceInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.device_info_;
      }
      break;
    }
    case kExperiments: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.experiments_;
      }
      break;
    }
    case kPriorityPreference: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.priority_preference_;
      }
      break;
    }
    case kDictionary: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.dictionary_;
      }
      break;
    }
    case kFaviconTracking: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.favicon_tracking_;
      }
      break;
    }
    case kFaviconImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.favicon_image_;
      }
      break;
    }
    case kManagedUserSetting: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.managed_user_setting_;
      }
      break;
    }
    case kManagedUser: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.managed_user_;
      }
      break;
    }
    case kManagedUserSharedSetting: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.managed_user_shared_setting_;
      }
      break;
    }
    case kAppList: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.app_list_;
      }
      break;
    }
    case kManagedUserAllowlist: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.managed_user_allowlist_;
      }
      break;
    }
    case kAutofillWallet: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.autofill_wallet_;
      }
      break;
    }
    case kWalletMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.wallet_metadata_;
      }
      break;
    }
    case kArcPackage: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.arc_package_;
      }
      break;
    }
    case kPrinter: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.printer_;
      }
      break;
    }
    case kReadingList: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.reading_list_;
      }
      break;
    }
    case kUserEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.user_event_;
      }
      break;
    }
    case kUserConsent: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.user_consent_;
      }
      break;
    }
    case kSendTabToSelf: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.send_tab_to_self_;
      }
      break;
    }
    case kSecurityEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.security_event_;
      }
      break;
    }
    case kWebApp: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.web_app_;
      }
      break;
    }
    case kWifiConfiguration: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.wifi_configuration_;
      }
      break;
    }
    case kOsPreference: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.os_preference_;
      }
      break;
    }
    case kOsPriorityPreference: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.os_priority_preference_;
      }
      break;
    }
    case kSharingMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.sharing_message_;
      }
      break;
    }
    case kAutofillOffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.autofill_offer_;
      }
      break;
    }
    case kWorkspaceDesk: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.workspace_desk_;
      }
      break;
    }
    case kWebauthnCredential: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.webauthn_credential_;
      }
      break;
    }
    case kHistory: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.history_;
      }
      break;
    }
    case kPrintersAuthorizationServer: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.printers_authorization_server_;
      }
      break;
    }
    case kSavedTabGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.saved_tab_group_;
      }
      break;
    }
    case kAutofillWalletUsage: {
      if (GetArenaForAllocation() == nullptr) {
        delete specifics_variant_.autofill_wallet_usage_;
      }
      break;
    }
    case SPECIFICS_VARIANT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFICS_VARIANT_NOT_SET;
}


void EntitySpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EntitySpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(encrypted_ != nullptr);
    encrypted_->Clear();
  }
  clear_specifics_variant();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EntitySpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillSpecifics autofill = 31729;
      case 31729:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_autofill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.BookmarkSpecifics bookmark = 32904;
      case 32904:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookmark(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.PreferenceSpecifics preference = 37702;
      case 37702:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_preference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.TypedUrlSpecifics typed_url = 40781;
      case 40781:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_typed_url(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ThemeSpecifics theme = 41210;
      case 41210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
      case 45184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.PasswordSpecifics password = 45873;
      case 45873:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_password(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.NigoriSpecifics nigori = 47745;
      case 47745:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nigori(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ExtensionSpecifics extension = 48119;
      case 48119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AppSpecifics app = 48364;
      case 48364:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SessionSpecifics session = 50119;
      case 50119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
      case 63951:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_autofill_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SearchEngineSpecifics search_engine = 88610;
      case 88610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_engine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
      case 96159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AppSettingSpecifics app_setting = 103656;
      case 103656:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
      case 150251:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_history_delete_directive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
      case 153108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_synced_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.DeviceInfoSpecifics device_info = 154522;
      case 154522:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
      case 161496:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_experiments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
      case 163425:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority_preference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.DictionarySpecifics dictionary = 170540;
      case 170540:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dictionary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534 [deprecated = true];
      case 181534:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_favicon_tracking(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.FaviconImageSpecifics favicon_image = 182019 [deprecated = true];
      case 182019:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_favicon_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
      case 186662:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_managed_user_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
      case 194582:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_managed_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
      case 202026:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_managed_user_shared_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AppListSpecifics app_list = 229170;
      case 229170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
      case 235816:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_synced_notification_app_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.EmptySpecifics managed_user_allowlist = 306060 [deprecated = true];
      case 306060:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_managed_user_allowlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
      case 306270:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_autofill_wallet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
      case 330441:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_wallet_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ArcPackageSpecifics arc_package = 340906;
      case 340906:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_arc_package(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.PrinterSpecifics printer = 410745;
      case 410745:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_printer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.ReadingListSpecifics reading_list = 411028;
      case 411028:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_reading_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserEventSpecifics user_event = 455206;
      case 455206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.UserConsentSpecifics user_consent = 556014;
      case 556014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_consent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SecurityEventSpecifics security_event = 600372;
      case 600372:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
      case 601980:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_tab_to_self(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
      case 662827:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_wifi_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.WebAppSpecifics web_app = 673225;
      case 673225:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.OsPreferenceSpecifics os_preference = 702141;
      case 702141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_os_preference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
      case 703915:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_os_priority_preference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SharingMessageSpecifics sharing_message = 728866;
      case 728866:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sharing_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillOfferSpecifics autofill_offer = 774329;
      case 774329:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_autofill_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.WorkspaceDeskSpecifics workspace_desk = 874841;
      case 874841:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_workspace_desk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.WebauthnCredentialSpecifics webauthn_credential = 895275;
      case 895275:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_webauthn_credential(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.HistorySpecifics history = 963985;
      case 963985:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.PrintersAuthorizationServerSpecifics printers_authorization_server = 974304;
      case 974304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_printers_authorization_server(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.SavedTabGroupSpecifics saved_tab_group = 1004874;
      case 1004874:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_tab_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillWalletUsageSpecifics autofill_wallet_usage = 1033580;
      case 1033580:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_autofill_wallet_usage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntitySpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.EntitySpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.EncryptedData encrypted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::encrypted(this),
        _Internal::encrypted(this).GetCachedSize(), target, stream);
  }

  switch (specifics_variant_case()) {
    case kAutofill: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31729, _Internal::autofill(this),
          _Internal::autofill(this).GetCachedSize(), target, stream);
      break;
    }
    case kBookmark: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32904, _Internal::bookmark(this),
          _Internal::bookmark(this).GetCachedSize(), target, stream);
      break;
    }
    case kPreference: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(37702, _Internal::preference(this),
          _Internal::preference(this).GetCachedSize(), target, stream);
      break;
    }
    case kTypedUrl: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40781, _Internal::typed_url(this),
          _Internal::typed_url(this).GetCachedSize(), target, stream);
      break;
    }
    case kTheme: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41210, _Internal::theme(this),
          _Internal::theme(this).GetCachedSize(), target, stream);
      break;
    }
    case kAppNotification: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45184, _Internal::app_notification(this),
          _Internal::app_notification(this).GetCachedSize(), target, stream);
      break;
    }
    case kPassword: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45873, _Internal::password(this),
          _Internal::password(this).GetCachedSize(), target, stream);
      break;
    }
    case kNigori: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(47745, _Internal::nigori(this),
          _Internal::nigori(this).GetCachedSize(), target, stream);
      break;
    }
    case kExtension: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48119, _Internal::extension(this),
          _Internal::extension(this).GetCachedSize(), target, stream);
      break;
    }
    case kApp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48364, _Internal::app(this),
          _Internal::app(this).GetCachedSize(), target, stream);
      break;
    }
    case kSession: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50119, _Internal::session(this),
          _Internal::session(this).GetCachedSize(), target, stream);
      break;
    }
    case kAutofillProfile: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(63951, _Internal::autofill_profile(this),
          _Internal::autofill_profile(this).GetCachedSize(), target, stream);
      break;
    }
    case kSearchEngine: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(88610, _Internal::search_engine(this),
          _Internal::search_engine(this).GetCachedSize(), target, stream);
      break;
    }
    case kExtensionSetting: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(96159, _Internal::extension_setting(this),
          _Internal::extension_setting(this).GetCachedSize(), target, stream);
      break;
    }
    case kAppSetting: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(103656, _Internal::app_setting(this),
          _Internal::app_setting(this).GetCachedSize(), target, stream);
      break;
    }
    case kHistoryDeleteDirective: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(150251, _Internal::history_delete_directive(this),
          _Internal::history_delete_directive(this).GetCachedSize(), target, stream);
      break;
    }
    case kSyncedNotification: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(153108, _Internal::synced_notification(this),
          _Internal::synced_notification(this).GetCachedSize(), target, stream);
      break;
    }
    case kDeviceInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(154522, _Internal::device_info(this),
          _Internal::device_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kExperiments: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(161496, _Internal::experiments(this),
          _Internal::experiments(this).GetCachedSize(), target, stream);
      break;
    }
    case kPriorityPreference: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(163425, _Internal::priority_preference(this),
          _Internal::priority_preference(this).GetCachedSize(), target, stream);
      break;
    }
    case kDictionary: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(170540, _Internal::dictionary(this),
          _Internal::dictionary(this).GetCachedSize(), target, stream);
      break;
    }
    case kFaviconTracking: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(181534, _Internal::favicon_tracking(this),
          _Internal::favicon_tracking(this).GetCachedSize(), target, stream);
      break;
    }
    case kFaviconImage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(182019, _Internal::favicon_image(this),
          _Internal::favicon_image(this).GetCachedSize(), target, stream);
      break;
    }
    case kManagedUserSetting: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(186662, _Internal::managed_user_setting(this),
          _Internal::managed_user_setting(this).GetCachedSize(), target, stream);
      break;
    }
    case kManagedUser: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(194582, _Internal::managed_user(this),
          _Internal::managed_user(this).GetCachedSize(), target, stream);
      break;
    }
    case kManagedUserSharedSetting: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(202026, _Internal::managed_user_shared_setting(this),
          _Internal::managed_user_shared_setting(this).GetCachedSize(), target, stream);
      break;
    }
    case kAppList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(229170, _Internal::app_list(this),
          _Internal::app_list(this).GetCachedSize(), target, stream);
      break;
    }
    case kSyncedNotificationAppInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(235816, _Internal::synced_notification_app_info(this),
          _Internal::synced_notification_app_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kManagedUserAllowlist: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(306060, _Internal::managed_user_allowlist(this),
          _Internal::managed_user_allowlist(this).GetCachedSize(), target, stream);
      break;
    }
    case kAutofillWallet: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(306270, _Internal::autofill_wallet(this),
          _Internal::autofill_wallet(this).GetCachedSize(), target, stream);
      break;
    }
    case kWalletMetadata: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(330441, _Internal::wallet_metadata(this),
          _Internal::wallet_metadata(this).GetCachedSize(), target, stream);
      break;
    }
    case kArcPackage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(340906, _Internal::arc_package(this),
          _Internal::arc_package(this).GetCachedSize(), target, stream);
      break;
    }
    case kPrinter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(410745, _Internal::printer(this),
          _Internal::printer(this).GetCachedSize(), target, stream);
      break;
    }
    case kReadingList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(411028, _Internal::reading_list(this),
          _Internal::reading_list(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(455206, _Internal::user_event(this),
          _Internal::user_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserConsent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(556014, _Internal::user_consent(this),
          _Internal::user_consent(this).GetCachedSize(), target, stream);
      break;
    }
    case kSecurityEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(600372, _Internal::security_event(this),
          _Internal::security_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kSendTabToSelf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(601980, _Internal::send_tab_to_self(this),
          _Internal::send_tab_to_self(this).GetCachedSize(), target, stream);
      break;
    }
    case kWifiConfiguration: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(662827, _Internal::wifi_configuration(this),
          _Internal::wifi_configuration(this).GetCachedSize(), target, stream);
      break;
    }
    case kWebApp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(673225, _Internal::web_app(this),
          _Internal::web_app(this).GetCachedSize(), target, stream);
      break;
    }
    case kOsPreference: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(702141, _Internal::os_preference(this),
          _Internal::os_preference(this).GetCachedSize(), target, stream);
      break;
    }
    case kOsPriorityPreference: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(703915, _Internal::os_priority_preference(this),
          _Internal::os_priority_preference(this).GetCachedSize(), target, stream);
      break;
    }
    case kSharingMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(728866, _Internal::sharing_message(this),
          _Internal::sharing_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kAutofillOffer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(774329, _Internal::autofill_offer(this),
          _Internal::autofill_offer(this).GetCachedSize(), target, stream);
      break;
    }
    case kWorkspaceDesk: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(874841, _Internal::workspace_desk(this),
          _Internal::workspace_desk(this).GetCachedSize(), target, stream);
      break;
    }
    case kWebauthnCredential: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(895275, _Internal::webauthn_credential(this),
          _Internal::webauthn_credential(this).GetCachedSize(), target, stream);
      break;
    }
    case kHistory: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(963985, _Internal::history(this),
          _Internal::history(this).GetCachedSize(), target, stream);
      break;
    }
    case kPrintersAuthorizationServer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(974304, _Internal::printers_authorization_server(this),
          _Internal::printers_authorization_server(this).GetCachedSize(), target, stream);
      break;
    }
    case kSavedTabGroup: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1004874, _Internal::saved_tab_group(this),
          _Internal::saved_tab_group(this).GetCachedSize(), target, stream);
      break;
    }
    case kAutofillWalletUsage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1033580, _Internal::autofill_wallet_usage(this),
          _Internal::autofill_wallet_usage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.EntitySpecifics)
  return target;
}

size_t EntitySpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EntitySpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.EncryptedData encrypted = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encrypted_);
  }

  switch (specifics_variant_case()) {
    // .sync_pb.AutofillSpecifics autofill = 31729;
    case kAutofill: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.autofill_);
      break;
    }
    // .sync_pb.BookmarkSpecifics bookmark = 32904;
    case kBookmark: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.bookmark_);
      break;
    }
    // .sync_pb.PreferenceSpecifics preference = 37702;
    case kPreference: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.preference_);
      break;
    }
    // .sync_pb.TypedUrlSpecifics typed_url = 40781;
    case kTypedUrl: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.typed_url_);
      break;
    }
    // .sync_pb.ThemeSpecifics theme = 41210;
    case kTheme: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.theme_);
      break;
    }
    // .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
    case kAppNotification: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.app_notification_);
      break;
    }
    // .sync_pb.PasswordSpecifics password = 45873;
    case kPassword: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.password_);
      break;
    }
    // .sync_pb.NigoriSpecifics nigori = 47745;
    case kNigori: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.nigori_);
      break;
    }
    // .sync_pb.ExtensionSpecifics extension = 48119;
    case kExtension: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.extension_);
      break;
    }
    // .sync_pb.AppSpecifics app = 48364;
    case kApp: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.app_);
      break;
    }
    // .sync_pb.SessionSpecifics session = 50119;
    case kSession: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.session_);
      break;
    }
    // .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
    case kAutofillProfile: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.autofill_profile_);
      break;
    }
    // .sync_pb.SearchEngineSpecifics search_engine = 88610;
    case kSearchEngine: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.search_engine_);
      break;
    }
    // .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
    case kExtensionSetting: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.extension_setting_);
      break;
    }
    // .sync_pb.AppSettingSpecifics app_setting = 103656;
    case kAppSetting: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.app_setting_);
      break;
    }
    // .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
    case kHistoryDeleteDirective: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.history_delete_directive_);
      break;
    }
    // .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
    case kSyncedNotification: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.synced_notification_);
      break;
    }
    // .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
    case kSyncedNotificationAppInfo: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.synced_notification_app_info_);
      break;
    }
    // .sync_pb.DeviceInfoSpecifics device_info = 154522;
    case kDeviceInfo: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.device_info_);
      break;
    }
    // .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
    case kExperiments: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.experiments_);
      break;
    }
    // .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
    case kPriorityPreference: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.priority_preference_);
      break;
    }
    // .sync_pb.DictionarySpecifics dictionary = 170540;
    case kDictionary: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.dictionary_);
      break;
    }
    // .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534 [deprecated = true];
    case kFaviconTracking: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.favicon_tracking_);
      break;
    }
    // .sync_pb.FaviconImageSpecifics favicon_image = 182019 [deprecated = true];
    case kFaviconImage: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.favicon_image_);
      break;
    }
    // .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
    case kManagedUserSetting: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.managed_user_setting_);
      break;
    }
    // .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
    case kManagedUser: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.managed_user_);
      break;
    }
    // .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
    case kManagedUserSharedSetting: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.managed_user_shared_setting_);
      break;
    }
    // .sync_pb.AppListSpecifics app_list = 229170;
    case kAppList: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.app_list_);
      break;
    }
    // .sync_pb.EmptySpecifics managed_user_allowlist = 306060 [deprecated = true];
    case kManagedUserAllowlist: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.managed_user_allowlist_);
      break;
    }
    // .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
    case kAutofillWallet: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.autofill_wallet_);
      break;
    }
    // .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
    case kWalletMetadata: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.wallet_metadata_);
      break;
    }
    // .sync_pb.ArcPackageSpecifics arc_package = 340906;
    case kArcPackage: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.arc_package_);
      break;
    }
    // .sync_pb.PrinterSpecifics printer = 410745;
    case kPrinter: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.printer_);
      break;
    }
    // .sync_pb.ReadingListSpecifics reading_list = 411028;
    case kReadingList: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.reading_list_);
      break;
    }
    // .sync_pb.UserEventSpecifics user_event = 455206;
    case kUserEvent: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.user_event_);
      break;
    }
    // .sync_pb.UserConsentSpecifics user_consent = 556014;
    case kUserConsent: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.user_consent_);
      break;
    }
    // .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
    case kSendTabToSelf: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.send_tab_to_self_);
      break;
    }
    // .sync_pb.SecurityEventSpecifics security_event = 600372;
    case kSecurityEvent: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.security_event_);
      break;
    }
    // .sync_pb.WebAppSpecifics web_app = 673225;
    case kWebApp: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.web_app_);
      break;
    }
    // .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
    case kWifiConfiguration: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.wifi_configuration_);
      break;
    }
    // .sync_pb.OsPreferenceSpecifics os_preference = 702141;
    case kOsPreference: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.os_preference_);
      break;
    }
    // .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
    case kOsPriorityPreference: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.os_priority_preference_);
      break;
    }
    // .sync_pb.SharingMessageSpecifics sharing_message = 728866;
    case kSharingMessage: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.sharing_message_);
      break;
    }
    // .sync_pb.AutofillOfferSpecifics autofill_offer = 774329;
    case kAutofillOffer: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.autofill_offer_);
      break;
    }
    // .sync_pb.WorkspaceDeskSpecifics workspace_desk = 874841;
    case kWorkspaceDesk: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.workspace_desk_);
      break;
    }
    // .sync_pb.WebauthnCredentialSpecifics webauthn_credential = 895275;
    case kWebauthnCredential: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.webauthn_credential_);
      break;
    }
    // .sync_pb.HistorySpecifics history = 963985;
    case kHistory: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.history_);
      break;
    }
    // .sync_pb.PrintersAuthorizationServerSpecifics printers_authorization_server = 974304;
    case kPrintersAuthorizationServer: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.printers_authorization_server_);
      break;
    }
    // .sync_pb.SavedTabGroupSpecifics saved_tab_group = 1004874;
    case kSavedTabGroup: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.saved_tab_group_);
      break;
    }
    // .sync_pb.AutofillWalletUsageSpecifics autofill_wallet_usage = 1033580;
    case kAutofillWalletUsage: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.autofill_wallet_usage_);
      break;
    }
    case SPECIFICS_VARIANT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntitySpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EntitySpecifics*>(
      &from));
}

void EntitySpecifics::MergeFrom(const EntitySpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EntitySpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encrypted()) {
    _internal_mutable_encrypted()->::sync_pb::EncryptedData::MergeFrom(from._internal_encrypted());
  }
  switch (from.specifics_variant_case()) {
    case kAutofill: {
      _internal_mutable_autofill()->::sync_pb::AutofillSpecifics::MergeFrom(from._internal_autofill());
      break;
    }
    case kBookmark: {
      _internal_mutable_bookmark()->::sync_pb::BookmarkSpecifics::MergeFrom(from._internal_bookmark());
      break;
    }
    case kPreference: {
      _internal_mutable_preference()->::sync_pb::PreferenceSpecifics::MergeFrom(from._internal_preference());
      break;
    }
    case kTypedUrl: {
      _internal_mutable_typed_url()->::sync_pb::TypedUrlSpecifics::MergeFrom(from._internal_typed_url());
      break;
    }
    case kTheme: {
      _internal_mutable_theme()->::sync_pb::ThemeSpecifics::MergeFrom(from._internal_theme());
      break;
    }
    case kAppNotification: {
      _internal_mutable_app_notification()->::sync_pb::AppNotification::MergeFrom(from._internal_app_notification());
      break;
    }
    case kPassword: {
      _internal_mutable_password()->::sync_pb::PasswordSpecifics::MergeFrom(from._internal_password());
      break;
    }
    case kNigori: {
      _internal_mutable_nigori()->::sync_pb::NigoriSpecifics::MergeFrom(from._internal_nigori());
      break;
    }
    case kExtension: {
      _internal_mutable_extension()->::sync_pb::ExtensionSpecifics::MergeFrom(from._internal_extension());
      break;
    }
    case kApp: {
      _internal_mutable_app()->::sync_pb::AppSpecifics::MergeFrom(from._internal_app());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::sync_pb::SessionSpecifics::MergeFrom(from._internal_session());
      break;
    }
    case kAutofillProfile: {
      _internal_mutable_autofill_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from._internal_autofill_profile());
      break;
    }
    case kSearchEngine: {
      _internal_mutable_search_engine()->::sync_pb::SearchEngineSpecifics::MergeFrom(from._internal_search_engine());
      break;
    }
    case kExtensionSetting: {
      _internal_mutable_extension_setting()->::sync_pb::ExtensionSettingSpecifics::MergeFrom(from._internal_extension_setting());
      break;
    }
    case kAppSetting: {
      _internal_mutable_app_setting()->::sync_pb::AppSettingSpecifics::MergeFrom(from._internal_app_setting());
      break;
    }
    case kHistoryDeleteDirective: {
      _internal_mutable_history_delete_directive()->::sync_pb::HistoryDeleteDirectiveSpecifics::MergeFrom(from._internal_history_delete_directive());
      break;
    }
    case kSyncedNotification: {
      _internal_mutable_synced_notification()->::sync_pb::SyncedNotificationSpecifics::MergeFrom(from._internal_synced_notification());
      break;
    }
    case kSyncedNotificationAppInfo: {
      _internal_mutable_synced_notification_app_info()->::sync_pb::SyncedNotificationAppInfoSpecifics::MergeFrom(from._internal_synced_notification_app_info());
      break;
    }
    case kDeviceInfo: {
      _internal_mutable_device_info()->::sync_pb::DeviceInfoSpecifics::MergeFrom(from._internal_device_info());
      break;
    }
    case kExperiments: {
      _internal_mutable_experiments()->::sync_pb::ExperimentsSpecifics::MergeFrom(from._internal_experiments());
      break;
    }
    case kPriorityPreference: {
      _internal_mutable_priority_preference()->::sync_pb::PriorityPreferenceSpecifics::MergeFrom(from._internal_priority_preference());
      break;
    }
    case kDictionary: {
      _internal_mutable_dictionary()->::sync_pb::DictionarySpecifics::MergeFrom(from._internal_dictionary());
      break;
    }
    case kFaviconTracking: {
      _internal_mutable_favicon_tracking()->::sync_pb::FaviconTrackingSpecifics::MergeFrom(from._internal_favicon_tracking());
      break;
    }
    case kFaviconImage: {
      _internal_mutable_favicon_image()->::sync_pb::FaviconImageSpecifics::MergeFrom(from._internal_favicon_image());
      break;
    }
    case kManagedUserSetting: {
      _internal_mutable_managed_user_setting()->::sync_pb::ManagedUserSettingSpecifics::MergeFrom(from._internal_managed_user_setting());
      break;
    }
    case kManagedUser: {
      _internal_mutable_managed_user()->::sync_pb::ManagedUserSpecifics::MergeFrom(from._internal_managed_user());
      break;
    }
    case kManagedUserSharedSetting: {
      _internal_mutable_managed_user_shared_setting()->::sync_pb::ManagedUserSharedSettingSpecifics::MergeFrom(from._internal_managed_user_shared_setting());
      break;
    }
    case kAppList: {
      _internal_mutable_app_list()->::sync_pb::AppListSpecifics::MergeFrom(from._internal_app_list());
      break;
    }
    case kManagedUserAllowlist: {
      _internal_mutable_managed_user_allowlist()->::sync_pb::EmptySpecifics::MergeFrom(from._internal_managed_user_allowlist());
      break;
    }
    case kAutofillWallet: {
      _internal_mutable_autofill_wallet()->::sync_pb::AutofillWalletSpecifics::MergeFrom(from._internal_autofill_wallet());
      break;
    }
    case kWalletMetadata: {
      _internal_mutable_wallet_metadata()->::sync_pb::WalletMetadataSpecifics::MergeFrom(from._internal_wallet_metadata());
      break;
    }
    case kArcPackage: {
      _internal_mutable_arc_package()->::sync_pb::ArcPackageSpecifics::MergeFrom(from._internal_arc_package());
      break;
    }
    case kPrinter: {
      _internal_mutable_printer()->::sync_pb::PrinterSpecifics::MergeFrom(from._internal_printer());
      break;
    }
    case kReadingList: {
      _internal_mutable_reading_list()->::sync_pb::ReadingListSpecifics::MergeFrom(from._internal_reading_list());
      break;
    }
    case kUserEvent: {
      _internal_mutable_user_event()->::sync_pb::UserEventSpecifics::MergeFrom(from._internal_user_event());
      break;
    }
    case kUserConsent: {
      _internal_mutable_user_consent()->::sync_pb::UserConsentSpecifics::MergeFrom(from._internal_user_consent());
      break;
    }
    case kSendTabToSelf: {
      _internal_mutable_send_tab_to_self()->::sync_pb::SendTabToSelfSpecifics::MergeFrom(from._internal_send_tab_to_self());
      break;
    }
    case kSecurityEvent: {
      _internal_mutable_security_event()->::sync_pb::SecurityEventSpecifics::MergeFrom(from._internal_security_event());
      break;
    }
    case kWebApp: {
      _internal_mutable_web_app()->::sync_pb::WebAppSpecifics::MergeFrom(from._internal_web_app());
      break;
    }
    case kWifiConfiguration: {
      _internal_mutable_wifi_configuration()->::sync_pb::WifiConfigurationSpecifics::MergeFrom(from._internal_wifi_configuration());
      break;
    }
    case kOsPreference: {
      _internal_mutable_os_preference()->::sync_pb::OsPreferenceSpecifics::MergeFrom(from._internal_os_preference());
      break;
    }
    case kOsPriorityPreference: {
      _internal_mutable_os_priority_preference()->::sync_pb::OsPriorityPreferenceSpecifics::MergeFrom(from._internal_os_priority_preference());
      break;
    }
    case kSharingMessage: {
      _internal_mutable_sharing_message()->::sync_pb::SharingMessageSpecifics::MergeFrom(from._internal_sharing_message());
      break;
    }
    case kAutofillOffer: {
      _internal_mutable_autofill_offer()->::sync_pb::AutofillOfferSpecifics::MergeFrom(from._internal_autofill_offer());
      break;
    }
    case kWorkspaceDesk: {
      _internal_mutable_workspace_desk()->::sync_pb::WorkspaceDeskSpecifics::MergeFrom(from._internal_workspace_desk());
      break;
    }
    case kWebauthnCredential: {
      _internal_mutable_webauthn_credential()->::sync_pb::WebauthnCredentialSpecifics::MergeFrom(from._internal_webauthn_credential());
      break;
    }
    case kHistory: {
      _internal_mutable_history()->::sync_pb::HistorySpecifics::MergeFrom(from._internal_history());
      break;
    }
    case kPrintersAuthorizationServer: {
      _internal_mutable_printers_authorization_server()->::sync_pb::PrintersAuthorizationServerSpecifics::MergeFrom(from._internal_printers_authorization_server());
      break;
    }
    case kSavedTabGroup: {
      _internal_mutable_saved_tab_group()->::sync_pb::SavedTabGroupSpecifics::MergeFrom(from._internal_saved_tab_group());
      break;
    }
    case kAutofillWalletUsage: {
      _internal_mutable_autofill_wallet_usage()->::sync_pb::AutofillWalletUsageSpecifics::MergeFrom(from._internal_autofill_wallet_usage());
      break;
    }
    case SPECIFICS_VARIANT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EntitySpecifics::CopyFrom(const EntitySpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EntitySpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySpecifics::IsInitialized() const {
  return true;
}

void EntitySpecifics::InternalSwap(EntitySpecifics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encrypted_, other->encrypted_);
  swap(specifics_variant_, other->specifics_variant_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string EntitySpecifics::GetTypeName() const {
  return "sync_pb.EntitySpecifics";
}


// ===================================================================

class EmptySpecifics::_Internal {
 public:
};

EmptySpecifics::EmptySpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.EmptySpecifics)
}
EmptySpecifics::EmptySpecifics(const EmptySpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.EmptySpecifics)
}

inline void EmptySpecifics::SharedCtor() {
}

EmptySpecifics::~EmptySpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.EmptySpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmptySpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmptySpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmptySpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EmptySpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* EmptySpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmptySpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.EmptySpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.EmptySpecifics)
  return target;
}

size_t EmptySpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EmptySpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptySpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EmptySpecifics*>(
      &from));
}

void EmptySpecifics::MergeFrom(const EmptySpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EmptySpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EmptySpecifics::CopyFrom(const EmptySpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EmptySpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptySpecifics::IsInitialized() const {
  return true;
}

void EmptySpecifics::InternalSwap(EmptySpecifics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string EmptySpecifics::GetTypeName() const {
  return "sync_pb.EmptySpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::EntitySpecifics*
Arena::CreateMaybeMessage< ::sync_pb::EntitySpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::EntitySpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::EmptySpecifics*
Arena::CreateMaybeMessage< ::sync_pb::EmptySpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::EmptySpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
