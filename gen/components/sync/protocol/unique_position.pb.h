// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/unique_position.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2funique_5fposition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2funique_5fposition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2funique_5fposition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2funique_5fposition_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class UniquePosition;
struct UniquePositionDefaultTypeInternal;
extern UniquePositionDefaultTypeInternal _UniquePosition_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::UniquePosition* Arena::CreateMaybeMessage<::sync_pb::UniquePosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class UniquePosition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UniquePosition) */ {
 public:
  inline UniquePosition() : UniquePosition(nullptr) {}
  ~UniquePosition() override;
  explicit PROTOBUF_CONSTEXPR UniquePosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UniquePosition(const UniquePosition& from);
  UniquePosition(UniquePosition&& from) noexcept
    : UniquePosition() {
    *this = ::std::move(from);
  }

  inline UniquePosition& operator=(const UniquePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniquePosition& operator=(UniquePosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UniquePosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniquePosition* internal_default_instance() {
    return reinterpret_cast<const UniquePosition*>(
               &_UniquePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UniquePosition& a, UniquePosition& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UniquePosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniquePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UniquePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UniquePosition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UniquePosition& from);
  void MergeFrom(const UniquePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UniquePosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UniquePosition";
  }
  protected:
  explicit UniquePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCompressedValueFieldNumber = 2,
    kCustomCompressedV1FieldNumber = 4,
    kUncompressedLengthFieldNumber = 3,
  };
  // optional bytes value = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  PROTOBUF_DEPRECATED void clear_value();
  PROTOBUF_DEPRECATED const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_value(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_value();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_value();
  PROTOBUF_DEPRECATED void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bytes compressed_value = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_compressed_value() const;
  private:
  bool _internal_has_compressed_value() const;
  public:
  PROTOBUF_DEPRECATED void clear_compressed_value();
  PROTOBUF_DEPRECATED const std::string& compressed_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_compressed_value(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_compressed_value();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_compressed_value();
  PROTOBUF_DEPRECATED void set_allocated_compressed_value(std::string* compressed_value);
  private:
  const std::string& _internal_compressed_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compressed_value(const std::string& value);
  std::string* _internal_mutable_compressed_value();
  public:

  // optional bytes custom_compressed_v1 = 4;
  bool has_custom_compressed_v1() const;
  private:
  bool _internal_has_custom_compressed_v1() const;
  public:
  void clear_custom_compressed_v1();
  const std::string& custom_compressed_v1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_compressed_v1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_compressed_v1();
  PROTOBUF_NODISCARD std::string* release_custom_compressed_v1();
  void set_allocated_custom_compressed_v1(std::string* custom_compressed_v1);
  private:
  const std::string& _internal_custom_compressed_v1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_compressed_v1(const std::string& value);
  std::string* _internal_mutable_custom_compressed_v1();
  public:

  // optional uint64 uncompressed_length = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_uncompressed_length() const;
  private:
  bool _internal_has_uncompressed_length() const;
  public:
  PROTOBUF_DEPRECATED void clear_uncompressed_length();
  PROTOBUF_DEPRECATED uint64_t uncompressed_length() const;
  PROTOBUF_DEPRECATED void set_uncompressed_length(uint64_t value);
  private:
  uint64_t _internal_uncompressed_length() const;
  void _internal_set_uncompressed_length(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.UniquePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_compressed_v1_;
  uint64_t uncompressed_length_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2funique_5fposition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UniquePosition

// optional bytes value = 1 [deprecated = true];
inline bool UniquePosition::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UniquePosition::has_value() const {
  return _internal_has_value();
}
inline void UniquePosition::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UniquePosition::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.UniquePosition.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UniquePosition::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UniquePosition.value)
}
inline std::string* UniquePosition::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.UniquePosition.value)
  return _s;
}
inline const std::string& UniquePosition::_internal_value() const {
  return value_.Get();
}
inline void UniquePosition::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* UniquePosition::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* UniquePosition::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.UniquePosition.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UniquePosition::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UniquePosition.value)
}

// optional bytes compressed_value = 2 [deprecated = true];
inline bool UniquePosition::_internal_has_compressed_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UniquePosition::has_compressed_value() const {
  return _internal_has_compressed_value();
}
inline void UniquePosition::clear_compressed_value() {
  compressed_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UniquePosition::compressed_value() const {
  // @@protoc_insertion_point(field_get:sync_pb.UniquePosition.compressed_value)
  return _internal_compressed_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UniquePosition::set_compressed_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 compressed_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UniquePosition.compressed_value)
}
inline std::string* UniquePosition::mutable_compressed_value() {
  std::string* _s = _internal_mutable_compressed_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.UniquePosition.compressed_value)
  return _s;
}
inline const std::string& UniquePosition::_internal_compressed_value() const {
  return compressed_value_.Get();
}
inline void UniquePosition::_internal_set_compressed_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  compressed_value_.Set(value, GetArenaForAllocation());
}
inline std::string* UniquePosition::_internal_mutable_compressed_value() {
  _has_bits_[0] |= 0x00000002u;
  return compressed_value_.Mutable(GetArenaForAllocation());
}
inline std::string* UniquePosition::release_compressed_value() {
  // @@protoc_insertion_point(field_release:sync_pb.UniquePosition.compressed_value)
  if (!_internal_has_compressed_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = compressed_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (compressed_value_.IsDefault()) {
    compressed_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UniquePosition::set_allocated_compressed_value(std::string* compressed_value) {
  if (compressed_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  compressed_value_.SetAllocated(compressed_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (compressed_value_.IsDefault()) {
    compressed_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UniquePosition.compressed_value)
}

// optional uint64 uncompressed_length = 3 [deprecated = true];
inline bool UniquePosition::_internal_has_uncompressed_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UniquePosition::has_uncompressed_length() const {
  return _internal_has_uncompressed_length();
}
inline void UniquePosition::clear_uncompressed_length() {
  uncompressed_length_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t UniquePosition::_internal_uncompressed_length() const {
  return uncompressed_length_;
}
inline uint64_t UniquePosition::uncompressed_length() const {
  // @@protoc_insertion_point(field_get:sync_pb.UniquePosition.uncompressed_length)
  return _internal_uncompressed_length();
}
inline void UniquePosition::_internal_set_uncompressed_length(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  uncompressed_length_ = value;
}
inline void UniquePosition::set_uncompressed_length(uint64_t value) {
  _internal_set_uncompressed_length(value);
  // @@protoc_insertion_point(field_set:sync_pb.UniquePosition.uncompressed_length)
}

// optional bytes custom_compressed_v1 = 4;
inline bool UniquePosition::_internal_has_custom_compressed_v1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UniquePosition::has_custom_compressed_v1() const {
  return _internal_has_custom_compressed_v1();
}
inline void UniquePosition::clear_custom_compressed_v1() {
  custom_compressed_v1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UniquePosition::custom_compressed_v1() const {
  // @@protoc_insertion_point(field_get:sync_pb.UniquePosition.custom_compressed_v1)
  return _internal_custom_compressed_v1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UniquePosition::set_custom_compressed_v1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 custom_compressed_v1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UniquePosition.custom_compressed_v1)
}
inline std::string* UniquePosition::mutable_custom_compressed_v1() {
  std::string* _s = _internal_mutable_custom_compressed_v1();
  // @@protoc_insertion_point(field_mutable:sync_pb.UniquePosition.custom_compressed_v1)
  return _s;
}
inline const std::string& UniquePosition::_internal_custom_compressed_v1() const {
  return custom_compressed_v1_.Get();
}
inline void UniquePosition::_internal_set_custom_compressed_v1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_compressed_v1_.Set(value, GetArenaForAllocation());
}
inline std::string* UniquePosition::_internal_mutable_custom_compressed_v1() {
  _has_bits_[0] |= 0x00000004u;
  return custom_compressed_v1_.Mutable(GetArenaForAllocation());
}
inline std::string* UniquePosition::release_custom_compressed_v1() {
  // @@protoc_insertion_point(field_release:sync_pb.UniquePosition.custom_compressed_v1)
  if (!_internal_has_custom_compressed_v1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = custom_compressed_v1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (custom_compressed_v1_.IsDefault()) {
    custom_compressed_v1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UniquePosition::set_allocated_custom_compressed_v1(std::string* custom_compressed_v1) {
  if (custom_compressed_v1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  custom_compressed_v1_.SetAllocated(custom_compressed_v1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (custom_compressed_v1_.IsDefault()) {
    custom_compressed_v1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UniquePosition.custom_compressed_v1)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2funique_5fposition_2eproto
