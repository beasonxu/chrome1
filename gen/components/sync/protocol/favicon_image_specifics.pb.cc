// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/favicon_image_specifics.proto

#include "components/sync/protocol/favicon_image_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR FaviconData::FaviconData(
    ::_pbi::ConstantInitialized)
  : favicon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , width_(0)
  , height_(0){}
struct FaviconDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaviconDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaviconDataDefaultTypeInternal() {}
  union {
    FaviconData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaviconDataDefaultTypeInternal _FaviconData_default_instance_;
PROTOBUF_CONSTEXPR FaviconImageSpecifics::FaviconImageSpecifics(
    ::_pbi::ConstantInitialized)
  : favicon_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , favicon_web_(nullptr)
  , favicon_web_32_(nullptr)
  , favicon_touch_64_(nullptr)
  , favicon_touch_precomposed_64_(nullptr){}
struct FaviconImageSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaviconImageSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaviconImageSpecificsDefaultTypeInternal() {}
  union {
    FaviconImageSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaviconImageSpecificsDefaultTypeInternal _FaviconImageSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class FaviconData::_Internal {
 public:
  using HasBits = decltype(std::declval<FaviconData>()._has_bits_);
  static void set_has_favicon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FaviconData::FaviconData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.FaviconData)
}
FaviconData::FaviconData(const FaviconData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  favicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    favicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_favicon()) {
    favicon_.Set(from._internal_favicon(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.FaviconData)
}

inline void FaviconData::SharedCtor() {
favicon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  favicon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

FaviconData::~FaviconData() {
  // @@protoc_insertion_point(destructor:sync_pb.FaviconData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaviconData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  favicon_.Destroy();
}

void FaviconData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaviconData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.FaviconData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    favicon_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FaviconData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes favicon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_favicon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaviconData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.FaviconData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes favicon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_favicon(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.FaviconData)
  return target;
}

size_t FaviconData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.FaviconData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes favicon = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_favicon());
    }

    // optional int32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaviconData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FaviconData*>(
      &from));
}

void FaviconData::MergeFrom(const FaviconData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.FaviconData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_favicon(from._internal_favicon());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FaviconData::CopyFrom(const FaviconData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.FaviconData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconData::IsInitialized() const {
  return true;
}

void FaviconData::InternalSwap(FaviconData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &favicon_, lhs_arena,
      &other->favicon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaviconData, height_)
      + sizeof(FaviconData::height_)
      - PROTOBUF_FIELD_OFFSET(FaviconData, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

std::string FaviconData::GetTypeName() const {
  return "sync_pb.FaviconData";
}


// ===================================================================

class FaviconImageSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<FaviconImageSpecifics>()._has_bits_);
  static void set_has_favicon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::FaviconData& favicon_web(const FaviconImageSpecifics* msg);
  static void set_has_favicon_web(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::FaviconData& favicon_web_32(const FaviconImageSpecifics* msg);
  static void set_has_favicon_web_32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::FaviconData& favicon_touch_64(const FaviconImageSpecifics* msg);
  static void set_has_favicon_touch_64(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::FaviconData& favicon_touch_precomposed_64(const FaviconImageSpecifics* msg);
  static void set_has_favicon_touch_precomposed_64(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::sync_pb::FaviconData&
FaviconImageSpecifics::_Internal::favicon_web(const FaviconImageSpecifics* msg) {
  return *msg->favicon_web_;
}
const ::sync_pb::FaviconData&
FaviconImageSpecifics::_Internal::favicon_web_32(const FaviconImageSpecifics* msg) {
  return *msg->favicon_web_32_;
}
const ::sync_pb::FaviconData&
FaviconImageSpecifics::_Internal::favicon_touch_64(const FaviconImageSpecifics* msg) {
  return *msg->favicon_touch_64_;
}
const ::sync_pb::FaviconData&
FaviconImageSpecifics::_Internal::favicon_touch_precomposed_64(const FaviconImageSpecifics* msg) {
  return *msg->favicon_touch_precomposed_64_;
}
FaviconImageSpecifics::FaviconImageSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.FaviconImageSpecifics)
}
FaviconImageSpecifics::FaviconImageSpecifics(const FaviconImageSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  favicon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    favicon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_favicon_url()) {
    favicon_url_.Set(from._internal_favicon_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_favicon_web()) {
    favicon_web_ = new ::sync_pb::FaviconData(*from.favicon_web_);
  } else {
    favicon_web_ = nullptr;
  }
  if (from._internal_has_favicon_web_32()) {
    favicon_web_32_ = new ::sync_pb::FaviconData(*from.favicon_web_32_);
  } else {
    favicon_web_32_ = nullptr;
  }
  if (from._internal_has_favicon_touch_64()) {
    favicon_touch_64_ = new ::sync_pb::FaviconData(*from.favicon_touch_64_);
  } else {
    favicon_touch_64_ = nullptr;
  }
  if (from._internal_has_favicon_touch_precomposed_64()) {
    favicon_touch_precomposed_64_ = new ::sync_pb::FaviconData(*from.favicon_touch_precomposed_64_);
  } else {
    favicon_touch_precomposed_64_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.FaviconImageSpecifics)
}

inline void FaviconImageSpecifics::SharedCtor() {
favicon_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  favicon_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&favicon_web_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&favicon_touch_precomposed_64_) -
    reinterpret_cast<char*>(&favicon_web_)) + sizeof(favicon_touch_precomposed_64_));
}

FaviconImageSpecifics::~FaviconImageSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.FaviconImageSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaviconImageSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  favicon_url_.Destroy();
  if (this != internal_default_instance()) delete favicon_web_;
  if (this != internal_default_instance()) delete favicon_web_32_;
  if (this != internal_default_instance()) delete favicon_touch_64_;
  if (this != internal_default_instance()) delete favicon_touch_precomposed_64_;
}

void FaviconImageSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaviconImageSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.FaviconImageSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      favicon_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(favicon_web_ != nullptr);
      favicon_web_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(favicon_web_32_ != nullptr);
      favicon_web_32_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(favicon_touch_64_ != nullptr);
      favicon_touch_64_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(favicon_touch_precomposed_64_ != nullptr);
      favicon_touch_precomposed_64_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FaviconImageSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string favicon_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_favicon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.FaviconData favicon_web = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_favicon_web(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.FaviconData favicon_web_32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_favicon_web_32(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.FaviconData favicon_touch_64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_favicon_touch_64(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_favicon_touch_precomposed_64(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaviconImageSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.FaviconImageSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string favicon_url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_favicon_url(), target);
  }

  // optional .sync_pb.FaviconData favicon_web = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::favicon_web(this),
        _Internal::favicon_web(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.FaviconData favicon_web_32 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::favicon_web_32(this),
        _Internal::favicon_web_32(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.FaviconData favicon_touch_64 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::favicon_touch_64(this),
        _Internal::favicon_touch_64(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::favicon_touch_precomposed_64(this),
        _Internal::favicon_touch_precomposed_64(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.FaviconImageSpecifics)
  return target;
}

size_t FaviconImageSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.FaviconImageSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string favicon_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_favicon_url());
    }

    // optional .sync_pb.FaviconData favicon_web = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *favicon_web_);
    }

    // optional .sync_pb.FaviconData favicon_web_32 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *favicon_web_32_);
    }

    // optional .sync_pb.FaviconData favicon_touch_64 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *favicon_touch_64_);
    }

    // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *favicon_touch_precomposed_64_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaviconImageSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FaviconImageSpecifics*>(
      &from));
}

void FaviconImageSpecifics::MergeFrom(const FaviconImageSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.FaviconImageSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_favicon_url(from._internal_favicon_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_favicon_web()->::sync_pb::FaviconData::MergeFrom(from._internal_favicon_web());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_favicon_web_32()->::sync_pb::FaviconData::MergeFrom(from._internal_favicon_web_32());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_favicon_touch_64()->::sync_pb::FaviconData::MergeFrom(from._internal_favicon_touch_64());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_favicon_touch_precomposed_64()->::sync_pb::FaviconData::MergeFrom(from._internal_favicon_touch_precomposed_64());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FaviconImageSpecifics::CopyFrom(const FaviconImageSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.FaviconImageSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconImageSpecifics::IsInitialized() const {
  return true;
}

void FaviconImageSpecifics::InternalSwap(FaviconImageSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &favicon_url_, lhs_arena,
      &other->favicon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaviconImageSpecifics, favicon_touch_precomposed_64_)
      + sizeof(FaviconImageSpecifics::favicon_touch_precomposed_64_)
      - PROTOBUF_FIELD_OFFSET(FaviconImageSpecifics, favicon_web_)>(
          reinterpret_cast<char*>(&favicon_web_),
          reinterpret_cast<char*>(&other->favicon_web_));
}

std::string FaviconImageSpecifics::GetTypeName() const {
  return "sync_pb.FaviconImageSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::FaviconData*
Arena::CreateMaybeMessage< ::sync_pb::FaviconData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::FaviconData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::FaviconImageSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::FaviconImageSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::FaviconImageSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
