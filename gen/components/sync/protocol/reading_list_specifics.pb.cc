// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/reading_list_specifics.proto

#include "components/sync/protocol/reading_list_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR ReadingListSpecifics::ReadingListSpecifics(
    ::_pbi::ConstantInitialized)
  : entry_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , creation_time_us_(int64_t{0})
  , update_time_us_(int64_t{0})
  , first_read_time_us_(int64_t{0})
  , status_(0)

  , estimated_read_time_seconds_(0)
  , update_title_time_us_(int64_t{0}){}
struct ReadingListSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadingListSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadingListSpecificsDefaultTypeInternal() {}
  union {
    ReadingListSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadingListSpecificsDefaultTypeInternal _ReadingListSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool ReadingListSpecifics_ReadingListEntryStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ReadingListSpecifics_ReadingListEntryStatus_strings[3] = {};

static const char ReadingListSpecifics_ReadingListEntryStatus_names[] =
  "READ"
  "UNREAD"
  "UNSEEN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ReadingListSpecifics_ReadingListEntryStatus_entries[] = {
  { {ReadingListSpecifics_ReadingListEntryStatus_names + 0, 4}, 1 },
  { {ReadingListSpecifics_ReadingListEntryStatus_names + 4, 6}, 0 },
  { {ReadingListSpecifics_ReadingListEntryStatus_names + 10, 6}, 2 },
};

static const int ReadingListSpecifics_ReadingListEntryStatus_entries_by_number[] = {
  1, // 0 -> UNREAD
  0, // 1 -> READ
  2, // 2 -> UNSEEN
};

const std::string& ReadingListSpecifics_ReadingListEntryStatus_Name(
    ReadingListSpecifics_ReadingListEntryStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ReadingListSpecifics_ReadingListEntryStatus_entries,
          ReadingListSpecifics_ReadingListEntryStatus_entries_by_number,
          3, ReadingListSpecifics_ReadingListEntryStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ReadingListSpecifics_ReadingListEntryStatus_entries,
      ReadingListSpecifics_ReadingListEntryStatus_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ReadingListSpecifics_ReadingListEntryStatus_strings[idx].get();
}
bool ReadingListSpecifics_ReadingListEntryStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadingListSpecifics_ReadingListEntryStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ReadingListSpecifics_ReadingListEntryStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ReadingListSpecifics_ReadingListEntryStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReadingListSpecifics_ReadingListEntryStatus ReadingListSpecifics::UNREAD;
constexpr ReadingListSpecifics_ReadingListEntryStatus ReadingListSpecifics::READ;
constexpr ReadingListSpecifics_ReadingListEntryStatus ReadingListSpecifics::UNSEEN;
constexpr ReadingListSpecifics_ReadingListEntryStatus ReadingListSpecifics::ReadingListEntryStatus_MIN;
constexpr ReadingListSpecifics_ReadingListEntryStatus ReadingListSpecifics::ReadingListEntryStatus_MAX;
constexpr int ReadingListSpecifics::ReadingListEntryStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ReadingListSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadingListSpecifics>()._has_bits_);
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_update_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_first_read_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_update_title_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_estimated_read_time_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ReadingListSpecifics::ReadingListSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ReadingListSpecifics)
}
ReadingListSpecifics::ReadingListSpecifics(const ReadingListSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  entry_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entry_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entry_id()) {
    entry_id_.Set(from._internal_entry_id(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&creation_time_us_, &from.creation_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_title_time_us_) -
    reinterpret_cast<char*>(&creation_time_us_)) + sizeof(update_title_time_us_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ReadingListSpecifics)
}

inline void ReadingListSpecifics::SharedCtor() {
entry_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entry_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_time_us_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_title_time_us_) -
    reinterpret_cast<char*>(&creation_time_us_)) + sizeof(update_title_time_us_));
}

ReadingListSpecifics::~ReadingListSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.ReadingListSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadingListSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entry_id_.Destroy();
  title_.Destroy();
  url_.Destroy();
}

void ReadingListSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadingListSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ReadingListSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      entry_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&creation_time_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimated_read_time_seconds_) -
        reinterpret_cast<char*>(&creation_time_us_)) + sizeof(estimated_read_time_seconds_));
  }
  update_title_time_us_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReadingListSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string entry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entry_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 creation_time_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_creation_time_us(&has_bits);
          creation_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 update_time_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_update_time_us(&has_bits);
          update_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ReadingListSpecifics.ReadingListEntryStatus status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::ReadingListSpecifics_ReadingListEntryStatus_IsValid(val))) {
            _internal_set_status(static_cast<::sync_pb::ReadingListSpecifics_ReadingListEntryStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 first_read_time_us = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_first_read_time_us(&has_bits);
          first_read_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 update_title_time_us = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_update_title_time_us(&has_bits);
          update_title_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 estimated_read_time_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_estimated_read_time_seconds(&has_bits);
          estimated_read_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadingListSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ReadingListSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string entry_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entry_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // optional int64 creation_time_us = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_creation_time_us(), target);
  }

  // optional int64 update_time_us = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_update_time_us(), target);
  }

  // optional .sync_pb.ReadingListSpecifics.ReadingListEntryStatus status = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // optional int64 first_read_time_us = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_first_read_time_us(), target);
  }

  // optional int64 update_title_time_us = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_update_title_time_us(), target);
  }

  // optional int32 estimated_read_time_seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_estimated_read_time_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ReadingListSpecifics)
  return target;
}

size_t ReadingListSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ReadingListSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string entry_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entry_id());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional int64 creation_time_us = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time_us());
    }

    // optional int64 update_time_us = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_time_us());
    }

    // optional int64 first_read_time_us = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_first_read_time_us());
    }

    // optional .sync_pb.ReadingListSpecifics.ReadingListEntryStatus status = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional int32 estimated_read_time_seconds = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_estimated_read_time_seconds());
    }

  }
  // optional int64 update_title_time_us = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_title_time_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadingListSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ReadingListSpecifics*>(
      &from));
}

void ReadingListSpecifics::MergeFrom(const ReadingListSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ReadingListSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_entry_id(from._internal_entry_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000008u) {
      creation_time_us_ = from.creation_time_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      update_time_us_ = from.update_time_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      first_read_time_us_ = from.first_read_time_us_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      estimated_read_time_seconds_ = from.estimated_read_time_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_update_title_time_us(from._internal_update_title_time_us());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ReadingListSpecifics::CopyFrom(const ReadingListSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ReadingListSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadingListSpecifics::IsInitialized() const {
  return true;
}

void ReadingListSpecifics::InternalSwap(ReadingListSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &entry_id_, lhs_arena,
      &other->entry_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadingListSpecifics, update_title_time_us_)
      + sizeof(ReadingListSpecifics::update_title_time_us_)
      - PROTOBUF_FIELD_OFFSET(ReadingListSpecifics, creation_time_us_)>(
          reinterpret_cast<char*>(&creation_time_us_),
          reinterpret_cast<char*>(&other->creation_time_us_));
}

std::string ReadingListSpecifics::GetTypeName() const {
  return "sync_pb.ReadingListSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::ReadingListSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::ReadingListSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ReadingListSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
