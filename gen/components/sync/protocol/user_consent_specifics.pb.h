// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/user_consent_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fuser_5fconsent_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fuser_5fconsent_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/sync/protocol/user_consent_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fuser_5fconsent_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fuser_5fconsent_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class UserConsentSpecifics;
struct UserConsentSpecificsDefaultTypeInternal;
extern UserConsentSpecificsDefaultTypeInternal _UserConsentSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::UserConsentSpecifics* Arena::CreateMaybeMessage<::sync_pb::UserConsentSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum UserConsentSpecifics_Feature : int {
  UserConsentSpecifics_Feature_FEATURE_UNSPECIFIED = 0,
  UserConsentSpecifics_Feature_CHROME_SYNC = 1,
  UserConsentSpecifics_Feature_PLAY_STORE = 2,
  UserConsentSpecifics_Feature_BACKUP_AND_RESTORE = 3,
  UserConsentSpecifics_Feature_GOOGLE_LOCATION_SERVICE = 4,
  UserConsentSpecifics_Feature_CHROME_UNIFIED_CONSENT = 5,
  UserConsentSpecifics_Feature_ASSISTANT_ACTIVITY_CONTROL = 6
};
bool UserConsentSpecifics_Feature_IsValid(int value);
constexpr UserConsentSpecifics_Feature UserConsentSpecifics_Feature_Feature_MIN = UserConsentSpecifics_Feature_FEATURE_UNSPECIFIED;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics_Feature_Feature_MAX = UserConsentSpecifics_Feature_ASSISTANT_ACTIVITY_CONTROL;
constexpr int UserConsentSpecifics_Feature_Feature_ARRAYSIZE = UserConsentSpecifics_Feature_Feature_MAX + 1;

const std::string& UserConsentSpecifics_Feature_Name(UserConsentSpecifics_Feature value);
template<typename T>
inline const std::string& UserConsentSpecifics_Feature_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserConsentSpecifics_Feature>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserConsentSpecifics_Feature_Name.");
  return UserConsentSpecifics_Feature_Name(static_cast<UserConsentSpecifics_Feature>(enum_t_value));
}
bool UserConsentSpecifics_Feature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserConsentSpecifics_Feature* value);
// ===================================================================

class UserConsentSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentSpecifics) */ {
 public:
  inline UserConsentSpecifics() : UserConsentSpecifics(nullptr) {}
  ~UserConsentSpecifics() override;
  explicit PROTOBUF_CONSTEXPR UserConsentSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserConsentSpecifics(const UserConsentSpecifics& from);
  UserConsentSpecifics(UserConsentSpecifics&& from) noexcept
    : UserConsentSpecifics() {
    *this = ::std::move(from);
  }

  inline UserConsentSpecifics& operator=(const UserConsentSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentSpecifics& operator=(UserConsentSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserConsentSpecifics& default_instance() {
    return *internal_default_instance();
  }
  enum ConsentCase {
    kSyncConsent = 7,
    kArcBackupAndRestoreConsent = 8,
    kArcLocationServiceConsent = 9,
    kArcPlayTermsOfServiceConsent = 10,
    kUnifiedConsent = 13,
    kAssistantActivityControlConsent = 14,
    kAccountPasswordsConsent = 15,
    kAutofillAssistantConsent = 16,
    CONSENT_NOT_SET = 0,
  };

  static inline const UserConsentSpecifics* internal_default_instance() {
    return reinterpret_cast<const UserConsentSpecifics*>(
               &_UserConsentSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserConsentSpecifics& a, UserConsentSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserConsentSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserConsentSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserConsentSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserConsentSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserConsentSpecifics& from);
  void MergeFrom(const UserConsentSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentSpecifics";
  }
  protected:
  explicit UserConsentSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserConsentSpecifics_Feature Feature;
  static constexpr Feature FEATURE_UNSPECIFIED =
    UserConsentSpecifics_Feature_FEATURE_UNSPECIFIED;
  static constexpr Feature CHROME_SYNC =
    UserConsentSpecifics_Feature_CHROME_SYNC;
  static constexpr Feature PLAY_STORE =
    UserConsentSpecifics_Feature_PLAY_STORE;
  static constexpr Feature BACKUP_AND_RESTORE =
    UserConsentSpecifics_Feature_BACKUP_AND_RESTORE;
  static constexpr Feature GOOGLE_LOCATION_SERVICE =
    UserConsentSpecifics_Feature_GOOGLE_LOCATION_SERVICE;
  static constexpr Feature CHROME_UNIFIED_CONSENT =
    UserConsentSpecifics_Feature_CHROME_UNIFIED_CONSENT;
  static constexpr Feature ASSISTANT_ACTIVITY_CONTROL =
    UserConsentSpecifics_Feature_ASSISTANT_ACTIVITY_CONTROL;
  static inline bool Feature_IsValid(int value) {
    return UserConsentSpecifics_Feature_IsValid(value);
  }
  static constexpr Feature Feature_MIN =
    UserConsentSpecifics_Feature_Feature_MIN;
  static constexpr Feature Feature_MAX =
    UserConsentSpecifics_Feature_Feature_MAX;
  static constexpr int Feature_ARRAYSIZE =
    UserConsentSpecifics_Feature_Feature_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Feature_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Feature>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Feature_Name.");
    return UserConsentSpecifics_Feature_Name(enum_t_value);
  }
  static inline bool Feature_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Feature* value) {
    return UserConsentSpecifics_Feature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 2,
    kLocaleFieldNumber = 4,
    kAccountIdFieldNumber = 6,
    kFeatureFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 3,
    kClientConsentTimeUsecFieldNumber = 12,
    kStatusFieldNumber = 5,
    kSyncConsentFieldNumber = 7,
    kArcBackupAndRestoreConsentFieldNumber = 8,
    kArcLocationServiceConsentFieldNumber = 9,
    kArcPlayTermsOfServiceConsentFieldNumber = 10,
    kUnifiedConsentFieldNumber = 13,
    kAssistantActivityControlConsentFieldNumber = 14,
    kAccountPasswordsConsentFieldNumber = 15,
    kAutofillAssistantConsentFieldNumber = 16,
  };
  // repeated int32 description_grd_ids = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int description_grd_ids_size() const;
  private:
  int _internal_description_grd_ids_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_description_grd_ids();
  private:
  int32_t _internal_description_grd_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_description_grd_ids() const;
  void _internal_add_description_grd_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_description_grd_ids();
  public:
  PROTOBUF_DEPRECATED int32_t description_grd_ids(int index) const;
  PROTOBUF_DEPRECATED void set_description_grd_ids(int index, int32_t value);
  PROTOBUF_DEPRECATED void add_description_grd_ids(int32_t value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      description_grd_ids() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_description_grd_ids();

  // optional string locale = 4;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional string account_id = 6;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  PROTOBUF_DEPRECATED void clear_feature();
  PROTOBUF_DEPRECATED ::sync_pb::UserConsentSpecifics_Feature feature() const;
  PROTOBUF_DEPRECATED void set_feature(::sync_pb::UserConsentSpecifics_Feature value);
  private:
  ::sync_pb::UserConsentSpecifics_Feature _internal_feature() const;
  void _internal_set_feature(::sync_pb::UserConsentSpecifics_Feature value);
  public:

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_confirmation_grd_id() const;
  private:
  bool _internal_has_confirmation_grd_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_confirmation_grd_id();
  PROTOBUF_DEPRECATED int32_t confirmation_grd_id() const;
  PROTOBUF_DEPRECATED void set_confirmation_grd_id(int32_t value);
  private:
  int32_t _internal_confirmation_grd_id() const;
  void _internal_set_confirmation_grd_id(int32_t value);
  public:

  // optional int64 client_consent_time_usec = 12;
  bool has_client_consent_time_usec() const;
  private:
  bool _internal_has_client_consent_time_usec() const;
  public:
  void clear_client_consent_time_usec();
  int64_t client_consent_time_usec() const;
  void set_client_consent_time_usec(int64_t value);
  private:
  int64_t _internal_client_consent_time_usec() const;
  void _internal_set_client_consent_time_usec(int64_t value);
  public:

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  PROTOBUF_DEPRECATED void clear_status();
  PROTOBUF_DEPRECATED ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  PROTOBUF_DEPRECATED void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);
  private:
  ::sync_pb::UserConsentTypes_ConsentStatus _internal_status() const;
  void _internal_set_status(::sync_pb::UserConsentTypes_ConsentStatus value);
  public:

  // .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
  bool has_sync_consent() const;
  private:
  bool _internal_has_sync_consent() const;
  public:
  void clear_sync_consent();
  const ::sync_pb::UserConsentTypes_SyncConsent& sync_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_SyncConsent* release_sync_consent();
  ::sync_pb::UserConsentTypes_SyncConsent* mutable_sync_consent();
  void set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent);
  private:
  const ::sync_pb::UserConsentTypes_SyncConsent& _internal_sync_consent() const;
  ::sync_pb::UserConsentTypes_SyncConsent* _internal_mutable_sync_consent();
  public:
  void unsafe_arena_set_allocated_sync_consent(
      ::sync_pb::UserConsentTypes_SyncConsent* sync_consent);
  ::sync_pb::UserConsentTypes_SyncConsent* unsafe_arena_release_sync_consent();

  // .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
  bool has_arc_backup_and_restore_consent() const;
  private:
  bool _internal_has_arc_backup_and_restore_consent() const;
  public:
  void clear_arc_backup_and_restore_consent();
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& arc_backup_and_restore_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* release_arc_backup_and_restore_consent();
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* mutable_arc_backup_and_restore_consent();
  void set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent);
  private:
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& _internal_arc_backup_and_restore_consent() const;
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* _internal_mutable_arc_backup_and_restore_consent();
  public:
  void unsafe_arena_set_allocated_arc_backup_and_restore_consent(
      ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent);
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* unsafe_arena_release_arc_backup_and_restore_consent();

  // .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
  bool has_arc_location_service_consent() const;
  private:
  bool _internal_has_arc_location_service_consent() const;
  public:
  void clear_arc_location_service_consent();
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& arc_location_service_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* release_arc_location_service_consent();
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* mutable_arc_location_service_consent();
  void set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent);
  private:
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& _internal_arc_location_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* _internal_mutable_arc_location_service_consent();
  public:
  void unsafe_arena_set_allocated_arc_location_service_consent(
      ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent);
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* unsafe_arena_release_arc_location_service_consent();

  // .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
  bool has_arc_play_terms_of_service_consent() const;
  private:
  bool _internal_has_arc_play_terms_of_service_consent() const;
  public:
  void clear_arc_play_terms_of_service_consent();
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& arc_play_terms_of_service_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* release_arc_play_terms_of_service_consent();
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* mutable_arc_play_terms_of_service_consent();
  void set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent);
  private:
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& _internal_arc_play_terms_of_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* _internal_mutable_arc_play_terms_of_service_consent();
  public:
  void unsafe_arena_set_allocated_arc_play_terms_of_service_consent(
      ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent);
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* unsafe_arena_release_arc_play_terms_of_service_consent();

  // .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_unified_consent() const;
  private:
  bool _internal_has_unified_consent() const;
  public:
  PROTOBUF_DEPRECATED void clear_unified_consent();
  PROTOBUF_DEPRECATED const ::sync_pb::UserConsentTypes_UnifiedConsent& unified_consent() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::UserConsentTypes_UnifiedConsent* release_unified_consent();
  PROTOBUF_DEPRECATED ::sync_pb::UserConsentTypes_UnifiedConsent* mutable_unified_consent();
  PROTOBUF_DEPRECATED void set_allocated_unified_consent(::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent);
  private:
  const ::sync_pb::UserConsentTypes_UnifiedConsent& _internal_unified_consent() const;
  ::sync_pb::UserConsentTypes_UnifiedConsent* _internal_mutable_unified_consent();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_unified_consent(
      ::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent);
  PROTOBUF_DEPRECATED ::sync_pb::UserConsentTypes_UnifiedConsent* unsafe_arena_release_unified_consent();

  // .sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;
  bool has_assistant_activity_control_consent() const;
  private:
  bool _internal_has_assistant_activity_control_consent() const;
  public:
  void clear_assistant_activity_control_consent();
  const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent& assistant_activity_control_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* release_assistant_activity_control_consent();
  ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* mutable_assistant_activity_control_consent();
  void set_allocated_assistant_activity_control_consent(::sync_pb::UserConsentTypes_AssistantActivityControlConsent* assistant_activity_control_consent);
  private:
  const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent& _internal_assistant_activity_control_consent() const;
  ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* _internal_mutable_assistant_activity_control_consent();
  public:
  void unsafe_arena_set_allocated_assistant_activity_control_consent(
      ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* assistant_activity_control_consent);
  ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* unsafe_arena_release_assistant_activity_control_consent();

  // .sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;
  bool has_account_passwords_consent() const;
  private:
  bool _internal_has_account_passwords_consent() const;
  public:
  void clear_account_passwords_consent();
  const ::sync_pb::UserConsentTypes_AccountPasswordsConsent& account_passwords_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_AccountPasswordsConsent* release_account_passwords_consent();
  ::sync_pb::UserConsentTypes_AccountPasswordsConsent* mutable_account_passwords_consent();
  void set_allocated_account_passwords_consent(::sync_pb::UserConsentTypes_AccountPasswordsConsent* account_passwords_consent);
  private:
  const ::sync_pb::UserConsentTypes_AccountPasswordsConsent& _internal_account_passwords_consent() const;
  ::sync_pb::UserConsentTypes_AccountPasswordsConsent* _internal_mutable_account_passwords_consent();
  public:
  void unsafe_arena_set_allocated_account_passwords_consent(
      ::sync_pb::UserConsentTypes_AccountPasswordsConsent* account_passwords_consent);
  ::sync_pb::UserConsentTypes_AccountPasswordsConsent* unsafe_arena_release_account_passwords_consent();

  // .sync_pb.UserConsentTypes.AutofillAssistantConsent autofill_assistant_consent = 16;
  bool has_autofill_assistant_consent() const;
  private:
  bool _internal_has_autofill_assistant_consent() const;
  public:
  void clear_autofill_assistant_consent();
  const ::sync_pb::UserConsentTypes_AutofillAssistantConsent& autofill_assistant_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_AutofillAssistantConsent* release_autofill_assistant_consent();
  ::sync_pb::UserConsentTypes_AutofillAssistantConsent* mutable_autofill_assistant_consent();
  void set_allocated_autofill_assistant_consent(::sync_pb::UserConsentTypes_AutofillAssistantConsent* autofill_assistant_consent);
  private:
  const ::sync_pb::UserConsentTypes_AutofillAssistantConsent& _internal_autofill_assistant_consent() const;
  ::sync_pb::UserConsentTypes_AutofillAssistantConsent* _internal_mutable_autofill_assistant_consent();
  public:
  void unsafe_arena_set_allocated_autofill_assistant_consent(
      ::sync_pb::UserConsentTypes_AutofillAssistantConsent* autofill_assistant_consent);
  ::sync_pb::UserConsentTypes_AutofillAssistantConsent* unsafe_arena_release_autofill_assistant_consent();

  void clear_consent();
  ConsentCase consent_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentSpecifics)
 private:
  class _Internal;
  void set_has_sync_consent();
  void set_has_arc_backup_and_restore_consent();
  void set_has_arc_location_service_consent();
  void set_has_arc_play_terms_of_service_consent();
  void set_has_unified_consent();
  void set_has_assistant_activity_control_consent();
  void set_has_account_passwords_consent();
  void set_has_autofill_assistant_consent();

  inline bool has_consent() const;
  inline void clear_has_consent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  int feature_;
  int32_t confirmation_grd_id_;
  int64_t client_consent_time_usec_;
  int status_;
  union ConsentUnion {
    constexpr ConsentUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
    ::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent_;
    ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* assistant_activity_control_consent_;
    ::sync_pb::UserConsentTypes_AccountPasswordsConsent* account_passwords_consent_;
    ::sync_pb::UserConsentTypes_AutofillAssistantConsent* autofill_assistant_consent_;
  } consent_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fconsent_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserConsentSpecifics

// optional string locale = 4;
inline bool UserConsentSpecifics::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserConsentSpecifics::has_locale() const {
  return _internal_has_locale();
}
inline void UserConsentSpecifics::clear_locale() {
  locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserConsentSpecifics::locale() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserConsentSpecifics::set_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.locale)
}
inline std::string* UserConsentSpecifics::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.locale)
  return _s;
}
inline const std::string& UserConsentSpecifics::_internal_locale() const {
  return locale_.Get();
}
inline void UserConsentSpecifics::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* UserConsentSpecifics::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000001u;
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* UserConsentSpecifics::release_locale() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserConsentSpecifics::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.locale)
}

// optional int64 client_consent_time_usec = 12;
inline bool UserConsentSpecifics::_internal_has_client_consent_time_usec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserConsentSpecifics::has_client_consent_time_usec() const {
  return _internal_has_client_consent_time_usec();
}
inline void UserConsentSpecifics::clear_client_consent_time_usec() {
  client_consent_time_usec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t UserConsentSpecifics::_internal_client_consent_time_usec() const {
  return client_consent_time_usec_;
}
inline int64_t UserConsentSpecifics::client_consent_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.client_consent_time_usec)
  return _internal_client_consent_time_usec();
}
inline void UserConsentSpecifics::_internal_set_client_consent_time_usec(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  client_consent_time_usec_ = value;
}
inline void UserConsentSpecifics::set_client_consent_time_usec(int64_t value) {
  _internal_set_client_consent_time_usec(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.client_consent_time_usec)
}

// .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
inline bool UserConsentSpecifics::_internal_has_sync_consent() const {
  return consent_case() == kSyncConsent;
}
inline bool UserConsentSpecifics::has_sync_consent() const {
  return _internal_has_sync_consent();
}
inline void UserConsentSpecifics::set_has_sync_consent() {
  _oneof_case_[0] = kSyncConsent;
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserConsentSpecifics::release_sync_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.sync_consent)
  if (_internal_has_sync_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.sync_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_SyncConsent& UserConsentSpecifics::_internal_sync_consent() const {
  return _internal_has_sync_consent()
      ? *consent_.sync_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_SyncConsent&>(::sync_pb::_UserConsentTypes_SyncConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_SyncConsent& UserConsentSpecifics::sync_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.sync_consent)
  return _internal_sync_consent();
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserConsentSpecifics::unsafe_arena_release_sync_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserConsentSpecifics.sync_consent)
  if (_internal_has_sync_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    consent_.sync_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserConsentSpecifics::unsafe_arena_set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  clear_consent();
  if (sync_consent) {
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserConsentSpecifics.sync_consent)
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserConsentSpecifics::_internal_mutable_sync_consent() {
  if (!_internal_has_sync_consent()) {
    clear_consent();
    set_has_sync_consent();
    consent_.sync_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_SyncConsent >(GetArenaForAllocation());
  }
  return consent_.sync_consent_;
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserConsentSpecifics::mutable_sync_consent() {
  ::sync_pb::UserConsentTypes_SyncConsent* _msg = _internal_mutable_sync_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.sync_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
inline bool UserConsentSpecifics::_internal_has_arc_backup_and_restore_consent() const {
  return consent_case() == kArcBackupAndRestoreConsent;
}
inline bool UserConsentSpecifics::has_arc_backup_and_restore_consent() const {
  return _internal_has_arc_backup_and_restore_consent();
}
inline void UserConsentSpecifics::set_has_arc_backup_and_restore_consent() {
  _oneof_case_[0] = kArcBackupAndRestoreConsent;
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentSpecifics::release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  if (_internal_has_arc_backup_and_restore_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.arc_backup_and_restore_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserConsentSpecifics::_internal_arc_backup_and_restore_consent() const {
  return _internal_has_arc_backup_and_restore_consent()
      ? *consent_.arc_backup_and_restore_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent&>(::sync_pb::_UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserConsentSpecifics::arc_backup_and_restore_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  return _internal_arc_backup_and_restore_consent();
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentSpecifics::unsafe_arena_release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  if (_internal_has_arc_backup_and_restore_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    consent_.arc_backup_and_restore_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserConsentSpecifics::unsafe_arena_set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  clear_consent();
  if (arc_backup_and_restore_consent) {
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentSpecifics::_internal_mutable_arc_backup_and_restore_consent() {
  if (!_internal_has_arc_backup_and_restore_consent()) {
    clear_consent();
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent >(GetArenaForAllocation());
  }
  return consent_.arc_backup_and_restore_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentSpecifics::mutable_arc_backup_and_restore_consent() {
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* _msg = _internal_mutable_arc_backup_and_restore_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
inline bool UserConsentSpecifics::_internal_has_arc_location_service_consent() const {
  return consent_case() == kArcLocationServiceConsent;
}
inline bool UserConsentSpecifics::has_arc_location_service_consent() const {
  return _internal_has_arc_location_service_consent();
}
inline void UserConsentSpecifics::set_has_arc_location_service_consent() {
  _oneof_case_[0] = kArcLocationServiceConsent;
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentSpecifics::release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  if (_internal_has_arc_location_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.arc_location_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserConsentSpecifics::_internal_arc_location_service_consent() const {
  return _internal_has_arc_location_service_consent()
      ? *consent_.arc_location_service_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent&>(::sync_pb::_UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserConsentSpecifics::arc_location_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  return _internal_arc_location_service_consent();
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentSpecifics::unsafe_arena_release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  if (_internal_has_arc_location_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    consent_.arc_location_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserConsentSpecifics::unsafe_arena_set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  clear_consent();
  if (arc_location_service_consent) {
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserConsentSpecifics.arc_location_service_consent)
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentSpecifics::_internal_mutable_arc_location_service_consent() {
  if (!_internal_has_arc_location_service_consent()) {
    clear_consent();
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent >(GetArenaForAllocation());
  }
  return consent_.arc_location_service_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentSpecifics::mutable_arc_location_service_consent() {
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* _msg = _internal_mutable_arc_location_service_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_location_service_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
inline bool UserConsentSpecifics::_internal_has_arc_play_terms_of_service_consent() const {
  return consent_case() == kArcPlayTermsOfServiceConsent;
}
inline bool UserConsentSpecifics::has_arc_play_terms_of_service_consent() const {
  return _internal_has_arc_play_terms_of_service_consent();
}
inline void UserConsentSpecifics::set_has_arc_play_terms_of_service_consent() {
  _oneof_case_[0] = kArcPlayTermsOfServiceConsent;
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentSpecifics::release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  if (_internal_has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.arc_play_terms_of_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserConsentSpecifics::_internal_arc_play_terms_of_service_consent() const {
  return _internal_has_arc_play_terms_of_service_consent()
      ? *consent_.arc_play_terms_of_service_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent&>(::sync_pb::_UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserConsentSpecifics::arc_play_terms_of_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  return _internal_arc_play_terms_of_service_consent();
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentSpecifics::unsafe_arena_release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  if (_internal_has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    consent_.arc_play_terms_of_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserConsentSpecifics::unsafe_arena_set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentSpecifics::_internal_mutable_arc_play_terms_of_service_consent() {
  if (!_internal_has_arc_play_terms_of_service_consent()) {
    clear_consent();
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent >(GetArenaForAllocation());
  }
  return consent_.arc_play_terms_of_service_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentSpecifics::mutable_arc_play_terms_of_service_consent() {
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* _msg = _internal_mutable_arc_play_terms_of_service_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];
inline bool UserConsentSpecifics::_internal_has_unified_consent() const {
  return consent_case() == kUnifiedConsent;
}
inline bool UserConsentSpecifics::has_unified_consent() const {
  return _internal_has_unified_consent();
}
inline void UserConsentSpecifics::set_has_unified_consent() {
  _oneof_case_[0] = kUnifiedConsent;
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserConsentSpecifics::release_unified_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.unified_consent)
  if (_internal_has_unified_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_UnifiedConsent* temp = consent_.unified_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.unified_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_UnifiedConsent& UserConsentSpecifics::_internal_unified_consent() const {
  return _internal_has_unified_consent()
      ? *consent_.unified_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_UnifiedConsent&>(::sync_pb::_UserConsentTypes_UnifiedConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_UnifiedConsent& UserConsentSpecifics::unified_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.unified_consent)
  return _internal_unified_consent();
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserConsentSpecifics::unsafe_arena_release_unified_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserConsentSpecifics.unified_consent)
  if (_internal_has_unified_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_UnifiedConsent* temp = consent_.unified_consent_;
    consent_.unified_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserConsentSpecifics::unsafe_arena_set_allocated_unified_consent(::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent) {
  clear_consent();
  if (unified_consent) {
    set_has_unified_consent();
    consent_.unified_consent_ = unified_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserConsentSpecifics.unified_consent)
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserConsentSpecifics::_internal_mutable_unified_consent() {
  if (!_internal_has_unified_consent()) {
    clear_consent();
    set_has_unified_consent();
    consent_.unified_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_UnifiedConsent >(GetArenaForAllocation());
  }
  return consent_.unified_consent_;
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserConsentSpecifics::mutable_unified_consent() {
  ::sync_pb::UserConsentTypes_UnifiedConsent* _msg = _internal_mutable_unified_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.unified_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;
inline bool UserConsentSpecifics::_internal_has_assistant_activity_control_consent() const {
  return consent_case() == kAssistantActivityControlConsent;
}
inline bool UserConsentSpecifics::has_assistant_activity_control_consent() const {
  return _internal_has_assistant_activity_control_consent();
}
inline void UserConsentSpecifics::set_has_assistant_activity_control_consent() {
  _oneof_case_[0] = kAssistantActivityControlConsent;
}
inline ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* UserConsentSpecifics::release_assistant_activity_control_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.assistant_activity_control_consent)
  if (_internal_has_assistant_activity_control_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* temp = consent_.assistant_activity_control_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.assistant_activity_control_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent& UserConsentSpecifics::_internal_assistant_activity_control_consent() const {
  return _internal_has_assistant_activity_control_consent()
      ? *consent_.assistant_activity_control_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_AssistantActivityControlConsent&>(::sync_pb::_UserConsentTypes_AssistantActivityControlConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent& UserConsentSpecifics::assistant_activity_control_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.assistant_activity_control_consent)
  return _internal_assistant_activity_control_consent();
}
inline ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* UserConsentSpecifics::unsafe_arena_release_assistant_activity_control_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserConsentSpecifics.assistant_activity_control_consent)
  if (_internal_has_assistant_activity_control_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* temp = consent_.assistant_activity_control_consent_;
    consent_.assistant_activity_control_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserConsentSpecifics::unsafe_arena_set_allocated_assistant_activity_control_consent(::sync_pb::UserConsentTypes_AssistantActivityControlConsent* assistant_activity_control_consent) {
  clear_consent();
  if (assistant_activity_control_consent) {
    set_has_assistant_activity_control_consent();
    consent_.assistant_activity_control_consent_ = assistant_activity_control_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserConsentSpecifics.assistant_activity_control_consent)
}
inline ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* UserConsentSpecifics::_internal_mutable_assistant_activity_control_consent() {
  if (!_internal_has_assistant_activity_control_consent()) {
    clear_consent();
    set_has_assistant_activity_control_consent();
    consent_.assistant_activity_control_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_AssistantActivityControlConsent >(GetArenaForAllocation());
  }
  return consent_.assistant_activity_control_consent_;
}
inline ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* UserConsentSpecifics::mutable_assistant_activity_control_consent() {
  ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* _msg = _internal_mutable_assistant_activity_control_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.assistant_activity_control_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;
inline bool UserConsentSpecifics::_internal_has_account_passwords_consent() const {
  return consent_case() == kAccountPasswordsConsent;
}
inline bool UserConsentSpecifics::has_account_passwords_consent() const {
  return _internal_has_account_passwords_consent();
}
inline void UserConsentSpecifics::set_has_account_passwords_consent() {
  _oneof_case_[0] = kAccountPasswordsConsent;
}
inline ::sync_pb::UserConsentTypes_AccountPasswordsConsent* UserConsentSpecifics::release_account_passwords_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.account_passwords_consent)
  if (_internal_has_account_passwords_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_AccountPasswordsConsent* temp = consent_.account_passwords_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.account_passwords_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_AccountPasswordsConsent& UserConsentSpecifics::_internal_account_passwords_consent() const {
  return _internal_has_account_passwords_consent()
      ? *consent_.account_passwords_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_AccountPasswordsConsent&>(::sync_pb::_UserConsentTypes_AccountPasswordsConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_AccountPasswordsConsent& UserConsentSpecifics::account_passwords_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.account_passwords_consent)
  return _internal_account_passwords_consent();
}
inline ::sync_pb::UserConsentTypes_AccountPasswordsConsent* UserConsentSpecifics::unsafe_arena_release_account_passwords_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserConsentSpecifics.account_passwords_consent)
  if (_internal_has_account_passwords_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_AccountPasswordsConsent* temp = consent_.account_passwords_consent_;
    consent_.account_passwords_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserConsentSpecifics::unsafe_arena_set_allocated_account_passwords_consent(::sync_pb::UserConsentTypes_AccountPasswordsConsent* account_passwords_consent) {
  clear_consent();
  if (account_passwords_consent) {
    set_has_account_passwords_consent();
    consent_.account_passwords_consent_ = account_passwords_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserConsentSpecifics.account_passwords_consent)
}
inline ::sync_pb::UserConsentTypes_AccountPasswordsConsent* UserConsentSpecifics::_internal_mutable_account_passwords_consent() {
  if (!_internal_has_account_passwords_consent()) {
    clear_consent();
    set_has_account_passwords_consent();
    consent_.account_passwords_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_AccountPasswordsConsent >(GetArenaForAllocation());
  }
  return consent_.account_passwords_consent_;
}
inline ::sync_pb::UserConsentTypes_AccountPasswordsConsent* UserConsentSpecifics::mutable_account_passwords_consent() {
  ::sync_pb::UserConsentTypes_AccountPasswordsConsent* _msg = _internal_mutable_account_passwords_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.account_passwords_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.AutofillAssistantConsent autofill_assistant_consent = 16;
inline bool UserConsentSpecifics::_internal_has_autofill_assistant_consent() const {
  return consent_case() == kAutofillAssistantConsent;
}
inline bool UserConsentSpecifics::has_autofill_assistant_consent() const {
  return _internal_has_autofill_assistant_consent();
}
inline void UserConsentSpecifics::set_has_autofill_assistant_consent() {
  _oneof_case_[0] = kAutofillAssistantConsent;
}
inline ::sync_pb::UserConsentTypes_AutofillAssistantConsent* UserConsentSpecifics::release_autofill_assistant_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.autofill_assistant_consent)
  if (_internal_has_autofill_assistant_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_AutofillAssistantConsent* temp = consent_.autofill_assistant_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.autofill_assistant_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_AutofillAssistantConsent& UserConsentSpecifics::_internal_autofill_assistant_consent() const {
  return _internal_has_autofill_assistant_consent()
      ? *consent_.autofill_assistant_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_AutofillAssistantConsent&>(::sync_pb::_UserConsentTypes_AutofillAssistantConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_AutofillAssistantConsent& UserConsentSpecifics::autofill_assistant_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.autofill_assistant_consent)
  return _internal_autofill_assistant_consent();
}
inline ::sync_pb::UserConsentTypes_AutofillAssistantConsent* UserConsentSpecifics::unsafe_arena_release_autofill_assistant_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserConsentSpecifics.autofill_assistant_consent)
  if (_internal_has_autofill_assistant_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_AutofillAssistantConsent* temp = consent_.autofill_assistant_consent_;
    consent_.autofill_assistant_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserConsentSpecifics::unsafe_arena_set_allocated_autofill_assistant_consent(::sync_pb::UserConsentTypes_AutofillAssistantConsent* autofill_assistant_consent) {
  clear_consent();
  if (autofill_assistant_consent) {
    set_has_autofill_assistant_consent();
    consent_.autofill_assistant_consent_ = autofill_assistant_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserConsentSpecifics.autofill_assistant_consent)
}
inline ::sync_pb::UserConsentTypes_AutofillAssistantConsent* UserConsentSpecifics::_internal_mutable_autofill_assistant_consent() {
  if (!_internal_has_autofill_assistant_consent()) {
    clear_consent();
    set_has_autofill_assistant_consent();
    consent_.autofill_assistant_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_AutofillAssistantConsent >(GetArenaForAllocation());
  }
  return consent_.autofill_assistant_consent_;
}
inline ::sync_pb::UserConsentTypes_AutofillAssistantConsent* UserConsentSpecifics::mutable_autofill_assistant_consent() {
  ::sync_pb::UserConsentTypes_AutofillAssistantConsent* _msg = _internal_mutable_autofill_assistant_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.autofill_assistant_consent)
  return _msg;
}

// optional string account_id = 6;
inline bool UserConsentSpecifics::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserConsentSpecifics::has_account_id() const {
  return _internal_has_account_id();
}
inline void UserConsentSpecifics::clear_account_id() {
  account_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserConsentSpecifics::account_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserConsentSpecifics::set_account_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.account_id)
}
inline std::string* UserConsentSpecifics::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentSpecifics.account_id)
  return _s;
}
inline const std::string& UserConsentSpecifics::_internal_account_id() const {
  return account_id_.Get();
}
inline void UserConsentSpecifics::_internal_set_account_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserConsentSpecifics::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000002u;
  return account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserConsentSpecifics::release_account_id() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentSpecifics.account_id)
  if (!_internal_has_account_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = account_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_id_.IsDefault()) {
    account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserConsentSpecifics::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_id_.IsDefault()) {
    account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.account_id)
}

// optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
inline bool UserConsentSpecifics::_internal_has_feature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserConsentSpecifics::has_feature() const {
  return _internal_has_feature();
}
inline void UserConsentSpecifics::clear_feature() {
  feature_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::UserConsentSpecifics_Feature UserConsentSpecifics::_internal_feature() const {
  return static_cast< ::sync_pb::UserConsentSpecifics_Feature >(feature_);
}
inline ::sync_pb::UserConsentSpecifics_Feature UserConsentSpecifics::feature() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.feature)
  return _internal_feature();
}
inline void UserConsentSpecifics::_internal_set_feature(::sync_pb::UserConsentSpecifics_Feature value) {
  assert(::sync_pb::UserConsentSpecifics_Feature_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  feature_ = value;
}
inline void UserConsentSpecifics::set_feature(::sync_pb::UserConsentSpecifics_Feature value) {
  _internal_set_feature(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.feature)
}

// repeated int32 description_grd_ids = 2 [deprecated = true];
inline int UserConsentSpecifics::_internal_description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline int UserConsentSpecifics::description_grd_ids_size() const {
  return _internal_description_grd_ids_size();
}
inline void UserConsentSpecifics::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline int32_t UserConsentSpecifics::_internal_description_grd_ids(int index) const {
  return description_grd_ids_.Get(index);
}
inline int32_t UserConsentSpecifics::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.description_grd_ids)
  return _internal_description_grd_ids(index);
}
inline void UserConsentSpecifics::set_description_grd_ids(int index, int32_t value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.description_grd_ids)
}
inline void UserConsentSpecifics::_internal_add_description_grd_ids(int32_t value) {
  description_grd_ids_.Add(value);
}
inline void UserConsentSpecifics::add_description_grd_ids(int32_t value) {
  _internal_add_description_grd_ids(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentSpecifics.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UserConsentSpecifics::_internal_description_grd_ids() const {
  return description_grd_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UserConsentSpecifics::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentSpecifics.description_grd_ids)
  return _internal_description_grd_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UserConsentSpecifics::_internal_mutable_description_grd_ids() {
  return &description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UserConsentSpecifics::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentSpecifics.description_grd_ids)
  return _internal_mutable_description_grd_ids();
}

// optional int32 confirmation_grd_id = 3 [deprecated = true];
inline bool UserConsentSpecifics::_internal_has_confirmation_grd_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserConsentSpecifics::has_confirmation_grd_id() const {
  return _internal_has_confirmation_grd_id();
}
inline void UserConsentSpecifics::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t UserConsentSpecifics::_internal_confirmation_grd_id() const {
  return confirmation_grd_id_;
}
inline int32_t UserConsentSpecifics::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.confirmation_grd_id)
  return _internal_confirmation_grd_id();
}
inline void UserConsentSpecifics::_internal_set_confirmation_grd_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  confirmation_grd_id_ = value;
}
inline void UserConsentSpecifics::set_confirmation_grd_id(int32_t value) {
  _internal_set_confirmation_grd_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
inline bool UserConsentSpecifics::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserConsentSpecifics::has_status() const {
  return _internal_has_status();
}
inline void UserConsentSpecifics::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentSpecifics::_internal_status() const {
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentSpecifics::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentSpecifics.status)
  return _internal_status();
}
inline void UserConsentSpecifics::_internal_set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void UserConsentSpecifics::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentSpecifics.status)
}

inline bool UserConsentSpecifics::has_consent() const {
  return consent_case() != CONSENT_NOT_SET;
}
inline void UserConsentSpecifics::clear_has_consent() {
  _oneof_case_[0] = CONSENT_NOT_SET;
}
inline UserConsentSpecifics::ConsentCase UserConsentSpecifics::consent_case() const {
  return UserConsentSpecifics::ConsentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::UserConsentSpecifics_Feature> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fuser_5fconsent_5fspecifics_2eproto
