// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/printer_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fprinter_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fprinter_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fprinter_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fprinter_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class PrinterPPDReference;
struct PrinterPPDReferenceDefaultTypeInternal;
extern PrinterPPDReferenceDefaultTypeInternal _PrinterPPDReference_default_instance_;
class PrinterSpecifics;
struct PrinterSpecificsDefaultTypeInternal;
extern PrinterSpecificsDefaultTypeInternal _PrinterSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::PrinterPPDReference* Arena::CreateMaybeMessage<::sync_pb::PrinterPPDReference>(Arena*);
template<> ::sync_pb::PrinterSpecifics* Arena::CreateMaybeMessage<::sync_pb::PrinterSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class PrinterPPDReference final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PrinterPPDReference) */ {
 public:
  inline PrinterPPDReference() : PrinterPPDReference(nullptr) {}
  ~PrinterPPDReference() override;
  explicit PROTOBUF_CONSTEXPR PrinterPPDReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrinterPPDReference(const PrinterPPDReference& from);
  PrinterPPDReference(PrinterPPDReference&& from) noexcept
    : PrinterPPDReference() {
    *this = ::std::move(from);
  }

  inline PrinterPPDReference& operator=(const PrinterPPDReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterPPDReference& operator=(PrinterPPDReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PrinterPPDReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrinterPPDReference* internal_default_instance() {
    return reinterpret_cast<const PrinterPPDReference*>(
               &_PrinterPPDReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrinterPPDReference& a, PrinterPPDReference& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PrinterPPDReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrinterPPDReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrinterPPDReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrinterPPDReference>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrinterPPDReference& from);
  void MergeFrom(const PrinterPPDReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrinterPPDReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PrinterPPDReference";
  }
  protected:
  explicit PrinterPPDReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedPpdUrlFieldNumber = 1,
    kEffectiveManufacturerFieldNumber = 2,
    kEffectiveModelFieldNumber = 3,
    kEffectiveMakeAndModelFieldNumber = 4,
    kAutoconfFieldNumber = 5,
  };
  // optional string user_supplied_ppd_url = 1;
  bool has_user_supplied_ppd_url() const;
  private:
  bool _internal_has_user_supplied_ppd_url() const;
  public:
  void clear_user_supplied_ppd_url();
  const std::string& user_supplied_ppd_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_supplied_ppd_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_supplied_ppd_url();
  PROTOBUF_NODISCARD std::string* release_user_supplied_ppd_url();
  void set_allocated_user_supplied_ppd_url(std::string* user_supplied_ppd_url);
  private:
  const std::string& _internal_user_supplied_ppd_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_supplied_ppd_url(const std::string& value);
  std::string* _internal_mutable_user_supplied_ppd_url();
  public:

  // optional string effective_manufacturer = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_effective_manufacturer() const;
  private:
  bool _internal_has_effective_manufacturer() const;
  public:
  PROTOBUF_DEPRECATED void clear_effective_manufacturer();
  PROTOBUF_DEPRECATED const std::string& effective_manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_effective_manufacturer(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_effective_manufacturer();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_effective_manufacturer();
  PROTOBUF_DEPRECATED void set_allocated_effective_manufacturer(std::string* effective_manufacturer);
  private:
  const std::string& _internal_effective_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effective_manufacturer(const std::string& value);
  std::string* _internal_mutable_effective_manufacturer();
  public:

  // optional string effective_model = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_effective_model() const;
  private:
  bool _internal_has_effective_model() const;
  public:
  PROTOBUF_DEPRECATED void clear_effective_model();
  PROTOBUF_DEPRECATED const std::string& effective_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_effective_model(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_effective_model();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_effective_model();
  PROTOBUF_DEPRECATED void set_allocated_effective_model(std::string* effective_model);
  private:
  const std::string& _internal_effective_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effective_model(const std::string& value);
  std::string* _internal_mutable_effective_model();
  public:

  // optional string effective_make_and_model = 4;
  bool has_effective_make_and_model() const;
  private:
  bool _internal_has_effective_make_and_model() const;
  public:
  void clear_effective_make_and_model();
  const std::string& effective_make_and_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effective_make_and_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effective_make_and_model();
  PROTOBUF_NODISCARD std::string* release_effective_make_and_model();
  void set_allocated_effective_make_and_model(std::string* effective_make_and_model);
  private:
  const std::string& _internal_effective_make_and_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effective_make_and_model(const std::string& value);
  std::string* _internal_mutable_effective_make_and_model();
  public:

  // optional bool autoconf = 5 [default = false];
  bool has_autoconf() const;
  private:
  bool _internal_has_autoconf() const;
  public:
  void clear_autoconf();
  bool autoconf() const;
  void set_autoconf(bool value);
  private:
  bool _internal_autoconf() const;
  void _internal_set_autoconf(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.PrinterPPDReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_supplied_ppd_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effective_manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effective_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effective_make_and_model_;
  bool autoconf_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fprinter_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PrinterSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PrinterSpecifics) */ {
 public:
  inline PrinterSpecifics() : PrinterSpecifics(nullptr) {}
  ~PrinterSpecifics() override;
  explicit PROTOBUF_CONSTEXPR PrinterSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrinterSpecifics(const PrinterSpecifics& from);
  PrinterSpecifics(PrinterSpecifics&& from) noexcept
    : PrinterSpecifics() {
    *this = ::std::move(from);
  }

  inline PrinterSpecifics& operator=(const PrinterSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterSpecifics& operator=(PrinterSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PrinterSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrinterSpecifics* internal_default_instance() {
    return reinterpret_cast<const PrinterSpecifics*>(
               &_PrinterSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrinterSpecifics& a, PrinterSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PrinterSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrinterSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrinterSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrinterSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrinterSpecifics& from);
  void MergeFrom(const PrinterSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrinterSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PrinterSpecifics";
  }
  protected:
  explicit PrinterSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kManufacturerFieldNumber = 4,
    kModelFieldNumber = 5,
    kUriFieldNumber = 6,
    kUuidFieldNumber = 7,
    kPpdFieldNumber = 8,
    kMakeAndModelFieldNumber = 11,
    kPrintServerUriFieldNumber = 12,
    kPpdReferenceFieldNumber = 9,
    kUpdatedTimestampFieldNumber = 10,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string display_name = 2;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string manufacturer = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_manufacturer() const;
  private:
  bool _internal_has_manufacturer() const;
  public:
  PROTOBUF_DEPRECATED void clear_manufacturer();
  PROTOBUF_DEPRECATED const std::string& manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_manufacturer(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_manufacturer();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_manufacturer();
  PROTOBUF_DEPRECATED void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // optional string model = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  PROTOBUF_DEPRECATED void clear_model();
  PROTOBUF_DEPRECATED const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_model(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_model();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_model();
  PROTOBUF_DEPRECATED void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string uri = 6;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional string uuid = 7;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional bytes ppd = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_ppd() const;
  private:
  bool _internal_has_ppd() const;
  public:
  PROTOBUF_DEPRECATED void clear_ppd();
  PROTOBUF_DEPRECATED const std::string& ppd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_ppd(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_ppd();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_ppd();
  PROTOBUF_DEPRECATED void set_allocated_ppd(std::string* ppd);
  private:
  const std::string& _internal_ppd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ppd(const std::string& value);
  std::string* _internal_mutable_ppd();
  public:

  // optional string make_and_model = 11;
  bool has_make_and_model() const;
  private:
  bool _internal_has_make_and_model() const;
  public:
  void clear_make_and_model();
  const std::string& make_and_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_make_and_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_make_and_model();
  PROTOBUF_NODISCARD std::string* release_make_and_model();
  void set_allocated_make_and_model(std::string* make_and_model);
  private:
  const std::string& _internal_make_and_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_make_and_model(const std::string& value);
  std::string* _internal_mutable_make_and_model();
  public:

  // optional string print_server_uri = 12;
  bool has_print_server_uri() const;
  private:
  bool _internal_has_print_server_uri() const;
  public:
  void clear_print_server_uri();
  const std::string& print_server_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_print_server_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_print_server_uri();
  PROTOBUF_NODISCARD std::string* release_print_server_uri();
  void set_allocated_print_server_uri(std::string* print_server_uri);
  private:
  const std::string& _internal_print_server_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_print_server_uri(const std::string& value);
  std::string* _internal_mutable_print_server_uri();
  public:

  // optional .sync_pb.PrinterPPDReference ppd_reference = 9;
  bool has_ppd_reference() const;
  private:
  bool _internal_has_ppd_reference() const;
  public:
  void clear_ppd_reference();
  const ::sync_pb::PrinterPPDReference& ppd_reference() const;
  PROTOBUF_NODISCARD ::sync_pb::PrinterPPDReference* release_ppd_reference();
  ::sync_pb::PrinterPPDReference* mutable_ppd_reference();
  void set_allocated_ppd_reference(::sync_pb::PrinterPPDReference* ppd_reference);
  private:
  const ::sync_pb::PrinterPPDReference& _internal_ppd_reference() const;
  ::sync_pb::PrinterPPDReference* _internal_mutable_ppd_reference();
  public:
  void unsafe_arena_set_allocated_ppd_reference(
      ::sync_pb::PrinterPPDReference* ppd_reference);
  ::sync_pb::PrinterPPDReference* unsafe_arena_release_ppd_reference();

  // optional int64 updated_timestamp = 10;
  bool has_updated_timestamp() const;
  private:
  bool _internal_has_updated_timestamp() const;
  public:
  void clear_updated_timestamp();
  int64_t updated_timestamp() const;
  void set_updated_timestamp(int64_t value);
  private:
  int64_t _internal_updated_timestamp() const;
  void _internal_set_updated_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.PrinterSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ppd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr make_and_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr print_server_uri_;
  ::sync_pb::PrinterPPDReference* ppd_reference_;
  int64_t updated_timestamp_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fprinter_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrinterPPDReference

// optional string user_supplied_ppd_url = 1;
inline bool PrinterPPDReference::_internal_has_user_supplied_ppd_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrinterPPDReference::has_user_supplied_ppd_url() const {
  return _internal_has_user_supplied_ppd_url();
}
inline void PrinterPPDReference::clear_user_supplied_ppd_url() {
  user_supplied_ppd_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrinterPPDReference::user_supplied_ppd_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
  return _internal_user_supplied_ppd_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterPPDReference::set_user_supplied_ppd_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_supplied_ppd_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
}
inline std::string* PrinterPPDReference::mutable_user_supplied_ppd_url() {
  std::string* _s = _internal_mutable_user_supplied_ppd_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
  return _s;
}
inline const std::string& PrinterPPDReference::_internal_user_supplied_ppd_url() const {
  return user_supplied_ppd_url_.Get();
}
inline void PrinterPPDReference::_internal_set_user_supplied_ppd_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_supplied_ppd_url_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterPPDReference::_internal_mutable_user_supplied_ppd_url() {
  _has_bits_[0] |= 0x00000001u;
  return user_supplied_ppd_url_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterPPDReference::release_user_supplied_ppd_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
  if (!_internal_has_user_supplied_ppd_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_supplied_ppd_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_supplied_ppd_url_.IsDefault()) {
    user_supplied_ppd_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterPPDReference::set_allocated_user_supplied_ppd_url(std::string* user_supplied_ppd_url) {
  if (user_supplied_ppd_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_supplied_ppd_url_.SetAllocated(user_supplied_ppd_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_supplied_ppd_url_.IsDefault()) {
    user_supplied_ppd_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
}

// optional string effective_manufacturer = 2 [deprecated = true];
inline bool PrinterPPDReference::_internal_has_effective_manufacturer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrinterPPDReference::has_effective_manufacturer() const {
  return _internal_has_effective_manufacturer();
}
inline void PrinterPPDReference::clear_effective_manufacturer() {
  effective_manufacturer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrinterPPDReference::effective_manufacturer() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.effective_manufacturer)
  return _internal_effective_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterPPDReference::set_effective_manufacturer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 effective_manufacturer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.effective_manufacturer)
}
inline std::string* PrinterPPDReference::mutable_effective_manufacturer() {
  std::string* _s = _internal_mutable_effective_manufacturer();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterPPDReference.effective_manufacturer)
  return _s;
}
inline const std::string& PrinterPPDReference::_internal_effective_manufacturer() const {
  return effective_manufacturer_.Get();
}
inline void PrinterPPDReference::_internal_set_effective_manufacturer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  effective_manufacturer_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterPPDReference::_internal_mutable_effective_manufacturer() {
  _has_bits_[0] |= 0x00000002u;
  return effective_manufacturer_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterPPDReference::release_effective_manufacturer() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterPPDReference.effective_manufacturer)
  if (!_internal_has_effective_manufacturer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = effective_manufacturer_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (effective_manufacturer_.IsDefault()) {
    effective_manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterPPDReference::set_allocated_effective_manufacturer(std::string* effective_manufacturer) {
  if (effective_manufacturer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  effective_manufacturer_.SetAllocated(effective_manufacturer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (effective_manufacturer_.IsDefault()) {
    effective_manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterPPDReference.effective_manufacturer)
}

// optional string effective_model = 3 [deprecated = true];
inline bool PrinterPPDReference::_internal_has_effective_model() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrinterPPDReference::has_effective_model() const {
  return _internal_has_effective_model();
}
inline void PrinterPPDReference::clear_effective_model() {
  effective_model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrinterPPDReference::effective_model() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.effective_model)
  return _internal_effective_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterPPDReference::set_effective_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 effective_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.effective_model)
}
inline std::string* PrinterPPDReference::mutable_effective_model() {
  std::string* _s = _internal_mutable_effective_model();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterPPDReference.effective_model)
  return _s;
}
inline const std::string& PrinterPPDReference::_internal_effective_model() const {
  return effective_model_.Get();
}
inline void PrinterPPDReference::_internal_set_effective_model(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  effective_model_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterPPDReference::_internal_mutable_effective_model() {
  _has_bits_[0] |= 0x00000004u;
  return effective_model_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterPPDReference::release_effective_model() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterPPDReference.effective_model)
  if (!_internal_has_effective_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = effective_model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (effective_model_.IsDefault()) {
    effective_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterPPDReference::set_allocated_effective_model(std::string* effective_model) {
  if (effective_model != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  effective_model_.SetAllocated(effective_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (effective_model_.IsDefault()) {
    effective_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterPPDReference.effective_model)
}

// optional string effective_make_and_model = 4;
inline bool PrinterPPDReference::_internal_has_effective_make_and_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrinterPPDReference::has_effective_make_and_model() const {
  return _internal_has_effective_make_and_model();
}
inline void PrinterPPDReference::clear_effective_make_and_model() {
  effective_make_and_model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrinterPPDReference::effective_make_and_model() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.effective_make_and_model)
  return _internal_effective_make_and_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterPPDReference::set_effective_make_and_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 effective_make_and_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.effective_make_and_model)
}
inline std::string* PrinterPPDReference::mutable_effective_make_and_model() {
  std::string* _s = _internal_mutable_effective_make_and_model();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterPPDReference.effective_make_and_model)
  return _s;
}
inline const std::string& PrinterPPDReference::_internal_effective_make_and_model() const {
  return effective_make_and_model_.Get();
}
inline void PrinterPPDReference::_internal_set_effective_make_and_model(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  effective_make_and_model_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterPPDReference::_internal_mutable_effective_make_and_model() {
  _has_bits_[0] |= 0x00000008u;
  return effective_make_and_model_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterPPDReference::release_effective_make_and_model() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterPPDReference.effective_make_and_model)
  if (!_internal_has_effective_make_and_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = effective_make_and_model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (effective_make_and_model_.IsDefault()) {
    effective_make_and_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterPPDReference::set_allocated_effective_make_and_model(std::string* effective_make_and_model) {
  if (effective_make_and_model != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  effective_make_and_model_.SetAllocated(effective_make_and_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (effective_make_and_model_.IsDefault()) {
    effective_make_and_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterPPDReference.effective_make_and_model)
}

// optional bool autoconf = 5 [default = false];
inline bool PrinterPPDReference::_internal_has_autoconf() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrinterPPDReference::has_autoconf() const {
  return _internal_has_autoconf();
}
inline void PrinterPPDReference::clear_autoconf() {
  autoconf_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PrinterPPDReference::_internal_autoconf() const {
  return autoconf_;
}
inline bool PrinterPPDReference::autoconf() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.autoconf)
  return _internal_autoconf();
}
inline void PrinterPPDReference::_internal_set_autoconf(bool value) {
  _has_bits_[0] |= 0x00000010u;
  autoconf_ = value;
}
inline void PrinterPPDReference::set_autoconf(bool value) {
  _internal_set_autoconf(value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.autoconf)
}

// -------------------------------------------------------------------

// PrinterSpecifics

// optional string id = 1;
inline bool PrinterSpecifics::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_id() const {
  return _internal_has_id();
}
inline void PrinterSpecifics::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrinterSpecifics::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.id)
}
inline std::string* PrinterSpecifics::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.id)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_id() const {
  return id_.Get();
}
inline void PrinterSpecifics::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.id)
}

// optional string display_name = 2;
inline bool PrinterSpecifics::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_display_name() const {
  return _internal_has_display_name();
}
inline void PrinterSpecifics::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrinterSpecifics::display_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.display_name)
}
inline std::string* PrinterSpecifics::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.display_name)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_display_name() const {
  return display_name_.Get();
}
inline void PrinterSpecifics::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000002u;
  return display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_display_name() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.display_name)
}

// optional string description = 3;
inline bool PrinterSpecifics::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_description() const {
  return _internal_has_description();
}
inline void PrinterSpecifics::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrinterSpecifics::description() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.description)
}
inline std::string* PrinterSpecifics::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.description)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_description() const {
  return description_.Get();
}
inline void PrinterSpecifics::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_description() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.description)
}

// optional string manufacturer = 4 [deprecated = true];
inline bool PrinterSpecifics::_internal_has_manufacturer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_manufacturer() const {
  return _internal_has_manufacturer();
}
inline void PrinterSpecifics::clear_manufacturer() {
  manufacturer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrinterSpecifics::manufacturer() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.manufacturer)
  return _internal_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_manufacturer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 manufacturer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.manufacturer)
}
inline std::string* PrinterSpecifics::mutable_manufacturer() {
  std::string* _s = _internal_mutable_manufacturer();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.manufacturer)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_manufacturer() const {
  return manufacturer_.Get();
}
inline void PrinterSpecifics::_internal_set_manufacturer(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  manufacturer_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_manufacturer() {
  _has_bits_[0] |= 0x00000008u;
  return manufacturer_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_manufacturer() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.manufacturer)
  if (!_internal_has_manufacturer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = manufacturer_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_.IsDefault()) {
    manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  manufacturer_.SetAllocated(manufacturer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_.IsDefault()) {
    manufacturer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.manufacturer)
}

// optional string model = 5 [deprecated = true];
inline bool PrinterSpecifics::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_model() const {
  return _internal_has_model();
}
inline void PrinterSpecifics::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PrinterSpecifics::model() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.model)
}
inline std::string* PrinterSpecifics::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.model)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_model() const {
  return model_.Get();
}
inline void PrinterSpecifics::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  model_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000010u;
  return model_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_model() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault()) {
    model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault()) {
    model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.model)
}

// optional string uri = 6;
inline bool PrinterSpecifics::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_uri() const {
  return _internal_has_uri();
}
inline void PrinterSpecifics::clear_uri() {
  uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PrinterSpecifics::uri() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.uri)
}
inline std::string* PrinterSpecifics::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.uri)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_uri() const {
  return uri_.Get();
}
inline void PrinterSpecifics::_internal_set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  uri_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000020u;
  return uri_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_uri() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.uri)
}

// optional string uuid = 7;
inline bool PrinterSpecifics::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_uuid() const {
  return _internal_has_uuid();
}
inline void PrinterSpecifics::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PrinterSpecifics::uuid() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_uuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.uuid)
}
inline std::string* PrinterSpecifics::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.uuid)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_uuid() const {
  return uuid_.Get();
}
inline void PrinterSpecifics::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000040u;
  return uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_uuid() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.uuid)
}

// optional bytes ppd = 8 [deprecated = true];
inline bool PrinterSpecifics::_internal_has_ppd() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_ppd() const {
  return _internal_has_ppd();
}
inline void PrinterSpecifics::clear_ppd() {
  ppd_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PrinterSpecifics::ppd() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.ppd)
  return _internal_ppd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_ppd(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 ppd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.ppd)
}
inline std::string* PrinterSpecifics::mutable_ppd() {
  std::string* _s = _internal_mutable_ppd();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.ppd)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_ppd() const {
  return ppd_.Get();
}
inline void PrinterSpecifics::_internal_set_ppd(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  ppd_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_ppd() {
  _has_bits_[0] |= 0x00000080u;
  return ppd_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_ppd() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.ppd)
  if (!_internal_has_ppd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = ppd_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ppd_.IsDefault()) {
    ppd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_ppd(std::string* ppd) {
  if (ppd != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  ppd_.SetAllocated(ppd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ppd_.IsDefault()) {
    ppd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.ppd)
}

// optional .sync_pb.PrinterPPDReference ppd_reference = 9;
inline bool PrinterSpecifics::_internal_has_ppd_reference() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || ppd_reference_ != nullptr);
  return value;
}
inline bool PrinterSpecifics::has_ppd_reference() const {
  return _internal_has_ppd_reference();
}
inline void PrinterSpecifics::clear_ppd_reference() {
  if (ppd_reference_ != nullptr) ppd_reference_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::sync_pb::PrinterPPDReference& PrinterSpecifics::_internal_ppd_reference() const {
  const ::sync_pb::PrinterPPDReference* p = ppd_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PrinterPPDReference&>(
      ::sync_pb::_PrinterPPDReference_default_instance_);
}
inline const ::sync_pb::PrinterPPDReference& PrinterSpecifics::ppd_reference() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.ppd_reference)
  return _internal_ppd_reference();
}
inline void PrinterSpecifics::unsafe_arena_set_allocated_ppd_reference(
    ::sync_pb::PrinterPPDReference* ppd_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ppd_reference_);
  }
  ppd_reference_ = ppd_reference;
  if (ppd_reference) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PrinterSpecifics.ppd_reference)
}
inline ::sync_pb::PrinterPPDReference* PrinterSpecifics::release_ppd_reference() {
  _has_bits_[0] &= ~0x00000400u;
  ::sync_pb::PrinterPPDReference* temp = ppd_reference_;
  ppd_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PrinterPPDReference* PrinterSpecifics::unsafe_arena_release_ppd_reference() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.ppd_reference)
  _has_bits_[0] &= ~0x00000400u;
  ::sync_pb::PrinterPPDReference* temp = ppd_reference_;
  ppd_reference_ = nullptr;
  return temp;
}
inline ::sync_pb::PrinterPPDReference* PrinterSpecifics::_internal_mutable_ppd_reference() {
  _has_bits_[0] |= 0x00000400u;
  if (ppd_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PrinterPPDReference>(GetArenaForAllocation());
    ppd_reference_ = p;
  }
  return ppd_reference_;
}
inline ::sync_pb::PrinterPPDReference* PrinterSpecifics::mutable_ppd_reference() {
  ::sync_pb::PrinterPPDReference* _msg = _internal_mutable_ppd_reference();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.ppd_reference)
  return _msg;
}
inline void PrinterSpecifics::set_allocated_ppd_reference(::sync_pb::PrinterPPDReference* ppd_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ppd_reference_;
  }
  if (ppd_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ppd_reference);
    if (message_arena != submessage_arena) {
      ppd_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ppd_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  ppd_reference_ = ppd_reference;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.ppd_reference)
}

// optional int64 updated_timestamp = 10;
inline bool PrinterSpecifics::_internal_has_updated_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_updated_timestamp() const {
  return _internal_has_updated_timestamp();
}
inline void PrinterSpecifics::clear_updated_timestamp() {
  updated_timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000800u;
}
inline int64_t PrinterSpecifics::_internal_updated_timestamp() const {
  return updated_timestamp_;
}
inline int64_t PrinterSpecifics::updated_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.updated_timestamp)
  return _internal_updated_timestamp();
}
inline void PrinterSpecifics::_internal_set_updated_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000800u;
  updated_timestamp_ = value;
}
inline void PrinterSpecifics::set_updated_timestamp(int64_t value) {
  _internal_set_updated_timestamp(value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.updated_timestamp)
}

// optional string make_and_model = 11;
inline bool PrinterSpecifics::_internal_has_make_and_model() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_make_and_model() const {
  return _internal_has_make_and_model();
}
inline void PrinterSpecifics::clear_make_and_model() {
  make_and_model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PrinterSpecifics::make_and_model() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.make_and_model)
  return _internal_make_and_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_make_and_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 make_and_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.make_and_model)
}
inline std::string* PrinterSpecifics::mutable_make_and_model() {
  std::string* _s = _internal_mutable_make_and_model();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.make_and_model)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_make_and_model() const {
  return make_and_model_.Get();
}
inline void PrinterSpecifics::_internal_set_make_and_model(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  make_and_model_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_make_and_model() {
  _has_bits_[0] |= 0x00000100u;
  return make_and_model_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_make_and_model() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.make_and_model)
  if (!_internal_has_make_and_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = make_and_model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (make_and_model_.IsDefault()) {
    make_and_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_make_and_model(std::string* make_and_model) {
  if (make_and_model != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  make_and_model_.SetAllocated(make_and_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (make_and_model_.IsDefault()) {
    make_and_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.make_and_model)
}

// optional string print_server_uri = 12;
inline bool PrinterSpecifics::_internal_has_print_server_uri() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PrinterSpecifics::has_print_server_uri() const {
  return _internal_has_print_server_uri();
}
inline void PrinterSpecifics::clear_print_server_uri() {
  print_server_uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& PrinterSpecifics::print_server_uri() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.print_server_uri)
  return _internal_print_server_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrinterSpecifics::set_print_server_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 print_server_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.print_server_uri)
}
inline std::string* PrinterSpecifics::mutable_print_server_uri() {
  std::string* _s = _internal_mutable_print_server_uri();
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.print_server_uri)
  return _s;
}
inline const std::string& PrinterSpecifics::_internal_print_server_uri() const {
  return print_server_uri_.Get();
}
inline void PrinterSpecifics::_internal_set_print_server_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  print_server_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::_internal_mutable_print_server_uri() {
  _has_bits_[0] |= 0x00000200u;
  return print_server_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* PrinterSpecifics::release_print_server_uri() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.print_server_uri)
  if (!_internal_has_print_server_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = print_server_uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (print_server_uri_.IsDefault()) {
    print_server_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrinterSpecifics::set_allocated_print_server_uri(std::string* print_server_uri) {
  if (print_server_uri != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  print_server_uri_.SetAllocated(print_server_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (print_server_uri_.IsDefault()) {
    print_server_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.print_server_uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fprinter_5fspecifics_2eproto
