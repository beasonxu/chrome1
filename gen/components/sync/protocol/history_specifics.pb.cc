// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/history_specifics.proto

#include "components/sync/protocol/history_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR HistorySpecifics_RedirectEntry::HistorySpecifics_RedirectEntry(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , originator_visit_id_(int64_t{0})
  , hidden_(false)
  , redirect_type_(1)
{}
struct HistorySpecifics_RedirectEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistorySpecifics_RedirectEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistorySpecifics_RedirectEntryDefaultTypeInternal() {}
  union {
    HistorySpecifics_RedirectEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistorySpecifics_RedirectEntryDefaultTypeInternal _HistorySpecifics_RedirectEntry_default_instance_;
PROTOBUF_CONSTEXPR HistorySpecifics_PageTransition::HistorySpecifics_PageTransition(
    ::_pbi::ConstantInitialized)
  : core_transition_(0)

  , blocked_(false)
  , forward_back_(false)
  , from_address_bar_(false)
  , home_page_(false){}
struct HistorySpecifics_PageTransitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistorySpecifics_PageTransitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistorySpecifics_PageTransitionDefaultTypeInternal() {}
  union {
    HistorySpecifics_PageTransition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistorySpecifics_PageTransitionDefaultTypeInternal _HistorySpecifics_PageTransition_default_instance_;
PROTOBUF_CONSTEXPR HistorySpecifics::HistorySpecifics(
    ::_pbi::ConstantInitialized)
  : redirect_entries_()
  , originator_cache_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_transition_(nullptr)
  , visit_time_windows_epoch_micros_(int64_t{0})
  , originator_referring_visit_id_(int64_t{0})
  , originator_opener_visit_id_(int64_t{0})
  , visit_duration_micros_(int64_t{0}){}
struct HistorySpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistorySpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistorySpecificsDefaultTypeInternal() {}
  union {
    HistorySpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistorySpecificsDefaultTypeInternal _HistorySpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class HistorySpecifics_RedirectEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<HistorySpecifics_RedirectEntry>()._has_bits_);
  static void set_has_originator_visit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_redirect_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

HistorySpecifics_RedirectEntry::HistorySpecifics_RedirectEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.HistorySpecifics.RedirectEntry)
}
HistorySpecifics_RedirectEntry::HistorySpecifics_RedirectEntry(const HistorySpecifics_RedirectEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  ::memcpy(&originator_visit_id_, &from.originator_visit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&redirect_type_) -
    reinterpret_cast<char*>(&originator_visit_id_)) + sizeof(redirect_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistorySpecifics.RedirectEntry)
}

inline void HistorySpecifics_RedirectEntry::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&originator_visit_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&originator_visit_id_)) + sizeof(hidden_));
redirect_type_ = 1;
}

HistorySpecifics_RedirectEntry::~HistorySpecifics_RedirectEntry() {
  // @@protoc_insertion_point(destructor:sync_pb.HistorySpecifics.RedirectEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistorySpecifics_RedirectEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  title_.Destroy();
}

void HistorySpecifics_RedirectEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistorySpecifics_RedirectEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistorySpecifics.RedirectEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&originator_visit_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hidden_) -
        reinterpret_cast<char*>(&originator_visit_id_)) + sizeof(hidden_));
    redirect_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HistorySpecifics_RedirectEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 originator_visit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_originator_visit_id(&has_bits);
          originator_visit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_PageTransitionRedirectType_IsValid(val))) {
            _internal_set_redirect_type(static_cast<::sync_pb::SyncEnums_PageTransitionRedirectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistorySpecifics_RedirectEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.HistorySpecifics.RedirectEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 originator_visit_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_originator_visit_id(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional bool hidden = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_hidden(), target);
  }

  // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_redirect_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.HistorySpecifics.RedirectEntry)
  return target;
}

size_t HistorySpecifics_RedirectEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistorySpecifics.RedirectEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional int64 originator_visit_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originator_visit_id());
    }

    // optional bool hidden = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_redirect_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistorySpecifics_RedirectEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HistorySpecifics_RedirectEntry*>(
      &from));
}

void HistorySpecifics_RedirectEntry::MergeFrom(const HistorySpecifics_RedirectEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistorySpecifics.RedirectEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      originator_visit_id_ = from.originator_visit_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hidden_ = from.hidden_;
    }
    if (cached_has_bits & 0x00000010u) {
      redirect_type_ = from.redirect_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HistorySpecifics_RedirectEntry::CopyFrom(const HistorySpecifics_RedirectEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistorySpecifics.RedirectEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySpecifics_RedirectEntry::IsInitialized() const {
  return true;
}

void HistorySpecifics_RedirectEntry::InternalSwap(HistorySpecifics_RedirectEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistorySpecifics_RedirectEntry, hidden_)
      + sizeof(HistorySpecifics_RedirectEntry::hidden_)
      - PROTOBUF_FIELD_OFFSET(HistorySpecifics_RedirectEntry, originator_visit_id_)>(
          reinterpret_cast<char*>(&originator_visit_id_),
          reinterpret_cast<char*>(&other->originator_visit_id_));
  swap(redirect_type_, other->redirect_type_);
}

std::string HistorySpecifics_RedirectEntry::GetTypeName() const {
  return "sync_pb.HistorySpecifics.RedirectEntry";
}


// ===================================================================

class HistorySpecifics_PageTransition::_Internal {
 public:
  using HasBits = decltype(std::declval<HistorySpecifics_PageTransition>()._has_bits_);
  static void set_has_core_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blocked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forward_back(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_home_page(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

HistorySpecifics_PageTransition::HistorySpecifics_PageTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.HistorySpecifics.PageTransition)
}
HistorySpecifics_PageTransition::HistorySpecifics_PageTransition(const HistorySpecifics_PageTransition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&core_transition_, &from.core_transition_,
    static_cast<size_t>(reinterpret_cast<char*>(&home_page_) -
    reinterpret_cast<char*>(&core_transition_)) + sizeof(home_page_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistorySpecifics.PageTransition)
}

inline void HistorySpecifics_PageTransition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&core_transition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&home_page_) -
    reinterpret_cast<char*>(&core_transition_)) + sizeof(home_page_));
}

HistorySpecifics_PageTransition::~HistorySpecifics_PageTransition() {
  // @@protoc_insertion_point(destructor:sync_pb.HistorySpecifics.PageTransition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistorySpecifics_PageTransition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HistorySpecifics_PageTransition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistorySpecifics_PageTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistorySpecifics.PageTransition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&core_transition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&home_page_) -
        reinterpret_cast<char*>(&core_transition_)) + sizeof(home_page_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HistorySpecifics_PageTransition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.SyncEnums.PageTransition core_transition = 1 [default = LINK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_PageTransition_IsValid(val))) {
            _internal_set_core_transition(static_cast<::sync_pb::SyncEnums_PageTransition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool blocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_blocked(&has_bits);
          blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool forward_back = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_forward_back(&has_bits);
          forward_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_address_bar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_from_address_bar(&has_bits);
          from_address_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool home_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_home_page(&has_bits);
          home_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistorySpecifics_PageTransition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.HistorySpecifics.PageTransition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SyncEnums.PageTransition core_transition = 1 [default = LINK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_core_transition(), target);
  }

  // optional bool blocked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_blocked(), target);
  }

  // optional bool forward_back = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_forward_back(), target);
  }

  // optional bool from_address_bar = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_from_address_bar(), target);
  }

  // optional bool home_page = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_home_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.HistorySpecifics.PageTransition)
  return target;
}

size_t HistorySpecifics_PageTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistorySpecifics.PageTransition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .sync_pb.SyncEnums.PageTransition core_transition = 1 [default = LINK];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_core_transition());
    }

    // optional bool blocked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool forward_back = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool from_address_bar = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool home_page = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistorySpecifics_PageTransition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HistorySpecifics_PageTransition*>(
      &from));
}

void HistorySpecifics_PageTransition::MergeFrom(const HistorySpecifics_PageTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistorySpecifics.PageTransition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      core_transition_ = from.core_transition_;
    }
    if (cached_has_bits & 0x00000002u) {
      blocked_ = from.blocked_;
    }
    if (cached_has_bits & 0x00000004u) {
      forward_back_ = from.forward_back_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_address_bar_ = from.from_address_bar_;
    }
    if (cached_has_bits & 0x00000010u) {
      home_page_ = from.home_page_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HistorySpecifics_PageTransition::CopyFrom(const HistorySpecifics_PageTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistorySpecifics.PageTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySpecifics_PageTransition::IsInitialized() const {
  return true;
}

void HistorySpecifics_PageTransition::InternalSwap(HistorySpecifics_PageTransition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistorySpecifics_PageTransition, home_page_)
      + sizeof(HistorySpecifics_PageTransition::home_page_)
      - PROTOBUF_FIELD_OFFSET(HistorySpecifics_PageTransition, core_transition_)>(
          reinterpret_cast<char*>(&core_transition_),
          reinterpret_cast<char*>(&other->core_transition_));
}

std::string HistorySpecifics_PageTransition::GetTypeName() const {
  return "sync_pb.HistorySpecifics.PageTransition";
}


// ===================================================================

class HistorySpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<HistorySpecifics>()._has_bits_);
  static void set_has_visit_time_windows_epoch_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_originator_cache_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::HistorySpecifics_PageTransition& page_transition(const HistorySpecifics* msg);
  static void set_has_page_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_originator_referring_visit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_originator_opener_visit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_visit_duration_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::sync_pb::HistorySpecifics_PageTransition&
HistorySpecifics::_Internal::page_transition(const HistorySpecifics* msg) {
  return *msg->page_transition_;
}
HistorySpecifics::HistorySpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  redirect_entries_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.HistorySpecifics)
}
HistorySpecifics::HistorySpecifics(const HistorySpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      redirect_entries_(from.redirect_entries_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  originator_cache_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    originator_cache_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originator_cache_guid()) {
    originator_cache_guid_.Set(from._internal_originator_cache_guid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_page_transition()) {
    page_transition_ = new ::sync_pb::HistorySpecifics_PageTransition(*from.page_transition_);
  } else {
    page_transition_ = nullptr;
  }
  ::memcpy(&visit_time_windows_epoch_micros_, &from.visit_time_windows_epoch_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&visit_duration_micros_) -
    reinterpret_cast<char*>(&visit_time_windows_epoch_micros_)) + sizeof(visit_duration_micros_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistorySpecifics)
}

inline void HistorySpecifics::SharedCtor() {
originator_cache_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  originator_cache_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_transition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visit_duration_micros_) -
    reinterpret_cast<char*>(&page_transition_)) + sizeof(visit_duration_micros_));
}

HistorySpecifics::~HistorySpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.HistorySpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistorySpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  originator_cache_guid_.Destroy();
  if (this != internal_default_instance()) delete page_transition_;
}

void HistorySpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistorySpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistorySpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redirect_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      originator_cache_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(page_transition_ != nullptr);
      page_transition_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&visit_time_windows_epoch_micros_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visit_duration_micros_) -
        reinterpret_cast<char*>(&visit_time_windows_epoch_micros_)) + sizeof(visit_duration_micros_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HistorySpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 visit_time_windows_epoch_micros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_visit_time_windows_epoch_micros(&has_bits);
          visit_time_windows_epoch_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string originator_cache_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_originator_cache_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.HistorySpecifics.RedirectEntry redirect_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redirect_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.HistorySpecifics.PageTransition page_transition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_transition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 originator_referring_visit_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_originator_referring_visit_id(&has_bits);
          originator_referring_visit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 originator_opener_visit_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_originator_opener_visit_id(&has_bits);
          originator_opener_visit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 visit_duration_micros = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_visit_duration_micros(&has_bits);
          visit_duration_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistorySpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.HistorySpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 visit_time_windows_epoch_micros = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_visit_time_windows_epoch_micros(), target);
  }

  // optional string originator_cache_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_originator_cache_guid(), target);
  }

  // repeated .sync_pb.HistorySpecifics.RedirectEntry redirect_entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_redirect_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_redirect_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .sync_pb.HistorySpecifics.PageTransition page_transition = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::page_transition(this),
        _Internal::page_transition(this).GetCachedSize(), target, stream);
  }

  // optional int64 originator_referring_visit_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_originator_referring_visit_id(), target);
  }

  // optional int64 originator_opener_visit_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_originator_opener_visit_id(), target);
  }

  // optional int64 visit_duration_micros = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_visit_duration_micros(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.HistorySpecifics)
  return target;
}

size_t HistorySpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistorySpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.HistorySpecifics.RedirectEntry redirect_entries = 3;
  total_size += 1UL * this->_internal_redirect_entries_size();
  for (const auto& msg : this->redirect_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string originator_cache_guid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originator_cache_guid());
    }

    // optional .sync_pb.HistorySpecifics.PageTransition page_transition = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *page_transition_);
    }

    // optional int64 visit_time_windows_epoch_micros = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_visit_time_windows_epoch_micros());
    }

    // optional int64 originator_referring_visit_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originator_referring_visit_id());
    }

    // optional int64 originator_opener_visit_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originator_opener_visit_id());
    }

    // optional int64 visit_duration_micros = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_visit_duration_micros());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistorySpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HistorySpecifics*>(
      &from));
}

void HistorySpecifics::MergeFrom(const HistorySpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistorySpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  redirect_entries_.MergeFrom(from.redirect_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_originator_cache_guid(from._internal_originator_cache_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_page_transition()->::sync_pb::HistorySpecifics_PageTransition::MergeFrom(from._internal_page_transition());
    }
    if (cached_has_bits & 0x00000004u) {
      visit_time_windows_epoch_micros_ = from.visit_time_windows_epoch_micros_;
    }
    if (cached_has_bits & 0x00000008u) {
      originator_referring_visit_id_ = from.originator_referring_visit_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      originator_opener_visit_id_ = from.originator_opener_visit_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      visit_duration_micros_ = from.visit_duration_micros_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HistorySpecifics::CopyFrom(const HistorySpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistorySpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySpecifics::IsInitialized() const {
  return true;
}

void HistorySpecifics::InternalSwap(HistorySpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  redirect_entries_.InternalSwap(&other->redirect_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &originator_cache_guid_, lhs_arena,
      &other->originator_cache_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistorySpecifics, visit_duration_micros_)
      + sizeof(HistorySpecifics::visit_duration_micros_)
      - PROTOBUF_FIELD_OFFSET(HistorySpecifics, page_transition_)>(
          reinterpret_cast<char*>(&page_transition_),
          reinterpret_cast<char*>(&other->page_transition_));
}

std::string HistorySpecifics::GetTypeName() const {
  return "sync_pb.HistorySpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::HistorySpecifics_RedirectEntry*
Arena::CreateMaybeMessage< ::sync_pb::HistorySpecifics_RedirectEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::HistorySpecifics_RedirectEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::HistorySpecifics_PageTransition*
Arena::CreateMaybeMessage< ::sync_pb::HistorySpecifics_PageTransition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::HistorySpecifics_PageTransition >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::HistorySpecifics*
Arena::CreateMaybeMessage< ::sync_pb::HistorySpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::HistorySpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
