// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_memory_url_index_cache.proto

#include "in_memory_url_index_cache.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace in_memory_url_index {
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem(
    ::_pbi::ConstantInitialized)
  : word_()
  , word_count_(0u){}
struct InMemoryURLIndexCacheItem_WordListItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordListItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_WordListItemDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_WordListItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_WordListItemDefaultTypeInternal _InMemoryURLIndexCacheItem_WordListItem_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(
    ::_pbi::ConstantInitialized)
  : word_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , word_id_(0){}
struct InMemoryURLIndexCacheItem_WordMapItem_WordMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordMapItem_WordMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_WordMapItem_WordMapEntryDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_WordMapItem_WordMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem(
    ::_pbi::ConstantInitialized)
  : word_map_entry_()
  , item_count_(0u){}
struct InMemoryURLIndexCacheItem_WordMapItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordMapItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_WordMapItemDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_WordMapItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_WordMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_WordMapItem_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(
    ::_pbi::ConstantInitialized)
  : word_id_()
  , _word_id_cached_byte_size_(0)
  , item_count_(0u)
  , char_16_(0){}
struct InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntryDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem(
    ::_pbi::ConstantInitialized)
  : char_word_map_entry_()
  , item_count_(0u){}
struct InMemoryURLIndexCacheItem_CharWordMapItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_CharWordMapItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_CharWordMapItemDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_CharWordMapItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_CharWordMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(
    ::_pbi::ConstantInitialized)
  : history_id_()
  , _history_id_cached_byte_size_(0)
  , item_count_(0u)
  , word_id_(0){}
struct InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntryDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(
    ::_pbi::ConstantInitialized)
  : word_id_history_map_entry_()
  , item_count_(0u){}
struct InMemoryURLIndexCacheItem_WordIDHistoryMapItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordIDHistoryMapItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_WordIDHistoryMapItemDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_WordIDHistoryMapItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_WordIDHistoryMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(
    ::_pbi::ConstantInitialized)
  : visit_time_(int64_t{0})
  , transition_type_(uint64_t{0u}){}
struct InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfoDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfoDefaultTypeInternal _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(
    ::_pbi::ConstantInitialized)
  : visits_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , history_id_(int64_t{0})
  , visit_count_(0)
  , typed_count_(0)
  , last_visit_(int64_t{0}){}
struct InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntryDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem(
    ::_pbi::ConstantInitialized)
  : history_info_map_entry_()
  , item_count_(0u){}
struct InMemoryURLIndexCacheItem_HistoryInfoMapItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_HistoryInfoMapItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_HistoryInfoMapItemDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_HistoryInfoMapItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_HistoryInfoMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(
    ::_pbi::ConstantInitialized)
  : url_word_starts_()
  , _url_word_starts_cached_byte_size_(0)
  , title_word_starts_()
  , _title_word_starts_cached_byte_size_(0)
  , history_id_(int64_t{0}){}
struct InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntryDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem(
    ::_pbi::ConstantInitialized)
  : word_starts_map_entry_()
  , item_count_(0u){}
struct InMemoryURLIndexCacheItem_WordStartsMapItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem_WordStartsMapItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItem_WordStartsMapItemDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem_WordStartsMapItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItem_WordStartsMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_;
PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem(
    ::_pbi::ConstantInitialized)
  : word_list_(nullptr)
  , word_map_(nullptr)
  , char_word_map_(nullptr)
  , word_id_history_map_(nullptr)
  , history_info_map_(nullptr)
  , word_starts_map_(nullptr)
  , last_rebuild_timestamp_(int64_t{0})
  , version_(0)
  , history_item_count_(0){}
struct InMemoryURLIndexCacheItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InMemoryURLIndexCacheItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InMemoryURLIndexCacheItemDefaultTypeInternal() {}
  union {
    InMemoryURLIndexCacheItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InMemoryURLIndexCacheItemDefaultTypeInternal _InMemoryURLIndexCacheItem_default_instance_;
}  // namespace in_memory_url_index
namespace in_memory_url_index {

// ===================================================================

class InMemoryURLIndexCacheItem_WordListItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordListItem>()._has_bits_);
  static void set_has_word_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  word_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}
InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem(const InMemoryURLIndexCacheItem_WordListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      word_(from.word_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  word_count_ = from.word_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}

inline void InMemoryURLIndexCacheItem_WordListItem::SharedCtor() {
word_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordListItem::~InMemoryURLIndexCacheItem_WordListItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_WordListItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_WordListItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_WordListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.Clear();
  word_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_WordListItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 word_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_word_count(&has_bits);
          word_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string word = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_word();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_WordListItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 word_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_word_count(), target);
  }

  // repeated string word = 2;
  for (int i = 0, n = this->_internal_word_size(); i < n; i++) {
    const auto& s = this->_internal_word(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  return target;
}

size_t InMemoryURLIndexCacheItem_WordListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  size_t total_size = 0;

  // required uint32 word_count = 1;
  if (_internal_has_word_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_word_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string word = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(word_.size());
  for (int i = 0, n = word_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      word_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordListItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_WordListItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordListItem::MergeFrom(const InMemoryURLIndexCacheItem_WordListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  word_.MergeFrom(from.word_);
  if (from._internal_has_word_count()) {
    _internal_set_word_count(from._internal_word_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_WordListItem::CopyFrom(const InMemoryURLIndexCacheItem_WordListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordListItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordListItem::InternalSwap(InMemoryURLIndexCacheItem_WordListItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_.InternalSwap(&other->word_);
  swap(word_count_, other->word_count_);
}

std::string InMemoryURLIndexCacheItem_WordListItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem";
}


// ===================================================================

class InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry>()._has_bits_);
  static void set_has_word(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_word_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}
InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  word_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    word_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_word()) {
    word_.Set(from._internal_word(), 
      GetArenaForAllocation());
  }
  word_id_ = from.word_id_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}

inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SharedCtor() {
word_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  word_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
word_id_ = 0;
}

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::~InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  word_.Destroy();
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    word_.ClearNonDefaultToEmpty();
  }
  word_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_word();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 word_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_word_id(&has_bits);
          word_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string word = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_word(), target);
  }

  // required int32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_word_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  return target;
}

size_t InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  size_t total_size = 0;

  if (_internal_has_word()) {
    // required string word = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }

  if (_internal_has_word_id()) {
    // required int32 word_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_word_id());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string word = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());

    // required int32 word_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_word_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_word(from._internal_word());
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &word_, lhs_arena,
      &other->word_, rhs_arena
  );
  swap(word_id_, other->word_id_);
}

std::string InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry";
}


// ===================================================================

class InMemoryURLIndexCacheItem_WordMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  word_map_entry_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}
InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem(const InMemoryURLIndexCacheItem_WordMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      word_map_entry_(from.word_map_entry_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}

inline void InMemoryURLIndexCacheItem_WordMapItem::SharedCtor() {
item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordMapItem::~InMemoryURLIndexCacheItem_WordMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_WordMapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_WordMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_WordMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_WordMapItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_word_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_WordMapItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_count(), target);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_word_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_word_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  return target;
}

size_t InMemoryURLIndexCacheItem_WordMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  size_t total_size = 0;

  // required uint32 item_count = 1;
  if (_internal_has_item_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  total_size += 1UL * this->_internal_word_map_entry_size();
  for (const auto& msg : this->word_map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_WordMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  word_map_entry_.MergeFrom(from.word_map_entry_);
  if (from._internal_has_item_count()) {
    _internal_set_item_count(from._internal_item_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_WordMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordMapItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(word_map_entry_))
    return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordMapItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_map_entry_.InternalSwap(&other->word_map_entry_);
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_WordMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem";
}


// ===================================================================

class InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_char_16(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  word_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      word_id_(from.word_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&item_count_, &from.item_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_16_) -
    reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}

inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&char_16_) -
    reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
}

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::~InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&char_16_) -
        reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 char_16 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_char_16(&has_bits);
          char_16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 word_id = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_word_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_word_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_count(), target);
  }

  // required int32 char_16 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_char_16(), target);
  }

  // repeated int32 word_id = 3 [packed = true];
  {
    int byte_size = _word_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_word_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  return target;
}

size_t InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  size_t total_size = 0;

  if (_internal_has_item_count()) {
    // required uint32 item_count = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }

  if (_internal_has_char_16()) {
    // required int32 char_16 = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_char_16());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 item_count = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());

    // required int32 char_16 = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_char_16());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 word_id = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->word_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _word_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  word_id_.MergeFrom(from.word_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_count_ = from.item_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      char_16_ = from.char_16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_id_.InternalSwap(&other->word_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry, char_16_)
      + sizeof(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::char_16_)
      - PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry, item_count_)>(
          reinterpret_cast<char*>(&item_count_),
          reinterpret_cast<char*>(&other->item_count_));
}

std::string InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry";
}


// ===================================================================

class InMemoryURLIndexCacheItem_CharWordMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_CharWordMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  char_word_map_entry_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}
InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem(const InMemoryURLIndexCacheItem_CharWordMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      char_word_map_entry_(from.char_word_map_entry_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}

inline void InMemoryURLIndexCacheItem_CharWordMapItem::SharedCtor() {
item_count_ = 0u;
}

InMemoryURLIndexCacheItem_CharWordMapItem::~InMemoryURLIndexCacheItem_CharWordMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_CharWordMapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_CharWordMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_word_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_CharWordMapItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_char_word_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_CharWordMapItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_count(), target);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_char_word_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_char_word_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  return target;
}

size_t InMemoryURLIndexCacheItem_CharWordMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  size_t total_size = 0;

  // required uint32 item_count = 1;
  if (_internal_has_item_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  total_size += 1UL * this->_internal_char_word_map_entry_size();
  for (const auto& msg : this->char_word_map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_CharWordMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_CharWordMapItem::MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  char_word_map_entry_.MergeFrom(from.char_word_map_entry_);
  if (from._internal_has_item_count()) {
    _internal_set_item_count(from._internal_item_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_CharWordMapItem::CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_CharWordMapItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(char_word_map_entry_))
    return false;
  return true;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  char_word_map_entry_.InternalSwap(&other->char_word_map_entry_);
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_CharWordMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem";
}


// ===================================================================

class InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_word_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  history_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      history_id_(from.history_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&item_count_, &from.item_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&word_id_) -
    reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}

inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&word_id_) -
    reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::~InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&word_id_) -
        reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 word_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_word_id(&has_bits);
          word_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 history_id = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_history_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_history_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_count(), target);
  }

  // required int32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_word_id(), target);
  }

  // repeated int64 history_id = 3 [packed = true];
  {
    int byte_size = _history_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_history_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  return target;
}

size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  size_t total_size = 0;

  if (_internal_has_item_count()) {
    // required uint32 item_count = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }

  if (_internal_has_word_id()) {
    // required int32 word_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_word_id());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 item_count = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());

    // required int32 word_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_word_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 history_id = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->history_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _history_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  history_id_.MergeFrom(from.history_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_count_ = from.item_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  history_id_.InternalSwap(&other->history_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry, word_id_)
      + sizeof(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::word_id_)
      - PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry, item_count_)>(
          reinterpret_cast<char*>(&item_count_),
          reinterpret_cast<char*>(&other->item_count_));
}

std::string InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry";
}


// ===================================================================

class InMemoryURLIndexCacheItem_WordIDHistoryMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordIDHistoryMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  word_id_history_map_entry_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      word_id_history_map_entry_(from.word_id_history_map_entry_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}

inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SharedCtor() {
item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::~InMemoryURLIndexCacheItem_WordIDHistoryMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_id_history_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_word_id_history_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_count(), target);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_word_id_history_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_word_id_history_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  return target;
}

size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  size_t total_size = 0;

  // required uint32 item_count = 1;
  if (_internal_has_item_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  total_size += 1UL * this->_internal_word_id_history_map_entry_size();
  for (const auto& msg : this->word_id_history_map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  word_id_history_map_entry_.MergeFrom(from.word_id_history_map_entry_);
  if (from._internal_has_item_count()) {
    _internal_set_item_count(from._internal_item_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(word_id_history_map_entry_))
    return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_id_history_map_entry_.InternalSwap(&other->word_id_history_map_entry_);
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_WordIDHistoryMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem";
}


// ===================================================================

class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo>()._has_bits_);
  static void set_has_visit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transition_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&visit_time_, &from.visit_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&transition_type_) -
    reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}

inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&visit_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transition_type_) -
    reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&visit_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transition_type_) -
        reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 visit_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_visit_time(&has_bits);
          visit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 transition_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_transition_type(&has_bits);
          transition_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 visit_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_visit_time(), target);
  }

  // required uint64 transition_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_transition_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  return target;
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  size_t total_size = 0;

  if (_internal_has_visit_time()) {
    // required int64 visit_time = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_visit_time());
  }

  if (_internal_has_transition_type()) {
    // required uint64 transition_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transition_type());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 visit_time = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_visit_time());

    // required uint64 transition_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transition_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo*>(
      &from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      visit_time_ = from.visit_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      transition_type_ = from.transition_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo, transition_type_)
      + sizeof(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::transition_type_)
      - PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo, visit_time_)>(
          reinterpret_cast<char*>(&visit_time_),
          reinterpret_cast<char*>(&other->visit_time_));
}

std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo";
}


// ===================================================================

class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry>()._has_bits_);
  static void set_has_history_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_typed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_visit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003d) ^ 0x0000003d) != 0;
  }
};

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  visits_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      visits_(from.visits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  ::memcpy(&history_id_, &from.history_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_visit_) -
    reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}

inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&history_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_visit_) -
    reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  title_.Destroy();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visits_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&history_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_visit_) -
        reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 history_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_history_id(&has_bits);
          history_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 visit_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_visit_count(&has_bits);
          visit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 typed_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_typed_count(&has_bits);
          typed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 last_visit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_visit(&has_bits);
          last_visit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_visits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 history_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_history_id(), target);
  }

  // required int32 visit_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_visit_count(), target);
  }

  // required int32 typed_count = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_typed_count(), target);
  }

  // required int64 last_visit = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_visit(), target);
  }

  // required string url = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title(), target);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_visits_size()); i < n; i++) {
    const auto& repfield = this->_internal_visits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  return target;
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  size_t total_size = 0;

  if (_internal_has_url()) {
    // required string url = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_history_id()) {
    // required int64 history_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_history_id());
  }

  if (_internal_has_visit_count()) {
    // required int32 visit_count = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_visit_count());
  }

  if (_internal_has_typed_count()) {
    // required int32 typed_count = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typed_count());
  }

  if (_internal_has_last_visit()) {
    // required int64 last_visit = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_visit());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required string url = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required int64 history_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_history_id());

    // required int32 visit_count = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_visit_count());

    // required int32 typed_count = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typed_count());

    // required int64 last_visit = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_visit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  total_size += 1UL * this->_internal_visits_size();
  for (const auto& msg : this->visits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  visits_.MergeFrom(from.visits_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      history_id_ = from.history_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      visit_count_ = from.visit_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      typed_count_ = from.typed_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_visit_ = from.last_visit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(visits_))
    return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  visits_.InternalSwap(&other->visits_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry, last_visit_)
      + sizeof(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::last_visit_)
      - PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry, history_id_)>(
          reinterpret_cast<char*>(&history_id_),
          reinterpret_cast<char*>(&other->history_id_));
}

std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry";
}


// ===================================================================

class InMemoryURLIndexCacheItem_HistoryInfoMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_HistoryInfoMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  history_info_map_entry_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      history_info_map_entry_(from.history_info_map_entry_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}

inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SharedCtor() {
item_count_ = 0u;
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem::~InMemoryURLIndexCacheItem_HistoryInfoMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_info_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_HistoryInfoMapItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history_info_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_HistoryInfoMapItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_count(), target);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_history_info_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_history_info_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  return target;
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  size_t total_size = 0;

  // required uint32 item_count = 1;
  if (_internal_has_item_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  total_size += 1UL * this->_internal_history_info_map_entry_size();
  for (const auto& msg : this->history_info_map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  history_info_map_entry_.MergeFrom(from.history_info_map_entry_);
  if (from._internal_has_item_count()) {
    _internal_set_item_count(from._internal_item_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(history_info_map_entry_))
    return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  history_info_map_entry_.InternalSwap(&other->history_info_map_entry_);
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem";
}


// ===================================================================

class InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry>()._has_bits_);
  static void set_has_history_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  url_word_starts_(arena),
  title_word_starts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      url_word_starts_(from.url_word_starts_),
      title_word_starts_(from.title_word_starts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  history_id_ = from.history_id_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}

inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SharedCtor() {
history_id_ = int64_t{0};
}

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::~InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_word_starts_.Clear();
  title_word_starts_.Clear();
  history_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 history_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_history_id(&has_bits);
          history_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 url_word_starts = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_url_word_starts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_url_word_starts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 title_word_starts = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_title_word_starts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_title_word_starts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 history_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_history_id(), target);
  }

  // repeated int32 url_word_starts = 2 [packed = true];
  {
    int byte_size = _url_word_starts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_url_word_starts(), byte_size, target);
    }
  }

  // repeated int32 title_word_starts = 3 [packed = true];
  {
    int byte_size = _title_word_starts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_title_word_starts(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  return target;
}

size_t InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  size_t total_size = 0;

  // required int64 history_id = 1;
  if (_internal_has_history_id()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_history_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 url_word_starts = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->url_word_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _url_word_starts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 title_word_starts = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->title_word_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _title_word_starts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  url_word_starts_.MergeFrom(from.url_word_starts_);
  title_word_starts_.MergeFrom(from.title_word_starts_);
  if (from._internal_has_history_id()) {
    _internal_set_history_id(from._internal_history_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_word_starts_.InternalSwap(&other->url_word_starts_);
  title_word_starts_.InternalSwap(&other->title_word_starts_);
  swap(history_id_, other->history_id_);
}

std::string InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry";
}


// ===================================================================

class InMemoryURLIndexCacheItem_WordStartsMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordStartsMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  word_starts_map_entry_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}
InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem(const InMemoryURLIndexCacheItem_WordStartsMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      word_starts_map_entry_(from.word_starts_map_entry_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}

inline void InMemoryURLIndexCacheItem_WordStartsMapItem::SharedCtor() {
item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordStartsMapItem::~InMemoryURLIndexCacheItem_WordStartsMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem_WordStartsMapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_starts_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem_WordStartsMapItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_word_starts_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem_WordStartsMapItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_count(), target);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_word_starts_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_word_starts_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  return target;
}

size_t InMemoryURLIndexCacheItem_WordStartsMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  size_t total_size = 0;

  // required uint32 item_count = 1;
  if (_internal_has_item_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  total_size += 1UL * this->_internal_word_starts_map_entry_size();
  for (const auto& msg : this->word_starts_map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem_WordStartsMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  word_starts_map_entry_.MergeFrom(from.word_starts_map_entry_);
  if (from._internal_has_item_count()) {
    _internal_set_item_count(from._internal_item_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(word_starts_map_entry_))
    return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_starts_map_entry_.InternalSwap(&other->word_starts_map_entry_);
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_WordStartsMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem";
}


// ===================================================================

class InMemoryURLIndexCacheItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem>()._has_bits_);
  static void set_has_last_rebuild_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_history_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem& word_list(const InMemoryURLIndexCacheItem* msg);
  static void set_has_word_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem& word_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_word_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem& char_word_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_char_word_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem& word_id_history_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_word_id_history_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem& history_info_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_history_info_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem& word_starts_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_word_starts_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000140) ^ 0x00000140) != 0;
  }
};

const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem&
InMemoryURLIndexCacheItem::_Internal::word_list(const InMemoryURLIndexCacheItem* msg) {
  return *msg->word_list_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem&
InMemoryURLIndexCacheItem::_Internal::word_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->word_map_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem&
InMemoryURLIndexCacheItem::_Internal::char_word_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->char_word_map_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem&
InMemoryURLIndexCacheItem::_Internal::word_id_history_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->word_id_history_map_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem&
InMemoryURLIndexCacheItem::_Internal::history_info_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->history_info_map_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem&
InMemoryURLIndexCacheItem::_Internal::word_starts_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->word_starts_map_;
}
InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:in_memory_url_index.InMemoryURLIndexCacheItem)
}
InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem(const InMemoryURLIndexCacheItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_word_list()) {
    word_list_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem(*from.word_list_);
  } else {
    word_list_ = nullptr;
  }
  if (from._internal_has_word_map()) {
    word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem(*from.word_map_);
  } else {
    word_map_ = nullptr;
  }
  if (from._internal_has_char_word_map()) {
    char_word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem(*from.char_word_map_);
  } else {
    char_word_map_ = nullptr;
  }
  if (from._internal_has_word_id_history_map()) {
    word_id_history_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(*from.word_id_history_map_);
  } else {
    word_id_history_map_ = nullptr;
  }
  if (from._internal_has_history_info_map()) {
    history_info_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem(*from.history_info_map_);
  } else {
    history_info_map_ = nullptr;
  }
  if (from._internal_has_word_starts_map()) {
    word_starts_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem(*from.word_starts_map_);
  } else {
    word_starts_map_ = nullptr;
  }
  ::memcpy(&last_rebuild_timestamp_, &from.last_rebuild_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&history_item_count_) -
    reinterpret_cast<char*>(&last_rebuild_timestamp_)) + sizeof(history_item_count_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem)
}

inline void InMemoryURLIndexCacheItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&word_list_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&history_item_count_) -
    reinterpret_cast<char*>(&word_list_)) + sizeof(history_item_count_));
}

InMemoryURLIndexCacheItem::~InMemoryURLIndexCacheItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InMemoryURLIndexCacheItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete word_list_;
  if (this != internal_default_instance()) delete word_map_;
  if (this != internal_default_instance()) delete char_word_map_;
  if (this != internal_default_instance()) delete word_id_history_map_;
  if (this != internal_default_instance()) delete history_info_map_;
  if (this != internal_default_instance()) delete word_starts_map_;
}

void InMemoryURLIndexCacheItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InMemoryURLIndexCacheItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(word_list_ != nullptr);
      word_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(word_map_ != nullptr);
      word_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(char_word_map_ != nullptr);
      char_word_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(word_id_history_map_ != nullptr);
      word_id_history_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(history_info_map_ != nullptr);
      history_info_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(word_starts_map_ != nullptr);
      word_starts_map_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&last_rebuild_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&last_rebuild_timestamp_)) + sizeof(version_));
  }
  history_item_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InMemoryURLIndexCacheItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 last_rebuild_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_rebuild_timestamp(&has_bits);
          last_rebuild_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 history_item_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_history_item_count(&has_bits);
          history_item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_word_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_word_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_word_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_word_id_history_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_history_info_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_word_starts_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InMemoryURLIndexCacheItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_rebuild_timestamp = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_rebuild_timestamp(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // required int32 history_item_count = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_history_item_count(), target);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::word_list(this),
        _Internal::word_list(this).GetCachedSize(), target, stream);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::word_map(this),
        _Internal::word_map(this).GetCachedSize(), target, stream);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::char_word_map(this),
        _Internal::char_word_map(this).GetCachedSize(), target, stream);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::word_id_history_map(this),
        _Internal::word_id_history_map(this).GetCachedSize(), target, stream);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::history_info_map(this),
        _Internal::history_info_map(this).GetCachedSize(), target, stream);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::word_starts_map(this),
        _Internal::word_starts_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:in_memory_url_index.InMemoryURLIndexCacheItem)
  return target;
}

size_t InMemoryURLIndexCacheItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  size_t total_size = 0;

  if (_internal_has_last_rebuild_timestamp()) {
    // required int64 last_rebuild_timestamp = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_rebuild_timestamp());
  }

  if (_internal_has_history_item_count()) {
    // required int32 history_item_count = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_history_item_count());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000140) ^ 0x00000140) == 0) {  // All required fields are present.
    // required int64 last_rebuild_timestamp = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_rebuild_timestamp());

    // required int32 history_item_count = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_history_item_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *word_list_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *word_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_word_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *word_id_history_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *history_info_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *word_starts_map_);
    }

  }
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InMemoryURLIndexCacheItem*>(
      &from));
}

void InMemoryURLIndexCacheItem::MergeFrom(const InMemoryURLIndexCacheItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_word_list()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::MergeFrom(from._internal_word_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_word_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::MergeFrom(from._internal_word_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_char_word_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::MergeFrom(from._internal_char_word_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_word_id_history_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergeFrom(from._internal_word_id_history_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_history_info_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergeFrom(from._internal_history_info_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_word_starts_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::MergeFrom(from._internal_word_starts_map());
    }
    if (cached_has_bits & 0x00000040u) {
      last_rebuild_timestamp_ = from.last_rebuild_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_history_item_count(from._internal_history_item_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InMemoryURLIndexCacheItem::CopyFrom(const InMemoryURLIndexCacheItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_word_list()) {
    if (!word_list_->IsInitialized()) return false;
  }
  if (_internal_has_word_map()) {
    if (!word_map_->IsInitialized()) return false;
  }
  if (_internal_has_char_word_map()) {
    if (!char_word_map_->IsInitialized()) return false;
  }
  if (_internal_has_word_id_history_map()) {
    if (!word_id_history_map_->IsInitialized()) return false;
  }
  if (_internal_has_history_info_map()) {
    if (!history_info_map_->IsInitialized()) return false;
  }
  if (_internal_has_word_starts_map()) {
    if (!word_starts_map_->IsInitialized()) return false;
  }
  return true;
}

void InMemoryURLIndexCacheItem::InternalSwap(InMemoryURLIndexCacheItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem, history_item_count_)
      + sizeof(InMemoryURLIndexCacheItem::history_item_count_)
      - PROTOBUF_FIELD_OFFSET(InMemoryURLIndexCacheItem, word_list_)>(
          reinterpret_cast<char*>(&word_list_),
          reinterpret_cast<char*>(&other->word_list_));
}

std::string InMemoryURLIndexCacheItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace in_memory_url_index
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem*
Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
