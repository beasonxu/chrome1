// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/power_bookmarks/core/proto/power_bookmark_meta.proto

#include "components/power_bookmarks/core/proto/power_bookmark_meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace power_bookmarks {
PROTOBUF_CONSTEXPR PowerBookmarkMeta_Tag::PowerBookmarkMeta_Tag(
    ::_pbi::ConstantInitialized)
  : display_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PowerBookmarkMeta_TagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerBookmarkMeta_TagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerBookmarkMeta_TagDefaultTypeInternal() {}
  union {
    PowerBookmarkMeta_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerBookmarkMeta_TagDefaultTypeInternal _PowerBookmarkMeta_Tag_default_instance_;
PROTOBUF_CONSTEXPR PowerBookmarkMeta_Image::PowerBookmarkMeta_Image(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PowerBookmarkMeta_ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerBookmarkMeta_ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerBookmarkMeta_ImageDefaultTypeInternal() {}
  union {
    PowerBookmarkMeta_Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerBookmarkMeta_ImageDefaultTypeInternal _PowerBookmarkMeta_Image_default_instance_;
PROTOBUF_CONSTEXPR PowerBookmarkMeta::PowerBookmarkMeta(
    ::_pbi::ConstantInitialized)
  : fallback_images_()
  , tags_()
  , lead_image_(nullptr)
  , type_(0)

  , _oneof_case_{}{}
struct PowerBookmarkMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerBookmarkMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerBookmarkMetaDefaultTypeInternal() {}
  union {
    PowerBookmarkMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerBookmarkMetaDefaultTypeInternal _PowerBookmarkMeta_default_instance_;
}  // namespace power_bookmarks
namespace power_bookmarks {
bool PowerBookmarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PowerBookmarkType_strings[2] = {};

static const char PowerBookmarkType_names[] =
  "SHOPPING"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PowerBookmarkType_entries[] = {
  { {PowerBookmarkType_names + 0, 8}, 1 },
  { {PowerBookmarkType_names + 8, 11}, 0 },
};

static const int PowerBookmarkType_entries_by_number[] = {
  1, // 0 -> UNSPECIFIED
  0, // 1 -> SHOPPING
};

const std::string& PowerBookmarkType_Name(
    PowerBookmarkType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PowerBookmarkType_entries,
          PowerBookmarkType_entries_by_number,
          2, PowerBookmarkType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PowerBookmarkType_entries,
      PowerBookmarkType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PowerBookmarkType_strings[idx].get();
}
bool PowerBookmarkType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerBookmarkType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PowerBookmarkType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PowerBookmarkType>(int_value);
  }
  return success;
}

// ===================================================================

class PowerBookmarkMeta_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerBookmarkMeta_Tag>()._has_bits_);
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PowerBookmarkMeta_Tag::PowerBookmarkMeta_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:power_bookmarks.PowerBookmarkMeta.Tag)
}
PowerBookmarkMeta_Tag::PowerBookmarkMeta_Tag(const PowerBookmarkMeta_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(from._internal_display_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:power_bookmarks.PowerBookmarkMeta.Tag)
}

inline void PowerBookmarkMeta_Tag::SharedCtor() {
display_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PowerBookmarkMeta_Tag::~PowerBookmarkMeta_Tag() {
  // @@protoc_insertion_point(destructor:power_bookmarks.PowerBookmarkMeta.Tag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PowerBookmarkMeta_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_name_.Destroy();
}

void PowerBookmarkMeta_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PowerBookmarkMeta_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:power_bookmarks.PowerBookmarkMeta.Tag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    display_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PowerBookmarkMeta_Tag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PowerBookmarkMeta_Tag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:power_bookmarks.PowerBookmarkMeta.Tag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:power_bookmarks.PowerBookmarkMeta.Tag)
  return target;
}

size_t PowerBookmarkMeta_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:power_bookmarks.PowerBookmarkMeta.Tag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string display_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerBookmarkMeta_Tag::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PowerBookmarkMeta_Tag*>(
      &from));
}

void PowerBookmarkMeta_Tag::MergeFrom(const PowerBookmarkMeta_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:power_bookmarks.PowerBookmarkMeta.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_display_name()) {
    _internal_set_display_name(from._internal_display_name());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PowerBookmarkMeta_Tag::CopyFrom(const PowerBookmarkMeta_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:power_bookmarks.PowerBookmarkMeta.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerBookmarkMeta_Tag::IsInitialized() const {
  return true;
}

void PowerBookmarkMeta_Tag::InternalSwap(PowerBookmarkMeta_Tag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
}

std::string PowerBookmarkMeta_Tag::GetTypeName() const {
  return "power_bookmarks.PowerBookmarkMeta.Tag";
}


// ===================================================================

class PowerBookmarkMeta_Image::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerBookmarkMeta_Image>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PowerBookmarkMeta_Image::PowerBookmarkMeta_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:power_bookmarks.PowerBookmarkMeta.Image)
}
PowerBookmarkMeta_Image::PowerBookmarkMeta_Image(const PowerBookmarkMeta_Image& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:power_bookmarks.PowerBookmarkMeta.Image)
}

inline void PowerBookmarkMeta_Image::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PowerBookmarkMeta_Image::~PowerBookmarkMeta_Image() {
  // @@protoc_insertion_point(destructor:power_bookmarks.PowerBookmarkMeta.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PowerBookmarkMeta_Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void PowerBookmarkMeta_Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PowerBookmarkMeta_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:power_bookmarks.PowerBookmarkMeta.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PowerBookmarkMeta_Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PowerBookmarkMeta_Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:power_bookmarks.PowerBookmarkMeta.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:power_bookmarks.PowerBookmarkMeta.Image)
  return target;
}

size_t PowerBookmarkMeta_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:power_bookmarks.PowerBookmarkMeta.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerBookmarkMeta_Image::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PowerBookmarkMeta_Image*>(
      &from));
}

void PowerBookmarkMeta_Image::MergeFrom(const PowerBookmarkMeta_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:power_bookmarks.PowerBookmarkMeta.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PowerBookmarkMeta_Image::CopyFrom(const PowerBookmarkMeta_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:power_bookmarks.PowerBookmarkMeta.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerBookmarkMeta_Image::IsInitialized() const {
  return true;
}

void PowerBookmarkMeta_Image::InternalSwap(PowerBookmarkMeta_Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string PowerBookmarkMeta_Image::GetTypeName() const {
  return "power_bookmarks.PowerBookmarkMeta.Image";
}


// ===================================================================

class PowerBookmarkMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerBookmarkMeta>()._has_bits_);
  static const ::power_bookmarks::PowerBookmarkMeta_Image& lead_image(const PowerBookmarkMeta* msg);
  static void set_has_lead_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::power_bookmarks::ShoppingSpecifics& shopping_specifics(const PowerBookmarkMeta* msg);
};

const ::power_bookmarks::PowerBookmarkMeta_Image&
PowerBookmarkMeta::_Internal::lead_image(const PowerBookmarkMeta* msg) {
  return *msg->lead_image_;
}
const ::power_bookmarks::ShoppingSpecifics&
PowerBookmarkMeta::_Internal::shopping_specifics(const PowerBookmarkMeta* msg) {
  return *msg->type_specifics_.shopping_specifics_;
}
void PowerBookmarkMeta::set_allocated_shopping_specifics(::power_bookmarks::ShoppingSpecifics* shopping_specifics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_specifics();
  if (shopping_specifics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shopping_specifics));
    if (message_arena != submessage_arena) {
      shopping_specifics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shopping_specifics, submessage_arena);
    }
    set_has_shopping_specifics();
    type_specifics_.shopping_specifics_ = shopping_specifics;
  }
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.PowerBookmarkMeta.shopping_specifics)
}
void PowerBookmarkMeta::clear_shopping_specifics() {
  if (_internal_has_shopping_specifics()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_specifics_.shopping_specifics_;
    }
    clear_has_type_specifics();
  }
}
PowerBookmarkMeta::PowerBookmarkMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  fallback_images_(arena),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:power_bookmarks.PowerBookmarkMeta)
}
PowerBookmarkMeta::PowerBookmarkMeta(const PowerBookmarkMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      fallback_images_(from.fallback_images_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_lead_image()) {
    lead_image_ = new ::power_bookmarks::PowerBookmarkMeta_Image(*from.lead_image_);
  } else {
    lead_image_ = nullptr;
  }
  type_ = from.type_;
  clear_has_type_specifics();
  switch (from.type_specifics_case()) {
    case kShoppingSpecifics: {
      _internal_mutable_shopping_specifics()->::power_bookmarks::ShoppingSpecifics::MergeFrom(from._internal_shopping_specifics());
      break;
    }
    case TYPE_SPECIFICS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:power_bookmarks.PowerBookmarkMeta)
}

inline void PowerBookmarkMeta::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lead_image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&lead_image_)) + sizeof(type_));
clear_has_type_specifics();
}

PowerBookmarkMeta::~PowerBookmarkMeta() {
  // @@protoc_insertion_point(destructor:power_bookmarks.PowerBookmarkMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PowerBookmarkMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lead_image_;
  if (has_type_specifics()) {
    clear_type_specifics();
  }
}

void PowerBookmarkMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PowerBookmarkMeta::clear_type_specifics() {
// @@protoc_insertion_point(one_of_clear_start:power_bookmarks.PowerBookmarkMeta)
  switch (type_specifics_case()) {
    case kShoppingSpecifics: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_specifics_.shopping_specifics_;
      }
      break;
    }
    case TYPE_SPECIFICS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_SPECIFICS_NOT_SET;
}


void PowerBookmarkMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:power_bookmarks.PowerBookmarkMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fallback_images_.Clear();
  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(lead_image_ != nullptr);
    lead_image_->Clear();
  }
  type_ = 0;
  clear_type_specifics();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PowerBookmarkMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .power_bookmarks.PowerBookmarkMeta.Image lead_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .power_bookmarks.PowerBookmarkMeta.Image fallback_images = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fallback_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .power_bookmarks.PowerBookmarkMeta.Tag tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .power_bookmarks.PowerBookmarkType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::power_bookmarks::PowerBookmarkType_IsValid(val))) {
            _internal_set_type(static_cast<::power_bookmarks::PowerBookmarkType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .power_bookmarks.ShoppingSpecifics shopping_specifics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shopping_specifics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PowerBookmarkMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:power_bookmarks.PowerBookmarkMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .power_bookmarks.PowerBookmarkMeta.Image lead_image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lead_image(this),
        _Internal::lead_image(this).GetCachedSize(), target, stream);
  }

  // repeated .power_bookmarks.PowerBookmarkMeta.Image fallback_images = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fallback_images_size()); i < n; i++) {
    const auto& repfield = this->_internal_fallback_images(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .power_bookmarks.PowerBookmarkMeta.Tag tags = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tags_size()); i < n; i++) {
    const auto& repfield = this->_internal_tags(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .power_bookmarks.PowerBookmarkType type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // .power_bookmarks.ShoppingSpecifics shopping_specifics = 5;
  if (_internal_has_shopping_specifics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::shopping_specifics(this),
        _Internal::shopping_specifics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:power_bookmarks.PowerBookmarkMeta)
  return target;
}

size_t PowerBookmarkMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:power_bookmarks.PowerBookmarkMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .power_bookmarks.PowerBookmarkMeta.Image fallback_images = 2;
  total_size += 1UL * this->_internal_fallback_images_size();
  for (const auto& msg : this->fallback_images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .power_bookmarks.PowerBookmarkMeta.Tag tags = 3;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .power_bookmarks.PowerBookmarkMeta.Image lead_image = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lead_image_);
    }

    // optional .power_bookmarks.PowerBookmarkType type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (type_specifics_case()) {
    // .power_bookmarks.ShoppingSpecifics shopping_specifics = 5;
    case kShoppingSpecifics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_specifics_.shopping_specifics_);
      break;
    }
    case TYPE_SPECIFICS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerBookmarkMeta::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PowerBookmarkMeta*>(
      &from));
}

void PowerBookmarkMeta::MergeFrom(const PowerBookmarkMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:power_bookmarks.PowerBookmarkMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fallback_images_.MergeFrom(from.fallback_images_);
  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lead_image()->::power_bookmarks::PowerBookmarkMeta_Image::MergeFrom(from._internal_lead_image());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.type_specifics_case()) {
    case kShoppingSpecifics: {
      _internal_mutable_shopping_specifics()->::power_bookmarks::ShoppingSpecifics::MergeFrom(from._internal_shopping_specifics());
      break;
    }
    case TYPE_SPECIFICS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PowerBookmarkMeta::CopyFrom(const PowerBookmarkMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:power_bookmarks.PowerBookmarkMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerBookmarkMeta::IsInitialized() const {
  return true;
}

void PowerBookmarkMeta::InternalSwap(PowerBookmarkMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fallback_images_.InternalSwap(&other->fallback_images_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerBookmarkMeta, type_)
      + sizeof(PowerBookmarkMeta::type_)
      - PROTOBUF_FIELD_OFFSET(PowerBookmarkMeta, lead_image_)>(
          reinterpret_cast<char*>(&lead_image_),
          reinterpret_cast<char*>(&other->lead_image_));
  swap(type_specifics_, other->type_specifics_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string PowerBookmarkMeta::GetTypeName() const {
  return "power_bookmarks.PowerBookmarkMeta";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace power_bookmarks
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::power_bookmarks::PowerBookmarkMeta_Tag*
Arena::CreateMaybeMessage< ::power_bookmarks::PowerBookmarkMeta_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::power_bookmarks::PowerBookmarkMeta_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::power_bookmarks::PowerBookmarkMeta_Image*
Arena::CreateMaybeMessage< ::power_bookmarks::PowerBookmarkMeta_Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::power_bookmarks::PowerBookmarkMeta_Image >(arena);
}
template<> PROTOBUF_NOINLINE ::power_bookmarks::PowerBookmarkMeta*
Arena::CreateMaybeMessage< ::power_bookmarks::PowerBookmarkMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::power_bookmarks::PowerBookmarkMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
