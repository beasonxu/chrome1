// components/safe_browsing/content/common/safe_browsing.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/safe_browsing/content/common/safe_browsing.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/safe_browsing/content/common/safe_browsing.mojom-params-data.h"
#include "components/safe_browsing/content/common/safe_browsing.mojom-shared-message-ids.h"

#include "components/safe_browsing/content/common/safe_browsing.mojom-import-headers.h"
#include "components/safe_browsing/content/common/safe_browsing.mojom-test-utils.h"


#ifndef COMPONENTS_SAFE_BROWSING_CONTENT_COMMON_SAFE_BROWSING_MOJOM_JUMBO_H_
#define COMPONENTS_SAFE_BROWSING_CONTENT_COMMON_SAFE_BROWSING_MOJOM_JUMBO_H_
#endif



namespace safe_browsing {
namespace mojom {
AttributeNameValue::AttributeNameValue()
    : name(),
      value() {}

AttributeNameValue::AttributeNameValue(
    const std::string& name_in,
    const std::string& value_in)
    : name(std::move(name_in)),
      value(std::move(value_in)) {}

AttributeNameValue::~AttributeNameValue() = default;
size_t AttributeNameValue::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->name);
  seed = mojo::internal::Hash(seed, this->value);
  return seed;
}

void AttributeNameValue::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AttributeNameValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ThreatDOMDetailsNode::ThreatDOMDetailsNode()
    : node_id(),
      url(),
      tag_name(),
      parent(),
      parent_node_id(),
      children(),
      child_node_ids(),
      attributes(),
      child_frame_token(),
      inner_html() {}

ThreatDOMDetailsNode::ThreatDOMDetailsNode(
    int32_t node_id_in,
    const ::GURL& url_in,
    const std::string& tag_name_in,
    const ::GURL& parent_in,
    int32_t parent_node_id_in,
    std::vector<::GURL> children_in,
    std::vector<int32_t> child_node_ids_in,
    std::vector<AttributeNameValuePtr> attributes_in,
    const absl::optional<::blink::FrameToken>& child_frame_token_in,
    const std::string& inner_html_in)
    : node_id(std::move(node_id_in)),
      url(std::move(url_in)),
      tag_name(std::move(tag_name_in)),
      parent(std::move(parent_in)),
      parent_node_id(std::move(parent_node_id_in)),
      children(std::move(children_in)),
      child_node_ids(std::move(child_node_ids_in)),
      attributes(std::move(attributes_in)),
      child_frame_token(std::move(child_frame_token_in)),
      inner_html(std::move(inner_html_in)) {}

ThreatDOMDetailsNode::~ThreatDOMDetailsNode() = default;

void ThreatDOMDetailsNode::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "node_id"), this->node_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "url"), this->url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "tag_name"), this->tag_name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "parent"), this->parent,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "parent_node_id"), this->parent_node_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "children"), this->children,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::GURL>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "child_node_ids"), this->child_node_ids,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<int32_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "attributes"), this->attributes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<AttributeNameValuePtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "child_frame_token"), this->child_frame_token,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::blink::FrameToken>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "inner_html"), this->inner_html,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ThreatDOMDetailsNode::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char SafeBrowsing::Name_[] = "safe_browsing.mojom.SafeBrowsing";

SafeBrowsing::IPCStableHashFunction SafeBrowsing::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kSafeBrowsing_CreateCheckerAndCheck_Name: {
      return &SafeBrowsing::CreateCheckerAndCheck_Sym::IPCStableHash;
    }
    case internal::kSafeBrowsing_Clone_Name: {
      return &SafeBrowsing::Clone_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* SafeBrowsing::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kSafeBrowsing_CreateCheckerAndCheck_Name:
            return "Receive safe_browsing::mojom::SafeBrowsing::CreateCheckerAndCheck";
      case internal::kSafeBrowsing_Clone_Name:
            return "Receive safe_browsing::mojom::SafeBrowsing::Clone";
    }
  } else {
    switch (message.name()) {
      case internal::kSafeBrowsing_CreateCheckerAndCheck_Name:
            return "Receive reply safe_browsing::mojom::SafeBrowsing::CreateCheckerAndCheck";
      case internal::kSafeBrowsing_Clone_Name:
            return "Receive reply safe_browsing::mojom::SafeBrowsing::Clone";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t SafeBrowsing::CreateCheckerAndCheck_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)safe_browsing::mojom::SafeBrowsing::CreateCheckerAndCheck");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SafeBrowsing::Clone_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)safe_browsing::mojom::SafeBrowsing::Clone");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class SafeBrowsing_CreateCheckerAndCheck_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SafeBrowsing_CreateCheckerAndCheck_ForwardToCallback(
      SafeBrowsing::CreateCheckerAndCheckCallback callback
      ) : callback_(std::move(callback)) {
  }

  SafeBrowsing_CreateCheckerAndCheck_ForwardToCallback(const SafeBrowsing_CreateCheckerAndCheck_ForwardToCallback&) = delete;
  SafeBrowsing_CreateCheckerAndCheck_ForwardToCallback& operator=(const SafeBrowsing_CreateCheckerAndCheck_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SafeBrowsing::CreateCheckerAndCheckCallback callback_;
};

SafeBrowsingProxy::SafeBrowsingProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SafeBrowsingProxy::CreateCheckerAndCheck(
    int32_t in_render_frame_id, ::mojo::PendingReceiver<::safe_browsing::mojom::SafeBrowsingUrlChecker> in_receiver, const ::GURL& in_url, const std::string& in_method, const ::net::HttpRequestHeaders& in_headers, int32_t in_load_flags, ::network::mojom::RequestDestination in_request_destination, bool in_has_user_gesture, bool in_originated_from_service_worker, CreateCheckerAndCheckCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send safe_browsing::mojom::SafeBrowsing::CreateCheckerAndCheck", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("render_frame_id"), in_render_frame_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::safe_browsing::mojom::SafeBrowsingUrlChecker>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("method"), in_method,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("headers"), in_headers,
                        "<value of type const ::net::HttpRequestHeaders&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("load_flags"), in_load_flags,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("request_destination"), in_request_destination,
                        "<value of type ::network::mojom::RequestDestination>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("has_user_gesture"), in_has_user_gesture,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("originated_from_service_worker"), in_originated_from_service_worker,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSafeBrowsing_CreateCheckerAndCheck_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::SafeBrowsing_CreateCheckerAndCheck_Params_Data> params(
          message);
  params.Allocate();
  params->render_frame_id = in_render_frame_id;
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::safe_browsing::mojom::SafeBrowsingUrlCheckerInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in SafeBrowsing.CreateCheckerAndCheck request");
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in SafeBrowsing.CreateCheckerAndCheck request");
  mojo::internal::MessageFragment<
      typename decltype(params->method)::BaseType> method_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_method, method_fragment);
  params->method.Set(
      method_fragment.is_null() ? nullptr : method_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->method.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null method in SafeBrowsing.CreateCheckerAndCheck request");
  mojo::internal::MessageFragment<
      typename decltype(params->headers)::BaseType> headers_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::HttpRequestHeadersDataView>(
      in_headers, headers_fragment);
  params->headers.Set(
      headers_fragment.is_null() ? nullptr : headers_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->headers.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null headers in SafeBrowsing.CreateCheckerAndCheck request");
  params->load_flags = in_load_flags;
  mojo::internal::Serialize<::network::mojom::RequestDestination>(
      in_request_destination, &params->request_destination);
  params->has_user_gesture = in_has_user_gesture;
  params->originated_from_service_worker = in_originated_from_service_worker;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SafeBrowsing::Name_);
  message.set_method_name("CreateCheckerAndCheck");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SafeBrowsing_CreateCheckerAndCheck_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SafeBrowsingProxy::Clone(
    ::mojo::PendingReceiver<SafeBrowsing> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send safe_browsing::mojom::SafeBrowsing::Clone", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<SafeBrowsing>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSafeBrowsing_Clone_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::SafeBrowsing_Clone_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::safe_browsing::mojom::SafeBrowsingInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in SafeBrowsing.Clone request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SafeBrowsing::Name_);
  message.set_method_name("Clone");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class SafeBrowsing_CreateCheckerAndCheck_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SafeBrowsing::CreateCheckerAndCheckCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SafeBrowsing_CreateCheckerAndCheck_ProxyToResponder> proxy(
        new SafeBrowsing_CreateCheckerAndCheck_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SafeBrowsing_CreateCheckerAndCheck_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SafeBrowsing_CreateCheckerAndCheck_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SafeBrowsing_CreateCheckerAndCheck_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SafeBrowsing::CreateCheckerAndCheckCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::PendingReceiver<::safe_browsing::mojom::UrlCheckNotifier> in_slow_check_notifier, bool in_proceed, bool in_showed_interstitial);
};

bool SafeBrowsing_CreateCheckerAndCheck_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::mojo::PendingReceiver<::safe_browsing::mojom::UrlCheckNotifier> p_slow_check_notifier{};
  bool p_proceed{};
  bool p_showed_interstitial{};
  SafeBrowsing_CreateCheckerAndCheck_ResponseParamsDataView input_data_view(params, message);
  
  if (success) {
    p_slow_check_notifier =
        input_data_view.TakeSlowCheckNotifier<decltype(p_slow_check_notifier)>();
  }
  if (success)
    p_proceed = input_data_view.proceed();
  if (success)
    p_showed_interstitial = input_data_view.showed_interstitial();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SafeBrowsing::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_slow_check_notifier), 
std::move(p_proceed), 
std::move(p_showed_interstitial));
  return true;
}

void SafeBrowsing_CreateCheckerAndCheck_ProxyToResponder::Run(
    ::mojo::PendingReceiver<::safe_browsing::mojom::UrlCheckNotifier> in_slow_check_notifier, bool in_proceed, bool in_showed_interstitial) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply safe_browsing::mojom::SafeBrowsing::CreateCheckerAndCheck", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("slow_check_notifier"), in_slow_check_notifier,
                        "<value of type ::mojo::PendingReceiver<::safe_browsing::mojom::UrlCheckNotifier>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("proceed"), in_proceed,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("showed_interstitial"), in_showed_interstitial,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSafeBrowsing_CreateCheckerAndCheck_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::safe_browsing::mojom::UrlCheckNotifierInterfaceBase>>(
      in_slow_check_notifier, &params->slow_check_notifier, &params.message());
  params->proceed = in_proceed;
  params->showed_interstitial = in_showed_interstitial;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SafeBrowsing::Name_);
  message.set_method_name("CreateCheckerAndCheck");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool SafeBrowsingStubDispatch::Accept(
    SafeBrowsing* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSafeBrowsing_CreateCheckerAndCheck_Name: {
      break;
    }
    case internal::kSafeBrowsing_Clone_Name: {

      DCHECK(message->is_serialized());
      internal::SafeBrowsing_Clone_Params_Data* params =
          reinterpret_cast<internal::SafeBrowsing_Clone_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<SafeBrowsing> p_receiver{};
      SafeBrowsing_Clone_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SafeBrowsing::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Clone(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool SafeBrowsingStubDispatch::AcceptWithResponder(
    SafeBrowsing* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kSafeBrowsing_CreateCheckerAndCheck_Name: {

      internal::SafeBrowsing_CreateCheckerAndCheck_Params_Data* params =
          reinterpret_cast<
              internal::SafeBrowsing_CreateCheckerAndCheck_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_render_frame_id{};
      ::mojo::PendingReceiver<::safe_browsing::mojom::SafeBrowsingUrlChecker> p_receiver{};
      ::GURL p_url{};
      std::string p_method{};
      ::net::HttpRequestHeaders p_headers{};
      int32_t p_load_flags{};
      ::network::mojom::RequestDestination p_request_destination{};
      bool p_has_user_gesture{};
      bool p_originated_from_service_worker{};
      SafeBrowsing_CreateCheckerAndCheck_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_render_frame_id = input_data_view.render_frame_id();
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadMethod(&p_method))
        success = false;
      if (success && !input_data_view.ReadHeaders(&p_headers))
        success = false;
      if (success)
        p_load_flags = input_data_view.load_flags();
      if (success && !input_data_view.ReadRequestDestination(&p_request_destination))
        success = false;
      if (success)
        p_has_user_gesture = input_data_view.has_user_gesture();
      if (success)
        p_originated_from_service_worker = input_data_view.originated_from_service_worker();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SafeBrowsing::Name_, 0, false);
        return false;
      }
      SafeBrowsing::CreateCheckerAndCheckCallback callback =
          SafeBrowsing_CreateCheckerAndCheck_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateCheckerAndCheck(
std::move(p_render_frame_id), 
std::move(p_receiver), 
std::move(p_url), 
std::move(p_method), 
std::move(p_headers), 
std::move(p_load_flags), 
std::move(p_request_destination), 
std::move(p_has_user_gesture), 
std::move(p_originated_from_service_worker), std::move(callback));
      return true;
    }
    case internal::kSafeBrowsing_Clone_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSafeBrowsingValidationInfo[] = {
    {&internal::SafeBrowsing_CreateCheckerAndCheck_Params_Data::Validate,
     &internal::SafeBrowsing_CreateCheckerAndCheck_ResponseParams_Data::Validate},
    {&internal::SafeBrowsing_Clone_Params_Data::Validate,
     nullptr /* no response */},
};

bool SafeBrowsingRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::SafeBrowsing::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSafeBrowsingValidationInfo);
}

bool SafeBrowsingResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::SafeBrowsing::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kSafeBrowsingValidationInfo);
}
const char ThreatReporter::Name_[] = "safe_browsing.mojom.ThreatReporter";

ThreatReporter::IPCStableHashFunction ThreatReporter::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kThreatReporter_GetThreatDOMDetails_Name: {
      return &ThreatReporter::GetThreatDOMDetails_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ThreatReporter::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kThreatReporter_GetThreatDOMDetails_Name:
            return "Receive safe_browsing::mojom::ThreatReporter::GetThreatDOMDetails";
    }
  } else {
    switch (message.name()) {
      case internal::kThreatReporter_GetThreatDOMDetails_Name:
            return "Receive reply safe_browsing::mojom::ThreatReporter::GetThreatDOMDetails";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ThreatReporter::GetThreatDOMDetails_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)safe_browsing::mojom::ThreatReporter::GetThreatDOMDetails");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class ThreatReporter_GetThreatDOMDetails_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ThreatReporter_GetThreatDOMDetails_ForwardToCallback(
      ThreatReporter::GetThreatDOMDetailsCallback callback
      ) : callback_(std::move(callback)) {
  }

  ThreatReporter_GetThreatDOMDetails_ForwardToCallback(const ThreatReporter_GetThreatDOMDetails_ForwardToCallback&) = delete;
  ThreatReporter_GetThreatDOMDetails_ForwardToCallback& operator=(const ThreatReporter_GetThreatDOMDetails_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ThreatReporter::GetThreatDOMDetailsCallback callback_;
};

ThreatReporterProxy::ThreatReporterProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ThreatReporterProxy::GetThreatDOMDetails(
    GetThreatDOMDetailsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send safe_browsing::mojom::ThreatReporter::GetThreatDOMDetails");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kThreatReporter_GetThreatDOMDetails_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::ThreatReporter_GetThreatDOMDetails_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ThreatReporter::Name_);
  message.set_method_name("GetThreatDOMDetails");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ThreatReporter_GetThreatDOMDetails_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class ThreatReporter_GetThreatDOMDetails_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ThreatReporter::GetThreatDOMDetailsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ThreatReporter_GetThreatDOMDetails_ProxyToResponder> proxy(
        new ThreatReporter_GetThreatDOMDetails_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ThreatReporter_GetThreatDOMDetails_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ThreatReporter_GetThreatDOMDetails_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ThreatReporter_GetThreatDOMDetails_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ThreatReporter::GetThreatDOMDetailsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<ThreatDOMDetailsNodePtr> in_nodes);
};

bool ThreatReporter_GetThreatDOMDetails_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ThreatReporter_GetThreatDOMDetails_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ThreatReporter_GetThreatDOMDetails_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<ThreatDOMDetailsNodePtr> p_nodes{};
  ThreatReporter_GetThreatDOMDetails_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadNodes(&p_nodes))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ThreatReporter::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_nodes));
  return true;
}

void ThreatReporter_GetThreatDOMDetails_ProxyToResponder::Run(
    std::vector<ThreatDOMDetailsNodePtr> in_nodes) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply safe_browsing::mojom::ThreatReporter::GetThreatDOMDetails", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("nodes"), in_nodes,
                        "<value of type std::vector<ThreatDOMDetailsNodePtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kThreatReporter_GetThreatDOMDetails_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::ThreatReporter_GetThreatDOMDetails_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->nodes)::BaseType>
      nodes_fragment(params.message());
  const mojo::internal::ContainerValidateParams nodes_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::safe_browsing::mojom::ThreatDOMDetailsNodeDataView>>(
      in_nodes, nodes_fragment, &nodes_validate_params);
  params->nodes.Set(
      nodes_fragment.is_null() ? nullptr : nodes_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->nodes.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null nodes in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ThreatReporter::Name_);
  message.set_method_name("GetThreatDOMDetails");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool ThreatReporterStubDispatch::Accept(
    ThreatReporter* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kThreatReporter_GetThreatDOMDetails_Name: {
      break;
    }
  }
  return false;
}

// static
bool ThreatReporterStubDispatch::AcceptWithResponder(
    ThreatReporter* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kThreatReporter_GetThreatDOMDetails_Name: {

      internal::ThreatReporter_GetThreatDOMDetails_Params_Data* params =
          reinterpret_cast<
              internal::ThreatReporter_GetThreatDOMDetails_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ThreatReporter_GetThreatDOMDetails_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ThreatReporter::Name_, 0, false);
        return false;
      }
      ThreatReporter::GetThreatDOMDetailsCallback callback =
          ThreatReporter_GetThreatDOMDetails_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetThreatDOMDetails(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kThreatReporterValidationInfo[] = {
    {&internal::ThreatReporter_GetThreatDOMDetails_Params_Data::Validate,
     &internal::ThreatReporter_GetThreatDOMDetails_ResponseParams_Data::Validate},
};

bool ThreatReporterRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::ThreatReporter::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kThreatReporterValidationInfo);
}

bool ThreatReporterResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::ThreatReporter::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kThreatReporterValidationInfo);
}
const char PhishingDetector::Name_[] = "safe_browsing.mojom.PhishingDetector";

PhishingDetector::IPCStableHashFunction PhishingDetector::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPhishingDetector_StartPhishingDetection_Name: {
      return &PhishingDetector::StartPhishingDetection_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PhishingDetector::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPhishingDetector_StartPhishingDetection_Name:
            return "Receive safe_browsing::mojom::PhishingDetector::StartPhishingDetection";
    }
  } else {
    switch (message.name()) {
      case internal::kPhishingDetector_StartPhishingDetection_Name:
            return "Receive reply safe_browsing::mojom::PhishingDetector::StartPhishingDetection";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PhishingDetector::StartPhishingDetection_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)safe_browsing::mojom::PhishingDetector::StartPhishingDetection");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class PhishingDetector_StartPhishingDetection_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PhishingDetector_StartPhishingDetection_ForwardToCallback(
      PhishingDetector::StartPhishingDetectionCallback callback
      ) : callback_(std::move(callback)) {
  }

  PhishingDetector_StartPhishingDetection_ForwardToCallback(const PhishingDetector_StartPhishingDetection_ForwardToCallback&) = delete;
  PhishingDetector_StartPhishingDetection_ForwardToCallback& operator=(const PhishingDetector_StartPhishingDetection_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PhishingDetector::StartPhishingDetectionCallback callback_;
};

PhishingDetectorProxy::PhishingDetectorProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PhishingDetectorProxy::StartPhishingDetection(
    const ::GURL& in_url, StartPhishingDetectionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send safe_browsing::mojom::PhishingDetector::StartPhishingDetection", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPhishingDetector_StartPhishingDetection_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::PhishingDetector_StartPhishingDetection_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in PhishingDetector.StartPhishingDetection request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PhishingDetector::Name_);
  message.set_method_name("StartPhishingDetection");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PhishingDetector_StartPhishingDetection_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class PhishingDetector_StartPhishingDetection_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PhishingDetector::StartPhishingDetectionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PhishingDetector_StartPhishingDetection_ProxyToResponder> proxy(
        new PhishingDetector_StartPhishingDetection_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PhishingDetector_StartPhishingDetection_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PhishingDetector_StartPhishingDetection_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PhishingDetector_StartPhishingDetection_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PhishingDetector::StartPhishingDetectionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PhishingDetectorResult in_result, const std::string& in_request_proto);
};

bool PhishingDetector_StartPhishingDetection_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PhishingDetector_StartPhishingDetection_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PhishingDetector_StartPhishingDetection_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  PhishingDetectorResult p_result{};
  std::string p_request_proto{};
  PhishingDetector_StartPhishingDetection_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (success && !input_data_view.ReadRequestProto(&p_request_proto))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PhishingDetector::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result), 
std::move(p_request_proto));
  return true;
}

void PhishingDetector_StartPhishingDetection_ProxyToResponder::Run(
    PhishingDetectorResult in_result, const std::string& in_request_proto) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply safe_browsing::mojom::PhishingDetector::StartPhishingDetection", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type PhishingDetectorResult>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("request_proto"), in_request_proto,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPhishingDetector_StartPhishingDetection_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::PhishingDetector_StartPhishingDetection_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::safe_browsing::mojom::PhishingDetectorResult>(
      in_result, &params->result);
  mojo::internal::MessageFragment<
      typename decltype(params->request_proto)::BaseType> request_proto_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_request_proto, request_proto_fragment);
  params->request_proto.Set(
      request_proto_fragment.is_null() ? nullptr : request_proto_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->request_proto.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null request_proto in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PhishingDetector::Name_);
  message.set_method_name("StartPhishingDetection");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PhishingDetectorStubDispatch::Accept(
    PhishingDetector* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPhishingDetector_StartPhishingDetection_Name: {
      break;
    }
  }
  return false;
}

// static
bool PhishingDetectorStubDispatch::AcceptWithResponder(
    PhishingDetector* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPhishingDetector_StartPhishingDetection_Name: {

      internal::PhishingDetector_StartPhishingDetection_Params_Data* params =
          reinterpret_cast<
              internal::PhishingDetector_StartPhishingDetection_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::GURL p_url{};
      PhishingDetector_StartPhishingDetection_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PhishingDetector::Name_, 0, false);
        return false;
      }
      PhishingDetector::StartPhishingDetectionCallback callback =
          PhishingDetector_StartPhishingDetection_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StartPhishingDetection(
std::move(p_url), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPhishingDetectorValidationInfo[] = {
    {&internal::PhishingDetector_StartPhishingDetection_Params_Data::Validate,
     &internal::PhishingDetector_StartPhishingDetection_ResponseParams_Data::Validate},
};

bool PhishingDetectorRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::PhishingDetector::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPhishingDetectorValidationInfo);
}

bool PhishingDetectorResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::PhishingDetector::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPhishingDetectorValidationInfo);
}
const char PhishingModelSetter::Name_[] = "safe_browsing.mojom.PhishingModelSetter";

PhishingModelSetter::IPCStableHashFunction PhishingModelSetter::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPhishingModelSetter_SetPhishingModel_Name: {
      return &PhishingModelSetter::SetPhishingModel_Sym::IPCStableHash;
    }
    case internal::kPhishingModelSetter_SetPhishingFlatBufferModel_Name: {
      return &PhishingModelSetter::SetPhishingFlatBufferModel_Sym::IPCStableHash;
    }
    case internal::kPhishingModelSetter_SetTestObserver_Name: {
      return &PhishingModelSetter::SetTestObserver_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PhishingModelSetter::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPhishingModelSetter_SetPhishingModel_Name:
            return "Receive safe_browsing::mojom::PhishingModelSetter::SetPhishingModel";
      case internal::kPhishingModelSetter_SetPhishingFlatBufferModel_Name:
            return "Receive safe_browsing::mojom::PhishingModelSetter::SetPhishingFlatBufferModel";
      case internal::kPhishingModelSetter_SetTestObserver_Name:
            return "Receive safe_browsing::mojom::PhishingModelSetter::SetTestObserver";
    }
  } else {
    switch (message.name()) {
      case internal::kPhishingModelSetter_SetPhishingModel_Name:
            return "Receive reply safe_browsing::mojom::PhishingModelSetter::SetPhishingModel";
      case internal::kPhishingModelSetter_SetPhishingFlatBufferModel_Name:
            return "Receive reply safe_browsing::mojom::PhishingModelSetter::SetPhishingFlatBufferModel";
      case internal::kPhishingModelSetter_SetTestObserver_Name:
            return "Receive reply safe_browsing::mojom::PhishingModelSetter::SetTestObserver";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PhishingModelSetter::SetPhishingModel_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)safe_browsing::mojom::PhishingModelSetter::SetPhishingModel");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PhishingModelSetter::SetPhishingFlatBufferModel_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)safe_browsing::mojom::PhishingModelSetter::SetPhishingFlatBufferModel");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PhishingModelSetter::SetTestObserver_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)safe_browsing::mojom::PhishingModelSetter::SetTestObserver");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class PhishingModelSetter_SetTestObserver_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PhishingModelSetter_SetTestObserver_ForwardToCallback(
      PhishingModelSetter::SetTestObserverCallback callback
      ) : callback_(std::move(callback)) {
  }

  PhishingModelSetter_SetTestObserver_ForwardToCallback(const PhishingModelSetter_SetTestObserver_ForwardToCallback&) = delete;
  PhishingModelSetter_SetTestObserver_ForwardToCallback& operator=(const PhishingModelSetter_SetTestObserver_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PhishingModelSetter::SetTestObserverCallback callback_;
};

PhishingModelSetterProxy::PhishingModelSetterProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PhishingModelSetterProxy::SetPhishingModel(
    const std::string& in_model, ::base::File in_tflite_model) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send safe_browsing::mojom::PhishingModelSetter::SetPhishingModel", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("model"), in_model,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("tflite_model"), in_tflite_model,
                        "<value of type ::base::File>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPhishingModelSetter_SetPhishingModel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::PhishingModelSetter_SetPhishingModel_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->model)::BaseType> model_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_model, model_fragment);
  params->model.Set(
      model_fragment.is_null() ? nullptr : model_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->model.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null model in PhishingModelSetter.SetPhishingModel request");
  mojo::internal::MessageFragment<
      typename decltype(params->tflite_model)::BaseType> tflite_model_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlyFileDataView>(
      in_tflite_model, tflite_model_fragment);
  params->tflite_model.Set(
      tflite_model_fragment.is_null() ? nullptr : tflite_model_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PhishingModelSetter::Name_);
  message.set_method_name("SetPhishingModel");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PhishingModelSetterProxy::SetPhishingFlatBufferModel(
    ::base::ReadOnlySharedMemoryRegion in_region, ::base::File in_tflite_model) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send safe_browsing::mojom::PhishingModelSetter::SetPhishingFlatBufferModel", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("region"), in_region,
                        "<value of type ::base::ReadOnlySharedMemoryRegion>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("tflite_model"), in_tflite_model,
                        "<value of type ::base::File>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPhishingModelSetter_SetPhishingFlatBufferModel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::PhishingModelSetter_SetPhishingFlatBufferModel_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->region)::BaseType> region_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
      in_region, region_fragment);
  params->region.Set(
      region_fragment.is_null() ? nullptr : region_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->region.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null region in PhishingModelSetter.SetPhishingFlatBufferModel request");
  mojo::internal::MessageFragment<
      typename decltype(params->tflite_model)::BaseType> tflite_model_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlyFileDataView>(
      in_tflite_model, tflite_model_fragment);
  params->tflite_model.Set(
      tflite_model_fragment.is_null() ? nullptr : tflite_model_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PhishingModelSetter::Name_);
  message.set_method_name("SetPhishingFlatBufferModel");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PhishingModelSetterProxy::SetTestObserver(
    ::mojo::PendingRemote<PhishingModelSetterTestObserver> in_observer, SetTestObserverCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send safe_browsing::mojom::PhishingModelSetter::SetTestObserver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("observer"), in_observer,
                        "<value of type ::mojo::PendingRemote<PhishingModelSetterTestObserver>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPhishingModelSetter_SetTestObserver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::PhishingModelSetter_SetTestObserver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::safe_browsing::mojom::PhishingModelSetterTestObserverInterfaceBase>>(
      in_observer, &params->observer, &params.message());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PhishingModelSetter::Name_);
  message.set_method_name("SetTestObserver");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PhishingModelSetter_SetTestObserver_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class PhishingModelSetter_SetTestObserver_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PhishingModelSetter::SetTestObserverCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PhishingModelSetter_SetTestObserver_ProxyToResponder> proxy(
        new PhishingModelSetter_SetTestObserver_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PhishingModelSetter_SetTestObserver_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PhishingModelSetter_SetTestObserver_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PhishingModelSetter_SetTestObserver_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PhishingModelSetter::SetTestObserverCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool PhishingModelSetter_SetTestObserver_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PhishingModelSetter_SetTestObserver_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PhishingModelSetter_SetTestObserver_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  PhishingModelSetter_SetTestObserver_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PhishingModelSetter::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void PhishingModelSetter_SetTestObserver_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply safe_browsing::mojom::PhishingModelSetter::SetTestObserver");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPhishingModelSetter_SetTestObserver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::PhishingModelSetter_SetTestObserver_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PhishingModelSetter::Name_);
  message.set_method_name("SetTestObserver");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PhishingModelSetterStubDispatch::Accept(
    PhishingModelSetter* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPhishingModelSetter_SetPhishingModel_Name: {

      DCHECK(message->is_serialized());
      internal::PhishingModelSetter_SetPhishingModel_Params_Data* params =
          reinterpret_cast<internal::PhishingModelSetter_SetPhishingModel_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_model{};
      ::base::File p_tflite_model{};
      PhishingModelSetter_SetPhishingModel_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadModel(&p_model))
        success = false;
      if (success && !input_data_view.ReadTfliteModel(&p_tflite_model))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PhishingModelSetter::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetPhishingModel(
std::move(p_model), 
std::move(p_tflite_model));
      return true;
    }
    case internal::kPhishingModelSetter_SetPhishingFlatBufferModel_Name: {

      DCHECK(message->is_serialized());
      internal::PhishingModelSetter_SetPhishingFlatBufferModel_Params_Data* params =
          reinterpret_cast<internal::PhishingModelSetter_SetPhishingFlatBufferModel_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::base::ReadOnlySharedMemoryRegion p_region{};
      ::base::File p_tflite_model{};
      PhishingModelSetter_SetPhishingFlatBufferModel_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadRegion(&p_region))
        success = false;
      if (success && !input_data_view.ReadTfliteModel(&p_tflite_model))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PhishingModelSetter::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetPhishingFlatBufferModel(
std::move(p_region), 
std::move(p_tflite_model));
      return true;
    }
    case internal::kPhishingModelSetter_SetTestObserver_Name: {
      break;
    }
  }
  return false;
}

// static
bool PhishingModelSetterStubDispatch::AcceptWithResponder(
    PhishingModelSetter* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPhishingModelSetter_SetPhishingModel_Name: {
      break;
    }
    case internal::kPhishingModelSetter_SetPhishingFlatBufferModel_Name: {
      break;
    }
    case internal::kPhishingModelSetter_SetTestObserver_Name: {

      internal::PhishingModelSetter_SetTestObserver_Params_Data* params =
          reinterpret_cast<
              internal::PhishingModelSetter_SetTestObserver_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<PhishingModelSetterTestObserver> p_observer{};
      PhishingModelSetter_SetTestObserver_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PhishingModelSetter::Name_, 2, false);
        return false;
      }
      PhishingModelSetter::SetTestObserverCallback callback =
          PhishingModelSetter_SetTestObserver_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetTestObserver(
std::move(p_observer), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPhishingModelSetterValidationInfo[] = {
    {&internal::PhishingModelSetter_SetPhishingModel_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PhishingModelSetter_SetPhishingFlatBufferModel_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PhishingModelSetter_SetTestObserver_Params_Data::Validate,
     &internal::PhishingModelSetter_SetTestObserver_ResponseParams_Data::Validate},
};

bool PhishingModelSetterRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::PhishingModelSetter::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPhishingModelSetterValidationInfo);
}

bool PhishingModelSetterResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::PhishingModelSetter::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPhishingModelSetterValidationInfo);
}
const char PhishingModelSetterTestObserver::Name_[] = "safe_browsing.mojom.PhishingModelSetterTestObserver";

PhishingModelSetterTestObserver::IPCStableHashFunction PhishingModelSetterTestObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPhishingModelSetterTestObserver_PhishingModelUpdated_Name: {
      return &PhishingModelSetterTestObserver::PhishingModelUpdated_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PhishingModelSetterTestObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPhishingModelSetterTestObserver_PhishingModelUpdated_Name:
            return "Receive safe_browsing::mojom::PhishingModelSetterTestObserver::PhishingModelUpdated";
    }
  } else {
    switch (message.name()) {
      case internal::kPhishingModelSetterTestObserver_PhishingModelUpdated_Name:
            return "Receive reply safe_browsing::mojom::PhishingModelSetterTestObserver::PhishingModelUpdated";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PhishingModelSetterTestObserver::PhishingModelUpdated_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)safe_browsing::mojom::PhishingModelSetterTestObserver::PhishingModelUpdated");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

PhishingModelSetterTestObserverProxy::PhishingModelSetterTestObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PhishingModelSetterTestObserverProxy::PhishingModelUpdated(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send safe_browsing::mojom::PhishingModelSetterTestObserver::PhishingModelUpdated");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPhishingModelSetterTestObserver_PhishingModelUpdated_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::safe_browsing::mojom::internal::PhishingModelSetterTestObserver_PhishingModelUpdated_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PhishingModelSetterTestObserver::Name_);
  message.set_method_name("PhishingModelUpdated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool PhishingModelSetterTestObserverStubDispatch::Accept(
    PhishingModelSetterTestObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPhishingModelSetterTestObserver_PhishingModelUpdated_Name: {

      DCHECK(message->is_serialized());
      internal::PhishingModelSetterTestObserver_PhishingModelUpdated_Params_Data* params =
          reinterpret_cast<internal::PhishingModelSetterTestObserver_PhishingModelUpdated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PhishingModelSetterTestObserver_PhishingModelUpdated_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PhishingModelSetterTestObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PhishingModelUpdated();
      return true;
    }
  }
  return false;
}

// static
bool PhishingModelSetterTestObserverStubDispatch::AcceptWithResponder(
    PhishingModelSetterTestObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPhishingModelSetterTestObserver_PhishingModelUpdated_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPhishingModelSetterTestObserverValidationInfo[] = {
    {&internal::PhishingModelSetterTestObserver_PhishingModelUpdated_Params_Data::Validate,
     nullptr /* no response */},
};

bool PhishingModelSetterTestObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::safe_browsing::mojom::PhishingModelSetterTestObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPhishingModelSetterTestObserverValidationInfo);
}



}  // namespace mojom
}  // namespace safe_browsing


namespace mojo {


// static
bool StructTraits<::safe_browsing::mojom::AttributeNameValue::DataView, ::safe_browsing::mojom::AttributeNameValuePtr>::Read(
    ::safe_browsing::mojom::AttributeNameValue::DataView input,
    ::safe_browsing::mojom::AttributeNameValuePtr* output) {
  bool success = true;
  ::safe_browsing::mojom::AttributeNameValuePtr result(::safe_browsing::mojom::AttributeNameValue::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::safe_browsing::mojom::ThreatDOMDetailsNode::DataView, ::safe_browsing::mojom::ThreatDOMDetailsNodePtr>::Read(
    ::safe_browsing::mojom::ThreatDOMDetailsNode::DataView input,
    ::safe_browsing::mojom::ThreatDOMDetailsNodePtr* output) {
  bool success = true;
  ::safe_browsing::mojom::ThreatDOMDetailsNodePtr result(::safe_browsing::mojom::ThreatDOMDetailsNode::New());
  
      if (success)
        result->node_id = input.node_id();
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success && !input.ReadTagName(&result->tag_name))
        success = false;
      if (success && !input.ReadParent(&result->parent))
        success = false;
      if (success)
        result->parent_node_id = input.parent_node_id();
      if (success && !input.ReadChildren(&result->children))
        success = false;
      if (success && !input.ReadChildNodeIds(&result->child_node_ids))
        success = false;
      if (success && !input.ReadAttributes(&result->attributes))
        success = false;
      if (success && !input.ReadChildFrameToken(&result->child_frame_token))
        success = false;
      if (success && !input.ReadInnerHtml(&result->inner_html))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace safe_browsing {
namespace mojom {


void SafeBrowsingInterceptorForTesting::CreateCheckerAndCheck(int32_t render_frame_id, ::mojo::PendingReceiver<::safe_browsing::mojom::SafeBrowsingUrlChecker> receiver, const ::GURL& url, const std::string& method, const ::net::HttpRequestHeaders& headers, int32_t load_flags, ::network::mojom::RequestDestination request_destination, bool has_user_gesture, bool originated_from_service_worker, CreateCheckerAndCheckCallback callback) {
  GetForwardingInterface()->CreateCheckerAndCheck(std::move(render_frame_id), std::move(receiver), std::move(url), std::move(method), std::move(headers), std::move(load_flags), std::move(request_destination), std::move(has_user_gesture), std::move(originated_from_service_worker), std::move(callback));
}
void SafeBrowsingInterceptorForTesting::Clone(::mojo::PendingReceiver<SafeBrowsing> receiver) {
  GetForwardingInterface()->Clone(std::move(receiver));
}
SafeBrowsingAsyncWaiter::SafeBrowsingAsyncWaiter(
    SafeBrowsing* proxy) : proxy_(proxy) {}

SafeBrowsingAsyncWaiter::~SafeBrowsingAsyncWaiter() = default;

void SafeBrowsingAsyncWaiter::CreateCheckerAndCheck(
    int32_t render_frame_id, ::mojo::PendingReceiver<::safe_browsing::mojom::SafeBrowsingUrlChecker> receiver, const ::GURL& url, const std::string& method, const ::net::HttpRequestHeaders& headers, int32_t load_flags, ::network::mojom::RequestDestination request_destination, bool has_user_gesture, bool originated_from_service_worker, ::mojo::PendingReceiver<::safe_browsing::mojom::UrlCheckNotifier>* out_slow_check_notifier, bool* out_proceed, bool* out_showed_interstitial) {
  base::RunLoop loop;
  proxy_->CreateCheckerAndCheck(std::move(render_frame_id),std::move(receiver),std::move(url),std::move(method),std::move(headers),std::move(load_flags),std::move(request_destination),std::move(has_user_gesture),std::move(originated_from_service_worker),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::PendingReceiver<::safe_browsing::mojom::UrlCheckNotifier>* out_slow_check_notifier
,
             bool* out_proceed
,
             bool* out_showed_interstitial
,
             ::mojo::PendingReceiver<::safe_browsing::mojom::UrlCheckNotifier> slow_check_notifier,
             bool proceed,
             bool showed_interstitial) {*out_slow_check_notifier = std::move(slow_check_notifier);*out_proceed = std::move(proceed);*out_showed_interstitial = std::move(showed_interstitial);
            loop->Quit();
          },
          &loop,
          out_slow_check_notifier,
          out_proceed,
          out_showed_interstitial));
  loop.Run();
}



void ThreatReporterInterceptorForTesting::GetThreatDOMDetails(GetThreatDOMDetailsCallback callback) {
  GetForwardingInterface()->GetThreatDOMDetails(std::move(callback));
}
ThreatReporterAsyncWaiter::ThreatReporterAsyncWaiter(
    ThreatReporter* proxy) : proxy_(proxy) {}

ThreatReporterAsyncWaiter::~ThreatReporterAsyncWaiter() = default;

void ThreatReporterAsyncWaiter::GetThreatDOMDetails(
    std::vector<ThreatDOMDetailsNodePtr>* out_nodes) {
  base::RunLoop loop;
  proxy_->GetThreatDOMDetails(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<ThreatDOMDetailsNodePtr>* out_nodes
,
             std::vector<ThreatDOMDetailsNodePtr> nodes) {*out_nodes = std::move(nodes);
            loop->Quit();
          },
          &loop,
          out_nodes));
  loop.Run();
}



void PhishingDetectorInterceptorForTesting::StartPhishingDetection(const ::GURL& url, StartPhishingDetectionCallback callback) {
  GetForwardingInterface()->StartPhishingDetection(std::move(url), std::move(callback));
}
PhishingDetectorAsyncWaiter::PhishingDetectorAsyncWaiter(
    PhishingDetector* proxy) : proxy_(proxy) {}

PhishingDetectorAsyncWaiter::~PhishingDetectorAsyncWaiter() = default;

void PhishingDetectorAsyncWaiter::StartPhishingDetection(
    const ::GURL& url, PhishingDetectorResult* out_result, std::string* out_request_proto) {
  base::RunLoop loop;
  proxy_->StartPhishingDetection(std::move(url),
      base::BindOnce(
          [](base::RunLoop* loop,
             PhishingDetectorResult* out_result
,
             std::string* out_request_proto
,
             PhishingDetectorResult result,
             const std::string& request_proto) {*out_result = std::move(result);*out_request_proto = std::move(request_proto);
            loop->Quit();
          },
          &loop,
          out_result,
          out_request_proto));
  loop.Run();
}



void PhishingModelSetterInterceptorForTesting::SetPhishingModel(const std::string& model, ::base::File tflite_model) {
  GetForwardingInterface()->SetPhishingModel(std::move(model), std::move(tflite_model));
}
void PhishingModelSetterInterceptorForTesting::SetPhishingFlatBufferModel(::base::ReadOnlySharedMemoryRegion region, ::base::File tflite_model) {
  GetForwardingInterface()->SetPhishingFlatBufferModel(std::move(region), std::move(tflite_model));
}
void PhishingModelSetterInterceptorForTesting::SetTestObserver(::mojo::PendingRemote<PhishingModelSetterTestObserver> observer, SetTestObserverCallback callback) {
  GetForwardingInterface()->SetTestObserver(std::move(observer), std::move(callback));
}
PhishingModelSetterAsyncWaiter::PhishingModelSetterAsyncWaiter(
    PhishingModelSetter* proxy) : proxy_(proxy) {}

PhishingModelSetterAsyncWaiter::~PhishingModelSetterAsyncWaiter() = default;

void PhishingModelSetterAsyncWaiter::SetTestObserver(
    ::mojo::PendingRemote<PhishingModelSetterTestObserver> observer) {
  base::RunLoop loop;
  proxy_->SetTestObserver(std::move(observer),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



void PhishingModelSetterTestObserverInterceptorForTesting::PhishingModelUpdated() {
  GetForwardingInterface()->PhishingModelUpdated();
}
PhishingModelSetterTestObserverAsyncWaiter::PhishingModelSetterTestObserverAsyncWaiter(
    PhishingModelSetterTestObserver* proxy) : proxy_(proxy) {}

PhishingModelSetterTestObserverAsyncWaiter::~PhishingModelSetterTestObserverAsyncWaiter() = default;






}  // namespace mojom
}  // namespace safe_browsing


#if defined(__clang__)
#pragma clang diagnostic pop
#endif