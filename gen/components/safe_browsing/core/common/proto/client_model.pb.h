// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/safe_browsing/core/common/proto/client_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto {
  static const uint32_t offsets[];
};
namespace safe_browsing {
class ClientSideModel;
struct ClientSideModelDefaultTypeInternal;
extern ClientSideModelDefaultTypeInternal _ClientSideModel_default_instance_;
class ClientSideModel_IPSubnet;
struct ClientSideModel_IPSubnetDefaultTypeInternal;
extern ClientSideModel_IPSubnetDefaultTypeInternal _ClientSideModel_IPSubnet_default_instance_;
class ClientSideModel_Rule;
struct ClientSideModel_RuleDefaultTypeInternal;
extern ClientSideModel_RuleDefaultTypeInternal _ClientSideModel_Rule_default_instance_;
class TfLiteModelMetadata;
struct TfLiteModelMetadataDefaultTypeInternal;
extern TfLiteModelMetadataDefaultTypeInternal _TfLiteModelMetadata_default_instance_;
class TfLiteModelMetadata_Threshold;
struct TfLiteModelMetadata_ThresholdDefaultTypeInternal;
extern TfLiteModelMetadata_ThresholdDefaultTypeInternal _TfLiteModelMetadata_Threshold_default_instance_;
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> ::safe_browsing::ClientSideModel* Arena::CreateMaybeMessage<::safe_browsing::ClientSideModel>(Arena*);
template<> ::safe_browsing::ClientSideModel_IPSubnet* Arena::CreateMaybeMessage<::safe_browsing::ClientSideModel_IPSubnet>(Arena*);
template<> ::safe_browsing::ClientSideModel_Rule* Arena::CreateMaybeMessage<::safe_browsing::ClientSideModel_Rule>(Arena*);
template<> ::safe_browsing::TfLiteModelMetadata* Arena::CreateMaybeMessage<::safe_browsing::TfLiteModelMetadata>(Arena*);
template<> ::safe_browsing::TfLiteModelMetadata_Threshold* Arena::CreateMaybeMessage<::safe_browsing::TfLiteModelMetadata_Threshold>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safe_browsing {

// ===================================================================

class ClientSideModel_Rule final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSideModel.Rule) */ {
 public:
  inline ClientSideModel_Rule() : ClientSideModel_Rule(nullptr) {}
  ~ClientSideModel_Rule() override;
  explicit PROTOBUF_CONSTEXPR ClientSideModel_Rule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSideModel_Rule(const ClientSideModel_Rule& from);
  ClientSideModel_Rule(ClientSideModel_Rule&& from) noexcept
    : ClientSideModel_Rule() {
    *this = ::std::move(from);
  }

  inline ClientSideModel_Rule& operator=(const ClientSideModel_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSideModel_Rule& operator=(ClientSideModel_Rule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSideModel_Rule& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSideModel_Rule* internal_default_instance() {
    return reinterpret_cast<const ClientSideModel_Rule*>(
               &_ClientSideModel_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientSideModel_Rule& a, ClientSideModel_Rule& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSideModel_Rule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSideModel_Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSideModel_Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSideModel_Rule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSideModel_Rule& from);
  void MergeFrom(const ClientSideModel_Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSideModel_Rule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSideModel.Rule";
  }
  protected:
  explicit ClientSideModel_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // repeated int32 feature = 1;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  private:
  int32_t _internal_feature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_feature() const;
  void _internal_add_feature(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_feature();
  public:
  int32_t feature(int index) const;
  void set_feature(int index, int32_t value);
  void add_feature(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_feature();

  // required float weight = 2;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSideModel.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > feature_;
  float weight_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ClientSideModel_IPSubnet final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSideModel.IPSubnet) */ {
 public:
  inline ClientSideModel_IPSubnet() : ClientSideModel_IPSubnet(nullptr) {}
  ~ClientSideModel_IPSubnet() override;
  explicit PROTOBUF_CONSTEXPR ClientSideModel_IPSubnet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSideModel_IPSubnet(const ClientSideModel_IPSubnet& from);
  ClientSideModel_IPSubnet(ClientSideModel_IPSubnet&& from) noexcept
    : ClientSideModel_IPSubnet() {
    *this = ::std::move(from);
  }

  inline ClientSideModel_IPSubnet& operator=(const ClientSideModel_IPSubnet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSideModel_IPSubnet& operator=(ClientSideModel_IPSubnet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSideModel_IPSubnet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSideModel_IPSubnet* internal_default_instance() {
    return reinterpret_cast<const ClientSideModel_IPSubnet*>(
               &_ClientSideModel_IPSubnet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientSideModel_IPSubnet& a, ClientSideModel_IPSubnet& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSideModel_IPSubnet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSideModel_IPSubnet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSideModel_IPSubnet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSideModel_IPSubnet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSideModel_IPSubnet& from);
  void MergeFrom(const ClientSideModel_IPSubnet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSideModel_IPSubnet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSideModel.IPSubnet";
  }
  protected:
  explicit ClientSideModel_IPSubnet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required bytes prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional int32 size = 2 [default = 128];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSideModel.IPSubnet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  int32_t size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ClientSideModel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSideModel) */ {
 public:
  inline ClientSideModel() : ClientSideModel(nullptr) {}
  ~ClientSideModel() override;
  explicit PROTOBUF_CONSTEXPR ClientSideModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSideModel(const ClientSideModel& from);
  ClientSideModel(ClientSideModel&& from) noexcept
    : ClientSideModel() {
    *this = ::std::move(from);
  }

  inline ClientSideModel& operator=(const ClientSideModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSideModel& operator=(ClientSideModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSideModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSideModel* internal_default_instance() {
    return reinterpret_cast<const ClientSideModel*>(
               &_ClientSideModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientSideModel& a, ClientSideModel& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSideModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSideModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSideModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSideModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSideModel& from);
  void MergeFrom(const ClientSideModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSideModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSideModel";
  }
  protected:
  explicit ClientSideModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientSideModel_Rule Rule;
  typedef ClientSideModel_IPSubnet IPSubnet;

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
    kRuleFieldNumber = 2,
    kPageTermFieldNumber = 3,
    kPageWordFieldNumber = 4,
    kBadSubnetFieldNumber = 7,
    kTfliteMetadataFieldNumber = 17,
    kMaxWordsPerTermFieldNumber = 5,
    kVersionFieldNumber = 6,
    kMurmurHashSeedFieldNumber = 8,
    kDomModelVersionFieldNumber = 18,
    kThresholdProbabilityFieldNumber = 11,
    kMaxShinglesPerPageFieldNumber = 9,
    kShingleSizeFieldNumber = 10,
  };
  // repeated bytes hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  const std::string& hashes(int index) const;
  std::string* mutable_hashes(int index);
  void set_hashes(int index, const std::string& value);
  void set_hashes(int index, std::string&& value);
  void set_hashes(int index, const char* value);
  void set_hashes(int index, const void* value, size_t size);
  std::string* add_hashes();
  void add_hashes(const std::string& value);
  void add_hashes(std::string&& value);
  void add_hashes(const char* value);
  void add_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashes();
  private:
  const std::string& _internal_hashes(int index) const;
  std::string* _internal_add_hashes();
  public:

  // repeated .safe_browsing.ClientSideModel.Rule rule = 2;
  int rule_size() const;
  private:
  int _internal_rule_size() const;
  public:
  void clear_rule();
  ::safe_browsing::ClientSideModel_Rule* mutable_rule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >*
      mutable_rule();
  private:
  const ::safe_browsing::ClientSideModel_Rule& _internal_rule(int index) const;
  ::safe_browsing::ClientSideModel_Rule* _internal_add_rule();
  public:
  const ::safe_browsing::ClientSideModel_Rule& rule(int index) const;
  ::safe_browsing::ClientSideModel_Rule* add_rule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >&
      rule() const;

  // repeated int32 page_term = 3;
  int page_term_size() const;
  private:
  int _internal_page_term_size() const;
  public:
  void clear_page_term();
  private:
  int32_t _internal_page_term(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_page_term() const;
  void _internal_add_page_term(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_page_term();
  public:
  int32_t page_term(int index) const;
  void set_page_term(int index, int32_t value);
  void add_page_term(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      page_term() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_page_term();

  // repeated fixed32 page_word = 4;
  int page_word_size() const;
  private:
  int _internal_page_word_size() const;
  public:
  void clear_page_word();
  private:
  uint32_t _internal_page_word(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_page_word() const;
  void _internal_add_page_word(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_page_word();
  public:
  uint32_t page_word(int index) const;
  void set_page_word(int index, uint32_t value);
  void add_page_word(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      page_word() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_page_word();

  // repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
  int bad_subnet_size() const;
  private:
  int _internal_bad_subnet_size() const;
  public:
  void clear_bad_subnet();
  ::safe_browsing::ClientSideModel_IPSubnet* mutable_bad_subnet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >*
      mutable_bad_subnet();
  private:
  const ::safe_browsing::ClientSideModel_IPSubnet& _internal_bad_subnet(int index) const;
  ::safe_browsing::ClientSideModel_IPSubnet* _internal_add_bad_subnet();
  public:
  const ::safe_browsing::ClientSideModel_IPSubnet& bad_subnet(int index) const;
  ::safe_browsing::ClientSideModel_IPSubnet* add_bad_subnet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >&
      bad_subnet() const;

  // optional .safe_browsing.TfLiteModelMetadata tflite_metadata = 17;
  bool has_tflite_metadata() const;
  private:
  bool _internal_has_tflite_metadata() const;
  public:
  void clear_tflite_metadata();
  const ::safe_browsing::TfLiteModelMetadata& tflite_metadata() const;
  PROTOBUF_NODISCARD ::safe_browsing::TfLiteModelMetadata* release_tflite_metadata();
  ::safe_browsing::TfLiteModelMetadata* mutable_tflite_metadata();
  void set_allocated_tflite_metadata(::safe_browsing::TfLiteModelMetadata* tflite_metadata);
  private:
  const ::safe_browsing::TfLiteModelMetadata& _internal_tflite_metadata() const;
  ::safe_browsing::TfLiteModelMetadata* _internal_mutable_tflite_metadata();
  public:
  void unsafe_arena_set_allocated_tflite_metadata(
      ::safe_browsing::TfLiteModelMetadata* tflite_metadata);
  ::safe_browsing::TfLiteModelMetadata* unsafe_arena_release_tflite_metadata();

  // required int32 max_words_per_term = 5;
  bool has_max_words_per_term() const;
  private:
  bool _internal_has_max_words_per_term() const;
  public:
  void clear_max_words_per_term();
  int32_t max_words_per_term() const;
  void set_max_words_per_term(int32_t value);
  private:
  int32_t _internal_max_words_per_term() const;
  void _internal_set_max_words_per_term(int32_t value);
  public:

  // optional int32 version = 6;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional fixed32 murmur_hash_seed = 8;
  bool has_murmur_hash_seed() const;
  private:
  bool _internal_has_murmur_hash_seed() const;
  public:
  void clear_murmur_hash_seed();
  uint32_t murmur_hash_seed() const;
  void set_murmur_hash_seed(uint32_t value);
  private:
  uint32_t _internal_murmur_hash_seed() const;
  void _internal_set_murmur_hash_seed(uint32_t value);
  public:

  // optional int32 dom_model_version = 18;
  bool has_dom_model_version() const;
  private:
  bool _internal_has_dom_model_version() const;
  public:
  void clear_dom_model_version();
  int32_t dom_model_version() const;
  void set_dom_model_version(int32_t value);
  private:
  int32_t _internal_dom_model_version() const;
  void _internal_set_dom_model_version(int32_t value);
  public:

  // optional float threshold_probability = 11 [default = 0.5];
  bool has_threshold_probability() const;
  private:
  bool _internal_has_threshold_probability() const;
  public:
  void clear_threshold_probability();
  float threshold_probability() const;
  void set_threshold_probability(float value);
  private:
  float _internal_threshold_probability() const;
  void _internal_set_threshold_probability(float value);
  public:

  // optional int32 max_shingles_per_page = 9 [default = 200];
  bool has_max_shingles_per_page() const;
  private:
  bool _internal_has_max_shingles_per_page() const;
  public:
  void clear_max_shingles_per_page();
  int32_t max_shingles_per_page() const;
  void set_max_shingles_per_page(int32_t value);
  private:
  int32_t _internal_max_shingles_per_page() const;
  void _internal_set_max_shingles_per_page(int32_t value);
  public:

  // optional int32 shingle_size = 10 [default = 4];
  bool has_shingle_size() const;
  private:
  bool _internal_has_shingle_size() const;
  public:
  void clear_shingle_size();
  int32_t shingle_size() const;
  void set_shingle_size(int32_t value);
  private:
  int32_t _internal_shingle_size() const;
  void _internal_set_shingle_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSideModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule > rule_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > page_term_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > page_word_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet > bad_subnet_;
  ::safe_browsing::TfLiteModelMetadata* tflite_metadata_;
  int32_t max_words_per_term_;
  int32_t version_;
  uint32_t murmur_hash_seed_;
  int32_t dom_model_version_;
  float threshold_probability_;
  int32_t max_shingles_per_page_;
  int32_t shingle_size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TfLiteModelMetadata_Threshold final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.TfLiteModelMetadata.Threshold) */ {
 public:
  inline TfLiteModelMetadata_Threshold() : TfLiteModelMetadata_Threshold(nullptr) {}
  ~TfLiteModelMetadata_Threshold() override;
  explicit PROTOBUF_CONSTEXPR TfLiteModelMetadata_Threshold(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteModelMetadata_Threshold(const TfLiteModelMetadata_Threshold& from);
  TfLiteModelMetadata_Threshold(TfLiteModelMetadata_Threshold&& from) noexcept
    : TfLiteModelMetadata_Threshold() {
    *this = ::std::move(from);
  }

  inline TfLiteModelMetadata_Threshold& operator=(const TfLiteModelMetadata_Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteModelMetadata_Threshold& operator=(TfLiteModelMetadata_Threshold&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TfLiteModelMetadata_Threshold& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteModelMetadata_Threshold* internal_default_instance() {
    return reinterpret_cast<const TfLiteModelMetadata_Threshold*>(
               &_TfLiteModelMetadata_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TfLiteModelMetadata_Threshold& a, TfLiteModelMetadata_Threshold& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TfLiteModelMetadata_Threshold* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteModelMetadata_Threshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfLiteModelMetadata_Threshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfLiteModelMetadata_Threshold>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TfLiteModelMetadata_Threshold& from);
  void MergeFrom(const TfLiteModelMetadata_Threshold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TfLiteModelMetadata_Threshold* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.TfLiteModelMetadata.Threshold";
  }
  protected:
  explicit TfLiteModelMetadata_Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kThresholdFieldNumber = 2,
  };
  // optional string label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional float threshold = 2;
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.TfLiteModelMetadata.Threshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  float threshold_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TfLiteModelMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.TfLiteModelMetadata) */ {
 public:
  inline TfLiteModelMetadata() : TfLiteModelMetadata(nullptr) {}
  ~TfLiteModelMetadata() override;
  explicit PROTOBUF_CONSTEXPR TfLiteModelMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteModelMetadata(const TfLiteModelMetadata& from);
  TfLiteModelMetadata(TfLiteModelMetadata&& from) noexcept
    : TfLiteModelMetadata() {
    *this = ::std::move(from);
  }

  inline TfLiteModelMetadata& operator=(const TfLiteModelMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteModelMetadata& operator=(TfLiteModelMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TfLiteModelMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteModelMetadata* internal_default_instance() {
    return reinterpret_cast<const TfLiteModelMetadata*>(
               &_TfLiteModelMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TfLiteModelMetadata& a, TfLiteModelMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TfLiteModelMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteModelMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfLiteModelMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfLiteModelMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TfLiteModelMetadata& from);
  void MergeFrom(const TfLiteModelMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TfLiteModelMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.TfLiteModelMetadata";
  }
  protected:
  explicit TfLiteModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TfLiteModelMetadata_Threshold Threshold;

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdsFieldNumber = 2,
    kModelVersionFieldNumber = 1,
    kInputWidthFieldNumber = 3,
    kInputHeightFieldNumber = 4,
  };
  // repeated .safe_browsing.TfLiteModelMetadata.Threshold thresholds = 2;
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  ::safe_browsing::TfLiteModelMetadata_Threshold* mutable_thresholds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::TfLiteModelMetadata_Threshold >*
      mutable_thresholds();
  private:
  const ::safe_browsing::TfLiteModelMetadata_Threshold& _internal_thresholds(int index) const;
  ::safe_browsing::TfLiteModelMetadata_Threshold* _internal_add_thresholds();
  public:
  const ::safe_browsing::TfLiteModelMetadata_Threshold& thresholds(int index) const;
  ::safe_browsing::TfLiteModelMetadata_Threshold* add_thresholds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::TfLiteModelMetadata_Threshold >&
      thresholds() const;

  // optional int32 model_version = 1;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  int32_t model_version() const;
  void set_model_version(int32_t value);
  private:
  int32_t _internal_model_version() const;
  void _internal_set_model_version(int32_t value);
  public:

  // optional int32 input_width = 3;
  bool has_input_width() const;
  private:
  bool _internal_has_input_width() const;
  public:
  void clear_input_width();
  int32_t input_width() const;
  void set_input_width(int32_t value);
  private:
  int32_t _internal_input_width() const;
  void _internal_set_input_width(int32_t value);
  public:

  // optional int32 input_height = 4;
  bool has_input_height() const;
  private:
  bool _internal_has_input_height() const;
  public:
  void clear_input_height();
  int32_t input_height() const;
  void set_input_height(int32_t value);
  private:
  int32_t _internal_input_height() const;
  void _internal_set_input_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.TfLiteModelMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::TfLiteModelMetadata_Threshold > thresholds_;
  int32_t model_version_;
  int32_t input_width_;
  int32_t input_height_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientSideModel_Rule

// repeated int32 feature = 1;
inline int ClientSideModel_Rule::_internal_feature_size() const {
  return feature_.size();
}
inline int ClientSideModel_Rule::feature_size() const {
  return _internal_feature_size();
}
inline void ClientSideModel_Rule::clear_feature() {
  feature_.Clear();
}
inline int32_t ClientSideModel_Rule::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline int32_t ClientSideModel_Rule::feature(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.Rule.feature)
  return _internal_feature(index);
}
inline void ClientSideModel_Rule::set_feature(int index, int32_t value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.Rule.feature)
}
inline void ClientSideModel_Rule::_internal_add_feature(int32_t value) {
  feature_.Add(value);
}
inline void ClientSideModel_Rule::add_feature(int32_t value) {
  _internal_add_feature(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.Rule.feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClientSideModel_Rule::_internal_feature() const {
  return feature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClientSideModel_Rule::feature() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.Rule.feature)
  return _internal_feature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClientSideModel_Rule::_internal_mutable_feature() {
  return &feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClientSideModel_Rule::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.Rule.feature)
  return _internal_mutable_feature();
}

// required float weight = 2;
inline bool ClientSideModel_Rule::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSideModel_Rule::has_weight() const {
  return _internal_has_weight();
}
inline void ClientSideModel_Rule::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ClientSideModel_Rule::_internal_weight() const {
  return weight_;
}
inline float ClientSideModel_Rule::weight() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.Rule.weight)
  return _internal_weight();
}
inline void ClientSideModel_Rule::_internal_set_weight(float value) {
  _has_bits_[0] |= 0x00000001u;
  weight_ = value;
}
inline void ClientSideModel_Rule::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.Rule.weight)
}

// -------------------------------------------------------------------

// ClientSideModel_IPSubnet

// required bytes prefix = 1;
inline bool ClientSideModel_IPSubnet::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSideModel_IPSubnet::has_prefix() const {
  return _internal_has_prefix();
}
inline void ClientSideModel_IPSubnet::clear_prefix() {
  prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSideModel_IPSubnet::prefix() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.IPSubnet.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSideModel_IPSubnet::set_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 prefix_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
inline std::string* ClientSideModel_IPSubnet::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.IPSubnet.prefix)
  return _s;
}
inline const std::string& ClientSideModel_IPSubnet::_internal_prefix() const {
  return prefix_.Get();
}
inline void ClientSideModel_IPSubnet::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSideModel_IPSubnet::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSideModel_IPSubnet::release_prefix() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSideModel.IPSubnet.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prefix_.IsDefault()) {
    prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSideModel_IPSubnet::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.SetAllocated(prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prefix_.IsDefault()) {
    prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSideModel.IPSubnet.prefix)
}

// optional int32 size = 2 [default = 128];
inline bool ClientSideModel_IPSubnet::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSideModel_IPSubnet::has_size() const {
  return _internal_has_size();
}
inline void ClientSideModel_IPSubnet::clear_size() {
  size_ = 128;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ClientSideModel_IPSubnet::_internal_size() const {
  return size_;
}
inline int32_t ClientSideModel_IPSubnet::size() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.IPSubnet.size)
  return _internal_size();
}
inline void ClientSideModel_IPSubnet::_internal_set_size(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void ClientSideModel_IPSubnet::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.IPSubnet.size)
}

// -------------------------------------------------------------------

// ClientSideModel

// repeated bytes hashes = 1;
inline int ClientSideModel::_internal_hashes_size() const {
  return hashes_.size();
}
inline int ClientSideModel::hashes_size() const {
  return _internal_hashes_size();
}
inline void ClientSideModel::clear_hashes() {
  hashes_.Clear();
}
inline std::string* ClientSideModel::add_hashes() {
  std::string* _s = _internal_add_hashes();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientSideModel.hashes)
  return _s;
}
inline const std::string& ClientSideModel::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const std::string& ClientSideModel::hashes(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.hashes)
  return _internal_hashes(index);
}
inline std::string* ClientSideModel::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.hashes)
  return hashes_.Mutable(index);
}
inline void ClientSideModel::set_hashes(int index, const std::string& value) {
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::set_hashes(int index, std::string&& value) {
  hashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::set_hashes(int index, const void* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientSideModel.hashes)
}
inline std::string* ClientSideModel::_internal_add_hashes() {
  return hashes_.Add();
}
inline void ClientSideModel::add_hashes(const std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::add_hashes(std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::add_hashes(const void* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientSideModel.hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientSideModel::hashes() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.hashes)
  return hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientSideModel::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.hashes)
  return &hashes_;
}

// repeated .safe_browsing.ClientSideModel.Rule rule = 2;
inline int ClientSideModel::_internal_rule_size() const {
  return rule_.size();
}
inline int ClientSideModel::rule_size() const {
  return _internal_rule_size();
}
inline void ClientSideModel::clear_rule() {
  rule_.Clear();
}
inline ::safe_browsing::ClientSideModel_Rule* ClientSideModel::mutable_rule(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.rule)
  return rule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >*
ClientSideModel::mutable_rule() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.rule)
  return &rule_;
}
inline const ::safe_browsing::ClientSideModel_Rule& ClientSideModel::_internal_rule(int index) const {
  return rule_.Get(index);
}
inline const ::safe_browsing::ClientSideModel_Rule& ClientSideModel::rule(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.rule)
  return _internal_rule(index);
}
inline ::safe_browsing::ClientSideModel_Rule* ClientSideModel::_internal_add_rule() {
  return rule_.Add();
}
inline ::safe_browsing::ClientSideModel_Rule* ClientSideModel::add_rule() {
  ::safe_browsing::ClientSideModel_Rule* _add = _internal_add_rule();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.rule)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >&
ClientSideModel::rule() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.rule)
  return rule_;
}

// repeated int32 page_term = 3;
inline int ClientSideModel::_internal_page_term_size() const {
  return page_term_.size();
}
inline int ClientSideModel::page_term_size() const {
  return _internal_page_term_size();
}
inline void ClientSideModel::clear_page_term() {
  page_term_.Clear();
}
inline int32_t ClientSideModel::_internal_page_term(int index) const {
  return page_term_.Get(index);
}
inline int32_t ClientSideModel::page_term(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.page_term)
  return _internal_page_term(index);
}
inline void ClientSideModel::set_page_term(int index, int32_t value) {
  page_term_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.page_term)
}
inline void ClientSideModel::_internal_add_page_term(int32_t value) {
  page_term_.Add(value);
}
inline void ClientSideModel::add_page_term(int32_t value) {
  _internal_add_page_term(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.page_term)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClientSideModel::_internal_page_term() const {
  return page_term_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClientSideModel::page_term() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.page_term)
  return _internal_page_term();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClientSideModel::_internal_mutable_page_term() {
  return &page_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClientSideModel::mutable_page_term() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.page_term)
  return _internal_mutable_page_term();
}

// repeated fixed32 page_word = 4;
inline int ClientSideModel::_internal_page_word_size() const {
  return page_word_.size();
}
inline int ClientSideModel::page_word_size() const {
  return _internal_page_word_size();
}
inline void ClientSideModel::clear_page_word() {
  page_word_.Clear();
}
inline uint32_t ClientSideModel::_internal_page_word(int index) const {
  return page_word_.Get(index);
}
inline uint32_t ClientSideModel::page_word(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.page_word)
  return _internal_page_word(index);
}
inline void ClientSideModel::set_page_word(int index, uint32_t value) {
  page_word_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.page_word)
}
inline void ClientSideModel::_internal_add_page_word(uint32_t value) {
  page_word_.Add(value);
}
inline void ClientSideModel::add_page_word(uint32_t value) {
  _internal_add_page_word(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.page_word)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ClientSideModel::_internal_page_word() const {
  return page_word_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ClientSideModel::page_word() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.page_word)
  return _internal_page_word();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ClientSideModel::_internal_mutable_page_word() {
  return &page_word_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ClientSideModel::mutable_page_word() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.page_word)
  return _internal_mutable_page_word();
}

// required int32 max_words_per_term = 5;
inline bool ClientSideModel::_internal_has_max_words_per_term() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSideModel::has_max_words_per_term() const {
  return _internal_has_max_words_per_term();
}
inline void ClientSideModel::clear_max_words_per_term() {
  max_words_per_term_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ClientSideModel::_internal_max_words_per_term() const {
  return max_words_per_term_;
}
inline int32_t ClientSideModel::max_words_per_term() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.max_words_per_term)
  return _internal_max_words_per_term();
}
inline void ClientSideModel::_internal_set_max_words_per_term(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  max_words_per_term_ = value;
}
inline void ClientSideModel::set_max_words_per_term(int32_t value) {
  _internal_set_max_words_per_term(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.max_words_per_term)
}

// optional int32 dom_model_version = 18;
inline bool ClientSideModel::_internal_has_dom_model_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientSideModel::has_dom_model_version() const {
  return _internal_has_dom_model_version();
}
inline void ClientSideModel::clear_dom_model_version() {
  dom_model_version_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t ClientSideModel::_internal_dom_model_version() const {
  return dom_model_version_;
}
inline int32_t ClientSideModel::dom_model_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.dom_model_version)
  return _internal_dom_model_version();
}
inline void ClientSideModel::_internal_set_dom_model_version(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  dom_model_version_ = value;
}
inline void ClientSideModel::set_dom_model_version(int32_t value) {
  _internal_set_dom_model_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.dom_model_version)
}

// optional int32 version = 6;
inline bool ClientSideModel::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientSideModel::has_version() const {
  return _internal_has_version();
}
inline void ClientSideModel::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ClientSideModel::_internal_version() const {
  return version_;
}
inline int32_t ClientSideModel::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.version)
  return _internal_version();
}
inline void ClientSideModel::_internal_set_version(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void ClientSideModel::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.version)
}

// repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
inline int ClientSideModel::_internal_bad_subnet_size() const {
  return bad_subnet_.size();
}
inline int ClientSideModel::bad_subnet_size() const {
  return _internal_bad_subnet_size();
}
inline void ClientSideModel::clear_bad_subnet() {
  bad_subnet_.Clear();
}
inline ::safe_browsing::ClientSideModel_IPSubnet* ClientSideModel::mutable_bad_subnet(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >*
ClientSideModel::mutable_bad_subnet() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.bad_subnet)
  return &bad_subnet_;
}
inline const ::safe_browsing::ClientSideModel_IPSubnet& ClientSideModel::_internal_bad_subnet(int index) const {
  return bad_subnet_.Get(index);
}
inline const ::safe_browsing::ClientSideModel_IPSubnet& ClientSideModel::bad_subnet(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.bad_subnet)
  return _internal_bad_subnet(index);
}
inline ::safe_browsing::ClientSideModel_IPSubnet* ClientSideModel::_internal_add_bad_subnet() {
  return bad_subnet_.Add();
}
inline ::safe_browsing::ClientSideModel_IPSubnet* ClientSideModel::add_bad_subnet() {
  ::safe_browsing::ClientSideModel_IPSubnet* _add = _internal_add_bad_subnet();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.bad_subnet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >&
ClientSideModel::bad_subnet() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_;
}

// optional fixed32 murmur_hash_seed = 8;
inline bool ClientSideModel::_internal_has_murmur_hash_seed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientSideModel::has_murmur_hash_seed() const {
  return _internal_has_murmur_hash_seed();
}
inline void ClientSideModel::clear_murmur_hash_seed() {
  murmur_hash_seed_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ClientSideModel::_internal_murmur_hash_seed() const {
  return murmur_hash_seed_;
}
inline uint32_t ClientSideModel::murmur_hash_seed() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.murmur_hash_seed)
  return _internal_murmur_hash_seed();
}
inline void ClientSideModel::_internal_set_murmur_hash_seed(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  murmur_hash_seed_ = value;
}
inline void ClientSideModel::set_murmur_hash_seed(uint32_t value) {
  _internal_set_murmur_hash_seed(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.murmur_hash_seed)
}

// optional int32 max_shingles_per_page = 9 [default = 200];
inline bool ClientSideModel::_internal_has_max_shingles_per_page() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientSideModel::has_max_shingles_per_page() const {
  return _internal_has_max_shingles_per_page();
}
inline void ClientSideModel::clear_max_shingles_per_page() {
  max_shingles_per_page_ = 200;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t ClientSideModel::_internal_max_shingles_per_page() const {
  return max_shingles_per_page_;
}
inline int32_t ClientSideModel::max_shingles_per_page() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.max_shingles_per_page)
  return _internal_max_shingles_per_page();
}
inline void ClientSideModel::_internal_set_max_shingles_per_page(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  max_shingles_per_page_ = value;
}
inline void ClientSideModel::set_max_shingles_per_page(int32_t value) {
  _internal_set_max_shingles_per_page(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.max_shingles_per_page)
}

// optional int32 shingle_size = 10 [default = 4];
inline bool ClientSideModel::_internal_has_shingle_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientSideModel::has_shingle_size() const {
  return _internal_has_shingle_size();
}
inline void ClientSideModel::clear_shingle_size() {
  shingle_size_ = 4;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t ClientSideModel::_internal_shingle_size() const {
  return shingle_size_;
}
inline int32_t ClientSideModel::shingle_size() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.shingle_size)
  return _internal_shingle_size();
}
inline void ClientSideModel::_internal_set_shingle_size(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  shingle_size_ = value;
}
inline void ClientSideModel::set_shingle_size(int32_t value) {
  _internal_set_shingle_size(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.shingle_size)
}

// optional float threshold_probability = 11 [default = 0.5];
inline bool ClientSideModel::_internal_has_threshold_probability() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientSideModel::has_threshold_probability() const {
  return _internal_has_threshold_probability();
}
inline void ClientSideModel::clear_threshold_probability() {
  threshold_probability_ = 0.5f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ClientSideModel::_internal_threshold_probability() const {
  return threshold_probability_;
}
inline float ClientSideModel::threshold_probability() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.threshold_probability)
  return _internal_threshold_probability();
}
inline void ClientSideModel::_internal_set_threshold_probability(float value) {
  _has_bits_[0] |= 0x00000020u;
  threshold_probability_ = value;
}
inline void ClientSideModel::set_threshold_probability(float value) {
  _internal_set_threshold_probability(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.threshold_probability)
}

// optional .safe_browsing.TfLiteModelMetadata tflite_metadata = 17;
inline bool ClientSideModel::_internal_has_tflite_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tflite_metadata_ != nullptr);
  return value;
}
inline bool ClientSideModel::has_tflite_metadata() const {
  return _internal_has_tflite_metadata();
}
inline void ClientSideModel::clear_tflite_metadata() {
  if (tflite_metadata_ != nullptr) tflite_metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::TfLiteModelMetadata& ClientSideModel::_internal_tflite_metadata() const {
  const ::safe_browsing::TfLiteModelMetadata* p = tflite_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::TfLiteModelMetadata&>(
      ::safe_browsing::_TfLiteModelMetadata_default_instance_);
}
inline const ::safe_browsing::TfLiteModelMetadata& ClientSideModel::tflite_metadata() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.tflite_metadata)
  return _internal_tflite_metadata();
}
inline void ClientSideModel::unsafe_arena_set_allocated_tflite_metadata(
    ::safe_browsing::TfLiteModelMetadata* tflite_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tflite_metadata_);
  }
  tflite_metadata_ = tflite_metadata;
  if (tflite_metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSideModel.tflite_metadata)
}
inline ::safe_browsing::TfLiteModelMetadata* ClientSideModel::release_tflite_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::TfLiteModelMetadata* temp = tflite_metadata_;
  tflite_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::TfLiteModelMetadata* ClientSideModel::unsafe_arena_release_tflite_metadata() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSideModel.tflite_metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::TfLiteModelMetadata* temp = tflite_metadata_;
  tflite_metadata_ = nullptr;
  return temp;
}
inline ::safe_browsing::TfLiteModelMetadata* ClientSideModel::_internal_mutable_tflite_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (tflite_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::TfLiteModelMetadata>(GetArenaForAllocation());
    tflite_metadata_ = p;
  }
  return tflite_metadata_;
}
inline ::safe_browsing::TfLiteModelMetadata* ClientSideModel::mutable_tflite_metadata() {
  ::safe_browsing::TfLiteModelMetadata* _msg = _internal_mutable_tflite_metadata();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.tflite_metadata)
  return _msg;
}
inline void ClientSideModel::set_allocated_tflite_metadata(::safe_browsing::TfLiteModelMetadata* tflite_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tflite_metadata_;
  }
  if (tflite_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tflite_metadata);
    if (message_arena != submessage_arena) {
      tflite_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tflite_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tflite_metadata_ = tflite_metadata;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSideModel.tflite_metadata)
}

// -------------------------------------------------------------------

// TfLiteModelMetadata_Threshold

// optional string label = 1;
inline bool TfLiteModelMetadata_Threshold::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TfLiteModelMetadata_Threshold::has_label() const {
  return _internal_has_label();
}
inline void TfLiteModelMetadata_Threshold::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TfLiteModelMetadata_Threshold::label() const {
  // @@protoc_insertion_point(field_get:safe_browsing.TfLiteModelMetadata.Threshold.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfLiteModelMetadata_Threshold::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.TfLiteModelMetadata.Threshold.label)
}
inline std::string* TfLiteModelMetadata_Threshold::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:safe_browsing.TfLiteModelMetadata.Threshold.label)
  return _s;
}
inline const std::string& TfLiteModelMetadata_Threshold::_internal_label() const {
  return label_.Get();
}
inline void TfLiteModelMetadata_Threshold::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(value, GetArenaForAllocation());
}
inline std::string* TfLiteModelMetadata_Threshold::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(GetArenaForAllocation());
}
inline std::string* TfLiteModelMetadata_Threshold::release_label() {
  // @@protoc_insertion_point(field_release:safe_browsing.TfLiteModelMetadata.Threshold.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TfLiteModelMetadata_Threshold::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.TfLiteModelMetadata.Threshold.label)
}

// optional float threshold = 2;
inline bool TfLiteModelMetadata_Threshold::_internal_has_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfLiteModelMetadata_Threshold::has_threshold() const {
  return _internal_has_threshold();
}
inline void TfLiteModelMetadata_Threshold::clear_threshold() {
  threshold_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TfLiteModelMetadata_Threshold::_internal_threshold() const {
  return threshold_;
}
inline float TfLiteModelMetadata_Threshold::threshold() const {
  // @@protoc_insertion_point(field_get:safe_browsing.TfLiteModelMetadata.Threshold.threshold)
  return _internal_threshold();
}
inline void TfLiteModelMetadata_Threshold::_internal_set_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  threshold_ = value;
}
inline void TfLiteModelMetadata_Threshold::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:safe_browsing.TfLiteModelMetadata.Threshold.threshold)
}

// -------------------------------------------------------------------

// TfLiteModelMetadata

// optional int32 model_version = 1;
inline bool TfLiteModelMetadata::_internal_has_model_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TfLiteModelMetadata::has_model_version() const {
  return _internal_has_model_version();
}
inline void TfLiteModelMetadata::clear_model_version() {
  model_version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TfLiteModelMetadata::_internal_model_version() const {
  return model_version_;
}
inline int32_t TfLiteModelMetadata::model_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.TfLiteModelMetadata.model_version)
  return _internal_model_version();
}
inline void TfLiteModelMetadata::_internal_set_model_version(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  model_version_ = value;
}
inline void TfLiteModelMetadata::set_model_version(int32_t value) {
  _internal_set_model_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.TfLiteModelMetadata.model_version)
}

// repeated .safe_browsing.TfLiteModelMetadata.Threshold thresholds = 2;
inline int TfLiteModelMetadata::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int TfLiteModelMetadata::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void TfLiteModelMetadata::clear_thresholds() {
  thresholds_.Clear();
}
inline ::safe_browsing::TfLiteModelMetadata_Threshold* TfLiteModelMetadata::mutable_thresholds(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.TfLiteModelMetadata.thresholds)
  return thresholds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::TfLiteModelMetadata_Threshold >*
TfLiteModelMetadata::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.TfLiteModelMetadata.thresholds)
  return &thresholds_;
}
inline const ::safe_browsing::TfLiteModelMetadata_Threshold& TfLiteModelMetadata::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline const ::safe_browsing::TfLiteModelMetadata_Threshold& TfLiteModelMetadata::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.TfLiteModelMetadata.thresholds)
  return _internal_thresholds(index);
}
inline ::safe_browsing::TfLiteModelMetadata_Threshold* TfLiteModelMetadata::_internal_add_thresholds() {
  return thresholds_.Add();
}
inline ::safe_browsing::TfLiteModelMetadata_Threshold* TfLiteModelMetadata::add_thresholds() {
  ::safe_browsing::TfLiteModelMetadata_Threshold* _add = _internal_add_thresholds();
  // @@protoc_insertion_point(field_add:safe_browsing.TfLiteModelMetadata.thresholds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::TfLiteModelMetadata_Threshold >&
TfLiteModelMetadata::thresholds() const {
  // @@protoc_insertion_point(field_list:safe_browsing.TfLiteModelMetadata.thresholds)
  return thresholds_;
}

// optional int32 input_width = 3;
inline bool TfLiteModelMetadata::_internal_has_input_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfLiteModelMetadata::has_input_width() const {
  return _internal_has_input_width();
}
inline void TfLiteModelMetadata::clear_input_width() {
  input_width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TfLiteModelMetadata::_internal_input_width() const {
  return input_width_;
}
inline int32_t TfLiteModelMetadata::input_width() const {
  // @@protoc_insertion_point(field_get:safe_browsing.TfLiteModelMetadata.input_width)
  return _internal_input_width();
}
inline void TfLiteModelMetadata::_internal_set_input_width(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  input_width_ = value;
}
inline void TfLiteModelMetadata::set_input_width(int32_t value) {
  _internal_set_input_width(value);
  // @@protoc_insertion_point(field_set:safe_browsing.TfLiteModelMetadata.input_width)
}

// optional int32 input_height = 4;
inline bool TfLiteModelMetadata::_internal_has_input_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TfLiteModelMetadata::has_input_height() const {
  return _internal_has_input_height();
}
inline void TfLiteModelMetadata::clear_input_height() {
  input_height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TfLiteModelMetadata::_internal_input_height() const {
  return input_height_;
}
inline int32_t TfLiteModelMetadata::input_height() const {
  // @@protoc_insertion_point(field_get:safe_browsing.TfLiteModelMetadata.input_height)
  return _internal_input_height();
}
inline void TfLiteModelMetadata::_internal_set_input_height(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  input_height_ = value;
}
inline void TfLiteModelMetadata::set_input_height(int32_t value) {
  _internal_set_input_height(value);
  // @@protoc_insertion_point(field_set:safe_browsing.TfLiteModelMetadata.input_height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fclient_5fmodel_2eproto
