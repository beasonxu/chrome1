// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/safe_browsing/core/common/proto/csd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto {
  static const uint32_t offsets[];
};
namespace safe_browsing {
class ChromeUserPopulation;
struct ChromeUserPopulationDefaultTypeInternal;
extern ChromeUserPopulationDefaultTypeInternal _ChromeUserPopulation_default_instance_;
class ChromeUserPopulation_PageLoadToken;
struct ChromeUserPopulation_PageLoadTokenDefaultTypeInternal;
extern ChromeUserPopulation_PageLoadTokenDefaultTypeInternal _ChromeUserPopulation_PageLoadToken_default_instance_;
class ClientDownloadReport;
struct ClientDownloadReportDefaultTypeInternal;
extern ClientDownloadReportDefaultTypeInternal _ClientDownloadReport_default_instance_;
class ClientDownloadReport_UserInformation;
struct ClientDownloadReport_UserInformationDefaultTypeInternal;
extern ClientDownloadReport_UserInformationDefaultTypeInternal _ClientDownloadReport_UserInformation_default_instance_;
class ClientDownloadRequest;
struct ClientDownloadRequestDefaultTypeInternal;
extern ClientDownloadRequestDefaultTypeInternal _ClientDownloadRequest_default_instance_;
class ClientDownloadRequest_ArchiveSummary;
struct ClientDownloadRequest_ArchiveSummaryDefaultTypeInternal;
extern ClientDownloadRequest_ArchiveSummaryDefaultTypeInternal _ClientDownloadRequest_ArchiveSummary_default_instance_;
class ClientDownloadRequest_ArchivedBinary;
struct ClientDownloadRequest_ArchivedBinaryDefaultTypeInternal;
extern ClientDownloadRequest_ArchivedBinaryDefaultTypeInternal _ClientDownloadRequest_ArchivedBinary_default_instance_;
class ClientDownloadRequest_CertificateChain;
struct ClientDownloadRequest_CertificateChainDefaultTypeInternal;
extern ClientDownloadRequest_CertificateChainDefaultTypeInternal _ClientDownloadRequest_CertificateChain_default_instance_;
class ClientDownloadRequest_CertificateChain_Element;
struct ClientDownloadRequest_CertificateChain_ElementDefaultTypeInternal;
extern ClientDownloadRequest_CertificateChain_ElementDefaultTypeInternal _ClientDownloadRequest_CertificateChain_Element_default_instance_;
class ClientDownloadRequest_DetachedCodeSignature;
struct ClientDownloadRequest_DetachedCodeSignatureDefaultTypeInternal;
extern ClientDownloadRequest_DetachedCodeSignatureDefaultTypeInternal _ClientDownloadRequest_DetachedCodeSignature_default_instance_;
class ClientDownloadRequest_Digests;
struct ClientDownloadRequest_DigestsDefaultTypeInternal;
extern ClientDownloadRequest_DigestsDefaultTypeInternal _ClientDownloadRequest_Digests_default_instance_;
class ClientDownloadRequest_DocumentInfo;
struct ClientDownloadRequest_DocumentInfoDefaultTypeInternal;
extern ClientDownloadRequest_DocumentInfoDefaultTypeInternal _ClientDownloadRequest_DocumentInfo_default_instance_;
class ClientDownloadRequest_DocumentProcessingInfo;
struct ClientDownloadRequest_DocumentProcessingInfoDefaultTypeInternal;
extern ClientDownloadRequest_DocumentProcessingInfoDefaultTypeInternal _ClientDownloadRequest_DocumentProcessingInfo_default_instance_;
class ClientDownloadRequest_DocumentSummary;
struct ClientDownloadRequest_DocumentSummaryDefaultTypeInternal;
extern ClientDownloadRequest_DocumentSummaryDefaultTypeInternal _ClientDownloadRequest_DocumentSummary_default_instance_;
class ClientDownloadRequest_ExtendedAttr;
struct ClientDownloadRequest_ExtendedAttrDefaultTypeInternal;
extern ClientDownloadRequest_ExtendedAttrDefaultTypeInternal _ClientDownloadRequest_ExtendedAttr_default_instance_;
class ClientDownloadRequest_ImageHeaders;
struct ClientDownloadRequest_ImageHeadersDefaultTypeInternal;
extern ClientDownloadRequest_ImageHeadersDefaultTypeInternal _ClientDownloadRequest_ImageHeaders_default_instance_;
class ClientDownloadRequest_MachOHeaders;
struct ClientDownloadRequest_MachOHeadersDefaultTypeInternal;
extern ClientDownloadRequest_MachOHeadersDefaultTypeInternal _ClientDownloadRequest_MachOHeaders_default_instance_;
class ClientDownloadRequest_MachOHeaders_LoadCommand;
struct ClientDownloadRequest_MachOHeaders_LoadCommandDefaultTypeInternal;
extern ClientDownloadRequest_MachOHeaders_LoadCommandDefaultTypeInternal _ClientDownloadRequest_MachOHeaders_LoadCommand_default_instance_;
class ClientDownloadRequest_PEImageHeaders;
struct ClientDownloadRequest_PEImageHeadersDefaultTypeInternal;
extern ClientDownloadRequest_PEImageHeadersDefaultTypeInternal _ClientDownloadRequest_PEImageHeaders_default_instance_;
class ClientDownloadRequest_PEImageHeaders_DebugData;
struct ClientDownloadRequest_PEImageHeaders_DebugDataDefaultTypeInternal;
extern ClientDownloadRequest_PEImageHeaders_DebugDataDefaultTypeInternal _ClientDownloadRequest_PEImageHeaders_DebugData_default_instance_;
class ClientDownloadRequest_Resource;
struct ClientDownloadRequest_ResourceDefaultTypeInternal;
extern ClientDownloadRequest_ResourceDefaultTypeInternal _ClientDownloadRequest_Resource_default_instance_;
class ClientDownloadRequest_SignatureInfo;
struct ClientDownloadRequest_SignatureInfoDefaultTypeInternal;
extern ClientDownloadRequest_SignatureInfoDefaultTypeInternal _ClientDownloadRequest_SignatureInfo_default_instance_;
class ClientDownloadResponse;
struct ClientDownloadResponseDefaultTypeInternal;
extern ClientDownloadResponseDefaultTypeInternal _ClientDownloadResponse_default_instance_;
class ClientDownloadResponse_MoreInfo;
struct ClientDownloadResponse_MoreInfoDefaultTypeInternal;
extern ClientDownloadResponse_MoreInfoDefaultTypeInternal _ClientDownloadResponse_MoreInfo_default_instance_;
class ClientIncidentReport;
struct ClientIncidentReportDefaultTypeInternal;
extern ClientIncidentReportDefaultTypeInternal _ClientIncidentReport_default_instance_;
class ClientIncidentReport_DownloadDetails;
struct ClientIncidentReport_DownloadDetailsDefaultTypeInternal;
extern ClientIncidentReport_DownloadDetailsDefaultTypeInternal _ClientIncidentReport_DownloadDetails_default_instance_;
class ClientIncidentReport_EnvironmentData;
struct ClientIncidentReport_EnvironmentDataDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentDataDefaultTypeInternal _ClientIncidentReport_EnvironmentData_default_instance_;
class ClientIncidentReport_EnvironmentData_Machine;
struct ClientIncidentReport_EnvironmentData_MachineDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_MachineDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Machine_default_instance_;
class ClientIncidentReport_EnvironmentData_OS;
struct ClientIncidentReport_EnvironmentData_OSDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_OSDefaultTypeInternal _ClientIncidentReport_EnvironmentData_OS_default_instance_;
class ClientIncidentReport_EnvironmentData_OS_RegistryKey;
struct ClientIncidentReport_EnvironmentData_OS_RegistryKeyDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_OS_RegistryKeyDefaultTypeInternal _ClientIncidentReport_EnvironmentData_OS_RegistryKey_default_instance_;
class ClientIncidentReport_EnvironmentData_OS_RegistryValue;
struct ClientIncidentReport_EnvironmentData_OS_RegistryValueDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_OS_RegistryValueDefaultTypeInternal _ClientIncidentReport_EnvironmentData_OS_RegistryValue_default_instance_;
class ClientIncidentReport_EnvironmentData_Process;
struct ClientIncidentReport_EnvironmentData_ProcessDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_ProcessDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_default_instance_;
class ClientIncidentReport_EnvironmentData_Process_Dll;
struct ClientIncidentReport_EnvironmentData_Process_DllDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_Process_DllDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_Dll_default_instance_;
class ClientIncidentReport_EnvironmentData_Process_ModuleState;
struct ClientIncidentReport_EnvironmentData_Process_ModuleStateDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_Process_ModuleStateDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_ModuleState_default_instance_;
class ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification;
struct ClientIncidentReport_EnvironmentData_Process_ModuleState_ModificationDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_Process_ModuleState_ModificationDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification_default_instance_;
class ClientIncidentReport_EnvironmentData_Process_NetworkProvider;
struct ClientIncidentReport_EnvironmentData_Process_NetworkProviderDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_Process_NetworkProviderDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_NetworkProvider_default_instance_;
class ClientIncidentReport_EnvironmentData_Process_Patch;
struct ClientIncidentReport_EnvironmentData_Process_PatchDefaultTypeInternal;
extern ClientIncidentReport_EnvironmentData_Process_PatchDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_Patch_default_instance_;
class ClientIncidentReport_ExtensionData;
struct ClientIncidentReport_ExtensionDataDefaultTypeInternal;
extern ClientIncidentReport_ExtensionDataDefaultTypeInternal _ClientIncidentReport_ExtensionData_default_instance_;
class ClientIncidentReport_ExtensionData_ExtensionInfo;
struct ClientIncidentReport_ExtensionData_ExtensionInfoDefaultTypeInternal;
extern ClientIncidentReport_ExtensionData_ExtensionInfoDefaultTypeInternal _ClientIncidentReport_ExtensionData_ExtensionInfo_default_instance_;
class ClientIncidentReport_IncidentData;
struct ClientIncidentReport_IncidentDataDefaultTypeInternal;
extern ClientIncidentReport_IncidentDataDefaultTypeInternal _ClientIncidentReport_IncidentData_default_instance_;
class ClientIncidentReport_IncidentData_BinaryIntegrityIncident;
struct ClientIncidentReport_IncidentData_BinaryIntegrityIncidentDefaultTypeInternal;
extern ClientIncidentReport_IncidentData_BinaryIntegrityIncidentDefaultTypeInternal _ClientIncidentReport_IncidentData_BinaryIntegrityIncident_default_instance_;
class ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile;
struct ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFileDefaultTypeInternal;
extern ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFileDefaultTypeInternal _ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile_default_instance_;
class ClientIncidentReport_IncidentData_ResourceRequestIncident;
struct ClientIncidentReport_IncidentData_ResourceRequestIncidentDefaultTypeInternal;
extern ClientIncidentReport_IncidentData_ResourceRequestIncidentDefaultTypeInternal _ClientIncidentReport_IncidentData_ResourceRequestIncident_default_instance_;
class ClientIncidentReport_IncidentData_TrackedPreferenceIncident;
struct ClientIncidentReport_IncidentData_TrackedPreferenceIncidentDefaultTypeInternal;
extern ClientIncidentReport_IncidentData_TrackedPreferenceIncidentDefaultTypeInternal _ClientIncidentReport_IncidentData_TrackedPreferenceIncident_default_instance_;
class ClientIncidentReport_NonBinaryDownloadDetails;
struct ClientIncidentReport_NonBinaryDownloadDetailsDefaultTypeInternal;
extern ClientIncidentReport_NonBinaryDownloadDetailsDefaultTypeInternal _ClientIncidentReport_NonBinaryDownloadDetails_default_instance_;
class ClientIncidentResponse;
struct ClientIncidentResponseDefaultTypeInternal;
extern ClientIncidentResponseDefaultTypeInternal _ClientIncidentResponse_default_instance_;
class ClientIncidentResponse_EnvironmentRequest;
struct ClientIncidentResponse_EnvironmentRequestDefaultTypeInternal;
extern ClientIncidentResponse_EnvironmentRequestDefaultTypeInternal _ClientIncidentResponse_EnvironmentRequest_default_instance_;
class ClientPhishingRequest;
struct ClientPhishingRequestDefaultTypeInternal;
extern ClientPhishingRequestDefaultTypeInternal _ClientPhishingRequest_default_instance_;
class ClientPhishingRequest_CategoryScore;
struct ClientPhishingRequest_CategoryScoreDefaultTypeInternal;
extern ClientPhishingRequest_CategoryScoreDefaultTypeInternal _ClientPhishingRequest_CategoryScore_default_instance_;
class ClientPhishingRequest_Feature;
struct ClientPhishingRequest_FeatureDefaultTypeInternal;
extern ClientPhishingRequest_FeatureDefaultTypeInternal _ClientPhishingRequest_Feature_default_instance_;
class ClientPhishingResponse;
struct ClientPhishingResponseDefaultTypeInternal;
extern ClientPhishingResponseDefaultTypeInternal _ClientPhishingResponse_default_instance_;
class ClientSafeBrowsingReportRequest;
struct ClientSafeBrowsingReportRequestDefaultTypeInternal;
extern ClientSafeBrowsingReportRequestDefaultTypeInternal _ClientSafeBrowsingReportRequest_default_instance_;
class ClientSafeBrowsingReportRequest_DownloadItemInfo;
struct ClientSafeBrowsingReportRequest_DownloadItemInfoDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_DownloadItemInfoDefaultTypeInternal _ClientSafeBrowsingReportRequest_DownloadItemInfo_default_instance_;
class ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests;
struct ClientSafeBrowsingReportRequest_DownloadItemInfo_DigestsDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_DownloadItemInfo_DigestsDefaultTypeInternal _ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests_default_instance_;
class ClientSafeBrowsingReportRequest_HTTPHeader;
struct ClientSafeBrowsingReportRequest_HTTPHeaderDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_HTTPHeaderDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPHeader_default_instance_;
class ClientSafeBrowsingReportRequest_HTTPRequest;
struct ClientSafeBrowsingReportRequest_HTTPRequestDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_HTTPRequestDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPRequest_default_instance_;
class ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine;
struct ClientSafeBrowsingReportRequest_HTTPRequest_FirstLineDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_HTTPRequest_FirstLineDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine_default_instance_;
class ClientSafeBrowsingReportRequest_HTTPResponse;
struct ClientSafeBrowsingReportRequest_HTTPResponseDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_HTTPResponseDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPResponse_default_instance_;
class ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine;
struct ClientSafeBrowsingReportRequest_HTTPResponse_FirstLineDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_HTTPResponse_FirstLineDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine_default_instance_;
class ClientSafeBrowsingReportRequest_Resource;
struct ClientSafeBrowsingReportRequest_ResourceDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_ResourceDefaultTypeInternal _ClientSafeBrowsingReportRequest_Resource_default_instance_;
class ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties;
struct ClientSafeBrowsingReportRequest_SafeBrowsingClientPropertiesDefaultTypeInternal;
extern ClientSafeBrowsingReportRequest_SafeBrowsingClientPropertiesDefaultTypeInternal _ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties_default_instance_;
class ClientUploadResponse;
struct ClientUploadResponseDefaultTypeInternal;
extern ClientUploadResponseDefaultTypeInternal _ClientUploadResponse_default_instance_;
class DomFeatures;
struct DomFeaturesDefaultTypeInternal;
extern DomFeaturesDefaultTypeInternal _DomFeatures_default_instance_;
class DomFeatures_Feature;
struct DomFeatures_FeatureDefaultTypeInternal;
extern DomFeatures_FeatureDefaultTypeInternal _DomFeatures_Feature_default_instance_;
class DownloadMetadata;
struct DownloadMetadataDefaultTypeInternal;
extern DownloadMetadataDefaultTypeInternal _DownloadMetadata_default_instance_;
class ExtensionTelemetryReportRequest;
struct ExtensionTelemetryReportRequestDefaultTypeInternal;
extern ExtensionTelemetryReportRequestDefaultTypeInternal _ExtensionTelemetryReportRequest_default_instance_;
class ExtensionTelemetryReportRequest_ExtensionInfo;
struct ExtensionTelemetryReportRequest_ExtensionInfoDefaultTypeInternal;
extern ExtensionTelemetryReportRequest_ExtensionInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_ExtensionInfo_default_instance_;
class ExtensionTelemetryReportRequest_Report;
struct ExtensionTelemetryReportRequest_ReportDefaultTypeInternal;
extern ExtensionTelemetryReportRequest_ReportDefaultTypeInternal _ExtensionTelemetryReportRequest_Report_default_instance_;
class ExtensionTelemetryReportRequest_SignalInfo;
struct ExtensionTelemetryReportRequest_SignalInfoDefaultTypeInternal;
extern ExtensionTelemetryReportRequest_SignalInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_default_instance_;
class ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo;
struct ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfoDefaultTypeInternal;
extern ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_default_instance_;
class ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo;
struct ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfoDefaultTypeInternal;
extern ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo_default_instance_;
class ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo;
struct ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfoDefaultTypeInternal;
extern ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_default_instance_;
class ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo;
struct ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfoDefaultTypeInternal;
extern ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo_default_instance_;
class ExtensionTelemetryResponse;
struct ExtensionTelemetryResponseDefaultTypeInternal;
extern ExtensionTelemetryResponseDefaultTypeInternal _ExtensionTelemetryResponse_default_instance_;
class ExtensionWebStoreInstallRequest;
struct ExtensionWebStoreInstallRequestDefaultTypeInternal;
extern ExtensionWebStoreInstallRequestDefaultTypeInternal _ExtensionWebStoreInstallRequest_default_instance_;
class HTMLElement;
struct HTMLElementDefaultTypeInternal;
extern HTMLElementDefaultTypeInternal _HTMLElement_default_instance_;
class HTMLElement_Attribute;
struct HTMLElement_AttributeDefaultTypeInternal;
extern HTMLElement_AttributeDefaultTypeInternal _HTMLElement_Attribute_default_instance_;
class LoginReputationClientRequest;
struct LoginReputationClientRequestDefaultTypeInternal;
extern LoginReputationClientRequestDefaultTypeInternal _LoginReputationClientRequest_default_instance_;
class LoginReputationClientRequest_Frame;
struct LoginReputationClientRequest_FrameDefaultTypeInternal;
extern LoginReputationClientRequest_FrameDefaultTypeInternal _LoginReputationClientRequest_Frame_default_instance_;
class LoginReputationClientRequest_Frame_Form;
struct LoginReputationClientRequest_Frame_FormDefaultTypeInternal;
extern LoginReputationClientRequest_Frame_FormDefaultTypeInternal _LoginReputationClientRequest_Frame_Form_default_instance_;
class LoginReputationClientRequest_PasswordReuseEvent;
struct LoginReputationClientRequest_PasswordReuseEventDefaultTypeInternal;
extern LoginReputationClientRequest_PasswordReuseEventDefaultTypeInternal _LoginReputationClientRequest_PasswordReuseEvent_default_instance_;
class LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType;
struct LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountTypeDefaultTypeInternal;
extern LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountTypeDefaultTypeInternal _LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_default_instance_;
class LoginReputationClientRequest_ReferringAppInfo;
struct LoginReputationClientRequest_ReferringAppInfoDefaultTypeInternal;
extern LoginReputationClientRequest_ReferringAppInfoDefaultTypeInternal _LoginReputationClientRequest_ReferringAppInfo_default_instance_;
class LoginReputationClientRequest_UrlDisplayExperiment;
struct LoginReputationClientRequest_UrlDisplayExperimentDefaultTypeInternal;
extern LoginReputationClientRequest_UrlDisplayExperimentDefaultTypeInternal _LoginReputationClientRequest_UrlDisplayExperiment_default_instance_;
class LoginReputationClientResponse;
struct LoginReputationClientResponseDefaultTypeInternal;
extern LoginReputationClientResponseDefaultTypeInternal _LoginReputationClientResponse_default_instance_;
class ReferrerChainEntry;
struct ReferrerChainEntryDefaultTypeInternal;
extern ReferrerChainEntryDefaultTypeInternal _ReferrerChainEntry_default_instance_;
class ReferrerChainEntry_ServerRedirect;
struct ReferrerChainEntry_ServerRedirectDefaultTypeInternal;
extern ReferrerChainEntry_ServerRedirectDefaultTypeInternal _ReferrerChainEntry_ServerRedirect_default_instance_;
class ReferrerChainOptions;
struct ReferrerChainOptionsDefaultTypeInternal;
extern ReferrerChainOptionsDefaultTypeInternal _ReferrerChainOptions_default_instance_;
class VisualFeatures;
struct VisualFeaturesDefaultTypeInternal;
extern VisualFeaturesDefaultTypeInternal _VisualFeatures_default_instance_;
class VisualFeatures_BlurredImage;
struct VisualFeatures_BlurredImageDefaultTypeInternal;
extern VisualFeatures_BlurredImageDefaultTypeInternal _VisualFeatures_BlurredImage_default_instance_;
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> ::safe_browsing::ChromeUserPopulation* Arena::CreateMaybeMessage<::safe_browsing::ChromeUserPopulation>(Arena*);
template<> ::safe_browsing::ChromeUserPopulation_PageLoadToken* Arena::CreateMaybeMessage<::safe_browsing::ChromeUserPopulation_PageLoadToken>(Arena*);
template<> ::safe_browsing::ClientDownloadReport* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadReport>(Arena*);
template<> ::safe_browsing::ClientDownloadReport_UserInformation* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadReport_UserInformation>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_ArchiveSummary* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ArchiveSummary>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_ArchivedBinary* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ArchivedBinary>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_CertificateChain* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_CertificateChain>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_CertificateChain_Element* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_CertificateChain_Element>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_DetachedCodeSignature>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_Digests* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_Digests>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_DocumentInfo* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_DocumentInfo>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_DocumentSummary* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_DocumentSummary>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_ExtendedAttr* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ExtendedAttr>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_ImageHeaders* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ImageHeaders>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_MachOHeaders* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_MachOHeaders>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_PEImageHeaders* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_PEImageHeaders>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_Resource* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_Resource>(Arena*);
template<> ::safe_browsing::ClientDownloadRequest_SignatureInfo* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_SignatureInfo>(Arena*);
template<> ::safe_browsing::ClientDownloadResponse* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadResponse>(Arena*);
template<> ::safe_browsing::ClientDownloadResponse_MoreInfo* Arena::CreateMaybeMessage<::safe_browsing::ClientDownloadResponse_MoreInfo>(Arena*);
template<> ::safe_browsing::ClientIncidentReport* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_DownloadDetails* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_DownloadDetails>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Machine>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_OS>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Process>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_ExtensionData* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_ExtensionData>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_IncidentData* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_IncidentData>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident>(Arena*);
template<> ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails>(Arena*);
template<> ::safe_browsing::ClientIncidentResponse* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentResponse>(Arena*);
template<> ::safe_browsing::ClientIncidentResponse_EnvironmentRequest* Arena::CreateMaybeMessage<::safe_browsing::ClientIncidentResponse_EnvironmentRequest>(Arena*);
template<> ::safe_browsing::ClientPhishingRequest* Arena::CreateMaybeMessage<::safe_browsing::ClientPhishingRequest>(Arena*);
template<> ::safe_browsing::ClientPhishingRequest_CategoryScore* Arena::CreateMaybeMessage<::safe_browsing::ClientPhishingRequest_CategoryScore>(Arena*);
template<> ::safe_browsing::ClientPhishingRequest_Feature* Arena::CreateMaybeMessage<::safe_browsing::ClientPhishingRequest_Feature>(Arena*);
template<> ::safe_browsing::ClientPhishingResponse* Arena::CreateMaybeMessage<::safe_browsing::ClientPhishingResponse>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_Resource* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_Resource>(Arena*);
template<> ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* Arena::CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties>(Arena*);
template<> ::safe_browsing::ClientUploadResponse* Arena::CreateMaybeMessage<::safe_browsing::ClientUploadResponse>(Arena*);
template<> ::safe_browsing::DomFeatures* Arena::CreateMaybeMessage<::safe_browsing::DomFeatures>(Arena*);
template<> ::safe_browsing::DomFeatures_Feature* Arena::CreateMaybeMessage<::safe_browsing::DomFeatures_Feature>(Arena*);
template<> ::safe_browsing::DownloadMetadata* Arena::CreateMaybeMessage<::safe_browsing::DownloadMetadata>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryReportRequest* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryReportRequest_Report* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_Report>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo>(Arena*);
template<> ::safe_browsing::ExtensionTelemetryResponse* Arena::CreateMaybeMessage<::safe_browsing::ExtensionTelemetryResponse>(Arena*);
template<> ::safe_browsing::ExtensionWebStoreInstallRequest* Arena::CreateMaybeMessage<::safe_browsing::ExtensionWebStoreInstallRequest>(Arena*);
template<> ::safe_browsing::HTMLElement* Arena::CreateMaybeMessage<::safe_browsing::HTMLElement>(Arena*);
template<> ::safe_browsing::HTMLElement_Attribute* Arena::CreateMaybeMessage<::safe_browsing::HTMLElement_Attribute>(Arena*);
template<> ::safe_browsing::LoginReputationClientRequest* Arena::CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest>(Arena*);
template<> ::safe_browsing::LoginReputationClientRequest_Frame* Arena::CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_Frame>(Arena*);
template<> ::safe_browsing::LoginReputationClientRequest_Frame_Form* Arena::CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_Frame_Form>(Arena*);
template<> ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* Arena::CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent>(Arena*);
template<> ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* Arena::CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType>(Arena*);
template<> ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* Arena::CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_ReferringAppInfo>(Arena*);
template<> ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* Arena::CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment>(Arena*);
template<> ::safe_browsing::LoginReputationClientResponse* Arena::CreateMaybeMessage<::safe_browsing::LoginReputationClientResponse>(Arena*);
template<> ::safe_browsing::ReferrerChainEntry* Arena::CreateMaybeMessage<::safe_browsing::ReferrerChainEntry>(Arena*);
template<> ::safe_browsing::ReferrerChainEntry_ServerRedirect* Arena::CreateMaybeMessage<::safe_browsing::ReferrerChainEntry_ServerRedirect>(Arena*);
template<> ::safe_browsing::ReferrerChainOptions* Arena::CreateMaybeMessage<::safe_browsing::ReferrerChainOptions>(Arena*);
template<> ::safe_browsing::VisualFeatures* Arena::CreateMaybeMessage<::safe_browsing::VisualFeatures>(Arena*);
template<> ::safe_browsing::VisualFeatures_BlurredImage* Arena::CreateMaybeMessage<::safe_browsing::VisualFeatures_BlurredImage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safe_browsing {

enum ChromeUserPopulation_PageLoadToken_TokenSource : int {
  ChromeUserPopulation_PageLoadToken_TokenSource_SOURCE_UNSPECIFIED = 0,
  ChromeUserPopulation_PageLoadToken_TokenSource_CLIENT_GENERATION = 1
};
bool ChromeUserPopulation_PageLoadToken_TokenSource_IsValid(int value);
constexpr ChromeUserPopulation_PageLoadToken_TokenSource ChromeUserPopulation_PageLoadToken_TokenSource_TokenSource_MIN = ChromeUserPopulation_PageLoadToken_TokenSource_SOURCE_UNSPECIFIED;
constexpr ChromeUserPopulation_PageLoadToken_TokenSource ChromeUserPopulation_PageLoadToken_TokenSource_TokenSource_MAX = ChromeUserPopulation_PageLoadToken_TokenSource_CLIENT_GENERATION;
constexpr int ChromeUserPopulation_PageLoadToken_TokenSource_TokenSource_ARRAYSIZE = ChromeUserPopulation_PageLoadToken_TokenSource_TokenSource_MAX + 1;

const std::string& ChromeUserPopulation_PageLoadToken_TokenSource_Name(ChromeUserPopulation_PageLoadToken_TokenSource value);
template<typename T>
inline const std::string& ChromeUserPopulation_PageLoadToken_TokenSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeUserPopulation_PageLoadToken_TokenSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeUserPopulation_PageLoadToken_TokenSource_Name.");
  return ChromeUserPopulation_PageLoadToken_TokenSource_Name(static_cast<ChromeUserPopulation_PageLoadToken_TokenSource>(enum_t_value));
}
bool ChromeUserPopulation_PageLoadToken_TokenSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserPopulation_PageLoadToken_TokenSource* value);
enum ChromeUserPopulation_UserPopulation : int {
  ChromeUserPopulation_UserPopulation_UNKNOWN_USER_POPULATION = 0,
  ChromeUserPopulation_UserPopulation_SAFE_BROWSING = 1,
  ChromeUserPopulation_UserPopulation_EXTENDED_REPORTING = 2,
  ChromeUserPopulation_UserPopulation_ENHANCED_PROTECTION = 3
};
bool ChromeUserPopulation_UserPopulation_IsValid(int value);
constexpr ChromeUserPopulation_UserPopulation ChromeUserPopulation_UserPopulation_UserPopulation_MIN = ChromeUserPopulation_UserPopulation_UNKNOWN_USER_POPULATION;
constexpr ChromeUserPopulation_UserPopulation ChromeUserPopulation_UserPopulation_UserPopulation_MAX = ChromeUserPopulation_UserPopulation_ENHANCED_PROTECTION;
constexpr int ChromeUserPopulation_UserPopulation_UserPopulation_ARRAYSIZE = ChromeUserPopulation_UserPopulation_UserPopulation_MAX + 1;

const std::string& ChromeUserPopulation_UserPopulation_Name(ChromeUserPopulation_UserPopulation value);
template<typename T>
inline const std::string& ChromeUserPopulation_UserPopulation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeUserPopulation_UserPopulation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeUserPopulation_UserPopulation_Name.");
  return ChromeUserPopulation_UserPopulation_Name(static_cast<ChromeUserPopulation_UserPopulation>(enum_t_value));
}
bool ChromeUserPopulation_UserPopulation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserPopulation_UserPopulation* value);
enum ChromeUserPopulation_ProfileManagementStatus : int {
  ChromeUserPopulation_ProfileManagementStatus_UNKNOWN = 0,
  ChromeUserPopulation_ProfileManagementStatus_UNAVAILABLE = 1,
  ChromeUserPopulation_ProfileManagementStatus_NOT_MANAGED = 2,
  ChromeUserPopulation_ProfileManagementStatus_ENTERPRISE_MANAGED = 3
};
bool ChromeUserPopulation_ProfileManagementStatus_IsValid(int value);
constexpr ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation_ProfileManagementStatus_ProfileManagementStatus_MIN = ChromeUserPopulation_ProfileManagementStatus_UNKNOWN;
constexpr ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation_ProfileManagementStatus_ProfileManagementStatus_MAX = ChromeUserPopulation_ProfileManagementStatus_ENTERPRISE_MANAGED;
constexpr int ChromeUserPopulation_ProfileManagementStatus_ProfileManagementStatus_ARRAYSIZE = ChromeUserPopulation_ProfileManagementStatus_ProfileManagementStatus_MAX + 1;

const std::string& ChromeUserPopulation_ProfileManagementStatus_Name(ChromeUserPopulation_ProfileManagementStatus value);
template<typename T>
inline const std::string& ChromeUserPopulation_ProfileManagementStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeUserPopulation_ProfileManagementStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeUserPopulation_ProfileManagementStatus_Name.");
  return ChromeUserPopulation_ProfileManagementStatus_Name(static_cast<ChromeUserPopulation_ProfileManagementStatus>(enum_t_value));
}
bool ChromeUserPopulation_ProfileManagementStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserPopulation_ProfileManagementStatus* value);
enum LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType : int {
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_UNKNOWN = 0,
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_GSUITE = 1,
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_GMAIL = 2,
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_NON_GAIA_ENTERPRISE = 3,
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_SAVED_PASSWORD = 4
};
bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_IsValid(int value);
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_AccountType_MIN = LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_UNKNOWN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_AccountType_MAX = LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_SAVED_PASSWORD;
constexpr int LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_AccountType_ARRAYSIZE = LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_AccountType_MAX + 1;

const std::string& LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Name(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType value);
template<typename T>
inline const std::string& LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Name.");
  return LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Name(static_cast<LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType>(enum_t_value));
}
bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType* value);
enum LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType : int {
  LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_NOT_SIGNED_IN = 0,
  LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_GMAIL = 1,
  LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_GSUITE = 2
};
bool LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_IsValid(int value);
constexpr LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_SyncAccountType_MIN = LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_NOT_SIGNED_IN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_SyncAccountType_MAX = LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_GSUITE;
constexpr int LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_SyncAccountType_ARRAYSIZE = LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_SyncAccountType_MAX + 1;

const std::string& LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Name(LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType value);
template<typename T>
inline const std::string& LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Name.");
  return LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Name(static_cast<LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType>(enum_t_value));
}
bool LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType* value);
enum LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType : int {
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_REUSED_PASSWORD_TYPE_UNKNOWN = 0,
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_SAVED_PASSWORD = 1,
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_SIGN_IN_PASSWORD = 2,
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_OTHER_GAIA_PASSWORD = 3,
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ENTERPRISE_PASSWORD = 4
};
bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_IsValid(int value);
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ReusedPasswordType_MIN = LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_REUSED_PASSWORD_TYPE_UNKNOWN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ReusedPasswordType_MAX = LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ENTERPRISE_PASSWORD;
constexpr int LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ReusedPasswordType_ARRAYSIZE = LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ReusedPasswordType_MAX + 1;

const std::string& LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Name(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType value);
template<typename T>
inline const std::string& LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Name.");
  return LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Name(static_cast<LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType>(enum_t_value));
}
bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType* value);
enum LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource : int {
  LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_REFERRING_APP_SOURCE_UNSPECIFIED = 0,
  LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_KNOWN_APP_ID = 1,
  LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_UNKNOWN_APP_ID = 2,
  LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ACTIVITY_REFERRER = 3
};
bool LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_IsValid(int value);
constexpr LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ReferringAppSource_MIN = LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_REFERRING_APP_SOURCE_UNSPECIFIED;
constexpr LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ReferringAppSource_MAX = LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ACTIVITY_REFERRER;
constexpr int LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ReferringAppSource_ARRAYSIZE = LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ReferringAppSource_MAX + 1;

const std::string& LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Name(LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource value);
template<typename T>
inline const std::string& LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Name.");
  return LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Name(static_cast<LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource>(enum_t_value));
}
bool LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource* value);
enum LoginReputationClientRequest_TriggerType : int {
  LoginReputationClientRequest_TriggerType_TRIGGER_TYPE_UNSPECIFIED = 0,
  LoginReputationClientRequest_TriggerType_UNFAMILIAR_LOGIN_PAGE = 1,
  LoginReputationClientRequest_TriggerType_PASSWORD_REUSE_EVENT = 2
};
bool LoginReputationClientRequest_TriggerType_IsValid(int value);
constexpr LoginReputationClientRequest_TriggerType LoginReputationClientRequest_TriggerType_TriggerType_MIN = LoginReputationClientRequest_TriggerType_TRIGGER_TYPE_UNSPECIFIED;
constexpr LoginReputationClientRequest_TriggerType LoginReputationClientRequest_TriggerType_TriggerType_MAX = LoginReputationClientRequest_TriggerType_PASSWORD_REUSE_EVENT;
constexpr int LoginReputationClientRequest_TriggerType_TriggerType_ARRAYSIZE = LoginReputationClientRequest_TriggerType_TriggerType_MAX + 1;

const std::string& LoginReputationClientRequest_TriggerType_Name(LoginReputationClientRequest_TriggerType value);
template<typename T>
inline const std::string& LoginReputationClientRequest_TriggerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginReputationClientRequest_TriggerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginReputationClientRequest_TriggerType_Name.");
  return LoginReputationClientRequest_TriggerType_Name(static_cast<LoginReputationClientRequest_TriggerType>(enum_t_value));
}
bool LoginReputationClientRequest_TriggerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_TriggerType* value);
enum LoginReputationClientRequest_ReportType : int {
  LoginReputationClientRequest_ReportType_UNKNOWN = 0,
  LoginReputationClientRequest_ReportType_FULL_REPORT = 1,
  LoginReputationClientRequest_ReportType_SAMPLE_REPORT = 2
};
bool LoginReputationClientRequest_ReportType_IsValid(int value);
constexpr LoginReputationClientRequest_ReportType LoginReputationClientRequest_ReportType_ReportType_MIN = LoginReputationClientRequest_ReportType_UNKNOWN;
constexpr LoginReputationClientRequest_ReportType LoginReputationClientRequest_ReportType_ReportType_MAX = LoginReputationClientRequest_ReportType_SAMPLE_REPORT;
constexpr int LoginReputationClientRequest_ReportType_ReportType_ARRAYSIZE = LoginReputationClientRequest_ReportType_ReportType_MAX + 1;

const std::string& LoginReputationClientRequest_ReportType_Name(LoginReputationClientRequest_ReportType value);
template<typename T>
inline const std::string& LoginReputationClientRequest_ReportType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginReputationClientRequest_ReportType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginReputationClientRequest_ReportType_Name.");
  return LoginReputationClientRequest_ReportType_Name(static_cast<LoginReputationClientRequest_ReportType>(enum_t_value));
}
bool LoginReputationClientRequest_ReportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_ReportType* value);
enum LoginReputationClientResponse_VerdictType : int {
  LoginReputationClientResponse_VerdictType_VERDICT_TYPE_UNSPECIFIED = 0,
  LoginReputationClientResponse_VerdictType_SAFE = 1,
  LoginReputationClientResponse_VerdictType_LOW_REPUTATION = 2,
  LoginReputationClientResponse_VerdictType_PHISHING = 3
};
bool LoginReputationClientResponse_VerdictType_IsValid(int value);
constexpr LoginReputationClientResponse_VerdictType LoginReputationClientResponse_VerdictType_VerdictType_MIN = LoginReputationClientResponse_VerdictType_VERDICT_TYPE_UNSPECIFIED;
constexpr LoginReputationClientResponse_VerdictType LoginReputationClientResponse_VerdictType_VerdictType_MAX = LoginReputationClientResponse_VerdictType_PHISHING;
constexpr int LoginReputationClientResponse_VerdictType_VerdictType_ARRAYSIZE = LoginReputationClientResponse_VerdictType_VerdictType_MAX + 1;

const std::string& LoginReputationClientResponse_VerdictType_Name(LoginReputationClientResponse_VerdictType value);
template<typename T>
inline const std::string& LoginReputationClientResponse_VerdictType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginReputationClientResponse_VerdictType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginReputationClientResponse_VerdictType_Name.");
  return LoginReputationClientResponse_VerdictType_Name(static_cast<LoginReputationClientResponse_VerdictType>(enum_t_value));
}
bool LoginReputationClientResponse_VerdictType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientResponse_VerdictType* value);
enum ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType : int {
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OK = 0,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_CANCELLED = 1,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNKNOWN = 2,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_ARGUMENT = 3,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_DEADLINE_EXCEEDED = 4,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_NOT_FOUND = 5,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_ALREADY_EXISTS = 6,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_PERMISSION_DENIED = 7,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_RESOURCE_EXHAUSTED = 8,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_FAILED_PRECONDITION = 9,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_ABORTED = 10,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OUT_OF_RANGE = 11,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNIMPLEMENTED = 12,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INTERNAL = 13,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNAVAILABLE = 14,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_DATA_LOSS = 15,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNAUTHENTICATED = 16,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_DOC_TYPE_INFERENCE_FAILED = 1000,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNSUPPORTED_DOC_TYPE = 1001,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_SANDBOX_ERROR = 1002,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_ARCHIVE_CORRUPTED = 1003,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_DIR_PARSING_FAILED = 1004,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_FAT_HEADER_PARSING_FAILED = 1005,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_PREFIXED_ANSI_STRING_HEADER_TOO_SHORT = 1006,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_PREFIXED_ANSI_STRING_CONTENT_TOO_SHORT = 1007,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_CLIPBOARD_FORMAT_OR_ANSI_STRING_TOO_SHORT = 1008,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_BOF_HEADER_TOO_SHORT = 1009,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_NOT_BIFF_FORMAT = 1010,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_FAIL_PARSE_BIFF_VERSION = 1011,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_DDE_OLE_LINK = 1012,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_SIZE_FAIL = 1013,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_SIZE_MISMATCH = 1014,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_TYPE_FAIL = 1015,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_FILENAME_FAIL = 1016,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_FILEPATH_FAIL = 1017,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_RESERVED_FAIL = 1018,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_TEMPPATH_FAIL = 1019,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_FILESIZE_FAIL = 1020,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_FILESIZE_MISMATCH = 1021,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_CONTENT_FAIL = 1022,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_OLE2_HEADER = 1023,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_FAT_HEADER = 1024,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_EMPTY_FAT_HEADER = 1025,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_ROOT_DIR = 1026,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MISSING_FILE_IN_ARCHIVE = 1027,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_XML_DOC = 1028,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MISSING_PROPERTIES = 1029,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_NOT_IMPLEMENTED_FOR_CHROME = 1030,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_NOT_IMPLEMENTED = 1031,
  ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MISSING_ENCODING = 1032
};
bool ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_IsValid(int value);
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MaldocaErrorType_MIN = ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OK;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MaldocaErrorType_MAX = ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MISSING_ENCODING;
constexpr int ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MaldocaErrorType_ARRAYSIZE = ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MaldocaErrorType_MAX + 1;

const std::string& ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Name(ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType value);
template<typename T>
inline const std::string& ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Name.");
  return ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Name(static_cast<ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType>(enum_t_value));
}
bool ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType* value);
enum ClientDownloadRequest_ArchiveSummary_Status : int {
  ClientDownloadRequest_ArchiveSummary_Status_UNKNOWN = 0,
  ClientDownloadRequest_ArchiveSummary_Status_VALID = 1,
  ClientDownloadRequest_ArchiveSummary_Status_PARSER_TIMED_OUT = 2,
  ClientDownloadRequest_ArchiveSummary_Status_TOO_LARGE = 3
};
bool ClientDownloadRequest_ArchiveSummary_Status_IsValid(int value);
constexpr ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary_Status_Status_MIN = ClientDownloadRequest_ArchiveSummary_Status_UNKNOWN;
constexpr ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary_Status_Status_MAX = ClientDownloadRequest_ArchiveSummary_Status_TOO_LARGE;
constexpr int ClientDownloadRequest_ArchiveSummary_Status_Status_ARRAYSIZE = ClientDownloadRequest_ArchiveSummary_Status_Status_MAX + 1;

const std::string& ClientDownloadRequest_ArchiveSummary_Status_Name(ClientDownloadRequest_ArchiveSummary_Status value);
template<typename T>
inline const std::string& ClientDownloadRequest_ArchiveSummary_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientDownloadRequest_ArchiveSummary_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientDownloadRequest_ArchiveSummary_Status_Name.");
  return ClientDownloadRequest_ArchiveSummary_Status_Name(static_cast<ClientDownloadRequest_ArchiveSummary_Status>(enum_t_value));
}
bool ClientDownloadRequest_ArchiveSummary_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadRequest_ArchiveSummary_Status* value);
enum ClientDownloadRequest_ResourceType : int {
  ClientDownloadRequest_ResourceType_DOWNLOAD_URL = 0,
  ClientDownloadRequest_ResourceType_DOWNLOAD_REDIRECT = 1,
  ClientDownloadRequest_ResourceType_TAB_URL = 2,
  ClientDownloadRequest_ResourceType_TAB_REDIRECT = 3,
  ClientDownloadRequest_ResourceType_PPAPI_DOCUMENT = 4,
  ClientDownloadRequest_ResourceType_PPAPI_PLUGIN = 5
};
bool ClientDownloadRequest_ResourceType_IsValid(int value);
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest_ResourceType_ResourceType_MIN = ClientDownloadRequest_ResourceType_DOWNLOAD_URL;
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest_ResourceType_ResourceType_MAX = ClientDownloadRequest_ResourceType_PPAPI_PLUGIN;
constexpr int ClientDownloadRequest_ResourceType_ResourceType_ARRAYSIZE = ClientDownloadRequest_ResourceType_ResourceType_MAX + 1;

const std::string& ClientDownloadRequest_ResourceType_Name(ClientDownloadRequest_ResourceType value);
template<typename T>
inline const std::string& ClientDownloadRequest_ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientDownloadRequest_ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientDownloadRequest_ResourceType_Name.");
  return ClientDownloadRequest_ResourceType_Name(static_cast<ClientDownloadRequest_ResourceType>(enum_t_value));
}
bool ClientDownloadRequest_ResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadRequest_ResourceType* value);
enum ClientDownloadRequest_DownloadType : int {
  ClientDownloadRequest_DownloadType_WIN_EXECUTABLE = 0,
  ClientDownloadRequest_DownloadType_CHROME_EXTENSION = 1,
  ClientDownloadRequest_DownloadType_ANDROID_APK = 2,
  ClientDownloadRequest_DownloadType_ZIPPED_EXECUTABLE = 3,
  ClientDownloadRequest_DownloadType_MAC_EXECUTABLE = 4,
  ClientDownloadRequest_DownloadType_ZIPPED_ARCHIVE = 5,
  ClientDownloadRequest_DownloadType_ARCHIVE = 6,
  ClientDownloadRequest_DownloadType_INVALID_ZIP = 7,
  ClientDownloadRequest_DownloadType_MAC_ARCHIVE_FAILED_PARSING = 8,
  ClientDownloadRequest_DownloadType_PPAPI_SAVE_REQUEST = 9,
  ClientDownloadRequest_DownloadType_SAMPLED_UNSUPPORTED_FILE = 10,
  ClientDownloadRequest_DownloadType_RAR_COMPRESSED_EXECUTABLE = 11,
  ClientDownloadRequest_DownloadType_RAR_COMPRESSED_ARCHIVE = 12,
  ClientDownloadRequest_DownloadType_INVALID_RAR = 13,
  ClientDownloadRequest_DownloadType_DOCUMENT = 14
};
bool ClientDownloadRequest_DownloadType_IsValid(int value);
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest_DownloadType_DownloadType_MIN = ClientDownloadRequest_DownloadType_WIN_EXECUTABLE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest_DownloadType_DownloadType_MAX = ClientDownloadRequest_DownloadType_DOCUMENT;
constexpr int ClientDownloadRequest_DownloadType_DownloadType_ARRAYSIZE = ClientDownloadRequest_DownloadType_DownloadType_MAX + 1;

const std::string& ClientDownloadRequest_DownloadType_Name(ClientDownloadRequest_DownloadType value);
template<typename T>
inline const std::string& ClientDownloadRequest_DownloadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientDownloadRequest_DownloadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientDownloadRequest_DownloadType_Name.");
  return ClientDownloadRequest_DownloadType_Name(static_cast<ClientDownloadRequest_DownloadType>(enum_t_value));
}
bool ClientDownloadRequest_DownloadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadRequest_DownloadType* value);
enum ReferrerChainEntry_URLType : int {
  ReferrerChainEntry_URLType_EVENT_URL = 1,
  ReferrerChainEntry_URLType_LANDING_PAGE = 2,
  ReferrerChainEntry_URLType_LANDING_REFERRER = 3,
  ReferrerChainEntry_URLType_CLIENT_REDIRECT = 4,
  ReferrerChainEntry_URLType_DEPRECATED_SERVER_REDIRECT = 5,
  ReferrerChainEntry_URLType_RECENT_NAVIGATION = 6,
  ReferrerChainEntry_URLType_REFERRER = 7
};
bool ReferrerChainEntry_URLType_IsValid(int value);
constexpr ReferrerChainEntry_URLType ReferrerChainEntry_URLType_URLType_MIN = ReferrerChainEntry_URLType_EVENT_URL;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry_URLType_URLType_MAX = ReferrerChainEntry_URLType_REFERRER;
constexpr int ReferrerChainEntry_URLType_URLType_ARRAYSIZE = ReferrerChainEntry_URLType_URLType_MAX + 1;

const std::string& ReferrerChainEntry_URLType_Name(ReferrerChainEntry_URLType value);
template<typename T>
inline const std::string& ReferrerChainEntry_URLType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReferrerChainEntry_URLType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReferrerChainEntry_URLType_Name.");
  return ReferrerChainEntry_URLType_Name(static_cast<ReferrerChainEntry_URLType>(enum_t_value));
}
bool ReferrerChainEntry_URLType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReferrerChainEntry_URLType* value);
enum ReferrerChainEntry_NavigationInitiation : int {
  ReferrerChainEntry_NavigationInitiation_UNDEFINED = 0,
  ReferrerChainEntry_NavigationInitiation_BROWSER_INITIATED = 1,
  ReferrerChainEntry_NavigationInitiation_RENDERER_INITIATED_WITHOUT_USER_GESTURE = 2,
  ReferrerChainEntry_NavigationInitiation_RENDERER_INITIATED_WITH_USER_GESTURE = 3
};
bool ReferrerChainEntry_NavigationInitiation_IsValid(int value);
constexpr ReferrerChainEntry_NavigationInitiation ReferrerChainEntry_NavigationInitiation_NavigationInitiation_MIN = ReferrerChainEntry_NavigationInitiation_UNDEFINED;
constexpr ReferrerChainEntry_NavigationInitiation ReferrerChainEntry_NavigationInitiation_NavigationInitiation_MAX = ReferrerChainEntry_NavigationInitiation_RENDERER_INITIATED_WITH_USER_GESTURE;
constexpr int ReferrerChainEntry_NavigationInitiation_NavigationInitiation_ARRAYSIZE = ReferrerChainEntry_NavigationInitiation_NavigationInitiation_MAX + 1;

const std::string& ReferrerChainEntry_NavigationInitiation_Name(ReferrerChainEntry_NavigationInitiation value);
template<typename T>
inline const std::string& ReferrerChainEntry_NavigationInitiation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReferrerChainEntry_NavigationInitiation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReferrerChainEntry_NavigationInitiation_Name.");
  return ReferrerChainEntry_NavigationInitiation_Name(static_cast<ReferrerChainEntry_NavigationInitiation>(enum_t_value));
}
bool ReferrerChainEntry_NavigationInitiation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReferrerChainEntry_NavigationInitiation* value);
enum ClientDownloadResponse_Verdict : int {
  ClientDownloadResponse_Verdict_SAFE = 0,
  ClientDownloadResponse_Verdict_DANGEROUS = 1,
  ClientDownloadResponse_Verdict_UNCOMMON = 2,
  ClientDownloadResponse_Verdict_POTENTIALLY_UNWANTED = 3,
  ClientDownloadResponse_Verdict_DANGEROUS_HOST = 4,
  ClientDownloadResponse_Verdict_UNKNOWN = 5,
  ClientDownloadResponse_Verdict_DANGEROUS_ACCOUNT_COMPROMISE = 8
};
bool ClientDownloadResponse_Verdict_IsValid(int value);
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse_Verdict_Verdict_MIN = ClientDownloadResponse_Verdict_SAFE;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse_Verdict_Verdict_MAX = ClientDownloadResponse_Verdict_DANGEROUS_ACCOUNT_COMPROMISE;
constexpr int ClientDownloadResponse_Verdict_Verdict_ARRAYSIZE = ClientDownloadResponse_Verdict_Verdict_MAX + 1;

const std::string& ClientDownloadResponse_Verdict_Name(ClientDownloadResponse_Verdict value);
template<typename T>
inline const std::string& ClientDownloadResponse_Verdict_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientDownloadResponse_Verdict>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientDownloadResponse_Verdict_Name.");
  return ClientDownloadResponse_Verdict_Name(static_cast<ClientDownloadResponse_Verdict>(enum_t_value));
}
bool ClientDownloadResponse_Verdict_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadResponse_Verdict* value);
enum ClientDownloadReport_Reason : int {
  ClientDownloadReport_Reason_SHARE = 0,
  ClientDownloadReport_Reason_FALSE_POSITIVE = 1,
  ClientDownloadReport_Reason_APPEAL = 2
};
bool ClientDownloadReport_Reason_IsValid(int value);
constexpr ClientDownloadReport_Reason ClientDownloadReport_Reason_Reason_MIN = ClientDownloadReport_Reason_SHARE;
constexpr ClientDownloadReport_Reason ClientDownloadReport_Reason_Reason_MAX = ClientDownloadReport_Reason_APPEAL;
constexpr int ClientDownloadReport_Reason_Reason_ARRAYSIZE = ClientDownloadReport_Reason_Reason_MAX + 1;

const std::string& ClientDownloadReport_Reason_Name(ClientDownloadReport_Reason value);
template<typename T>
inline const std::string& ClientDownloadReport_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientDownloadReport_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientDownloadReport_Reason_Name.");
  return ClientDownloadReport_Reason_Name(static_cast<ClientDownloadReport_Reason>(enum_t_value));
}
bool ClientDownloadReport_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadReport_Reason* value);
enum ClientUploadResponse_UploadStatus : int {
  ClientUploadResponse_UploadStatus_SUCCESS = 0,
  ClientUploadResponse_UploadStatus_UPLOAD_FAILURE = 1
};
bool ClientUploadResponse_UploadStatus_IsValid(int value);
constexpr ClientUploadResponse_UploadStatus ClientUploadResponse_UploadStatus_UploadStatus_MIN = ClientUploadResponse_UploadStatus_SUCCESS;
constexpr ClientUploadResponse_UploadStatus ClientUploadResponse_UploadStatus_UploadStatus_MAX = ClientUploadResponse_UploadStatus_UPLOAD_FAILURE;
constexpr int ClientUploadResponse_UploadStatus_UploadStatus_ARRAYSIZE = ClientUploadResponse_UploadStatus_UploadStatus_MAX + 1;

const std::string& ClientUploadResponse_UploadStatus_Name(ClientUploadResponse_UploadStatus value);
template<typename T>
inline const std::string& ClientUploadResponse_UploadStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientUploadResponse_UploadStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientUploadResponse_UploadStatus_Name.");
  return ClientUploadResponse_UploadStatus_Name(static_cast<ClientUploadResponse_UploadStatus>(enum_t_value));
}
bool ClientUploadResponse_UploadStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientUploadResponse_UploadStatus* value);
enum ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState : int {
  ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_UNKNOWN = 0,
  ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_CLEARED = 1,
  ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_WEAK_LEGACY_OBSOLETE = 2,
  ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_CHANGED = 3,
  ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_UNTRUSTED_UNKNOWN_VALUE = 4,
  ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_BYPASS_CLEARED = 5,
  ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_BYPASS_CHANGED = 6
};
bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_IsValid(int value);
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_ValueState_MIN = ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_UNKNOWN;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_ValueState_MAX = ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_BYPASS_CHANGED;
constexpr int ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_ValueState_ARRAYSIZE = ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_ValueState_MAX + 1;

const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Name(ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState value);
template<typename T>
inline const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Name.");
  return ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Name(static_cast<ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState>(enum_t_value));
}
bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState* value);
enum ClientIncidentReport_IncidentData_ResourceRequestIncident_Type : int {
  ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_UNKNOWN = 0,
  ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_TYPE_PATTERN = 3
};
bool ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_IsValid(int value);
constexpr ClientIncidentReport_IncidentData_ResourceRequestIncident_Type ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Type_MIN = ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_UNKNOWN;
constexpr ClientIncidentReport_IncidentData_ResourceRequestIncident_Type ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Type_MAX = ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_TYPE_PATTERN;
constexpr int ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Type_ARRAYSIZE = ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Type_MAX + 1;

const std::string& ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Name(ClientIncidentReport_IncidentData_ResourceRequestIncident_Type value);
template<typename T>
inline const std::string& ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientIncidentReport_IncidentData_ResourceRequestIncident_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Name.");
  return ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Name(static_cast<ClientIncidentReport_IncidentData_ResourceRequestIncident_Type>(enum_t_value));
}
bool ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_IncidentData_ResourceRequestIncident_Type* value);
enum ClientIncidentReport_EnvironmentData_Process_Dll_Feature : int {
  ClientIncidentReport_EnvironmentData_Process_Dll_Feature_UNKNOWN = 0,
  ClientIncidentReport_EnvironmentData_Process_Dll_Feature_LSP = 1
};
bool ClientIncidentReport_EnvironmentData_Process_Dll_Feature_IsValid(int value);
constexpr ClientIncidentReport_EnvironmentData_Process_Dll_Feature ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Feature_MIN = ClientIncidentReport_EnvironmentData_Process_Dll_Feature_UNKNOWN;
constexpr ClientIncidentReport_EnvironmentData_Process_Dll_Feature ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Feature_MAX = ClientIncidentReport_EnvironmentData_Process_Dll_Feature_LSP;
constexpr int ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Feature_ARRAYSIZE = ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Feature_MAX + 1;

const std::string& ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Name(ClientIncidentReport_EnvironmentData_Process_Dll_Feature value);
template<typename T>
inline const std::string& ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientIncidentReport_EnvironmentData_Process_Dll_Feature>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Name.");
  return ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Name(static_cast<ClientIncidentReport_EnvironmentData_Process_Dll_Feature>(enum_t_value));
}
bool ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_EnvironmentData_Process_Dll_Feature* value);
enum ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState : int {
  ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_UNKNOWN = 0,
  ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_MODULE_STATE_UNKNOWN = 1,
  ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_MODULE_STATE_UNMODIFIED = 2,
  ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_MODULE_STATE_MODIFIED = 3
};
bool ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_IsValid(int value);
constexpr ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_ModifiedState_MIN = ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_UNKNOWN;
constexpr ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_ModifiedState_MAX = ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_MODULE_STATE_MODIFIED;
constexpr int ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_ModifiedState_ARRAYSIZE = ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_ModifiedState_MAX + 1;

const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Name(ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState value);
template<typename T>
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Name.");
  return ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Name(static_cast<ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState>(enum_t_value));
}
bool ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState* value);
enum ClientIncidentReport_EnvironmentData_Process_Channel : int {
  ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_UNKNOWN = 0,
  ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_CANARY = 1,
  ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_DEV = 2,
  ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_BETA = 3,
  ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_STABLE = 4
};
bool ClientIncidentReport_EnvironmentData_Process_Channel_IsValid(int value);
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process_Channel_Channel_MIN = ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_UNKNOWN;
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process_Channel_Channel_MAX = ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_STABLE;
constexpr int ClientIncidentReport_EnvironmentData_Process_Channel_Channel_ARRAYSIZE = ClientIncidentReport_EnvironmentData_Process_Channel_Channel_MAX + 1;

const std::string& ClientIncidentReport_EnvironmentData_Process_Channel_Name(ClientIncidentReport_EnvironmentData_Process_Channel value);
template<typename T>
inline const std::string& ClientIncidentReport_EnvironmentData_Process_Channel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientIncidentReport_EnvironmentData_Process_Channel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientIncidentReport_EnvironmentData_Process_Channel_Name.");
  return ClientIncidentReport_EnvironmentData_Process_Channel_Name(static_cast<ClientIncidentReport_EnvironmentData_Process_Channel>(enum_t_value));
}
bool ClientIncidentReport_EnvironmentData_Process_Channel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_EnvironmentData_Process_Channel* value);
enum ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState : int {
  ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_UNKNOWN = 0,
  ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_ENABLED = 1,
  ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_DISABLED = 2,
  ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_BLOCKLISTED = 3,
  ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_BLOCKED = 4,
  ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_TERMINATED = 5
};
bool ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_IsValid(int value);
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_ExtensionState_MIN = ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_UNKNOWN;
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_ExtensionState_MAX = ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_TERMINATED;
constexpr int ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_ExtensionState_ARRAYSIZE = ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_ExtensionState_MAX + 1;

const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Name(ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState value);
template<typename T>
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Name.");
  return ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Name(static_cast<ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState>(enum_t_value));
}
bool ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState* value);
enum ClientSafeBrowsingReportRequest_ReportType : int {
  ClientSafeBrowsingReportRequest_ReportType_UNKNOWN = 0,
  ClientSafeBrowsingReportRequest_ReportType_URL_PHISHING = 1,
  ClientSafeBrowsingReportRequest_ReportType_URL_MALWARE = 2,
  ClientSafeBrowsingReportRequest_ReportType_URL_UNWANTED = 3,
  ClientSafeBrowsingReportRequest_ReportType_URL_CLIENT_SIDE_PHISHING = 4,
  ClientSafeBrowsingReportRequest_ReportType_URL_CLIENT_SIDE_MALWARE = 5,
  ClientSafeBrowsingReportRequest_ReportType_DANGEROUS_DOWNLOAD_RECOVERY = 6,
  ClientSafeBrowsingReportRequest_ReportType_DANGEROUS_DOWNLOAD_WARNING = 7,
  ClientSafeBrowsingReportRequest_ReportType_DANGEROUS_DOWNLOAD_BY_API = 10,
  ClientSafeBrowsingReportRequest_ReportType_URL_PASSWORD_PROTECTION_PHISHING = 12,
  ClientSafeBrowsingReportRequest_ReportType_DANGEROUS_DOWNLOAD_OPENED = 13,
  ClientSafeBrowsingReportRequest_ReportType_AD_SAMPLE = 14,
  ClientSafeBrowsingReportRequest_ReportType_URL_SUSPICIOUS = 15,
  ClientSafeBrowsingReportRequest_ReportType_BILLING = 16,
  ClientSafeBrowsingReportRequest_ReportType_APK_DOWNLOAD = 17,
  ClientSafeBrowsingReportRequest_ReportType_BLOCKED_AD_REDIRECT = 19,
  ClientSafeBrowsingReportRequest_ReportType_BLOCKED_AD_POPUP = 20
};
bool ClientSafeBrowsingReportRequest_ReportType_IsValid(int value);
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest_ReportType_ReportType_MIN = ClientSafeBrowsingReportRequest_ReportType_UNKNOWN;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest_ReportType_ReportType_MAX = ClientSafeBrowsingReportRequest_ReportType_BLOCKED_AD_POPUP;
constexpr int ClientSafeBrowsingReportRequest_ReportType_ReportType_ARRAYSIZE = ClientSafeBrowsingReportRequest_ReportType_ReportType_MAX + 1;

const std::string& ClientSafeBrowsingReportRequest_ReportType_Name(ClientSafeBrowsingReportRequest_ReportType value);
template<typename T>
inline const std::string& ClientSafeBrowsingReportRequest_ReportType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientSafeBrowsingReportRequest_ReportType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientSafeBrowsingReportRequest_ReportType_Name.");
  return ClientSafeBrowsingReportRequest_ReportType_Name(static_cast<ClientSafeBrowsingReportRequest_ReportType>(enum_t_value));
}
bool ClientSafeBrowsingReportRequest_ReportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientSafeBrowsingReportRequest_ReportType* value);
enum ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType : int {
  ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SAFE_BROWSING_URL_API_TYPE_UNSPECIFIED = 0,
  ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_PVER3_NATIVE PROTOBUF_DEPRECATED_ENUM = 1,
  ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_PVER4_NATIVE = 2,
  ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_ANDROID_SAFETYNET = 3,
  ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_FLYWHEEL PROTOBUF_DEPRECATED_ENUM = 4,
  ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_REAL_TIME = 5
};
bool ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_IsValid(int value);
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SafeBrowsingUrlApiType_MIN = ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SAFE_BROWSING_URL_API_TYPE_UNSPECIFIED;
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SafeBrowsingUrlApiType_MAX = ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_REAL_TIME;
constexpr int ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SafeBrowsingUrlApiType_ARRAYSIZE = ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SafeBrowsingUrlApiType_MAX + 1;

const std::string& ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Name(ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType value);
template<typename T>
inline const std::string& ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Name.");
  return ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Name(static_cast<ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType>(enum_t_value));
}
bool ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType* value);
enum ExtensionTelemetryReportRequest_ExtensionInfo_Type : int {
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_UNKNOWN_TYPE = 0,
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_EXTENSION = 1,
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_THEME = 2,
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_USER_SCRIPT = 3,
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_HOSTED_APP = 4,
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_LEGACY_PACKAGED_APP = 5,
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_PLATFORM_APP = 6,
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_SHARED_MODULE = 7,
  ExtensionTelemetryReportRequest_ExtensionInfo_Type_LOGIN_SCREEN_EXTENSION = 8
};
bool ExtensionTelemetryReportRequest_ExtensionInfo_Type_IsValid(int value);
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo_Type_Type_MIN = ExtensionTelemetryReportRequest_ExtensionInfo_Type_UNKNOWN_TYPE;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo_Type_Type_MAX = ExtensionTelemetryReportRequest_ExtensionInfo_Type_LOGIN_SCREEN_EXTENSION;
constexpr int ExtensionTelemetryReportRequest_ExtensionInfo_Type_Type_ARRAYSIZE = ExtensionTelemetryReportRequest_ExtensionInfo_Type_Type_MAX + 1;

const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_Type_Name(ExtensionTelemetryReportRequest_ExtensionInfo_Type value);
template<typename T>
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtensionTelemetryReportRequest_ExtensionInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtensionTelemetryReportRequest_ExtensionInfo_Type_Name.");
  return ExtensionTelemetryReportRequest_ExtensionInfo_Type_Name(static_cast<ExtensionTelemetryReportRequest_ExtensionInfo_Type>(enum_t_value));
}
bool ExtensionTelemetryReportRequest_ExtensionInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtensionTelemetryReportRequest_ExtensionInfo_Type* value);
enum ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation : int {
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_UNKNOWN_LOCATION = 0,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_INTERNAL = 1,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_PREF = 2,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_REGISTRY = 3,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_UNPACKED = 4,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_COMPONENT = 5,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_PREF_DOWNLOAD = 6,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_POLICY_DOWNLOAD = 7,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_COMMAND_LINE = 8,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_POLICY = 9,
  ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_COMPONENT = 10
};
bool ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_IsValid(int value);
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_InstallLocation_MIN = ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_UNKNOWN_LOCATION;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_InstallLocation_MAX = ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_COMPONENT;
constexpr int ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_InstallLocation_ARRAYSIZE = ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_InstallLocation_MAX + 1;

const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Name(ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation value);
template<typename T>
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Name.");
  return ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Name(static_cast<ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation>(enum_t_value));
}
bool ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation* value);
enum ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState : int {
  ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_NOT_BLOCKLISTED = 0,
  ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_MALWARE = 1,
  ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_SECURITY_VULNERABILITY = 2,
  ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_CWS_POLICY_VIOLATION = 3,
  ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_POTENTIALLY_UNWANTED = 4,
  ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_UNKNOWN = 5
};
bool ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_IsValid(int value);
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BlocklistState_MIN = ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_NOT_BLOCKLISTED;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BlocklistState_MAX = ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_UNKNOWN;
constexpr int ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BlocklistState_ARRAYSIZE = ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BlocklistState_MAX + 1;

const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Name(ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState value);
template<typename T>
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Name.");
  return ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Name(static_cast<ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState>(enum_t_value));
}
bool ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState* value);
// ===================================================================

class ChromeUserPopulation_PageLoadToken final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ChromeUserPopulation.PageLoadToken) */ {
 public:
  inline ChromeUserPopulation_PageLoadToken() : ChromeUserPopulation_PageLoadToken(nullptr) {}
  ~ChromeUserPopulation_PageLoadToken() override;
  explicit PROTOBUF_CONSTEXPR ChromeUserPopulation_PageLoadToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeUserPopulation_PageLoadToken(const ChromeUserPopulation_PageLoadToken& from);
  ChromeUserPopulation_PageLoadToken(ChromeUserPopulation_PageLoadToken&& from) noexcept
    : ChromeUserPopulation_PageLoadToken() {
    *this = ::std::move(from);
  }

  inline ChromeUserPopulation_PageLoadToken& operator=(const ChromeUserPopulation_PageLoadToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeUserPopulation_PageLoadToken& operator=(ChromeUserPopulation_PageLoadToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeUserPopulation_PageLoadToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeUserPopulation_PageLoadToken* internal_default_instance() {
    return reinterpret_cast<const ChromeUserPopulation_PageLoadToken*>(
               &_ChromeUserPopulation_PageLoadToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeUserPopulation_PageLoadToken& a, ChromeUserPopulation_PageLoadToken& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeUserPopulation_PageLoadToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeUserPopulation_PageLoadToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeUserPopulation_PageLoadToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeUserPopulation_PageLoadToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeUserPopulation_PageLoadToken& from);
  void MergeFrom(const ChromeUserPopulation_PageLoadToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeUserPopulation_PageLoadToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ChromeUserPopulation.PageLoadToken";
  }
  protected:
  explicit ChromeUserPopulation_PageLoadToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeUserPopulation_PageLoadToken_TokenSource TokenSource;
  static constexpr TokenSource SOURCE_UNSPECIFIED =
    ChromeUserPopulation_PageLoadToken_TokenSource_SOURCE_UNSPECIFIED;
  static constexpr TokenSource CLIENT_GENERATION =
    ChromeUserPopulation_PageLoadToken_TokenSource_CLIENT_GENERATION;
  static inline bool TokenSource_IsValid(int value) {
    return ChromeUserPopulation_PageLoadToken_TokenSource_IsValid(value);
  }
  static constexpr TokenSource TokenSource_MIN =
    ChromeUserPopulation_PageLoadToken_TokenSource_TokenSource_MIN;
  static constexpr TokenSource TokenSource_MAX =
    ChromeUserPopulation_PageLoadToken_TokenSource_TokenSource_MAX;
  static constexpr int TokenSource_ARRAYSIZE =
    ChromeUserPopulation_PageLoadToken_TokenSource_TokenSource_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TokenSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TokenSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TokenSource_Name.");
    return ChromeUserPopulation_PageLoadToken_TokenSource_Name(enum_t_value);
  }
  static inline bool TokenSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TokenSource* value) {
    return ChromeUserPopulation_PageLoadToken_TokenSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenValueFieldNumber = 3,
    kTokenTimeMsecFieldNumber = 2,
    kTokenSourceFieldNumber = 1,
  };
  // optional bytes token_value = 3;
  bool has_token_value() const;
  private:
  bool _internal_has_token_value() const;
  public:
  void clear_token_value();
  const std::string& token_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_value();
  PROTOBUF_NODISCARD std::string* release_token_value();
  void set_allocated_token_value(std::string* token_value);
  private:
  const std::string& _internal_token_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_value(const std::string& value);
  std::string* _internal_mutable_token_value();
  public:

  // optional int64 token_time_msec = 2;
  bool has_token_time_msec() const;
  private:
  bool _internal_has_token_time_msec() const;
  public:
  void clear_token_time_msec();
  int64_t token_time_msec() const;
  void set_token_time_msec(int64_t value);
  private:
  int64_t _internal_token_time_msec() const;
  void _internal_set_token_time_msec(int64_t value);
  public:

  // optional .safe_browsing.ChromeUserPopulation.PageLoadToken.TokenSource token_source = 1;
  bool has_token_source() const;
  private:
  bool _internal_has_token_source() const;
  public:
  void clear_token_source();
  ::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource token_source() const;
  void set_token_source(::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource value);
  private:
  ::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource _internal_token_source() const;
  void _internal_set_token_source(::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ChromeUserPopulation.PageLoadToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_value_;
  int64_t token_time_msec_;
  int token_source_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ChromeUserPopulation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ChromeUserPopulation) */ {
 public:
  inline ChromeUserPopulation() : ChromeUserPopulation(nullptr) {}
  ~ChromeUserPopulation() override;
  explicit PROTOBUF_CONSTEXPR ChromeUserPopulation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeUserPopulation(const ChromeUserPopulation& from);
  ChromeUserPopulation(ChromeUserPopulation&& from) noexcept
    : ChromeUserPopulation() {
    *this = ::std::move(from);
  }

  inline ChromeUserPopulation& operator=(const ChromeUserPopulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeUserPopulation& operator=(ChromeUserPopulation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeUserPopulation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeUserPopulation* internal_default_instance() {
    return reinterpret_cast<const ChromeUserPopulation*>(
               &_ChromeUserPopulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeUserPopulation& a, ChromeUserPopulation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeUserPopulation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeUserPopulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeUserPopulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeUserPopulation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeUserPopulation& from);
  void MergeFrom(const ChromeUserPopulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeUserPopulation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ChromeUserPopulation";
  }
  protected:
  explicit ChromeUserPopulation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeUserPopulation_PageLoadToken PageLoadToken;

  typedef ChromeUserPopulation_UserPopulation UserPopulation;
  static constexpr UserPopulation UNKNOWN_USER_POPULATION =
    ChromeUserPopulation_UserPopulation_UNKNOWN_USER_POPULATION;
  static constexpr UserPopulation SAFE_BROWSING =
    ChromeUserPopulation_UserPopulation_SAFE_BROWSING;
  static constexpr UserPopulation EXTENDED_REPORTING =
    ChromeUserPopulation_UserPopulation_EXTENDED_REPORTING;
  static constexpr UserPopulation ENHANCED_PROTECTION =
    ChromeUserPopulation_UserPopulation_ENHANCED_PROTECTION;
  static inline bool UserPopulation_IsValid(int value) {
    return ChromeUserPopulation_UserPopulation_IsValid(value);
  }
  static constexpr UserPopulation UserPopulation_MIN =
    ChromeUserPopulation_UserPopulation_UserPopulation_MIN;
  static constexpr UserPopulation UserPopulation_MAX =
    ChromeUserPopulation_UserPopulation_UserPopulation_MAX;
  static constexpr int UserPopulation_ARRAYSIZE =
    ChromeUserPopulation_UserPopulation_UserPopulation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UserPopulation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserPopulation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserPopulation_Name.");
    return ChromeUserPopulation_UserPopulation_Name(enum_t_value);
  }
  static inline bool UserPopulation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UserPopulation* value) {
    return ChromeUserPopulation_UserPopulation_Parse(name, value);
  }

  typedef ChromeUserPopulation_ProfileManagementStatus ProfileManagementStatus;
  static constexpr ProfileManagementStatus UNKNOWN =
    ChromeUserPopulation_ProfileManagementStatus_UNKNOWN;
  static constexpr ProfileManagementStatus UNAVAILABLE =
    ChromeUserPopulation_ProfileManagementStatus_UNAVAILABLE;
  static constexpr ProfileManagementStatus NOT_MANAGED =
    ChromeUserPopulation_ProfileManagementStatus_NOT_MANAGED;
  static constexpr ProfileManagementStatus ENTERPRISE_MANAGED =
    ChromeUserPopulation_ProfileManagementStatus_ENTERPRISE_MANAGED;
  static inline bool ProfileManagementStatus_IsValid(int value) {
    return ChromeUserPopulation_ProfileManagementStatus_IsValid(value);
  }
  static constexpr ProfileManagementStatus ProfileManagementStatus_MIN =
    ChromeUserPopulation_ProfileManagementStatus_ProfileManagementStatus_MIN;
  static constexpr ProfileManagementStatus ProfileManagementStatus_MAX =
    ChromeUserPopulation_ProfileManagementStatus_ProfileManagementStatus_MAX;
  static constexpr int ProfileManagementStatus_ARRAYSIZE =
    ChromeUserPopulation_ProfileManagementStatus_ProfileManagementStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProfileManagementStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProfileManagementStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProfileManagementStatus_Name.");
    return ChromeUserPopulation_ProfileManagementStatus_Name(enum_t_value);
  }
  static inline bool ProfileManagementStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProfileManagementStatus* value) {
    return ChromeUserPopulation_ProfileManagementStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFinchActiveGroupsFieldNumber = 4,
    kPageLoadTokensFieldNumber = 14,
    kUserAgentFieldNumber = 9,
    kUserPopulationFieldNumber = 1,
    kProfileManagementStatusFieldNumber = 5,
    kIsHistorySyncEnabledFieldNumber = 2,
    kIsUnderAdvancedProtectionFieldNumber = 6,
    kIsIncognitoFieldNumber = 7,
    kIsMbbEnabledFieldNumber = 8,
    kNumberOfProfilesFieldNumber = 10,
    kNumberOfLoadedProfilesFieldNumber = 11,
    kNumberOfOpenProfilesFieldNumber = 12,
    kAesbLastUpdateTimeWindowsEpochMicrosFieldNumber = 16,
    kIsAesbEnabledFieldNumber = 15,
  };
  // repeated string finch_active_groups = 4;
  int finch_active_groups_size() const;
  private:
  int _internal_finch_active_groups_size() const;
  public:
  void clear_finch_active_groups();
  const std::string& finch_active_groups(int index) const;
  std::string* mutable_finch_active_groups(int index);
  void set_finch_active_groups(int index, const std::string& value);
  void set_finch_active_groups(int index, std::string&& value);
  void set_finch_active_groups(int index, const char* value);
  void set_finch_active_groups(int index, const char* value, size_t size);
  std::string* add_finch_active_groups();
  void add_finch_active_groups(const std::string& value);
  void add_finch_active_groups(std::string&& value);
  void add_finch_active_groups(const char* value);
  void add_finch_active_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& finch_active_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_finch_active_groups();
  private:
  const std::string& _internal_finch_active_groups(int index) const;
  std::string* _internal_add_finch_active_groups();
  public:

  // repeated .safe_browsing.ChromeUserPopulation.PageLoadToken page_load_tokens = 14;
  int page_load_tokens_size() const;
  private:
  int _internal_page_load_tokens_size() const;
  public:
  void clear_page_load_tokens();
  ::safe_browsing::ChromeUserPopulation_PageLoadToken* mutable_page_load_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ChromeUserPopulation_PageLoadToken >*
      mutable_page_load_tokens();
  private:
  const ::safe_browsing::ChromeUserPopulation_PageLoadToken& _internal_page_load_tokens(int index) const;
  ::safe_browsing::ChromeUserPopulation_PageLoadToken* _internal_add_page_load_tokens();
  public:
  const ::safe_browsing::ChromeUserPopulation_PageLoadToken& page_load_tokens(int index) const;
  ::safe_browsing::ChromeUserPopulation_PageLoadToken* add_page_load_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ChromeUserPopulation_PageLoadToken >&
      page_load_tokens() const;

  // optional string user_agent = 9;
  bool has_user_agent() const;
  private:
  bool _internal_has_user_agent() const;
  public:
  void clear_user_agent();
  const std::string& user_agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_agent();
  PROTOBUF_NODISCARD std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // optional .safe_browsing.ChromeUserPopulation.UserPopulation user_population = 1;
  bool has_user_population() const;
  private:
  bool _internal_has_user_population() const;
  public:
  void clear_user_population();
  ::safe_browsing::ChromeUserPopulation_UserPopulation user_population() const;
  void set_user_population(::safe_browsing::ChromeUserPopulation_UserPopulation value);
  private:
  ::safe_browsing::ChromeUserPopulation_UserPopulation _internal_user_population() const;
  void _internal_set_user_population(::safe_browsing::ChromeUserPopulation_UserPopulation value);
  public:

  // optional .safe_browsing.ChromeUserPopulation.ProfileManagementStatus profile_management_status = 5 [default = UNKNOWN];
  bool has_profile_management_status() const;
  private:
  bool _internal_has_profile_management_status() const;
  public:
  void clear_profile_management_status();
  ::safe_browsing::ChromeUserPopulation_ProfileManagementStatus profile_management_status() const;
  void set_profile_management_status(::safe_browsing::ChromeUserPopulation_ProfileManagementStatus value);
  private:
  ::safe_browsing::ChromeUserPopulation_ProfileManagementStatus _internal_profile_management_status() const;
  void _internal_set_profile_management_status(::safe_browsing::ChromeUserPopulation_ProfileManagementStatus value);
  public:

  // optional bool is_history_sync_enabled = 2;
  bool has_is_history_sync_enabled() const;
  private:
  bool _internal_has_is_history_sync_enabled() const;
  public:
  void clear_is_history_sync_enabled();
  bool is_history_sync_enabled() const;
  void set_is_history_sync_enabled(bool value);
  private:
  bool _internal_is_history_sync_enabled() const;
  void _internal_set_is_history_sync_enabled(bool value);
  public:

  // optional bool is_under_advanced_protection = 6;
  bool has_is_under_advanced_protection() const;
  private:
  bool _internal_has_is_under_advanced_protection() const;
  public:
  void clear_is_under_advanced_protection();
  bool is_under_advanced_protection() const;
  void set_is_under_advanced_protection(bool value);
  private:
  bool _internal_is_under_advanced_protection() const;
  void _internal_set_is_under_advanced_protection(bool value);
  public:

  // optional bool is_incognito = 7;
  bool has_is_incognito() const;
  private:
  bool _internal_has_is_incognito() const;
  public:
  void clear_is_incognito();
  bool is_incognito() const;
  void set_is_incognito(bool value);
  private:
  bool _internal_is_incognito() const;
  void _internal_set_is_incognito(bool value);
  public:

  // optional bool is_mbb_enabled = 8;
  bool has_is_mbb_enabled() const;
  private:
  bool _internal_has_is_mbb_enabled() const;
  public:
  void clear_is_mbb_enabled();
  bool is_mbb_enabled() const;
  void set_is_mbb_enabled(bool value);
  private:
  bool _internal_is_mbb_enabled() const;
  void _internal_set_is_mbb_enabled(bool value);
  public:

  // optional int32 number_of_profiles = 10;
  bool has_number_of_profiles() const;
  private:
  bool _internal_has_number_of_profiles() const;
  public:
  void clear_number_of_profiles();
  int32_t number_of_profiles() const;
  void set_number_of_profiles(int32_t value);
  private:
  int32_t _internal_number_of_profiles() const;
  void _internal_set_number_of_profiles(int32_t value);
  public:

  // optional int32 number_of_loaded_profiles = 11;
  bool has_number_of_loaded_profiles() const;
  private:
  bool _internal_has_number_of_loaded_profiles() const;
  public:
  void clear_number_of_loaded_profiles();
  int32_t number_of_loaded_profiles() const;
  void set_number_of_loaded_profiles(int32_t value);
  private:
  int32_t _internal_number_of_loaded_profiles() const;
  void _internal_set_number_of_loaded_profiles(int32_t value);
  public:

  // optional int32 number_of_open_profiles = 12;
  bool has_number_of_open_profiles() const;
  private:
  bool _internal_has_number_of_open_profiles() const;
  public:
  void clear_number_of_open_profiles();
  int32_t number_of_open_profiles() const;
  void set_number_of_open_profiles(int32_t value);
  private:
  int32_t _internal_number_of_open_profiles() const;
  void _internal_set_number_of_open_profiles(int32_t value);
  public:

  // optional int64 aesb_last_update_time_windows_epoch_micros = 16;
  bool has_aesb_last_update_time_windows_epoch_micros() const;
  private:
  bool _internal_has_aesb_last_update_time_windows_epoch_micros() const;
  public:
  void clear_aesb_last_update_time_windows_epoch_micros();
  int64_t aesb_last_update_time_windows_epoch_micros() const;
  void set_aesb_last_update_time_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_aesb_last_update_time_windows_epoch_micros() const;
  void _internal_set_aesb_last_update_time_windows_epoch_micros(int64_t value);
  public:

  // optional bool is_aesb_enabled = 15;
  bool has_is_aesb_enabled() const;
  private:
  bool _internal_has_is_aesb_enabled() const;
  public:
  void clear_is_aesb_enabled();
  bool is_aesb_enabled() const;
  void set_is_aesb_enabled(bool value);
  private:
  bool _internal_is_aesb_enabled() const;
  void _internal_set_is_aesb_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ChromeUserPopulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> finch_active_groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ChromeUserPopulation_PageLoadToken > page_load_tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  int user_population_;
  int profile_management_status_;
  bool is_history_sync_enabled_;
  bool is_under_advanced_protection_;
  bool is_incognito_;
  bool is_mbb_enabled_;
  int32_t number_of_profiles_;
  int32_t number_of_loaded_profiles_;
  int32_t number_of_open_profiles_;
  int64_t aesb_last_update_time_windows_epoch_micros_;
  bool is_aesb_enabled_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientPhishingRequest_Feature final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientPhishingRequest.Feature) */ {
 public:
  inline ClientPhishingRequest_Feature() : ClientPhishingRequest_Feature(nullptr) {}
  ~ClientPhishingRequest_Feature() override;
  explicit PROTOBUF_CONSTEXPR ClientPhishingRequest_Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPhishingRequest_Feature(const ClientPhishingRequest_Feature& from);
  ClientPhishingRequest_Feature(ClientPhishingRequest_Feature&& from) noexcept
    : ClientPhishingRequest_Feature() {
    *this = ::std::move(from);
  }

  inline ClientPhishingRequest_Feature& operator=(const ClientPhishingRequest_Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPhishingRequest_Feature& operator=(ClientPhishingRequest_Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientPhishingRequest_Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPhishingRequest_Feature* internal_default_instance() {
    return reinterpret_cast<const ClientPhishingRequest_Feature*>(
               &_ClientPhishingRequest_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientPhishingRequest_Feature& a, ClientPhishingRequest_Feature& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientPhishingRequest_Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPhishingRequest_Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPhishingRequest_Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPhishingRequest_Feature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientPhishingRequest_Feature& from);
  void MergeFrom(const ClientPhishingRequest_Feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientPhishingRequest_Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientPhishingRequest.Feature";
  }
  protected:
  explicit ClientPhishingRequest_Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required double value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientPhishingRequest.Feature)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double value_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientPhishingRequest_CategoryScore final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientPhishingRequest.CategoryScore) */ {
 public:
  inline ClientPhishingRequest_CategoryScore() : ClientPhishingRequest_CategoryScore(nullptr) {}
  ~ClientPhishingRequest_CategoryScore() override;
  explicit PROTOBUF_CONSTEXPR ClientPhishingRequest_CategoryScore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPhishingRequest_CategoryScore(const ClientPhishingRequest_CategoryScore& from);
  ClientPhishingRequest_CategoryScore(ClientPhishingRequest_CategoryScore&& from) noexcept
    : ClientPhishingRequest_CategoryScore() {
    *this = ::std::move(from);
  }

  inline ClientPhishingRequest_CategoryScore& operator=(const ClientPhishingRequest_CategoryScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPhishingRequest_CategoryScore& operator=(ClientPhishingRequest_CategoryScore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientPhishingRequest_CategoryScore& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPhishingRequest_CategoryScore* internal_default_instance() {
    return reinterpret_cast<const ClientPhishingRequest_CategoryScore*>(
               &_ClientPhishingRequest_CategoryScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientPhishingRequest_CategoryScore& a, ClientPhishingRequest_CategoryScore& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientPhishingRequest_CategoryScore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPhishingRequest_CategoryScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPhishingRequest_CategoryScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPhishingRequest_CategoryScore>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientPhishingRequest_CategoryScore& from);
  void MergeFrom(const ClientPhishingRequest_CategoryScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientPhishingRequest_CategoryScore* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientPhishingRequest.CategoryScore";
  }
  protected:
  explicit ClientPhishingRequest_CategoryScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional float value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientPhishingRequest.CategoryScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  float value_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientPhishingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientPhishingRequest) */ {
 public:
  inline ClientPhishingRequest() : ClientPhishingRequest(nullptr) {}
  ~ClientPhishingRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientPhishingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPhishingRequest(const ClientPhishingRequest& from);
  ClientPhishingRequest(ClientPhishingRequest&& from) noexcept
    : ClientPhishingRequest() {
    *this = ::std::move(from);
  }

  inline ClientPhishingRequest& operator=(const ClientPhishingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPhishingRequest& operator=(ClientPhishingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientPhishingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPhishingRequest* internal_default_instance() {
    return reinterpret_cast<const ClientPhishingRequest*>(
               &_ClientPhishingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientPhishingRequest& a, ClientPhishingRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientPhishingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPhishingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPhishingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPhishingRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientPhishingRequest& from);
  void MergeFrom(const ClientPhishingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientPhishingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientPhishingRequest";
  }
  protected:
  explicit ClientPhishingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientPhishingRequest_Feature Feature;
  typedef ClientPhishingRequest_CategoryScore CategoryScore;

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureMapFieldNumber = 5,
    kNonModelFeatureMapFieldNumber = 8,
    kShingleHashesFieldNumber = 12,
    kReferrerChainFieldNumber = 22,
    kTfliteModelScoresFieldNumber = 24,
    kUrlFieldNumber = 1,
    kOBSOLETEReferrerUrlFieldNumber = 9,
    kOBSOLETEHashPrefixFieldNumber = 10,
    kDEPRECATEDModelFilenameFieldNumber = 13,
    kPopulationFieldNumber = 14,
    kVisualFeaturesFieldNumber = 26,
    kClientScoreFieldNumber = 2,
    kModelVersionFieldNumber = 6,
    kIsPhishingFieldNumber = 4,
    kIsDomMatchFieldNumber = 21,
    kIsTfliteMatchFieldNumber = 25,
    kTfliteModelVersionFieldNumber = 23,
    kDomModelVersionFieldNumber = 27,
  };
  // repeated .safe_browsing.ClientPhishingRequest.Feature feature_map = 5;
  int feature_map_size() const;
  private:
  int _internal_feature_map_size() const;
  public:
  void clear_feature_map();
  ::safe_browsing::ClientPhishingRequest_Feature* mutable_feature_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature >*
      mutable_feature_map();
  private:
  const ::safe_browsing::ClientPhishingRequest_Feature& _internal_feature_map(int index) const;
  ::safe_browsing::ClientPhishingRequest_Feature* _internal_add_feature_map();
  public:
  const ::safe_browsing::ClientPhishingRequest_Feature& feature_map(int index) const;
  ::safe_browsing::ClientPhishingRequest_Feature* add_feature_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature >&
      feature_map() const;

  // repeated .safe_browsing.ClientPhishingRequest.Feature non_model_feature_map = 8;
  int non_model_feature_map_size() const;
  private:
  int _internal_non_model_feature_map_size() const;
  public:
  void clear_non_model_feature_map();
  ::safe_browsing::ClientPhishingRequest_Feature* mutable_non_model_feature_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature >*
      mutable_non_model_feature_map();
  private:
  const ::safe_browsing::ClientPhishingRequest_Feature& _internal_non_model_feature_map(int index) const;
  ::safe_browsing::ClientPhishingRequest_Feature* _internal_add_non_model_feature_map();
  public:
  const ::safe_browsing::ClientPhishingRequest_Feature& non_model_feature_map(int index) const;
  ::safe_browsing::ClientPhishingRequest_Feature* add_non_model_feature_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature >&
      non_model_feature_map() const;

  // repeated uint32 shingle_hashes = 12 [packed = true];
  int shingle_hashes_size() const;
  private:
  int _internal_shingle_hashes_size() const;
  public:
  void clear_shingle_hashes();
  private:
  uint32_t _internal_shingle_hashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_shingle_hashes() const;
  void _internal_add_shingle_hashes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_shingle_hashes();
  public:
  uint32_t shingle_hashes(int index) const;
  void set_shingle_hashes(int index, uint32_t value);
  void add_shingle_hashes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      shingle_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_shingle_hashes();

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 22;
  int referrer_chain_size() const;
  private:
  int _internal_referrer_chain_size() const;
  public:
  void clear_referrer_chain();
  ::safe_browsing::ReferrerChainEntry* mutable_referrer_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
      mutable_referrer_chain();
  private:
  const ::safe_browsing::ReferrerChainEntry& _internal_referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* _internal_add_referrer_chain();
  public:
  const ::safe_browsing::ReferrerChainEntry& referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* add_referrer_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
      referrer_chain() const;

  // repeated .safe_browsing.ClientPhishingRequest.CategoryScore tflite_model_scores = 24;
  int tflite_model_scores_size() const;
  private:
  int _internal_tflite_model_scores_size() const;
  public:
  void clear_tflite_model_scores();
  ::safe_browsing::ClientPhishingRequest_CategoryScore* mutable_tflite_model_scores(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_CategoryScore >*
      mutable_tflite_model_scores();
  private:
  const ::safe_browsing::ClientPhishingRequest_CategoryScore& _internal_tflite_model_scores(int index) const;
  ::safe_browsing::ClientPhishingRequest_CategoryScore* _internal_add_tflite_model_scores();
  public:
  const ::safe_browsing::ClientPhishingRequest_CategoryScore& tflite_model_scores(int index) const;
  ::safe_browsing::ClientPhishingRequest_CategoryScore* add_tflite_model_scores();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_CategoryScore >&
      tflite_model_scores() const;

  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string OBSOLETE_referrer_url = 9;
  bool has_obsolete_referrer_url() const;
  private:
  bool _internal_has_obsolete_referrer_url() const;
  public:
  void clear_obsolete_referrer_url();
  const std::string& obsolete_referrer_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obsolete_referrer_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obsolete_referrer_url();
  PROTOBUF_NODISCARD std::string* release_obsolete_referrer_url();
  void set_allocated_obsolete_referrer_url(std::string* obsolete_referrer_url);
  private:
  const std::string& _internal_obsolete_referrer_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obsolete_referrer_url(const std::string& value);
  std::string* _internal_mutable_obsolete_referrer_url();
  public:

  // optional bytes OBSOLETE_hash_prefix = 10;
  bool has_obsolete_hash_prefix() const;
  private:
  bool _internal_has_obsolete_hash_prefix() const;
  public:
  void clear_obsolete_hash_prefix();
  const std::string& obsolete_hash_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obsolete_hash_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obsolete_hash_prefix();
  PROTOBUF_NODISCARD std::string* release_obsolete_hash_prefix();
  void set_allocated_obsolete_hash_prefix(std::string* obsolete_hash_prefix);
  private:
  const std::string& _internal_obsolete_hash_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obsolete_hash_prefix(const std::string& value);
  std::string* _internal_mutable_obsolete_hash_prefix();
  public:

  // optional string DEPRECATED_model_filename = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_model_filename() const;
  private:
  bool _internal_has_deprecated_model_filename() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_model_filename();
  PROTOBUF_DEPRECATED const std::string& deprecated_model_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_deprecated_model_filename(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_deprecated_model_filename();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_deprecated_model_filename();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_model_filename(std::string* deprecated_model_filename);
  private:
  const std::string& _internal_deprecated_model_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated_model_filename(const std::string& value);
  std::string* _internal_mutable_deprecated_model_filename();
  public:

  // optional .safe_browsing.ChromeUserPopulation population = 14;
  bool has_population() const;
  private:
  bool _internal_has_population() const;
  public:
  void clear_population();
  const ::safe_browsing::ChromeUserPopulation& population() const;
  PROTOBUF_NODISCARD ::safe_browsing::ChromeUserPopulation* release_population();
  ::safe_browsing::ChromeUserPopulation* mutable_population();
  void set_allocated_population(::safe_browsing::ChromeUserPopulation* population);
  private:
  const ::safe_browsing::ChromeUserPopulation& _internal_population() const;
  ::safe_browsing::ChromeUserPopulation* _internal_mutable_population();
  public:
  void unsafe_arena_set_allocated_population(
      ::safe_browsing::ChromeUserPopulation* population);
  ::safe_browsing::ChromeUserPopulation* unsafe_arena_release_population();

  // optional .safe_browsing.VisualFeatures visual_features = 26;
  bool has_visual_features() const;
  private:
  bool _internal_has_visual_features() const;
  public:
  void clear_visual_features();
  const ::safe_browsing::VisualFeatures& visual_features() const;
  PROTOBUF_NODISCARD ::safe_browsing::VisualFeatures* release_visual_features();
  ::safe_browsing::VisualFeatures* mutable_visual_features();
  void set_allocated_visual_features(::safe_browsing::VisualFeatures* visual_features);
  private:
  const ::safe_browsing::VisualFeatures& _internal_visual_features() const;
  ::safe_browsing::VisualFeatures* _internal_mutable_visual_features();
  public:
  void unsafe_arena_set_allocated_visual_features(
      ::safe_browsing::VisualFeatures* visual_features);
  ::safe_browsing::VisualFeatures* unsafe_arena_release_visual_features();

  // required float client_score = 2;
  bool has_client_score() const;
  private:
  bool _internal_has_client_score() const;
  public:
  void clear_client_score();
  float client_score() const;
  void set_client_score(float value);
  private:
  float _internal_client_score() const;
  void _internal_set_client_score(float value);
  public:

  // optional int32 model_version = 6;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  int32_t model_version() const;
  void set_model_version(int32_t value);
  private:
  int32_t _internal_model_version() const;
  void _internal_set_model_version(int32_t value);
  public:

  // optional bool is_phishing = 4;
  bool has_is_phishing() const;
  private:
  bool _internal_has_is_phishing() const;
  public:
  void clear_is_phishing();
  bool is_phishing() const;
  void set_is_phishing(bool value);
  private:
  bool _internal_is_phishing() const;
  void _internal_set_is_phishing(bool value);
  public:

  // optional bool is_dom_match = 21;
  bool has_is_dom_match() const;
  private:
  bool _internal_has_is_dom_match() const;
  public:
  void clear_is_dom_match();
  bool is_dom_match() const;
  void set_is_dom_match(bool value);
  private:
  bool _internal_is_dom_match() const;
  void _internal_set_is_dom_match(bool value);
  public:

  // optional bool is_tflite_match = 25;
  bool has_is_tflite_match() const;
  private:
  bool _internal_has_is_tflite_match() const;
  public:
  void clear_is_tflite_match();
  bool is_tflite_match() const;
  void set_is_tflite_match(bool value);
  private:
  bool _internal_is_tflite_match() const;
  void _internal_set_is_tflite_match(bool value);
  public:

  // optional int32 tflite_model_version = 23;
  bool has_tflite_model_version() const;
  private:
  bool _internal_has_tflite_model_version() const;
  public:
  void clear_tflite_model_version();
  int32_t tflite_model_version() const;
  void set_tflite_model_version(int32_t value);
  private:
  int32_t _internal_tflite_model_version() const;
  void _internal_set_tflite_model_version(int32_t value);
  public:

  // optional int32 dom_model_version = 27;
  bool has_dom_model_version() const;
  private:
  bool _internal_has_dom_model_version() const;
  public:
  void clear_dom_model_version();
  int32_t dom_model_version() const;
  void set_dom_model_version(int32_t value);
  private:
  int32_t _internal_dom_model_version() const;
  void _internal_set_dom_model_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientPhishingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature > feature_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature > non_model_feature_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > shingle_hashes_;
  mutable std::atomic<int> _shingle_hashes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry > referrer_chain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_CategoryScore > tflite_model_scores_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_referrer_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_hash_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_model_filename_;
  ::safe_browsing::ChromeUserPopulation* population_;
  ::safe_browsing::VisualFeatures* visual_features_;
  float client_score_;
  int32_t model_version_;
  bool is_phishing_;
  bool is_dom_match_;
  bool is_tflite_match_;
  int32_t tflite_model_version_;
  int32_t dom_model_version_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientPhishingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientPhishingResponse) */ {
 public:
  inline ClientPhishingResponse() : ClientPhishingResponse(nullptr) {}
  ~ClientPhishingResponse() override;
  explicit PROTOBUF_CONSTEXPR ClientPhishingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPhishingResponse(const ClientPhishingResponse& from);
  ClientPhishingResponse(ClientPhishingResponse&& from) noexcept
    : ClientPhishingResponse() {
    *this = ::std::move(from);
  }

  inline ClientPhishingResponse& operator=(const ClientPhishingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPhishingResponse& operator=(ClientPhishingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientPhishingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPhishingResponse* internal_default_instance() {
    return reinterpret_cast<const ClientPhishingResponse*>(
               &_ClientPhishingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientPhishingResponse& a, ClientPhishingResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientPhishingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPhishingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPhishingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPhishingResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientPhishingResponse& from);
  void MergeFrom(const ClientPhishingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientPhishingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientPhishingResponse";
  }
  protected:
  explicit ClientPhishingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEWhitelistExpressionFieldNumber = 2,
    kPhishyFieldNumber = 1,
  };
  // repeated string OBSOLETE_whitelist_expression = 2;
  int obsolete_whitelist_expression_size() const;
  private:
  int _internal_obsolete_whitelist_expression_size() const;
  public:
  void clear_obsolete_whitelist_expression();
  const std::string& obsolete_whitelist_expression(int index) const;
  std::string* mutable_obsolete_whitelist_expression(int index);
  void set_obsolete_whitelist_expression(int index, const std::string& value);
  void set_obsolete_whitelist_expression(int index, std::string&& value);
  void set_obsolete_whitelist_expression(int index, const char* value);
  void set_obsolete_whitelist_expression(int index, const char* value, size_t size);
  std::string* add_obsolete_whitelist_expression();
  void add_obsolete_whitelist_expression(const std::string& value);
  void add_obsolete_whitelist_expression(std::string&& value);
  void add_obsolete_whitelist_expression(const char* value);
  void add_obsolete_whitelist_expression(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& obsolete_whitelist_expression() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_obsolete_whitelist_expression();
  private:
  const std::string& _internal_obsolete_whitelist_expression(int index) const;
  std::string* _internal_add_obsolete_whitelist_expression();
  public:

  // required bool phishy = 1;
  bool has_phishy() const;
  private:
  bool _internal_has_phishy() const;
  public:
  void clear_phishy();
  bool phishy() const;
  void set_phishy(bool value);
  private:
  bool _internal_phishy() const;
  void _internal_set_phishy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientPhishingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> obsolete_whitelist_expression_;
  bool phishy_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class LoginReputationClientRequest_Frame_Form final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.LoginReputationClientRequest.Frame.Form) */ {
 public:
  inline LoginReputationClientRequest_Frame_Form() : LoginReputationClientRequest_Frame_Form(nullptr) {}
  ~LoginReputationClientRequest_Frame_Form() override;
  explicit PROTOBUF_CONSTEXPR LoginReputationClientRequest_Frame_Form(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReputationClientRequest_Frame_Form(const LoginReputationClientRequest_Frame_Form& from);
  LoginReputationClientRequest_Frame_Form(LoginReputationClientRequest_Frame_Form&& from) noexcept
    : LoginReputationClientRequest_Frame_Form() {
    *this = ::std::move(from);
  }

  inline LoginReputationClientRequest_Frame_Form& operator=(const LoginReputationClientRequest_Frame_Form& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReputationClientRequest_Frame_Form& operator=(LoginReputationClientRequest_Frame_Form&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginReputationClientRequest_Frame_Form& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReputationClientRequest_Frame_Form* internal_default_instance() {
    return reinterpret_cast<const LoginReputationClientRequest_Frame_Form*>(
               &_LoginReputationClientRequest_Frame_Form_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LoginReputationClientRequest_Frame_Form& a, LoginReputationClientRequest_Frame_Form& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoginReputationClientRequest_Frame_Form* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReputationClientRequest_Frame_Form* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReputationClientRequest_Frame_Form* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReputationClientRequest_Frame_Form>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginReputationClientRequest_Frame_Form& from);
  void MergeFrom(const LoginReputationClientRequest_Frame_Form& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReputationClientRequest_Frame_Form* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.LoginReputationClientRequest.Frame.Form";
  }
  protected:
  explicit LoginReputationClientRequest_Frame_Form(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionUrlFieldNumber = 1,
    kHasPasswordFieldFieldNumber = 2,
  };
  // optional string action_url = 1;
  bool has_action_url() const;
  private:
  bool _internal_has_action_url() const;
  public:
  void clear_action_url();
  const std::string& action_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_url();
  PROTOBUF_NODISCARD std::string* release_action_url();
  void set_allocated_action_url(std::string* action_url);
  private:
  const std::string& _internal_action_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_url(const std::string& value);
  std::string* _internal_mutable_action_url();
  public:

  // optional bool has_password_field = 2;
  bool has_has_password_field() const;
  private:
  bool _internal_has_has_password_field() const;
  public:
  void clear_has_password_field();
  bool has_password_field() const;
  void set_has_password_field(bool value);
  private:
  bool _internal_has_password_field() const;
  void _internal_set_has_password_field(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.LoginReputationClientRequest.Frame.Form)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_url_;
  bool has_password_field_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class LoginReputationClientRequest_Frame final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.LoginReputationClientRequest.Frame) */ {
 public:
  inline LoginReputationClientRequest_Frame() : LoginReputationClientRequest_Frame(nullptr) {}
  ~LoginReputationClientRequest_Frame() override;
  explicit PROTOBUF_CONSTEXPR LoginReputationClientRequest_Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReputationClientRequest_Frame(const LoginReputationClientRequest_Frame& from);
  LoginReputationClientRequest_Frame(LoginReputationClientRequest_Frame&& from) noexcept
    : LoginReputationClientRequest_Frame() {
    *this = ::std::move(from);
  }

  inline LoginReputationClientRequest_Frame& operator=(const LoginReputationClientRequest_Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReputationClientRequest_Frame& operator=(LoginReputationClientRequest_Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginReputationClientRequest_Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReputationClientRequest_Frame* internal_default_instance() {
    return reinterpret_cast<const LoginReputationClientRequest_Frame*>(
               &_LoginReputationClientRequest_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LoginReputationClientRequest_Frame& a, LoginReputationClientRequest_Frame& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoginReputationClientRequest_Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReputationClientRequest_Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReputationClientRequest_Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReputationClientRequest_Frame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginReputationClientRequest_Frame& from);
  void MergeFrom(const LoginReputationClientRequest_Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReputationClientRequest_Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.LoginReputationClientRequest.Frame";
  }
  protected:
  explicit LoginReputationClientRequest_Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LoginReputationClientRequest_Frame_Form Form;

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerChainFieldNumber = 5,
    kFormsFieldNumber = 6,
    kUrlFieldNumber = 3,
    kReferrerChainOptionsFieldNumber = 7,
    kFrameIndexFieldNumber = 1,
    kParentFrameIndexFieldNumber = 2,
    kHasPasswordFieldFieldNumber = 4,
  };
  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 5;
  int referrer_chain_size() const;
  private:
  int _internal_referrer_chain_size() const;
  public:
  void clear_referrer_chain();
  ::safe_browsing::ReferrerChainEntry* mutable_referrer_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
      mutable_referrer_chain();
  private:
  const ::safe_browsing::ReferrerChainEntry& _internal_referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* _internal_add_referrer_chain();
  public:
  const ::safe_browsing::ReferrerChainEntry& referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* add_referrer_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
      referrer_chain() const;

  // repeated .safe_browsing.LoginReputationClientRequest.Frame.Form forms = 6;
  int forms_size() const;
  private:
  int _internal_forms_size() const;
  public:
  void clear_forms();
  ::safe_browsing::LoginReputationClientRequest_Frame_Form* mutable_forms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame_Form >*
      mutable_forms();
  private:
  const ::safe_browsing::LoginReputationClientRequest_Frame_Form& _internal_forms(int index) const;
  ::safe_browsing::LoginReputationClientRequest_Frame_Form* _internal_add_forms();
  public:
  const ::safe_browsing::LoginReputationClientRequest_Frame_Form& forms(int index) const;
  ::safe_browsing::LoginReputationClientRequest_Frame_Form* add_forms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame_Form >&
      forms() const;

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 7;
  bool has_referrer_chain_options() const;
  private:
  bool _internal_has_referrer_chain_options() const;
  public:
  void clear_referrer_chain_options();
  const ::safe_browsing::ReferrerChainOptions& referrer_chain_options() const;
  PROTOBUF_NODISCARD ::safe_browsing::ReferrerChainOptions* release_referrer_chain_options();
  ::safe_browsing::ReferrerChainOptions* mutable_referrer_chain_options();
  void set_allocated_referrer_chain_options(::safe_browsing::ReferrerChainOptions* referrer_chain_options);
  private:
  const ::safe_browsing::ReferrerChainOptions& _internal_referrer_chain_options() const;
  ::safe_browsing::ReferrerChainOptions* _internal_mutable_referrer_chain_options();
  public:
  void unsafe_arena_set_allocated_referrer_chain_options(
      ::safe_browsing::ReferrerChainOptions* referrer_chain_options);
  ::safe_browsing::ReferrerChainOptions* unsafe_arena_release_referrer_chain_options();

  // optional int32 frame_index = 1;
  bool has_frame_index() const;
  private:
  bool _internal_has_frame_index() const;
  public:
  void clear_frame_index();
  int32_t frame_index() const;
  void set_frame_index(int32_t value);
  private:
  int32_t _internal_frame_index() const;
  void _internal_set_frame_index(int32_t value);
  public:

  // optional int32 parent_frame_index = 2;
  bool has_parent_frame_index() const;
  private:
  bool _internal_has_parent_frame_index() const;
  public:
  void clear_parent_frame_index();
  int32_t parent_frame_index() const;
  void set_parent_frame_index(int32_t value);
  private:
  int32_t _internal_parent_frame_index() const;
  void _internal_set_parent_frame_index(int32_t value);
  public:

  // optional bool has_password_field = 4;
  bool has_has_password_field() const;
  private:
  bool _internal_has_has_password_field() const;
  public:
  void clear_has_password_field();
  bool has_password_field() const;
  void set_has_password_field(bool value);
  private:
  bool _internal_has_password_field() const;
  void _internal_set_has_password_field(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.LoginReputationClientRequest.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry > referrer_chain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame_Form > forms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::safe_browsing::ReferrerChainOptions* referrer_chain_options_;
  int32_t frame_index_;
  int32_t parent_frame_index_;
  bool has_password_field_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType) */ {
 public:
  inline LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType() : LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(nullptr) {}
  ~LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType() override;
  explicit PROTOBUF_CONSTEXPR LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& from);
  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType&& from) noexcept
    : LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType() {
    *this = ::std::move(from);
  }

  inline LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& operator=(const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& operator=(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* internal_default_instance() {
    return reinterpret_cast<const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType*>(
               &_LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& a, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& from);
  void MergeFrom(const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType";
  }
  protected:
  explicit LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType AccountType;
  static constexpr AccountType UNKNOWN =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_UNKNOWN;
  static constexpr AccountType GSUITE =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_GSUITE;
  static constexpr AccountType GMAIL =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_GMAIL;
  static constexpr AccountType NON_GAIA_ENTERPRISE =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_NON_GAIA_ENTERPRISE;
  static constexpr AccountType SAVED_PASSWORD =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_SAVED_PASSWORD;
  static inline bool AccountType_IsValid(int value) {
    return LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_IsValid(value);
  }
  static constexpr AccountType AccountType_MIN =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_AccountType_MIN;
  static constexpr AccountType AccountType_MAX =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_AccountType_MAX;
  static constexpr int AccountType_ARRAYSIZE =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_AccountType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AccountType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccountType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccountType_Name.");
    return LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Name(enum_t_value);
  }
  static inline bool AccountType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccountType* value) {
    return LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIsAccountSyncingFieldNumber = 1,
    kAccountTypeFieldNumber = 2,
  };
  // optional bool is_account_syncing = 1;
  bool has_is_account_syncing() const;
  private:
  bool _internal_has_is_account_syncing() const;
  public:
  void clear_is_account_syncing();
  bool is_account_syncing() const;
  void set_is_account_syncing(bool value);
  private:
  bool _internal_is_account_syncing() const;
  void _internal_set_is_account_syncing(bool value);
  public:

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.AccountType account_type = 2;
  bool has_account_type() const;
  private:
  bool _internal_has_account_type() const;
  public:
  void clear_account_type();
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType account_type() const;
  void set_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType value);
  private:
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType _internal_account_type() const;
  void _internal_set_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_account_syncing_;
  int account_type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class LoginReputationClientRequest_PasswordReuseEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent) */ {
 public:
  inline LoginReputationClientRequest_PasswordReuseEvent() : LoginReputationClientRequest_PasswordReuseEvent(nullptr) {}
  ~LoginReputationClientRequest_PasswordReuseEvent() override;
  explicit PROTOBUF_CONSTEXPR LoginReputationClientRequest_PasswordReuseEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReputationClientRequest_PasswordReuseEvent(const LoginReputationClientRequest_PasswordReuseEvent& from);
  LoginReputationClientRequest_PasswordReuseEvent(LoginReputationClientRequest_PasswordReuseEvent&& from) noexcept
    : LoginReputationClientRequest_PasswordReuseEvent() {
    *this = ::std::move(from);
  }

  inline LoginReputationClientRequest_PasswordReuseEvent& operator=(const LoginReputationClientRequest_PasswordReuseEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReputationClientRequest_PasswordReuseEvent& operator=(LoginReputationClientRequest_PasswordReuseEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginReputationClientRequest_PasswordReuseEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReputationClientRequest_PasswordReuseEvent* internal_default_instance() {
    return reinterpret_cast<const LoginReputationClientRequest_PasswordReuseEvent*>(
               &_LoginReputationClientRequest_PasswordReuseEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LoginReputationClientRequest_PasswordReuseEvent& a, LoginReputationClientRequest_PasswordReuseEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoginReputationClientRequest_PasswordReuseEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReputationClientRequest_PasswordReuseEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReputationClientRequest_PasswordReuseEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReputationClientRequest_PasswordReuseEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginReputationClientRequest_PasswordReuseEvent& from);
  void MergeFrom(const LoginReputationClientRequest_PasswordReuseEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReputationClientRequest_PasswordReuseEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.LoginReputationClientRequest.PasswordReuseEvent";
  }
  protected:
  explicit LoginReputationClientRequest_PasswordReuseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType ReusedPasswordAccountType;

  typedef LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType SyncAccountType;
  static constexpr SyncAccountType NOT_SIGNED_IN =
    LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_NOT_SIGNED_IN;
  static constexpr SyncAccountType GMAIL =
    LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_GMAIL;
  static constexpr SyncAccountType GSUITE =
    LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_GSUITE;
  static inline bool SyncAccountType_IsValid(int value) {
    return LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_IsValid(value);
  }
  static constexpr SyncAccountType SyncAccountType_MIN =
    LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_SyncAccountType_MIN;
  static constexpr SyncAccountType SyncAccountType_MAX =
    LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_SyncAccountType_MAX;
  static constexpr int SyncAccountType_ARRAYSIZE =
    LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_SyncAccountType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SyncAccountType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SyncAccountType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SyncAccountType_Name.");
    return LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Name(enum_t_value);
  }
  static inline bool SyncAccountType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SyncAccountType* value) {
    return LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Parse(name, value);
  }

  typedef LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType ReusedPasswordType;
  static constexpr ReusedPasswordType REUSED_PASSWORD_TYPE_UNKNOWN =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_REUSED_PASSWORD_TYPE_UNKNOWN;
  static constexpr ReusedPasswordType SAVED_PASSWORD =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_SAVED_PASSWORD;
  static constexpr ReusedPasswordType SIGN_IN_PASSWORD =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_SIGN_IN_PASSWORD;
  static constexpr ReusedPasswordType OTHER_GAIA_PASSWORD =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_OTHER_GAIA_PASSWORD;
  static constexpr ReusedPasswordType ENTERPRISE_PASSWORD =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ENTERPRISE_PASSWORD;
  static inline bool ReusedPasswordType_IsValid(int value) {
    return LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_IsValid(value);
  }
  static constexpr ReusedPasswordType ReusedPasswordType_MIN =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ReusedPasswordType_MIN;
  static constexpr ReusedPasswordType ReusedPasswordType_MAX =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ReusedPasswordType_MAX;
  static constexpr int ReusedPasswordType_ARRAYSIZE =
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_ReusedPasswordType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReusedPasswordType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReusedPasswordType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReusedPasswordType_Name.");
    return LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Name(enum_t_value);
  }
  static inline bool ReusedPasswordType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReusedPasswordType* value) {
    return LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsMatchingPasswordFieldNumber = 1,
    kReusedPasswordAccountTypeFieldNumber = 6,
    kFrameIdFieldNumber = 2,
    kSyncAccountTypeFieldNumber = 4,
    kReusedPasswordTypeFieldNumber = 5,
  };
  // repeated string domains_matching_password = 1;
  int domains_matching_password_size() const;
  private:
  int _internal_domains_matching_password_size() const;
  public:
  void clear_domains_matching_password();
  const std::string& domains_matching_password(int index) const;
  std::string* mutable_domains_matching_password(int index);
  void set_domains_matching_password(int index, const std::string& value);
  void set_domains_matching_password(int index, std::string&& value);
  void set_domains_matching_password(int index, const char* value);
  void set_domains_matching_password(int index, const char* value, size_t size);
  std::string* add_domains_matching_password();
  void add_domains_matching_password(const std::string& value);
  void add_domains_matching_password(std::string&& value);
  void add_domains_matching_password(const char* value);
  void add_domains_matching_password(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& domains_matching_password() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_domains_matching_password();
  private:
  const std::string& _internal_domains_matching_password(int index) const;
  std::string* _internal_add_domains_matching_password();
  public:

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType reused_password_account_type = 6;
  bool has_reused_password_account_type() const;
  private:
  bool _internal_has_reused_password_account_type() const;
  public:
  void clear_reused_password_account_type();
  const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& reused_password_account_type() const;
  PROTOBUF_NODISCARD ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* release_reused_password_account_type();
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* mutable_reused_password_account_type();
  void set_allocated_reused_password_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* reused_password_account_type);
  private:
  const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& _internal_reused_password_account_type() const;
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* _internal_mutable_reused_password_account_type();
  public:
  void unsafe_arena_set_allocated_reused_password_account_type(
      ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* reused_password_account_type);
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* unsafe_arena_release_reused_password_account_type();

  // optional int32 frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  int32_t frame_id() const;
  void set_frame_id(int32_t value);
  private:
  int32_t _internal_frame_id() const;
  void _internal_set_frame_id(int32_t value);
  public:

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.SyncAccountType sync_account_type = 4;
  bool has_sync_account_type() const;
  private:
  bool _internal_has_sync_account_type() const;
  public:
  void clear_sync_account_type();
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType sync_account_type() const;
  void set_sync_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType value);
  private:
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType _internal_sync_account_type() const;
  void _internal_set_sync_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType value);
  public:

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordType reused_password_type = 5 [default = REUSED_PASSWORD_TYPE_UNKNOWN];
  bool has_reused_password_type() const;
  private:
  bool _internal_has_reused_password_type() const;
  public:
  void clear_reused_password_type();
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType reused_password_type() const;
  void set_reused_password_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType value);
  private:
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType _internal_reused_password_type() const;
  void _internal_set_reused_password_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> domains_matching_password_;
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* reused_password_account_type_;
  int32_t frame_id_;
  int sync_account_type_;
  int reused_password_type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class LoginReputationClientRequest_UrlDisplayExperiment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment) */ {
 public:
  inline LoginReputationClientRequest_UrlDisplayExperiment() : LoginReputationClientRequest_UrlDisplayExperiment(nullptr) {}
  ~LoginReputationClientRequest_UrlDisplayExperiment() override;
  explicit PROTOBUF_CONSTEXPR LoginReputationClientRequest_UrlDisplayExperiment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReputationClientRequest_UrlDisplayExperiment(const LoginReputationClientRequest_UrlDisplayExperiment& from);
  LoginReputationClientRequest_UrlDisplayExperiment(LoginReputationClientRequest_UrlDisplayExperiment&& from) noexcept
    : LoginReputationClientRequest_UrlDisplayExperiment() {
    *this = ::std::move(from);
  }

  inline LoginReputationClientRequest_UrlDisplayExperiment& operator=(const LoginReputationClientRequest_UrlDisplayExperiment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReputationClientRequest_UrlDisplayExperiment& operator=(LoginReputationClientRequest_UrlDisplayExperiment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginReputationClientRequest_UrlDisplayExperiment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReputationClientRequest_UrlDisplayExperiment* internal_default_instance() {
    return reinterpret_cast<const LoginReputationClientRequest_UrlDisplayExperiment*>(
               &_LoginReputationClientRequest_UrlDisplayExperiment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LoginReputationClientRequest_UrlDisplayExperiment& a, LoginReputationClientRequest_UrlDisplayExperiment& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoginReputationClientRequest_UrlDisplayExperiment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReputationClientRequest_UrlDisplayExperiment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReputationClientRequest_UrlDisplayExperiment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReputationClientRequest_UrlDisplayExperiment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginReputationClientRequest_UrlDisplayExperiment& from);
  void MergeFrom(const LoginReputationClientRequest_UrlDisplayExperiment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReputationClientRequest_UrlDisplayExperiment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment";
  }
  protected:
  explicit LoginReputationClientRequest_UrlDisplayExperiment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelayedWarningsEnabledFieldNumber = 1,
    kDelayedWarningsMouseClicksEnabledFieldNumber = 2,
    kRevealOnHoverFieldNumber = 3,
    kHideOnInteractionFieldNumber = 4,
    kElideToRegistrableDomainFieldNumber = 5,
    kSimplifiedUrlDisplayEnabledFieldNumber = 6,
  };
  // optional bool delayed_warnings_enabled = 1;
  bool has_delayed_warnings_enabled() const;
  private:
  bool _internal_has_delayed_warnings_enabled() const;
  public:
  void clear_delayed_warnings_enabled();
  bool delayed_warnings_enabled() const;
  void set_delayed_warnings_enabled(bool value);
  private:
  bool _internal_delayed_warnings_enabled() const;
  void _internal_set_delayed_warnings_enabled(bool value);
  public:

  // optional bool delayed_warnings_mouse_clicks_enabled = 2;
  bool has_delayed_warnings_mouse_clicks_enabled() const;
  private:
  bool _internal_has_delayed_warnings_mouse_clicks_enabled() const;
  public:
  void clear_delayed_warnings_mouse_clicks_enabled();
  bool delayed_warnings_mouse_clicks_enabled() const;
  void set_delayed_warnings_mouse_clicks_enabled(bool value);
  private:
  bool _internal_delayed_warnings_mouse_clicks_enabled() const;
  void _internal_set_delayed_warnings_mouse_clicks_enabled(bool value);
  public:

  // optional bool reveal_on_hover = 3;
  bool has_reveal_on_hover() const;
  private:
  bool _internal_has_reveal_on_hover() const;
  public:
  void clear_reveal_on_hover();
  bool reveal_on_hover() const;
  void set_reveal_on_hover(bool value);
  private:
  bool _internal_reveal_on_hover() const;
  void _internal_set_reveal_on_hover(bool value);
  public:

  // optional bool hide_on_interaction = 4;
  bool has_hide_on_interaction() const;
  private:
  bool _internal_has_hide_on_interaction() const;
  public:
  void clear_hide_on_interaction();
  bool hide_on_interaction() const;
  void set_hide_on_interaction(bool value);
  private:
  bool _internal_hide_on_interaction() const;
  void _internal_set_hide_on_interaction(bool value);
  public:

  // optional bool elide_to_registrable_domain = 5;
  bool has_elide_to_registrable_domain() const;
  private:
  bool _internal_has_elide_to_registrable_domain() const;
  public:
  void clear_elide_to_registrable_domain();
  bool elide_to_registrable_domain() const;
  void set_elide_to_registrable_domain(bool value);
  private:
  bool _internal_elide_to_registrable_domain() const;
  void _internal_set_elide_to_registrable_domain(bool value);
  public:

  // optional bool simplified_url_display_enabled = 6;
  bool has_simplified_url_display_enabled() const;
  private:
  bool _internal_has_simplified_url_display_enabled() const;
  public:
  void clear_simplified_url_display_enabled();
  bool simplified_url_display_enabled() const;
  void set_simplified_url_display_enabled(bool value);
  private:
  bool _internal_simplified_url_display_enabled() const;
  void _internal_set_simplified_url_display_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool delayed_warnings_enabled_;
  bool delayed_warnings_mouse_clicks_enabled_;
  bool reveal_on_hover_;
  bool hide_on_interaction_;
  bool elide_to_registrable_domain_;
  bool simplified_url_display_enabled_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class LoginReputationClientRequest_ReferringAppInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.LoginReputationClientRequest.ReferringAppInfo) */ {
 public:
  inline LoginReputationClientRequest_ReferringAppInfo() : LoginReputationClientRequest_ReferringAppInfo(nullptr) {}
  ~LoginReputationClientRequest_ReferringAppInfo() override;
  explicit PROTOBUF_CONSTEXPR LoginReputationClientRequest_ReferringAppInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReputationClientRequest_ReferringAppInfo(const LoginReputationClientRequest_ReferringAppInfo& from);
  LoginReputationClientRequest_ReferringAppInfo(LoginReputationClientRequest_ReferringAppInfo&& from) noexcept
    : LoginReputationClientRequest_ReferringAppInfo() {
    *this = ::std::move(from);
  }

  inline LoginReputationClientRequest_ReferringAppInfo& operator=(const LoginReputationClientRequest_ReferringAppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReputationClientRequest_ReferringAppInfo& operator=(LoginReputationClientRequest_ReferringAppInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginReputationClientRequest_ReferringAppInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReputationClientRequest_ReferringAppInfo* internal_default_instance() {
    return reinterpret_cast<const LoginReputationClientRequest_ReferringAppInfo*>(
               &_LoginReputationClientRequest_ReferringAppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LoginReputationClientRequest_ReferringAppInfo& a, LoginReputationClientRequest_ReferringAppInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoginReputationClientRequest_ReferringAppInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReputationClientRequest_ReferringAppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReputationClientRequest_ReferringAppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReputationClientRequest_ReferringAppInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginReputationClientRequest_ReferringAppInfo& from);
  void MergeFrom(const LoginReputationClientRequest_ReferringAppInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReputationClientRequest_ReferringAppInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.LoginReputationClientRequest.ReferringAppInfo";
  }
  protected:
  explicit LoginReputationClientRequest_ReferringAppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource ReferringAppSource;
  static constexpr ReferringAppSource REFERRING_APP_SOURCE_UNSPECIFIED =
    LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_REFERRING_APP_SOURCE_UNSPECIFIED;
  static constexpr ReferringAppSource KNOWN_APP_ID =
    LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_KNOWN_APP_ID;
  static constexpr ReferringAppSource UNKNOWN_APP_ID =
    LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_UNKNOWN_APP_ID;
  static constexpr ReferringAppSource ACTIVITY_REFERRER =
    LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ACTIVITY_REFERRER;
  static inline bool ReferringAppSource_IsValid(int value) {
    return LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_IsValid(value);
  }
  static constexpr ReferringAppSource ReferringAppSource_MIN =
    LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ReferringAppSource_MIN;
  static constexpr ReferringAppSource ReferringAppSource_MAX =
    LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ReferringAppSource_MAX;
  static constexpr int ReferringAppSource_ARRAYSIZE =
    LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_ReferringAppSource_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReferringAppSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReferringAppSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReferringAppSource_Name.");
    return LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Name(enum_t_value);
  }
  static inline bool ReferringAppSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReferringAppSource* value) {
    return LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReferringAppNameFieldNumber = 2,
    kReferringAppSourceFieldNumber = 1,
  };
  // optional string referring_app_name = 2;
  bool has_referring_app_name() const;
  private:
  bool _internal_has_referring_app_name() const;
  public:
  void clear_referring_app_name();
  const std::string& referring_app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referring_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referring_app_name();
  PROTOBUF_NODISCARD std::string* release_referring_app_name();
  void set_allocated_referring_app_name(std::string* referring_app_name);
  private:
  const std::string& _internal_referring_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referring_app_name(const std::string& value);
  std::string* _internal_mutable_referring_app_name();
  public:

  // optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo.ReferringAppSource referring_app_source = 1;
  bool has_referring_app_source() const;
  private:
  bool _internal_has_referring_app_source() const;
  public:
  void clear_referring_app_source();
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource referring_app_source() const;
  void set_referring_app_source(::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource value);
  private:
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource _internal_referring_app_source() const;
  void _internal_set_referring_app_source(::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referring_app_name_;
  int referring_app_source_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class LoginReputationClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.LoginReputationClientRequest) */ {
 public:
  inline LoginReputationClientRequest() : LoginReputationClientRequest(nullptr) {}
  ~LoginReputationClientRequest() override;
  explicit PROTOBUF_CONSTEXPR LoginReputationClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReputationClientRequest(const LoginReputationClientRequest& from);
  LoginReputationClientRequest(LoginReputationClientRequest&& from) noexcept
    : LoginReputationClientRequest() {
    *this = ::std::move(from);
  }

  inline LoginReputationClientRequest& operator=(const LoginReputationClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReputationClientRequest& operator=(LoginReputationClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginReputationClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReputationClientRequest* internal_default_instance() {
    return reinterpret_cast<const LoginReputationClientRequest*>(
               &_LoginReputationClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LoginReputationClientRequest& a, LoginReputationClientRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoginReputationClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReputationClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReputationClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReputationClientRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginReputationClientRequest& from);
  void MergeFrom(const LoginReputationClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReputationClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.LoginReputationClientRequest";
  }
  protected:
  explicit LoginReputationClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LoginReputationClientRequest_Frame Frame;
  typedef LoginReputationClientRequest_PasswordReuseEvent PasswordReuseEvent;
  typedef LoginReputationClientRequest_UrlDisplayExperiment UrlDisplayExperiment;
  typedef LoginReputationClientRequest_ReferringAppInfo ReferringAppInfo;

  typedef LoginReputationClientRequest_TriggerType TriggerType;
  static constexpr TriggerType TRIGGER_TYPE_UNSPECIFIED =
    LoginReputationClientRequest_TriggerType_TRIGGER_TYPE_UNSPECIFIED;
  static constexpr TriggerType UNFAMILIAR_LOGIN_PAGE =
    LoginReputationClientRequest_TriggerType_UNFAMILIAR_LOGIN_PAGE;
  static constexpr TriggerType PASSWORD_REUSE_EVENT =
    LoginReputationClientRequest_TriggerType_PASSWORD_REUSE_EVENT;
  static inline bool TriggerType_IsValid(int value) {
    return LoginReputationClientRequest_TriggerType_IsValid(value);
  }
  static constexpr TriggerType TriggerType_MIN =
    LoginReputationClientRequest_TriggerType_TriggerType_MIN;
  static constexpr TriggerType TriggerType_MAX =
    LoginReputationClientRequest_TriggerType_TriggerType_MAX;
  static constexpr int TriggerType_ARRAYSIZE =
    LoginReputationClientRequest_TriggerType_TriggerType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TriggerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TriggerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TriggerType_Name.");
    return LoginReputationClientRequest_TriggerType_Name(enum_t_value);
  }
  static inline bool TriggerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TriggerType* value) {
    return LoginReputationClientRequest_TriggerType_Parse(name, value);
  }

  typedef LoginReputationClientRequest_ReportType ReportType;
  static constexpr ReportType UNKNOWN =
    LoginReputationClientRequest_ReportType_UNKNOWN;
  static constexpr ReportType FULL_REPORT =
    LoginReputationClientRequest_ReportType_FULL_REPORT;
  static constexpr ReportType SAMPLE_REPORT =
    LoginReputationClientRequest_ReportType_SAMPLE_REPORT;
  static inline bool ReportType_IsValid(int value) {
    return LoginReputationClientRequest_ReportType_IsValid(value);
  }
  static constexpr ReportType ReportType_MIN =
    LoginReputationClientRequest_ReportType_ReportType_MIN;
  static constexpr ReportType ReportType_MAX =
    LoginReputationClientRequest_ReportType_ReportType_MAX;
  static constexpr int ReportType_ARRAYSIZE =
    LoginReputationClientRequest_ReportType_ReportType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReportType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReportType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReportType_Name.");
    return LoginReputationClientRequest_ReportType_Name(enum_t_value);
  }
  static inline bool ReportType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReportType* value) {
    return LoginReputationClientRequest_ReportType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 3,
    kPageUrlFieldNumber = 1,
    kContentTypeFieldNumber = 8,
    kPasswordReuseEventFieldNumber = 4,
    kPopulationFieldNumber = 6,
    kVisualFeaturesFieldNumber = 11,
    kDomFeaturesFieldNumber = 12,
    kUrlDisplayExperimentFieldNumber = 14,
    kReferringAppInfoFieldNumber = 15,
    kTriggerTypeFieldNumber = 2,
    kStoredVerdictCntFieldNumber = 5,
    kClickedThroughInterstitialFieldNumber = 7,
    kContentAreaHeightFieldNumber = 9,
    kContentAreaWidthFieldNumber = 10,
    kReportTypeFieldNumber = 13,
  };
  // repeated .safe_browsing.LoginReputationClientRequest.Frame frames = 3;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::safe_browsing::LoginReputationClientRequest_Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame >*
      mutable_frames();
  private:
  const ::safe_browsing::LoginReputationClientRequest_Frame& _internal_frames(int index) const;
  ::safe_browsing::LoginReputationClientRequest_Frame* _internal_add_frames();
  public:
  const ::safe_browsing::LoginReputationClientRequest_Frame& frames(int index) const;
  ::safe_browsing::LoginReputationClientRequest_Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame >&
      frames() const;

  // optional string page_url = 1;
  bool has_page_url() const;
  private:
  bool _internal_has_page_url() const;
  public:
  void clear_page_url();
  const std::string& page_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_url();
  PROTOBUF_NODISCARD std::string* release_page_url();
  void set_allocated_page_url(std::string* page_url);
  private:
  const std::string& _internal_page_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_url(const std::string& value);
  std::string* _internal_mutable_page_url();
  public:

  // optional string content_type = 8;
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent password_reuse_event = 4;
  bool has_password_reuse_event() const;
  private:
  bool _internal_has_password_reuse_event() const;
  public:
  void clear_password_reuse_event();
  const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent& password_reuse_event() const;
  PROTOBUF_NODISCARD ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* release_password_reuse_event();
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* mutable_password_reuse_event();
  void set_allocated_password_reuse_event(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* password_reuse_event);
  private:
  const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent& _internal_password_reuse_event() const;
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* _internal_mutable_password_reuse_event();
  public:
  void unsafe_arena_set_allocated_password_reuse_event(
      ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* password_reuse_event);
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* unsafe_arena_release_password_reuse_event();

  // optional .safe_browsing.ChromeUserPopulation population = 6;
  bool has_population() const;
  private:
  bool _internal_has_population() const;
  public:
  void clear_population();
  const ::safe_browsing::ChromeUserPopulation& population() const;
  PROTOBUF_NODISCARD ::safe_browsing::ChromeUserPopulation* release_population();
  ::safe_browsing::ChromeUserPopulation* mutable_population();
  void set_allocated_population(::safe_browsing::ChromeUserPopulation* population);
  private:
  const ::safe_browsing::ChromeUserPopulation& _internal_population() const;
  ::safe_browsing::ChromeUserPopulation* _internal_mutable_population();
  public:
  void unsafe_arena_set_allocated_population(
      ::safe_browsing::ChromeUserPopulation* population);
  ::safe_browsing::ChromeUserPopulation* unsafe_arena_release_population();

  // optional .safe_browsing.VisualFeatures visual_features = 11;
  bool has_visual_features() const;
  private:
  bool _internal_has_visual_features() const;
  public:
  void clear_visual_features();
  const ::safe_browsing::VisualFeatures& visual_features() const;
  PROTOBUF_NODISCARD ::safe_browsing::VisualFeatures* release_visual_features();
  ::safe_browsing::VisualFeatures* mutable_visual_features();
  void set_allocated_visual_features(::safe_browsing::VisualFeatures* visual_features);
  private:
  const ::safe_browsing::VisualFeatures& _internal_visual_features() const;
  ::safe_browsing::VisualFeatures* _internal_mutable_visual_features();
  public:
  void unsafe_arena_set_allocated_visual_features(
      ::safe_browsing::VisualFeatures* visual_features);
  ::safe_browsing::VisualFeatures* unsafe_arena_release_visual_features();

  // optional .safe_browsing.DomFeatures dom_features = 12;
  bool has_dom_features() const;
  private:
  bool _internal_has_dom_features() const;
  public:
  void clear_dom_features();
  const ::safe_browsing::DomFeatures& dom_features() const;
  PROTOBUF_NODISCARD ::safe_browsing::DomFeatures* release_dom_features();
  ::safe_browsing::DomFeatures* mutable_dom_features();
  void set_allocated_dom_features(::safe_browsing::DomFeatures* dom_features);
  private:
  const ::safe_browsing::DomFeatures& _internal_dom_features() const;
  ::safe_browsing::DomFeatures* _internal_mutable_dom_features();
  public:
  void unsafe_arena_set_allocated_dom_features(
      ::safe_browsing::DomFeatures* dom_features);
  ::safe_browsing::DomFeatures* unsafe_arena_release_dom_features();

  // optional .safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment url_display_experiment = 14;
  bool has_url_display_experiment() const;
  private:
  bool _internal_has_url_display_experiment() const;
  public:
  void clear_url_display_experiment();
  const ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment& url_display_experiment() const;
  PROTOBUF_NODISCARD ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* release_url_display_experiment();
  ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* mutable_url_display_experiment();
  void set_allocated_url_display_experiment(::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* url_display_experiment);
  private:
  const ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment& _internal_url_display_experiment() const;
  ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* _internal_mutable_url_display_experiment();
  public:
  void unsafe_arena_set_allocated_url_display_experiment(
      ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* url_display_experiment);
  ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* unsafe_arena_release_url_display_experiment();

  // optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo referring_app_info = 15;
  bool has_referring_app_info() const;
  private:
  bool _internal_has_referring_app_info() const;
  public:
  void clear_referring_app_info();
  const ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo& referring_app_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* release_referring_app_info();
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* mutable_referring_app_info();
  void set_allocated_referring_app_info(::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* referring_app_info);
  private:
  const ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo& _internal_referring_app_info() const;
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* _internal_mutable_referring_app_info();
  public:
  void unsafe_arena_set_allocated_referring_app_info(
      ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* referring_app_info);
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* unsafe_arena_release_referring_app_info();

  // optional .safe_browsing.LoginReputationClientRequest.TriggerType trigger_type = 2;
  bool has_trigger_type() const;
  private:
  bool _internal_has_trigger_type() const;
  public:
  void clear_trigger_type();
  ::safe_browsing::LoginReputationClientRequest_TriggerType trigger_type() const;
  void set_trigger_type(::safe_browsing::LoginReputationClientRequest_TriggerType value);
  private:
  ::safe_browsing::LoginReputationClientRequest_TriggerType _internal_trigger_type() const;
  void _internal_set_trigger_type(::safe_browsing::LoginReputationClientRequest_TriggerType value);
  public:

  // optional int32 stored_verdict_cnt = 5;
  bool has_stored_verdict_cnt() const;
  private:
  bool _internal_has_stored_verdict_cnt() const;
  public:
  void clear_stored_verdict_cnt();
  int32_t stored_verdict_cnt() const;
  void set_stored_verdict_cnt(int32_t value);
  private:
  int32_t _internal_stored_verdict_cnt() const;
  void _internal_set_stored_verdict_cnt(int32_t value);
  public:

  // optional bool clicked_through_interstitial = 7;
  bool has_clicked_through_interstitial() const;
  private:
  bool _internal_has_clicked_through_interstitial() const;
  public:
  void clear_clicked_through_interstitial();
  bool clicked_through_interstitial() const;
  void set_clicked_through_interstitial(bool value);
  private:
  bool _internal_clicked_through_interstitial() const;
  void _internal_set_clicked_through_interstitial(bool value);
  public:

  // optional int32 content_area_height = 9;
  bool has_content_area_height() const;
  private:
  bool _internal_has_content_area_height() const;
  public:
  void clear_content_area_height();
  int32_t content_area_height() const;
  void set_content_area_height(int32_t value);
  private:
  int32_t _internal_content_area_height() const;
  void _internal_set_content_area_height(int32_t value);
  public:

  // optional int32 content_area_width = 10;
  bool has_content_area_width() const;
  private:
  bool _internal_has_content_area_width() const;
  public:
  void clear_content_area_width();
  int32_t content_area_width() const;
  void set_content_area_width(int32_t value);
  private:
  int32_t _internal_content_area_width() const;
  void _internal_set_content_area_width(int32_t value);
  public:

  // optional .safe_browsing.LoginReputationClientRequest.ReportType report_type = 13;
  bool has_report_type() const;
  private:
  bool _internal_has_report_type() const;
  public:
  void clear_report_type();
  ::safe_browsing::LoginReputationClientRequest_ReportType report_type() const;
  void set_report_type(::safe_browsing::LoginReputationClientRequest_ReportType value);
  private:
  ::safe_browsing::LoginReputationClientRequest_ReportType _internal_report_type() const;
  void _internal_set_report_type(::safe_browsing::LoginReputationClientRequest_ReportType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.LoginReputationClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame > frames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* password_reuse_event_;
  ::safe_browsing::ChromeUserPopulation* population_;
  ::safe_browsing::VisualFeatures* visual_features_;
  ::safe_browsing::DomFeatures* dom_features_;
  ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* url_display_experiment_;
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* referring_app_info_;
  int trigger_type_;
  int32_t stored_verdict_cnt_;
  bool clicked_through_interstitial_;
  int32_t content_area_height_;
  int32_t content_area_width_;
  int report_type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class LoginReputationClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.LoginReputationClientResponse) */ {
 public:
  inline LoginReputationClientResponse() : LoginReputationClientResponse(nullptr) {}
  ~LoginReputationClientResponse() override;
  explicit PROTOBUF_CONSTEXPR LoginReputationClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReputationClientResponse(const LoginReputationClientResponse& from);
  LoginReputationClientResponse(LoginReputationClientResponse&& from) noexcept
    : LoginReputationClientResponse() {
    *this = ::std::move(from);
  }

  inline LoginReputationClientResponse& operator=(const LoginReputationClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReputationClientResponse& operator=(LoginReputationClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginReputationClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReputationClientResponse* internal_default_instance() {
    return reinterpret_cast<const LoginReputationClientResponse*>(
               &_LoginReputationClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LoginReputationClientResponse& a, LoginReputationClientResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoginReputationClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReputationClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReputationClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReputationClientResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginReputationClientResponse& from);
  void MergeFrom(const LoginReputationClientResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReputationClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.LoginReputationClientResponse";
  }
  protected:
  explicit LoginReputationClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LoginReputationClientResponse_VerdictType VerdictType;
  static constexpr VerdictType VERDICT_TYPE_UNSPECIFIED =
    LoginReputationClientResponse_VerdictType_VERDICT_TYPE_UNSPECIFIED;
  static constexpr VerdictType SAFE =
    LoginReputationClientResponse_VerdictType_SAFE;
  static constexpr VerdictType LOW_REPUTATION =
    LoginReputationClientResponse_VerdictType_LOW_REPUTATION;
  static constexpr VerdictType PHISHING =
    LoginReputationClientResponse_VerdictType_PHISHING;
  static inline bool VerdictType_IsValid(int value) {
    return LoginReputationClientResponse_VerdictType_IsValid(value);
  }
  static constexpr VerdictType VerdictType_MIN =
    LoginReputationClientResponse_VerdictType_VerdictType_MIN;
  static constexpr VerdictType VerdictType_MAX =
    LoginReputationClientResponse_VerdictType_VerdictType_MAX;
  static constexpr int VerdictType_ARRAYSIZE =
    LoginReputationClientResponse_VerdictType_VerdictType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VerdictType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerdictType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerdictType_Name.");
    return LoginReputationClientResponse_VerdictType_Name(enum_t_value);
  }
  static inline bool VerdictType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VerdictType* value) {
    return LoginReputationClientResponse_VerdictType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCacheExpressionFieldNumber = 3,
    kVerdictTokenFieldNumber = 5,
    kCacheDurationSecFieldNumber = 2,
    kVerdictTypeFieldNumber = 1,
    kDEPRECATEDCacheExpressionExactMatchFieldNumber = 4,
  };
  // optional string cache_expression = 3;
  bool has_cache_expression() const;
  private:
  bool _internal_has_cache_expression() const;
  public:
  void clear_cache_expression();
  const std::string& cache_expression() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_expression(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_expression();
  PROTOBUF_NODISCARD std::string* release_cache_expression();
  void set_allocated_cache_expression(std::string* cache_expression);
  private:
  const std::string& _internal_cache_expression() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_expression(const std::string& value);
  std::string* _internal_mutable_cache_expression();
  public:

  // optional bytes verdict_token = 5;
  bool has_verdict_token() const;
  private:
  bool _internal_has_verdict_token() const;
  public:
  void clear_verdict_token();
  const std::string& verdict_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verdict_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verdict_token();
  PROTOBUF_NODISCARD std::string* release_verdict_token();
  void set_allocated_verdict_token(std::string* verdict_token);
  private:
  const std::string& _internal_verdict_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verdict_token(const std::string& value);
  std::string* _internal_mutable_verdict_token();
  public:

  // optional int64 cache_duration_sec = 2;
  bool has_cache_duration_sec() const;
  private:
  bool _internal_has_cache_duration_sec() const;
  public:
  void clear_cache_duration_sec();
  int64_t cache_duration_sec() const;
  void set_cache_duration_sec(int64_t value);
  private:
  int64_t _internal_cache_duration_sec() const;
  void _internal_set_cache_duration_sec(int64_t value);
  public:

  // optional .safe_browsing.LoginReputationClientResponse.VerdictType verdict_type = 1;
  bool has_verdict_type() const;
  private:
  bool _internal_has_verdict_type() const;
  public:
  void clear_verdict_type();
  ::safe_browsing::LoginReputationClientResponse_VerdictType verdict_type() const;
  void set_verdict_type(::safe_browsing::LoginReputationClientResponse_VerdictType value);
  private:
  ::safe_browsing::LoginReputationClientResponse_VerdictType _internal_verdict_type() const;
  void _internal_set_verdict_type(::safe_browsing::LoginReputationClientResponse_VerdictType value);
  public:

  // optional bool DEPRECATED_cache_expression_exact_match = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_cache_expression_exact_match() const;
  private:
  bool _internal_has_deprecated_cache_expression_exact_match() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_cache_expression_exact_match();
  PROTOBUF_DEPRECATED bool deprecated_cache_expression_exact_match() const;
  PROTOBUF_DEPRECATED void set_deprecated_cache_expression_exact_match(bool value);
  private:
  bool _internal_deprecated_cache_expression_exact_match() const;
  void _internal_set_deprecated_cache_expression_exact_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.LoginReputationClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_expression_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verdict_token_;
  int64_t cache_duration_sec_;
  int verdict_type_;
  bool deprecated_cache_expression_exact_match_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class VisualFeatures_BlurredImage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.VisualFeatures.BlurredImage) */ {
 public:
  inline VisualFeatures_BlurredImage() : VisualFeatures_BlurredImage(nullptr) {}
  ~VisualFeatures_BlurredImage() override;
  explicit PROTOBUF_CONSTEXPR VisualFeatures_BlurredImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisualFeatures_BlurredImage(const VisualFeatures_BlurredImage& from);
  VisualFeatures_BlurredImage(VisualFeatures_BlurredImage&& from) noexcept
    : VisualFeatures_BlurredImage() {
    *this = ::std::move(from);
  }

  inline VisualFeatures_BlurredImage& operator=(const VisualFeatures_BlurredImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualFeatures_BlurredImage& operator=(VisualFeatures_BlurredImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VisualFeatures_BlurredImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisualFeatures_BlurredImage* internal_default_instance() {
    return reinterpret_cast<const VisualFeatures_BlurredImage*>(
               &_VisualFeatures_BlurredImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VisualFeatures_BlurredImage& a, VisualFeatures_BlurredImage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(VisualFeatures_BlurredImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualFeatures_BlurredImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisualFeatures_BlurredImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisualFeatures_BlurredImage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VisualFeatures_BlurredImage& from);
  void MergeFrom(const VisualFeatures_BlurredImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualFeatures_BlurredImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.VisualFeatures.BlurredImage";
  }
  protected:
  explicit VisualFeatures_BlurredImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.VisualFeatures.BlurredImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t width_;
  int32_t height_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class VisualFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.VisualFeatures) */ {
 public:
  inline VisualFeatures() : VisualFeatures(nullptr) {}
  ~VisualFeatures() override;
  explicit PROTOBUF_CONSTEXPR VisualFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisualFeatures(const VisualFeatures& from);
  VisualFeatures(VisualFeatures&& from) noexcept
    : VisualFeatures() {
    *this = ::std::move(from);
  }

  inline VisualFeatures& operator=(const VisualFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualFeatures& operator=(VisualFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VisualFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisualFeatures* internal_default_instance() {
    return reinterpret_cast<const VisualFeatures*>(
               &_VisualFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VisualFeatures& a, VisualFeatures& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(VisualFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisualFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisualFeatures>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VisualFeatures& from);
  void MergeFrom(const VisualFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.VisualFeatures";
  }
  protected:
  explicit VisualFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef VisualFeatures_BlurredImage BlurredImage;

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
  };
  // optional .safe_browsing.VisualFeatures.BlurredImage image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::safe_browsing::VisualFeatures_BlurredImage& image() const;
  PROTOBUF_NODISCARD ::safe_browsing::VisualFeatures_BlurredImage* release_image();
  ::safe_browsing::VisualFeatures_BlurredImage* mutable_image();
  void set_allocated_image(::safe_browsing::VisualFeatures_BlurredImage* image);
  private:
  const ::safe_browsing::VisualFeatures_BlurredImage& _internal_image() const;
  ::safe_browsing::VisualFeatures_BlurredImage* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::safe_browsing::VisualFeatures_BlurredImage* image);
  ::safe_browsing::VisualFeatures_BlurredImage* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:safe_browsing.VisualFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safe_browsing::VisualFeatures_BlurredImage* image_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class DomFeatures_Feature final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.DomFeatures.Feature) */ {
 public:
  inline DomFeatures_Feature() : DomFeatures_Feature(nullptr) {}
  ~DomFeatures_Feature() override;
  explicit PROTOBUF_CONSTEXPR DomFeatures_Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DomFeatures_Feature(const DomFeatures_Feature& from);
  DomFeatures_Feature(DomFeatures_Feature&& from) noexcept
    : DomFeatures_Feature() {
    *this = ::std::move(from);
  }

  inline DomFeatures_Feature& operator=(const DomFeatures_Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline DomFeatures_Feature& operator=(DomFeatures_Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DomFeatures_Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const DomFeatures_Feature* internal_default_instance() {
    return reinterpret_cast<const DomFeatures_Feature*>(
               &_DomFeatures_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DomFeatures_Feature& a, DomFeatures_Feature& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DomFeatures_Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DomFeatures_Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DomFeatures_Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DomFeatures_Feature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DomFeatures_Feature& from);
  void MergeFrom(const DomFeatures_Feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DomFeatures_Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.DomFeatures.Feature";
  }
  protected:
  explicit DomFeatures_Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.DomFeatures.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double value_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class DomFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.DomFeatures) */ {
 public:
  inline DomFeatures() : DomFeatures(nullptr) {}
  ~DomFeatures() override;
  explicit PROTOBUF_CONSTEXPR DomFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DomFeatures(const DomFeatures& from);
  DomFeatures(DomFeatures&& from) noexcept
    : DomFeatures() {
    *this = ::std::move(from);
  }

  inline DomFeatures& operator=(const DomFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline DomFeatures& operator=(DomFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DomFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const DomFeatures* internal_default_instance() {
    return reinterpret_cast<const DomFeatures*>(
               &_DomFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DomFeatures& a, DomFeatures& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DomFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DomFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DomFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DomFeatures>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DomFeatures& from);
  void MergeFrom(const DomFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DomFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.DomFeatures";
  }
  protected:
  explicit DomFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DomFeatures_Feature Feature;

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureMapFieldNumber = 1,
    kShingleHashesFieldNumber = 2,
    kModelVersionFieldNumber = 3,
  };
  // repeated .safe_browsing.DomFeatures.Feature feature_map = 1;
  int feature_map_size() const;
  private:
  int _internal_feature_map_size() const;
  public:
  void clear_feature_map();
  ::safe_browsing::DomFeatures_Feature* mutable_feature_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DomFeatures_Feature >*
      mutable_feature_map();
  private:
  const ::safe_browsing::DomFeatures_Feature& _internal_feature_map(int index) const;
  ::safe_browsing::DomFeatures_Feature* _internal_add_feature_map();
  public:
  const ::safe_browsing::DomFeatures_Feature& feature_map(int index) const;
  ::safe_browsing::DomFeatures_Feature* add_feature_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DomFeatures_Feature >&
      feature_map() const;

  // repeated uint32 shingle_hashes = 2 [packed = true];
  int shingle_hashes_size() const;
  private:
  int _internal_shingle_hashes_size() const;
  public:
  void clear_shingle_hashes();
  private:
  uint32_t _internal_shingle_hashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_shingle_hashes() const;
  void _internal_add_shingle_hashes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_shingle_hashes();
  public:
  uint32_t shingle_hashes(int index) const;
  void set_shingle_hashes(int index, uint32_t value);
  void add_shingle_hashes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      shingle_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_shingle_hashes();

  // optional int32 model_version = 3;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  int32_t model_version() const;
  void set_model_version(int32_t value);
  private:
  int32_t _internal_model_version() const;
  void _internal_set_model_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.DomFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DomFeatures_Feature > feature_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > shingle_hashes_;
  mutable std::atomic<int> _shingle_hashes_cached_byte_size_;
  int32_t model_version_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_Digests final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.Digests) */ {
 public:
  inline ClientDownloadRequest_Digests() : ClientDownloadRequest_Digests(nullptr) {}
  ~ClientDownloadRequest_Digests() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_Digests(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_Digests(const ClientDownloadRequest_Digests& from);
  ClientDownloadRequest_Digests(ClientDownloadRequest_Digests&& from) noexcept
    : ClientDownloadRequest_Digests() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_Digests& operator=(const ClientDownloadRequest_Digests& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_Digests& operator=(ClientDownloadRequest_Digests&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_Digests& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_Digests* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_Digests*>(
               &_ClientDownloadRequest_Digests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ClientDownloadRequest_Digests& a, ClientDownloadRequest_Digests& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_Digests* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_Digests* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_Digests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_Digests>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_Digests& from);
  void MergeFrom(const ClientDownloadRequest_Digests& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_Digests* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.Digests";
  }
  protected:
  explicit ClientDownloadRequest_Digests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSha256FieldNumber = 1,
    kSha1FieldNumber = 2,
    kMd5FieldNumber = 3,
  };
  // optional bytes sha256 = 1;
  bool has_sha256() const;
  private:
  bool _internal_has_sha256() const;
  public:
  void clear_sha256();
  const std::string& sha256() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha256(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha256();
  PROTOBUF_NODISCARD std::string* release_sha256();
  void set_allocated_sha256(std::string* sha256);
  private:
  const std::string& _internal_sha256() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha256(const std::string& value);
  std::string* _internal_mutable_sha256();
  public:

  // optional bytes sha1 = 2;
  bool has_sha1() const;
  private:
  bool _internal_has_sha1() const;
  public:
  void clear_sha1();
  const std::string& sha1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha1();
  PROTOBUF_NODISCARD std::string* release_sha1();
  void set_allocated_sha1(std::string* sha1);
  private:
  const std::string& _internal_sha1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha1(const std::string& value);
  std::string* _internal_mutable_sha1();
  public:

  // optional bytes md5 = 3;
  bool has_md5() const;
  private:
  bool _internal_has_md5() const;
  public:
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.Digests)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha256_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_Resource final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.Resource) */ {
 public:
  inline ClientDownloadRequest_Resource() : ClientDownloadRequest_Resource(nullptr) {}
  ~ClientDownloadRequest_Resource() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_Resource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_Resource(const ClientDownloadRequest_Resource& from);
  ClientDownloadRequest_Resource(ClientDownloadRequest_Resource&& from) noexcept
    : ClientDownloadRequest_Resource() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_Resource& operator=(const ClientDownloadRequest_Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_Resource& operator=(ClientDownloadRequest_Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_Resource* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_Resource*>(
               &_ClientDownloadRequest_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ClientDownloadRequest_Resource& a, ClientDownloadRequest_Resource& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_Resource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_Resource& from);
  void MergeFrom(const ClientDownloadRequest_Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_Resource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.Resource";
  }
  protected:
  explicit ClientDownloadRequest_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kRemoteIpFieldNumber = 3,
    kReferrerFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // required string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional bytes remote_ip = 3;
  bool has_remote_ip() const;
  private:
  bool _internal_has_remote_ip() const;
  public:
  void clear_remote_ip();
  const std::string& remote_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_ip();
  PROTOBUF_NODISCARD std::string* release_remote_ip();
  void set_allocated_remote_ip(std::string* remote_ip);
  private:
  const std::string& _internal_remote_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_ip(const std::string& value);
  std::string* _internal_mutable_remote_ip();
  public:

  // optional string referrer = 4;
  bool has_referrer() const;
  private:
  bool _internal_has_referrer() const;
  public:
  void clear_referrer();
  const std::string& referrer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer();
  PROTOBUF_NODISCARD std::string* release_referrer();
  void set_allocated_referrer(std::string* referrer);
  private:
  const std::string& _internal_referrer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer(const std::string& value);
  std::string* _internal_mutable_referrer();
  public:

  // required .safe_browsing.ClientDownloadRequest.ResourceType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::safe_browsing::ClientDownloadRequest_ResourceType type() const;
  void set_type(::safe_browsing::ClientDownloadRequest_ResourceType value);
  private:
  ::safe_browsing::ClientDownloadRequest_ResourceType _internal_type() const;
  void _internal_set_type(::safe_browsing::ClientDownloadRequest_ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.Resource)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_;
  int type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_CertificateChain_Element final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.CertificateChain.Element) */ {
 public:
  inline ClientDownloadRequest_CertificateChain_Element() : ClientDownloadRequest_CertificateChain_Element(nullptr) {}
  ~ClientDownloadRequest_CertificateChain_Element() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_CertificateChain_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_CertificateChain_Element(const ClientDownloadRequest_CertificateChain_Element& from);
  ClientDownloadRequest_CertificateChain_Element(ClientDownloadRequest_CertificateChain_Element&& from) noexcept
    : ClientDownloadRequest_CertificateChain_Element() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_CertificateChain_Element& operator=(const ClientDownloadRequest_CertificateChain_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_CertificateChain_Element& operator=(ClientDownloadRequest_CertificateChain_Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_CertificateChain_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_CertificateChain_Element* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_CertificateChain_Element*>(
               &_ClientDownloadRequest_CertificateChain_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ClientDownloadRequest_CertificateChain_Element& a, ClientDownloadRequest_CertificateChain_Element& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_CertificateChain_Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_CertificateChain_Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_CertificateChain_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_CertificateChain_Element>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_CertificateChain_Element& from);
  void MergeFrom(const ClientDownloadRequest_CertificateChain_Element& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_CertificateChain_Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.CertificateChain.Element";
  }
  protected:
  explicit ClientDownloadRequest_CertificateChain_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertificateFieldNumber = 1,
  };
  // optional bytes certificate = 1;
  bool has_certificate() const;
  private:
  bool _internal_has_certificate() const;
  public:
  void clear_certificate();
  const std::string& certificate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_certificate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_certificate();
  PROTOBUF_NODISCARD std::string* release_certificate();
  void set_allocated_certificate(std::string* certificate);
  private:
  const std::string& _internal_certificate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_certificate(const std::string& value);
  std::string* _internal_mutable_certificate();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certificate_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_CertificateChain final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.CertificateChain) */ {
 public:
  inline ClientDownloadRequest_CertificateChain() : ClientDownloadRequest_CertificateChain(nullptr) {}
  ~ClientDownloadRequest_CertificateChain() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_CertificateChain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_CertificateChain(const ClientDownloadRequest_CertificateChain& from);
  ClientDownloadRequest_CertificateChain(ClientDownloadRequest_CertificateChain&& from) noexcept
    : ClientDownloadRequest_CertificateChain() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_CertificateChain& operator=(const ClientDownloadRequest_CertificateChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_CertificateChain& operator=(ClientDownloadRequest_CertificateChain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_CertificateChain& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_CertificateChain* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_CertificateChain*>(
               &_ClientDownloadRequest_CertificateChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ClientDownloadRequest_CertificateChain& a, ClientDownloadRequest_CertificateChain& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_CertificateChain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_CertificateChain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_CertificateChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_CertificateChain>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_CertificateChain& from);
  void MergeFrom(const ClientDownloadRequest_CertificateChain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_CertificateChain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.CertificateChain";
  }
  protected:
  explicit ClientDownloadRequest_CertificateChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientDownloadRequest_CertificateChain_Element Element;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .safe_browsing.ClientDownloadRequest.CertificateChain.Element element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::safe_browsing::ClientDownloadRequest_CertificateChain_Element* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain_Element >*
      mutable_element();
  private:
  const ::safe_browsing::ClientDownloadRequest_CertificateChain_Element& _internal_element(int index) const;
  ::safe_browsing::ClientDownloadRequest_CertificateChain_Element* _internal_add_element();
  public:
  const ::safe_browsing::ClientDownloadRequest_CertificateChain_Element& element(int index) const;
  ::safe_browsing::ClientDownloadRequest_CertificateChain_Element* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain_Element >&
      element() const;

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.CertificateChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain_Element > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_ExtendedAttr final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.ExtendedAttr) */ {
 public:
  inline ClientDownloadRequest_ExtendedAttr() : ClientDownloadRequest_ExtendedAttr(nullptr) {}
  ~ClientDownloadRequest_ExtendedAttr() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_ExtendedAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_ExtendedAttr(const ClientDownloadRequest_ExtendedAttr& from);
  ClientDownloadRequest_ExtendedAttr(ClientDownloadRequest_ExtendedAttr&& from) noexcept
    : ClientDownloadRequest_ExtendedAttr() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_ExtendedAttr& operator=(const ClientDownloadRequest_ExtendedAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_ExtendedAttr& operator=(ClientDownloadRequest_ExtendedAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_ExtendedAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_ExtendedAttr* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_ExtendedAttr*>(
               &_ClientDownloadRequest_ExtendedAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ClientDownloadRequest_ExtendedAttr& a, ClientDownloadRequest_ExtendedAttr& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_ExtendedAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_ExtendedAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_ExtendedAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_ExtendedAttr>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_ExtendedAttr& from);
  void MergeFrom(const ClientDownloadRequest_ExtendedAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_ExtendedAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.ExtendedAttr";
  }
  protected:
  explicit ClientDownloadRequest_ExtendedAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.ExtendedAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_SignatureInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.SignatureInfo) */ {
 public:
  inline ClientDownloadRequest_SignatureInfo() : ClientDownloadRequest_SignatureInfo(nullptr) {}
  ~ClientDownloadRequest_SignatureInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_SignatureInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_SignatureInfo(const ClientDownloadRequest_SignatureInfo& from);
  ClientDownloadRequest_SignatureInfo(ClientDownloadRequest_SignatureInfo&& from) noexcept
    : ClientDownloadRequest_SignatureInfo() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_SignatureInfo& operator=(const ClientDownloadRequest_SignatureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_SignatureInfo& operator=(ClientDownloadRequest_SignatureInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_SignatureInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_SignatureInfo* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_SignatureInfo*>(
               &_ClientDownloadRequest_SignatureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ClientDownloadRequest_SignatureInfo& a, ClientDownloadRequest_SignatureInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_SignatureInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_SignatureInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_SignatureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_SignatureInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_SignatureInfo& from);
  void MergeFrom(const ClientDownloadRequest_SignatureInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_SignatureInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.SignatureInfo";
  }
  protected:
  explicit ClientDownloadRequest_SignatureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertificateChainFieldNumber = 1,
    kSignedDataFieldNumber = 3,
    kXattrFieldNumber = 4,
    kTrustedFieldNumber = 2,
  };
  // repeated .safe_browsing.ClientDownloadRequest.CertificateChain certificate_chain = 1;
  int certificate_chain_size() const;
  private:
  int _internal_certificate_chain_size() const;
  public:
  void clear_certificate_chain();
  ::safe_browsing::ClientDownloadRequest_CertificateChain* mutable_certificate_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain >*
      mutable_certificate_chain();
  private:
  const ::safe_browsing::ClientDownloadRequest_CertificateChain& _internal_certificate_chain(int index) const;
  ::safe_browsing::ClientDownloadRequest_CertificateChain* _internal_add_certificate_chain();
  public:
  const ::safe_browsing::ClientDownloadRequest_CertificateChain& certificate_chain(int index) const;
  ::safe_browsing::ClientDownloadRequest_CertificateChain* add_certificate_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain >&
      certificate_chain() const;

  // repeated bytes signed_data = 3;
  int signed_data_size() const;
  private:
  int _internal_signed_data_size() const;
  public:
  void clear_signed_data();
  const std::string& signed_data(int index) const;
  std::string* mutable_signed_data(int index);
  void set_signed_data(int index, const std::string& value);
  void set_signed_data(int index, std::string&& value);
  void set_signed_data(int index, const char* value);
  void set_signed_data(int index, const void* value, size_t size);
  std::string* add_signed_data();
  void add_signed_data(const std::string& value);
  void add_signed_data(std::string&& value);
  void add_signed_data(const char* value);
  void add_signed_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signed_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signed_data();
  private:
  const std::string& _internal_signed_data(int index) const;
  std::string* _internal_add_signed_data();
  public:

  // repeated .safe_browsing.ClientDownloadRequest.ExtendedAttr xattr = 4;
  int xattr_size() const;
  private:
  int _internal_xattr_size() const;
  public:
  void clear_xattr();
  ::safe_browsing::ClientDownloadRequest_ExtendedAttr* mutable_xattr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ExtendedAttr >*
      mutable_xattr();
  private:
  const ::safe_browsing::ClientDownloadRequest_ExtendedAttr& _internal_xattr(int index) const;
  ::safe_browsing::ClientDownloadRequest_ExtendedAttr* _internal_add_xattr();
  public:
  const ::safe_browsing::ClientDownloadRequest_ExtendedAttr& xattr(int index) const;
  ::safe_browsing::ClientDownloadRequest_ExtendedAttr* add_xattr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ExtendedAttr >&
      xattr() const;

  // optional bool trusted = 2;
  bool has_trusted() const;
  private:
  bool _internal_has_trusted() const;
  public:
  void clear_trusted();
  bool trusted() const;
  void set_trusted(bool value);
  private:
  bool _internal_trusted() const;
  void _internal_set_trusted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.SignatureInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain > certificate_chain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signed_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ExtendedAttr > xattr_;
  bool trusted_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_PEImageHeaders_DebugData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData) */ {
 public:
  inline ClientDownloadRequest_PEImageHeaders_DebugData() : ClientDownloadRequest_PEImageHeaders_DebugData(nullptr) {}
  ~ClientDownloadRequest_PEImageHeaders_DebugData() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_PEImageHeaders_DebugData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_PEImageHeaders_DebugData(const ClientDownloadRequest_PEImageHeaders_DebugData& from);
  ClientDownloadRequest_PEImageHeaders_DebugData(ClientDownloadRequest_PEImageHeaders_DebugData&& from) noexcept
    : ClientDownloadRequest_PEImageHeaders_DebugData() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_PEImageHeaders_DebugData& operator=(const ClientDownloadRequest_PEImageHeaders_DebugData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_PEImageHeaders_DebugData& operator=(ClientDownloadRequest_PEImageHeaders_DebugData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_PEImageHeaders_DebugData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_PEImageHeaders_DebugData* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_PEImageHeaders_DebugData*>(
               &_ClientDownloadRequest_PEImageHeaders_DebugData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ClientDownloadRequest_PEImageHeaders_DebugData& a, ClientDownloadRequest_PEImageHeaders_DebugData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_PEImageHeaders_DebugData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_PEImageHeaders_DebugData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_PEImageHeaders_DebugData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_PEImageHeaders_DebugData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_PEImageHeaders_DebugData& from);
  void MergeFrom(const ClientDownloadRequest_PEImageHeaders_DebugData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_PEImageHeaders_DebugData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData";
  }
  protected:
  explicit ClientDownloadRequest_PEImageHeaders_DebugData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoryEntryFieldNumber = 1,
    kRawDataFieldNumber = 2,
  };
  // optional bytes directory_entry = 1;
  bool has_directory_entry() const;
  private:
  bool _internal_has_directory_entry() const;
  public:
  void clear_directory_entry();
  const std::string& directory_entry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_directory_entry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_directory_entry();
  PROTOBUF_NODISCARD std::string* release_directory_entry();
  void set_allocated_directory_entry(std::string* directory_entry);
  private:
  const std::string& _internal_directory_entry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory_entry(const std::string& value);
  std::string* _internal_mutable_directory_entry();
  public:

  // optional bytes raw_data = 2;
  bool has_raw_data() const;
  private:
  bool _internal_has_raw_data() const;
  public:
  void clear_raw_data();
  const std::string& raw_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_data();
  PROTOBUF_NODISCARD std::string* release_raw_data();
  void set_allocated_raw_data(std::string* raw_data);
  private:
  const std::string& _internal_raw_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_data(const std::string& value);
  std::string* _internal_mutable_raw_data();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_entry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_data_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_PEImageHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.PEImageHeaders) */ {
 public:
  inline ClientDownloadRequest_PEImageHeaders() : ClientDownloadRequest_PEImageHeaders(nullptr) {}
  ~ClientDownloadRequest_PEImageHeaders() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_PEImageHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_PEImageHeaders(const ClientDownloadRequest_PEImageHeaders& from);
  ClientDownloadRequest_PEImageHeaders(ClientDownloadRequest_PEImageHeaders&& from) noexcept
    : ClientDownloadRequest_PEImageHeaders() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_PEImageHeaders& operator=(const ClientDownloadRequest_PEImageHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_PEImageHeaders& operator=(ClientDownloadRequest_PEImageHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_PEImageHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_PEImageHeaders* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_PEImageHeaders*>(
               &_ClientDownloadRequest_PEImageHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ClientDownloadRequest_PEImageHeaders& a, ClientDownloadRequest_PEImageHeaders& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_PEImageHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_PEImageHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_PEImageHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_PEImageHeaders>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_PEImageHeaders& from);
  void MergeFrom(const ClientDownloadRequest_PEImageHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_PEImageHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.PEImageHeaders";
  }
  protected:
  explicit ClientDownloadRequest_PEImageHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientDownloadRequest_PEImageHeaders_DebugData DebugData;

  // accessors -------------------------------------------------------

  enum : int {
    kSectionHeaderFieldNumber = 5,
    kDebugDataFieldNumber = 7,
    kDosHeaderFieldNumber = 1,
    kFileHeaderFieldNumber = 2,
    kOptionalHeaders32FieldNumber = 3,
    kOptionalHeaders64FieldNumber = 4,
    kExportSectionDataFieldNumber = 6,
  };
  // repeated bytes section_header = 5;
  int section_header_size() const;
  private:
  int _internal_section_header_size() const;
  public:
  void clear_section_header();
  const std::string& section_header(int index) const;
  std::string* mutable_section_header(int index);
  void set_section_header(int index, const std::string& value);
  void set_section_header(int index, std::string&& value);
  void set_section_header(int index, const char* value);
  void set_section_header(int index, const void* value, size_t size);
  std::string* add_section_header();
  void add_section_header(const std::string& value);
  void add_section_header(std::string&& value);
  void add_section_header(const char* value);
  void add_section_header(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& section_header() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_section_header();
  private:
  const std::string& _internal_section_header(int index) const;
  std::string* _internal_add_section_header();
  public:

  // repeated .safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData debug_data = 7;
  int debug_data_size() const;
  private:
  int _internal_debug_data_size() const;
  public:
  void clear_debug_data();
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData* mutable_debug_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData >*
      mutable_debug_data();
  private:
  const ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData& _internal_debug_data(int index) const;
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData* _internal_add_debug_data();
  public:
  const ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData& debug_data(int index) const;
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData* add_debug_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData >&
      debug_data() const;

  // optional bytes dos_header = 1;
  bool has_dos_header() const;
  private:
  bool _internal_has_dos_header() const;
  public:
  void clear_dos_header();
  const std::string& dos_header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dos_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dos_header();
  PROTOBUF_NODISCARD std::string* release_dos_header();
  void set_allocated_dos_header(std::string* dos_header);
  private:
  const std::string& _internal_dos_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dos_header(const std::string& value);
  std::string* _internal_mutable_dos_header();
  public:

  // optional bytes file_header = 2;
  bool has_file_header() const;
  private:
  bool _internal_has_file_header() const;
  public:
  void clear_file_header();
  const std::string& file_header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_header();
  PROTOBUF_NODISCARD std::string* release_file_header();
  void set_allocated_file_header(std::string* file_header);
  private:
  const std::string& _internal_file_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_header(const std::string& value);
  std::string* _internal_mutable_file_header();
  public:

  // optional bytes optional_headers32 = 3;
  bool has_optional_headers32() const;
  private:
  bool _internal_has_optional_headers32() const;
  public:
  void clear_optional_headers32();
  const std::string& optional_headers32() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_headers32(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_headers32();
  PROTOBUF_NODISCARD std::string* release_optional_headers32();
  void set_allocated_optional_headers32(std::string* optional_headers32);
  private:
  const std::string& _internal_optional_headers32() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_headers32(const std::string& value);
  std::string* _internal_mutable_optional_headers32();
  public:

  // optional bytes optional_headers64 = 4;
  bool has_optional_headers64() const;
  private:
  bool _internal_has_optional_headers64() const;
  public:
  void clear_optional_headers64();
  const std::string& optional_headers64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_headers64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_headers64();
  PROTOBUF_NODISCARD std::string* release_optional_headers64();
  void set_allocated_optional_headers64(std::string* optional_headers64);
  private:
  const std::string& _internal_optional_headers64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_headers64(const std::string& value);
  std::string* _internal_mutable_optional_headers64();
  public:

  // optional bytes export_section_data = 6;
  bool has_export_section_data() const;
  private:
  bool _internal_has_export_section_data() const;
  public:
  void clear_export_section_data();
  const std::string& export_section_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_export_section_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_export_section_data();
  PROTOBUF_NODISCARD std::string* release_export_section_data();
  void set_allocated_export_section_data(std::string* export_section_data);
  private:
  const std::string& _internal_export_section_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_export_section_data(const std::string& value);
  std::string* _internal_mutable_export_section_data();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.PEImageHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> section_header_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData > debug_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dos_header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_headers32_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_headers64_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr export_section_data_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_MachOHeaders_LoadCommand final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand) */ {
 public:
  inline ClientDownloadRequest_MachOHeaders_LoadCommand() : ClientDownloadRequest_MachOHeaders_LoadCommand(nullptr) {}
  ~ClientDownloadRequest_MachOHeaders_LoadCommand() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_MachOHeaders_LoadCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_MachOHeaders_LoadCommand(const ClientDownloadRequest_MachOHeaders_LoadCommand& from);
  ClientDownloadRequest_MachOHeaders_LoadCommand(ClientDownloadRequest_MachOHeaders_LoadCommand&& from) noexcept
    : ClientDownloadRequest_MachOHeaders_LoadCommand() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_MachOHeaders_LoadCommand& operator=(const ClientDownloadRequest_MachOHeaders_LoadCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_MachOHeaders_LoadCommand& operator=(ClientDownloadRequest_MachOHeaders_LoadCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_MachOHeaders_LoadCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_MachOHeaders_LoadCommand* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_MachOHeaders_LoadCommand*>(
               &_ClientDownloadRequest_MachOHeaders_LoadCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ClientDownloadRequest_MachOHeaders_LoadCommand& a, ClientDownloadRequest_MachOHeaders_LoadCommand& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_MachOHeaders_LoadCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_MachOHeaders_LoadCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_MachOHeaders_LoadCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_MachOHeaders_LoadCommand>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_MachOHeaders_LoadCommand& from);
  void MergeFrom(const ClientDownloadRequest_MachOHeaders_LoadCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_MachOHeaders_LoadCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand";
  }
  protected:
  explicit ClientDownloadRequest_MachOHeaders_LoadCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 2,
    kCommandIdFieldNumber = 1,
  };
  // required bytes command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // required uint32 command_id = 1;
  bool has_command_id() const;
  private:
  bool _internal_has_command_id() const;
  public:
  void clear_command_id();
  uint32_t command_id() const;
  void set_command_id(uint32_t value);
  private:
  uint32_t _internal_command_id() const;
  void _internal_set_command_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  uint32_t command_id_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_MachOHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.MachOHeaders) */ {
 public:
  inline ClientDownloadRequest_MachOHeaders() : ClientDownloadRequest_MachOHeaders(nullptr) {}
  ~ClientDownloadRequest_MachOHeaders() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_MachOHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_MachOHeaders(const ClientDownloadRequest_MachOHeaders& from);
  ClientDownloadRequest_MachOHeaders(ClientDownloadRequest_MachOHeaders&& from) noexcept
    : ClientDownloadRequest_MachOHeaders() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_MachOHeaders& operator=(const ClientDownloadRequest_MachOHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_MachOHeaders& operator=(ClientDownloadRequest_MachOHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_MachOHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_MachOHeaders* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_MachOHeaders*>(
               &_ClientDownloadRequest_MachOHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ClientDownloadRequest_MachOHeaders& a, ClientDownloadRequest_MachOHeaders& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_MachOHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_MachOHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_MachOHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_MachOHeaders>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_MachOHeaders& from);
  void MergeFrom(const ClientDownloadRequest_MachOHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_MachOHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.MachOHeaders";
  }
  protected:
  explicit ClientDownloadRequest_MachOHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientDownloadRequest_MachOHeaders_LoadCommand LoadCommand;

  // accessors -------------------------------------------------------

  enum : int {
    kLoadCommandsFieldNumber = 2,
    kMachHeaderFieldNumber = 1,
  };
  // repeated .safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand load_commands = 2;
  int load_commands_size() const;
  private:
  int _internal_load_commands_size() const;
  public:
  void clear_load_commands();
  ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand* mutable_load_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand >*
      mutable_load_commands();
  private:
  const ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand& _internal_load_commands(int index) const;
  ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand* _internal_add_load_commands();
  public:
  const ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand& load_commands(int index) const;
  ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand* add_load_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand >&
      load_commands() const;

  // required bytes mach_header = 1;
  bool has_mach_header() const;
  private:
  bool _internal_has_mach_header() const;
  public:
  void clear_mach_header();
  const std::string& mach_header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mach_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mach_header();
  PROTOBUF_NODISCARD std::string* release_mach_header();
  void set_allocated_mach_header(std::string* mach_header);
  private:
  const std::string& _internal_mach_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mach_header(const std::string& value);
  std::string* _internal_mutable_mach_header();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.MachOHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand > load_commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mach_header_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_ImageHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.ImageHeaders) */ {
 public:
  inline ClientDownloadRequest_ImageHeaders() : ClientDownloadRequest_ImageHeaders(nullptr) {}
  ~ClientDownloadRequest_ImageHeaders() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_ImageHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_ImageHeaders(const ClientDownloadRequest_ImageHeaders& from);
  ClientDownloadRequest_ImageHeaders(ClientDownloadRequest_ImageHeaders&& from) noexcept
    : ClientDownloadRequest_ImageHeaders() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_ImageHeaders& operator=(const ClientDownloadRequest_ImageHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_ImageHeaders& operator=(ClientDownloadRequest_ImageHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_ImageHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_ImageHeaders* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_ImageHeaders*>(
               &_ClientDownloadRequest_ImageHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ClientDownloadRequest_ImageHeaders& a, ClientDownloadRequest_ImageHeaders& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_ImageHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_ImageHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_ImageHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_ImageHeaders>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_ImageHeaders& from);
  void MergeFrom(const ClientDownloadRequest_ImageHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_ImageHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.ImageHeaders";
  }
  protected:
  explicit ClientDownloadRequest_ImageHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachOHeadersFieldNumber = 2,
    kPeHeadersFieldNumber = 1,
  };
  // repeated .safe_browsing.ClientDownloadRequest.MachOHeaders mach_o_headers = 2;
  int mach_o_headers_size() const;
  private:
  int _internal_mach_o_headers_size() const;
  public:
  void clear_mach_o_headers();
  ::safe_browsing::ClientDownloadRequest_MachOHeaders* mutable_mach_o_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders >*
      mutable_mach_o_headers();
  private:
  const ::safe_browsing::ClientDownloadRequest_MachOHeaders& _internal_mach_o_headers(int index) const;
  ::safe_browsing::ClientDownloadRequest_MachOHeaders* _internal_add_mach_o_headers();
  public:
  const ::safe_browsing::ClientDownloadRequest_MachOHeaders& mach_o_headers(int index) const;
  ::safe_browsing::ClientDownloadRequest_MachOHeaders* add_mach_o_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders >&
      mach_o_headers() const;

  // optional .safe_browsing.ClientDownloadRequest.PEImageHeaders pe_headers = 1;
  bool has_pe_headers() const;
  private:
  bool _internal_has_pe_headers() const;
  public:
  void clear_pe_headers();
  const ::safe_browsing::ClientDownloadRequest_PEImageHeaders& pe_headers() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_PEImageHeaders* release_pe_headers();
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders* mutable_pe_headers();
  void set_allocated_pe_headers(::safe_browsing::ClientDownloadRequest_PEImageHeaders* pe_headers);
  private:
  const ::safe_browsing::ClientDownloadRequest_PEImageHeaders& _internal_pe_headers() const;
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders* _internal_mutable_pe_headers();
  public:
  void unsafe_arena_set_allocated_pe_headers(
      ::safe_browsing::ClientDownloadRequest_PEImageHeaders* pe_headers);
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders* unsafe_arena_release_pe_headers();

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.ImageHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders > mach_o_headers_;
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders* pe_headers_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_ArchivedBinary final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.ArchivedBinary) */ {
 public:
  inline ClientDownloadRequest_ArchivedBinary() : ClientDownloadRequest_ArchivedBinary(nullptr) {}
  ~ClientDownloadRequest_ArchivedBinary() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_ArchivedBinary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_ArchivedBinary(const ClientDownloadRequest_ArchivedBinary& from);
  ClientDownloadRequest_ArchivedBinary(ClientDownloadRequest_ArchivedBinary&& from) noexcept
    : ClientDownloadRequest_ArchivedBinary() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_ArchivedBinary& operator=(const ClientDownloadRequest_ArchivedBinary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_ArchivedBinary& operator=(ClientDownloadRequest_ArchivedBinary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_ArchivedBinary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_ArchivedBinary* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_ArchivedBinary*>(
               &_ClientDownloadRequest_ArchivedBinary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ClientDownloadRequest_ArchivedBinary& a, ClientDownloadRequest_ArchivedBinary& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_ArchivedBinary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_ArchivedBinary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_ArchivedBinary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_ArchivedBinary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_ArchivedBinary& from);
  void MergeFrom(const ClientDownloadRequest_ArchivedBinary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_ArchivedBinary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.ArchivedBinary";
  }
  protected:
  explicit ClientDownloadRequest_ArchivedBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileBasenameFieldNumber = 1,
    kDigestsFieldNumber = 3,
    kSignatureFieldNumber = 5,
    kImageHeadersFieldNumber = 6,
    kLengthFieldNumber = 4,
    kDownloadTypeFieldNumber = 2,
    kIsEncryptedFieldNumber = 7,
    kIsExecutableFieldNumber = 8,
    kIsArchiveFieldNumber = 9,
  };
  // optional string file_basename = 1;
  bool has_file_basename() const;
  private:
  bool _internal_has_file_basename() const;
  public:
  void clear_file_basename();
  const std::string& file_basename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_basename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_basename();
  PROTOBUF_NODISCARD std::string* release_file_basename();
  void set_allocated_file_basename(std::string* file_basename);
  private:
  const std::string& _internal_file_basename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_basename(const std::string& value);
  std::string* _internal_mutable_file_basename();
  public:

  // optional .safe_browsing.ClientDownloadRequest.Digests digests = 3;
  bool has_digests() const;
  private:
  bool _internal_has_digests() const;
  public:
  void clear_digests();
  const ::safe_browsing::ClientDownloadRequest_Digests& digests() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_Digests* release_digests();
  ::safe_browsing::ClientDownloadRequest_Digests* mutable_digests();
  void set_allocated_digests(::safe_browsing::ClientDownloadRequest_Digests* digests);
  private:
  const ::safe_browsing::ClientDownloadRequest_Digests& _internal_digests() const;
  ::safe_browsing::ClientDownloadRequest_Digests* _internal_mutable_digests();
  public:
  void unsafe_arena_set_allocated_digests(
      ::safe_browsing::ClientDownloadRequest_Digests* digests);
  ::safe_browsing::ClientDownloadRequest_Digests* unsafe_arena_release_digests();

  // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo& signature() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_SignatureInfo* release_signature();
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* mutable_signature();
  void set_allocated_signature(::safe_browsing::ClientDownloadRequest_SignatureInfo* signature);
  private:
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo& _internal_signature() const;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature);
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* unsafe_arena_release_signature();

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 6;
  bool has_image_headers() const;
  private:
  bool _internal_has_image_headers() const;
  public:
  void clear_image_headers();
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_ImageHeaders* release_image_headers();
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* mutable_image_headers();
  void set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  private:
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& _internal_image_headers() const;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _internal_mutable_image_headers();
  public:
  void unsafe_arena_set_allocated_image_headers(
      ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* unsafe_arena_release_image_headers();

  // optional int64 length = 4;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  int64_t length() const;
  void set_length(int64_t value);
  private:
  int64_t _internal_length() const;
  void _internal_set_length(int64_t value);
  public:

  // optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 2;
  bool has_download_type() const;
  private:
  bool _internal_has_download_type() const;
  public:
  void clear_download_type();
  ::safe_browsing::ClientDownloadRequest_DownloadType download_type() const;
  void set_download_type(::safe_browsing::ClientDownloadRequest_DownloadType value);
  private:
  ::safe_browsing::ClientDownloadRequest_DownloadType _internal_download_type() const;
  void _internal_set_download_type(::safe_browsing::ClientDownloadRequest_DownloadType value);
  public:

  // optional bool is_encrypted = 7;
  bool has_is_encrypted() const;
  private:
  bool _internal_has_is_encrypted() const;
  public:
  void clear_is_encrypted();
  bool is_encrypted() const;
  void set_is_encrypted(bool value);
  private:
  bool _internal_is_encrypted() const;
  void _internal_set_is_encrypted(bool value);
  public:

  // optional bool is_executable = 8;
  bool has_is_executable() const;
  private:
  bool _internal_has_is_executable() const;
  public:
  void clear_is_executable();
  bool is_executable() const;
  void set_is_executable(bool value);
  private:
  bool _internal_is_executable() const;
  void _internal_set_is_executable(bool value);
  public:

  // optional bool is_archive = 9;
  bool has_is_archive() const;
  private:
  bool _internal_has_is_archive() const;
  public:
  void clear_is_archive();
  bool is_archive() const;
  void set_is_archive(bool value);
  private:
  bool _internal_is_archive() const;
  void _internal_set_is_archive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.ArchivedBinary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_basename_;
  ::safe_browsing::ClientDownloadRequest_Digests* digests_;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature_;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers_;
  int64_t length_;
  int download_type_;
  bool is_encrypted_;
  bool is_executable_;
  bool is_archive_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_DetachedCodeSignature final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.DetachedCodeSignature) */ {
 public:
  inline ClientDownloadRequest_DetachedCodeSignature() : ClientDownloadRequest_DetachedCodeSignature(nullptr) {}
  ~ClientDownloadRequest_DetachedCodeSignature() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_DetachedCodeSignature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_DetachedCodeSignature(const ClientDownloadRequest_DetachedCodeSignature& from);
  ClientDownloadRequest_DetachedCodeSignature(ClientDownloadRequest_DetachedCodeSignature&& from) noexcept
    : ClientDownloadRequest_DetachedCodeSignature() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_DetachedCodeSignature& operator=(const ClientDownloadRequest_DetachedCodeSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_DetachedCodeSignature& operator=(ClientDownloadRequest_DetachedCodeSignature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_DetachedCodeSignature& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_DetachedCodeSignature* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_DetachedCodeSignature*>(
               &_ClientDownloadRequest_DetachedCodeSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ClientDownloadRequest_DetachedCodeSignature& a, ClientDownloadRequest_DetachedCodeSignature& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_DetachedCodeSignature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_DetachedCodeSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_DetachedCodeSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_DetachedCodeSignature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_DetachedCodeSignature& from);
  void MergeFrom(const ClientDownloadRequest_DetachedCodeSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_DetachedCodeSignature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.DetachedCodeSignature";
  }
  protected:
  explicit ClientDownloadRequest_DetachedCodeSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kContentsFieldNumber = 2,
  };
  // required string file_name = 1;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // required bytes contents = 2;
  bool has_contents() const;
  private:
  bool _internal_has_contents() const;
  public:
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_DocumentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.DocumentInfo) */ {
 public:
  inline ClientDownloadRequest_DocumentInfo() : ClientDownloadRequest_DocumentInfo(nullptr) {}
  ~ClientDownloadRequest_DocumentInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_DocumentInfo(const ClientDownloadRequest_DocumentInfo& from);
  ClientDownloadRequest_DocumentInfo(ClientDownloadRequest_DocumentInfo&& from) noexcept
    : ClientDownloadRequest_DocumentInfo() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_DocumentInfo& operator=(const ClientDownloadRequest_DocumentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_DocumentInfo& operator=(ClientDownloadRequest_DocumentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_DocumentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_DocumentInfo* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_DocumentInfo*>(
               &_ClientDownloadRequest_DocumentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ClientDownloadRequest_DocumentInfo& a, ClientDownloadRequest_DocumentInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_DocumentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_DocumentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_DocumentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_DocumentInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_DocumentInfo& from);
  void MergeFrom(const ClientDownloadRequest_DocumentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_DocumentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.DocumentInfo";
  }
  protected:
  explicit ClientDownloadRequest_DocumentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainsMacrosFieldNumber = 1,
  };
  // optional bool contains_macros = 1;
  bool has_contains_macros() const;
  private:
  bool _internal_has_contains_macros() const;
  public:
  void clear_contains_macros();
  bool contains_macros() const;
  void set_contains_macros(bool value);
  private:
  bool _internal_contains_macros() const;
  void _internal_set_contains_macros(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.DocumentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool contains_macros_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_DocumentProcessingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo) */ {
 public:
  inline ClientDownloadRequest_DocumentProcessingInfo() : ClientDownloadRequest_DocumentProcessingInfo(nullptr) {}
  ~ClientDownloadRequest_DocumentProcessingInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentProcessingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_DocumentProcessingInfo(const ClientDownloadRequest_DocumentProcessingInfo& from);
  ClientDownloadRequest_DocumentProcessingInfo(ClientDownloadRequest_DocumentProcessingInfo&& from) noexcept
    : ClientDownloadRequest_DocumentProcessingInfo() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_DocumentProcessingInfo& operator=(const ClientDownloadRequest_DocumentProcessingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_DocumentProcessingInfo& operator=(ClientDownloadRequest_DocumentProcessingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_DocumentProcessingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_DocumentProcessingInfo* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_DocumentProcessingInfo*>(
               &_ClientDownloadRequest_DocumentProcessingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ClientDownloadRequest_DocumentProcessingInfo& a, ClientDownloadRequest_DocumentProcessingInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_DocumentProcessingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_DocumentProcessingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_DocumentProcessingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_DocumentProcessingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_DocumentProcessingInfo& from);
  void MergeFrom(const ClientDownloadRequest_DocumentProcessingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_DocumentProcessingInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.DocumentProcessingInfo";
  }
  protected:
  explicit ClientDownloadRequest_DocumentProcessingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType MaldocaErrorType;
  static constexpr MaldocaErrorType OK =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OK;
  static constexpr MaldocaErrorType CANCELLED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_CANCELLED;
  static constexpr MaldocaErrorType UNKNOWN =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNKNOWN;
  static constexpr MaldocaErrorType INVALID_ARGUMENT =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_ARGUMENT;
  static constexpr MaldocaErrorType DEADLINE_EXCEEDED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_DEADLINE_EXCEEDED;
  static constexpr MaldocaErrorType NOT_FOUND =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_NOT_FOUND;
  static constexpr MaldocaErrorType ALREADY_EXISTS =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_ALREADY_EXISTS;
  static constexpr MaldocaErrorType PERMISSION_DENIED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_PERMISSION_DENIED;
  static constexpr MaldocaErrorType RESOURCE_EXHAUSTED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_RESOURCE_EXHAUSTED;
  static constexpr MaldocaErrorType FAILED_PRECONDITION =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_FAILED_PRECONDITION;
  static constexpr MaldocaErrorType ABORTED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_ABORTED;
  static constexpr MaldocaErrorType OUT_OF_RANGE =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OUT_OF_RANGE;
  static constexpr MaldocaErrorType UNIMPLEMENTED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNIMPLEMENTED;
  static constexpr MaldocaErrorType INTERNAL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INTERNAL;
  static constexpr MaldocaErrorType UNAVAILABLE =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNAVAILABLE;
  static constexpr MaldocaErrorType DATA_LOSS =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_DATA_LOSS;
  static constexpr MaldocaErrorType UNAUTHENTICATED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNAUTHENTICATED;
  static constexpr MaldocaErrorType DOC_TYPE_INFERENCE_FAILED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_DOC_TYPE_INFERENCE_FAILED;
  static constexpr MaldocaErrorType UNSUPPORTED_DOC_TYPE =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_UNSUPPORTED_DOC_TYPE;
  static constexpr MaldocaErrorType SANDBOX_ERROR =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_SANDBOX_ERROR;
  static constexpr MaldocaErrorType ARCHIVE_CORRUPTED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_ARCHIVE_CORRUPTED;
  static constexpr MaldocaErrorType OLE_DIR_PARSING_FAILED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_DIR_PARSING_FAILED;
  static constexpr MaldocaErrorType OLE_FAT_HEADER_PARSING_FAILED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_FAT_HEADER_PARSING_FAILED;
  static constexpr MaldocaErrorType PREFIXED_ANSI_STRING_HEADER_TOO_SHORT =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_PREFIXED_ANSI_STRING_HEADER_TOO_SHORT;
  static constexpr MaldocaErrorType PREFIXED_ANSI_STRING_CONTENT_TOO_SHORT =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_PREFIXED_ANSI_STRING_CONTENT_TOO_SHORT;
  static constexpr MaldocaErrorType CLIPBOARD_FORMAT_OR_ANSI_STRING_TOO_SHORT =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_CLIPBOARD_FORMAT_OR_ANSI_STRING_TOO_SHORT;
  static constexpr MaldocaErrorType BOF_HEADER_TOO_SHORT =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_BOF_HEADER_TOO_SHORT;
  static constexpr MaldocaErrorType NOT_BIFF_FORMAT =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_NOT_BIFF_FORMAT;
  static constexpr MaldocaErrorType FAIL_PARSE_BIFF_VERSION =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_FAIL_PARSE_BIFF_VERSION;
  static constexpr MaldocaErrorType INVALID_DDE_OLE_LINK =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_DDE_OLE_LINK;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_PARSE_SIZE_FAIL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_SIZE_FAIL;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_SIZE_MISMATCH =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_SIZE_MISMATCH;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_PARSE_TYPE_FAIL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_TYPE_FAIL;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_PARSE_FILENAME_FAIL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_FILENAME_FAIL;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_PARSE_FILEPATH_FAIL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_FILEPATH_FAIL;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_PARSE_RESERVED_FAIL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_RESERVED_FAIL;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_PARSE_TEMPPATH_FAIL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_TEMPPATH_FAIL;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_PARSE_FILESIZE_FAIL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_FILESIZE_FAIL;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_FILESIZE_MISMATCH =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_FILESIZE_MISMATCH;
  static constexpr MaldocaErrorType OLE_NATIVE_EMBEDDED_PARSE_CONTENT_FAIL =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_OLE_NATIVE_EMBEDDED_PARSE_CONTENT_FAIL;
  static constexpr MaldocaErrorType INVALID_OLE2_HEADER =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_OLE2_HEADER;
  static constexpr MaldocaErrorType INVALID_FAT_HEADER =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_FAT_HEADER;
  static constexpr MaldocaErrorType EMPTY_FAT_HEADER =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_EMPTY_FAT_HEADER;
  static constexpr MaldocaErrorType INVALID_ROOT_DIR =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_ROOT_DIR;
  static constexpr MaldocaErrorType MISSING_FILE_IN_ARCHIVE =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MISSING_FILE_IN_ARCHIVE;
  static constexpr MaldocaErrorType INVALID_XML_DOC =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_INVALID_XML_DOC;
  static constexpr MaldocaErrorType MISSING_PROPERTIES =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MISSING_PROPERTIES;
  static constexpr MaldocaErrorType NOT_IMPLEMENTED_FOR_CHROME =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_NOT_IMPLEMENTED_FOR_CHROME;
  static constexpr MaldocaErrorType NOT_IMPLEMENTED =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_NOT_IMPLEMENTED;
  static constexpr MaldocaErrorType MISSING_ENCODING =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MISSING_ENCODING;
  static inline bool MaldocaErrorType_IsValid(int value) {
    return ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_IsValid(value);
  }
  static constexpr MaldocaErrorType MaldocaErrorType_MIN =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MaldocaErrorType_MIN;
  static constexpr MaldocaErrorType MaldocaErrorType_MAX =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MaldocaErrorType_MAX;
  static constexpr int MaldocaErrorType_ARRAYSIZE =
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_MaldocaErrorType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MaldocaErrorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MaldocaErrorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MaldocaErrorType_Name.");
    return ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Name(enum_t_value);
  }
  static inline bool MaldocaErrorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MaldocaErrorType* value) {
    return ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMaldocaErrorMessageFieldNumber = 3,
    kProcessingSuccessfulFieldNumber = 1,
    kMaldocaErrorTypeFieldNumber = 2,
  };
  // optional string maldoca_error_message = 3;
  bool has_maldoca_error_message() const;
  private:
  bool _internal_has_maldoca_error_message() const;
  public:
  void clear_maldoca_error_message();
  const std::string& maldoca_error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maldoca_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maldoca_error_message();
  PROTOBUF_NODISCARD std::string* release_maldoca_error_message();
  void set_allocated_maldoca_error_message(std::string* maldoca_error_message);
  private:
  const std::string& _internal_maldoca_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maldoca_error_message(const std::string& value);
  std::string* _internal_mutable_maldoca_error_message();
  public:

  // optional bool processing_successful = 1;
  bool has_processing_successful() const;
  private:
  bool _internal_has_processing_successful() const;
  public:
  void clear_processing_successful();
  bool processing_successful() const;
  void set_processing_successful(bool value);
  private:
  bool _internal_processing_successful() const;
  void _internal_set_processing_successful(bool value);
  public:

  // optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.MaldocaErrorType maldoca_error_type = 2;
  bool has_maldoca_error_type() const;
  private:
  bool _internal_has_maldoca_error_type() const;
  public:
  void clear_maldoca_error_type();
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType maldoca_error_type() const;
  void set_maldoca_error_type(::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType value);
  private:
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType _internal_maldoca_error_type() const;
  void _internal_set_maldoca_error_type(::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maldoca_error_message_;
  bool processing_successful_;
  int maldoca_error_type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_DocumentSummary final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.DocumentSummary) */ {
 public:
  inline ClientDownloadRequest_DocumentSummary() : ClientDownloadRequest_DocumentSummary(nullptr) {}
  ~ClientDownloadRequest_DocumentSummary() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_DocumentSummary(const ClientDownloadRequest_DocumentSummary& from);
  ClientDownloadRequest_DocumentSummary(ClientDownloadRequest_DocumentSummary&& from) noexcept
    : ClientDownloadRequest_DocumentSummary() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_DocumentSummary& operator=(const ClientDownloadRequest_DocumentSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_DocumentSummary& operator=(ClientDownloadRequest_DocumentSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_DocumentSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_DocumentSummary* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_DocumentSummary*>(
               &_ClientDownloadRequest_DocumentSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ClientDownloadRequest_DocumentSummary& a, ClientDownloadRequest_DocumentSummary& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_DocumentSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_DocumentSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_DocumentSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_DocumentSummary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_DocumentSummary& from);
  void MergeFrom(const ClientDownloadRequest_DocumentSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_DocumentSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.DocumentSummary";
  }
  protected:
  explicit ClientDownloadRequest_DocumentSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kProcessingInfoFieldNumber = 2,
  };
  // optional .safe_browsing.ClientDownloadRequest.DocumentInfo metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::safe_browsing::ClientDownloadRequest_DocumentInfo& metadata() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_DocumentInfo* release_metadata();
  ::safe_browsing::ClientDownloadRequest_DocumentInfo* mutable_metadata();
  void set_allocated_metadata(::safe_browsing::ClientDownloadRequest_DocumentInfo* metadata);
  private:
  const ::safe_browsing::ClientDownloadRequest_DocumentInfo& _internal_metadata() const;
  ::safe_browsing::ClientDownloadRequest_DocumentInfo* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::safe_browsing::ClientDownloadRequest_DocumentInfo* metadata);
  ::safe_browsing::ClientDownloadRequest_DocumentInfo* unsafe_arena_release_metadata();

  // optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo processing_info = 2;
  bool has_processing_info() const;
  private:
  bool _internal_has_processing_info() const;
  public:
  void clear_processing_info();
  const ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo& processing_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* release_processing_info();
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* mutable_processing_info();
  void set_allocated_processing_info(::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* processing_info);
  private:
  const ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo& _internal_processing_info() const;
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* _internal_mutable_processing_info();
  public:
  void unsafe_arena_set_allocated_processing_info(
      ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* processing_info);
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* unsafe_arena_release_processing_info();

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.DocumentSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safe_browsing::ClientDownloadRequest_DocumentInfo* metadata_;
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* processing_info_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest_ArchiveSummary final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest.ArchiveSummary) */ {
 public:
  inline ClientDownloadRequest_ArchiveSummary() : ClientDownloadRequest_ArchiveSummary(nullptr) {}
  ~ClientDownloadRequest_ArchiveSummary() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest_ArchiveSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest_ArchiveSummary(const ClientDownloadRequest_ArchiveSummary& from);
  ClientDownloadRequest_ArchiveSummary(ClientDownloadRequest_ArchiveSummary&& from) noexcept
    : ClientDownloadRequest_ArchiveSummary() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest_ArchiveSummary& operator=(const ClientDownloadRequest_ArchiveSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest_ArchiveSummary& operator=(ClientDownloadRequest_ArchiveSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest_ArchiveSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest_ArchiveSummary* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest_ArchiveSummary*>(
               &_ClientDownloadRequest_ArchiveSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ClientDownloadRequest_ArchiveSummary& a, ClientDownloadRequest_ArchiveSummary& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest_ArchiveSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest_ArchiveSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest_ArchiveSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest_ArchiveSummary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest_ArchiveSummary& from);
  void MergeFrom(const ClientDownloadRequest_ArchiveSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest_ArchiveSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest.ArchiveSummary";
  }
  protected:
  explicit ClientDownloadRequest_ArchiveSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientDownloadRequest_ArchiveSummary_Status Status;
  static constexpr Status UNKNOWN =
    ClientDownloadRequest_ArchiveSummary_Status_UNKNOWN;
  static constexpr Status VALID =
    ClientDownloadRequest_ArchiveSummary_Status_VALID;
  static constexpr Status PARSER_TIMED_OUT =
    ClientDownloadRequest_ArchiveSummary_Status_PARSER_TIMED_OUT;
  static constexpr Status TOO_LARGE =
    ClientDownloadRequest_ArchiveSummary_Status_TOO_LARGE;
  static inline bool Status_IsValid(int value) {
    return ClientDownloadRequest_ArchiveSummary_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ClientDownloadRequest_ArchiveSummary_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ClientDownloadRequest_ArchiveSummary_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ClientDownloadRequest_ArchiveSummary_Status_Status_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ClientDownloadRequest_ArchiveSummary_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ClientDownloadRequest_ArchiveSummary_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParserStatusFieldNumber = 1,
    kFileCountFieldNumber = 2,
    kDirectoryCountFieldNumber = 3,
  };
  // optional .safe_browsing.ClientDownloadRequest.ArchiveSummary.Status parser_status = 1;
  bool has_parser_status() const;
  private:
  bool _internal_has_parser_status() const;
  public:
  void clear_parser_status();
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status parser_status() const;
  void set_parser_status(::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status value);
  private:
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status _internal_parser_status() const;
  void _internal_set_parser_status(::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status value);
  public:

  // optional int32 file_count = 2;
  bool has_file_count() const;
  private:
  bool _internal_has_file_count() const;
  public:
  void clear_file_count();
  int32_t file_count() const;
  void set_file_count(int32_t value);
  private:
  int32_t _internal_file_count() const;
  void _internal_set_file_count(int32_t value);
  public:

  // optional int32 directory_count = 3;
  bool has_directory_count() const;
  private:
  bool _internal_has_directory_count() const;
  public:
  void clear_directory_count();
  int32_t directory_count() const;
  void set_directory_count(int32_t value);
  private:
  int32_t _internal_directory_count() const;
  void _internal_set_directory_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest.ArchiveSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int parser_status_;
  int32_t file_count_;
  int32_t directory_count_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadRequest) */ {
 public:
  inline ClientDownloadRequest() : ClientDownloadRequest(nullptr) {}
  ~ClientDownloadRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadRequest(const ClientDownloadRequest& from);
  ClientDownloadRequest(ClientDownloadRequest&& from) noexcept
    : ClientDownloadRequest() {
    *this = ::std::move(from);
  }

  inline ClientDownloadRequest& operator=(const ClientDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadRequest& operator=(ClientDownloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadRequest*>(
               &_ClientDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ClientDownloadRequest& a, ClientDownloadRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadRequest& from);
  void MergeFrom(const ClientDownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadRequest";
  }
  protected:
  explicit ClientDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientDownloadRequest_Digests Digests;
  typedef ClientDownloadRequest_Resource Resource;
  typedef ClientDownloadRequest_CertificateChain CertificateChain;
  typedef ClientDownloadRequest_ExtendedAttr ExtendedAttr;
  typedef ClientDownloadRequest_SignatureInfo SignatureInfo;
  typedef ClientDownloadRequest_PEImageHeaders PEImageHeaders;
  typedef ClientDownloadRequest_MachOHeaders MachOHeaders;
  typedef ClientDownloadRequest_ImageHeaders ImageHeaders;
  typedef ClientDownloadRequest_ArchivedBinary ArchivedBinary;
  typedef ClientDownloadRequest_DetachedCodeSignature DetachedCodeSignature;
  typedef ClientDownloadRequest_DocumentInfo DocumentInfo;
  typedef ClientDownloadRequest_DocumentProcessingInfo DocumentProcessingInfo;
  typedef ClientDownloadRequest_DocumentSummary DocumentSummary;
  typedef ClientDownloadRequest_ArchiveSummary ArchiveSummary;

  typedef ClientDownloadRequest_ResourceType ResourceType;
  static constexpr ResourceType DOWNLOAD_URL =
    ClientDownloadRequest_ResourceType_DOWNLOAD_URL;
  static constexpr ResourceType DOWNLOAD_REDIRECT =
    ClientDownloadRequest_ResourceType_DOWNLOAD_REDIRECT;
  static constexpr ResourceType TAB_URL =
    ClientDownloadRequest_ResourceType_TAB_URL;
  static constexpr ResourceType TAB_REDIRECT =
    ClientDownloadRequest_ResourceType_TAB_REDIRECT;
  static constexpr ResourceType PPAPI_DOCUMENT =
    ClientDownloadRequest_ResourceType_PPAPI_DOCUMENT;
  static constexpr ResourceType PPAPI_PLUGIN =
    ClientDownloadRequest_ResourceType_PPAPI_PLUGIN;
  static inline bool ResourceType_IsValid(int value) {
    return ClientDownloadRequest_ResourceType_IsValid(value);
  }
  static constexpr ResourceType ResourceType_MIN =
    ClientDownloadRequest_ResourceType_ResourceType_MIN;
  static constexpr ResourceType ResourceType_MAX =
    ClientDownloadRequest_ResourceType_ResourceType_MAX;
  static constexpr int ResourceType_ARRAYSIZE =
    ClientDownloadRequest_ResourceType_ResourceType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ResourceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResourceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResourceType_Name.");
    return ClientDownloadRequest_ResourceType_Name(enum_t_value);
  }
  static inline bool ResourceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResourceType* value) {
    return ClientDownloadRequest_ResourceType_Parse(name, value);
  }

  typedef ClientDownloadRequest_DownloadType DownloadType;
  static constexpr DownloadType WIN_EXECUTABLE =
    ClientDownloadRequest_DownloadType_WIN_EXECUTABLE;
  static constexpr DownloadType CHROME_EXTENSION =
    ClientDownloadRequest_DownloadType_CHROME_EXTENSION;
  static constexpr DownloadType ANDROID_APK =
    ClientDownloadRequest_DownloadType_ANDROID_APK;
  static constexpr DownloadType ZIPPED_EXECUTABLE =
    ClientDownloadRequest_DownloadType_ZIPPED_EXECUTABLE;
  static constexpr DownloadType MAC_EXECUTABLE =
    ClientDownloadRequest_DownloadType_MAC_EXECUTABLE;
  static constexpr DownloadType ZIPPED_ARCHIVE =
    ClientDownloadRequest_DownloadType_ZIPPED_ARCHIVE;
  static constexpr DownloadType ARCHIVE =
    ClientDownloadRequest_DownloadType_ARCHIVE;
  static constexpr DownloadType INVALID_ZIP =
    ClientDownloadRequest_DownloadType_INVALID_ZIP;
  static constexpr DownloadType MAC_ARCHIVE_FAILED_PARSING =
    ClientDownloadRequest_DownloadType_MAC_ARCHIVE_FAILED_PARSING;
  static constexpr DownloadType PPAPI_SAVE_REQUEST =
    ClientDownloadRequest_DownloadType_PPAPI_SAVE_REQUEST;
  static constexpr DownloadType SAMPLED_UNSUPPORTED_FILE =
    ClientDownloadRequest_DownloadType_SAMPLED_UNSUPPORTED_FILE;
  static constexpr DownloadType RAR_COMPRESSED_EXECUTABLE =
    ClientDownloadRequest_DownloadType_RAR_COMPRESSED_EXECUTABLE;
  static constexpr DownloadType RAR_COMPRESSED_ARCHIVE =
    ClientDownloadRequest_DownloadType_RAR_COMPRESSED_ARCHIVE;
  static constexpr DownloadType INVALID_RAR =
    ClientDownloadRequest_DownloadType_INVALID_RAR;
  static constexpr DownloadType DOCUMENT =
    ClientDownloadRequest_DownloadType_DOCUMENT;
  static inline bool DownloadType_IsValid(int value) {
    return ClientDownloadRequest_DownloadType_IsValid(value);
  }
  static constexpr DownloadType DownloadType_MIN =
    ClientDownloadRequest_DownloadType_DownloadType_MIN;
  static constexpr DownloadType DownloadType_MAX =
    ClientDownloadRequest_DownloadType_DownloadType_MAX;
  static constexpr int DownloadType_ARRAYSIZE =
    ClientDownloadRequest_DownloadType_DownloadType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DownloadType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DownloadType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DownloadType_Name.");
    return ClientDownloadRequest_DownloadType_Name(enum_t_value);
  }
  static inline bool DownloadType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DownloadType* value) {
    return ClientDownloadRequest_DownloadType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 4,
    kArchivedBinaryFieldNumber = 22,
    kAlternateExtensionsFieldNumber = 35,
    kReferrerChainFieldNumber = 36,
    kDetachedCodeSignatureFieldNumber = 59,
    kUrlFieldNumber = 1,
    kFileBasenameFieldNumber = 9,
    kLocaleFieldNumber = 11,
    kUdifCodeSignatureFieldNumber = 40,
    kAccessTokenFieldNumber = 78,
    kDigestsFieldNumber = 2,
    kSignatureFieldNumber = 5,
    kImageHeadersFieldNumber = 18,
    kPopulationFieldNumber = 24,
    kReferrerChainOptionsFieldNumber = 50,
    kDocumentSummaryFieldNumber = 84,
    kArchiveSummaryFieldNumber = 85,
    kLengthFieldNumber = 3,
    kDownloadTypeFieldNumber = 10,
    kUserInitiatedFieldNumber = 6,
    kArchiveValidFieldNumber = 26,
    kSkippedUrlAllowlistFieldNumber = 28,
    kSkippedCertificateAllowlistFieldNumber = 31,
    kDEPRECATEDDownloadAttributionFinchEnabledFieldNumber = 39,
    kRequestApVerdictsFieldNumber = 67,
    kArchiveFileCountFieldNumber = 68,
    kArchiveDirectoryCountFieldNumber = 69,
  };
  // repeated .safe_browsing.ClientDownloadRequest.Resource resources = 4;
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  ::safe_browsing::ClientDownloadRequest_Resource* mutable_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_Resource >*
      mutable_resources();
  private:
  const ::safe_browsing::ClientDownloadRequest_Resource& _internal_resources(int index) const;
  ::safe_browsing::ClientDownloadRequest_Resource* _internal_add_resources();
  public:
  const ::safe_browsing::ClientDownloadRequest_Resource& resources(int index) const;
  ::safe_browsing::ClientDownloadRequest_Resource* add_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_Resource >&
      resources() const;

  // repeated .safe_browsing.ClientDownloadRequest.ArchivedBinary archived_binary = 22;
  int archived_binary_size() const;
  private:
  int _internal_archived_binary_size() const;
  public:
  void clear_archived_binary();
  ::safe_browsing::ClientDownloadRequest_ArchivedBinary* mutable_archived_binary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ArchivedBinary >*
      mutable_archived_binary();
  private:
  const ::safe_browsing::ClientDownloadRequest_ArchivedBinary& _internal_archived_binary(int index) const;
  ::safe_browsing::ClientDownloadRequest_ArchivedBinary* _internal_add_archived_binary();
  public:
  const ::safe_browsing::ClientDownloadRequest_ArchivedBinary& archived_binary(int index) const;
  ::safe_browsing::ClientDownloadRequest_ArchivedBinary* add_archived_binary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ArchivedBinary >&
      archived_binary() const;

  // repeated string alternate_extensions = 35;
  int alternate_extensions_size() const;
  private:
  int _internal_alternate_extensions_size() const;
  public:
  void clear_alternate_extensions();
  const std::string& alternate_extensions(int index) const;
  std::string* mutable_alternate_extensions(int index);
  void set_alternate_extensions(int index, const std::string& value);
  void set_alternate_extensions(int index, std::string&& value);
  void set_alternate_extensions(int index, const char* value);
  void set_alternate_extensions(int index, const char* value, size_t size);
  std::string* add_alternate_extensions();
  void add_alternate_extensions(const std::string& value);
  void add_alternate_extensions(std::string&& value);
  void add_alternate_extensions(const char* value);
  void add_alternate_extensions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alternate_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alternate_extensions();
  private:
  const std::string& _internal_alternate_extensions(int index) const;
  std::string* _internal_add_alternate_extensions();
  public:

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 36;
  int referrer_chain_size() const;
  private:
  int _internal_referrer_chain_size() const;
  public:
  void clear_referrer_chain();
  ::safe_browsing::ReferrerChainEntry* mutable_referrer_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
      mutable_referrer_chain();
  private:
  const ::safe_browsing::ReferrerChainEntry& _internal_referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* _internal_add_referrer_chain();
  public:
  const ::safe_browsing::ReferrerChainEntry& referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* add_referrer_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
      referrer_chain() const;

  // repeated .safe_browsing.ClientDownloadRequest.DetachedCodeSignature detached_code_signature = 59;
  int detached_code_signature_size() const;
  private:
  int _internal_detached_code_signature_size() const;
  public:
  void clear_detached_code_signature();
  ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature* mutable_detached_code_signature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature >*
      mutable_detached_code_signature();
  private:
  const ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature& _internal_detached_code_signature(int index) const;
  ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature* _internal_add_detached_code_signature();
  public:
  const ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature& detached_code_signature(int index) const;
  ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature* add_detached_code_signature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature >&
      detached_code_signature() const;

  // required string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string file_basename = 9;
  bool has_file_basename() const;
  private:
  bool _internal_has_file_basename() const;
  public:
  void clear_file_basename();
  const std::string& file_basename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_basename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_basename();
  PROTOBUF_NODISCARD std::string* release_file_basename();
  void set_allocated_file_basename(std::string* file_basename);
  private:
  const std::string& _internal_file_basename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_basename(const std::string& value);
  std::string* _internal_mutable_file_basename();
  public:

  // optional string locale = 11;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional bytes udif_code_signature = 40;
  bool has_udif_code_signature() const;
  private:
  bool _internal_has_udif_code_signature() const;
  public:
  void clear_udif_code_signature();
  const std::string& udif_code_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_udif_code_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_udif_code_signature();
  PROTOBUF_NODISCARD std::string* release_udif_code_signature();
  void set_allocated_udif_code_signature(std::string* udif_code_signature);
  private:
  const std::string& _internal_udif_code_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_udif_code_signature(const std::string& value);
  std::string* _internal_mutable_udif_code_signature();
  public:

  // optional string access_token = 78;
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // required .safe_browsing.ClientDownloadRequest.Digests digests = 2;
  bool has_digests() const;
  private:
  bool _internal_has_digests() const;
  public:
  void clear_digests();
  const ::safe_browsing::ClientDownloadRequest_Digests& digests() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_Digests* release_digests();
  ::safe_browsing::ClientDownloadRequest_Digests* mutable_digests();
  void set_allocated_digests(::safe_browsing::ClientDownloadRequest_Digests* digests);
  private:
  const ::safe_browsing::ClientDownloadRequest_Digests& _internal_digests() const;
  ::safe_browsing::ClientDownloadRequest_Digests* _internal_mutable_digests();
  public:
  void unsafe_arena_set_allocated_digests(
      ::safe_browsing::ClientDownloadRequest_Digests* digests);
  ::safe_browsing::ClientDownloadRequest_Digests* unsafe_arena_release_digests();

  // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo& signature() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_SignatureInfo* release_signature();
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* mutable_signature();
  void set_allocated_signature(::safe_browsing::ClientDownloadRequest_SignatureInfo* signature);
  private:
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo& _internal_signature() const;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature);
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* unsafe_arena_release_signature();

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 18;
  bool has_image_headers() const;
  private:
  bool _internal_has_image_headers() const;
  public:
  void clear_image_headers();
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_ImageHeaders* release_image_headers();
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* mutable_image_headers();
  void set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  private:
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& _internal_image_headers() const;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _internal_mutable_image_headers();
  public:
  void unsafe_arena_set_allocated_image_headers(
      ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* unsafe_arena_release_image_headers();

  // optional .safe_browsing.ChromeUserPopulation population = 24;
  bool has_population() const;
  private:
  bool _internal_has_population() const;
  public:
  void clear_population();
  const ::safe_browsing::ChromeUserPopulation& population() const;
  PROTOBUF_NODISCARD ::safe_browsing::ChromeUserPopulation* release_population();
  ::safe_browsing::ChromeUserPopulation* mutable_population();
  void set_allocated_population(::safe_browsing::ChromeUserPopulation* population);
  private:
  const ::safe_browsing::ChromeUserPopulation& _internal_population() const;
  ::safe_browsing::ChromeUserPopulation* _internal_mutable_population();
  public:
  void unsafe_arena_set_allocated_population(
      ::safe_browsing::ChromeUserPopulation* population);
  ::safe_browsing::ChromeUserPopulation* unsafe_arena_release_population();

  // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 50;
  bool has_referrer_chain_options() const;
  private:
  bool _internal_has_referrer_chain_options() const;
  public:
  void clear_referrer_chain_options();
  const ::safe_browsing::ReferrerChainOptions& referrer_chain_options() const;
  PROTOBUF_NODISCARD ::safe_browsing::ReferrerChainOptions* release_referrer_chain_options();
  ::safe_browsing::ReferrerChainOptions* mutable_referrer_chain_options();
  void set_allocated_referrer_chain_options(::safe_browsing::ReferrerChainOptions* referrer_chain_options);
  private:
  const ::safe_browsing::ReferrerChainOptions& _internal_referrer_chain_options() const;
  ::safe_browsing::ReferrerChainOptions* _internal_mutable_referrer_chain_options();
  public:
  void unsafe_arena_set_allocated_referrer_chain_options(
      ::safe_browsing::ReferrerChainOptions* referrer_chain_options);
  ::safe_browsing::ReferrerChainOptions* unsafe_arena_release_referrer_chain_options();

  // optional .safe_browsing.ClientDownloadRequest.DocumentSummary document_summary = 84;
  bool has_document_summary() const;
  private:
  bool _internal_has_document_summary() const;
  public:
  void clear_document_summary();
  const ::safe_browsing::ClientDownloadRequest_DocumentSummary& document_summary() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_DocumentSummary* release_document_summary();
  ::safe_browsing::ClientDownloadRequest_DocumentSummary* mutable_document_summary();
  void set_allocated_document_summary(::safe_browsing::ClientDownloadRequest_DocumentSummary* document_summary);
  private:
  const ::safe_browsing::ClientDownloadRequest_DocumentSummary& _internal_document_summary() const;
  ::safe_browsing::ClientDownloadRequest_DocumentSummary* _internal_mutable_document_summary();
  public:
  void unsafe_arena_set_allocated_document_summary(
      ::safe_browsing::ClientDownloadRequest_DocumentSummary* document_summary);
  ::safe_browsing::ClientDownloadRequest_DocumentSummary* unsafe_arena_release_document_summary();

  // optional .safe_browsing.ClientDownloadRequest.ArchiveSummary archive_summary = 85;
  bool has_archive_summary() const;
  private:
  bool _internal_has_archive_summary() const;
  public:
  void clear_archive_summary();
  const ::safe_browsing::ClientDownloadRequest_ArchiveSummary& archive_summary() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_ArchiveSummary* release_archive_summary();
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary* mutable_archive_summary();
  void set_allocated_archive_summary(::safe_browsing::ClientDownloadRequest_ArchiveSummary* archive_summary);
  private:
  const ::safe_browsing::ClientDownloadRequest_ArchiveSummary& _internal_archive_summary() const;
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary* _internal_mutable_archive_summary();
  public:
  void unsafe_arena_set_allocated_archive_summary(
      ::safe_browsing::ClientDownloadRequest_ArchiveSummary* archive_summary);
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary* unsafe_arena_release_archive_summary();

  // required int64 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  int64_t length() const;
  void set_length(int64_t value);
  private:
  int64_t _internal_length() const;
  void _internal_set_length(int64_t value);
  public:

  // optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 10 [default = WIN_EXECUTABLE];
  bool has_download_type() const;
  private:
  bool _internal_has_download_type() const;
  public:
  void clear_download_type();
  ::safe_browsing::ClientDownloadRequest_DownloadType download_type() const;
  void set_download_type(::safe_browsing::ClientDownloadRequest_DownloadType value);
  private:
  ::safe_browsing::ClientDownloadRequest_DownloadType _internal_download_type() const;
  void _internal_set_download_type(::safe_browsing::ClientDownloadRequest_DownloadType value);
  public:

  // optional bool user_initiated = 6;
  bool has_user_initiated() const;
  private:
  bool _internal_has_user_initiated() const;
  public:
  void clear_user_initiated();
  bool user_initiated() const;
  void set_user_initiated(bool value);
  private:
  bool _internal_user_initiated() const;
  void _internal_set_user_initiated(bool value);
  public:

  // optional bool archive_valid = 26;
  bool has_archive_valid() const;
  private:
  bool _internal_has_archive_valid() const;
  public:
  void clear_archive_valid();
  bool archive_valid() const;
  void set_archive_valid(bool value);
  private:
  bool _internal_archive_valid() const;
  void _internal_set_archive_valid(bool value);
  public:

  // optional bool skipped_url_allowlist = 28;
  bool has_skipped_url_allowlist() const;
  private:
  bool _internal_has_skipped_url_allowlist() const;
  public:
  void clear_skipped_url_allowlist();
  bool skipped_url_allowlist() const;
  void set_skipped_url_allowlist(bool value);
  private:
  bool _internal_skipped_url_allowlist() const;
  void _internal_set_skipped_url_allowlist(bool value);
  public:

  // optional bool skipped_certificate_allowlist = 31;
  bool has_skipped_certificate_allowlist() const;
  private:
  bool _internal_has_skipped_certificate_allowlist() const;
  public:
  void clear_skipped_certificate_allowlist();
  bool skipped_certificate_allowlist() const;
  void set_skipped_certificate_allowlist(bool value);
  private:
  bool _internal_skipped_certificate_allowlist() const;
  void _internal_set_skipped_certificate_allowlist(bool value);
  public:

  // optional bool DEPRECATED_download_attribution_finch_enabled = 39 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_download_attribution_finch_enabled() const;
  private:
  bool _internal_has_deprecated_download_attribution_finch_enabled() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_download_attribution_finch_enabled();
  PROTOBUF_DEPRECATED bool deprecated_download_attribution_finch_enabled() const;
  PROTOBUF_DEPRECATED void set_deprecated_download_attribution_finch_enabled(bool value);
  private:
  bool _internal_deprecated_download_attribution_finch_enabled() const;
  void _internal_set_deprecated_download_attribution_finch_enabled(bool value);
  public:

  // optional bool request_ap_verdicts = 67;
  bool has_request_ap_verdicts() const;
  private:
  bool _internal_has_request_ap_verdicts() const;
  public:
  void clear_request_ap_verdicts();
  bool request_ap_verdicts() const;
  void set_request_ap_verdicts(bool value);
  private:
  bool _internal_request_ap_verdicts() const;
  void _internal_set_request_ap_verdicts(bool value);
  public:

  // optional int32 archive_file_count = 68;
  bool has_archive_file_count() const;
  private:
  bool _internal_has_archive_file_count() const;
  public:
  void clear_archive_file_count();
  int32_t archive_file_count() const;
  void set_archive_file_count(int32_t value);
  private:
  int32_t _internal_archive_file_count() const;
  void _internal_set_archive_file_count(int32_t value);
  public:

  // optional int32 archive_directory_count = 69;
  bool has_archive_directory_count() const;
  private:
  bool _internal_has_archive_directory_count() const;
  public:
  void clear_archive_directory_count();
  int32_t archive_directory_count() const;
  void set_archive_directory_count(int32_t value);
  private:
  int32_t _internal_archive_directory_count() const;
  void _internal_set_archive_directory_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_Resource > resources_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ArchivedBinary > archived_binary_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alternate_extensions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry > referrer_chain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature > detached_code_signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_basename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udif_code_signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::safe_browsing::ClientDownloadRequest_Digests* digests_;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature_;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers_;
  ::safe_browsing::ChromeUserPopulation* population_;
  ::safe_browsing::ReferrerChainOptions* referrer_chain_options_;
  ::safe_browsing::ClientDownloadRequest_DocumentSummary* document_summary_;
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary* archive_summary_;
  int64_t length_;
  int download_type_;
  bool user_initiated_;
  bool archive_valid_;
  bool skipped_url_allowlist_;
  bool skipped_certificate_allowlist_;
  bool deprecated_download_attribution_finch_enabled_;
  bool request_ap_verdicts_;
  int32_t archive_file_count_;
  int32_t archive_directory_count_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ReferrerChainOptions final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ReferrerChainOptions) */ {
 public:
  inline ReferrerChainOptions() : ReferrerChainOptions(nullptr) {}
  ~ReferrerChainOptions() override;
  explicit PROTOBUF_CONSTEXPR ReferrerChainOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferrerChainOptions(const ReferrerChainOptions& from);
  ReferrerChainOptions(ReferrerChainOptions&& from) noexcept
    : ReferrerChainOptions() {
    *this = ::std::move(from);
  }

  inline ReferrerChainOptions& operator=(const ReferrerChainOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferrerChainOptions& operator=(ReferrerChainOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ReferrerChainOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferrerChainOptions* internal_default_instance() {
    return reinterpret_cast<const ReferrerChainOptions*>(
               &_ReferrerChainOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ReferrerChainOptions& a, ReferrerChainOptions& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ReferrerChainOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferrerChainOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferrerChainOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferrerChainOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ReferrerChainOptions& from);
  void MergeFrom(const ReferrerChainOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReferrerChainOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ReferrerChainOptions";
  }
  protected:
  explicit ReferrerChainOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecentNavigationsToCollectFieldNumber = 1,
  };
  // optional int32 recent_navigations_to_collect = 1 [default = 0];
  bool has_recent_navigations_to_collect() const;
  private:
  bool _internal_has_recent_navigations_to_collect() const;
  public:
  void clear_recent_navigations_to_collect();
  int32_t recent_navigations_to_collect() const;
  void set_recent_navigations_to_collect(int32_t value);
  private:
  int32_t _internal_recent_navigations_to_collect() const;
  void _internal_set_recent_navigations_to_collect(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ReferrerChainOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t recent_navigations_to_collect_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ReferrerChainEntry_ServerRedirect final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ReferrerChainEntry.ServerRedirect) */ {
 public:
  inline ReferrerChainEntry_ServerRedirect() : ReferrerChainEntry_ServerRedirect(nullptr) {}
  ~ReferrerChainEntry_ServerRedirect() override;
  explicit PROTOBUF_CONSTEXPR ReferrerChainEntry_ServerRedirect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferrerChainEntry_ServerRedirect(const ReferrerChainEntry_ServerRedirect& from);
  ReferrerChainEntry_ServerRedirect(ReferrerChainEntry_ServerRedirect&& from) noexcept
    : ReferrerChainEntry_ServerRedirect() {
    *this = ::std::move(from);
  }

  inline ReferrerChainEntry_ServerRedirect& operator=(const ReferrerChainEntry_ServerRedirect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferrerChainEntry_ServerRedirect& operator=(ReferrerChainEntry_ServerRedirect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ReferrerChainEntry_ServerRedirect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferrerChainEntry_ServerRedirect* internal_default_instance() {
    return reinterpret_cast<const ReferrerChainEntry_ServerRedirect*>(
               &_ReferrerChainEntry_ServerRedirect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ReferrerChainEntry_ServerRedirect& a, ReferrerChainEntry_ServerRedirect& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ReferrerChainEntry_ServerRedirect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferrerChainEntry_ServerRedirect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferrerChainEntry_ServerRedirect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferrerChainEntry_ServerRedirect>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ReferrerChainEntry_ServerRedirect& from);
  void MergeFrom(const ReferrerChainEntry_ServerRedirect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReferrerChainEntry_ServerRedirect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ReferrerChainEntry.ServerRedirect";
  }
  protected:
  explicit ReferrerChainEntry_ServerRedirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ReferrerChainEntry.ServerRedirect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ReferrerChainEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ReferrerChainEntry) */ {
 public:
  inline ReferrerChainEntry() : ReferrerChainEntry(nullptr) {}
  ~ReferrerChainEntry() override;
  explicit PROTOBUF_CONSTEXPR ReferrerChainEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferrerChainEntry(const ReferrerChainEntry& from);
  ReferrerChainEntry(ReferrerChainEntry&& from) noexcept
    : ReferrerChainEntry() {
    *this = ::std::move(from);
  }

  inline ReferrerChainEntry& operator=(const ReferrerChainEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferrerChainEntry& operator=(ReferrerChainEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ReferrerChainEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferrerChainEntry* internal_default_instance() {
    return reinterpret_cast<const ReferrerChainEntry*>(
               &_ReferrerChainEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ReferrerChainEntry& a, ReferrerChainEntry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ReferrerChainEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferrerChainEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferrerChainEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferrerChainEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ReferrerChainEntry& from);
  void MergeFrom(const ReferrerChainEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReferrerChainEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ReferrerChainEntry";
  }
  protected:
  explicit ReferrerChainEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ReferrerChainEntry_ServerRedirect ServerRedirect;

  typedef ReferrerChainEntry_URLType URLType;
  static constexpr URLType EVENT_URL =
    ReferrerChainEntry_URLType_EVENT_URL;
  static constexpr URLType LANDING_PAGE =
    ReferrerChainEntry_URLType_LANDING_PAGE;
  static constexpr URLType LANDING_REFERRER =
    ReferrerChainEntry_URLType_LANDING_REFERRER;
  static constexpr URLType CLIENT_REDIRECT =
    ReferrerChainEntry_URLType_CLIENT_REDIRECT;
  static constexpr URLType DEPRECATED_SERVER_REDIRECT =
    ReferrerChainEntry_URLType_DEPRECATED_SERVER_REDIRECT;
  static constexpr URLType RECENT_NAVIGATION =
    ReferrerChainEntry_URLType_RECENT_NAVIGATION;
  static constexpr URLType REFERRER =
    ReferrerChainEntry_URLType_REFERRER;
  static inline bool URLType_IsValid(int value) {
    return ReferrerChainEntry_URLType_IsValid(value);
  }
  static constexpr URLType URLType_MIN =
    ReferrerChainEntry_URLType_URLType_MIN;
  static constexpr URLType URLType_MAX =
    ReferrerChainEntry_URLType_URLType_MAX;
  static constexpr int URLType_ARRAYSIZE =
    ReferrerChainEntry_URLType_URLType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& URLType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, URLType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function URLType_Name.");
    return ReferrerChainEntry_URLType_Name(enum_t_value);
  }
  static inline bool URLType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      URLType* value) {
    return ReferrerChainEntry_URLType_Parse(name, value);
  }

  typedef ReferrerChainEntry_NavigationInitiation NavigationInitiation;
  static constexpr NavigationInitiation UNDEFINED =
    ReferrerChainEntry_NavigationInitiation_UNDEFINED;
  static constexpr NavigationInitiation BROWSER_INITIATED =
    ReferrerChainEntry_NavigationInitiation_BROWSER_INITIATED;
  static constexpr NavigationInitiation RENDERER_INITIATED_WITHOUT_USER_GESTURE =
    ReferrerChainEntry_NavigationInitiation_RENDERER_INITIATED_WITHOUT_USER_GESTURE;
  static constexpr NavigationInitiation RENDERER_INITIATED_WITH_USER_GESTURE =
    ReferrerChainEntry_NavigationInitiation_RENDERER_INITIATED_WITH_USER_GESTURE;
  static inline bool NavigationInitiation_IsValid(int value) {
    return ReferrerChainEntry_NavigationInitiation_IsValid(value);
  }
  static constexpr NavigationInitiation NavigationInitiation_MIN =
    ReferrerChainEntry_NavigationInitiation_NavigationInitiation_MIN;
  static constexpr NavigationInitiation NavigationInitiation_MAX =
    ReferrerChainEntry_NavigationInitiation_NavigationInitiation_MAX;
  static constexpr int NavigationInitiation_ARRAYSIZE =
    ReferrerChainEntry_NavigationInitiation_NavigationInitiation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NavigationInitiation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NavigationInitiation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NavigationInitiation_Name.");
    return ReferrerChainEntry_NavigationInitiation_Name(enum_t_value);
  }
  static inline bool NavigationInitiation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NavigationInitiation* value) {
    return ReferrerChainEntry_NavigationInitiation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressesFieldNumber = 3,
    kServerRedirectChainFieldNumber = 8,
    kUrlFieldNumber = 1,
    kReferrerUrlFieldNumber = 4,
    kReferrerMainFrameUrlFieldNumber = 5,
    kMainFrameUrlFieldNumber = 9,
    kNavigationTimeMsecFieldNumber = 7,
    kNavigationInitiationFieldNumber = 10,
    kIsRetargetingFieldNumber = 6,
    kMaybeLaunchedByExternalApplicationFieldNumber = 11,
    kIsSubframeUrlRemovedFieldNumber = 12,
    kIsSubframeReferrerUrlRemovedFieldNumber = 13,
    kIsUrlRemovedByPolicyFieldNumber = 14,
    kTypeFieldNumber = 2,
  };
  // repeated string ip_addresses = 3;
  int ip_addresses_size() const;
  private:
  int _internal_ip_addresses_size() const;
  public:
  void clear_ip_addresses();
  const std::string& ip_addresses(int index) const;
  std::string* mutable_ip_addresses(int index);
  void set_ip_addresses(int index, const std::string& value);
  void set_ip_addresses(int index, std::string&& value);
  void set_ip_addresses(int index, const char* value);
  void set_ip_addresses(int index, const char* value, size_t size);
  std::string* add_ip_addresses();
  void add_ip_addresses(const std::string& value);
  void add_ip_addresses(std::string&& value);
  void add_ip_addresses(const char* value);
  void add_ip_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip_addresses();
  private:
  const std::string& _internal_ip_addresses(int index) const;
  std::string* _internal_add_ip_addresses();
  public:

  // repeated .safe_browsing.ReferrerChainEntry.ServerRedirect server_redirect_chain = 8;
  int server_redirect_chain_size() const;
  private:
  int _internal_server_redirect_chain_size() const;
  public:
  void clear_server_redirect_chain();
  ::safe_browsing::ReferrerChainEntry_ServerRedirect* mutable_server_redirect_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry_ServerRedirect >*
      mutable_server_redirect_chain();
  private:
  const ::safe_browsing::ReferrerChainEntry_ServerRedirect& _internal_server_redirect_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry_ServerRedirect* _internal_add_server_redirect_chain();
  public:
  const ::safe_browsing::ReferrerChainEntry_ServerRedirect& server_redirect_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry_ServerRedirect* add_server_redirect_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry_ServerRedirect >&
      server_redirect_chain() const;

  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string referrer_url = 4;
  bool has_referrer_url() const;
  private:
  bool _internal_has_referrer_url() const;
  public:
  void clear_referrer_url();
  const std::string& referrer_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_url();
  PROTOBUF_NODISCARD std::string* release_referrer_url();
  void set_allocated_referrer_url(std::string* referrer_url);
  private:
  const std::string& _internal_referrer_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_url(const std::string& value);
  std::string* _internal_mutable_referrer_url();
  public:

  // optional string referrer_main_frame_url = 5;
  bool has_referrer_main_frame_url() const;
  private:
  bool _internal_has_referrer_main_frame_url() const;
  public:
  void clear_referrer_main_frame_url();
  const std::string& referrer_main_frame_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_main_frame_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_main_frame_url();
  PROTOBUF_NODISCARD std::string* release_referrer_main_frame_url();
  void set_allocated_referrer_main_frame_url(std::string* referrer_main_frame_url);
  private:
  const std::string& _internal_referrer_main_frame_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_main_frame_url(const std::string& value);
  std::string* _internal_mutable_referrer_main_frame_url();
  public:

  // optional string main_frame_url = 9;
  bool has_main_frame_url() const;
  private:
  bool _internal_has_main_frame_url() const;
  public:
  void clear_main_frame_url();
  const std::string& main_frame_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_frame_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_frame_url();
  PROTOBUF_NODISCARD std::string* release_main_frame_url();
  void set_allocated_main_frame_url(std::string* main_frame_url);
  private:
  const std::string& _internal_main_frame_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_frame_url(const std::string& value);
  std::string* _internal_mutable_main_frame_url();
  public:

  // optional double navigation_time_msec = 7;
  bool has_navigation_time_msec() const;
  private:
  bool _internal_has_navigation_time_msec() const;
  public:
  void clear_navigation_time_msec();
  double navigation_time_msec() const;
  void set_navigation_time_msec(double value);
  private:
  double _internal_navigation_time_msec() const;
  void _internal_set_navigation_time_msec(double value);
  public:

  // optional .safe_browsing.ReferrerChainEntry.NavigationInitiation navigation_initiation = 10;
  bool has_navigation_initiation() const;
  private:
  bool _internal_has_navigation_initiation() const;
  public:
  void clear_navigation_initiation();
  ::safe_browsing::ReferrerChainEntry_NavigationInitiation navigation_initiation() const;
  void set_navigation_initiation(::safe_browsing::ReferrerChainEntry_NavigationInitiation value);
  private:
  ::safe_browsing::ReferrerChainEntry_NavigationInitiation _internal_navigation_initiation() const;
  void _internal_set_navigation_initiation(::safe_browsing::ReferrerChainEntry_NavigationInitiation value);
  public:

  // optional bool is_retargeting = 6;
  bool has_is_retargeting() const;
  private:
  bool _internal_has_is_retargeting() const;
  public:
  void clear_is_retargeting();
  bool is_retargeting() const;
  void set_is_retargeting(bool value);
  private:
  bool _internal_is_retargeting() const;
  void _internal_set_is_retargeting(bool value);
  public:

  // optional bool maybe_launched_by_external_application = 11;
  bool has_maybe_launched_by_external_application() const;
  private:
  bool _internal_has_maybe_launched_by_external_application() const;
  public:
  void clear_maybe_launched_by_external_application();
  bool maybe_launched_by_external_application() const;
  void set_maybe_launched_by_external_application(bool value);
  private:
  bool _internal_maybe_launched_by_external_application() const;
  void _internal_set_maybe_launched_by_external_application(bool value);
  public:

  // optional bool is_subframe_url_removed = 12;
  bool has_is_subframe_url_removed() const;
  private:
  bool _internal_has_is_subframe_url_removed() const;
  public:
  void clear_is_subframe_url_removed();
  bool is_subframe_url_removed() const;
  void set_is_subframe_url_removed(bool value);
  private:
  bool _internal_is_subframe_url_removed() const;
  void _internal_set_is_subframe_url_removed(bool value);
  public:

  // optional bool is_subframe_referrer_url_removed = 13;
  bool has_is_subframe_referrer_url_removed() const;
  private:
  bool _internal_has_is_subframe_referrer_url_removed() const;
  public:
  void clear_is_subframe_referrer_url_removed();
  bool is_subframe_referrer_url_removed() const;
  void set_is_subframe_referrer_url_removed(bool value);
  private:
  bool _internal_is_subframe_referrer_url_removed() const;
  void _internal_set_is_subframe_referrer_url_removed(bool value);
  public:

  // optional bool is_url_removed_by_policy = 14;
  bool has_is_url_removed_by_policy() const;
  private:
  bool _internal_has_is_url_removed_by_policy() const;
  public:
  void clear_is_url_removed_by_policy();
  bool is_url_removed_by_policy() const;
  void set_is_url_removed_by_policy(bool value);
  private:
  bool _internal_is_url_removed_by_policy() const;
  void _internal_set_is_url_removed_by_policy(bool value);
  public:

  // optional .safe_browsing.ReferrerChainEntry.URLType type = 2 [default = CLIENT_REDIRECT];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::safe_browsing::ReferrerChainEntry_URLType type() const;
  void set_type(::safe_browsing::ReferrerChainEntry_URLType value);
  private:
  ::safe_browsing::ReferrerChainEntry_URLType _internal_type() const;
  void _internal_set_type(::safe_browsing::ReferrerChainEntry_URLType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ReferrerChainEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry_ServerRedirect > server_redirect_chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_main_frame_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_frame_url_;
  double navigation_time_msec_;
  int navigation_initiation_;
  bool is_retargeting_;
  bool maybe_launched_by_external_application_;
  bool is_subframe_url_removed_;
  bool is_subframe_referrer_url_removed_;
  bool is_url_removed_by_policy_;
  int type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadResponse_MoreInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadResponse.MoreInfo) */ {
 public:
  inline ClientDownloadResponse_MoreInfo() : ClientDownloadResponse_MoreInfo(nullptr) {}
  ~ClientDownloadResponse_MoreInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadResponse_MoreInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadResponse_MoreInfo(const ClientDownloadResponse_MoreInfo& from);
  ClientDownloadResponse_MoreInfo(ClientDownloadResponse_MoreInfo&& from) noexcept
    : ClientDownloadResponse_MoreInfo() {
    *this = ::std::move(from);
  }

  inline ClientDownloadResponse_MoreInfo& operator=(const ClientDownloadResponse_MoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadResponse_MoreInfo& operator=(ClientDownloadResponse_MoreInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadResponse_MoreInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadResponse_MoreInfo* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadResponse_MoreInfo*>(
               &_ClientDownloadResponse_MoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ClientDownloadResponse_MoreInfo& a, ClientDownloadResponse_MoreInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadResponse_MoreInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadResponse_MoreInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadResponse_MoreInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadResponse_MoreInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadResponse_MoreInfo& from);
  void MergeFrom(const ClientDownloadResponse_MoreInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadResponse_MoreInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadResponse.MoreInfo";
  }
  protected:
  explicit ClientDownloadResponse_MoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // optional string description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadResponse.MoreInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadResponse) */ {
 public:
  inline ClientDownloadResponse() : ClientDownloadResponse(nullptr) {}
  ~ClientDownloadResponse() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadResponse(const ClientDownloadResponse& from);
  ClientDownloadResponse(ClientDownloadResponse&& from) noexcept
    : ClientDownloadResponse() {
    *this = ::std::move(from);
  }

  inline ClientDownloadResponse& operator=(const ClientDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadResponse& operator=(ClientDownloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadResponse*>(
               &_ClientDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ClientDownloadResponse& a, ClientDownloadResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadResponse& from);
  void MergeFrom(const ClientDownloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadResponse";
  }
  protected:
  explicit ClientDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientDownloadResponse_MoreInfo MoreInfo;

  typedef ClientDownloadResponse_Verdict Verdict;
  static constexpr Verdict SAFE =
    ClientDownloadResponse_Verdict_SAFE;
  static constexpr Verdict DANGEROUS =
    ClientDownloadResponse_Verdict_DANGEROUS;
  static constexpr Verdict UNCOMMON =
    ClientDownloadResponse_Verdict_UNCOMMON;
  static constexpr Verdict POTENTIALLY_UNWANTED =
    ClientDownloadResponse_Verdict_POTENTIALLY_UNWANTED;
  static constexpr Verdict DANGEROUS_HOST =
    ClientDownloadResponse_Verdict_DANGEROUS_HOST;
  static constexpr Verdict UNKNOWN =
    ClientDownloadResponse_Verdict_UNKNOWN;
  static constexpr Verdict DANGEROUS_ACCOUNT_COMPROMISE =
    ClientDownloadResponse_Verdict_DANGEROUS_ACCOUNT_COMPROMISE;
  static inline bool Verdict_IsValid(int value) {
    return ClientDownloadResponse_Verdict_IsValid(value);
  }
  static constexpr Verdict Verdict_MIN =
    ClientDownloadResponse_Verdict_Verdict_MIN;
  static constexpr Verdict Verdict_MAX =
    ClientDownloadResponse_Verdict_Verdict_MAX;
  static constexpr int Verdict_ARRAYSIZE =
    ClientDownloadResponse_Verdict_Verdict_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Verdict_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Verdict>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Verdict_Name.");
    return ClientDownloadResponse_Verdict_Name(enum_t_value);
  }
  static inline bool Verdict_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Verdict* value) {
    return ClientDownloadResponse_Verdict_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kMoreInfoFieldNumber = 2,
    kVerdictFieldNumber = 1,
    kUploadFieldNumber = 5,
    kRequestDeepScanFieldNumber = 19,
  };
  // optional bytes token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional .safe_browsing.ClientDownloadResponse.MoreInfo more_info = 2;
  bool has_more_info() const;
  private:
  bool _internal_has_more_info() const;
  public:
  void clear_more_info();
  const ::safe_browsing::ClientDownloadResponse_MoreInfo& more_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadResponse_MoreInfo* release_more_info();
  ::safe_browsing::ClientDownloadResponse_MoreInfo* mutable_more_info();
  void set_allocated_more_info(::safe_browsing::ClientDownloadResponse_MoreInfo* more_info);
  private:
  const ::safe_browsing::ClientDownloadResponse_MoreInfo& _internal_more_info() const;
  ::safe_browsing::ClientDownloadResponse_MoreInfo* _internal_mutable_more_info();
  public:
  void unsafe_arena_set_allocated_more_info(
      ::safe_browsing::ClientDownloadResponse_MoreInfo* more_info);
  ::safe_browsing::ClientDownloadResponse_MoreInfo* unsafe_arena_release_more_info();

  // optional .safe_browsing.ClientDownloadResponse.Verdict verdict = 1 [default = SAFE];
  bool has_verdict() const;
  private:
  bool _internal_has_verdict() const;
  public:
  void clear_verdict();
  ::safe_browsing::ClientDownloadResponse_Verdict verdict() const;
  void set_verdict(::safe_browsing::ClientDownloadResponse_Verdict value);
  private:
  ::safe_browsing::ClientDownloadResponse_Verdict _internal_verdict() const;
  void _internal_set_verdict(::safe_browsing::ClientDownloadResponse_Verdict value);
  public:

  // optional bool upload = 5;
  bool has_upload() const;
  private:
  bool _internal_has_upload() const;
  public:
  void clear_upload();
  bool upload() const;
  void set_upload(bool value);
  private:
  bool _internal_upload() const;
  void _internal_set_upload(bool value);
  public:

  // optional bool request_deep_scan = 19;
  bool has_request_deep_scan() const;
  private:
  bool _internal_has_request_deep_scan() const;
  public:
  void clear_request_deep_scan();
  bool request_deep_scan() const;
  void set_request_deep_scan(bool value);
  private:
  bool _internal_request_deep_scan() const;
  void _internal_set_request_deep_scan(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::safe_browsing::ClientDownloadResponse_MoreInfo* more_info_;
  int verdict_;
  bool upload_;
  bool request_deep_scan_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadReport_UserInformation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadReport.UserInformation) */ {
 public:
  inline ClientDownloadReport_UserInformation() : ClientDownloadReport_UserInformation(nullptr) {}
  ~ClientDownloadReport_UserInformation() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadReport_UserInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadReport_UserInformation(const ClientDownloadReport_UserInformation& from);
  ClientDownloadReport_UserInformation(ClientDownloadReport_UserInformation&& from) noexcept
    : ClientDownloadReport_UserInformation() {
    *this = ::std::move(from);
  }

  inline ClientDownloadReport_UserInformation& operator=(const ClientDownloadReport_UserInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadReport_UserInformation& operator=(ClientDownloadReport_UserInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadReport_UserInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadReport_UserInformation* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadReport_UserInformation*>(
               &_ClientDownloadReport_UserInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ClientDownloadReport_UserInformation& a, ClientDownloadReport_UserInformation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadReport_UserInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadReport_UserInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadReport_UserInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadReport_UserInformation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadReport_UserInformation& from);
  void MergeFrom(const ClientDownloadReport_UserInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadReport_UserInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadReport.UserInformation";
  }
  protected:
  explicit ClientDownloadReport_UserInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // optional string email = 1;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadReport.UserInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientDownloadReport final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientDownloadReport) */ {
 public:
  inline ClientDownloadReport() : ClientDownloadReport(nullptr) {}
  ~ClientDownloadReport() override;
  explicit PROTOBUF_CONSTEXPR ClientDownloadReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDownloadReport(const ClientDownloadReport& from);
  ClientDownloadReport(ClientDownloadReport&& from) noexcept
    : ClientDownloadReport() {
    *this = ::std::move(from);
  }

  inline ClientDownloadReport& operator=(const ClientDownloadReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDownloadReport& operator=(ClientDownloadReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDownloadReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDownloadReport* internal_default_instance() {
    return reinterpret_cast<const ClientDownloadReport*>(
               &_ClientDownloadReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ClientDownloadReport& a, ClientDownloadReport& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDownloadReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDownloadReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDownloadReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDownloadReport>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDownloadReport& from);
  void MergeFrom(const ClientDownloadReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDownloadReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientDownloadReport";
  }
  protected:
  explicit ClientDownloadReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientDownloadReport_UserInformation UserInformation;

  typedef ClientDownloadReport_Reason Reason;
  static constexpr Reason SHARE =
    ClientDownloadReport_Reason_SHARE;
  static constexpr Reason FALSE_POSITIVE =
    ClientDownloadReport_Reason_FALSE_POSITIVE;
  static constexpr Reason APPEAL =
    ClientDownloadReport_Reason_APPEAL;
  static inline bool Reason_IsValid(int value) {
    return ClientDownloadReport_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    ClientDownloadReport_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    ClientDownloadReport_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    ClientDownloadReport_Reason_Reason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return ClientDownloadReport_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return ClientDownloadReport_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 4,
    kDownloadRequestFieldNumber = 2,
    kUserInformationFieldNumber = 3,
    kDownloadResponseFieldNumber = 5,
    kReasonFieldNumber = 1,
  };
  // optional bytes comment = 4;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional .safe_browsing.ClientDownloadRequest download_request = 2;
  bool has_download_request() const;
  private:
  bool _internal_has_download_request() const;
  public:
  void clear_download_request();
  const ::safe_browsing::ClientDownloadRequest& download_request() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest* release_download_request();
  ::safe_browsing::ClientDownloadRequest* mutable_download_request();
  void set_allocated_download_request(::safe_browsing::ClientDownloadRequest* download_request);
  private:
  const ::safe_browsing::ClientDownloadRequest& _internal_download_request() const;
  ::safe_browsing::ClientDownloadRequest* _internal_mutable_download_request();
  public:
  void unsafe_arena_set_allocated_download_request(
      ::safe_browsing::ClientDownloadRequest* download_request);
  ::safe_browsing::ClientDownloadRequest* unsafe_arena_release_download_request();

  // optional .safe_browsing.ClientDownloadReport.UserInformation user_information = 3;
  bool has_user_information() const;
  private:
  bool _internal_has_user_information() const;
  public:
  void clear_user_information();
  const ::safe_browsing::ClientDownloadReport_UserInformation& user_information() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadReport_UserInformation* release_user_information();
  ::safe_browsing::ClientDownloadReport_UserInformation* mutable_user_information();
  void set_allocated_user_information(::safe_browsing::ClientDownloadReport_UserInformation* user_information);
  private:
  const ::safe_browsing::ClientDownloadReport_UserInformation& _internal_user_information() const;
  ::safe_browsing::ClientDownloadReport_UserInformation* _internal_mutable_user_information();
  public:
  void unsafe_arena_set_allocated_user_information(
      ::safe_browsing::ClientDownloadReport_UserInformation* user_information);
  ::safe_browsing::ClientDownloadReport_UserInformation* unsafe_arena_release_user_information();

  // optional .safe_browsing.ClientDownloadResponse download_response = 5;
  bool has_download_response() const;
  private:
  bool _internal_has_download_response() const;
  public:
  void clear_download_response();
  const ::safe_browsing::ClientDownloadResponse& download_response() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadResponse* release_download_response();
  ::safe_browsing::ClientDownloadResponse* mutable_download_response();
  void set_allocated_download_response(::safe_browsing::ClientDownloadResponse* download_response);
  private:
  const ::safe_browsing::ClientDownloadResponse& _internal_download_response() const;
  ::safe_browsing::ClientDownloadResponse* _internal_mutable_download_response();
  public:
  void unsafe_arena_set_allocated_download_response(
      ::safe_browsing::ClientDownloadResponse* download_response);
  ::safe_browsing::ClientDownloadResponse* unsafe_arena_release_download_response();

  // optional .safe_browsing.ClientDownloadReport.Reason reason = 1;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::safe_browsing::ClientDownloadReport_Reason reason() const;
  void set_reason(::safe_browsing::ClientDownloadReport_Reason value);
  private:
  ::safe_browsing::ClientDownloadReport_Reason _internal_reason() const;
  void _internal_set_reason(::safe_browsing::ClientDownloadReport_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientDownloadReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::safe_browsing::ClientDownloadRequest* download_request_;
  ::safe_browsing::ClientDownloadReport_UserInformation* user_information_;
  ::safe_browsing::ClientDownloadResponse* download_response_;
  int reason_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientUploadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientUploadResponse) */ {
 public:
  inline ClientUploadResponse() : ClientUploadResponse(nullptr) {}
  ~ClientUploadResponse() override;
  explicit PROTOBUF_CONSTEXPR ClientUploadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientUploadResponse(const ClientUploadResponse& from);
  ClientUploadResponse(ClientUploadResponse&& from) noexcept
    : ClientUploadResponse() {
    *this = ::std::move(from);
  }

  inline ClientUploadResponse& operator=(const ClientUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientUploadResponse& operator=(ClientUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientUploadResponse* internal_default_instance() {
    return reinterpret_cast<const ClientUploadResponse*>(
               &_ClientUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ClientUploadResponse& a, ClientUploadResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientUploadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientUploadResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientUploadResponse& from);
  void MergeFrom(const ClientUploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientUploadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientUploadResponse";
  }
  protected:
  explicit ClientUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientUploadResponse_UploadStatus UploadStatus;
  static constexpr UploadStatus SUCCESS =
    ClientUploadResponse_UploadStatus_SUCCESS;
  static constexpr UploadStatus UPLOAD_FAILURE =
    ClientUploadResponse_UploadStatus_UPLOAD_FAILURE;
  static inline bool UploadStatus_IsValid(int value) {
    return ClientUploadResponse_UploadStatus_IsValid(value);
  }
  static constexpr UploadStatus UploadStatus_MIN =
    ClientUploadResponse_UploadStatus_UploadStatus_MIN;
  static constexpr UploadStatus UploadStatus_MAX =
    ClientUploadResponse_UploadStatus_UploadStatus_MAX;
  static constexpr int UploadStatus_ARRAYSIZE =
    ClientUploadResponse_UploadStatus_UploadStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UploadStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UploadStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UploadStatus_Name.");
    return ClientUploadResponse_UploadStatus_Name(enum_t_value);
  }
  static inline bool UploadStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UploadStatus* value) {
    return ClientUploadResponse_UploadStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPermalinkFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string permalink = 2;
  bool has_permalink() const;
  private:
  bool _internal_has_permalink() const;
  public:
  void clear_permalink();
  const std::string& permalink() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permalink(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permalink();
  PROTOBUF_NODISCARD std::string* release_permalink();
  void set_allocated_permalink(std::string* permalink);
  private:
  const std::string& _internal_permalink() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permalink(const std::string& value);
  std::string* _internal_mutable_permalink();
  public:

  // optional .safe_browsing.ClientUploadResponse.UploadStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::safe_browsing::ClientUploadResponse_UploadStatus status() const;
  void set_status(::safe_browsing::ClientUploadResponse_UploadStatus value);
  private:
  ::safe_browsing::ClientUploadResponse_UploadStatus _internal_status() const;
  void _internal_set_status(::safe_browsing::ClientUploadResponse_UploadStatus value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permalink_;
  int status_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_IncidentData_TrackedPreferenceIncident final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident) */ {
 public:
  inline ClientIncidentReport_IncidentData_TrackedPreferenceIncident() : ClientIncidentReport_IncidentData_TrackedPreferenceIncident(nullptr) {}
  ~ClientIncidentReport_IncidentData_TrackedPreferenceIncident() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_TrackedPreferenceIncident(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_IncidentData_TrackedPreferenceIncident(const ClientIncidentReport_IncidentData_TrackedPreferenceIncident& from);
  ClientIncidentReport_IncidentData_TrackedPreferenceIncident(ClientIncidentReport_IncidentData_TrackedPreferenceIncident&& from) noexcept
    : ClientIncidentReport_IncidentData_TrackedPreferenceIncident() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_IncidentData_TrackedPreferenceIncident& operator=(const ClientIncidentReport_IncidentData_TrackedPreferenceIncident& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_IncidentData_TrackedPreferenceIncident& operator=(ClientIncidentReport_IncidentData_TrackedPreferenceIncident&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_IncidentData_TrackedPreferenceIncident& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_IncidentData_TrackedPreferenceIncident* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_IncidentData_TrackedPreferenceIncident*>(
               &_ClientIncidentReport_IncidentData_TrackedPreferenceIncident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ClientIncidentReport_IncidentData_TrackedPreferenceIncident& a, ClientIncidentReport_IncidentData_TrackedPreferenceIncident& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_IncidentData_TrackedPreferenceIncident* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_IncidentData_TrackedPreferenceIncident* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_IncidentData_TrackedPreferenceIncident* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_IncidentData_TrackedPreferenceIncident>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_IncidentData_TrackedPreferenceIncident& from);
  void MergeFrom(const ClientIncidentReport_IncidentData_TrackedPreferenceIncident& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_IncidentData_TrackedPreferenceIncident* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident";
  }
  protected:
  explicit ClientIncidentReport_IncidentData_TrackedPreferenceIncident(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ValueState;
  static constexpr ValueState UNKNOWN =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_UNKNOWN;
  static constexpr ValueState CLEARED =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_CLEARED;
  static constexpr ValueState WEAK_LEGACY_OBSOLETE =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_WEAK_LEGACY_OBSOLETE;
  static constexpr ValueState CHANGED =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_CHANGED;
  static constexpr ValueState UNTRUSTED_UNKNOWN_VALUE =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_UNTRUSTED_UNKNOWN_VALUE;
  static constexpr ValueState BYPASS_CLEARED =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_BYPASS_CLEARED;
  static constexpr ValueState BYPASS_CHANGED =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_BYPASS_CHANGED;
  static inline bool ValueState_IsValid(int value) {
    return ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_IsValid(value);
  }
  static constexpr ValueState ValueState_MIN =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_ValueState_MIN;
  static constexpr ValueState ValueState_MAX =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_ValueState_MAX;
  static constexpr int ValueState_ARRAYSIZE =
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_ValueState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ValueState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueState_Name.");
    return ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Name(enum_t_value);
  }
  static inline bool ValueState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ValueState* value) {
    return ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSplitKeyFieldNumber = 3,
    kPathFieldNumber = 1,
    kAtomicValueFieldNumber = 2,
    kValueStateFieldNumber = 4,
  };
  // repeated string split_key = 3;
  int split_key_size() const;
  private:
  int _internal_split_key_size() const;
  public:
  void clear_split_key();
  const std::string& split_key(int index) const;
  std::string* mutable_split_key(int index);
  void set_split_key(int index, const std::string& value);
  void set_split_key(int index, std::string&& value);
  void set_split_key(int index, const char* value);
  void set_split_key(int index, const char* value, size_t size);
  std::string* add_split_key();
  void add_split_key(const std::string& value);
  void add_split_key(std::string&& value);
  void add_split_key(const char* value);
  void add_split_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& split_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_split_key();
  private:
  const std::string& _internal_split_key(int index) const;
  std::string* _internal_add_split_key();
  public:

  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string atomic_value = 2;
  bool has_atomic_value() const;
  private:
  bool _internal_has_atomic_value() const;
  public:
  void clear_atomic_value();
  const std::string& atomic_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_atomic_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_atomic_value();
  PROTOBUF_NODISCARD std::string* release_atomic_value();
  void set_allocated_atomic_value(std::string* atomic_value);
  private:
  const std::string& _internal_atomic_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_atomic_value(const std::string& value);
  std::string* _internal_mutable_atomic_value();
  public:

  // optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.ValueState value_state = 4;
  bool has_value_state() const;
  private:
  bool _internal_has_value_state() const;
  public:
  void clear_value_state();
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState value_state() const;
  void set_value_state(::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState value);
  private:
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState _internal_value_state() const;
  void _internal_set_value_state(::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> split_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atomic_value_;
  int value_state_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile) */ {
 public:
  inline ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile() : ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile(nullptr) {}
  ~ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& from);
  ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile&& from) noexcept
    : ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& operator=(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& operator=(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile*>(
               &_ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& a, ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& from);
  void MergeFrom(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile";
  }
  protected:
  explicit ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePathFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kImageHeadersFieldNumber = 3,
  };
  // optional string relative_path = 1;
  bool has_relative_path() const;
  private:
  bool _internal_has_relative_path() const;
  public:
  void clear_relative_path();
  const std::string& relative_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relative_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relative_path();
  PROTOBUF_NODISCARD std::string* release_relative_path();
  void set_allocated_relative_path(std::string* relative_path);
  private:
  const std::string& _internal_relative_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_path(const std::string& value);
  std::string* _internal_mutable_relative_path();
  public:

  // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo& signature() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_SignatureInfo* release_signature();
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* mutable_signature();
  void set_allocated_signature(::safe_browsing::ClientDownloadRequest_SignatureInfo* signature);
  private:
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo& _internal_signature() const;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature);
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* unsafe_arena_release_signature();

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
  bool has_image_headers() const;
  private:
  bool _internal_has_image_headers() const;
  public:
  void clear_image_headers();
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_ImageHeaders* release_image_headers();
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* mutable_image_headers();
  void set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  private:
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& _internal_image_headers() const;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _internal_mutable_image_headers();
  public:
  void unsafe_arena_set_allocated_image_headers(
      ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* unsafe_arena_release_image_headers();

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_path_;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature_;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_IncidentData_BinaryIntegrityIncident final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident) */ {
 public:
  inline ClientIncidentReport_IncidentData_BinaryIntegrityIncident() : ClientIncidentReport_IncidentData_BinaryIntegrityIncident(nullptr) {}
  ~ClientIncidentReport_IncidentData_BinaryIntegrityIncident() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_BinaryIntegrityIncident(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_IncidentData_BinaryIntegrityIncident(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident& from);
  ClientIncidentReport_IncidentData_BinaryIntegrityIncident(ClientIncidentReport_IncidentData_BinaryIntegrityIncident&& from) noexcept
    : ClientIncidentReport_IncidentData_BinaryIntegrityIncident() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_IncidentData_BinaryIntegrityIncident& operator=(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_IncidentData_BinaryIntegrityIncident& operator=(ClientIncidentReport_IncidentData_BinaryIntegrityIncident&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_IncidentData_BinaryIntegrityIncident& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_IncidentData_BinaryIntegrityIncident* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_IncidentData_BinaryIntegrityIncident*>(
               &_ClientIncidentReport_IncidentData_BinaryIntegrityIncident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident& a, ClientIncidentReport_IncidentData_BinaryIntegrityIncident& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_IncidentData_BinaryIntegrityIncident* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_IncidentData_BinaryIntegrityIncident>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident& from);
  void MergeFrom(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident";
  }
  protected:
  explicit ClientIncidentReport_IncidentData_BinaryIntegrityIncident(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile ContainedFile;

  // accessors -------------------------------------------------------

  enum : int {
    kContainedFileFieldNumber = 5,
    kFileBasenameFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kImageHeadersFieldNumber = 3,
    kSecErrorFieldNumber = 4,
  };
  // repeated .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile contained_file = 5;
  int contained_file_size() const;
  private:
  int _internal_contained_file_size() const;
  public:
  void clear_contained_file();
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* mutable_contained_file(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile >*
      mutable_contained_file();
  private:
  const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& _internal_contained_file(int index) const;
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* _internal_add_contained_file();
  public:
  const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& contained_file(int index) const;
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* add_contained_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile >&
      contained_file() const;

  // optional string file_basename = 1;
  bool has_file_basename() const;
  private:
  bool _internal_has_file_basename() const;
  public:
  void clear_file_basename();
  const std::string& file_basename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_basename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_basename();
  PROTOBUF_NODISCARD std::string* release_file_basename();
  void set_allocated_file_basename(std::string* file_basename);
  private:
  const std::string& _internal_file_basename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_basename(const std::string& value);
  std::string* _internal_mutable_file_basename();
  public:

  // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo& signature() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_SignatureInfo* release_signature();
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* mutable_signature();
  void set_allocated_signature(::safe_browsing::ClientDownloadRequest_SignatureInfo* signature);
  private:
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo& _internal_signature() const;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature);
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* unsafe_arena_release_signature();

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
  bool has_image_headers() const;
  private:
  bool _internal_has_image_headers() const;
  public:
  void clear_image_headers();
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_ImageHeaders* release_image_headers();
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* mutable_image_headers();
  void set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  private:
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& _internal_image_headers() const;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _internal_mutable_image_headers();
  public:
  void unsafe_arena_set_allocated_image_headers(
      ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* unsafe_arena_release_image_headers();

  // optional int32 sec_error = 4;
  bool has_sec_error() const;
  private:
  bool _internal_has_sec_error() const;
  public:
  void clear_sec_error();
  int32_t sec_error() const;
  void set_sec_error(int32_t value);
  private:
  int32_t _internal_sec_error() const;
  void _internal_set_sec_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile > contained_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_basename_;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature_;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers_;
  int32_t sec_error_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_IncidentData_ResourceRequestIncident final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident) */ {
 public:
  inline ClientIncidentReport_IncidentData_ResourceRequestIncident() : ClientIncidentReport_IncidentData_ResourceRequestIncident(nullptr) {}
  ~ClientIncidentReport_IncidentData_ResourceRequestIncident() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_ResourceRequestIncident(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_IncidentData_ResourceRequestIncident(const ClientIncidentReport_IncidentData_ResourceRequestIncident& from);
  ClientIncidentReport_IncidentData_ResourceRequestIncident(ClientIncidentReport_IncidentData_ResourceRequestIncident&& from) noexcept
    : ClientIncidentReport_IncidentData_ResourceRequestIncident() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_IncidentData_ResourceRequestIncident& operator=(const ClientIncidentReport_IncidentData_ResourceRequestIncident& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_IncidentData_ResourceRequestIncident& operator=(ClientIncidentReport_IncidentData_ResourceRequestIncident&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_IncidentData_ResourceRequestIncident& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_IncidentData_ResourceRequestIncident* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_IncidentData_ResourceRequestIncident*>(
               &_ClientIncidentReport_IncidentData_ResourceRequestIncident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ClientIncidentReport_IncidentData_ResourceRequestIncident& a, ClientIncidentReport_IncidentData_ResourceRequestIncident& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_IncidentData_ResourceRequestIncident* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_IncidentData_ResourceRequestIncident* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_IncidentData_ResourceRequestIncident* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_IncidentData_ResourceRequestIncident>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_IncidentData_ResourceRequestIncident& from);
  void MergeFrom(const ClientIncidentReport_IncidentData_ResourceRequestIncident& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_IncidentData_ResourceRequestIncident* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident";
  }
  protected:
  explicit ClientIncidentReport_IncidentData_ResourceRequestIncident(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_IncidentData_ResourceRequestIncident_Type Type;
  static constexpr Type UNKNOWN =
    ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_UNKNOWN;
  static constexpr Type TYPE_PATTERN =
    ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_TYPE_PATTERN;
  static inline bool Type_IsValid(int value) {
    return ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFieldNumber = 1,
    kOriginFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional bytes digest = 1;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional string origin = 2;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.Type type = 3 [default = UNKNOWN];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type type() const;
  void set_type(::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type value);
  private:
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type _internal_type() const;
  void _internal_set_type(::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  int type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_IncidentData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.IncidentData) */ {
 public:
  inline ClientIncidentReport_IncidentData() : ClientIncidentReport_IncidentData(nullptr) {}
  ~ClientIncidentReport_IncidentData() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_IncidentData(const ClientIncidentReport_IncidentData& from);
  ClientIncidentReport_IncidentData(ClientIncidentReport_IncidentData&& from) noexcept
    : ClientIncidentReport_IncidentData() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_IncidentData& operator=(const ClientIncidentReport_IncidentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_IncidentData& operator=(ClientIncidentReport_IncidentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_IncidentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_IncidentData* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_IncidentData*>(
               &_ClientIncidentReport_IncidentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ClientIncidentReport_IncidentData& a, ClientIncidentReport_IncidentData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_IncidentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_IncidentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_IncidentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_IncidentData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_IncidentData& from);
  void MergeFrom(const ClientIncidentReport_IncidentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_IncidentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.IncidentData";
  }
  protected:
  explicit ClientIncidentReport_IncidentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_IncidentData_TrackedPreferenceIncident TrackedPreferenceIncident;
  typedef ClientIncidentReport_IncidentData_BinaryIntegrityIncident BinaryIntegrityIncident;
  typedef ClientIncidentReport_IncidentData_ResourceRequestIncident ResourceRequestIncident;

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedPreferenceFieldNumber = 2,
    kBinaryIntegrityFieldNumber = 3,
    kResourceRequestFieldNumber = 7,
    kIncidentTimeMsecFieldNumber = 1,
  };
  // optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident tracked_preference = 2;
  bool has_tracked_preference() const;
  private:
  bool _internal_has_tracked_preference() const;
  public:
  void clear_tracked_preference();
  const ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident& tracked_preference() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* release_tracked_preference();
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* mutable_tracked_preference();
  void set_allocated_tracked_preference(::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* tracked_preference);
  private:
  const ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident& _internal_tracked_preference() const;
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* _internal_mutable_tracked_preference();
  public:
  void unsafe_arena_set_allocated_tracked_preference(
      ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* tracked_preference);
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* unsafe_arena_release_tracked_preference();

  // optional .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident binary_integrity = 3;
  bool has_binary_integrity() const;
  private:
  bool _internal_has_binary_integrity() const;
  public:
  void clear_binary_integrity();
  const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident& binary_integrity() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* release_binary_integrity();
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* mutable_binary_integrity();
  void set_allocated_binary_integrity(::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* binary_integrity);
  private:
  const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident& _internal_binary_integrity() const;
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* _internal_mutable_binary_integrity();
  public:
  void unsafe_arena_set_allocated_binary_integrity(
      ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* binary_integrity);
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* unsafe_arena_release_binary_integrity();

  // optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident resource_request = 7;
  bool has_resource_request() const;
  private:
  bool _internal_has_resource_request() const;
  public:
  void clear_resource_request();
  const ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident& resource_request() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* release_resource_request();
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* mutable_resource_request();
  void set_allocated_resource_request(::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* resource_request);
  private:
  const ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident& _internal_resource_request() const;
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* _internal_mutable_resource_request();
  public:
  void unsafe_arena_set_allocated_resource_request(
      ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* resource_request);
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* unsafe_arena_release_resource_request();

  // optional int64 incident_time_msec = 1;
  bool has_incident_time_msec() const;
  private:
  bool _internal_has_incident_time_msec() const;
  public:
  void clear_incident_time_msec();
  int64_t incident_time_msec() const;
  void set_incident_time_msec(int64_t value);
  private:
  int64_t _internal_incident_time_msec() const;
  void _internal_set_incident_time_msec(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.IncidentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* tracked_preference_;
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* binary_integrity_;
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* resource_request_;
  int64_t incident_time_msec_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_DownloadDetails final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.DownloadDetails) */ {
 public:
  inline ClientIncidentReport_DownloadDetails() : ClientIncidentReport_DownloadDetails(nullptr) {}
  ~ClientIncidentReport_DownloadDetails() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_DownloadDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_DownloadDetails(const ClientIncidentReport_DownloadDetails& from);
  ClientIncidentReport_DownloadDetails(ClientIncidentReport_DownloadDetails&& from) noexcept
    : ClientIncidentReport_DownloadDetails() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_DownloadDetails& operator=(const ClientIncidentReport_DownloadDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_DownloadDetails& operator=(ClientIncidentReport_DownloadDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_DownloadDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_DownloadDetails* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_DownloadDetails*>(
               &_ClientIncidentReport_DownloadDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ClientIncidentReport_DownloadDetails& a, ClientIncidentReport_DownloadDetails& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_DownloadDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_DownloadDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_DownloadDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_DownloadDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_DownloadDetails& from);
  void MergeFrom(const ClientIncidentReport_DownloadDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_DownloadDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.DownloadDetails";
  }
  protected:
  explicit ClientIncidentReport_DownloadDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kDownloadFieldNumber = 2,
    kDownloadTimeMsecFieldNumber = 3,
    kOpenTimeMsecFieldNumber = 4,
  };
  // optional bytes token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional .safe_browsing.ClientDownloadRequest download = 2;
  bool has_download() const;
  private:
  bool _internal_has_download() const;
  public:
  void clear_download();
  const ::safe_browsing::ClientDownloadRequest& download() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest* release_download();
  ::safe_browsing::ClientDownloadRequest* mutable_download();
  void set_allocated_download(::safe_browsing::ClientDownloadRequest* download);
  private:
  const ::safe_browsing::ClientDownloadRequest& _internal_download() const;
  ::safe_browsing::ClientDownloadRequest* _internal_mutable_download();
  public:
  void unsafe_arena_set_allocated_download(
      ::safe_browsing::ClientDownloadRequest* download);
  ::safe_browsing::ClientDownloadRequest* unsafe_arena_release_download();

  // optional int64 download_time_msec = 3;
  bool has_download_time_msec() const;
  private:
  bool _internal_has_download_time_msec() const;
  public:
  void clear_download_time_msec();
  int64_t download_time_msec() const;
  void set_download_time_msec(int64_t value);
  private:
  int64_t _internal_download_time_msec() const;
  void _internal_set_download_time_msec(int64_t value);
  public:

  // optional int64 open_time_msec = 4;
  bool has_open_time_msec() const;
  private:
  bool _internal_has_open_time_msec() const;
  public:
  void clear_open_time_msec();
  int64_t open_time_msec() const;
  void set_open_time_msec(int64_t value);
  private:
  int64_t _internal_open_time_msec() const;
  void _internal_set_open_time_msec(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.DownloadDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::safe_browsing::ClientDownloadRequest* download_;
  int64_t download_time_msec_;
  int64_t open_time_msec_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_OS_RegistryValue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_OS_RegistryValue() : ClientIncidentReport_EnvironmentData_OS_RegistryValue(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_OS_RegistryValue() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OS_RegistryValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_OS_RegistryValue(const ClientIncidentReport_EnvironmentData_OS_RegistryValue& from);
  ClientIncidentReport_EnvironmentData_OS_RegistryValue(ClientIncidentReport_EnvironmentData_OS_RegistryValue&& from) noexcept
    : ClientIncidentReport_EnvironmentData_OS_RegistryValue() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_OS_RegistryValue& operator=(const ClientIncidentReport_EnvironmentData_OS_RegistryValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_OS_RegistryValue& operator=(ClientIncidentReport_EnvironmentData_OS_RegistryValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_OS_RegistryValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_OS_RegistryValue* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_OS_RegistryValue*>(
               &_ClientIncidentReport_EnvironmentData_OS_RegistryValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ClientIncidentReport_EnvironmentData_OS_RegistryValue& a, ClientIncidentReport_EnvironmentData_OS_RegistryValue& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_OS_RegistryValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_OS_RegistryValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_OS_RegistryValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_OS_RegistryValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_OS_RegistryValue& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_OS_RegistryValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_OS_RegistryValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_OS_RegistryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_OS_RegistryKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_OS_RegistryKey() : ClientIncidentReport_EnvironmentData_OS_RegistryKey(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_OS_RegistryKey() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OS_RegistryKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_OS_RegistryKey(const ClientIncidentReport_EnvironmentData_OS_RegistryKey& from);
  ClientIncidentReport_EnvironmentData_OS_RegistryKey(ClientIncidentReport_EnvironmentData_OS_RegistryKey&& from) noexcept
    : ClientIncidentReport_EnvironmentData_OS_RegistryKey() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_OS_RegistryKey& operator=(const ClientIncidentReport_EnvironmentData_OS_RegistryKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_OS_RegistryKey& operator=(ClientIncidentReport_EnvironmentData_OS_RegistryKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_OS_RegistryKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_OS_RegistryKey* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_OS_RegistryKey*>(
               &_ClientIncidentReport_EnvironmentData_OS_RegistryKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ClientIncidentReport_EnvironmentData_OS_RegistryKey& a, ClientIncidentReport_EnvironmentData_OS_RegistryKey& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_OS_RegistryKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_OS_RegistryKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_OS_RegistryKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_OS_RegistryKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_OS_RegistryKey& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_OS_RegistryKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_OS_RegistryKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_OS_RegistryKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue >*
      mutable_value();
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue& _internal_value(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue* _internal_add_value();
  public:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue& value(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue >&
      value() const;

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey key = 3;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* mutable_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >*
      mutable_key();
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey& _internal_key(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* _internal_add_key();
  public:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey& key(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* add_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >&
      key() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue > value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey > key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_OS final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.OS) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_OS() : ClientIncidentReport_EnvironmentData_OS(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_OS() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_OS(const ClientIncidentReport_EnvironmentData_OS& from);
  ClientIncidentReport_EnvironmentData_OS(ClientIncidentReport_EnvironmentData_OS&& from) noexcept
    : ClientIncidentReport_EnvironmentData_OS() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_OS& operator=(const ClientIncidentReport_EnvironmentData_OS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_OS& operator=(ClientIncidentReport_EnvironmentData_OS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_OS& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_OS* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_OS*>(
               &_ClientIncidentReport_EnvironmentData_OS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ClientIncidentReport_EnvironmentData_OS& a, ClientIncidentReport_EnvironmentData_OS& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_OS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_OS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_OS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_OS>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_OS& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_OS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_OS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.OS";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_OS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_EnvironmentData_OS_RegistryValue RegistryValue;
  typedef ClientIncidentReport_EnvironmentData_OS_RegistryKey RegistryKey;

  // accessors -------------------------------------------------------

  enum : int {
    kRegistryKeyFieldNumber = 3,
    kOsNameFieldNumber = 1,
    kOsVersionFieldNumber = 2,
    kIsEnrolledToDomainFieldNumber = 4,
  };
  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey registry_key = 3;
  int registry_key_size() const;
  private:
  int _internal_registry_key_size() const;
  public:
  void clear_registry_key();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* mutable_registry_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >*
      mutable_registry_key();
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey& _internal_registry_key(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* _internal_add_registry_key();
  public:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey& registry_key(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* add_registry_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >&
      registry_key() const;

  // optional string os_name = 1;
  bool has_os_name() const;
  private:
  bool _internal_has_os_name() const;
  public:
  void clear_os_name();
  const std::string& os_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_name();
  PROTOBUF_NODISCARD std::string* release_os_name();
  void set_allocated_os_name(std::string* os_name);
  private:
  const std::string& _internal_os_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_name(const std::string& value);
  std::string* _internal_mutable_os_name();
  public:

  // optional string os_version = 2;
  bool has_os_version() const;
  private:
  bool _internal_has_os_version() const;
  public:
  void clear_os_version();
  const std::string& os_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_version();
  PROTOBUF_NODISCARD std::string* release_os_version();
  void set_allocated_os_version(std::string* os_version);
  private:
  const std::string& _internal_os_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_version(const std::string& value);
  std::string* _internal_mutable_os_version();
  public:

  // optional bool is_enrolled_to_domain = 4;
  bool has_is_enrolled_to_domain() const;
  private:
  bool _internal_has_is_enrolled_to_domain() const;
  public:
  void clear_is_enrolled_to_domain();
  bool is_enrolled_to_domain() const;
  void set_is_enrolled_to_domain(bool value);
  private:
  bool _internal_is_enrolled_to_domain() const;
  void _internal_set_is_enrolled_to_domain(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey > registry_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_version_;
  bool is_enrolled_to_domain_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_Machine final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.Machine) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_Machine() : ClientIncidentReport_EnvironmentData_Machine(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_Machine() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Machine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_Machine(const ClientIncidentReport_EnvironmentData_Machine& from);
  ClientIncidentReport_EnvironmentData_Machine(ClientIncidentReport_EnvironmentData_Machine&& from) noexcept
    : ClientIncidentReport_EnvironmentData_Machine() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_Machine& operator=(const ClientIncidentReport_EnvironmentData_Machine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_Machine& operator=(ClientIncidentReport_EnvironmentData_Machine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_Machine& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_Machine* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_Machine*>(
               &_ClientIncidentReport_EnvironmentData_Machine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ClientIncidentReport_EnvironmentData_Machine& a, ClientIncidentReport_EnvironmentData_Machine& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_Machine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_Machine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_Machine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_Machine>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_Machine& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_Machine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_Machine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.Machine";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_Machine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuArchitectureFieldNumber = 1,
    kCpuVendorFieldNumber = 2,
    kCpuidFieldNumber = 3,
  };
  // optional string cpu_architecture = 1;
  bool has_cpu_architecture() const;
  private:
  bool _internal_has_cpu_architecture() const;
  public:
  void clear_cpu_architecture();
  const std::string& cpu_architecture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu_architecture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu_architecture();
  PROTOBUF_NODISCARD std::string* release_cpu_architecture();
  void set_allocated_cpu_architecture(std::string* cpu_architecture);
  private:
  const std::string& _internal_cpu_architecture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu_architecture(const std::string& value);
  std::string* _internal_mutable_cpu_architecture();
  public:

  // optional string cpu_vendor = 2;
  bool has_cpu_vendor() const;
  private:
  bool _internal_has_cpu_vendor() const;
  public:
  void clear_cpu_vendor();
  const std::string& cpu_vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu_vendor();
  PROTOBUF_NODISCARD std::string* release_cpu_vendor();
  void set_allocated_cpu_vendor(std::string* cpu_vendor);
  private:
  const std::string& _internal_cpu_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu_vendor(const std::string& value);
  std::string* _internal_mutable_cpu_vendor();
  public:

  // optional uint32 cpuid = 3;
  bool has_cpuid() const;
  private:
  bool _internal_has_cpuid() const;
  public:
  void clear_cpuid();
  uint32_t cpuid() const;
  void set_cpuid(uint32_t value);
  private:
  uint32_t _internal_cpuid() const;
  void _internal_set_cpuid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_architecture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_vendor_;
  uint32_t cpuid_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_Process_Patch final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_Process_Patch() : ClientIncidentReport_EnvironmentData_Process_Patch(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_Process_Patch() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_Patch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_Process_Patch(const ClientIncidentReport_EnvironmentData_Process_Patch& from);
  ClientIncidentReport_EnvironmentData_Process_Patch(ClientIncidentReport_EnvironmentData_Process_Patch&& from) noexcept
    : ClientIncidentReport_EnvironmentData_Process_Patch() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_Process_Patch& operator=(const ClientIncidentReport_EnvironmentData_Process_Patch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_Process_Patch& operator=(ClientIncidentReport_EnvironmentData_Process_Patch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_Process_Patch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_Process_Patch* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_Process_Patch*>(
               &_ClientIncidentReport_EnvironmentData_Process_Patch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ClientIncidentReport_EnvironmentData_Process_Patch& a, ClientIncidentReport_EnvironmentData_Process_Patch& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_Process_Patch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_Process_Patch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_Process_Patch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_Process_Patch>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_Process_Patch& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_Process_Patch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_Process_Patch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_Process_Patch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionFieldNumber = 1,
    kTargetDllFieldNumber = 2,
  };
  // optional string function = 1;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // optional string target_dll = 2;
  bool has_target_dll() const;
  private:
  bool _internal_has_target_dll() const;
  public:
  void clear_target_dll();
  const std::string& target_dll() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_dll(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_dll();
  PROTOBUF_NODISCARD std::string* release_target_dll();
  void set_allocated_target_dll(std::string* target_dll);
  private:
  const std::string& _internal_target_dll() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_dll(const std::string& value);
  std::string* _internal_mutable_target_dll();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_dll_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_Process_NetworkProvider final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_Process_NetworkProvider() : ClientIncidentReport_EnvironmentData_Process_NetworkProvider(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_Process_NetworkProvider() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_NetworkProvider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_Process_NetworkProvider(const ClientIncidentReport_EnvironmentData_Process_NetworkProvider& from);
  ClientIncidentReport_EnvironmentData_Process_NetworkProvider(ClientIncidentReport_EnvironmentData_Process_NetworkProvider&& from) noexcept
    : ClientIncidentReport_EnvironmentData_Process_NetworkProvider() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_Process_NetworkProvider& operator=(const ClientIncidentReport_EnvironmentData_Process_NetworkProvider& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_Process_NetworkProvider& operator=(ClientIncidentReport_EnvironmentData_Process_NetworkProvider&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_Process_NetworkProvider& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_Process_NetworkProvider* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_Process_NetworkProvider*>(
               &_ClientIncidentReport_EnvironmentData_Process_NetworkProvider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ClientIncidentReport_EnvironmentData_Process_NetworkProvider& a, ClientIncidentReport_EnvironmentData_Process_NetworkProvider& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_Process_NetworkProvider* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_Process_NetworkProvider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_Process_NetworkProvider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_Process_NetworkProvider>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_Process_NetworkProvider& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_Process_NetworkProvider& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_Process_NetworkProvider* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_Process_NetworkProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_Process_Dll final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_Process_Dll() : ClientIncidentReport_EnvironmentData_Process_Dll(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_Process_Dll() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_Dll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_Process_Dll(const ClientIncidentReport_EnvironmentData_Process_Dll& from);
  ClientIncidentReport_EnvironmentData_Process_Dll(ClientIncidentReport_EnvironmentData_Process_Dll&& from) noexcept
    : ClientIncidentReport_EnvironmentData_Process_Dll() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_Process_Dll& operator=(const ClientIncidentReport_EnvironmentData_Process_Dll& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_Process_Dll& operator=(ClientIncidentReport_EnvironmentData_Process_Dll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_Process_Dll& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_Process_Dll* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_Process_Dll*>(
               &_ClientIncidentReport_EnvironmentData_Process_Dll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ClientIncidentReport_EnvironmentData_Process_Dll& a, ClientIncidentReport_EnvironmentData_Process_Dll& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_Process_Dll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_Process_Dll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_Process_Dll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_Process_Dll>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_Process_Dll& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_Process_Dll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_Process_Dll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_Process_Dll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_EnvironmentData_Process_Dll_Feature Feature;
  static constexpr Feature UNKNOWN =
    ClientIncidentReport_EnvironmentData_Process_Dll_Feature_UNKNOWN;
  static constexpr Feature LSP =
    ClientIncidentReport_EnvironmentData_Process_Dll_Feature_LSP;
  static inline bool Feature_IsValid(int value) {
    return ClientIncidentReport_EnvironmentData_Process_Dll_Feature_IsValid(value);
  }
  static constexpr Feature Feature_MIN =
    ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Feature_MIN;
  static constexpr Feature Feature_MAX =
    ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Feature_MAX;
  static constexpr int Feature_ARRAYSIZE =
    ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Feature_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Feature_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Feature>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Feature_Name.");
    return ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Name(enum_t_value);
  }
  static inline bool Feature_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Feature* value) {
    return ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 4,
    kPathFieldNumber = 1,
    kImageHeadersFieldNumber = 5,
    kBaseAddressFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.Feature feature = 4;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  private:
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature _internal_feature(int index) const;
  void _internal_add_feature(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_feature();
  public:
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature feature(int index) const;
  void set_feature(int index, ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature value);
  void add_feature(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_feature();

  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 5;
  bool has_image_headers() const;
  private:
  bool _internal_has_image_headers() const;
  public:
  void clear_image_headers();
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest_ImageHeaders* release_image_headers();
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* mutable_image_headers();
  void set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  private:
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders& _internal_image_headers() const;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _internal_mutable_image_headers();
  public:
  void unsafe_arena_set_allocated_image_headers(
      ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers);
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* unsafe_arena_release_image_headers();

  // optional uint64 base_address = 2;
  bool has_base_address() const;
  private:
  bool _internal_has_base_address() const;
  public:
  void clear_base_address();
  uint64_t base_address() const;
  void set_base_address(uint64_t value);
  private:
  uint64_t _internal_base_address() const;
  void _internal_set_base_address(uint64_t value);
  public:

  // optional uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers_;
  uint64_t base_address_;
  uint32_t length_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification() : ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification(const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& from);
  ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification&& from) noexcept
    : ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& operator=(const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& operator=(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification*>(
               &_ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& a, ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModifiedBytesFieldNumber = 3,
    kExportNameFieldNumber = 4,
    kFileOffsetFieldNumber = 1,
    kByteCountFieldNumber = 2,
  };
  // optional bytes modified_bytes = 3;
  bool has_modified_bytes() const;
  private:
  bool _internal_has_modified_bytes() const;
  public:
  void clear_modified_bytes();
  const std::string& modified_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modified_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modified_bytes();
  PROTOBUF_NODISCARD std::string* release_modified_bytes();
  void set_allocated_modified_bytes(std::string* modified_bytes);
  private:
  const std::string& _internal_modified_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modified_bytes(const std::string& value);
  std::string* _internal_mutable_modified_bytes();
  public:

  // optional string export_name = 4;
  bool has_export_name() const;
  private:
  bool _internal_has_export_name() const;
  public:
  void clear_export_name();
  const std::string& export_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_export_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_export_name();
  PROTOBUF_NODISCARD std::string* release_export_name();
  void set_allocated_export_name(std::string* export_name);
  private:
  const std::string& _internal_export_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_export_name(const std::string& value);
  std::string* _internal_mutable_export_name();
  public:

  // optional uint32 file_offset = 1;
  bool has_file_offset() const;
  private:
  bool _internal_has_file_offset() const;
  public:
  void clear_file_offset();
  uint32_t file_offset() const;
  void set_file_offset(uint32_t value);
  private:
  uint32_t _internal_file_offset() const;
  void _internal_set_file_offset(uint32_t value);
  public:

  // optional int32 byte_count = 2;
  bool has_byte_count() const;
  private:
  bool _internal_has_byte_count() const;
  public:
  void clear_byte_count();
  int32_t byte_count() const;
  void set_byte_count(int32_t value);
  private:
  int32_t _internal_byte_count() const;
  void _internal_set_byte_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modified_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr export_name_;
  uint32_t file_offset_;
  int32_t byte_count_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_Process_ModuleState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_Process_ModuleState() : ClientIncidentReport_EnvironmentData_Process_ModuleState(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_Process_ModuleState() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_ModuleState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_Process_ModuleState(const ClientIncidentReport_EnvironmentData_Process_ModuleState& from);
  ClientIncidentReport_EnvironmentData_Process_ModuleState(ClientIncidentReport_EnvironmentData_Process_ModuleState&& from) noexcept
    : ClientIncidentReport_EnvironmentData_Process_ModuleState() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_Process_ModuleState& operator=(const ClientIncidentReport_EnvironmentData_Process_ModuleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_Process_ModuleState& operator=(ClientIncidentReport_EnvironmentData_Process_ModuleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_Process_ModuleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_Process_ModuleState* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_Process_ModuleState*>(
               &_ClientIncidentReport_EnvironmentData_Process_ModuleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ClientIncidentReport_EnvironmentData_Process_ModuleState& a, ClientIncidentReport_EnvironmentData_Process_ModuleState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_Process_ModuleState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_Process_ModuleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_Process_ModuleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_Process_ModuleState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_Process_ModuleState& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_Process_ModuleState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_Process_ModuleState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_Process_ModuleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification Modification;

  typedef ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ModifiedState;
  static constexpr ModifiedState UNKNOWN =
    ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_UNKNOWN;
  static constexpr ModifiedState MODULE_STATE_UNKNOWN =
    ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_MODULE_STATE_UNKNOWN;
  static constexpr ModifiedState MODULE_STATE_UNMODIFIED =
    ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_MODULE_STATE_UNMODIFIED;
  static constexpr ModifiedState MODULE_STATE_MODIFIED =
    ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_MODULE_STATE_MODIFIED;
  static inline bool ModifiedState_IsValid(int value) {
    return ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_IsValid(value);
  }
  static constexpr ModifiedState ModifiedState_MIN =
    ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_ModifiedState_MIN;
  static constexpr ModifiedState ModifiedState_MAX =
    ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_ModifiedState_MAX;
  static constexpr int ModifiedState_ARRAYSIZE =
    ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_ModifiedState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ModifiedState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModifiedState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModifiedState_Name.");
    return ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Name(enum_t_value);
  }
  static inline bool ModifiedState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModifiedState* value) {
    return ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEModifiedExportFieldNumber = 3,
    kModificationFieldNumber = 4,
    kNameFieldNumber = 1,
    kModifiedStateFieldNumber = 2,
  };
  // repeated string OBSOLETE_modified_export = 3;
  int obsolete_modified_export_size() const;
  private:
  int _internal_obsolete_modified_export_size() const;
  public:
  void clear_obsolete_modified_export();
  const std::string& obsolete_modified_export(int index) const;
  std::string* mutable_obsolete_modified_export(int index);
  void set_obsolete_modified_export(int index, const std::string& value);
  void set_obsolete_modified_export(int index, std::string&& value);
  void set_obsolete_modified_export(int index, const char* value);
  void set_obsolete_modified_export(int index, const char* value, size_t size);
  std::string* add_obsolete_modified_export();
  void add_obsolete_modified_export(const std::string& value);
  void add_obsolete_modified_export(std::string&& value);
  void add_obsolete_modified_export(const char* value);
  void add_obsolete_modified_export(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& obsolete_modified_export() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_obsolete_modified_export();
  private:
  const std::string& _internal_obsolete_modified_export(int index) const;
  std::string* _internal_add_obsolete_modified_export();
  public:

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification modification = 4;
  int modification_size() const;
  private:
  int _internal_modification_size() const;
  public:
  void clear_modification();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* mutable_modification(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification >*
      mutable_modification();
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& _internal_modification(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* _internal_add_modification();
  public:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& modification(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* add_modification();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification >&
      modification() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.ModifiedState modified_state = 2;
  bool has_modified_state() const;
  private:
  bool _internal_has_modified_state() const;
  public:
  void clear_modified_state();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState modified_state() const;
  void set_modified_state(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState value);
  private:
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState _internal_modified_state() const;
  void _internal_set_modified_state(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> obsolete_modified_export_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification > modification_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int modified_state_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData_Process final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData.Process) */ {
 public:
  inline ClientIncidentReport_EnvironmentData_Process() : ClientIncidentReport_EnvironmentData_Process(nullptr) {}
  ~ClientIncidentReport_EnvironmentData_Process() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData_Process(const ClientIncidentReport_EnvironmentData_Process& from);
  ClientIncidentReport_EnvironmentData_Process(ClientIncidentReport_EnvironmentData_Process&& from) noexcept
    : ClientIncidentReport_EnvironmentData_Process() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData_Process& operator=(const ClientIncidentReport_EnvironmentData_Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData_Process& operator=(ClientIncidentReport_EnvironmentData_Process&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData_Process& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData_Process* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData_Process*>(
               &_ClientIncidentReport_EnvironmentData_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ClientIncidentReport_EnvironmentData_Process& a, ClientIncidentReport_EnvironmentData_Process& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData_Process* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData_Process* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData_Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData_Process>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData_Process& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData_Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData_Process* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData.Process";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData_Process(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_EnvironmentData_Process_Patch Patch;
  typedef ClientIncidentReport_EnvironmentData_Process_NetworkProvider NetworkProvider;
  typedef ClientIncidentReport_EnvironmentData_Process_Dll Dll;
  typedef ClientIncidentReport_EnvironmentData_Process_ModuleState ModuleState;

  typedef ClientIncidentReport_EnvironmentData_Process_Channel Channel;
  static constexpr Channel CHANNEL_UNKNOWN =
    ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_UNKNOWN;
  static constexpr Channel CHANNEL_CANARY =
    ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_CANARY;
  static constexpr Channel CHANNEL_DEV =
    ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_DEV;
  static constexpr Channel CHANNEL_BETA =
    ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_BETA;
  static constexpr Channel CHANNEL_STABLE =
    ClientIncidentReport_EnvironmentData_Process_Channel_CHANNEL_STABLE;
  static inline bool Channel_IsValid(int value) {
    return ClientIncidentReport_EnvironmentData_Process_Channel_IsValid(value);
  }
  static constexpr Channel Channel_MIN =
    ClientIncidentReport_EnvironmentData_Process_Channel_Channel_MIN;
  static constexpr Channel Channel_MAX =
    ClientIncidentReport_EnvironmentData_Process_Channel_Channel_MAX;
  static constexpr int Channel_ARRAYSIZE =
    ClientIncidentReport_EnvironmentData_Process_Channel_Channel_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Channel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Channel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Channel_Name.");
    return ClientIncidentReport_EnvironmentData_Process_Channel_Name(enum_t_value);
  }
  static inline bool Channel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Channel* value) {
    return ClientIncidentReport_EnvironmentData_Process_Channel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEDllsFieldNumber = 2,
    kPatchesFieldNumber = 3,
    kNetworkProvidersFieldNumber = 4,
    kDllFieldNumber = 9,
    kBlocklistedDllFieldNumber = 10,
    kModuleStateFieldNumber = 11,
    kVersionFieldNumber = 1,
    kUptimeMsecFieldNumber = 6,
    kChromeUpdateChannelFieldNumber = 5,
    kMetricsConsentFieldNumber = 7,
    kOBSOLETEExtendedConsentFieldNumber = 8,
    kOBSOLETEFieldTrialParticipantFieldNumber = 12,
  };
  // repeated string OBSOLETE_dlls = 2;
  int obsolete_dlls_size() const;
  private:
  int _internal_obsolete_dlls_size() const;
  public:
  void clear_obsolete_dlls();
  const std::string& obsolete_dlls(int index) const;
  std::string* mutable_obsolete_dlls(int index);
  void set_obsolete_dlls(int index, const std::string& value);
  void set_obsolete_dlls(int index, std::string&& value);
  void set_obsolete_dlls(int index, const char* value);
  void set_obsolete_dlls(int index, const char* value, size_t size);
  std::string* add_obsolete_dlls();
  void add_obsolete_dlls(const std::string& value);
  void add_obsolete_dlls(std::string&& value);
  void add_obsolete_dlls(const char* value);
  void add_obsolete_dlls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& obsolete_dlls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_obsolete_dlls();
  private:
  const std::string& _internal_obsolete_dlls(int index) const;
  std::string* _internal_add_obsolete_dlls();
  public:

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch patches = 3;
  int patches_size() const;
  private:
  int _internal_patches_size() const;
  public:
  void clear_patches();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch* mutable_patches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch >*
      mutable_patches();
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch& _internal_patches(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch* _internal_add_patches();
  public:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch& patches(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch* add_patches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch >&
      patches() const;

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider network_providers = 4;
  int network_providers_size() const;
  private:
  int _internal_network_providers_size() const;
  public:
  void clear_network_providers();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider* mutable_network_providers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider >*
      mutable_network_providers();
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider& _internal_network_providers(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider* _internal_add_network_providers();
  public:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider& network_providers(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider* add_network_providers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider >&
      network_providers() const;

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll dll = 9;
  int dll_size() const;
  private:
  int _internal_dll_size() const;
  public:
  void clear_dll();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll* mutable_dll(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll >*
      mutable_dll();
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll& _internal_dll(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll* _internal_add_dll();
  public:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll& dll(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll* add_dll();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll >&
      dll() const;

  // repeated string blocklisted_dll = 10;
  int blocklisted_dll_size() const;
  private:
  int _internal_blocklisted_dll_size() const;
  public:
  void clear_blocklisted_dll();
  const std::string& blocklisted_dll(int index) const;
  std::string* mutable_blocklisted_dll(int index);
  void set_blocklisted_dll(int index, const std::string& value);
  void set_blocklisted_dll(int index, std::string&& value);
  void set_blocklisted_dll(int index, const char* value);
  void set_blocklisted_dll(int index, const char* value, size_t size);
  std::string* add_blocklisted_dll();
  void add_blocklisted_dll(const std::string& value);
  void add_blocklisted_dll(std::string&& value);
  void add_blocklisted_dll(const char* value);
  void add_blocklisted_dll(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocklisted_dll() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocklisted_dll();
  private:
  const std::string& _internal_blocklisted_dll(int index) const;
  std::string* _internal_add_blocklisted_dll();
  public:

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState module_state = 11;
  int module_state_size() const;
  private:
  int _internal_module_state_size() const;
  public:
  void clear_module_state();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState* mutable_module_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState >*
      mutable_module_state();
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState& _internal_module_state(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState* _internal_add_module_state();
  public:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState& module_state(int index) const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState* add_module_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState >&
      module_state() const;

  // optional string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional int64 uptime_msec = 6;
  bool has_uptime_msec() const;
  private:
  bool _internal_has_uptime_msec() const;
  public:
  void clear_uptime_msec();
  int64_t uptime_msec() const;
  void set_uptime_msec(int64_t value);
  private:
  int64_t _internal_uptime_msec() const;
  void _internal_set_uptime_msec(int64_t value);
  public:

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Channel chrome_update_channel = 5;
  bool has_chrome_update_channel() const;
  private:
  bool _internal_has_chrome_update_channel() const;
  public:
  void clear_chrome_update_channel();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel chrome_update_channel() const;
  void set_chrome_update_channel(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel value);
  private:
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel _internal_chrome_update_channel() const;
  void _internal_set_chrome_update_channel(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel value);
  public:

  // optional bool metrics_consent = 7;
  bool has_metrics_consent() const;
  private:
  bool _internal_has_metrics_consent() const;
  public:
  void clear_metrics_consent();
  bool metrics_consent() const;
  void set_metrics_consent(bool value);
  private:
  bool _internal_metrics_consent() const;
  void _internal_set_metrics_consent(bool value);
  public:

  // optional bool OBSOLETE_extended_consent = 8;
  bool has_obsolete_extended_consent() const;
  private:
  bool _internal_has_obsolete_extended_consent() const;
  public:
  void clear_obsolete_extended_consent();
  bool obsolete_extended_consent() const;
  void set_obsolete_extended_consent(bool value);
  private:
  bool _internal_obsolete_extended_consent() const;
  void _internal_set_obsolete_extended_consent(bool value);
  public:

  // optional bool OBSOLETE_field_trial_participant = 12;
  bool has_obsolete_field_trial_participant() const;
  private:
  bool _internal_has_obsolete_field_trial_participant() const;
  public:
  void clear_obsolete_field_trial_participant();
  bool obsolete_field_trial_participant() const;
  void set_obsolete_field_trial_participant(bool value);
  private:
  bool _internal_obsolete_field_trial_participant() const;
  void _internal_set_obsolete_field_trial_participant(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> obsolete_dlls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch > patches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider > network_providers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll > dll_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocklisted_dll_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState > module_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  int64_t uptime_msec_;
  int chrome_update_channel_;
  bool metrics_consent_;
  bool obsolete_extended_consent_;
  bool obsolete_field_trial_participant_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_EnvironmentData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.EnvironmentData) */ {
 public:
  inline ClientIncidentReport_EnvironmentData() : ClientIncidentReport_EnvironmentData(nullptr) {}
  ~ClientIncidentReport_EnvironmentData() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_EnvironmentData(const ClientIncidentReport_EnvironmentData& from);
  ClientIncidentReport_EnvironmentData(ClientIncidentReport_EnvironmentData&& from) noexcept
    : ClientIncidentReport_EnvironmentData() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_EnvironmentData& operator=(const ClientIncidentReport_EnvironmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_EnvironmentData& operator=(ClientIncidentReport_EnvironmentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_EnvironmentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_EnvironmentData* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_EnvironmentData*>(
               &_ClientIncidentReport_EnvironmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ClientIncidentReport_EnvironmentData& a, ClientIncidentReport_EnvironmentData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_EnvironmentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_EnvironmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_EnvironmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_EnvironmentData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_EnvironmentData& from);
  void MergeFrom(const ClientIncidentReport_EnvironmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_EnvironmentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.EnvironmentData";
  }
  protected:
  explicit ClientIncidentReport_EnvironmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_EnvironmentData_OS OS;
  typedef ClientIncidentReport_EnvironmentData_Machine Machine;
  typedef ClientIncidentReport_EnvironmentData_Process Process;

  // accessors -------------------------------------------------------

  enum : int {
    kOsFieldNumber = 1,
    kMachineFieldNumber = 2,
    kProcessFieldNumber = 3,
  };
  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.OS os = 1;
  bool has_os() const;
  private:
  bool _internal_has_os() const;
  public:
  void clear_os();
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS& os() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* release_os();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* mutable_os();
  void set_allocated_os(::safe_browsing::ClientIncidentReport_EnvironmentData_OS* os);
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS& _internal_os() const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* _internal_mutable_os();
  public:
  void unsafe_arena_set_allocated_os(
      ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* os);
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* unsafe_arena_release_os();

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Machine machine = 2;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine& machine() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* release_machine();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* mutable_machine();
  void set_allocated_machine(::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* machine);
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine& _internal_machine() const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* _internal_mutable_machine();
  public:
  void unsafe_arena_set_allocated_machine(
      ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* machine);
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* unsafe_arena_release_machine();

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process process = 3;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process& process() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* release_process();
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* mutable_process();
  void set_allocated_process(::safe_browsing::ClientIncidentReport_EnvironmentData_Process* process);
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process& _internal_process() const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* _internal_mutable_process();
  public:
  void unsafe_arena_set_allocated_process(
      ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* process);
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* unsafe_arena_release_process();

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.EnvironmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* os_;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* machine_;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* process_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_ExtensionData_ExtensionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo) */ {
 public:
  inline ClientIncidentReport_ExtensionData_ExtensionInfo() : ClientIncidentReport_ExtensionData_ExtensionInfo(nullptr) {}
  ~ClientIncidentReport_ExtensionData_ExtensionInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_ExtensionData_ExtensionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_ExtensionData_ExtensionInfo(const ClientIncidentReport_ExtensionData_ExtensionInfo& from);
  ClientIncidentReport_ExtensionData_ExtensionInfo(ClientIncidentReport_ExtensionData_ExtensionInfo&& from) noexcept
    : ClientIncidentReport_ExtensionData_ExtensionInfo() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_ExtensionData_ExtensionInfo& operator=(const ClientIncidentReport_ExtensionData_ExtensionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_ExtensionData_ExtensionInfo& operator=(ClientIncidentReport_ExtensionData_ExtensionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_ExtensionData_ExtensionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_ExtensionData_ExtensionInfo* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_ExtensionData_ExtensionInfo*>(
               &_ClientIncidentReport_ExtensionData_ExtensionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ClientIncidentReport_ExtensionData_ExtensionInfo& a, ClientIncidentReport_ExtensionData_ExtensionInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_ExtensionData_ExtensionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_ExtensionData_ExtensionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_ExtensionData_ExtensionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_ExtensionData_ExtensionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_ExtensionData_ExtensionInfo& from);
  void MergeFrom(const ClientIncidentReport_ExtensionData_ExtensionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_ExtensionData_ExtensionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo";
  }
  protected:
  explicit ClientIncidentReport_ExtensionData_ExtensionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ExtensionState;
  static constexpr ExtensionState STATE_UNKNOWN =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_UNKNOWN;
  static constexpr ExtensionState STATE_ENABLED =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_ENABLED;
  static constexpr ExtensionState STATE_DISABLED =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_DISABLED;
  static constexpr ExtensionState STATE_BLOCKLISTED =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_BLOCKLISTED;
  static constexpr ExtensionState STATE_BLOCKED =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_BLOCKED;
  static constexpr ExtensionState STATE_TERMINATED =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_STATE_TERMINATED;
  static inline bool ExtensionState_IsValid(int value) {
    return ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_IsValid(value);
  }
  static constexpr ExtensionState ExtensionState_MIN =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_ExtensionState_MIN;
  static constexpr ExtensionState ExtensionState_MAX =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_ExtensionState_MAX;
  static constexpr int ExtensionState_ARRAYSIZE =
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_ExtensionState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ExtensionState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExtensionState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExtensionState_Name.");
    return ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Name(enum_t_value);
  }
  static inline bool ExtensionState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ExtensionState* value) {
    return ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kUpdateUrlFieldNumber = 7,
    kManifestFieldNumber = 19,
    kStateFieldNumber = 5,
    kTypeFieldNumber = 6,
    kHasSignatureValidationFieldNumber = 8,
    kSignatureIsValidFieldNumber = 9,
    kInstalledByCustodianFieldNumber = 10,
    kInstalledByDefaultFieldNumber = 11,
    kInstalledByOemFieldNumber = 12,
    kFromBookmarkFieldNumber = 13,
    kFromWebstoreFieldNumber = 14,
    kConvertedFromUserScriptFieldNumber = 15,
    kInstallTimeMsecFieldNumber = 17,
    kMayBeUntrustedFieldNumber = 16,
    kManifestLocationTypeFieldNumber = 18,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string update_url = 7;
  bool has_update_url() const;
  private:
  bool _internal_has_update_url() const;
  public:
  void clear_update_url();
  const std::string& update_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_url();
  PROTOBUF_NODISCARD std::string* release_update_url();
  void set_allocated_update_url(std::string* update_url);
  private:
  const std::string& _internal_update_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_url(const std::string& value);
  std::string* _internal_mutable_update_url();
  public:

  // optional string manifest = 19;
  bool has_manifest() const;
  private:
  bool _internal_has_manifest() const;
  public:
  void clear_manifest();
  const std::string& manifest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manifest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manifest();
  PROTOBUF_NODISCARD std::string* release_manifest();
  void set_allocated_manifest(std::string* manifest);
  private:
  const std::string& _internal_manifest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manifest(const std::string& value);
  std::string* _internal_mutable_manifest();
  public:

  // optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.ExtensionState state = 5 [default = STATE_UNKNOWN];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState state() const;
  void set_state(::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState value);
  private:
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState _internal_state() const;
  void _internal_set_state(::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState value);
  public:

  // optional int32 type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional bool has_signature_validation = 8;
  bool has_has_signature_validation() const;
  private:
  bool _internal_has_has_signature_validation() const;
  public:
  void clear_has_signature_validation();
  bool has_signature_validation() const;
  void set_has_signature_validation(bool value);
  private:
  bool _internal_has_signature_validation() const;
  void _internal_set_has_signature_validation(bool value);
  public:

  // optional bool signature_is_valid = 9;
  bool has_signature_is_valid() const;
  private:
  bool _internal_has_signature_is_valid() const;
  public:
  void clear_signature_is_valid();
  bool signature_is_valid() const;
  void set_signature_is_valid(bool value);
  private:
  bool _internal_signature_is_valid() const;
  void _internal_set_signature_is_valid(bool value);
  public:

  // optional bool installed_by_custodian = 10;
  bool has_installed_by_custodian() const;
  private:
  bool _internal_has_installed_by_custodian() const;
  public:
  void clear_installed_by_custodian();
  bool installed_by_custodian() const;
  void set_installed_by_custodian(bool value);
  private:
  bool _internal_installed_by_custodian() const;
  void _internal_set_installed_by_custodian(bool value);
  public:

  // optional bool installed_by_default = 11;
  bool has_installed_by_default() const;
  private:
  bool _internal_has_installed_by_default() const;
  public:
  void clear_installed_by_default();
  bool installed_by_default() const;
  void set_installed_by_default(bool value);
  private:
  bool _internal_installed_by_default() const;
  void _internal_set_installed_by_default(bool value);
  public:

  // optional bool installed_by_oem = 12;
  bool has_installed_by_oem() const;
  private:
  bool _internal_has_installed_by_oem() const;
  public:
  void clear_installed_by_oem();
  bool installed_by_oem() const;
  void set_installed_by_oem(bool value);
  private:
  bool _internal_installed_by_oem() const;
  void _internal_set_installed_by_oem(bool value);
  public:

  // optional bool from_bookmark = 13;
  bool has_from_bookmark() const;
  private:
  bool _internal_has_from_bookmark() const;
  public:
  void clear_from_bookmark();
  bool from_bookmark() const;
  void set_from_bookmark(bool value);
  private:
  bool _internal_from_bookmark() const;
  void _internal_set_from_bookmark(bool value);
  public:

  // optional bool from_webstore = 14;
  bool has_from_webstore() const;
  private:
  bool _internal_has_from_webstore() const;
  public:
  void clear_from_webstore();
  bool from_webstore() const;
  void set_from_webstore(bool value);
  private:
  bool _internal_from_webstore() const;
  void _internal_set_from_webstore(bool value);
  public:

  // optional bool converted_from_user_script = 15;
  bool has_converted_from_user_script() const;
  private:
  bool _internal_has_converted_from_user_script() const;
  public:
  void clear_converted_from_user_script();
  bool converted_from_user_script() const;
  void set_converted_from_user_script(bool value);
  private:
  bool _internal_converted_from_user_script() const;
  void _internal_set_converted_from_user_script(bool value);
  public:

  // optional int64 install_time_msec = 17;
  bool has_install_time_msec() const;
  private:
  bool _internal_has_install_time_msec() const;
  public:
  void clear_install_time_msec();
  int64_t install_time_msec() const;
  void set_install_time_msec(int64_t value);
  private:
  int64_t _internal_install_time_msec() const;
  void _internal_set_install_time_msec(int64_t value);
  public:

  // optional bool may_be_untrusted = 16;
  bool has_may_be_untrusted() const;
  private:
  bool _internal_has_may_be_untrusted() const;
  public:
  void clear_may_be_untrusted();
  bool may_be_untrusted() const;
  void set_may_be_untrusted(bool value);
  private:
  bool _internal_may_be_untrusted() const;
  void _internal_set_may_be_untrusted(bool value);
  public:

  // optional int32 manifest_location_type = 18;
  bool has_manifest_location_type() const;
  private:
  bool _internal_has_manifest_location_type() const;
  public:
  void clear_manifest_location_type();
  int32_t manifest_location_type() const;
  void set_manifest_location_type(int32_t value);
  private:
  int32_t _internal_manifest_location_type() const;
  void _internal_set_manifest_location_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_;
  int state_;
  int32_t type_;
  bool has_signature_validation_;
  bool signature_is_valid_;
  bool installed_by_custodian_;
  bool installed_by_default_;
  bool installed_by_oem_;
  bool from_bookmark_;
  bool from_webstore_;
  bool converted_from_user_script_;
  int64_t install_time_msec_;
  bool may_be_untrusted_;
  int32_t manifest_location_type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_ExtensionData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.ExtensionData) */ {
 public:
  inline ClientIncidentReport_ExtensionData() : ClientIncidentReport_ExtensionData(nullptr) {}
  ~ClientIncidentReport_ExtensionData() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_ExtensionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_ExtensionData(const ClientIncidentReport_ExtensionData& from);
  ClientIncidentReport_ExtensionData(ClientIncidentReport_ExtensionData&& from) noexcept
    : ClientIncidentReport_ExtensionData() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_ExtensionData& operator=(const ClientIncidentReport_ExtensionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_ExtensionData& operator=(ClientIncidentReport_ExtensionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_ExtensionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_ExtensionData* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_ExtensionData*>(
               &_ClientIncidentReport_ExtensionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ClientIncidentReport_ExtensionData& a, ClientIncidentReport_ExtensionData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_ExtensionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_ExtensionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_ExtensionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_ExtensionData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_ExtensionData& from);
  void MergeFrom(const ClientIncidentReport_ExtensionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_ExtensionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.ExtensionData";
  }
  protected:
  explicit ClientIncidentReport_ExtensionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_ExtensionData_ExtensionInfo ExtensionInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kLastInstalledExtensionFieldNumber = 1,
  };
  // optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo last_installed_extension = 1;
  bool has_last_installed_extension() const;
  private:
  bool _internal_has_last_installed_extension() const;
  public:
  void clear_last_installed_extension();
  const ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo& last_installed_extension() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* release_last_installed_extension();
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* mutable_last_installed_extension();
  void set_allocated_last_installed_extension(::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* last_installed_extension);
  private:
  const ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo& _internal_last_installed_extension() const;
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* _internal_mutable_last_installed_extension();
  public:
  void unsafe_arena_set_allocated_last_installed_extension(
      ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* last_installed_extension);
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* unsafe_arena_release_last_installed_extension();

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.ExtensionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* last_installed_extension_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport_NonBinaryDownloadDetails final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails) */ {
 public:
  inline ClientIncidentReport_NonBinaryDownloadDetails() : ClientIncidentReport_NonBinaryDownloadDetails(nullptr) {}
  ~ClientIncidentReport_NonBinaryDownloadDetails() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport_NonBinaryDownloadDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport_NonBinaryDownloadDetails(const ClientIncidentReport_NonBinaryDownloadDetails& from);
  ClientIncidentReport_NonBinaryDownloadDetails(ClientIncidentReport_NonBinaryDownloadDetails&& from) noexcept
    : ClientIncidentReport_NonBinaryDownloadDetails() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport_NonBinaryDownloadDetails& operator=(const ClientIncidentReport_NonBinaryDownloadDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport_NonBinaryDownloadDetails& operator=(ClientIncidentReport_NonBinaryDownloadDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport_NonBinaryDownloadDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport_NonBinaryDownloadDetails* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport_NonBinaryDownloadDetails*>(
               &_ClientIncidentReport_NonBinaryDownloadDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ClientIncidentReport_NonBinaryDownloadDetails& a, ClientIncidentReport_NonBinaryDownloadDetails& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport_NonBinaryDownloadDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport_NonBinaryDownloadDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport_NonBinaryDownloadDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport_NonBinaryDownloadDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport_NonBinaryDownloadDetails& from);
  void MergeFrom(const ClientIncidentReport_NonBinaryDownloadDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport_NonBinaryDownloadDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails";
  }
  protected:
  explicit ClientIncidentReport_NonBinaryDownloadDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileTypeFieldNumber = 1,
    kUrlSpecSha256FieldNumber = 2,
    kHostFieldNumber = 3,
    kLengthFieldNumber = 4,
  };
  // optional string file_type = 1;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  const std::string& file_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_type();
  PROTOBUF_NODISCARD std::string* release_file_type();
  void set_allocated_file_type(std::string* file_type);
  private:
  const std::string& _internal_file_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_type(const std::string& value);
  std::string* _internal_mutable_file_type();
  public:

  // optional bytes url_spec_sha256 = 2;
  bool has_url_spec_sha256() const;
  private:
  bool _internal_has_url_spec_sha256() const;
  public:
  void clear_url_spec_sha256();
  const std::string& url_spec_sha256() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_spec_sha256(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_spec_sha256();
  PROTOBUF_NODISCARD std::string* release_url_spec_sha256();
  void set_allocated_url_spec_sha256(std::string* url_spec_sha256);
  private:
  const std::string& _internal_url_spec_sha256() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_spec_sha256(const std::string& value);
  std::string* _internal_mutable_url_spec_sha256();
  public:

  // optional string host = 3;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // optional int64 length = 4;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  int64_t length() const;
  void set_length(int64_t value);
  private:
  int64_t _internal_length() const;
  void _internal_set_length(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_spec_sha256_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  int64_t length_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentReport final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentReport) */ {
 public:
  inline ClientIncidentReport() : ClientIncidentReport(nullptr) {}
  ~ClientIncidentReport() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentReport(const ClientIncidentReport& from);
  ClientIncidentReport(ClientIncidentReport&& from) noexcept
    : ClientIncidentReport() {
    *this = ::std::move(from);
  }

  inline ClientIncidentReport& operator=(const ClientIncidentReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentReport& operator=(ClientIncidentReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentReport* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentReport*>(
               &_ClientIncidentReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ClientIncidentReport& a, ClientIncidentReport& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentReport>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentReport& from);
  void MergeFrom(const ClientIncidentReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentReport";
  }
  protected:
  explicit ClientIncidentReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentReport_IncidentData IncidentData;
  typedef ClientIncidentReport_DownloadDetails DownloadDetails;
  typedef ClientIncidentReport_EnvironmentData EnvironmentData;
  typedef ClientIncidentReport_ExtensionData ExtensionData;
  typedef ClientIncidentReport_NonBinaryDownloadDetails NonBinaryDownloadDetails;

  // accessors -------------------------------------------------------

  enum : int {
    kIncidentFieldNumber = 1,
    kDownloadFieldNumber = 2,
    kEnvironmentFieldNumber = 3,
    kPopulationFieldNumber = 7,
    kExtensionDataFieldNumber = 8,
    kNonBinaryDownloadFieldNumber = 9,
  };
  // repeated .safe_browsing.ClientIncidentReport.IncidentData incident = 1;
  int incident_size() const;
  private:
  int _internal_incident_size() const;
  public:
  void clear_incident();
  ::safe_browsing::ClientIncidentReport_IncidentData* mutable_incident(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData >*
      mutable_incident();
  private:
  const ::safe_browsing::ClientIncidentReport_IncidentData& _internal_incident(int index) const;
  ::safe_browsing::ClientIncidentReport_IncidentData* _internal_add_incident();
  public:
  const ::safe_browsing::ClientIncidentReport_IncidentData& incident(int index) const;
  ::safe_browsing::ClientIncidentReport_IncidentData* add_incident();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData >&
      incident() const;

  // optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
  bool has_download() const;
  private:
  bool _internal_has_download() const;
  public:
  void clear_download();
  const ::safe_browsing::ClientIncidentReport_DownloadDetails& download() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_DownloadDetails* release_download();
  ::safe_browsing::ClientIncidentReport_DownloadDetails* mutable_download();
  void set_allocated_download(::safe_browsing::ClientIncidentReport_DownloadDetails* download);
  private:
  const ::safe_browsing::ClientIncidentReport_DownloadDetails& _internal_download() const;
  ::safe_browsing::ClientIncidentReport_DownloadDetails* _internal_mutable_download();
  public:
  void unsafe_arena_set_allocated_download(
      ::safe_browsing::ClientIncidentReport_DownloadDetails* download);
  ::safe_browsing::ClientIncidentReport_DownloadDetails* unsafe_arena_release_download();

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData environment = 3;
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const ::safe_browsing::ClientIncidentReport_EnvironmentData& environment() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_EnvironmentData* release_environment();
  ::safe_browsing::ClientIncidentReport_EnvironmentData* mutable_environment();
  void set_allocated_environment(::safe_browsing::ClientIncidentReport_EnvironmentData* environment);
  private:
  const ::safe_browsing::ClientIncidentReport_EnvironmentData& _internal_environment() const;
  ::safe_browsing::ClientIncidentReport_EnvironmentData* _internal_mutable_environment();
  public:
  void unsafe_arena_set_allocated_environment(
      ::safe_browsing::ClientIncidentReport_EnvironmentData* environment);
  ::safe_browsing::ClientIncidentReport_EnvironmentData* unsafe_arena_release_environment();

  // optional .safe_browsing.ChromeUserPopulation population = 7;
  bool has_population() const;
  private:
  bool _internal_has_population() const;
  public:
  void clear_population();
  const ::safe_browsing::ChromeUserPopulation& population() const;
  PROTOBUF_NODISCARD ::safe_browsing::ChromeUserPopulation* release_population();
  ::safe_browsing::ChromeUserPopulation* mutable_population();
  void set_allocated_population(::safe_browsing::ChromeUserPopulation* population);
  private:
  const ::safe_browsing::ChromeUserPopulation& _internal_population() const;
  ::safe_browsing::ChromeUserPopulation* _internal_mutable_population();
  public:
  void unsafe_arena_set_allocated_population(
      ::safe_browsing::ChromeUserPopulation* population);
  ::safe_browsing::ChromeUserPopulation* unsafe_arena_release_population();

  // optional .safe_browsing.ClientIncidentReport.ExtensionData extension_data = 8;
  bool has_extension_data() const;
  private:
  bool _internal_has_extension_data() const;
  public:
  void clear_extension_data();
  const ::safe_browsing::ClientIncidentReport_ExtensionData& extension_data() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_ExtensionData* release_extension_data();
  ::safe_browsing::ClientIncidentReport_ExtensionData* mutable_extension_data();
  void set_allocated_extension_data(::safe_browsing::ClientIncidentReport_ExtensionData* extension_data);
  private:
  const ::safe_browsing::ClientIncidentReport_ExtensionData& _internal_extension_data() const;
  ::safe_browsing::ClientIncidentReport_ExtensionData* _internal_mutable_extension_data();
  public:
  void unsafe_arena_set_allocated_extension_data(
      ::safe_browsing::ClientIncidentReport_ExtensionData* extension_data);
  ::safe_browsing::ClientIncidentReport_ExtensionData* unsafe_arena_release_extension_data();

  // optional .safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails non_binary_download = 9;
  bool has_non_binary_download() const;
  private:
  bool _internal_has_non_binary_download() const;
  public:
  void clear_non_binary_download();
  const ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails& non_binary_download() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* release_non_binary_download();
  ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* mutable_non_binary_download();
  void set_allocated_non_binary_download(::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* non_binary_download);
  private:
  const ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails& _internal_non_binary_download() const;
  ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* _internal_mutable_non_binary_download();
  public:
  void unsafe_arena_set_allocated_non_binary_download(
      ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* non_binary_download);
  ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* unsafe_arena_release_non_binary_download();

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData > incident_;
  ::safe_browsing::ClientIncidentReport_DownloadDetails* download_;
  ::safe_browsing::ClientIncidentReport_EnvironmentData* environment_;
  ::safe_browsing::ChromeUserPopulation* population_;
  ::safe_browsing::ClientIncidentReport_ExtensionData* extension_data_;
  ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* non_binary_download_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentResponse_EnvironmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentResponse.EnvironmentRequest) */ {
 public:
  inline ClientIncidentResponse_EnvironmentRequest() : ClientIncidentResponse_EnvironmentRequest(nullptr) {}
  ~ClientIncidentResponse_EnvironmentRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentResponse_EnvironmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentResponse_EnvironmentRequest(const ClientIncidentResponse_EnvironmentRequest& from);
  ClientIncidentResponse_EnvironmentRequest(ClientIncidentResponse_EnvironmentRequest&& from) noexcept
    : ClientIncidentResponse_EnvironmentRequest() {
    *this = ::std::move(from);
  }

  inline ClientIncidentResponse_EnvironmentRequest& operator=(const ClientIncidentResponse_EnvironmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentResponse_EnvironmentRequest& operator=(ClientIncidentResponse_EnvironmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentResponse_EnvironmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentResponse_EnvironmentRequest* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentResponse_EnvironmentRequest*>(
               &_ClientIncidentResponse_EnvironmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(ClientIncidentResponse_EnvironmentRequest& a, ClientIncidentResponse_EnvironmentRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentResponse_EnvironmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentResponse_EnvironmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentResponse_EnvironmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentResponse_EnvironmentRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentResponse_EnvironmentRequest& from);
  void MergeFrom(const ClientIncidentResponse_EnvironmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentResponse_EnvironmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentResponse.EnvironmentRequest";
  }
  protected:
  explicit ClientIncidentResponse_EnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDllIndexFieldNumber = 1,
  };
  // optional int32 dll_index = 1;
  bool has_dll_index() const;
  private:
  bool _internal_has_dll_index() const;
  public:
  void clear_dll_index();
  int32_t dll_index() const;
  void set_dll_index(int32_t value);
  private:
  int32_t _internal_dll_index() const;
  void _internal_set_dll_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t dll_index_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientIncidentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientIncidentResponse) */ {
 public:
  inline ClientIncidentResponse() : ClientIncidentResponse(nullptr) {}
  ~ClientIncidentResponse() override;
  explicit PROTOBUF_CONSTEXPR ClientIncidentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientIncidentResponse(const ClientIncidentResponse& from);
  ClientIncidentResponse(ClientIncidentResponse&& from) noexcept
    : ClientIncidentResponse() {
    *this = ::std::move(from);
  }

  inline ClientIncidentResponse& operator=(const ClientIncidentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIncidentResponse& operator=(ClientIncidentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientIncidentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientIncidentResponse* internal_default_instance() {
    return reinterpret_cast<const ClientIncidentResponse*>(
               &_ClientIncidentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ClientIncidentResponse& a, ClientIncidentResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientIncidentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientIncidentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientIncidentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientIncidentResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientIncidentResponse& from);
  void MergeFrom(const ClientIncidentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIncidentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientIncidentResponse";
  }
  protected:
  explicit ClientIncidentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientIncidentResponse_EnvironmentRequest EnvironmentRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentRequestsFieldNumber = 3,
    kTokenFieldNumber = 1,
    kDownloadRequestedFieldNumber = 2,
  };
  // repeated .safe_browsing.ClientIncidentResponse.EnvironmentRequest environment_requests = 3;
  int environment_requests_size() const;
  private:
  int _internal_environment_requests_size() const;
  public:
  void clear_environment_requests();
  ::safe_browsing::ClientIncidentResponse_EnvironmentRequest* mutable_environment_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentResponse_EnvironmentRequest >*
      mutable_environment_requests();
  private:
  const ::safe_browsing::ClientIncidentResponse_EnvironmentRequest& _internal_environment_requests(int index) const;
  ::safe_browsing::ClientIncidentResponse_EnvironmentRequest* _internal_add_environment_requests();
  public:
  const ::safe_browsing::ClientIncidentResponse_EnvironmentRequest& environment_requests(int index) const;
  ::safe_browsing::ClientIncidentResponse_EnvironmentRequest* add_environment_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentResponse_EnvironmentRequest >&
      environment_requests() const;

  // optional bytes token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional bool download_requested = 2;
  bool has_download_requested() const;
  private:
  bool _internal_has_download_requested() const;
  public:
  void clear_download_requested();
  bool download_requested() const;
  void set_download_requested(bool value);
  private:
  bool _internal_download_requested() const;
  void _internal_set_download_requested(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientIncidentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentResponse_EnvironmentRequest > environment_requests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  bool download_requested_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class DownloadMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.DownloadMetadata) */ {
 public:
  inline DownloadMetadata() : DownloadMetadata(nullptr) {}
  ~DownloadMetadata() override;
  explicit PROTOBUF_CONSTEXPR DownloadMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadMetadata(const DownloadMetadata& from);
  DownloadMetadata(DownloadMetadata&& from) noexcept
    : DownloadMetadata() {
    *this = ::std::move(from);
  }

  inline DownloadMetadata& operator=(const DownloadMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMetadata& operator=(DownloadMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DownloadMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadMetadata* internal_default_instance() {
    return reinterpret_cast<const DownloadMetadata*>(
               &_DownloadMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(DownloadMetadata& a, DownloadMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DownloadMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DownloadMetadata& from);
  void MergeFrom(const DownloadMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DownloadMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.DownloadMetadata";
  }
  protected:
  explicit DownloadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownloadFieldNumber = 2,
    kDownloadIdFieldNumber = 1,
  };
  // optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
  bool has_download() const;
  private:
  bool _internal_has_download() const;
  public:
  void clear_download();
  const ::safe_browsing::ClientIncidentReport_DownloadDetails& download() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientIncidentReport_DownloadDetails* release_download();
  ::safe_browsing::ClientIncidentReport_DownloadDetails* mutable_download();
  void set_allocated_download(::safe_browsing::ClientIncidentReport_DownloadDetails* download);
  private:
  const ::safe_browsing::ClientIncidentReport_DownloadDetails& _internal_download() const;
  ::safe_browsing::ClientIncidentReport_DownloadDetails* _internal_mutable_download();
  public:
  void unsafe_arena_set_allocated_download(
      ::safe_browsing::ClientIncidentReport_DownloadDetails* download);
  ::safe_browsing::ClientIncidentReport_DownloadDetails* unsafe_arena_release_download();

  // optional uint32 download_id = 1;
  bool has_download_id() const;
  private:
  bool _internal_has_download_id() const;
  public:
  void clear_download_id();
  uint32_t download_id() const;
  void set_download_id(uint32_t value);
  private:
  uint32_t _internal_download_id() const;
  void _internal_set_download_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.DownloadMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safe_browsing::ClientIncidentReport_DownloadDetails* download_;
  uint32_t download_id_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_HTTPHeader final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader) */ {
 public:
  inline ClientSafeBrowsingReportRequest_HTTPHeader() : ClientSafeBrowsingReportRequest_HTTPHeader(nullptr) {}
  ~ClientSafeBrowsingReportRequest_HTTPHeader() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_HTTPHeader(const ClientSafeBrowsingReportRequest_HTTPHeader& from);
  ClientSafeBrowsingReportRequest_HTTPHeader(ClientSafeBrowsingReportRequest_HTTPHeader&& from) noexcept
    : ClientSafeBrowsingReportRequest_HTTPHeader() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_HTTPHeader& operator=(const ClientSafeBrowsingReportRequest_HTTPHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_HTTPHeader& operator=(ClientSafeBrowsingReportRequest_HTTPHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_HTTPHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_HTTPHeader* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_HTTPHeader*>(
               &_ClientSafeBrowsingReportRequest_HTTPHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ClientSafeBrowsingReportRequest_HTTPHeader& a, ClientSafeBrowsingReportRequest_HTTPHeader& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_HTTPHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_HTTPHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_HTTPHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_HTTPHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_HTTPHeader& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_HTTPHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_HTTPHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_HTTPHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required bytes name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine) */ {
 public:
  inline ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine() : ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(nullptr) {}
  ~ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& from);
  ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine&& from) noexcept
    : ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& operator=(const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& operator=(ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine*>(
               &_ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& a, ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerbFieldNumber = 1,
    kUriFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // optional bytes verb = 1;
  bool has_verb() const;
  private:
  bool _internal_has_verb() const;
  public:
  void clear_verb();
  const std::string& verb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verb();
  PROTOBUF_NODISCARD std::string* release_verb();
  void set_allocated_verb(std::string* verb);
  private:
  const std::string& _internal_verb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verb(const std::string& value);
  std::string* _internal_mutable_verb();
  public:

  // optional bytes uri = 2;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional bytes version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verb_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_HTTPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest) */ {
 public:
  inline ClientSafeBrowsingReportRequest_HTTPRequest() : ClientSafeBrowsingReportRequest_HTTPRequest(nullptr) {}
  ~ClientSafeBrowsingReportRequest_HTTPRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_HTTPRequest(const ClientSafeBrowsingReportRequest_HTTPRequest& from);
  ClientSafeBrowsingReportRequest_HTTPRequest(ClientSafeBrowsingReportRequest_HTTPRequest&& from) noexcept
    : ClientSafeBrowsingReportRequest_HTTPRequest() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_HTTPRequest& operator=(const ClientSafeBrowsingReportRequest_HTTPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_HTTPRequest& operator=(ClientSafeBrowsingReportRequest_HTTPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_HTTPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_HTTPRequest* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_HTTPRequest*>(
               &_ClientSafeBrowsingReportRequest_HTTPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ClientSafeBrowsingReportRequest_HTTPRequest& a, ClientSafeBrowsingReportRequest_HTTPRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_HTTPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_HTTPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_HTTPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_HTTPRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_HTTPRequest& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_HTTPRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_HTTPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_HTTPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine FirstLine;

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kBodyFieldNumber = 3,
    kBodydigestFieldNumber = 4,
    kFirstlineFieldNumber = 1,
    kBodylengthFieldNumber = 5,
  };
  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >*
      mutable_headers();
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader& _internal_headers(int index) const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* _internal_add_headers();
  public:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader& headers(int index) const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >&
      headers() const;

  // optional bytes body = 3;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional bytes bodydigest = 4;
  bool has_bodydigest() const;
  private:
  bool _internal_has_bodydigest() const;
  public:
  void clear_bodydigest();
  const std::string& bodydigest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bodydigest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bodydigest();
  PROTOBUF_NODISCARD std::string* release_bodydigest();
  void set_allocated_bodydigest(std::string* bodydigest);
  private:
  const std::string& _internal_bodydigest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bodydigest(const std::string& value);
  std::string* _internal_mutable_bodydigest();
  public:

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine firstline = 1;
  bool has_firstline() const;
  private:
  bool _internal_has_firstline() const;
  public:
  void clear_firstline();
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& firstline() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* release_firstline();
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* mutable_firstline();
  void set_allocated_firstline(::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* firstline);
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& _internal_firstline() const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* _internal_mutable_firstline();
  public:
  void unsafe_arena_set_allocated_firstline(
      ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* firstline);
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* unsafe_arena_release_firstline();

  // optional int32 bodylength = 5;
  bool has_bodylength() const;
  private:
  bool _internal_has_bodylength() const;
  public:
  void clear_bodylength();
  int32_t bodylength() const;
  void set_bodylength(int32_t value);
  private:
  int32_t _internal_bodylength() const;
  void _internal_set_bodylength(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodydigest_;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* firstline_;
  int32_t bodylength_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine) */ {
 public:
  inline ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine() : ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(nullptr) {}
  ~ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& from);
  ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine&& from) noexcept
    : ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& operator=(const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& operator=(ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine*>(
               &_ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& a, ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kVersionFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // optional bytes message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional bytes version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  int32_t code_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_HTTPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse) */ {
 public:
  inline ClientSafeBrowsingReportRequest_HTTPResponse() : ClientSafeBrowsingReportRequest_HTTPResponse(nullptr) {}
  ~ClientSafeBrowsingReportRequest_HTTPResponse() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_HTTPResponse(const ClientSafeBrowsingReportRequest_HTTPResponse& from);
  ClientSafeBrowsingReportRequest_HTTPResponse(ClientSafeBrowsingReportRequest_HTTPResponse&& from) noexcept
    : ClientSafeBrowsingReportRequest_HTTPResponse() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_HTTPResponse& operator=(const ClientSafeBrowsingReportRequest_HTTPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_HTTPResponse& operator=(ClientSafeBrowsingReportRequest_HTTPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_HTTPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_HTTPResponse* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_HTTPResponse*>(
               &_ClientSafeBrowsingReportRequest_HTTPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(ClientSafeBrowsingReportRequest_HTTPResponse& a, ClientSafeBrowsingReportRequest_HTTPResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_HTTPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_HTTPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_HTTPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_HTTPResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_HTTPResponse& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_HTTPResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_HTTPResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_HTTPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine FirstLine;

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kBodyFieldNumber = 3,
    kBodydigestFieldNumber = 4,
    kRemoteIpFieldNumber = 6,
    kFirstlineFieldNumber = 1,
    kBodylengthFieldNumber = 5,
  };
  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >*
      mutable_headers();
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader& _internal_headers(int index) const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* _internal_add_headers();
  public:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader& headers(int index) const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >&
      headers() const;

  // optional bytes body = 3;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional bytes bodydigest = 4;
  bool has_bodydigest() const;
  private:
  bool _internal_has_bodydigest() const;
  public:
  void clear_bodydigest();
  const std::string& bodydigest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bodydigest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bodydigest();
  PROTOBUF_NODISCARD std::string* release_bodydigest();
  void set_allocated_bodydigest(std::string* bodydigest);
  private:
  const std::string& _internal_bodydigest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bodydigest(const std::string& value);
  std::string* _internal_mutable_bodydigest();
  public:

  // optional bytes remote_ip = 6;
  bool has_remote_ip() const;
  private:
  bool _internal_has_remote_ip() const;
  public:
  void clear_remote_ip();
  const std::string& remote_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_ip();
  PROTOBUF_NODISCARD std::string* release_remote_ip();
  void set_allocated_remote_ip(std::string* remote_ip);
  private:
  const std::string& _internal_remote_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_ip(const std::string& value);
  std::string* _internal_mutable_remote_ip();
  public:

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine firstline = 1;
  bool has_firstline() const;
  private:
  bool _internal_has_firstline() const;
  public:
  void clear_firstline();
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& firstline() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* release_firstline();
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* mutable_firstline();
  void set_allocated_firstline(::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* firstline);
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& _internal_firstline() const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* _internal_mutable_firstline();
  public:
  void unsafe_arena_set_allocated_firstline(
      ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* firstline);
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* unsafe_arena_release_firstline();

  // optional int32 bodylength = 5;
  bool has_bodylength() const;
  private:
  bool _internal_has_bodylength() const;
  public:
  void clear_bodylength();
  int32_t bodylength() const;
  void set_bodylength(int32_t value);
  private:
  int32_t _internal_bodylength() const;
  void _internal_set_bodylength(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodydigest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_ip_;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* firstline_;
  int32_t bodylength_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_Resource final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.Resource) */ {
 public:
  inline ClientSafeBrowsingReportRequest_Resource() : ClientSafeBrowsingReportRequest_Resource(nullptr) {}
  ~ClientSafeBrowsingReportRequest_Resource() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_Resource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_Resource(const ClientSafeBrowsingReportRequest_Resource& from);
  ClientSafeBrowsingReportRequest_Resource(ClientSafeBrowsingReportRequest_Resource&& from) noexcept
    : ClientSafeBrowsingReportRequest_Resource() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_Resource& operator=(const ClientSafeBrowsingReportRequest_Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_Resource& operator=(ClientSafeBrowsingReportRequest_Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_Resource* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_Resource*>(
               &_ClientSafeBrowsingReportRequest_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ClientSafeBrowsingReportRequest_Resource& a, ClientSafeBrowsingReportRequest_Resource& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_Resource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_Resource& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_Resource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.Resource";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdsFieldNumber = 6,
    kUrlFieldNumber = 2,
    kTagNameFieldNumber = 7,
    kRequestFieldNumber = 3,
    kResponseFieldNumber = 4,
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 5,
  };
  // repeated int32 child_ids = 6;
  int child_ids_size() const;
  private:
  int _internal_child_ids_size() const;
  public:
  void clear_child_ids();
  private:
  int32_t _internal_child_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_child_ids() const;
  void _internal_add_child_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_child_ids();
  public:
  int32_t child_ids(int index) const;
  void set_child_ids(int index, int32_t value);
  void add_child_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      child_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_child_ids();

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string tag_name = 7;
  bool has_tag_name() const;
  private:
  bool _internal_has_tag_name() const;
  public:
  void clear_tag_name();
  const std::string& tag_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag_name();
  PROTOBUF_NODISCARD std::string* release_tag_name();
  void set_allocated_tag_name(std::string* tag_name);
  private:
  const std::string& _internal_tag_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_name(const std::string& value);
  std::string* _internal_mutable_tag_name();
  public:

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest& request() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* release_request();
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* mutable_request();
  void set_allocated_request(::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* request);
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest& _internal_request() const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* request);
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* unsafe_arena_release_request();

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse response = 4;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse& response() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* release_response();
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* mutable_response();
  void set_allocated_response(::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* response);
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse& _internal_response() const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* response);
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* unsafe_arena_release_response();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 parent_id = 5;
  bool has_parent_id() const;
  private:
  bool _internal_has_parent_id() const;
  public:
  void clear_parent_id();
  int32_t parent_id() const;
  void set_parent_id(int32_t value);
  private:
  int32_t _internal_parent_id() const;
  void _internal_set_parent_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > child_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_name_;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* request_;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* response_;
  int32_t id_;
  int32_t parent_id_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties) */ {
 public:
  inline ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties() : ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(nullptr) {}
  ~ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& from);
  ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties&& from) noexcept
    : ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& operator=(const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& operator=(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties*>(
               &_ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& a, ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientVersionFieldNumber = 1,
    kGooglePlayServicesVersionFieldNumber = 2,
    kIsInstantAppsFieldNumber = 3,
    kUrlApiTypeFieldNumber = 4,
  };
  // optional string client_version = 1;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  const std::string& client_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* client_version);
  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(const std::string& value);
  std::string* _internal_mutable_client_version();
  public:

  // optional int64 google_play_services_version = 2;
  bool has_google_play_services_version() const;
  private:
  bool _internal_has_google_play_services_version() const;
  public:
  void clear_google_play_services_version();
  int64_t google_play_services_version() const;
  void set_google_play_services_version(int64_t value);
  private:
  int64_t _internal_google_play_services_version() const;
  void _internal_set_google_play_services_version(int64_t value);
  public:

  // optional bool is_instant_apps = 3;
  bool has_is_instant_apps() const;
  private:
  bool _internal_has_is_instant_apps() const;
  public:
  void clear_is_instant_apps();
  bool is_instant_apps() const;
  void set_is_instant_apps(bool value);
  private:
  bool _internal_is_instant_apps() const;
  void _internal_set_is_instant_apps(bool value);
  public:

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingUrlApiType url_api_type = 4;
  bool has_url_api_type() const;
  private:
  bool _internal_has_url_api_type() const;
  public:
  void clear_url_api_type();
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType url_api_type() const;
  void set_url_api_type(::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType value);
  private:
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType _internal_url_api_type() const;
  void _internal_set_url_api_type(::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_version_;
  int64_t google_play_services_version_;
  bool is_instant_apps_;
  int url_api_type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests) */ {
 public:
  inline ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests() : ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(nullptr) {}
  ~ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& from);
  ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests&& from) noexcept
    : ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& operator=(const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& operator=(ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests*>(
               &_ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& a, ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSha256FieldNumber = 1,
  };
  // optional bytes sha256 = 1;
  bool has_sha256() const;
  private:
  bool _internal_has_sha256() const;
  public:
  void clear_sha256();
  const std::string& sha256() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha256(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha256();
  PROTOBUF_NODISCARD std::string* release_sha256();
  void set_allocated_sha256(std::string* sha256);
  private:
  const std::string& _internal_sha256() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha256(const std::string& value);
  std::string* _internal_mutable_sha256();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha256_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest_DownloadItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo) */ {
 public:
  inline ClientSafeBrowsingReportRequest_DownloadItemInfo() : ClientSafeBrowsingReportRequest_DownloadItemInfo(nullptr) {}
  ~ClientSafeBrowsingReportRequest_DownloadItemInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_DownloadItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest_DownloadItemInfo(const ClientSafeBrowsingReportRequest_DownloadItemInfo& from);
  ClientSafeBrowsingReportRequest_DownloadItemInfo(ClientSafeBrowsingReportRequest_DownloadItemInfo&& from) noexcept
    : ClientSafeBrowsingReportRequest_DownloadItemInfo() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest_DownloadItemInfo& operator=(const ClientSafeBrowsingReportRequest_DownloadItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest_DownloadItemInfo& operator=(ClientSafeBrowsingReportRequest_DownloadItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest_DownloadItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest_DownloadItemInfo* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest_DownloadItemInfo*>(
               &_ClientSafeBrowsingReportRequest_DownloadItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ClientSafeBrowsingReportRequest_DownloadItemInfo& a, ClientSafeBrowsingReportRequest_DownloadItemInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest_DownloadItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest_DownloadItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest_DownloadItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest_DownloadItemInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest_DownloadItemInfo& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest_DownloadItemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest_DownloadItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest_DownloadItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests Digests;

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kFileBasenameFieldNumber = 4,
    kDigestsFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string file_basename = 4;
  bool has_file_basename() const;
  private:
  bool _internal_has_file_basename() const;
  public:
  void clear_file_basename();
  const std::string& file_basename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_basename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_basename();
  PROTOBUF_NODISCARD std::string* release_file_basename();
  void set_allocated_file_basename(std::string* file_basename);
  private:
  const std::string& _internal_file_basename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_basename(const std::string& value);
  std::string* _internal_mutable_file_basename();
  public:

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests digests = 2;
  bool has_digests() const;
  private:
  bool _internal_has_digests() const;
  public:
  void clear_digests();
  const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& digests() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* release_digests();
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* mutable_digests();
  void set_allocated_digests(::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* digests);
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& _internal_digests() const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* _internal_mutable_digests();
  public:
  void unsafe_arena_set_allocated_digests(
      ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* digests);
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* unsafe_arena_release_digests();

  // optional int64 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  int64_t length() const;
  void set_length(int64_t value);
  private:
  int64_t _internal_length() const;
  void _internal_set_length(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_basename_;
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* digests_;
  int64_t length_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ClientSafeBrowsingReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSafeBrowsingReportRequest) */ {
 public:
  inline ClientSafeBrowsingReportRequest() : ClientSafeBrowsingReportRequest(nullptr) {}
  ~ClientSafeBrowsingReportRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientSafeBrowsingReportRequest(const ClientSafeBrowsingReportRequest& from);
  ClientSafeBrowsingReportRequest(ClientSafeBrowsingReportRequest&& from) noexcept
    : ClientSafeBrowsingReportRequest() {
    *this = ::std::move(from);
  }

  inline ClientSafeBrowsingReportRequest& operator=(const ClientSafeBrowsingReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSafeBrowsingReportRequest& operator=(ClientSafeBrowsingReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientSafeBrowsingReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientSafeBrowsingReportRequest* internal_default_instance() {
    return reinterpret_cast<const ClientSafeBrowsingReportRequest*>(
               &_ClientSafeBrowsingReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ClientSafeBrowsingReportRequest& a, ClientSafeBrowsingReportRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientSafeBrowsingReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSafeBrowsingReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientSafeBrowsingReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientSafeBrowsingReportRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientSafeBrowsingReportRequest& from);
  void MergeFrom(const ClientSafeBrowsingReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSafeBrowsingReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSafeBrowsingReportRequest";
  }
  protected:
  explicit ClientSafeBrowsingReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientSafeBrowsingReportRequest_HTTPHeader HTTPHeader;
  typedef ClientSafeBrowsingReportRequest_HTTPRequest HTTPRequest;
  typedef ClientSafeBrowsingReportRequest_HTTPResponse HTTPResponse;
  typedef ClientSafeBrowsingReportRequest_Resource Resource;
  typedef ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties SafeBrowsingClientProperties;
  typedef ClientSafeBrowsingReportRequest_DownloadItemInfo DownloadItemInfo;

  typedef ClientSafeBrowsingReportRequest_ReportType ReportType;
  static constexpr ReportType UNKNOWN =
    ClientSafeBrowsingReportRequest_ReportType_UNKNOWN;
  static constexpr ReportType URL_PHISHING =
    ClientSafeBrowsingReportRequest_ReportType_URL_PHISHING;
  static constexpr ReportType URL_MALWARE =
    ClientSafeBrowsingReportRequest_ReportType_URL_MALWARE;
  static constexpr ReportType URL_UNWANTED =
    ClientSafeBrowsingReportRequest_ReportType_URL_UNWANTED;
  static constexpr ReportType URL_CLIENT_SIDE_PHISHING =
    ClientSafeBrowsingReportRequest_ReportType_URL_CLIENT_SIDE_PHISHING;
  static constexpr ReportType URL_CLIENT_SIDE_MALWARE =
    ClientSafeBrowsingReportRequest_ReportType_URL_CLIENT_SIDE_MALWARE;
  static constexpr ReportType DANGEROUS_DOWNLOAD_RECOVERY =
    ClientSafeBrowsingReportRequest_ReportType_DANGEROUS_DOWNLOAD_RECOVERY;
  static constexpr ReportType DANGEROUS_DOWNLOAD_WARNING =
    ClientSafeBrowsingReportRequest_ReportType_DANGEROUS_DOWNLOAD_WARNING;
  static constexpr ReportType DANGEROUS_DOWNLOAD_BY_API =
    ClientSafeBrowsingReportRequest_ReportType_DANGEROUS_DOWNLOAD_BY_API;
  static constexpr ReportType URL_PASSWORD_PROTECTION_PHISHING =
    ClientSafeBrowsingReportRequest_ReportType_URL_PASSWORD_PROTECTION_PHISHING;
  static constexpr ReportType DANGEROUS_DOWNLOAD_OPENED =
    ClientSafeBrowsingReportRequest_ReportType_DANGEROUS_DOWNLOAD_OPENED;
  static constexpr ReportType AD_SAMPLE =
    ClientSafeBrowsingReportRequest_ReportType_AD_SAMPLE;
  static constexpr ReportType URL_SUSPICIOUS =
    ClientSafeBrowsingReportRequest_ReportType_URL_SUSPICIOUS;
  static constexpr ReportType BILLING =
    ClientSafeBrowsingReportRequest_ReportType_BILLING;
  static constexpr ReportType APK_DOWNLOAD =
    ClientSafeBrowsingReportRequest_ReportType_APK_DOWNLOAD;
  static constexpr ReportType BLOCKED_AD_REDIRECT =
    ClientSafeBrowsingReportRequest_ReportType_BLOCKED_AD_REDIRECT;
  static constexpr ReportType BLOCKED_AD_POPUP =
    ClientSafeBrowsingReportRequest_ReportType_BLOCKED_AD_POPUP;
  static inline bool ReportType_IsValid(int value) {
    return ClientSafeBrowsingReportRequest_ReportType_IsValid(value);
  }
  static constexpr ReportType ReportType_MIN =
    ClientSafeBrowsingReportRequest_ReportType_ReportType_MIN;
  static constexpr ReportType ReportType_MAX =
    ClientSafeBrowsingReportRequest_ReportType_ReportType_MAX;
  static constexpr int ReportType_ARRAYSIZE =
    ClientSafeBrowsingReportRequest_ReportType_ReportType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReportType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReportType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReportType_Name.");
    return ClientSafeBrowsingReportRequest_ReportType_Name(enum_t_value);
  }
  static inline bool ReportType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReportType* value) {
    return ClientSafeBrowsingReportRequest_ReportType_Parse(name, value);
  }

  typedef ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType SafeBrowsingUrlApiType;
  static constexpr SafeBrowsingUrlApiType SAFE_BROWSING_URL_API_TYPE_UNSPECIFIED =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SAFE_BROWSING_URL_API_TYPE_UNSPECIFIED;
  PROTOBUF_DEPRECATED_ENUM static constexpr SafeBrowsingUrlApiType PVER3_NATIVE =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_PVER3_NATIVE;
  static constexpr SafeBrowsingUrlApiType PVER4_NATIVE =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_PVER4_NATIVE;
  static constexpr SafeBrowsingUrlApiType ANDROID_SAFETYNET =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_ANDROID_SAFETYNET;
  PROTOBUF_DEPRECATED_ENUM static constexpr SafeBrowsingUrlApiType FLYWHEEL =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_FLYWHEEL;
  static constexpr SafeBrowsingUrlApiType REAL_TIME =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_REAL_TIME;
  static inline bool SafeBrowsingUrlApiType_IsValid(int value) {
    return ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_IsValid(value);
  }
  static constexpr SafeBrowsingUrlApiType SafeBrowsingUrlApiType_MIN =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SafeBrowsingUrlApiType_MIN;
  static constexpr SafeBrowsingUrlApiType SafeBrowsingUrlApiType_MAX =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SafeBrowsingUrlApiType_MAX;
  static constexpr int SafeBrowsingUrlApiType_ARRAYSIZE =
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_SafeBrowsingUrlApiType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SafeBrowsingUrlApiType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SafeBrowsingUrlApiType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SafeBrowsingUrlApiType_Name.");
    return ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Name(enum_t_value);
  }
  static inline bool SafeBrowsingUrlApiType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SafeBrowsingUrlApiType* value) {
    return ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 4,
    kClientAsnFieldNumber = 6,
    kDomFieldNumber = 16,
    kReferrerChainFieldNumber = 23,
    kUrlFieldNumber = 1,
    kPageUrlFieldNumber = 2,
    kReferrerUrlFieldNumber = 3,
    kClientCountryFieldNumber = 7,
    kTokenFieldNumber = 15,
    kSafetyNetIdFieldNumber = 25,
    kClientPropertiesFieldNumber = 17,
    kDownloadItemInfoFieldNumber = 24,
    kPopulationFieldNumber = 26,
    kTypeFieldNumber = 10,
    kCompleteFieldNumber = 5,
    kDidProceedFieldNumber = 8,
    kRepeatVisitFieldNumber = 9,
    kShowDownloadInFolderFieldNumber = 18,
    kDownloadVerdictFieldNumber = 11,
  };
  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.Resource resources = 4;
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  ::safe_browsing::ClientSafeBrowsingReportRequest_Resource* mutable_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_Resource >*
      mutable_resources();
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_Resource& _internal_resources(int index) const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_Resource* _internal_add_resources();
  public:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_Resource& resources(int index) const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_Resource* add_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_Resource >&
      resources() const;

  // repeated string client_asn = 6;
  int client_asn_size() const;
  private:
  int _internal_client_asn_size() const;
  public:
  void clear_client_asn();
  const std::string& client_asn(int index) const;
  std::string* mutable_client_asn(int index);
  void set_client_asn(int index, const std::string& value);
  void set_client_asn(int index, std::string&& value);
  void set_client_asn(int index, const char* value);
  void set_client_asn(int index, const char* value, size_t size);
  std::string* add_client_asn();
  void add_client_asn(const std::string& value);
  void add_client_asn(std::string&& value);
  void add_client_asn(const char* value);
  void add_client_asn(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& client_asn() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_client_asn();
  private:
  const std::string& _internal_client_asn(int index) const;
  std::string* _internal_add_client_asn();
  public:

  // repeated .safe_browsing.HTMLElement dom = 16;
  int dom_size() const;
  private:
  int _internal_dom_size() const;
  public:
  void clear_dom();
  ::safe_browsing::HTMLElement* mutable_dom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement >*
      mutable_dom();
  private:
  const ::safe_browsing::HTMLElement& _internal_dom(int index) const;
  ::safe_browsing::HTMLElement* _internal_add_dom();
  public:
  const ::safe_browsing::HTMLElement& dom(int index) const;
  ::safe_browsing::HTMLElement* add_dom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement >&
      dom() const;

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 23;
  int referrer_chain_size() const;
  private:
  int _internal_referrer_chain_size() const;
  public:
  void clear_referrer_chain();
  ::safe_browsing::ReferrerChainEntry* mutable_referrer_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
      mutable_referrer_chain();
  private:
  const ::safe_browsing::ReferrerChainEntry& _internal_referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* _internal_add_referrer_chain();
  public:
  const ::safe_browsing::ReferrerChainEntry& referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* add_referrer_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
      referrer_chain() const;

  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string page_url = 2;
  bool has_page_url() const;
  private:
  bool _internal_has_page_url() const;
  public:
  void clear_page_url();
  const std::string& page_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_url();
  PROTOBUF_NODISCARD std::string* release_page_url();
  void set_allocated_page_url(std::string* page_url);
  private:
  const std::string& _internal_page_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_url(const std::string& value);
  std::string* _internal_mutable_page_url();
  public:

  // optional string referrer_url = 3;
  bool has_referrer_url() const;
  private:
  bool _internal_has_referrer_url() const;
  public:
  void clear_referrer_url();
  const std::string& referrer_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer_url();
  PROTOBUF_NODISCARD std::string* release_referrer_url();
  void set_allocated_referrer_url(std::string* referrer_url);
  private:
  const std::string& _internal_referrer_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer_url(const std::string& value);
  std::string* _internal_mutable_referrer_url();
  public:

  // optional string client_country = 7;
  bool has_client_country() const;
  private:
  bool _internal_has_client_country() const;
  public:
  void clear_client_country();
  const std::string& client_country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_country();
  PROTOBUF_NODISCARD std::string* release_client_country();
  void set_allocated_client_country(std::string* client_country);
  private:
  const std::string& _internal_client_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_country(const std::string& value);
  std::string* _internal_mutable_client_country();
  public:

  // optional bytes token = 15;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional string safety_net_id = 25 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_safety_net_id() const;
  private:
  bool _internal_has_safety_net_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_safety_net_id();
  PROTOBUF_DEPRECATED const std::string& safety_net_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_safety_net_id(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_safety_net_id();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_safety_net_id();
  PROTOBUF_DEPRECATED void set_allocated_safety_net_id(std::string* safety_net_id);
  private:
  const std::string& _internal_safety_net_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_safety_net_id(const std::string& value);
  std::string* _internal_mutable_safety_net_id();
  public:

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties client_properties = 17;
  bool has_client_properties() const;
  private:
  bool _internal_has_client_properties() const;
  public:
  void clear_client_properties();
  const ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& client_properties() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* release_client_properties();
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* mutable_client_properties();
  void set_allocated_client_properties(::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* client_properties);
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& _internal_client_properties() const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* _internal_mutable_client_properties();
  public:
  void unsafe_arena_set_allocated_client_properties(
      ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* client_properties);
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* unsafe_arena_release_client_properties();

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo download_item_info = 24;
  bool has_download_item_info() const;
  private:
  bool _internal_has_download_item_info() const;
  public:
  void clear_download_item_info();
  const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo& download_item_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* release_download_item_info();
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* mutable_download_item_info();
  void set_allocated_download_item_info(::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* download_item_info);
  private:
  const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo& _internal_download_item_info() const;
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* _internal_mutable_download_item_info();
  public:
  void unsafe_arena_set_allocated_download_item_info(
      ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* download_item_info);
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* unsafe_arena_release_download_item_info();

  // optional .safe_browsing.ChromeUserPopulation population = 26;
  bool has_population() const;
  private:
  bool _internal_has_population() const;
  public:
  void clear_population();
  const ::safe_browsing::ChromeUserPopulation& population() const;
  PROTOBUF_NODISCARD ::safe_browsing::ChromeUserPopulation* release_population();
  ::safe_browsing::ChromeUserPopulation* mutable_population();
  void set_allocated_population(::safe_browsing::ChromeUserPopulation* population);
  private:
  const ::safe_browsing::ChromeUserPopulation& _internal_population() const;
  ::safe_browsing::ChromeUserPopulation* _internal_mutable_population();
  public:
  void unsafe_arena_set_allocated_population(
      ::safe_browsing::ChromeUserPopulation* population);
  ::safe_browsing::ChromeUserPopulation* unsafe_arena_release_population();

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.ReportType type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::safe_browsing::ClientSafeBrowsingReportRequest_ReportType type() const;
  void set_type(::safe_browsing::ClientSafeBrowsingReportRequest_ReportType value);
  private:
  ::safe_browsing::ClientSafeBrowsingReportRequest_ReportType _internal_type() const;
  void _internal_set_type(::safe_browsing::ClientSafeBrowsingReportRequest_ReportType value);
  public:

  // optional bool complete = 5;
  bool has_complete() const;
  private:
  bool _internal_has_complete() const;
  public:
  void clear_complete();
  bool complete() const;
  void set_complete(bool value);
  private:
  bool _internal_complete() const;
  void _internal_set_complete(bool value);
  public:

  // optional bool did_proceed = 8;
  bool has_did_proceed() const;
  private:
  bool _internal_has_did_proceed() const;
  public:
  void clear_did_proceed();
  bool did_proceed() const;
  void set_did_proceed(bool value);
  private:
  bool _internal_did_proceed() const;
  void _internal_set_did_proceed(bool value);
  public:

  // optional bool repeat_visit = 9;
  bool has_repeat_visit() const;
  private:
  bool _internal_has_repeat_visit() const;
  public:
  void clear_repeat_visit();
  bool repeat_visit() const;
  void set_repeat_visit(bool value);
  private:
  bool _internal_repeat_visit() const;
  void _internal_set_repeat_visit(bool value);
  public:

  // optional bool show_download_in_folder = 18;
  bool has_show_download_in_folder() const;
  private:
  bool _internal_has_show_download_in_folder() const;
  public:
  void clear_show_download_in_folder();
  bool show_download_in_folder() const;
  void set_show_download_in_folder(bool value);
  private:
  bool _internal_show_download_in_folder() const;
  void _internal_set_show_download_in_folder(bool value);
  public:

  // optional .safe_browsing.ClientDownloadResponse.Verdict download_verdict = 11;
  bool has_download_verdict() const;
  private:
  bool _internal_has_download_verdict() const;
  public:
  void clear_download_verdict();
  ::safe_browsing::ClientDownloadResponse_Verdict download_verdict() const;
  void set_download_verdict(::safe_browsing::ClientDownloadResponse_Verdict value);
  private:
  ::safe_browsing::ClientDownloadResponse_Verdict _internal_download_verdict() const;
  void _internal_set_download_verdict(::safe_browsing::ClientDownloadResponse_Verdict value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSafeBrowsingReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_Resource > resources_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> client_asn_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement > dom_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry > referrer_chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr safety_net_id_;
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* client_properties_;
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* download_item_info_;
  ::safe_browsing::ChromeUserPopulation* population_;
  int type_;
  bool complete_;
  bool did_proceed_;
  bool repeat_visit_;
  bool show_download_in_folder_;
  int download_verdict_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class HTMLElement_Attribute final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.HTMLElement.Attribute) */ {
 public:
  inline HTMLElement_Attribute() : HTMLElement_Attribute(nullptr) {}
  ~HTMLElement_Attribute() override;
  explicit PROTOBUF_CONSTEXPR HTMLElement_Attribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HTMLElement_Attribute(const HTMLElement_Attribute& from);
  HTMLElement_Attribute(HTMLElement_Attribute&& from) noexcept
    : HTMLElement_Attribute() {
    *this = ::std::move(from);
  }

  inline HTMLElement_Attribute& operator=(const HTMLElement_Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTMLElement_Attribute& operator=(HTMLElement_Attribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HTMLElement_Attribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const HTMLElement_Attribute* internal_default_instance() {
    return reinterpret_cast<const HTMLElement_Attribute*>(
               &_HTMLElement_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(HTMLElement_Attribute& a, HTMLElement_Attribute& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HTMLElement_Attribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTMLElement_Attribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HTMLElement_Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HTMLElement_Attribute>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HTMLElement_Attribute& from);
  void MergeFrom(const HTMLElement_Attribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HTMLElement_Attribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.HTMLElement.Attribute";
  }
  protected:
  explicit HTMLElement_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.HTMLElement.Attribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class HTMLElement final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.HTMLElement) */ {
 public:
  inline HTMLElement() : HTMLElement(nullptr) {}
  ~HTMLElement() override;
  explicit PROTOBUF_CONSTEXPR HTMLElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HTMLElement(const HTMLElement& from);
  HTMLElement(HTMLElement&& from) noexcept
    : HTMLElement() {
    *this = ::std::move(from);
  }

  inline HTMLElement& operator=(const HTMLElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTMLElement& operator=(HTMLElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HTMLElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const HTMLElement* internal_default_instance() {
    return reinterpret_cast<const HTMLElement*>(
               &_HTMLElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(HTMLElement& a, HTMLElement& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HTMLElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTMLElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HTMLElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HTMLElement>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HTMLElement& from);
  void MergeFrom(const HTMLElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HTMLElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.HTMLElement";
  }
  protected:
  explicit HTMLElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef HTMLElement_Attribute Attribute;

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdsFieldNumber = 3,
    kAttributeFieldNumber = 6,
    kTagFieldNumber = 2,
    kInnerHtmlFieldNumber = 7,
    kIdFieldNumber = 1,
    kResourceIdFieldNumber = 5,
  };
  // repeated int32 child_ids = 3;
  int child_ids_size() const;
  private:
  int _internal_child_ids_size() const;
  public:
  void clear_child_ids();
  private:
  int32_t _internal_child_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_child_ids() const;
  void _internal_add_child_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_child_ids();
  public:
  int32_t child_ids(int index) const;
  void set_child_ids(int index, int32_t value);
  void add_child_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      child_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_child_ids();

  // repeated .safe_browsing.HTMLElement.Attribute attribute = 6;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::safe_browsing::HTMLElement_Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement_Attribute >*
      mutable_attribute();
  private:
  const ::safe_browsing::HTMLElement_Attribute& _internal_attribute(int index) const;
  ::safe_browsing::HTMLElement_Attribute* _internal_add_attribute();
  public:
  const ::safe_browsing::HTMLElement_Attribute& attribute(int index) const;
  ::safe_browsing::HTMLElement_Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement_Attribute >&
      attribute() const;

  // optional string tag = 2;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional bytes inner_html = 7;
  bool has_inner_html() const;
  private:
  bool _internal_has_inner_html() const;
  public:
  void clear_inner_html();
  const std::string& inner_html() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inner_html(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inner_html();
  PROTOBUF_NODISCARD std::string* release_inner_html();
  void set_allocated_inner_html(std::string* inner_html);
  private:
  const std::string& _internal_inner_html() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inner_html(const std::string& value);
  std::string* _internal_mutable_inner_html();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 resource_id = 5;
  bool has_resource_id() const;
  private:
  bool _internal_has_resource_id() const;
  public:
  void clear_resource_id();
  int32_t resource_id() const;
  void set_resource_id(int32_t value);
  private:
  int32_t _internal_resource_id() const;
  void _internal_set_resource_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.HTMLElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > child_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement_Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_html_;
  int32_t id_;
  int32_t resource_id_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionWebStoreInstallRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionWebStoreInstallRequest) */ {
 public:
  inline ExtensionWebStoreInstallRequest() : ExtensionWebStoreInstallRequest(nullptr) {}
  ~ExtensionWebStoreInstallRequest() override;
  explicit PROTOBUF_CONSTEXPR ExtensionWebStoreInstallRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionWebStoreInstallRequest(const ExtensionWebStoreInstallRequest& from);
  ExtensionWebStoreInstallRequest(ExtensionWebStoreInstallRequest&& from) noexcept
    : ExtensionWebStoreInstallRequest() {
    *this = ::std::move(from);
  }

  inline ExtensionWebStoreInstallRequest& operator=(const ExtensionWebStoreInstallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionWebStoreInstallRequest& operator=(ExtensionWebStoreInstallRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionWebStoreInstallRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionWebStoreInstallRequest* internal_default_instance() {
    return reinterpret_cast<const ExtensionWebStoreInstallRequest*>(
               &_ExtensionWebStoreInstallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(ExtensionWebStoreInstallRequest& a, ExtensionWebStoreInstallRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionWebStoreInstallRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionWebStoreInstallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionWebStoreInstallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionWebStoreInstallRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionWebStoreInstallRequest& from);
  void MergeFrom(const ExtensionWebStoreInstallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionWebStoreInstallRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionWebStoreInstallRequest";
  }
  protected:
  explicit ExtensionWebStoreInstallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerChainFieldNumber = 1,
    kReferrerChainOptionsFieldNumber = 2,
  };
  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 1;
  int referrer_chain_size() const;
  private:
  int _internal_referrer_chain_size() const;
  public:
  void clear_referrer_chain();
  ::safe_browsing::ReferrerChainEntry* mutable_referrer_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
      mutable_referrer_chain();
  private:
  const ::safe_browsing::ReferrerChainEntry& _internal_referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* _internal_add_referrer_chain();
  public:
  const ::safe_browsing::ReferrerChainEntry& referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* add_referrer_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
      referrer_chain() const;

  // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 2;
  bool has_referrer_chain_options() const;
  private:
  bool _internal_has_referrer_chain_options() const;
  public:
  void clear_referrer_chain_options();
  const ::safe_browsing::ReferrerChainOptions& referrer_chain_options() const;
  PROTOBUF_NODISCARD ::safe_browsing::ReferrerChainOptions* release_referrer_chain_options();
  ::safe_browsing::ReferrerChainOptions* mutable_referrer_chain_options();
  void set_allocated_referrer_chain_options(::safe_browsing::ReferrerChainOptions* referrer_chain_options);
  private:
  const ::safe_browsing::ReferrerChainOptions& _internal_referrer_chain_options() const;
  ::safe_browsing::ReferrerChainOptions* _internal_mutable_referrer_chain_options();
  public:
  void unsafe_arena_set_allocated_referrer_chain_options(
      ::safe_browsing::ReferrerChainOptions* referrer_chain_options);
  ::safe_browsing::ReferrerChainOptions* unsafe_arena_release_referrer_chain_options();

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionWebStoreInstallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry > referrer_chain_;
  ::safe_browsing::ReferrerChainOptions* referrer_chain_options_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryReportRequest_ExtensionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo) */ {
 public:
  inline ExtensionTelemetryReportRequest_ExtensionInfo() : ExtensionTelemetryReportRequest_ExtensionInfo(nullptr) {}
  ~ExtensionTelemetryReportRequest_ExtensionInfo() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_ExtensionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryReportRequest_ExtensionInfo(const ExtensionTelemetryReportRequest_ExtensionInfo& from);
  ExtensionTelemetryReportRequest_ExtensionInfo(ExtensionTelemetryReportRequest_ExtensionInfo&& from) noexcept
    : ExtensionTelemetryReportRequest_ExtensionInfo() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryReportRequest_ExtensionInfo& operator=(const ExtensionTelemetryReportRequest_ExtensionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryReportRequest_ExtensionInfo& operator=(ExtensionTelemetryReportRequest_ExtensionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryReportRequest_ExtensionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryReportRequest_ExtensionInfo* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryReportRequest_ExtensionInfo*>(
               &_ExtensionTelemetryReportRequest_ExtensionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ExtensionTelemetryReportRequest_ExtensionInfo& a, ExtensionTelemetryReportRequest_ExtensionInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryReportRequest_ExtensionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryReportRequest_ExtensionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryReportRequest_ExtensionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryReportRequest_ExtensionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryReportRequest_ExtensionInfo& from);
  void MergeFrom(const ExtensionTelemetryReportRequest_ExtensionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryReportRequest_ExtensionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo";
  }
  protected:
  explicit ExtensionTelemetryReportRequest_ExtensionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExtensionTelemetryReportRequest_ExtensionInfo_Type Type;
  static constexpr Type UNKNOWN_TYPE =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_UNKNOWN_TYPE;
  static constexpr Type EXTENSION =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_EXTENSION;
  static constexpr Type THEME =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_THEME;
  static constexpr Type USER_SCRIPT =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_USER_SCRIPT;
  static constexpr Type HOSTED_APP =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_HOSTED_APP;
  static constexpr Type LEGACY_PACKAGED_APP =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_LEGACY_PACKAGED_APP;
  static constexpr Type PLATFORM_APP =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_PLATFORM_APP;
  static constexpr Type SHARED_MODULE =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_SHARED_MODULE;
  static constexpr Type LOGIN_SCREEN_EXTENSION =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_LOGIN_SCREEN_EXTENSION;
  static inline bool Type_IsValid(int value) {
    return ExtensionTelemetryReportRequest_ExtensionInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ExtensionTelemetryReportRequest_ExtensionInfo_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ExtensionTelemetryReportRequest_ExtensionInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ExtensionTelemetryReportRequest_ExtensionInfo_Type_Parse(name, value);
  }

  typedef ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation InstallLocation;
  static constexpr InstallLocation UNKNOWN_LOCATION =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_UNKNOWN_LOCATION;
  static constexpr InstallLocation INTERNAL =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_INTERNAL;
  static constexpr InstallLocation EXTERNAL_PREF =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_PREF;
  static constexpr InstallLocation EXTERNAL_REGISTRY =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_REGISTRY;
  static constexpr InstallLocation UNPACKED =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_UNPACKED;
  static constexpr InstallLocation COMPONENT =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_COMPONENT;
  static constexpr InstallLocation EXTERNAL_PREF_DOWNLOAD =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_PREF_DOWNLOAD;
  static constexpr InstallLocation EXTERNAL_POLICY_DOWNLOAD =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_POLICY_DOWNLOAD;
  static constexpr InstallLocation COMMAND_LINE =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_COMMAND_LINE;
  static constexpr InstallLocation EXTERNAL_POLICY =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_POLICY;
  static constexpr InstallLocation EXTERNAL_COMPONENT =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_EXTERNAL_COMPONENT;
  static inline bool InstallLocation_IsValid(int value) {
    return ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_IsValid(value);
  }
  static constexpr InstallLocation InstallLocation_MIN =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_InstallLocation_MIN;
  static constexpr InstallLocation InstallLocation_MAX =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_InstallLocation_MAX;
  static constexpr int InstallLocation_ARRAYSIZE =
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_InstallLocation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InstallLocation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InstallLocation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InstallLocation_Name.");
    return ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Name(enum_t_value);
  }
  static inline bool InstallLocation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InstallLocation* value) {
    return ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Parse(name, value);
  }

  typedef ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState BlocklistState;
  static constexpr BlocklistState NOT_BLOCKLISTED =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_NOT_BLOCKLISTED;
  static constexpr BlocklistState BLOCKLISTED_MALWARE =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_MALWARE;
  static constexpr BlocklistState BLOCKLISTED_SECURITY_VULNERABILITY =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_SECURITY_VULNERABILITY;
  static constexpr BlocklistState BLOCKLISTED_CWS_POLICY_VIOLATION =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_CWS_POLICY_VIOLATION;
  static constexpr BlocklistState BLOCKLISTED_POTENTIALLY_UNWANTED =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_POTENTIALLY_UNWANTED;
  static constexpr BlocklistState BLOCKLISTED_UNKNOWN =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BLOCKLISTED_UNKNOWN;
  static inline bool BlocklistState_IsValid(int value) {
    return ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_IsValid(value);
  }
  static constexpr BlocklistState BlocklistState_MIN =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BlocklistState_MIN;
  static constexpr BlocklistState BlocklistState_MAX =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BlocklistState_MAX;
  static constexpr int BlocklistState_ARRAYSIZE =
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_BlocklistState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BlocklistState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BlocklistState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BlocklistState_Name.");
    return ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Name(enum_t_value);
  }
  static inline bool BlocklistState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BlocklistState* value) {
    return ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kNameFieldNumber = 3,
    kInstallTimestampMsecFieldNumber = 4,
    kIsDefaultInstalledFieldNumber = 5,
    kIsOemInstalledFieldNumber = 6,
    kIsFromStoreFieldNumber = 7,
    kUpdatesFromStoreFieldNumber = 8,
    kIsConvertedFromUserScriptFieldNumber = 9,
    kTypeFieldNumber = 10,
    kInstallLocationFieldNumber = 11,
    kBlocklistStateFieldNumber = 12,
    kDisableReasonsFieldNumber = 13,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int64 install_timestamp_msec = 4;
  bool has_install_timestamp_msec() const;
  private:
  bool _internal_has_install_timestamp_msec() const;
  public:
  void clear_install_timestamp_msec();
  int64_t install_timestamp_msec() const;
  void set_install_timestamp_msec(int64_t value);
  private:
  int64_t _internal_install_timestamp_msec() const;
  void _internal_set_install_timestamp_msec(int64_t value);
  public:

  // optional bool is_default_installed = 5;
  bool has_is_default_installed() const;
  private:
  bool _internal_has_is_default_installed() const;
  public:
  void clear_is_default_installed();
  bool is_default_installed() const;
  void set_is_default_installed(bool value);
  private:
  bool _internal_is_default_installed() const;
  void _internal_set_is_default_installed(bool value);
  public:

  // optional bool is_oem_installed = 6;
  bool has_is_oem_installed() const;
  private:
  bool _internal_has_is_oem_installed() const;
  public:
  void clear_is_oem_installed();
  bool is_oem_installed() const;
  void set_is_oem_installed(bool value);
  private:
  bool _internal_is_oem_installed() const;
  void _internal_set_is_oem_installed(bool value);
  public:

  // optional bool is_from_store = 7;
  bool has_is_from_store() const;
  private:
  bool _internal_has_is_from_store() const;
  public:
  void clear_is_from_store();
  bool is_from_store() const;
  void set_is_from_store(bool value);
  private:
  bool _internal_is_from_store() const;
  void _internal_set_is_from_store(bool value);
  public:

  // optional bool updates_from_store = 8;
  bool has_updates_from_store() const;
  private:
  bool _internal_has_updates_from_store() const;
  public:
  void clear_updates_from_store();
  bool updates_from_store() const;
  void set_updates_from_store(bool value);
  private:
  bool _internal_updates_from_store() const;
  void _internal_set_updates_from_store(bool value);
  public:

  // optional bool is_converted_from_user_script = 9;
  bool has_is_converted_from_user_script() const;
  private:
  bool _internal_has_is_converted_from_user_script() const;
  public:
  void clear_is_converted_from_user_script();
  bool is_converted_from_user_script() const;
  void set_is_converted_from_user_script(bool value);
  private:
  bool _internal_is_converted_from_user_script() const;
  void _internal_set_is_converted_from_user_script(bool value);
  public:

  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.Type type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type type() const;
  void set_type(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type value);
  private:
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type _internal_type() const;
  void _internal_set_type(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type value);
  public:

  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.InstallLocation install_location = 11;
  bool has_install_location() const;
  private:
  bool _internal_has_install_location() const;
  public:
  void clear_install_location();
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation install_location() const;
  void set_install_location(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation value);
  private:
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation _internal_install_location() const;
  void _internal_set_install_location(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation value);
  public:

  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.BlocklistState blocklist_state = 12;
  bool has_blocklist_state() const;
  private:
  bool _internal_has_blocklist_state() const;
  public:
  void clear_blocklist_state();
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState blocklist_state() const;
  void set_blocklist_state(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState value);
  private:
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState _internal_blocklist_state() const;
  void _internal_set_blocklist_state(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState value);
  public:

  // optional uint32 disable_reasons = 13;
  bool has_disable_reasons() const;
  private:
  bool _internal_has_disable_reasons() const;
  public:
  void clear_disable_reasons();
  uint32_t disable_reasons() const;
  void set_disable_reasons(uint32_t value);
  private:
  uint32_t _internal_disable_reasons() const;
  void _internal_set_disable_reasons(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t install_timestamp_msec_;
  bool is_default_installed_;
  bool is_oem_installed_;
  bool is_from_store_;
  bool updates_from_store_;
  bool is_converted_from_user_script_;
  int type_;
  int install_location_;
  int blocklist_state_;
  uint32_t disable_reasons_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo) */ {
 public:
  inline ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo() : ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo(nullptr) {}
  ~ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& from);
  ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo&& from) noexcept
    : ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& operator=(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& operator=(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo*>(
               &_ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& a, ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& from);
  void MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo";
  }
  protected:
  explicit ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kExecutionCountFieldNumber = 2,
  };
  // optional bytes hash = 1;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional uint32 execution_count = 2;
  bool has_execution_count() const;
  private:
  bool _internal_has_execution_count() const;
  public:
  void clear_execution_count();
  uint32_t execution_count() const;
  void set_execution_count(uint32_t value);
  private:
  uint32_t _internal_execution_count() const;
  void _internal_set_execution_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  uint32_t execution_count_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo) */ {
 public:
  inline ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo() : ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(nullptr) {}
  ~ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& from);
  ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo&& from) noexcept
    : ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& operator=(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& operator=(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo*>(
               &_ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& a, ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& from);
  void MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo";
  }
  protected:
  explicit ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo ScriptInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kScriptsFieldNumber = 1,
    kMaxExceededScriptCountFieldNumber = 2,
  };
  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo scripts = 1;
  int scripts_size() const;
  private:
  int _internal_scripts_size() const;
  public:
  void clear_scripts();
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* mutable_scripts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo >*
      mutable_scripts();
  private:
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& _internal_scripts(int index) const;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* _internal_add_scripts();
  public:
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& scripts(int index) const;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* add_scripts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo >&
      scripts() const;

  // optional uint32 max_exceeded_script_count = 2;
  bool has_max_exceeded_script_count() const;
  private:
  bool _internal_has_max_exceeded_script_count() const;
  public:
  void clear_max_exceeded_script_count();
  uint32_t max_exceeded_script_count() const;
  void set_max_exceeded_script_count(uint32_t value);
  private:
  uint32_t _internal_max_exceeded_script_count() const;
  void _internal_set_max_exceeded_script_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo > scripts_;
  uint32_t max_exceeded_script_count_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo) */ {
 public:
  inline ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo() : ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo(nullptr) {}
  ~ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& from);
  ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo&& from) noexcept
    : ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& operator=(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& operator=(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo*>(
               &_ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& a, ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& from);
  void MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo";
  }
  protected:
  explicit ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kContactCountFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 contact_count = 2;
  bool has_contact_count() const;
  private:
  bool _internal_has_contact_count() const;
  public:
  void clear_contact_count();
  uint32_t contact_count() const;
  void set_contact_count(uint32_t value);
  private:
  uint32_t _internal_contact_count() const;
  void _internal_set_contact_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t contact_count_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo) */ {
 public:
  inline ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo() : ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(nullptr) {}
  ~ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& from);
  ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo&& from) noexcept
    : ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& operator=(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& operator=(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo*>(
               &_ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& a, ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& from);
  void MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo";
  }
  protected:
  explicit ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo RemoteHostInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteHostFieldNumber = 1,
  };
  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo remote_host = 1;
  int remote_host_size() const;
  private:
  int _internal_remote_host_size() const;
  public:
  void clear_remote_host();
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* mutable_remote_host(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo >*
      mutable_remote_host();
  private:
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& _internal_remote_host(int index) const;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* _internal_add_remote_host();
  public:
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& remote_host(int index) const;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* add_remote_host();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo >&
      remote_host() const;

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo > remote_host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryReportRequest_SignalInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo) */ {
 public:
  inline ExtensionTelemetryReportRequest_SignalInfo() : ExtensionTelemetryReportRequest_SignalInfo(nullptr) {}
  ~ExtensionTelemetryReportRequest_SignalInfo() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryReportRequest_SignalInfo(const ExtensionTelemetryReportRequest_SignalInfo& from);
  ExtensionTelemetryReportRequest_SignalInfo(ExtensionTelemetryReportRequest_SignalInfo&& from) noexcept
    : ExtensionTelemetryReportRequest_SignalInfo() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryReportRequest_SignalInfo& operator=(const ExtensionTelemetryReportRequest_SignalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryReportRequest_SignalInfo& operator=(ExtensionTelemetryReportRequest_SignalInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryReportRequest_SignalInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryReportRequest_SignalInfo* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryReportRequest_SignalInfo*>(
               &_ExtensionTelemetryReportRequest_SignalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ExtensionTelemetryReportRequest_SignalInfo& a, ExtensionTelemetryReportRequest_SignalInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryReportRequest_SignalInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryReportRequest_SignalInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryReportRequest_SignalInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryReportRequest_SignalInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo& from);
  void MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryReportRequest_SignalInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo";
  }
  protected:
  explicit ExtensionTelemetryReportRequest_SignalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo TabsExecuteScriptInfo;
  typedef ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo RemoteHostContactedInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kTabsExecuteScriptInfoFieldNumber = 1,
    kRemoteHostContactedInfoFieldNumber = 2,
  };
  // optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo tabs_execute_script_info = 1;
  bool has_tabs_execute_script_info() const;
  private:
  bool _internal_has_tabs_execute_script_info() const;
  public:
  void clear_tabs_execute_script_info();
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& tabs_execute_script_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* release_tabs_execute_script_info();
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* mutable_tabs_execute_script_info();
  void set_allocated_tabs_execute_script_info(::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* tabs_execute_script_info);
  private:
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& _internal_tabs_execute_script_info() const;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* _internal_mutable_tabs_execute_script_info();
  public:
  void unsafe_arena_set_allocated_tabs_execute_script_info(
      ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* tabs_execute_script_info);
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* unsafe_arena_release_tabs_execute_script_info();

  // optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo remote_host_contacted_info = 2;
  bool has_remote_host_contacted_info() const;
  private:
  bool _internal_has_remote_host_contacted_info() const;
  public:
  void clear_remote_host_contacted_info();
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& remote_host_contacted_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* release_remote_host_contacted_info();
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* mutable_remote_host_contacted_info();
  void set_allocated_remote_host_contacted_info(::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* remote_host_contacted_info);
  private:
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& _internal_remote_host_contacted_info() const;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* _internal_mutable_remote_host_contacted_info();
  public:
  void unsafe_arena_set_allocated_remote_host_contacted_info(
      ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* remote_host_contacted_info);
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* unsafe_arena_release_remote_host_contacted_info();

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* tabs_execute_script_info_;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* remote_host_contacted_info_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryReportRequest_Report final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryReportRequest.Report) */ {
 public:
  inline ExtensionTelemetryReportRequest_Report() : ExtensionTelemetryReportRequest_Report(nullptr) {}
  ~ExtensionTelemetryReportRequest_Report() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_Report(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryReportRequest_Report(const ExtensionTelemetryReportRequest_Report& from);
  ExtensionTelemetryReportRequest_Report(ExtensionTelemetryReportRequest_Report&& from) noexcept
    : ExtensionTelemetryReportRequest_Report() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryReportRequest_Report& operator=(const ExtensionTelemetryReportRequest_Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryReportRequest_Report& operator=(ExtensionTelemetryReportRequest_Report&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryReportRequest_Report& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryReportRequest_Report* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryReportRequest_Report*>(
               &_ExtensionTelemetryReportRequest_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ExtensionTelemetryReportRequest_Report& a, ExtensionTelemetryReportRequest_Report& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryReportRequest_Report* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryReportRequest_Report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryReportRequest_Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryReportRequest_Report>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryReportRequest_Report& from);
  void MergeFrom(const ExtensionTelemetryReportRequest_Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryReportRequest_Report* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryReportRequest.Report";
  }
  protected:
  explicit ExtensionTelemetryReportRequest_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 2,
    kExtensionFieldNumber = 1,
  };
  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo signals = 2;
  int signals_size() const;
  private:
  int _internal_signals_size() const;
  public:
  void clear_signals();
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo* mutable_signals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo >*
      mutable_signals();
  private:
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo& _internal_signals(int index) const;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo* _internal_add_signals();
  public:
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo& signals(int index) const;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo* add_signals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo >&
      signals() const;

  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo extension = 1;
  bool has_extension() const;
  private:
  bool _internal_has_extension() const;
  public:
  void clear_extension();
  const ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo& extension() const;
  PROTOBUF_NODISCARD ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* release_extension();
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* mutable_extension();
  void set_allocated_extension(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* extension);
  private:
  const ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo& _internal_extension() const;
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* _internal_mutable_extension();
  public:
  void unsafe_arena_set_allocated_extension(
      ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* extension);
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* unsafe_arena_release_extension();

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryReportRequest.Report)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo > signals_;
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* extension_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryReportRequest) */ {
 public:
  inline ExtensionTelemetryReportRequest() : ExtensionTelemetryReportRequest(nullptr) {}
  ~ExtensionTelemetryReportRequest() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryReportRequest(const ExtensionTelemetryReportRequest& from);
  ExtensionTelemetryReportRequest(ExtensionTelemetryReportRequest&& from) noexcept
    : ExtensionTelemetryReportRequest() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryReportRequest& operator=(const ExtensionTelemetryReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryReportRequest& operator=(ExtensionTelemetryReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryReportRequest* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryReportRequest*>(
               &_ExtensionTelemetryReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ExtensionTelemetryReportRequest& a, ExtensionTelemetryReportRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryReportRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryReportRequest& from);
  void MergeFrom(const ExtensionTelemetryReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryReportRequest";
  }
  protected:
  explicit ExtensionTelemetryReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExtensionTelemetryReportRequest_ExtensionInfo ExtensionInfo;
  typedef ExtensionTelemetryReportRequest_SignalInfo SignalInfo;
  typedef ExtensionTelemetryReportRequest_Report Report;

  // accessors -------------------------------------------------------

  enum : int {
    kReportsFieldNumber = 2,
    kCreationTimestampMsecFieldNumber = 1,
  };
  // repeated .safe_browsing.ExtensionTelemetryReportRequest.Report reports = 2;
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::safe_browsing::ExtensionTelemetryReportRequest_Report* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_Report >*
      mutable_reports();
  private:
  const ::safe_browsing::ExtensionTelemetryReportRequest_Report& _internal_reports(int index) const;
  ::safe_browsing::ExtensionTelemetryReportRequest_Report* _internal_add_reports();
  public:
  const ::safe_browsing::ExtensionTelemetryReportRequest_Report& reports(int index) const;
  ::safe_browsing::ExtensionTelemetryReportRequest_Report* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_Report >&
      reports() const;

  // optional int64 creation_timestamp_msec = 1;
  bool has_creation_timestamp_msec() const;
  private:
  bool _internal_has_creation_timestamp_msec() const;
  public:
  void clear_creation_timestamp_msec();
  int64_t creation_timestamp_msec() const;
  void set_creation_timestamp_msec(int64_t value);
  private:
  int64_t _internal_creation_timestamp_msec() const;
  void _internal_set_creation_timestamp_msec(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_Report > reports_;
  int64_t creation_timestamp_msec_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// -------------------------------------------------------------------

class ExtensionTelemetryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ExtensionTelemetryResponse) */ {
 public:
  inline ExtensionTelemetryResponse() : ExtensionTelemetryResponse(nullptr) {}
  ~ExtensionTelemetryResponse() override;
  explicit PROTOBUF_CONSTEXPR ExtensionTelemetryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionTelemetryResponse(const ExtensionTelemetryResponse& from);
  ExtensionTelemetryResponse(ExtensionTelemetryResponse&& from) noexcept
    : ExtensionTelemetryResponse() {
    *this = ::std::move(from);
  }

  inline ExtensionTelemetryResponse& operator=(const ExtensionTelemetryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionTelemetryResponse& operator=(ExtensionTelemetryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionTelemetryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionTelemetryResponse* internal_default_instance() {
    return reinterpret_cast<const ExtensionTelemetryResponse*>(
               &_ExtensionTelemetryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ExtensionTelemetryResponse& a, ExtensionTelemetryResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionTelemetryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionTelemetryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionTelemetryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionTelemetryResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionTelemetryResponse& from);
  void MergeFrom(const ExtensionTelemetryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionTelemetryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ExtensionTelemetryResponse";
  }
  protected:
  explicit ExtensionTelemetryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:safe_browsing.ExtensionTelemetryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeUserPopulation_PageLoadToken

// optional .safe_browsing.ChromeUserPopulation.PageLoadToken.TokenSource token_source = 1;
inline bool ChromeUserPopulation_PageLoadToken::_internal_has_token_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeUserPopulation_PageLoadToken::has_token_source() const {
  return _internal_has_token_source();
}
inline void ChromeUserPopulation_PageLoadToken::clear_token_source() {
  token_source_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource ChromeUserPopulation_PageLoadToken::_internal_token_source() const {
  return static_cast< ::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource >(token_source_);
}
inline ::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource ChromeUserPopulation_PageLoadToken::token_source() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.PageLoadToken.token_source)
  return _internal_token_source();
}
inline void ChromeUserPopulation_PageLoadToken::_internal_set_token_source(::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource value) {
  assert(::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  token_source_ = value;
}
inline void ChromeUserPopulation_PageLoadToken::set_token_source(::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource value) {
  _internal_set_token_source(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.PageLoadToken.token_source)
}

// optional int64 token_time_msec = 2;
inline bool ChromeUserPopulation_PageLoadToken::_internal_has_token_time_msec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeUserPopulation_PageLoadToken::has_token_time_msec() const {
  return _internal_has_token_time_msec();
}
inline void ChromeUserPopulation_PageLoadToken::clear_token_time_msec() {
  token_time_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ChromeUserPopulation_PageLoadToken::_internal_token_time_msec() const {
  return token_time_msec_;
}
inline int64_t ChromeUserPopulation_PageLoadToken::token_time_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.PageLoadToken.token_time_msec)
  return _internal_token_time_msec();
}
inline void ChromeUserPopulation_PageLoadToken::_internal_set_token_time_msec(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  token_time_msec_ = value;
}
inline void ChromeUserPopulation_PageLoadToken::set_token_time_msec(int64_t value) {
  _internal_set_token_time_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.PageLoadToken.token_time_msec)
}

// optional bytes token_value = 3;
inline bool ChromeUserPopulation_PageLoadToken::_internal_has_token_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeUserPopulation_PageLoadToken::has_token_value() const {
  return _internal_has_token_value();
}
inline void ChromeUserPopulation_PageLoadToken::clear_token_value() {
  token_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeUserPopulation_PageLoadToken::token_value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.PageLoadToken.token_value)
  return _internal_token_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeUserPopulation_PageLoadToken::set_token_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.PageLoadToken.token_value)
}
inline std::string* ChromeUserPopulation_PageLoadToken::mutable_token_value() {
  std::string* _s = _internal_mutable_token_value();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ChromeUserPopulation.PageLoadToken.token_value)
  return _s;
}
inline const std::string& ChromeUserPopulation_PageLoadToken::_internal_token_value() const {
  return token_value_.Get();
}
inline void ChromeUserPopulation_PageLoadToken::_internal_set_token_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeUserPopulation_PageLoadToken::_internal_mutable_token_value() {
  _has_bits_[0] |= 0x00000001u;
  return token_value_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeUserPopulation_PageLoadToken::release_token_value() {
  // @@protoc_insertion_point(field_release:safe_browsing.ChromeUserPopulation.PageLoadToken.token_value)
  if (!_internal_has_token_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_value_.IsDefault()) {
    token_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeUserPopulation_PageLoadToken::set_allocated_token_value(std::string* token_value) {
  if (token_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_value_.SetAllocated(token_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_value_.IsDefault()) {
    token_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ChromeUserPopulation.PageLoadToken.token_value)
}

// -------------------------------------------------------------------

// ChromeUserPopulation

// optional .safe_browsing.ChromeUserPopulation.UserPopulation user_population = 1;
inline bool ChromeUserPopulation::_internal_has_user_population() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_user_population() const {
  return _internal_has_user_population();
}
inline void ChromeUserPopulation::clear_user_population() {
  user_population_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::safe_browsing::ChromeUserPopulation_UserPopulation ChromeUserPopulation::_internal_user_population() const {
  return static_cast< ::safe_browsing::ChromeUserPopulation_UserPopulation >(user_population_);
}
inline ::safe_browsing::ChromeUserPopulation_UserPopulation ChromeUserPopulation::user_population() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.user_population)
  return _internal_user_population();
}
inline void ChromeUserPopulation::_internal_set_user_population(::safe_browsing::ChromeUserPopulation_UserPopulation value) {
  assert(::safe_browsing::ChromeUserPopulation_UserPopulation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  user_population_ = value;
}
inline void ChromeUserPopulation::set_user_population(::safe_browsing::ChromeUserPopulation_UserPopulation value) {
  _internal_set_user_population(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.user_population)
}

// optional bool is_history_sync_enabled = 2;
inline bool ChromeUserPopulation::_internal_has_is_history_sync_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_is_history_sync_enabled() const {
  return _internal_has_is_history_sync_enabled();
}
inline void ChromeUserPopulation::clear_is_history_sync_enabled() {
  is_history_sync_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChromeUserPopulation::_internal_is_history_sync_enabled() const {
  return is_history_sync_enabled_;
}
inline bool ChromeUserPopulation::is_history_sync_enabled() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.is_history_sync_enabled)
  return _internal_is_history_sync_enabled();
}
inline void ChromeUserPopulation::_internal_set_is_history_sync_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_history_sync_enabled_ = value;
}
inline void ChromeUserPopulation::set_is_history_sync_enabled(bool value) {
  _internal_set_is_history_sync_enabled(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.is_history_sync_enabled)
}

// repeated string finch_active_groups = 4;
inline int ChromeUserPopulation::_internal_finch_active_groups_size() const {
  return finch_active_groups_.size();
}
inline int ChromeUserPopulation::finch_active_groups_size() const {
  return _internal_finch_active_groups_size();
}
inline void ChromeUserPopulation::clear_finch_active_groups() {
  finch_active_groups_.Clear();
}
inline std::string* ChromeUserPopulation::add_finch_active_groups() {
  std::string* _s = _internal_add_finch_active_groups();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ChromeUserPopulation.finch_active_groups)
  return _s;
}
inline const std::string& ChromeUserPopulation::_internal_finch_active_groups(int index) const {
  return finch_active_groups_.Get(index);
}
inline const std::string& ChromeUserPopulation::finch_active_groups(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.finch_active_groups)
  return _internal_finch_active_groups(index);
}
inline std::string* ChromeUserPopulation::mutable_finch_active_groups(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ChromeUserPopulation.finch_active_groups)
  return finch_active_groups_.Mutable(index);
}
inline void ChromeUserPopulation::set_finch_active_groups(int index, const std::string& value) {
  finch_active_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.finch_active_groups)
}
inline void ChromeUserPopulation::set_finch_active_groups(int index, std::string&& value) {
  finch_active_groups_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.finch_active_groups)
}
inline void ChromeUserPopulation::set_finch_active_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  finch_active_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ChromeUserPopulation.finch_active_groups)
}
inline void ChromeUserPopulation::set_finch_active_groups(int index, const char* value, size_t size) {
  finch_active_groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ChromeUserPopulation.finch_active_groups)
}
inline std::string* ChromeUserPopulation::_internal_add_finch_active_groups() {
  return finch_active_groups_.Add();
}
inline void ChromeUserPopulation::add_finch_active_groups(const std::string& value) {
  finch_active_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ChromeUserPopulation.finch_active_groups)
}
inline void ChromeUserPopulation::add_finch_active_groups(std::string&& value) {
  finch_active_groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ChromeUserPopulation.finch_active_groups)
}
inline void ChromeUserPopulation::add_finch_active_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  finch_active_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ChromeUserPopulation.finch_active_groups)
}
inline void ChromeUserPopulation::add_finch_active_groups(const char* value, size_t size) {
  finch_active_groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ChromeUserPopulation.finch_active_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeUserPopulation::finch_active_groups() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ChromeUserPopulation.finch_active_groups)
  return finch_active_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChromeUserPopulation::mutable_finch_active_groups() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ChromeUserPopulation.finch_active_groups)
  return &finch_active_groups_;
}

// optional .safe_browsing.ChromeUserPopulation.ProfileManagementStatus profile_management_status = 5 [default = UNKNOWN];
inline bool ChromeUserPopulation::_internal_has_profile_management_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_profile_management_status() const {
  return _internal_has_profile_management_status();
}
inline void ChromeUserPopulation::clear_profile_management_status() {
  profile_management_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::safe_browsing::ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation::_internal_profile_management_status() const {
  return static_cast< ::safe_browsing::ChromeUserPopulation_ProfileManagementStatus >(profile_management_status_);
}
inline ::safe_browsing::ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation::profile_management_status() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.profile_management_status)
  return _internal_profile_management_status();
}
inline void ChromeUserPopulation::_internal_set_profile_management_status(::safe_browsing::ChromeUserPopulation_ProfileManagementStatus value) {
  assert(::safe_browsing::ChromeUserPopulation_ProfileManagementStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  profile_management_status_ = value;
}
inline void ChromeUserPopulation::set_profile_management_status(::safe_browsing::ChromeUserPopulation_ProfileManagementStatus value) {
  _internal_set_profile_management_status(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.profile_management_status)
}

// optional bool is_under_advanced_protection = 6;
inline bool ChromeUserPopulation::_internal_has_is_under_advanced_protection() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_is_under_advanced_protection() const {
  return _internal_has_is_under_advanced_protection();
}
inline void ChromeUserPopulation::clear_is_under_advanced_protection() {
  is_under_advanced_protection_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ChromeUserPopulation::_internal_is_under_advanced_protection() const {
  return is_under_advanced_protection_;
}
inline bool ChromeUserPopulation::is_under_advanced_protection() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.is_under_advanced_protection)
  return _internal_is_under_advanced_protection();
}
inline void ChromeUserPopulation::_internal_set_is_under_advanced_protection(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_under_advanced_protection_ = value;
}
inline void ChromeUserPopulation::set_is_under_advanced_protection(bool value) {
  _internal_set_is_under_advanced_protection(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.is_under_advanced_protection)
}

// optional bool is_incognito = 7;
inline bool ChromeUserPopulation::_internal_has_is_incognito() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_is_incognito() const {
  return _internal_has_is_incognito();
}
inline void ChromeUserPopulation::clear_is_incognito() {
  is_incognito_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ChromeUserPopulation::_internal_is_incognito() const {
  return is_incognito_;
}
inline bool ChromeUserPopulation::is_incognito() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.is_incognito)
  return _internal_is_incognito();
}
inline void ChromeUserPopulation::_internal_set_is_incognito(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_incognito_ = value;
}
inline void ChromeUserPopulation::set_is_incognito(bool value) {
  _internal_set_is_incognito(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.is_incognito)
}

// optional bool is_mbb_enabled = 8;
inline bool ChromeUserPopulation::_internal_has_is_mbb_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_is_mbb_enabled() const {
  return _internal_has_is_mbb_enabled();
}
inline void ChromeUserPopulation::clear_is_mbb_enabled() {
  is_mbb_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ChromeUserPopulation::_internal_is_mbb_enabled() const {
  return is_mbb_enabled_;
}
inline bool ChromeUserPopulation::is_mbb_enabled() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.is_mbb_enabled)
  return _internal_is_mbb_enabled();
}
inline void ChromeUserPopulation::_internal_set_is_mbb_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_mbb_enabled_ = value;
}
inline void ChromeUserPopulation::set_is_mbb_enabled(bool value) {
  _internal_set_is_mbb_enabled(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.is_mbb_enabled)
}

// optional string user_agent = 9;
inline bool ChromeUserPopulation::_internal_has_user_agent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_user_agent() const {
  return _internal_has_user_agent();
}
inline void ChromeUserPopulation::clear_user_agent() {
  user_agent_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeUserPopulation::user_agent() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.user_agent)
  return _internal_user_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeUserPopulation::set_user_agent(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_agent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.user_agent)
}
inline std::string* ChromeUserPopulation::mutable_user_agent() {
  std::string* _s = _internal_mutable_user_agent();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ChromeUserPopulation.user_agent)
  return _s;
}
inline const std::string& ChromeUserPopulation::_internal_user_agent() const {
  return user_agent_.Get();
}
inline void ChromeUserPopulation::_internal_set_user_agent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_agent_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeUserPopulation::_internal_mutable_user_agent() {
  _has_bits_[0] |= 0x00000001u;
  return user_agent_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeUserPopulation::release_user_agent() {
  // @@protoc_insertion_point(field_release:safe_browsing.ChromeUserPopulation.user_agent)
  if (!_internal_has_user_agent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_agent_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_agent_.IsDefault()) {
    user_agent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeUserPopulation::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_agent_.SetAllocated(user_agent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_agent_.IsDefault()) {
    user_agent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ChromeUserPopulation.user_agent)
}

// optional int32 number_of_profiles = 10;
inline bool ChromeUserPopulation::_internal_has_number_of_profiles() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_number_of_profiles() const {
  return _internal_has_number_of_profiles();
}
inline void ChromeUserPopulation::clear_number_of_profiles() {
  number_of_profiles_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t ChromeUserPopulation::_internal_number_of_profiles() const {
  return number_of_profiles_;
}
inline int32_t ChromeUserPopulation::number_of_profiles() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.number_of_profiles)
  return _internal_number_of_profiles();
}
inline void ChromeUserPopulation::_internal_set_number_of_profiles(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  number_of_profiles_ = value;
}
inline void ChromeUserPopulation::set_number_of_profiles(int32_t value) {
  _internal_set_number_of_profiles(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.number_of_profiles)
}

// optional int32 number_of_loaded_profiles = 11;
inline bool ChromeUserPopulation::_internal_has_number_of_loaded_profiles() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_number_of_loaded_profiles() const {
  return _internal_has_number_of_loaded_profiles();
}
inline void ChromeUserPopulation::clear_number_of_loaded_profiles() {
  number_of_loaded_profiles_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t ChromeUserPopulation::_internal_number_of_loaded_profiles() const {
  return number_of_loaded_profiles_;
}
inline int32_t ChromeUserPopulation::number_of_loaded_profiles() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.number_of_loaded_profiles)
  return _internal_number_of_loaded_profiles();
}
inline void ChromeUserPopulation::_internal_set_number_of_loaded_profiles(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  number_of_loaded_profiles_ = value;
}
inline void ChromeUserPopulation::set_number_of_loaded_profiles(int32_t value) {
  _internal_set_number_of_loaded_profiles(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.number_of_loaded_profiles)
}

// optional int32 number_of_open_profiles = 12;
inline bool ChromeUserPopulation::_internal_has_number_of_open_profiles() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_number_of_open_profiles() const {
  return _internal_has_number_of_open_profiles();
}
inline void ChromeUserPopulation::clear_number_of_open_profiles() {
  number_of_open_profiles_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t ChromeUserPopulation::_internal_number_of_open_profiles() const {
  return number_of_open_profiles_;
}
inline int32_t ChromeUserPopulation::number_of_open_profiles() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.number_of_open_profiles)
  return _internal_number_of_open_profiles();
}
inline void ChromeUserPopulation::_internal_set_number_of_open_profiles(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  number_of_open_profiles_ = value;
}
inline void ChromeUserPopulation::set_number_of_open_profiles(int32_t value) {
  _internal_set_number_of_open_profiles(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.number_of_open_profiles)
}

// repeated .safe_browsing.ChromeUserPopulation.PageLoadToken page_load_tokens = 14;
inline int ChromeUserPopulation::_internal_page_load_tokens_size() const {
  return page_load_tokens_.size();
}
inline int ChromeUserPopulation::page_load_tokens_size() const {
  return _internal_page_load_tokens_size();
}
inline void ChromeUserPopulation::clear_page_load_tokens() {
  page_load_tokens_.Clear();
}
inline ::safe_browsing::ChromeUserPopulation_PageLoadToken* ChromeUserPopulation::mutable_page_load_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ChromeUserPopulation.page_load_tokens)
  return page_load_tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ChromeUserPopulation_PageLoadToken >*
ChromeUserPopulation::mutable_page_load_tokens() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ChromeUserPopulation.page_load_tokens)
  return &page_load_tokens_;
}
inline const ::safe_browsing::ChromeUserPopulation_PageLoadToken& ChromeUserPopulation::_internal_page_load_tokens(int index) const {
  return page_load_tokens_.Get(index);
}
inline const ::safe_browsing::ChromeUserPopulation_PageLoadToken& ChromeUserPopulation::page_load_tokens(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.page_load_tokens)
  return _internal_page_load_tokens(index);
}
inline ::safe_browsing::ChromeUserPopulation_PageLoadToken* ChromeUserPopulation::_internal_add_page_load_tokens() {
  return page_load_tokens_.Add();
}
inline ::safe_browsing::ChromeUserPopulation_PageLoadToken* ChromeUserPopulation::add_page_load_tokens() {
  ::safe_browsing::ChromeUserPopulation_PageLoadToken* _add = _internal_add_page_load_tokens();
  // @@protoc_insertion_point(field_add:safe_browsing.ChromeUserPopulation.page_load_tokens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ChromeUserPopulation_PageLoadToken >&
ChromeUserPopulation::page_load_tokens() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ChromeUserPopulation.page_load_tokens)
  return page_load_tokens_;
}

// optional bool is_aesb_enabled = 15;
inline bool ChromeUserPopulation::_internal_has_is_aesb_enabled() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_is_aesb_enabled() const {
  return _internal_has_is_aesb_enabled();
}
inline void ChromeUserPopulation::clear_is_aesb_enabled() {
  is_aesb_enabled_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ChromeUserPopulation::_internal_is_aesb_enabled() const {
  return is_aesb_enabled_;
}
inline bool ChromeUserPopulation::is_aesb_enabled() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.is_aesb_enabled)
  return _internal_is_aesb_enabled();
}
inline void ChromeUserPopulation::_internal_set_is_aesb_enabled(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_aesb_enabled_ = value;
}
inline void ChromeUserPopulation::set_is_aesb_enabled(bool value) {
  _internal_set_is_aesb_enabled(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.is_aesb_enabled)
}

// optional int64 aesb_last_update_time_windows_epoch_micros = 16;
inline bool ChromeUserPopulation::_internal_has_aesb_last_update_time_windows_epoch_micros() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChromeUserPopulation::has_aesb_last_update_time_windows_epoch_micros() const {
  return _internal_has_aesb_last_update_time_windows_epoch_micros();
}
inline void ChromeUserPopulation::clear_aesb_last_update_time_windows_epoch_micros() {
  aesb_last_update_time_windows_epoch_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000400u;
}
inline int64_t ChromeUserPopulation::_internal_aesb_last_update_time_windows_epoch_micros() const {
  return aesb_last_update_time_windows_epoch_micros_;
}
inline int64_t ChromeUserPopulation::aesb_last_update_time_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ChromeUserPopulation.aesb_last_update_time_windows_epoch_micros)
  return _internal_aesb_last_update_time_windows_epoch_micros();
}
inline void ChromeUserPopulation::_internal_set_aesb_last_update_time_windows_epoch_micros(int64_t value) {
  _has_bits_[0] |= 0x00000400u;
  aesb_last_update_time_windows_epoch_micros_ = value;
}
inline void ChromeUserPopulation::set_aesb_last_update_time_windows_epoch_micros(int64_t value) {
  _internal_set_aesb_last_update_time_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ChromeUserPopulation.aesb_last_update_time_windows_epoch_micros)
}

// -------------------------------------------------------------------

// ClientPhishingRequest_Feature

// required string name = 1;
inline bool ClientPhishingRequest_Feature::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientPhishingRequest_Feature::has_name() const {
  return _internal_has_name();
}
inline void ClientPhishingRequest_Feature::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientPhishingRequest_Feature::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.Feature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPhishingRequest_Feature::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.Feature.name)
}
inline std::string* ClientPhishingRequest_Feature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.Feature.name)
  return _s;
}
inline const std::string& ClientPhishingRequest_Feature::_internal_name() const {
  return name_.Get();
}
inline void ClientPhishingRequest_Feature::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest_Feature::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest_Feature::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientPhishingRequest.Feature.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientPhishingRequest_Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientPhishingRequest.Feature.name)
}

// required double value = 2;
inline bool ClientPhishingRequest_Feature::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientPhishingRequest_Feature::has_value() const {
  return _internal_has_value();
}
inline void ClientPhishingRequest_Feature::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ClientPhishingRequest_Feature::_internal_value() const {
  return value_;
}
inline double ClientPhishingRequest_Feature::value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.Feature.value)
  return _internal_value();
}
inline void ClientPhishingRequest_Feature::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void ClientPhishingRequest_Feature::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.Feature.value)
}

// -------------------------------------------------------------------

// ClientPhishingRequest_CategoryScore

// optional string label = 1;
inline bool ClientPhishingRequest_CategoryScore::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientPhishingRequest_CategoryScore::has_label() const {
  return _internal_has_label();
}
inline void ClientPhishingRequest_CategoryScore::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientPhishingRequest_CategoryScore::label() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.CategoryScore.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPhishingRequest_CategoryScore::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.CategoryScore.label)
}
inline std::string* ClientPhishingRequest_CategoryScore::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.CategoryScore.label)
  return _s;
}
inline const std::string& ClientPhishingRequest_CategoryScore::_internal_label() const {
  return label_.Get();
}
inline void ClientPhishingRequest_CategoryScore::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest_CategoryScore::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest_CategoryScore::release_label() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientPhishingRequest.CategoryScore.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientPhishingRequest_CategoryScore::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientPhishingRequest.CategoryScore.label)
}

// optional float value = 2;
inline bool ClientPhishingRequest_CategoryScore::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientPhishingRequest_CategoryScore::has_value() const {
  return _internal_has_value();
}
inline void ClientPhishingRequest_CategoryScore::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ClientPhishingRequest_CategoryScore::_internal_value() const {
  return value_;
}
inline float ClientPhishingRequest_CategoryScore::value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.CategoryScore.value)
  return _internal_value();
}
inline void ClientPhishingRequest_CategoryScore::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void ClientPhishingRequest_CategoryScore::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.CategoryScore.value)
}

// -------------------------------------------------------------------

// ClientPhishingRequest

// optional string url = 1;
inline bool ClientPhishingRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_url() const {
  return _internal_has_url();
}
inline void ClientPhishingRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientPhishingRequest::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPhishingRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.url)
}
inline std::string* ClientPhishingRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.url)
  return _s;
}
inline const std::string& ClientPhishingRequest::_internal_url() const {
  return url_.Get();
}
inline void ClientPhishingRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientPhishingRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientPhishingRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientPhishingRequest.url)
}

// optional bytes OBSOLETE_hash_prefix = 10;
inline bool ClientPhishingRequest::_internal_has_obsolete_hash_prefix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_obsolete_hash_prefix() const {
  return _internal_has_obsolete_hash_prefix();
}
inline void ClientPhishingRequest::clear_obsolete_hash_prefix() {
  obsolete_hash_prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientPhishingRequest::obsolete_hash_prefix() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.OBSOLETE_hash_prefix)
  return _internal_obsolete_hash_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPhishingRequest::set_obsolete_hash_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 obsolete_hash_prefix_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.OBSOLETE_hash_prefix)
}
inline std::string* ClientPhishingRequest::mutable_obsolete_hash_prefix() {
  std::string* _s = _internal_mutable_obsolete_hash_prefix();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.OBSOLETE_hash_prefix)
  return _s;
}
inline const std::string& ClientPhishingRequest::_internal_obsolete_hash_prefix() const {
  return obsolete_hash_prefix_.Get();
}
inline void ClientPhishingRequest::_internal_set_obsolete_hash_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  obsolete_hash_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest::_internal_mutable_obsolete_hash_prefix() {
  _has_bits_[0] |= 0x00000004u;
  return obsolete_hash_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest::release_obsolete_hash_prefix() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientPhishingRequest.OBSOLETE_hash_prefix)
  if (!_internal_has_obsolete_hash_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = obsolete_hash_prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obsolete_hash_prefix_.IsDefault()) {
    obsolete_hash_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientPhishingRequest::set_allocated_obsolete_hash_prefix(std::string* obsolete_hash_prefix) {
  if (obsolete_hash_prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  obsolete_hash_prefix_.SetAllocated(obsolete_hash_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obsolete_hash_prefix_.IsDefault()) {
    obsolete_hash_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientPhishingRequest.OBSOLETE_hash_prefix)
}

// required float client_score = 2;
inline bool ClientPhishingRequest::_internal_has_client_score() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_client_score() const {
  return _internal_has_client_score();
}
inline void ClientPhishingRequest::clear_client_score() {
  client_score_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ClientPhishingRequest::_internal_client_score() const {
  return client_score_;
}
inline float ClientPhishingRequest::client_score() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.client_score)
  return _internal_client_score();
}
inline void ClientPhishingRequest::_internal_set_client_score(float value) {
  _has_bits_[0] |= 0x00000040u;
  client_score_ = value;
}
inline void ClientPhishingRequest::set_client_score(float value) {
  _internal_set_client_score(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.client_score)
}

// optional bool is_phishing = 4;
inline bool ClientPhishingRequest::_internal_has_is_phishing() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_is_phishing() const {
  return _internal_has_is_phishing();
}
inline void ClientPhishingRequest::clear_is_phishing() {
  is_phishing_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ClientPhishingRequest::_internal_is_phishing() const {
  return is_phishing_;
}
inline bool ClientPhishingRequest::is_phishing() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.is_phishing)
  return _internal_is_phishing();
}
inline void ClientPhishingRequest::_internal_set_is_phishing(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_phishing_ = value;
}
inline void ClientPhishingRequest::set_is_phishing(bool value) {
  _internal_set_is_phishing(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.is_phishing)
}

// repeated .safe_browsing.ClientPhishingRequest.Feature feature_map = 5;
inline int ClientPhishingRequest::_internal_feature_map_size() const {
  return feature_map_.size();
}
inline int ClientPhishingRequest::feature_map_size() const {
  return _internal_feature_map_size();
}
inline void ClientPhishingRequest::clear_feature_map() {
  feature_map_.Clear();
}
inline ::safe_browsing::ClientPhishingRequest_Feature* ClientPhishingRequest::mutable_feature_map(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.feature_map)
  return feature_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature >*
ClientPhishingRequest::mutable_feature_map() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientPhishingRequest.feature_map)
  return &feature_map_;
}
inline const ::safe_browsing::ClientPhishingRequest_Feature& ClientPhishingRequest::_internal_feature_map(int index) const {
  return feature_map_.Get(index);
}
inline const ::safe_browsing::ClientPhishingRequest_Feature& ClientPhishingRequest::feature_map(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.feature_map)
  return _internal_feature_map(index);
}
inline ::safe_browsing::ClientPhishingRequest_Feature* ClientPhishingRequest::_internal_add_feature_map() {
  return feature_map_.Add();
}
inline ::safe_browsing::ClientPhishingRequest_Feature* ClientPhishingRequest::add_feature_map() {
  ::safe_browsing::ClientPhishingRequest_Feature* _add = _internal_add_feature_map();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientPhishingRequest.feature_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature >&
ClientPhishingRequest::feature_map() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientPhishingRequest.feature_map)
  return feature_map_;
}

// optional int32 dom_model_version = 27;
inline bool ClientPhishingRequest::_internal_has_dom_model_version() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_dom_model_version() const {
  return _internal_has_dom_model_version();
}
inline void ClientPhishingRequest::clear_dom_model_version() {
  dom_model_version_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t ClientPhishingRequest::_internal_dom_model_version() const {
  return dom_model_version_;
}
inline int32_t ClientPhishingRequest::dom_model_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.dom_model_version)
  return _internal_dom_model_version();
}
inline void ClientPhishingRequest::_internal_set_dom_model_version(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  dom_model_version_ = value;
}
inline void ClientPhishingRequest::set_dom_model_version(int32_t value) {
  _internal_set_dom_model_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.dom_model_version)
}

// optional int32 model_version = 6;
inline bool ClientPhishingRequest::_internal_has_model_version() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_model_version() const {
  return _internal_has_model_version();
}
inline void ClientPhishingRequest::clear_model_version() {
  model_version_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t ClientPhishingRequest::_internal_model_version() const {
  return model_version_;
}
inline int32_t ClientPhishingRequest::model_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.model_version)
  return _internal_model_version();
}
inline void ClientPhishingRequest::_internal_set_model_version(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  model_version_ = value;
}
inline void ClientPhishingRequest::set_model_version(int32_t value) {
  _internal_set_model_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.model_version)
}

// repeated .safe_browsing.ClientPhishingRequest.Feature non_model_feature_map = 8;
inline int ClientPhishingRequest::_internal_non_model_feature_map_size() const {
  return non_model_feature_map_.size();
}
inline int ClientPhishingRequest::non_model_feature_map_size() const {
  return _internal_non_model_feature_map_size();
}
inline void ClientPhishingRequest::clear_non_model_feature_map() {
  non_model_feature_map_.Clear();
}
inline ::safe_browsing::ClientPhishingRequest_Feature* ClientPhishingRequest::mutable_non_model_feature_map(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.non_model_feature_map)
  return non_model_feature_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature >*
ClientPhishingRequest::mutable_non_model_feature_map() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientPhishingRequest.non_model_feature_map)
  return &non_model_feature_map_;
}
inline const ::safe_browsing::ClientPhishingRequest_Feature& ClientPhishingRequest::_internal_non_model_feature_map(int index) const {
  return non_model_feature_map_.Get(index);
}
inline const ::safe_browsing::ClientPhishingRequest_Feature& ClientPhishingRequest::non_model_feature_map(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.non_model_feature_map)
  return _internal_non_model_feature_map(index);
}
inline ::safe_browsing::ClientPhishingRequest_Feature* ClientPhishingRequest::_internal_add_non_model_feature_map() {
  return non_model_feature_map_.Add();
}
inline ::safe_browsing::ClientPhishingRequest_Feature* ClientPhishingRequest::add_non_model_feature_map() {
  ::safe_browsing::ClientPhishingRequest_Feature* _add = _internal_add_non_model_feature_map();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientPhishingRequest.non_model_feature_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_Feature >&
ClientPhishingRequest::non_model_feature_map() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientPhishingRequest.non_model_feature_map)
  return non_model_feature_map_;
}

// optional string OBSOLETE_referrer_url = 9;
inline bool ClientPhishingRequest::_internal_has_obsolete_referrer_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_obsolete_referrer_url() const {
  return _internal_has_obsolete_referrer_url();
}
inline void ClientPhishingRequest::clear_obsolete_referrer_url() {
  obsolete_referrer_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientPhishingRequest::obsolete_referrer_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.OBSOLETE_referrer_url)
  return _internal_obsolete_referrer_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPhishingRequest::set_obsolete_referrer_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 obsolete_referrer_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.OBSOLETE_referrer_url)
}
inline std::string* ClientPhishingRequest::mutable_obsolete_referrer_url() {
  std::string* _s = _internal_mutable_obsolete_referrer_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.OBSOLETE_referrer_url)
  return _s;
}
inline const std::string& ClientPhishingRequest::_internal_obsolete_referrer_url() const {
  return obsolete_referrer_url_.Get();
}
inline void ClientPhishingRequest::_internal_set_obsolete_referrer_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  obsolete_referrer_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest::_internal_mutable_obsolete_referrer_url() {
  _has_bits_[0] |= 0x00000002u;
  return obsolete_referrer_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest::release_obsolete_referrer_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientPhishingRequest.OBSOLETE_referrer_url)
  if (!_internal_has_obsolete_referrer_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = obsolete_referrer_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obsolete_referrer_url_.IsDefault()) {
    obsolete_referrer_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientPhishingRequest::set_allocated_obsolete_referrer_url(std::string* obsolete_referrer_url) {
  if (obsolete_referrer_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_referrer_url_.SetAllocated(obsolete_referrer_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obsolete_referrer_url_.IsDefault()) {
    obsolete_referrer_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientPhishingRequest.OBSOLETE_referrer_url)
}

// repeated uint32 shingle_hashes = 12 [packed = true];
inline int ClientPhishingRequest::_internal_shingle_hashes_size() const {
  return shingle_hashes_.size();
}
inline int ClientPhishingRequest::shingle_hashes_size() const {
  return _internal_shingle_hashes_size();
}
inline void ClientPhishingRequest::clear_shingle_hashes() {
  shingle_hashes_.Clear();
}
inline uint32_t ClientPhishingRequest::_internal_shingle_hashes(int index) const {
  return shingle_hashes_.Get(index);
}
inline uint32_t ClientPhishingRequest::shingle_hashes(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.shingle_hashes)
  return _internal_shingle_hashes(index);
}
inline void ClientPhishingRequest::set_shingle_hashes(int index, uint32_t value) {
  shingle_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.shingle_hashes)
}
inline void ClientPhishingRequest::_internal_add_shingle_hashes(uint32_t value) {
  shingle_hashes_.Add(value);
}
inline void ClientPhishingRequest::add_shingle_hashes(uint32_t value) {
  _internal_add_shingle_hashes(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientPhishingRequest.shingle_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ClientPhishingRequest::_internal_shingle_hashes() const {
  return shingle_hashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ClientPhishingRequest::shingle_hashes() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientPhishingRequest.shingle_hashes)
  return _internal_shingle_hashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ClientPhishingRequest::_internal_mutable_shingle_hashes() {
  return &shingle_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ClientPhishingRequest::mutable_shingle_hashes() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientPhishingRequest.shingle_hashes)
  return _internal_mutable_shingle_hashes();
}

// optional string DEPRECATED_model_filename = 13 [deprecated = true];
inline bool ClientPhishingRequest::_internal_has_deprecated_model_filename() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_deprecated_model_filename() const {
  return _internal_has_deprecated_model_filename();
}
inline void ClientPhishingRequest::clear_deprecated_model_filename() {
  deprecated_model_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientPhishingRequest::deprecated_model_filename() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.DEPRECATED_model_filename)
  return _internal_deprecated_model_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPhishingRequest::set_deprecated_model_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 deprecated_model_filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.DEPRECATED_model_filename)
}
inline std::string* ClientPhishingRequest::mutable_deprecated_model_filename() {
  std::string* _s = _internal_mutable_deprecated_model_filename();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.DEPRECATED_model_filename)
  return _s;
}
inline const std::string& ClientPhishingRequest::_internal_deprecated_model_filename() const {
  return deprecated_model_filename_.Get();
}
inline void ClientPhishingRequest::_internal_set_deprecated_model_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  deprecated_model_filename_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest::_internal_mutable_deprecated_model_filename() {
  _has_bits_[0] |= 0x00000008u;
  return deprecated_model_filename_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientPhishingRequest::release_deprecated_model_filename() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientPhishingRequest.DEPRECATED_model_filename)
  if (!_internal_has_deprecated_model_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = deprecated_model_filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_model_filename_.IsDefault()) {
    deprecated_model_filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientPhishingRequest::set_allocated_deprecated_model_filename(std::string* deprecated_model_filename) {
  if (deprecated_model_filename != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  deprecated_model_filename_.SetAllocated(deprecated_model_filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_model_filename_.IsDefault()) {
    deprecated_model_filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientPhishingRequest.DEPRECATED_model_filename)
}

// optional .safe_browsing.ChromeUserPopulation population = 14;
inline bool ClientPhishingRequest::_internal_has_population() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || population_ != nullptr);
  return value;
}
inline bool ClientPhishingRequest::has_population() const {
  return _internal_has_population();
}
inline void ClientPhishingRequest::clear_population() {
  if (population_ != nullptr) population_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::safe_browsing::ChromeUserPopulation& ClientPhishingRequest::_internal_population() const {
  const ::safe_browsing::ChromeUserPopulation* p = population_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ChromeUserPopulation&>(
      ::safe_browsing::_ChromeUserPopulation_default_instance_);
}
inline const ::safe_browsing::ChromeUserPopulation& ClientPhishingRequest::population() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.population)
  return _internal_population();
}
inline void ClientPhishingRequest::unsafe_arena_set_allocated_population(
    ::safe_browsing::ChromeUserPopulation* population) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(population_);
  }
  population_ = population;
  if (population) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientPhishingRequest.population)
}
inline ::safe_browsing::ChromeUserPopulation* ClientPhishingRequest::release_population() {
  _has_bits_[0] &= ~0x00000010u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* ClientPhishingRequest::unsafe_arena_release_population() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientPhishingRequest.population)
  _has_bits_[0] &= ~0x00000010u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* ClientPhishingRequest::_internal_mutable_population() {
  _has_bits_[0] |= 0x00000010u;
  if (population_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ChromeUserPopulation>(GetArenaForAllocation());
    population_ = p;
  }
  return population_;
}
inline ::safe_browsing::ChromeUserPopulation* ClientPhishingRequest::mutable_population() {
  ::safe_browsing::ChromeUserPopulation* _msg = _internal_mutable_population();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.population)
  return _msg;
}
inline void ClientPhishingRequest::set_allocated_population(::safe_browsing::ChromeUserPopulation* population) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete population_;
  }
  if (population) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(population);
    if (message_arena != submessage_arena) {
      population = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, population, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  population_ = population;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientPhishingRequest.population)
}

// optional bool is_dom_match = 21;
inline bool ClientPhishingRequest::_internal_has_is_dom_match() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_is_dom_match() const {
  return _internal_has_is_dom_match();
}
inline void ClientPhishingRequest::clear_is_dom_match() {
  is_dom_match_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ClientPhishingRequest::_internal_is_dom_match() const {
  return is_dom_match_;
}
inline bool ClientPhishingRequest::is_dom_match() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.is_dom_match)
  return _internal_is_dom_match();
}
inline void ClientPhishingRequest::_internal_set_is_dom_match(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_dom_match_ = value;
}
inline void ClientPhishingRequest::set_is_dom_match(bool value) {
  _internal_set_is_dom_match(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.is_dom_match)
}

// repeated .safe_browsing.ReferrerChainEntry referrer_chain = 22;
inline int ClientPhishingRequest::_internal_referrer_chain_size() const {
  return referrer_chain_.size();
}
inline int ClientPhishingRequest::referrer_chain_size() const {
  return _internal_referrer_chain_size();
}
inline void ClientPhishingRequest::clear_referrer_chain() {
  referrer_chain_.Clear();
}
inline ::safe_browsing::ReferrerChainEntry* ClientPhishingRequest::mutable_referrer_chain(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.referrer_chain)
  return referrer_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
ClientPhishingRequest::mutable_referrer_chain() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientPhishingRequest.referrer_chain)
  return &referrer_chain_;
}
inline const ::safe_browsing::ReferrerChainEntry& ClientPhishingRequest::_internal_referrer_chain(int index) const {
  return referrer_chain_.Get(index);
}
inline const ::safe_browsing::ReferrerChainEntry& ClientPhishingRequest::referrer_chain(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.referrer_chain)
  return _internal_referrer_chain(index);
}
inline ::safe_browsing::ReferrerChainEntry* ClientPhishingRequest::_internal_add_referrer_chain() {
  return referrer_chain_.Add();
}
inline ::safe_browsing::ReferrerChainEntry* ClientPhishingRequest::add_referrer_chain() {
  ::safe_browsing::ReferrerChainEntry* _add = _internal_add_referrer_chain();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientPhishingRequest.referrer_chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
ClientPhishingRequest::referrer_chain() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientPhishingRequest.referrer_chain)
  return referrer_chain_;
}

// optional int32 tflite_model_version = 23;
inline bool ClientPhishingRequest::_internal_has_tflite_model_version() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_tflite_model_version() const {
  return _internal_has_tflite_model_version();
}
inline void ClientPhishingRequest::clear_tflite_model_version() {
  tflite_model_version_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t ClientPhishingRequest::_internal_tflite_model_version() const {
  return tflite_model_version_;
}
inline int32_t ClientPhishingRequest::tflite_model_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.tflite_model_version)
  return _internal_tflite_model_version();
}
inline void ClientPhishingRequest::_internal_set_tflite_model_version(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  tflite_model_version_ = value;
}
inline void ClientPhishingRequest::set_tflite_model_version(int32_t value) {
  _internal_set_tflite_model_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.tflite_model_version)
}

// repeated .safe_browsing.ClientPhishingRequest.CategoryScore tflite_model_scores = 24;
inline int ClientPhishingRequest::_internal_tflite_model_scores_size() const {
  return tflite_model_scores_.size();
}
inline int ClientPhishingRequest::tflite_model_scores_size() const {
  return _internal_tflite_model_scores_size();
}
inline void ClientPhishingRequest::clear_tflite_model_scores() {
  tflite_model_scores_.Clear();
}
inline ::safe_browsing::ClientPhishingRequest_CategoryScore* ClientPhishingRequest::mutable_tflite_model_scores(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.tflite_model_scores)
  return tflite_model_scores_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_CategoryScore >*
ClientPhishingRequest::mutable_tflite_model_scores() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientPhishingRequest.tflite_model_scores)
  return &tflite_model_scores_;
}
inline const ::safe_browsing::ClientPhishingRequest_CategoryScore& ClientPhishingRequest::_internal_tflite_model_scores(int index) const {
  return tflite_model_scores_.Get(index);
}
inline const ::safe_browsing::ClientPhishingRequest_CategoryScore& ClientPhishingRequest::tflite_model_scores(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.tflite_model_scores)
  return _internal_tflite_model_scores(index);
}
inline ::safe_browsing::ClientPhishingRequest_CategoryScore* ClientPhishingRequest::_internal_add_tflite_model_scores() {
  return tflite_model_scores_.Add();
}
inline ::safe_browsing::ClientPhishingRequest_CategoryScore* ClientPhishingRequest::add_tflite_model_scores() {
  ::safe_browsing::ClientPhishingRequest_CategoryScore* _add = _internal_add_tflite_model_scores();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientPhishingRequest.tflite_model_scores)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientPhishingRequest_CategoryScore >&
ClientPhishingRequest::tflite_model_scores() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientPhishingRequest.tflite_model_scores)
  return tflite_model_scores_;
}

// optional bool is_tflite_match = 25;
inline bool ClientPhishingRequest::_internal_has_is_tflite_match() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ClientPhishingRequest::has_is_tflite_match() const {
  return _internal_has_is_tflite_match();
}
inline void ClientPhishingRequest::clear_is_tflite_match() {
  is_tflite_match_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ClientPhishingRequest::_internal_is_tflite_match() const {
  return is_tflite_match_;
}
inline bool ClientPhishingRequest::is_tflite_match() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.is_tflite_match)
  return _internal_is_tflite_match();
}
inline void ClientPhishingRequest::_internal_set_is_tflite_match(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_tflite_match_ = value;
}
inline void ClientPhishingRequest::set_is_tflite_match(bool value) {
  _internal_set_is_tflite_match(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingRequest.is_tflite_match)
}

// optional .safe_browsing.VisualFeatures visual_features = 26;
inline bool ClientPhishingRequest::_internal_has_visual_features() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || visual_features_ != nullptr);
  return value;
}
inline bool ClientPhishingRequest::has_visual_features() const {
  return _internal_has_visual_features();
}
inline void ClientPhishingRequest::clear_visual_features() {
  if (visual_features_ != nullptr) visual_features_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::safe_browsing::VisualFeatures& ClientPhishingRequest::_internal_visual_features() const {
  const ::safe_browsing::VisualFeatures* p = visual_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::VisualFeatures&>(
      ::safe_browsing::_VisualFeatures_default_instance_);
}
inline const ::safe_browsing::VisualFeatures& ClientPhishingRequest::visual_features() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingRequest.visual_features)
  return _internal_visual_features();
}
inline void ClientPhishingRequest::unsafe_arena_set_allocated_visual_features(
    ::safe_browsing::VisualFeatures* visual_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visual_features_);
  }
  visual_features_ = visual_features;
  if (visual_features) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientPhishingRequest.visual_features)
}
inline ::safe_browsing::VisualFeatures* ClientPhishingRequest::release_visual_features() {
  _has_bits_[0] &= ~0x00000020u;
  ::safe_browsing::VisualFeatures* temp = visual_features_;
  visual_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::VisualFeatures* ClientPhishingRequest::unsafe_arena_release_visual_features() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientPhishingRequest.visual_features)
  _has_bits_[0] &= ~0x00000020u;
  ::safe_browsing::VisualFeatures* temp = visual_features_;
  visual_features_ = nullptr;
  return temp;
}
inline ::safe_browsing::VisualFeatures* ClientPhishingRequest::_internal_mutable_visual_features() {
  _has_bits_[0] |= 0x00000020u;
  if (visual_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::VisualFeatures>(GetArenaForAllocation());
    visual_features_ = p;
  }
  return visual_features_;
}
inline ::safe_browsing::VisualFeatures* ClientPhishingRequest::mutable_visual_features() {
  ::safe_browsing::VisualFeatures* _msg = _internal_mutable_visual_features();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingRequest.visual_features)
  return _msg;
}
inline void ClientPhishingRequest::set_allocated_visual_features(::safe_browsing::VisualFeatures* visual_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete visual_features_;
  }
  if (visual_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(visual_features);
    if (message_arena != submessage_arena) {
      visual_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visual_features, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  visual_features_ = visual_features;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientPhishingRequest.visual_features)
}

// -------------------------------------------------------------------

// ClientPhishingResponse

// required bool phishy = 1;
inline bool ClientPhishingResponse::_internal_has_phishy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientPhishingResponse::has_phishy() const {
  return _internal_has_phishy();
}
inline void ClientPhishingResponse::clear_phishy() {
  phishy_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ClientPhishingResponse::_internal_phishy() const {
  return phishy_;
}
inline bool ClientPhishingResponse::phishy() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingResponse.phishy)
  return _internal_phishy();
}
inline void ClientPhishingResponse::_internal_set_phishy(bool value) {
  _has_bits_[0] |= 0x00000001u;
  phishy_ = value;
}
inline void ClientPhishingResponse::set_phishy(bool value) {
  _internal_set_phishy(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingResponse.phishy)
}

// repeated string OBSOLETE_whitelist_expression = 2;
inline int ClientPhishingResponse::_internal_obsolete_whitelist_expression_size() const {
  return obsolete_whitelist_expression_.size();
}
inline int ClientPhishingResponse::obsolete_whitelist_expression_size() const {
  return _internal_obsolete_whitelist_expression_size();
}
inline void ClientPhishingResponse::clear_obsolete_whitelist_expression() {
  obsolete_whitelist_expression_.Clear();
}
inline std::string* ClientPhishingResponse::add_obsolete_whitelist_expression() {
  std::string* _s = _internal_add_obsolete_whitelist_expression();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
  return _s;
}
inline const std::string& ClientPhishingResponse::_internal_obsolete_whitelist_expression(int index) const {
  return obsolete_whitelist_expression_.Get(index);
}
inline const std::string& ClientPhishingResponse::obsolete_whitelist_expression(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
  return _internal_obsolete_whitelist_expression(index);
}
inline std::string* ClientPhishingResponse::mutable_obsolete_whitelist_expression(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
  return obsolete_whitelist_expression_.Mutable(index);
}
inline void ClientPhishingResponse::set_obsolete_whitelist_expression(int index, const std::string& value) {
  obsolete_whitelist_expression_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
}
inline void ClientPhishingResponse::set_obsolete_whitelist_expression(int index, std::string&& value) {
  obsolete_whitelist_expression_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
}
inline void ClientPhishingResponse::set_obsolete_whitelist_expression(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_whitelist_expression_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
}
inline void ClientPhishingResponse::set_obsolete_whitelist_expression(int index, const char* value, size_t size) {
  obsolete_whitelist_expression_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
}
inline std::string* ClientPhishingResponse::_internal_add_obsolete_whitelist_expression() {
  return obsolete_whitelist_expression_.Add();
}
inline void ClientPhishingResponse::add_obsolete_whitelist_expression(const std::string& value) {
  obsolete_whitelist_expression_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
}
inline void ClientPhishingResponse::add_obsolete_whitelist_expression(std::string&& value) {
  obsolete_whitelist_expression_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
}
inline void ClientPhishingResponse::add_obsolete_whitelist_expression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_whitelist_expression_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
}
inline void ClientPhishingResponse::add_obsolete_whitelist_expression(const char* value, size_t size) {
  obsolete_whitelist_expression_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientPhishingResponse::obsolete_whitelist_expression() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
  return obsolete_whitelist_expression_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientPhishingResponse::mutable_obsolete_whitelist_expression() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientPhishingResponse.OBSOLETE_whitelist_expression)
  return &obsolete_whitelist_expression_;
}

// -------------------------------------------------------------------

// LoginReputationClientRequest_Frame_Form

// optional string action_url = 1;
inline bool LoginReputationClientRequest_Frame_Form::_internal_has_action_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_Frame_Form::has_action_url() const {
  return _internal_has_action_url();
}
inline void LoginReputationClientRequest_Frame_Form::clear_action_url() {
  action_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginReputationClientRequest_Frame_Form::action_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.Form.action_url)
  return _internal_action_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReputationClientRequest_Frame_Form::set_action_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 action_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.Frame.Form.action_url)
}
inline std::string* LoginReputationClientRequest_Frame_Form::mutable_action_url() {
  std::string* _s = _internal_mutable_action_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.Frame.Form.action_url)
  return _s;
}
inline const std::string& LoginReputationClientRequest_Frame_Form::_internal_action_url() const {
  return action_url_.Get();
}
inline void LoginReputationClientRequest_Frame_Form::_internal_set_action_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_url_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest_Frame_Form::_internal_mutable_action_url() {
  _has_bits_[0] |= 0x00000001u;
  return action_url_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest_Frame_Form::release_action_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.Frame.Form.action_url)
  if (!_internal_has_action_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = action_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_url_.IsDefault()) {
    action_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReputationClientRequest_Frame_Form::set_allocated_action_url(std::string* action_url) {
  if (action_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_url_.SetAllocated(action_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_url_.IsDefault()) {
    action_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.Frame.Form.action_url)
}

// optional bool has_password_field = 2;
inline bool LoginReputationClientRequest_Frame_Form::_internal_has_has_password_field() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_Frame_Form::has_has_password_field() const {
  return _internal_has_has_password_field();
}
inline void LoginReputationClientRequest_Frame_Form::clear_has_password_field() {
  has_password_field_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LoginReputationClientRequest_Frame_Form::_internal_has_password_field() const {
  return has_password_field_;
}
inline bool LoginReputationClientRequest_Frame_Form::has_password_field() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.Form.has_password_field)
  return _internal_has_password_field();
}
inline void LoginReputationClientRequest_Frame_Form::_internal_set_has_password_field(bool value) {
  _has_bits_[0] |= 0x00000002u;
  has_password_field_ = value;
}
inline void LoginReputationClientRequest_Frame_Form::set_has_password_field(bool value) {
  _internal_set_has_password_field(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.Frame.Form.has_password_field)
}

// -------------------------------------------------------------------

// LoginReputationClientRequest_Frame

// optional int32 frame_index = 1;
inline bool LoginReputationClientRequest_Frame::_internal_has_frame_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_Frame::has_frame_index() const {
  return _internal_has_frame_index();
}
inline void LoginReputationClientRequest_Frame::clear_frame_index() {
  frame_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t LoginReputationClientRequest_Frame::_internal_frame_index() const {
  return frame_index_;
}
inline int32_t LoginReputationClientRequest_Frame::frame_index() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.frame_index)
  return _internal_frame_index();
}
inline void LoginReputationClientRequest_Frame::_internal_set_frame_index(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  frame_index_ = value;
}
inline void LoginReputationClientRequest_Frame::set_frame_index(int32_t value) {
  _internal_set_frame_index(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.Frame.frame_index)
}

// optional int32 parent_frame_index = 2;
inline bool LoginReputationClientRequest_Frame::_internal_has_parent_frame_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_Frame::has_parent_frame_index() const {
  return _internal_has_parent_frame_index();
}
inline void LoginReputationClientRequest_Frame::clear_parent_frame_index() {
  parent_frame_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t LoginReputationClientRequest_Frame::_internal_parent_frame_index() const {
  return parent_frame_index_;
}
inline int32_t LoginReputationClientRequest_Frame::parent_frame_index() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.parent_frame_index)
  return _internal_parent_frame_index();
}
inline void LoginReputationClientRequest_Frame::_internal_set_parent_frame_index(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  parent_frame_index_ = value;
}
inline void LoginReputationClientRequest_Frame::set_parent_frame_index(int32_t value) {
  _internal_set_parent_frame_index(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.Frame.parent_frame_index)
}

// optional string url = 3;
inline bool LoginReputationClientRequest_Frame::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_Frame::has_url() const {
  return _internal_has_url();
}
inline void LoginReputationClientRequest_Frame::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginReputationClientRequest_Frame::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReputationClientRequest_Frame::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.Frame.url)
}
inline std::string* LoginReputationClientRequest_Frame::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.Frame.url)
  return _s;
}
inline const std::string& LoginReputationClientRequest_Frame::_internal_url() const {
  return url_.Get();
}
inline void LoginReputationClientRequest_Frame::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest_Frame::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest_Frame::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.Frame.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReputationClientRequest_Frame::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.Frame.url)
}

// optional bool has_password_field = 4;
inline bool LoginReputationClientRequest_Frame::_internal_has_has_password_field() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_Frame::has_has_password_field() const {
  return _internal_has_has_password_field();
}
inline void LoginReputationClientRequest_Frame::clear_has_password_field() {
  has_password_field_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LoginReputationClientRequest_Frame::_internal_has_password_field() const {
  return has_password_field_;
}
inline bool LoginReputationClientRequest_Frame::has_password_field() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.has_password_field)
  return _internal_has_password_field();
}
inline void LoginReputationClientRequest_Frame::_internal_set_has_password_field(bool value) {
  _has_bits_[0] |= 0x00000010u;
  has_password_field_ = value;
}
inline void LoginReputationClientRequest_Frame::set_has_password_field(bool value) {
  _internal_set_has_password_field(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.Frame.has_password_field)
}

// repeated .safe_browsing.ReferrerChainEntry referrer_chain = 5;
inline int LoginReputationClientRequest_Frame::_internal_referrer_chain_size() const {
  return referrer_chain_.size();
}
inline int LoginReputationClientRequest_Frame::referrer_chain_size() const {
  return _internal_referrer_chain_size();
}
inline void LoginReputationClientRequest_Frame::clear_referrer_chain() {
  referrer_chain_.Clear();
}
inline ::safe_browsing::ReferrerChainEntry* LoginReputationClientRequest_Frame::mutable_referrer_chain(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain)
  return referrer_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
LoginReputationClientRequest_Frame::mutable_referrer_chain() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain)
  return &referrer_chain_;
}
inline const ::safe_browsing::ReferrerChainEntry& LoginReputationClientRequest_Frame::_internal_referrer_chain(int index) const {
  return referrer_chain_.Get(index);
}
inline const ::safe_browsing::ReferrerChainEntry& LoginReputationClientRequest_Frame::referrer_chain(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain)
  return _internal_referrer_chain(index);
}
inline ::safe_browsing::ReferrerChainEntry* LoginReputationClientRequest_Frame::_internal_add_referrer_chain() {
  return referrer_chain_.Add();
}
inline ::safe_browsing::ReferrerChainEntry* LoginReputationClientRequest_Frame::add_referrer_chain() {
  ::safe_browsing::ReferrerChainEntry* _add = _internal_add_referrer_chain();
  // @@protoc_insertion_point(field_add:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
LoginReputationClientRequest_Frame::referrer_chain() const {
  // @@protoc_insertion_point(field_list:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain)
  return referrer_chain_;
}

// optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 7;
inline bool LoginReputationClientRequest_Frame::_internal_has_referrer_chain_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || referrer_chain_options_ != nullptr);
  return value;
}
inline bool LoginReputationClientRequest_Frame::has_referrer_chain_options() const {
  return _internal_has_referrer_chain_options();
}
inline void LoginReputationClientRequest_Frame::clear_referrer_chain_options() {
  if (referrer_chain_options_ != nullptr) referrer_chain_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ReferrerChainOptions& LoginReputationClientRequest_Frame::_internal_referrer_chain_options() const {
  const ::safe_browsing::ReferrerChainOptions* p = referrer_chain_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ReferrerChainOptions&>(
      ::safe_browsing::_ReferrerChainOptions_default_instance_);
}
inline const ::safe_browsing::ReferrerChainOptions& LoginReputationClientRequest_Frame::referrer_chain_options() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain_options)
  return _internal_referrer_chain_options();
}
inline void LoginReputationClientRequest_Frame::unsafe_arena_set_allocated_referrer_chain_options(
    ::safe_browsing::ReferrerChainOptions* referrer_chain_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referrer_chain_options_);
  }
  referrer_chain_options_ = referrer_chain_options;
  if (referrer_chain_options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain_options)
}
inline ::safe_browsing::ReferrerChainOptions* LoginReputationClientRequest_Frame::release_referrer_chain_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ReferrerChainOptions* temp = referrer_chain_options_;
  referrer_chain_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ReferrerChainOptions* LoginReputationClientRequest_Frame::unsafe_arena_release_referrer_chain_options() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain_options)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ReferrerChainOptions* temp = referrer_chain_options_;
  referrer_chain_options_ = nullptr;
  return temp;
}
inline ::safe_browsing::ReferrerChainOptions* LoginReputationClientRequest_Frame::_internal_mutable_referrer_chain_options() {
  _has_bits_[0] |= 0x00000002u;
  if (referrer_chain_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ReferrerChainOptions>(GetArenaForAllocation());
    referrer_chain_options_ = p;
  }
  return referrer_chain_options_;
}
inline ::safe_browsing::ReferrerChainOptions* LoginReputationClientRequest_Frame::mutable_referrer_chain_options() {
  ::safe_browsing::ReferrerChainOptions* _msg = _internal_mutable_referrer_chain_options();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain_options)
  return _msg;
}
inline void LoginReputationClientRequest_Frame::set_allocated_referrer_chain_options(::safe_browsing::ReferrerChainOptions* referrer_chain_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete referrer_chain_options_;
  }
  if (referrer_chain_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(referrer_chain_options);
    if (message_arena != submessage_arena) {
      referrer_chain_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referrer_chain_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  referrer_chain_options_ = referrer_chain_options;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.Frame.referrer_chain_options)
}

// repeated .safe_browsing.LoginReputationClientRequest.Frame.Form forms = 6;
inline int LoginReputationClientRequest_Frame::_internal_forms_size() const {
  return forms_.size();
}
inline int LoginReputationClientRequest_Frame::forms_size() const {
  return _internal_forms_size();
}
inline void LoginReputationClientRequest_Frame::clear_forms() {
  forms_.Clear();
}
inline ::safe_browsing::LoginReputationClientRequest_Frame_Form* LoginReputationClientRequest_Frame::mutable_forms(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.Frame.forms)
  return forms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame_Form >*
LoginReputationClientRequest_Frame::mutable_forms() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.LoginReputationClientRequest.Frame.forms)
  return &forms_;
}
inline const ::safe_browsing::LoginReputationClientRequest_Frame_Form& LoginReputationClientRequest_Frame::_internal_forms(int index) const {
  return forms_.Get(index);
}
inline const ::safe_browsing::LoginReputationClientRequest_Frame_Form& LoginReputationClientRequest_Frame::forms(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.Frame.forms)
  return _internal_forms(index);
}
inline ::safe_browsing::LoginReputationClientRequest_Frame_Form* LoginReputationClientRequest_Frame::_internal_add_forms() {
  return forms_.Add();
}
inline ::safe_browsing::LoginReputationClientRequest_Frame_Form* LoginReputationClientRequest_Frame::add_forms() {
  ::safe_browsing::LoginReputationClientRequest_Frame_Form* _add = _internal_add_forms();
  // @@protoc_insertion_point(field_add:safe_browsing.LoginReputationClientRequest.Frame.forms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame_Form >&
LoginReputationClientRequest_Frame::forms() const {
  // @@protoc_insertion_point(field_list:safe_browsing.LoginReputationClientRequest.Frame.forms)
  return forms_;
}

// -------------------------------------------------------------------

// LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType

// optional bool is_account_syncing = 1;
inline bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_internal_has_is_account_syncing() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::has_is_account_syncing() const {
  return _internal_has_is_account_syncing();
}
inline void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::clear_is_account_syncing() {
  is_account_syncing_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_internal_is_account_syncing() const {
  return is_account_syncing_;
}
inline bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::is_account_syncing() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.is_account_syncing)
  return _internal_is_account_syncing();
}
inline void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_internal_set_is_account_syncing(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_account_syncing_ = value;
}
inline void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::set_is_account_syncing(bool value) {
  _internal_set_is_account_syncing(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.is_account_syncing)
}

// optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.AccountType account_type = 2;
inline bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_internal_has_account_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::has_account_type() const {
  return _internal_has_account_type();
}
inline void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::clear_account_type() {
  account_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_internal_account_type() const {
  return static_cast< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType >(account_type_);
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::account_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.account_type)
  return _internal_account_type();
}
inline void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_internal_set_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType value) {
  assert(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  account_type_ = value;
}
inline void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::set_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType value) {
  _internal_set_account_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.account_type)
}

// -------------------------------------------------------------------

// LoginReputationClientRequest_PasswordReuseEvent

// repeated string domains_matching_password = 1;
inline int LoginReputationClientRequest_PasswordReuseEvent::_internal_domains_matching_password_size() const {
  return domains_matching_password_.size();
}
inline int LoginReputationClientRequest_PasswordReuseEvent::domains_matching_password_size() const {
  return _internal_domains_matching_password_size();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::clear_domains_matching_password() {
  domains_matching_password_.Clear();
}
inline std::string* LoginReputationClientRequest_PasswordReuseEvent::add_domains_matching_password() {
  std::string* _s = _internal_add_domains_matching_password();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
  return _s;
}
inline const std::string& LoginReputationClientRequest_PasswordReuseEvent::_internal_domains_matching_password(int index) const {
  return domains_matching_password_.Get(index);
}
inline const std::string& LoginReputationClientRequest_PasswordReuseEvent::domains_matching_password(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
  return _internal_domains_matching_password(index);
}
inline std::string* LoginReputationClientRequest_PasswordReuseEvent::mutable_domains_matching_password(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
  return domains_matching_password_.Mutable(index);
}
inline void LoginReputationClientRequest_PasswordReuseEvent::set_domains_matching_password(int index, const std::string& value) {
  domains_matching_password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
}
inline void LoginReputationClientRequest_PasswordReuseEvent::set_domains_matching_password(int index, std::string&& value) {
  domains_matching_password_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
}
inline void LoginReputationClientRequest_PasswordReuseEvent::set_domains_matching_password(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_matching_password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
}
inline void LoginReputationClientRequest_PasswordReuseEvent::set_domains_matching_password(int index, const char* value, size_t size) {
  domains_matching_password_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
}
inline std::string* LoginReputationClientRequest_PasswordReuseEvent::_internal_add_domains_matching_password() {
  return domains_matching_password_.Add();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::add_domains_matching_password(const std::string& value) {
  domains_matching_password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
}
inline void LoginReputationClientRequest_PasswordReuseEvent::add_domains_matching_password(std::string&& value) {
  domains_matching_password_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
}
inline void LoginReputationClientRequest_PasswordReuseEvent::add_domains_matching_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_matching_password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
}
inline void LoginReputationClientRequest_PasswordReuseEvent::add_domains_matching_password(const char* value, size_t size) {
  domains_matching_password_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoginReputationClientRequest_PasswordReuseEvent::domains_matching_password() const {
  // @@protoc_insertion_point(field_list:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
  return domains_matching_password_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoginReputationClientRequest_PasswordReuseEvent::mutable_domains_matching_password() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.domains_matching_password)
  return &domains_matching_password_;
}

// optional int32 frame_id = 2;
inline bool LoginReputationClientRequest_PasswordReuseEvent::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_PasswordReuseEvent::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::clear_frame_id() {
  frame_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t LoginReputationClientRequest_PasswordReuseEvent::_internal_frame_id() const {
  return frame_id_;
}
inline int32_t LoginReputationClientRequest_PasswordReuseEvent::frame_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.frame_id)
  return _internal_frame_id();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::_internal_set_frame_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_ = value;
}
inline void LoginReputationClientRequest_PasswordReuseEvent::set_frame_id(int32_t value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.frame_id)
}

// optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.SyncAccountType sync_account_type = 4;
inline bool LoginReputationClientRequest_PasswordReuseEvent::_internal_has_sync_account_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_PasswordReuseEvent::has_sync_account_type() const {
  return _internal_has_sync_account_type();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::clear_sync_account_type() {
  sync_account_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent::_internal_sync_account_type() const {
  return static_cast< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType >(sync_account_type_);
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent::sync_account_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.sync_account_type)
  return _internal_sync_account_type();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::_internal_set_sync_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType value) {
  assert(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  sync_account_type_ = value;
}
inline void LoginReputationClientRequest_PasswordReuseEvent::set_sync_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType value) {
  _internal_set_sync_account_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.sync_account_type)
}

// optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordType reused_password_type = 5 [default = REUSED_PASSWORD_TYPE_UNKNOWN];
inline bool LoginReputationClientRequest_PasswordReuseEvent::_internal_has_reused_password_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_PasswordReuseEvent::has_reused_password_type() const {
  return _internal_has_reused_password_type();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::clear_reused_password_type() {
  reused_password_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::_internal_reused_password_type() const {
  return static_cast< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType >(reused_password_type_);
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::reused_password_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.reused_password_type)
  return _internal_reused_password_type();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::_internal_set_reused_password_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType value) {
  assert(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reused_password_type_ = value;
}
inline void LoginReputationClientRequest_PasswordReuseEvent::set_reused_password_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType value) {
  _internal_set_reused_password_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.reused_password_type)
}

// optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType reused_password_account_type = 6;
inline bool LoginReputationClientRequest_PasswordReuseEvent::_internal_has_reused_password_account_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reused_password_account_type_ != nullptr);
  return value;
}
inline bool LoginReputationClientRequest_PasswordReuseEvent::has_reused_password_account_type() const {
  return _internal_has_reused_password_account_type();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::clear_reused_password_account_type() {
  if (reused_password_account_type_ != nullptr) reused_password_account_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& LoginReputationClientRequest_PasswordReuseEvent::_internal_reused_password_account_type() const {
  const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* p = reused_password_account_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType&>(
      ::safe_browsing::_LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_default_instance_);
}
inline const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& LoginReputationClientRequest_PasswordReuseEvent::reused_password_account_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.reused_password_account_type)
  return _internal_reused_password_account_type();
}
inline void LoginReputationClientRequest_PasswordReuseEvent::unsafe_arena_set_allocated_reused_password_account_type(
    ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* reused_password_account_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reused_password_account_type_);
  }
  reused_password_account_type_ = reused_password_account_type;
  if (reused_password_account_type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.reused_password_account_type)
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* LoginReputationClientRequest_PasswordReuseEvent::release_reused_password_account_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* temp = reused_password_account_type_;
  reused_password_account_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* LoginReputationClientRequest_PasswordReuseEvent::unsafe_arena_release_reused_password_account_type() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.reused_password_account_type)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* temp = reused_password_account_type_;
  reused_password_account_type_ = nullptr;
  return temp;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* LoginReputationClientRequest_PasswordReuseEvent::_internal_mutable_reused_password_account_type() {
  _has_bits_[0] |= 0x00000001u;
  if (reused_password_account_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType>(GetArenaForAllocation());
    reused_password_account_type_ = p;
  }
  return reused_password_account_type_;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* LoginReputationClientRequest_PasswordReuseEvent::mutable_reused_password_account_type() {
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* _msg = _internal_mutable_reused_password_account_type();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.reused_password_account_type)
  return _msg;
}
inline void LoginReputationClientRequest_PasswordReuseEvent::set_allocated_reused_password_account_type(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* reused_password_account_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reused_password_account_type_;
  }
  if (reused_password_account_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reused_password_account_type);
    if (message_arena != submessage_arena) {
      reused_password_account_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reused_password_account_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reused_password_account_type_ = reused_password_account_type;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.reused_password_account_type)
}

// -------------------------------------------------------------------

// LoginReputationClientRequest_UrlDisplayExperiment

// optional bool delayed_warnings_enabled = 1;
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_has_delayed_warnings_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::has_delayed_warnings_enabled() const {
  return _internal_has_delayed_warnings_enabled();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::clear_delayed_warnings_enabled() {
  delayed_warnings_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_delayed_warnings_enabled() const {
  return delayed_warnings_enabled_;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::delayed_warnings_enabled() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.delayed_warnings_enabled)
  return _internal_delayed_warnings_enabled();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::_internal_set_delayed_warnings_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  delayed_warnings_enabled_ = value;
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::set_delayed_warnings_enabled(bool value) {
  _internal_set_delayed_warnings_enabled(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.delayed_warnings_enabled)
}

// optional bool delayed_warnings_mouse_clicks_enabled = 2;
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_has_delayed_warnings_mouse_clicks_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::has_delayed_warnings_mouse_clicks_enabled() const {
  return _internal_has_delayed_warnings_mouse_clicks_enabled();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::clear_delayed_warnings_mouse_clicks_enabled() {
  delayed_warnings_mouse_clicks_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_delayed_warnings_mouse_clicks_enabled() const {
  return delayed_warnings_mouse_clicks_enabled_;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::delayed_warnings_mouse_clicks_enabled() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.delayed_warnings_mouse_clicks_enabled)
  return _internal_delayed_warnings_mouse_clicks_enabled();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::_internal_set_delayed_warnings_mouse_clicks_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  delayed_warnings_mouse_clicks_enabled_ = value;
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::set_delayed_warnings_mouse_clicks_enabled(bool value) {
  _internal_set_delayed_warnings_mouse_clicks_enabled(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.delayed_warnings_mouse_clicks_enabled)
}

// optional bool reveal_on_hover = 3;
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_has_reveal_on_hover() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::has_reveal_on_hover() const {
  return _internal_has_reveal_on_hover();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::clear_reveal_on_hover() {
  reveal_on_hover_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_reveal_on_hover() const {
  return reveal_on_hover_;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::reveal_on_hover() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.reveal_on_hover)
  return _internal_reveal_on_hover();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::_internal_set_reveal_on_hover(bool value) {
  _has_bits_[0] |= 0x00000004u;
  reveal_on_hover_ = value;
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::set_reveal_on_hover(bool value) {
  _internal_set_reveal_on_hover(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.reveal_on_hover)
}

// optional bool hide_on_interaction = 4;
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_has_hide_on_interaction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::has_hide_on_interaction() const {
  return _internal_has_hide_on_interaction();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::clear_hide_on_interaction() {
  hide_on_interaction_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_hide_on_interaction() const {
  return hide_on_interaction_;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::hide_on_interaction() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.hide_on_interaction)
  return _internal_hide_on_interaction();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::_internal_set_hide_on_interaction(bool value) {
  _has_bits_[0] |= 0x00000008u;
  hide_on_interaction_ = value;
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::set_hide_on_interaction(bool value) {
  _internal_set_hide_on_interaction(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.hide_on_interaction)
}

// optional bool elide_to_registrable_domain = 5;
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_has_elide_to_registrable_domain() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::has_elide_to_registrable_domain() const {
  return _internal_has_elide_to_registrable_domain();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::clear_elide_to_registrable_domain() {
  elide_to_registrable_domain_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_elide_to_registrable_domain() const {
  return elide_to_registrable_domain_;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::elide_to_registrable_domain() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.elide_to_registrable_domain)
  return _internal_elide_to_registrable_domain();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::_internal_set_elide_to_registrable_domain(bool value) {
  _has_bits_[0] |= 0x00000010u;
  elide_to_registrable_domain_ = value;
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::set_elide_to_registrable_domain(bool value) {
  _internal_set_elide_to_registrable_domain(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.elide_to_registrable_domain)
}

// optional bool simplified_url_display_enabled = 6;
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_has_simplified_url_display_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::has_simplified_url_display_enabled() const {
  return _internal_has_simplified_url_display_enabled();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::clear_simplified_url_display_enabled() {
  simplified_url_display_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::_internal_simplified_url_display_enabled() const {
  return simplified_url_display_enabled_;
}
inline bool LoginReputationClientRequest_UrlDisplayExperiment::simplified_url_display_enabled() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.simplified_url_display_enabled)
  return _internal_simplified_url_display_enabled();
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::_internal_set_simplified_url_display_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  simplified_url_display_enabled_ = value;
}
inline void LoginReputationClientRequest_UrlDisplayExperiment::set_simplified_url_display_enabled(bool value) {
  _internal_set_simplified_url_display_enabled(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment.simplified_url_display_enabled)
}

// -------------------------------------------------------------------

// LoginReputationClientRequest_ReferringAppInfo

// optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo.ReferringAppSource referring_app_source = 1;
inline bool LoginReputationClientRequest_ReferringAppInfo::_internal_has_referring_app_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_ReferringAppInfo::has_referring_app_source() const {
  return _internal_has_referring_app_source();
}
inline void LoginReputationClientRequest_ReferringAppInfo::clear_referring_app_source() {
  referring_app_source_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo::_internal_referring_app_source() const {
  return static_cast< ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource >(referring_app_source_);
}
inline ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo::referring_app_source() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.ReferringAppInfo.referring_app_source)
  return _internal_referring_app_source();
}
inline void LoginReputationClientRequest_ReferringAppInfo::_internal_set_referring_app_source(::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource value) {
  assert(::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  referring_app_source_ = value;
}
inline void LoginReputationClientRequest_ReferringAppInfo::set_referring_app_source(::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource value) {
  _internal_set_referring_app_source(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.ReferringAppInfo.referring_app_source)
}

// optional string referring_app_name = 2;
inline bool LoginReputationClientRequest_ReferringAppInfo::_internal_has_referring_app_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReputationClientRequest_ReferringAppInfo::has_referring_app_name() const {
  return _internal_has_referring_app_name();
}
inline void LoginReputationClientRequest_ReferringAppInfo::clear_referring_app_name() {
  referring_app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginReputationClientRequest_ReferringAppInfo::referring_app_name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.ReferringAppInfo.referring_app_name)
  return _internal_referring_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReputationClientRequest_ReferringAppInfo::set_referring_app_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 referring_app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.ReferringAppInfo.referring_app_name)
}
inline std::string* LoginReputationClientRequest_ReferringAppInfo::mutable_referring_app_name() {
  std::string* _s = _internal_mutable_referring_app_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.ReferringAppInfo.referring_app_name)
  return _s;
}
inline const std::string& LoginReputationClientRequest_ReferringAppInfo::_internal_referring_app_name() const {
  return referring_app_name_.Get();
}
inline void LoginReputationClientRequest_ReferringAppInfo::_internal_set_referring_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  referring_app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest_ReferringAppInfo::_internal_mutable_referring_app_name() {
  _has_bits_[0] |= 0x00000001u;
  return referring_app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest_ReferringAppInfo::release_referring_app_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.ReferringAppInfo.referring_app_name)
  if (!_internal_has_referring_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = referring_app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referring_app_name_.IsDefault()) {
    referring_app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReputationClientRequest_ReferringAppInfo::set_allocated_referring_app_name(std::string* referring_app_name) {
  if (referring_app_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referring_app_name_.SetAllocated(referring_app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referring_app_name_.IsDefault()) {
    referring_app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.ReferringAppInfo.referring_app_name)
}

// -------------------------------------------------------------------

// LoginReputationClientRequest

// optional string page_url = 1;
inline bool LoginReputationClientRequest::_internal_has_page_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReputationClientRequest::has_page_url() const {
  return _internal_has_page_url();
}
inline void LoginReputationClientRequest::clear_page_url() {
  page_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginReputationClientRequest::page_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.page_url)
  return _internal_page_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReputationClientRequest::set_page_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 page_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.page_url)
}
inline std::string* LoginReputationClientRequest::mutable_page_url() {
  std::string* _s = _internal_mutable_page_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.page_url)
  return _s;
}
inline const std::string& LoginReputationClientRequest::_internal_page_url() const {
  return page_url_.Get();
}
inline void LoginReputationClientRequest::_internal_set_page_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  page_url_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest::_internal_mutable_page_url() {
  _has_bits_[0] |= 0x00000001u;
  return page_url_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest::release_page_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.page_url)
  if (!_internal_has_page_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = page_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_url_.IsDefault()) {
    page_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReputationClientRequest::set_allocated_page_url(std::string* page_url) {
  if (page_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_url_.SetAllocated(page_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_url_.IsDefault()) {
    page_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.page_url)
}

// optional .safe_browsing.LoginReputationClientRequest.TriggerType trigger_type = 2;
inline bool LoginReputationClientRequest::_internal_has_trigger_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LoginReputationClientRequest::has_trigger_type() const {
  return _internal_has_trigger_type();
}
inline void LoginReputationClientRequest::clear_trigger_type() {
  trigger_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::safe_browsing::LoginReputationClientRequest_TriggerType LoginReputationClientRequest::_internal_trigger_type() const {
  return static_cast< ::safe_browsing::LoginReputationClientRequest_TriggerType >(trigger_type_);
}
inline ::safe_browsing::LoginReputationClientRequest_TriggerType LoginReputationClientRequest::trigger_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.trigger_type)
  return _internal_trigger_type();
}
inline void LoginReputationClientRequest::_internal_set_trigger_type(::safe_browsing::LoginReputationClientRequest_TriggerType value) {
  assert(::safe_browsing::LoginReputationClientRequest_TriggerType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  trigger_type_ = value;
}
inline void LoginReputationClientRequest::set_trigger_type(::safe_browsing::LoginReputationClientRequest_TriggerType value) {
  _internal_set_trigger_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.trigger_type)
}

// repeated .safe_browsing.LoginReputationClientRequest.Frame frames = 3;
inline int LoginReputationClientRequest::_internal_frames_size() const {
  return frames_.size();
}
inline int LoginReputationClientRequest::frames_size() const {
  return _internal_frames_size();
}
inline void LoginReputationClientRequest::clear_frames() {
  frames_.Clear();
}
inline ::safe_browsing::LoginReputationClientRequest_Frame* LoginReputationClientRequest::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame >*
LoginReputationClientRequest::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.LoginReputationClientRequest.frames)
  return &frames_;
}
inline const ::safe_browsing::LoginReputationClientRequest_Frame& LoginReputationClientRequest::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::safe_browsing::LoginReputationClientRequest_Frame& LoginReputationClientRequest::frames(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.frames)
  return _internal_frames(index);
}
inline ::safe_browsing::LoginReputationClientRequest_Frame* LoginReputationClientRequest::_internal_add_frames() {
  return frames_.Add();
}
inline ::safe_browsing::LoginReputationClientRequest_Frame* LoginReputationClientRequest::add_frames() {
  ::safe_browsing::LoginReputationClientRequest_Frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:safe_browsing.LoginReputationClientRequest.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::LoginReputationClientRequest_Frame >&
LoginReputationClientRequest::frames() const {
  // @@protoc_insertion_point(field_list:safe_browsing.LoginReputationClientRequest.frames)
  return frames_;
}

// optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent password_reuse_event = 4;
inline bool LoginReputationClientRequest::_internal_has_password_reuse_event() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || password_reuse_event_ != nullptr);
  return value;
}
inline bool LoginReputationClientRequest::has_password_reuse_event() const {
  return _internal_has_password_reuse_event();
}
inline void LoginReputationClientRequest::clear_password_reuse_event() {
  if (password_reuse_event_ != nullptr) password_reuse_event_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent& LoginReputationClientRequest::_internal_password_reuse_event() const {
  const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* p = password_reuse_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent&>(
      ::safe_browsing::_LoginReputationClientRequest_PasswordReuseEvent_default_instance_);
}
inline const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent& LoginReputationClientRequest::password_reuse_event() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.password_reuse_event)
  return _internal_password_reuse_event();
}
inline void LoginReputationClientRequest::unsafe_arena_set_allocated_password_reuse_event(
    ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* password_reuse_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_reuse_event_);
  }
  password_reuse_event_ = password_reuse_event;
  if (password_reuse_event) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.LoginReputationClientRequest.password_reuse_event)
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* LoginReputationClientRequest::release_password_reuse_event() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* temp = password_reuse_event_;
  password_reuse_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* LoginReputationClientRequest::unsafe_arena_release_password_reuse_event() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.password_reuse_event)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* temp = password_reuse_event_;
  password_reuse_event_ = nullptr;
  return temp;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* LoginReputationClientRequest::_internal_mutable_password_reuse_event() {
  _has_bits_[0] |= 0x00000004u;
  if (password_reuse_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent>(GetArenaForAllocation());
    password_reuse_event_ = p;
  }
  return password_reuse_event_;
}
inline ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* LoginReputationClientRequest::mutable_password_reuse_event() {
  ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* _msg = _internal_mutable_password_reuse_event();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.password_reuse_event)
  return _msg;
}
inline void LoginReputationClientRequest::set_allocated_password_reuse_event(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent* password_reuse_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete password_reuse_event_;
  }
  if (password_reuse_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(password_reuse_event);
    if (message_arena != submessage_arena) {
      password_reuse_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password_reuse_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_reuse_event_ = password_reuse_event;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.password_reuse_event)
}

// optional int32 stored_verdict_cnt = 5;
inline bool LoginReputationClientRequest::_internal_has_stored_verdict_cnt() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LoginReputationClientRequest::has_stored_verdict_cnt() const {
  return _internal_has_stored_verdict_cnt();
}
inline void LoginReputationClientRequest::clear_stored_verdict_cnt() {
  stored_verdict_cnt_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t LoginReputationClientRequest::_internal_stored_verdict_cnt() const {
  return stored_verdict_cnt_;
}
inline int32_t LoginReputationClientRequest::stored_verdict_cnt() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.stored_verdict_cnt)
  return _internal_stored_verdict_cnt();
}
inline void LoginReputationClientRequest::_internal_set_stored_verdict_cnt(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  stored_verdict_cnt_ = value;
}
inline void LoginReputationClientRequest::set_stored_verdict_cnt(int32_t value) {
  _internal_set_stored_verdict_cnt(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.stored_verdict_cnt)
}

// optional .safe_browsing.ChromeUserPopulation population = 6;
inline bool LoginReputationClientRequest::_internal_has_population() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || population_ != nullptr);
  return value;
}
inline bool LoginReputationClientRequest::has_population() const {
  return _internal_has_population();
}
inline void LoginReputationClientRequest::clear_population() {
  if (population_ != nullptr) population_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::safe_browsing::ChromeUserPopulation& LoginReputationClientRequest::_internal_population() const {
  const ::safe_browsing::ChromeUserPopulation* p = population_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ChromeUserPopulation&>(
      ::safe_browsing::_ChromeUserPopulation_default_instance_);
}
inline const ::safe_browsing::ChromeUserPopulation& LoginReputationClientRequest::population() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.population)
  return _internal_population();
}
inline void LoginReputationClientRequest::unsafe_arena_set_allocated_population(
    ::safe_browsing::ChromeUserPopulation* population) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(population_);
  }
  population_ = population;
  if (population) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.LoginReputationClientRequest.population)
}
inline ::safe_browsing::ChromeUserPopulation* LoginReputationClientRequest::release_population() {
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* LoginReputationClientRequest::unsafe_arena_release_population() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.population)
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* LoginReputationClientRequest::_internal_mutable_population() {
  _has_bits_[0] |= 0x00000008u;
  if (population_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ChromeUserPopulation>(GetArenaForAllocation());
    population_ = p;
  }
  return population_;
}
inline ::safe_browsing::ChromeUserPopulation* LoginReputationClientRequest::mutable_population() {
  ::safe_browsing::ChromeUserPopulation* _msg = _internal_mutable_population();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.population)
  return _msg;
}
inline void LoginReputationClientRequest::set_allocated_population(::safe_browsing::ChromeUserPopulation* population) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete population_;
  }
  if (population) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(population);
    if (message_arena != submessage_arena) {
      population = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, population, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  population_ = population;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.population)
}

// optional bool clicked_through_interstitial = 7;
inline bool LoginReputationClientRequest::_internal_has_clicked_through_interstitial() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LoginReputationClientRequest::has_clicked_through_interstitial() const {
  return _internal_has_clicked_through_interstitial();
}
inline void LoginReputationClientRequest::clear_clicked_through_interstitial() {
  clicked_through_interstitial_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool LoginReputationClientRequest::_internal_clicked_through_interstitial() const {
  return clicked_through_interstitial_;
}
inline bool LoginReputationClientRequest::clicked_through_interstitial() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.clicked_through_interstitial)
  return _internal_clicked_through_interstitial();
}
inline void LoginReputationClientRequest::_internal_set_clicked_through_interstitial(bool value) {
  _has_bits_[0] |= 0x00000400u;
  clicked_through_interstitial_ = value;
}
inline void LoginReputationClientRequest::set_clicked_through_interstitial(bool value) {
  _internal_set_clicked_through_interstitial(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.clicked_through_interstitial)
}

// optional string content_type = 8;
inline bool LoginReputationClientRequest::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReputationClientRequest::has_content_type() const {
  return _internal_has_content_type();
}
inline void LoginReputationClientRequest::clear_content_type() {
  content_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginReputationClientRequest::content_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReputationClientRequest::set_content_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 content_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.content_type)
}
inline std::string* LoginReputationClientRequest::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.content_type)
  return _s;
}
inline const std::string& LoginReputationClientRequest::_internal_content_type() const {
  return content_type_.Get();
}
inline void LoginReputationClientRequest::_internal_set_content_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest::_internal_mutable_content_type() {
  _has_bits_[0] |= 0x00000002u;
  return content_type_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReputationClientRequest::release_content_type() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.content_type)
  if (!_internal_has_content_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = content_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_type_.IsDefault()) {
    content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReputationClientRequest::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_type_.SetAllocated(content_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_type_.IsDefault()) {
    content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.content_type)
}

// optional int32 content_area_height = 9;
inline bool LoginReputationClientRequest::_internal_has_content_area_height() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LoginReputationClientRequest::has_content_area_height() const {
  return _internal_has_content_area_height();
}
inline void LoginReputationClientRequest::clear_content_area_height() {
  content_area_height_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t LoginReputationClientRequest::_internal_content_area_height() const {
  return content_area_height_;
}
inline int32_t LoginReputationClientRequest::content_area_height() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.content_area_height)
  return _internal_content_area_height();
}
inline void LoginReputationClientRequest::_internal_set_content_area_height(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  content_area_height_ = value;
}
inline void LoginReputationClientRequest::set_content_area_height(int32_t value) {
  _internal_set_content_area_height(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.content_area_height)
}

// optional int32 content_area_width = 10;
inline bool LoginReputationClientRequest::_internal_has_content_area_width() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LoginReputationClientRequest::has_content_area_width() const {
  return _internal_has_content_area_width();
}
inline void LoginReputationClientRequest::clear_content_area_width() {
  content_area_width_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t LoginReputationClientRequest::_internal_content_area_width() const {
  return content_area_width_;
}
inline int32_t LoginReputationClientRequest::content_area_width() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.content_area_width)
  return _internal_content_area_width();
}
inline void LoginReputationClientRequest::_internal_set_content_area_width(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  content_area_width_ = value;
}
inline void LoginReputationClientRequest::set_content_area_width(int32_t value) {
  _internal_set_content_area_width(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.content_area_width)
}

// optional .safe_browsing.VisualFeatures visual_features = 11;
inline bool LoginReputationClientRequest::_internal_has_visual_features() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || visual_features_ != nullptr);
  return value;
}
inline bool LoginReputationClientRequest::has_visual_features() const {
  return _internal_has_visual_features();
}
inline void LoginReputationClientRequest::clear_visual_features() {
  if (visual_features_ != nullptr) visual_features_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::safe_browsing::VisualFeatures& LoginReputationClientRequest::_internal_visual_features() const {
  const ::safe_browsing::VisualFeatures* p = visual_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::VisualFeatures&>(
      ::safe_browsing::_VisualFeatures_default_instance_);
}
inline const ::safe_browsing::VisualFeatures& LoginReputationClientRequest::visual_features() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.visual_features)
  return _internal_visual_features();
}
inline void LoginReputationClientRequest::unsafe_arena_set_allocated_visual_features(
    ::safe_browsing::VisualFeatures* visual_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visual_features_);
  }
  visual_features_ = visual_features;
  if (visual_features) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.LoginReputationClientRequest.visual_features)
}
inline ::safe_browsing::VisualFeatures* LoginReputationClientRequest::release_visual_features() {
  _has_bits_[0] &= ~0x00000010u;
  ::safe_browsing::VisualFeatures* temp = visual_features_;
  visual_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::VisualFeatures* LoginReputationClientRequest::unsafe_arena_release_visual_features() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.visual_features)
  _has_bits_[0] &= ~0x00000010u;
  ::safe_browsing::VisualFeatures* temp = visual_features_;
  visual_features_ = nullptr;
  return temp;
}
inline ::safe_browsing::VisualFeatures* LoginReputationClientRequest::_internal_mutable_visual_features() {
  _has_bits_[0] |= 0x00000010u;
  if (visual_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::VisualFeatures>(GetArenaForAllocation());
    visual_features_ = p;
  }
  return visual_features_;
}
inline ::safe_browsing::VisualFeatures* LoginReputationClientRequest::mutable_visual_features() {
  ::safe_browsing::VisualFeatures* _msg = _internal_mutable_visual_features();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.visual_features)
  return _msg;
}
inline void LoginReputationClientRequest::set_allocated_visual_features(::safe_browsing::VisualFeatures* visual_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete visual_features_;
  }
  if (visual_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(visual_features);
    if (message_arena != submessage_arena) {
      visual_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visual_features, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  visual_features_ = visual_features;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.visual_features)
}

// optional .safe_browsing.DomFeatures dom_features = 12;
inline bool LoginReputationClientRequest::_internal_has_dom_features() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || dom_features_ != nullptr);
  return value;
}
inline bool LoginReputationClientRequest::has_dom_features() const {
  return _internal_has_dom_features();
}
inline void LoginReputationClientRequest::clear_dom_features() {
  if (dom_features_ != nullptr) dom_features_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::safe_browsing::DomFeatures& LoginReputationClientRequest::_internal_dom_features() const {
  const ::safe_browsing::DomFeatures* p = dom_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::DomFeatures&>(
      ::safe_browsing::_DomFeatures_default_instance_);
}
inline const ::safe_browsing::DomFeatures& LoginReputationClientRequest::dom_features() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.dom_features)
  return _internal_dom_features();
}
inline void LoginReputationClientRequest::unsafe_arena_set_allocated_dom_features(
    ::safe_browsing::DomFeatures* dom_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dom_features_);
  }
  dom_features_ = dom_features;
  if (dom_features) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.LoginReputationClientRequest.dom_features)
}
inline ::safe_browsing::DomFeatures* LoginReputationClientRequest::release_dom_features() {
  _has_bits_[0] &= ~0x00000020u;
  ::safe_browsing::DomFeatures* temp = dom_features_;
  dom_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::DomFeatures* LoginReputationClientRequest::unsafe_arena_release_dom_features() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.dom_features)
  _has_bits_[0] &= ~0x00000020u;
  ::safe_browsing::DomFeatures* temp = dom_features_;
  dom_features_ = nullptr;
  return temp;
}
inline ::safe_browsing::DomFeatures* LoginReputationClientRequest::_internal_mutable_dom_features() {
  _has_bits_[0] |= 0x00000020u;
  if (dom_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::DomFeatures>(GetArenaForAllocation());
    dom_features_ = p;
  }
  return dom_features_;
}
inline ::safe_browsing::DomFeatures* LoginReputationClientRequest::mutable_dom_features() {
  ::safe_browsing::DomFeatures* _msg = _internal_mutable_dom_features();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.dom_features)
  return _msg;
}
inline void LoginReputationClientRequest::set_allocated_dom_features(::safe_browsing::DomFeatures* dom_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dom_features_;
  }
  if (dom_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dom_features);
    if (message_arena != submessage_arena) {
      dom_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dom_features, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dom_features_ = dom_features;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.dom_features)
}

// optional .safe_browsing.LoginReputationClientRequest.ReportType report_type = 13;
inline bool LoginReputationClientRequest::_internal_has_report_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LoginReputationClientRequest::has_report_type() const {
  return _internal_has_report_type();
}
inline void LoginReputationClientRequest::clear_report_type() {
  report_type_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::safe_browsing::LoginReputationClientRequest_ReportType LoginReputationClientRequest::_internal_report_type() const {
  return static_cast< ::safe_browsing::LoginReputationClientRequest_ReportType >(report_type_);
}
inline ::safe_browsing::LoginReputationClientRequest_ReportType LoginReputationClientRequest::report_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.report_type)
  return _internal_report_type();
}
inline void LoginReputationClientRequest::_internal_set_report_type(::safe_browsing::LoginReputationClientRequest_ReportType value) {
  assert(::safe_browsing::LoginReputationClientRequest_ReportType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  report_type_ = value;
}
inline void LoginReputationClientRequest::set_report_type(::safe_browsing::LoginReputationClientRequest_ReportType value) {
  _internal_set_report_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientRequest.report_type)
}

// optional .safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment url_display_experiment = 14;
inline bool LoginReputationClientRequest::_internal_has_url_display_experiment() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || url_display_experiment_ != nullptr);
  return value;
}
inline bool LoginReputationClientRequest::has_url_display_experiment() const {
  return _internal_has_url_display_experiment();
}
inline void LoginReputationClientRequest::clear_url_display_experiment() {
  if (url_display_experiment_ != nullptr) url_display_experiment_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment& LoginReputationClientRequest::_internal_url_display_experiment() const {
  const ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* p = url_display_experiment_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment&>(
      ::safe_browsing::_LoginReputationClientRequest_UrlDisplayExperiment_default_instance_);
}
inline const ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment& LoginReputationClientRequest::url_display_experiment() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.url_display_experiment)
  return _internal_url_display_experiment();
}
inline void LoginReputationClientRequest::unsafe_arena_set_allocated_url_display_experiment(
    ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* url_display_experiment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(url_display_experiment_);
  }
  url_display_experiment_ = url_display_experiment;
  if (url_display_experiment) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.LoginReputationClientRequest.url_display_experiment)
}
inline ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* LoginReputationClientRequest::release_url_display_experiment() {
  _has_bits_[0] &= ~0x00000040u;
  ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* temp = url_display_experiment_;
  url_display_experiment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* LoginReputationClientRequest::unsafe_arena_release_url_display_experiment() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.url_display_experiment)
  _has_bits_[0] &= ~0x00000040u;
  ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* temp = url_display_experiment_;
  url_display_experiment_ = nullptr;
  return temp;
}
inline ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* LoginReputationClientRequest::_internal_mutable_url_display_experiment() {
  _has_bits_[0] |= 0x00000040u;
  if (url_display_experiment_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment>(GetArenaForAllocation());
    url_display_experiment_ = p;
  }
  return url_display_experiment_;
}
inline ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* LoginReputationClientRequest::mutable_url_display_experiment() {
  ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* _msg = _internal_mutable_url_display_experiment();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.url_display_experiment)
  return _msg;
}
inline void LoginReputationClientRequest::set_allocated_url_display_experiment(::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment* url_display_experiment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete url_display_experiment_;
  }
  if (url_display_experiment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(url_display_experiment);
    if (message_arena != submessage_arena) {
      url_display_experiment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, url_display_experiment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  url_display_experiment_ = url_display_experiment;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.url_display_experiment)
}

// optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo referring_app_info = 15;
inline bool LoginReputationClientRequest::_internal_has_referring_app_info() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || referring_app_info_ != nullptr);
  return value;
}
inline bool LoginReputationClientRequest::has_referring_app_info() const {
  return _internal_has_referring_app_info();
}
inline void LoginReputationClientRequest::clear_referring_app_info() {
  if (referring_app_info_ != nullptr) referring_app_info_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo& LoginReputationClientRequest::_internal_referring_app_info() const {
  const ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* p = referring_app_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo&>(
      ::safe_browsing::_LoginReputationClientRequest_ReferringAppInfo_default_instance_);
}
inline const ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo& LoginReputationClientRequest::referring_app_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientRequest.referring_app_info)
  return _internal_referring_app_info();
}
inline void LoginReputationClientRequest::unsafe_arena_set_allocated_referring_app_info(
    ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* referring_app_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referring_app_info_);
  }
  referring_app_info_ = referring_app_info;
  if (referring_app_info) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.LoginReputationClientRequest.referring_app_info)
}
inline ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* LoginReputationClientRequest::release_referring_app_info() {
  _has_bits_[0] &= ~0x00000080u;
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* temp = referring_app_info_;
  referring_app_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* LoginReputationClientRequest::unsafe_arena_release_referring_app_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientRequest.referring_app_info)
  _has_bits_[0] &= ~0x00000080u;
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* temp = referring_app_info_;
  referring_app_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* LoginReputationClientRequest::_internal_mutable_referring_app_info() {
  _has_bits_[0] |= 0x00000080u;
  if (referring_app_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::LoginReputationClientRequest_ReferringAppInfo>(GetArenaForAllocation());
    referring_app_info_ = p;
  }
  return referring_app_info_;
}
inline ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* LoginReputationClientRequest::mutable_referring_app_info() {
  ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* _msg = _internal_mutable_referring_app_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientRequest.referring_app_info)
  return _msg;
}
inline void LoginReputationClientRequest::set_allocated_referring_app_info(::safe_browsing::LoginReputationClientRequest_ReferringAppInfo* referring_app_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete referring_app_info_;
  }
  if (referring_app_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(referring_app_info);
    if (message_arena != submessage_arena) {
      referring_app_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referring_app_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  referring_app_info_ = referring_app_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientRequest.referring_app_info)
}

// -------------------------------------------------------------------

// LoginReputationClientResponse

// optional .safe_browsing.LoginReputationClientResponse.VerdictType verdict_type = 1;
inline bool LoginReputationClientResponse::_internal_has_verdict_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginReputationClientResponse::has_verdict_type() const {
  return _internal_has_verdict_type();
}
inline void LoginReputationClientResponse::clear_verdict_type() {
  verdict_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safe_browsing::LoginReputationClientResponse_VerdictType LoginReputationClientResponse::_internal_verdict_type() const {
  return static_cast< ::safe_browsing::LoginReputationClientResponse_VerdictType >(verdict_type_);
}
inline ::safe_browsing::LoginReputationClientResponse_VerdictType LoginReputationClientResponse::verdict_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientResponse.verdict_type)
  return _internal_verdict_type();
}
inline void LoginReputationClientResponse::_internal_set_verdict_type(::safe_browsing::LoginReputationClientResponse_VerdictType value) {
  assert(::safe_browsing::LoginReputationClientResponse_VerdictType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  verdict_type_ = value;
}
inline void LoginReputationClientResponse::set_verdict_type(::safe_browsing::LoginReputationClientResponse_VerdictType value) {
  _internal_set_verdict_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientResponse.verdict_type)
}

// optional int64 cache_duration_sec = 2;
inline bool LoginReputationClientResponse::_internal_has_cache_duration_sec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginReputationClientResponse::has_cache_duration_sec() const {
  return _internal_has_cache_duration_sec();
}
inline void LoginReputationClientResponse::clear_cache_duration_sec() {
  cache_duration_sec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t LoginReputationClientResponse::_internal_cache_duration_sec() const {
  return cache_duration_sec_;
}
inline int64_t LoginReputationClientResponse::cache_duration_sec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientResponse.cache_duration_sec)
  return _internal_cache_duration_sec();
}
inline void LoginReputationClientResponse::_internal_set_cache_duration_sec(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  cache_duration_sec_ = value;
}
inline void LoginReputationClientResponse::set_cache_duration_sec(int64_t value) {
  _internal_set_cache_duration_sec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientResponse.cache_duration_sec)
}

// optional string cache_expression = 3;
inline bool LoginReputationClientResponse::_internal_has_cache_expression() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReputationClientResponse::has_cache_expression() const {
  return _internal_has_cache_expression();
}
inline void LoginReputationClientResponse::clear_cache_expression() {
  cache_expression_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginReputationClientResponse::cache_expression() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientResponse.cache_expression)
  return _internal_cache_expression();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReputationClientResponse::set_cache_expression(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cache_expression_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientResponse.cache_expression)
}
inline std::string* LoginReputationClientResponse::mutable_cache_expression() {
  std::string* _s = _internal_mutable_cache_expression();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientResponse.cache_expression)
  return _s;
}
inline const std::string& LoginReputationClientResponse::_internal_cache_expression() const {
  return cache_expression_.Get();
}
inline void LoginReputationClientResponse::_internal_set_cache_expression(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_expression_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReputationClientResponse::_internal_mutable_cache_expression() {
  _has_bits_[0] |= 0x00000001u;
  return cache_expression_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReputationClientResponse::release_cache_expression() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientResponse.cache_expression)
  if (!_internal_has_cache_expression()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cache_expression_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_expression_.IsDefault()) {
    cache_expression_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReputationClientResponse::set_allocated_cache_expression(std::string* cache_expression) {
  if (cache_expression != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_expression_.SetAllocated(cache_expression, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_expression_.IsDefault()) {
    cache_expression_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientResponse.cache_expression)
}

// optional bool DEPRECATED_cache_expression_exact_match = 4 [deprecated = true];
inline bool LoginReputationClientResponse::_internal_has_deprecated_cache_expression_exact_match() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoginReputationClientResponse::has_deprecated_cache_expression_exact_match() const {
  return _internal_has_deprecated_cache_expression_exact_match();
}
inline void LoginReputationClientResponse::clear_deprecated_cache_expression_exact_match() {
  deprecated_cache_expression_exact_match_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LoginReputationClientResponse::_internal_deprecated_cache_expression_exact_match() const {
  return deprecated_cache_expression_exact_match_;
}
inline bool LoginReputationClientResponse::deprecated_cache_expression_exact_match() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientResponse.DEPRECATED_cache_expression_exact_match)
  return _internal_deprecated_cache_expression_exact_match();
}
inline void LoginReputationClientResponse::_internal_set_deprecated_cache_expression_exact_match(bool value) {
  _has_bits_[0] |= 0x00000010u;
  deprecated_cache_expression_exact_match_ = value;
}
inline void LoginReputationClientResponse::set_deprecated_cache_expression_exact_match(bool value) {
  _internal_set_deprecated_cache_expression_exact_match(value);
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientResponse.DEPRECATED_cache_expression_exact_match)
}

// optional bytes verdict_token = 5;
inline bool LoginReputationClientResponse::_internal_has_verdict_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReputationClientResponse::has_verdict_token() const {
  return _internal_has_verdict_token();
}
inline void LoginReputationClientResponse::clear_verdict_token() {
  verdict_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginReputationClientResponse::verdict_token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.LoginReputationClientResponse.verdict_token)
  return _internal_verdict_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReputationClientResponse::set_verdict_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 verdict_token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.LoginReputationClientResponse.verdict_token)
}
inline std::string* LoginReputationClientResponse::mutable_verdict_token() {
  std::string* _s = _internal_mutable_verdict_token();
  // @@protoc_insertion_point(field_mutable:safe_browsing.LoginReputationClientResponse.verdict_token)
  return _s;
}
inline const std::string& LoginReputationClientResponse::_internal_verdict_token() const {
  return verdict_token_.Get();
}
inline void LoginReputationClientResponse::_internal_set_verdict_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  verdict_token_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReputationClientResponse::_internal_mutable_verdict_token() {
  _has_bits_[0] |= 0x00000002u;
  return verdict_token_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReputationClientResponse::release_verdict_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.LoginReputationClientResponse.verdict_token)
  if (!_internal_has_verdict_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = verdict_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verdict_token_.IsDefault()) {
    verdict_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReputationClientResponse::set_allocated_verdict_token(std::string* verdict_token) {
  if (verdict_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verdict_token_.SetAllocated(verdict_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verdict_token_.IsDefault()) {
    verdict_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.LoginReputationClientResponse.verdict_token)
}

// -------------------------------------------------------------------

// VisualFeatures_BlurredImage

// optional int32 width = 1;
inline bool VisualFeatures_BlurredImage::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VisualFeatures_BlurredImage::has_width() const {
  return _internal_has_width();
}
inline void VisualFeatures_BlurredImage::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t VisualFeatures_BlurredImage::_internal_width() const {
  return width_;
}
inline int32_t VisualFeatures_BlurredImage::width() const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualFeatures.BlurredImage.width)
  return _internal_width();
}
inline void VisualFeatures_BlurredImage::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void VisualFeatures_BlurredImage::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:safe_browsing.VisualFeatures.BlurredImage.width)
}

// optional int32 height = 2;
inline bool VisualFeatures_BlurredImage::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VisualFeatures_BlurredImage::has_height() const {
  return _internal_has_height();
}
inline void VisualFeatures_BlurredImage::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t VisualFeatures_BlurredImage::_internal_height() const {
  return height_;
}
inline int32_t VisualFeatures_BlurredImage::height() const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualFeatures.BlurredImage.height)
  return _internal_height();
}
inline void VisualFeatures_BlurredImage::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void VisualFeatures_BlurredImage::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:safe_browsing.VisualFeatures.BlurredImage.height)
}

// optional bytes data = 3;
inline bool VisualFeatures_BlurredImage::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VisualFeatures_BlurredImage::has_data() const {
  return _internal_has_data();
}
inline void VisualFeatures_BlurredImage::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VisualFeatures_BlurredImage::data() const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualFeatures.BlurredImage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisualFeatures_BlurredImage::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.VisualFeatures.BlurredImage.data)
}
inline std::string* VisualFeatures_BlurredImage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:safe_browsing.VisualFeatures.BlurredImage.data)
  return _s;
}
inline const std::string& VisualFeatures_BlurredImage::_internal_data() const {
  return data_.Get();
}
inline void VisualFeatures_BlurredImage::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* VisualFeatures_BlurredImage::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* VisualFeatures_BlurredImage::release_data() {
  // @@protoc_insertion_point(field_release:safe_browsing.VisualFeatures.BlurredImage.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VisualFeatures_BlurredImage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.VisualFeatures.BlurredImage.data)
}

// -------------------------------------------------------------------

// VisualFeatures

// optional .safe_browsing.VisualFeatures.BlurredImage image = 2;
inline bool VisualFeatures::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool VisualFeatures::has_image() const {
  return _internal_has_image();
}
inline void VisualFeatures::clear_image() {
  if (image_ != nullptr) image_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::VisualFeatures_BlurredImage& VisualFeatures::_internal_image() const {
  const ::safe_browsing::VisualFeatures_BlurredImage* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::VisualFeatures_BlurredImage&>(
      ::safe_browsing::_VisualFeatures_BlurredImage_default_instance_);
}
inline const ::safe_browsing::VisualFeatures_BlurredImage& VisualFeatures::image() const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualFeatures.image)
  return _internal_image();
}
inline void VisualFeatures::unsafe_arena_set_allocated_image(
    ::safe_browsing::VisualFeatures_BlurredImage* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.VisualFeatures.image)
}
inline ::safe_browsing::VisualFeatures_BlurredImage* VisualFeatures::release_image() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::VisualFeatures_BlurredImage* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::VisualFeatures_BlurredImage* VisualFeatures::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:safe_browsing.VisualFeatures.image)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::VisualFeatures_BlurredImage* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::safe_browsing::VisualFeatures_BlurredImage* VisualFeatures::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000001u;
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::VisualFeatures_BlurredImage>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::safe_browsing::VisualFeatures_BlurredImage* VisualFeatures::mutable_image() {
  ::safe_browsing::VisualFeatures_BlurredImage* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:safe_browsing.VisualFeatures.image)
  return _msg;
}
inline void VisualFeatures::set_allocated_image(::safe_browsing::VisualFeatures_BlurredImage* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.VisualFeatures.image)
}

// -------------------------------------------------------------------

// DomFeatures_Feature

// optional string name = 1;
inline bool DomFeatures_Feature::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DomFeatures_Feature::has_name() const {
  return _internal_has_name();
}
inline void DomFeatures_Feature::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DomFeatures_Feature::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DomFeatures.Feature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DomFeatures_Feature::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.DomFeatures.Feature.name)
}
inline std::string* DomFeatures_Feature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.DomFeatures.Feature.name)
  return _s;
}
inline const std::string& DomFeatures_Feature::_internal_name() const {
  return name_.Get();
}
inline void DomFeatures_Feature::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* DomFeatures_Feature::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* DomFeatures_Feature::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.DomFeatures.Feature.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DomFeatures_Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DomFeatures.Feature.name)
}

// optional double value = 2;
inline bool DomFeatures_Feature::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DomFeatures_Feature::has_value() const {
  return _internal_has_value();
}
inline void DomFeatures_Feature::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DomFeatures_Feature::_internal_value() const {
  return value_;
}
inline double DomFeatures_Feature::value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DomFeatures.Feature.value)
  return _internal_value();
}
inline void DomFeatures_Feature::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void DomFeatures_Feature::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DomFeatures.Feature.value)
}

// -------------------------------------------------------------------

// DomFeatures

// repeated .safe_browsing.DomFeatures.Feature feature_map = 1;
inline int DomFeatures::_internal_feature_map_size() const {
  return feature_map_.size();
}
inline int DomFeatures::feature_map_size() const {
  return _internal_feature_map_size();
}
inline void DomFeatures::clear_feature_map() {
  feature_map_.Clear();
}
inline ::safe_browsing::DomFeatures_Feature* DomFeatures::mutable_feature_map(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.DomFeatures.feature_map)
  return feature_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DomFeatures_Feature >*
DomFeatures::mutable_feature_map() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.DomFeatures.feature_map)
  return &feature_map_;
}
inline const ::safe_browsing::DomFeatures_Feature& DomFeatures::_internal_feature_map(int index) const {
  return feature_map_.Get(index);
}
inline const ::safe_browsing::DomFeatures_Feature& DomFeatures::feature_map(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.DomFeatures.feature_map)
  return _internal_feature_map(index);
}
inline ::safe_browsing::DomFeatures_Feature* DomFeatures::_internal_add_feature_map() {
  return feature_map_.Add();
}
inline ::safe_browsing::DomFeatures_Feature* DomFeatures::add_feature_map() {
  ::safe_browsing::DomFeatures_Feature* _add = _internal_add_feature_map();
  // @@protoc_insertion_point(field_add:safe_browsing.DomFeatures.feature_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DomFeatures_Feature >&
DomFeatures::feature_map() const {
  // @@protoc_insertion_point(field_list:safe_browsing.DomFeatures.feature_map)
  return feature_map_;
}

// repeated uint32 shingle_hashes = 2 [packed = true];
inline int DomFeatures::_internal_shingle_hashes_size() const {
  return shingle_hashes_.size();
}
inline int DomFeatures::shingle_hashes_size() const {
  return _internal_shingle_hashes_size();
}
inline void DomFeatures::clear_shingle_hashes() {
  shingle_hashes_.Clear();
}
inline uint32_t DomFeatures::_internal_shingle_hashes(int index) const {
  return shingle_hashes_.Get(index);
}
inline uint32_t DomFeatures::shingle_hashes(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.DomFeatures.shingle_hashes)
  return _internal_shingle_hashes(index);
}
inline void DomFeatures::set_shingle_hashes(int index, uint32_t value) {
  shingle_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.DomFeatures.shingle_hashes)
}
inline void DomFeatures::_internal_add_shingle_hashes(uint32_t value) {
  shingle_hashes_.Add(value);
}
inline void DomFeatures::add_shingle_hashes(uint32_t value) {
  _internal_add_shingle_hashes(value);
  // @@protoc_insertion_point(field_add:safe_browsing.DomFeatures.shingle_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DomFeatures::_internal_shingle_hashes() const {
  return shingle_hashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
DomFeatures::shingle_hashes() const {
  // @@protoc_insertion_point(field_list:safe_browsing.DomFeatures.shingle_hashes)
  return _internal_shingle_hashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DomFeatures::_internal_mutable_shingle_hashes() {
  return &shingle_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
DomFeatures::mutable_shingle_hashes() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.DomFeatures.shingle_hashes)
  return _internal_mutable_shingle_hashes();
}

// optional int32 model_version = 3;
inline bool DomFeatures::_internal_has_model_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DomFeatures::has_model_version() const {
  return _internal_has_model_version();
}
inline void DomFeatures::clear_model_version() {
  model_version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DomFeatures::_internal_model_version() const {
  return model_version_;
}
inline int32_t DomFeatures::model_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DomFeatures.model_version)
  return _internal_model_version();
}
inline void DomFeatures::_internal_set_model_version(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  model_version_ = value;
}
inline void DomFeatures::set_model_version(int32_t value) {
  _internal_set_model_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DomFeatures.model_version)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_Digests

// optional bytes sha256 = 1;
inline bool ClientDownloadRequest_Digests::_internal_has_sha256() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_Digests::has_sha256() const {
  return _internal_has_sha256();
}
inline void ClientDownloadRequest_Digests::clear_sha256() {
  sha256_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_Digests::sha256() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.Digests.sha256)
  return _internal_sha256();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_Digests::set_sha256(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha256_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.Digests.sha256)
}
inline std::string* ClientDownloadRequest_Digests::mutable_sha256() {
  std::string* _s = _internal_mutable_sha256();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.Digests.sha256)
  return _s;
}
inline const std::string& ClientDownloadRequest_Digests::_internal_sha256() const {
  return sha256_.Get();
}
inline void ClientDownloadRequest_Digests::_internal_set_sha256(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha256_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Digests::_internal_mutable_sha256() {
  _has_bits_[0] |= 0x00000001u;
  return sha256_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Digests::release_sha256() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.Digests.sha256)
  if (!_internal_has_sha256()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha256_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha256_.IsDefault()) {
    sha256_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_Digests::set_allocated_sha256(std::string* sha256) {
  if (sha256 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha256_.SetAllocated(sha256, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha256_.IsDefault()) {
    sha256_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.Digests.sha256)
}

// optional bytes sha1 = 2;
inline bool ClientDownloadRequest_Digests::_internal_has_sha1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_Digests::has_sha1() const {
  return _internal_has_sha1();
}
inline void ClientDownloadRequest_Digests::clear_sha1() {
  sha1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientDownloadRequest_Digests::sha1() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.Digests.sha1)
  return _internal_sha1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_Digests::set_sha1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.Digests.sha1)
}
inline std::string* ClientDownloadRequest_Digests::mutable_sha1() {
  std::string* _s = _internal_mutable_sha1();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.Digests.sha1)
  return _s;
}
inline const std::string& ClientDownloadRequest_Digests::_internal_sha1() const {
  return sha1_.Get();
}
inline void ClientDownloadRequest_Digests::_internal_set_sha1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha1_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Digests::_internal_mutable_sha1() {
  _has_bits_[0] |= 0x00000002u;
  return sha1_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Digests::release_sha1() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.Digests.sha1)
  if (!_internal_has_sha1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha1_.IsDefault()) {
    sha1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_Digests::set_allocated_sha1(std::string* sha1) {
  if (sha1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha1_.SetAllocated(sha1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha1_.IsDefault()) {
    sha1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.Digests.sha1)
}

// optional bytes md5 = 3;
inline bool ClientDownloadRequest_Digests::_internal_has_md5() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDownloadRequest_Digests::has_md5() const {
  return _internal_has_md5();
}
inline void ClientDownloadRequest_Digests::clear_md5() {
  md5_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientDownloadRequest_Digests::md5() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.Digests.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_Digests::set_md5(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 md5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.Digests.md5)
}
inline std::string* ClientDownloadRequest_Digests::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.Digests.md5)
  return _s;
}
inline const std::string& ClientDownloadRequest_Digests::_internal_md5() const {
  return md5_.Get();
}
inline void ClientDownloadRequest_Digests::_internal_set_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  md5_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Digests::_internal_mutable_md5() {
  _has_bits_[0] |= 0x00000004u;
  return md5_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Digests::release_md5() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.Digests.md5)
  if (!_internal_has_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = md5_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (md5_.IsDefault()) {
    md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_Digests::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  md5_.SetAllocated(md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (md5_.IsDefault()) {
    md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.Digests.md5)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_Resource

// required string url = 1;
inline bool ClientDownloadRequest_Resource::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_Resource::has_url() const {
  return _internal_has_url();
}
inline void ClientDownloadRequest_Resource::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_Resource::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.Resource.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_Resource::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.Resource.url)
}
inline std::string* ClientDownloadRequest_Resource::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.Resource.url)
  return _s;
}
inline const std::string& ClientDownloadRequest_Resource::_internal_url() const {
  return url_.Get();
}
inline void ClientDownloadRequest_Resource::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Resource::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Resource::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.Resource.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_Resource::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.Resource.url)
}

// required .safe_browsing.ClientDownloadRequest.ResourceType type = 2;
inline bool ClientDownloadRequest_Resource::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientDownloadRequest_Resource::has_type() const {
  return _internal_has_type();
}
inline void ClientDownloadRequest_Resource::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safe_browsing::ClientDownloadRequest_ResourceType ClientDownloadRequest_Resource::_internal_type() const {
  return static_cast< ::safe_browsing::ClientDownloadRequest_ResourceType >(type_);
}
inline ::safe_browsing::ClientDownloadRequest_ResourceType ClientDownloadRequest_Resource::type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.Resource.type)
  return _internal_type();
}
inline void ClientDownloadRequest_Resource::_internal_set_type(::safe_browsing::ClientDownloadRequest_ResourceType value) {
  assert(::safe_browsing::ClientDownloadRequest_ResourceType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void ClientDownloadRequest_Resource::set_type(::safe_browsing::ClientDownloadRequest_ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.Resource.type)
}

// optional bytes remote_ip = 3;
inline bool ClientDownloadRequest_Resource::_internal_has_remote_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_Resource::has_remote_ip() const {
  return _internal_has_remote_ip();
}
inline void ClientDownloadRequest_Resource::clear_remote_ip() {
  remote_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientDownloadRequest_Resource::remote_ip() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.Resource.remote_ip)
  return _internal_remote_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_Resource::set_remote_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 remote_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.Resource.remote_ip)
}
inline std::string* ClientDownloadRequest_Resource::mutable_remote_ip() {
  std::string* _s = _internal_mutable_remote_ip();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.Resource.remote_ip)
  return _s;
}
inline const std::string& ClientDownloadRequest_Resource::_internal_remote_ip() const {
  return remote_ip_.Get();
}
inline void ClientDownloadRequest_Resource::_internal_set_remote_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  remote_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Resource::_internal_mutable_remote_ip() {
  _has_bits_[0] |= 0x00000002u;
  return remote_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Resource::release_remote_ip() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.Resource.remote_ip)
  if (!_internal_has_remote_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = remote_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_ip_.IsDefault()) {
    remote_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_Resource::set_allocated_remote_ip(std::string* remote_ip) {
  if (remote_ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  remote_ip_.SetAllocated(remote_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_ip_.IsDefault()) {
    remote_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.Resource.remote_ip)
}

// optional string referrer = 4;
inline bool ClientDownloadRequest_Resource::_internal_has_referrer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDownloadRequest_Resource::has_referrer() const {
  return _internal_has_referrer();
}
inline void ClientDownloadRequest_Resource::clear_referrer() {
  referrer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientDownloadRequest_Resource::referrer() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.Resource.referrer)
  return _internal_referrer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_Resource::set_referrer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 referrer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.Resource.referrer)
}
inline std::string* ClientDownloadRequest_Resource::mutable_referrer() {
  std::string* _s = _internal_mutable_referrer();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.Resource.referrer)
  return _s;
}
inline const std::string& ClientDownloadRequest_Resource::_internal_referrer() const {
  return referrer_.Get();
}
inline void ClientDownloadRequest_Resource::_internal_set_referrer(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  referrer_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Resource::_internal_mutable_referrer() {
  _has_bits_[0] |= 0x00000004u;
  return referrer_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_Resource::release_referrer() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.Resource.referrer)
  if (!_internal_has_referrer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = referrer_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_.IsDefault()) {
    referrer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_Resource::set_allocated_referrer(std::string* referrer) {
  if (referrer != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  referrer_.SetAllocated(referrer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_.IsDefault()) {
    referrer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.Resource.referrer)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_CertificateChain_Element

// optional bytes certificate = 1;
inline bool ClientDownloadRequest_CertificateChain_Element::_internal_has_certificate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_CertificateChain_Element::has_certificate() const {
  return _internal_has_certificate();
}
inline void ClientDownloadRequest_CertificateChain_Element::clear_certificate() {
  certificate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_CertificateChain_Element::certificate() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.CertificateChain.Element.certificate)
  return _internal_certificate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_CertificateChain_Element::set_certificate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 certificate_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.CertificateChain.Element.certificate)
}
inline std::string* ClientDownloadRequest_CertificateChain_Element::mutable_certificate() {
  std::string* _s = _internal_mutable_certificate();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.CertificateChain.Element.certificate)
  return _s;
}
inline const std::string& ClientDownloadRequest_CertificateChain_Element::_internal_certificate() const {
  return certificate_.Get();
}
inline void ClientDownloadRequest_CertificateChain_Element::_internal_set_certificate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  certificate_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_CertificateChain_Element::_internal_mutable_certificate() {
  _has_bits_[0] |= 0x00000001u;
  return certificate_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_CertificateChain_Element::release_certificate() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.CertificateChain.Element.certificate)
  if (!_internal_has_certificate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = certificate_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (certificate_.IsDefault()) {
    certificate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_CertificateChain_Element::set_allocated_certificate(std::string* certificate) {
  if (certificate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  certificate_.SetAllocated(certificate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (certificate_.IsDefault()) {
    certificate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.CertificateChain.Element.certificate)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_CertificateChain

// repeated .safe_browsing.ClientDownloadRequest.CertificateChain.Element element = 1;
inline int ClientDownloadRequest_CertificateChain::_internal_element_size() const {
  return element_.size();
}
inline int ClientDownloadRequest_CertificateChain::element_size() const {
  return _internal_element_size();
}
inline void ClientDownloadRequest_CertificateChain::clear_element() {
  element_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_CertificateChain_Element* ClientDownloadRequest_CertificateChain::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.CertificateChain.element)
  return element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain_Element >*
ClientDownloadRequest_CertificateChain::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.CertificateChain.element)
  return &element_;
}
inline const ::safe_browsing::ClientDownloadRequest_CertificateChain_Element& ClientDownloadRequest_CertificateChain::_internal_element(int index) const {
  return element_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_CertificateChain_Element& ClientDownloadRequest_CertificateChain::element(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.CertificateChain.element)
  return _internal_element(index);
}
inline ::safe_browsing::ClientDownloadRequest_CertificateChain_Element* ClientDownloadRequest_CertificateChain::_internal_add_element() {
  return element_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_CertificateChain_Element* ClientDownloadRequest_CertificateChain::add_element() {
  ::safe_browsing::ClientDownloadRequest_CertificateChain_Element* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.CertificateChain.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain_Element >&
ClientDownloadRequest_CertificateChain::element() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.CertificateChain.element)
  return element_;
}

// -------------------------------------------------------------------

// ClientDownloadRequest_ExtendedAttr

// required string key = 1;
inline bool ClientDownloadRequest_ExtendedAttr::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ExtendedAttr::has_key() const {
  return _internal_has_key();
}
inline void ClientDownloadRequest_ExtendedAttr::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_ExtendedAttr::key() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ExtendedAttr.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_ExtendedAttr::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ExtendedAttr.key)
}
inline std::string* ClientDownloadRequest_ExtendedAttr::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.ExtendedAttr.key)
  return _s;
}
inline const std::string& ClientDownloadRequest_ExtendedAttr::_internal_key() const {
  return key_.Get();
}
inline void ClientDownloadRequest_ExtendedAttr::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_ExtendedAttr::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_ExtendedAttr::release_key() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.ExtendedAttr.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_ExtendedAttr::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.ExtendedAttr.key)
}

// optional bytes value = 2;
inline bool ClientDownloadRequest_ExtendedAttr::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ExtendedAttr::has_value() const {
  return _internal_has_value();
}
inline void ClientDownloadRequest_ExtendedAttr::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientDownloadRequest_ExtendedAttr::value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ExtendedAttr.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_ExtendedAttr::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ExtendedAttr.value)
}
inline std::string* ClientDownloadRequest_ExtendedAttr::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.ExtendedAttr.value)
  return _s;
}
inline const std::string& ClientDownloadRequest_ExtendedAttr::_internal_value() const {
  return value_.Get();
}
inline void ClientDownloadRequest_ExtendedAttr::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_ExtendedAttr::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_ExtendedAttr::release_value() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.ExtendedAttr.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_ExtendedAttr::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.ExtendedAttr.value)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_SignatureInfo

// repeated .safe_browsing.ClientDownloadRequest.CertificateChain certificate_chain = 1;
inline int ClientDownloadRequest_SignatureInfo::_internal_certificate_chain_size() const {
  return certificate_chain_.size();
}
inline int ClientDownloadRequest_SignatureInfo::certificate_chain_size() const {
  return _internal_certificate_chain_size();
}
inline void ClientDownloadRequest_SignatureInfo::clear_certificate_chain() {
  certificate_chain_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_CertificateChain* ClientDownloadRequest_SignatureInfo::mutable_certificate_chain(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.SignatureInfo.certificate_chain)
  return certificate_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain >*
ClientDownloadRequest_SignatureInfo::mutable_certificate_chain() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.SignatureInfo.certificate_chain)
  return &certificate_chain_;
}
inline const ::safe_browsing::ClientDownloadRequest_CertificateChain& ClientDownloadRequest_SignatureInfo::_internal_certificate_chain(int index) const {
  return certificate_chain_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_CertificateChain& ClientDownloadRequest_SignatureInfo::certificate_chain(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.SignatureInfo.certificate_chain)
  return _internal_certificate_chain(index);
}
inline ::safe_browsing::ClientDownloadRequest_CertificateChain* ClientDownloadRequest_SignatureInfo::_internal_add_certificate_chain() {
  return certificate_chain_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_CertificateChain* ClientDownloadRequest_SignatureInfo::add_certificate_chain() {
  ::safe_browsing::ClientDownloadRequest_CertificateChain* _add = _internal_add_certificate_chain();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.SignatureInfo.certificate_chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_CertificateChain >&
ClientDownloadRequest_SignatureInfo::certificate_chain() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.SignatureInfo.certificate_chain)
  return certificate_chain_;
}

// optional bool trusted = 2;
inline bool ClientDownloadRequest_SignatureInfo::_internal_has_trusted() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_SignatureInfo::has_trusted() const {
  return _internal_has_trusted();
}
inline void ClientDownloadRequest_SignatureInfo::clear_trusted() {
  trusted_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ClientDownloadRequest_SignatureInfo::_internal_trusted() const {
  return trusted_;
}
inline bool ClientDownloadRequest_SignatureInfo::trusted() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.SignatureInfo.trusted)
  return _internal_trusted();
}
inline void ClientDownloadRequest_SignatureInfo::_internal_set_trusted(bool value) {
  _has_bits_[0] |= 0x00000001u;
  trusted_ = value;
}
inline void ClientDownloadRequest_SignatureInfo::set_trusted(bool value) {
  _internal_set_trusted(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.SignatureInfo.trusted)
}

// repeated bytes signed_data = 3;
inline int ClientDownloadRequest_SignatureInfo::_internal_signed_data_size() const {
  return signed_data_.size();
}
inline int ClientDownloadRequest_SignatureInfo::signed_data_size() const {
  return _internal_signed_data_size();
}
inline void ClientDownloadRequest_SignatureInfo::clear_signed_data() {
  signed_data_.Clear();
}
inline std::string* ClientDownloadRequest_SignatureInfo::add_signed_data() {
  std::string* _s = _internal_add_signed_data();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
  return _s;
}
inline const std::string& ClientDownloadRequest_SignatureInfo::_internal_signed_data(int index) const {
  return signed_data_.Get(index);
}
inline const std::string& ClientDownloadRequest_SignatureInfo::signed_data(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
  return _internal_signed_data(index);
}
inline std::string* ClientDownloadRequest_SignatureInfo::mutable_signed_data(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
  return signed_data_.Mutable(index);
}
inline void ClientDownloadRequest_SignatureInfo::set_signed_data(int index, const std::string& value) {
  signed_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
}
inline void ClientDownloadRequest_SignatureInfo::set_signed_data(int index, std::string&& value) {
  signed_data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
}
inline void ClientDownloadRequest_SignatureInfo::set_signed_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signed_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
}
inline void ClientDownloadRequest_SignatureInfo::set_signed_data(int index, const void* value, size_t size) {
  signed_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
}
inline std::string* ClientDownloadRequest_SignatureInfo::_internal_add_signed_data() {
  return signed_data_.Add();
}
inline void ClientDownloadRequest_SignatureInfo::add_signed_data(const std::string& value) {
  signed_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
}
inline void ClientDownloadRequest_SignatureInfo::add_signed_data(std::string&& value) {
  signed_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
}
inline void ClientDownloadRequest_SignatureInfo::add_signed_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signed_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
}
inline void ClientDownloadRequest_SignatureInfo::add_signed_data(const void* value, size_t size) {
  signed_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientDownloadRequest_SignatureInfo::signed_data() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
  return signed_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientDownloadRequest_SignatureInfo::mutable_signed_data() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.SignatureInfo.signed_data)
  return &signed_data_;
}

// repeated .safe_browsing.ClientDownloadRequest.ExtendedAttr xattr = 4;
inline int ClientDownloadRequest_SignatureInfo::_internal_xattr_size() const {
  return xattr_.size();
}
inline int ClientDownloadRequest_SignatureInfo::xattr_size() const {
  return _internal_xattr_size();
}
inline void ClientDownloadRequest_SignatureInfo::clear_xattr() {
  xattr_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_ExtendedAttr* ClientDownloadRequest_SignatureInfo::mutable_xattr(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.SignatureInfo.xattr)
  return xattr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ExtendedAttr >*
ClientDownloadRequest_SignatureInfo::mutable_xattr() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.SignatureInfo.xattr)
  return &xattr_;
}
inline const ::safe_browsing::ClientDownloadRequest_ExtendedAttr& ClientDownloadRequest_SignatureInfo::_internal_xattr(int index) const {
  return xattr_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_ExtendedAttr& ClientDownloadRequest_SignatureInfo::xattr(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.SignatureInfo.xattr)
  return _internal_xattr(index);
}
inline ::safe_browsing::ClientDownloadRequest_ExtendedAttr* ClientDownloadRequest_SignatureInfo::_internal_add_xattr() {
  return xattr_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_ExtendedAttr* ClientDownloadRequest_SignatureInfo::add_xattr() {
  ::safe_browsing::ClientDownloadRequest_ExtendedAttr* _add = _internal_add_xattr();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.SignatureInfo.xattr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ExtendedAttr >&
ClientDownloadRequest_SignatureInfo::xattr() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.SignatureInfo.xattr)
  return xattr_;
}

// -------------------------------------------------------------------

// ClientDownloadRequest_PEImageHeaders_DebugData

// optional bytes directory_entry = 1;
inline bool ClientDownloadRequest_PEImageHeaders_DebugData::_internal_has_directory_entry() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_PEImageHeaders_DebugData::has_directory_entry() const {
  return _internal_has_directory_entry();
}
inline void ClientDownloadRequest_PEImageHeaders_DebugData::clear_directory_entry() {
  directory_entry_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders_DebugData::directory_entry() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.directory_entry)
  return _internal_directory_entry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_PEImageHeaders_DebugData::set_directory_entry(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 directory_entry_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.directory_entry)
}
inline std::string* ClientDownloadRequest_PEImageHeaders_DebugData::mutable_directory_entry() {
  std::string* _s = _internal_mutable_directory_entry();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.directory_entry)
  return _s;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders_DebugData::_internal_directory_entry() const {
  return directory_entry_.Get();
}
inline void ClientDownloadRequest_PEImageHeaders_DebugData::_internal_set_directory_entry(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  directory_entry_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders_DebugData::_internal_mutable_directory_entry() {
  _has_bits_[0] |= 0x00000001u;
  return directory_entry_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders_DebugData::release_directory_entry() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.directory_entry)
  if (!_internal_has_directory_entry()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = directory_entry_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (directory_entry_.IsDefault()) {
    directory_entry_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_PEImageHeaders_DebugData::set_allocated_directory_entry(std::string* directory_entry) {
  if (directory_entry != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  directory_entry_.SetAllocated(directory_entry, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (directory_entry_.IsDefault()) {
    directory_entry_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.directory_entry)
}

// optional bytes raw_data = 2;
inline bool ClientDownloadRequest_PEImageHeaders_DebugData::_internal_has_raw_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_PEImageHeaders_DebugData::has_raw_data() const {
  return _internal_has_raw_data();
}
inline void ClientDownloadRequest_PEImageHeaders_DebugData::clear_raw_data() {
  raw_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders_DebugData::raw_data() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.raw_data)
  return _internal_raw_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_PEImageHeaders_DebugData::set_raw_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 raw_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.raw_data)
}
inline std::string* ClientDownloadRequest_PEImageHeaders_DebugData::mutable_raw_data() {
  std::string* _s = _internal_mutable_raw_data();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.raw_data)
  return _s;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders_DebugData::_internal_raw_data() const {
  return raw_data_.Get();
}
inline void ClientDownloadRequest_PEImageHeaders_DebugData::_internal_set_raw_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  raw_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders_DebugData::_internal_mutable_raw_data() {
  _has_bits_[0] |= 0x00000002u;
  return raw_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders_DebugData::release_raw_data() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.raw_data)
  if (!_internal_has_raw_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = raw_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (raw_data_.IsDefault()) {
    raw_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_PEImageHeaders_DebugData::set_allocated_raw_data(std::string* raw_data) {
  if (raw_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  raw_data_.SetAllocated(raw_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (raw_data_.IsDefault()) {
    raw_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData.raw_data)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_PEImageHeaders

// optional bytes dos_header = 1;
inline bool ClientDownloadRequest_PEImageHeaders::_internal_has_dos_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_PEImageHeaders::has_dos_header() const {
  return _internal_has_dos_header();
}
inline void ClientDownloadRequest_PEImageHeaders::clear_dos_header() {
  dos_header_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::dos_header() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.dos_header)
  return _internal_dos_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_PEImageHeaders::set_dos_header(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 dos_header_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.dos_header)
}
inline std::string* ClientDownloadRequest_PEImageHeaders::mutable_dos_header() {
  std::string* _s = _internal_mutable_dos_header();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.dos_header)
  return _s;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::_internal_dos_header() const {
  return dos_header_.Get();
}
inline void ClientDownloadRequest_PEImageHeaders::_internal_set_dos_header(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dos_header_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::_internal_mutable_dos_header() {
  _has_bits_[0] |= 0x00000001u;
  return dos_header_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::release_dos_header() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.PEImageHeaders.dos_header)
  if (!_internal_has_dos_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = dos_header_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dos_header_.IsDefault()) {
    dos_header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_PEImageHeaders::set_allocated_dos_header(std::string* dos_header) {
  if (dos_header != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dos_header_.SetAllocated(dos_header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dos_header_.IsDefault()) {
    dos_header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.PEImageHeaders.dos_header)
}

// optional bytes file_header = 2;
inline bool ClientDownloadRequest_PEImageHeaders::_internal_has_file_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_PEImageHeaders::has_file_header() const {
  return _internal_has_file_header();
}
inline void ClientDownloadRequest_PEImageHeaders::clear_file_header() {
  file_header_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::file_header() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.file_header)
  return _internal_file_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_PEImageHeaders::set_file_header(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_header_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.file_header)
}
inline std::string* ClientDownloadRequest_PEImageHeaders::mutable_file_header() {
  std::string* _s = _internal_mutable_file_header();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.file_header)
  return _s;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::_internal_file_header() const {
  return file_header_.Get();
}
inline void ClientDownloadRequest_PEImageHeaders::_internal_set_file_header(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_header_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::_internal_mutable_file_header() {
  _has_bits_[0] |= 0x00000002u;
  return file_header_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::release_file_header() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.PEImageHeaders.file_header)
  if (!_internal_has_file_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_header_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_header_.IsDefault()) {
    file_header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_PEImageHeaders::set_allocated_file_header(std::string* file_header) {
  if (file_header != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_header_.SetAllocated(file_header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_header_.IsDefault()) {
    file_header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.PEImageHeaders.file_header)
}

// optional bytes optional_headers32 = 3;
inline bool ClientDownloadRequest_PEImageHeaders::_internal_has_optional_headers32() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDownloadRequest_PEImageHeaders::has_optional_headers32() const {
  return _internal_has_optional_headers32();
}
inline void ClientDownloadRequest_PEImageHeaders::clear_optional_headers32() {
  optional_headers32_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::optional_headers32() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers32)
  return _internal_optional_headers32();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_PEImageHeaders::set_optional_headers32(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 optional_headers32_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers32)
}
inline std::string* ClientDownloadRequest_PEImageHeaders::mutable_optional_headers32() {
  std::string* _s = _internal_mutable_optional_headers32();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers32)
  return _s;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::_internal_optional_headers32() const {
  return optional_headers32_.Get();
}
inline void ClientDownloadRequest_PEImageHeaders::_internal_set_optional_headers32(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  optional_headers32_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::_internal_mutable_optional_headers32() {
  _has_bits_[0] |= 0x00000004u;
  return optional_headers32_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::release_optional_headers32() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers32)
  if (!_internal_has_optional_headers32()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = optional_headers32_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_headers32_.IsDefault()) {
    optional_headers32_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_PEImageHeaders::set_allocated_optional_headers32(std::string* optional_headers32) {
  if (optional_headers32 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optional_headers32_.SetAllocated(optional_headers32, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_headers32_.IsDefault()) {
    optional_headers32_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers32)
}

// optional bytes optional_headers64 = 4;
inline bool ClientDownloadRequest_PEImageHeaders::_internal_has_optional_headers64() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientDownloadRequest_PEImageHeaders::has_optional_headers64() const {
  return _internal_has_optional_headers64();
}
inline void ClientDownloadRequest_PEImageHeaders::clear_optional_headers64() {
  optional_headers64_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::optional_headers64() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers64)
  return _internal_optional_headers64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_PEImageHeaders::set_optional_headers64(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 optional_headers64_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers64)
}
inline std::string* ClientDownloadRequest_PEImageHeaders::mutable_optional_headers64() {
  std::string* _s = _internal_mutable_optional_headers64();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers64)
  return _s;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::_internal_optional_headers64() const {
  return optional_headers64_.Get();
}
inline void ClientDownloadRequest_PEImageHeaders::_internal_set_optional_headers64(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  optional_headers64_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::_internal_mutable_optional_headers64() {
  _has_bits_[0] |= 0x00000008u;
  return optional_headers64_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::release_optional_headers64() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers64)
  if (!_internal_has_optional_headers64()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = optional_headers64_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_headers64_.IsDefault()) {
    optional_headers64_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_PEImageHeaders::set_allocated_optional_headers64(std::string* optional_headers64) {
  if (optional_headers64 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  optional_headers64_.SetAllocated(optional_headers64, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_headers64_.IsDefault()) {
    optional_headers64_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.PEImageHeaders.optional_headers64)
}

// repeated bytes section_header = 5;
inline int ClientDownloadRequest_PEImageHeaders::_internal_section_header_size() const {
  return section_header_.size();
}
inline int ClientDownloadRequest_PEImageHeaders::section_header_size() const {
  return _internal_section_header_size();
}
inline void ClientDownloadRequest_PEImageHeaders::clear_section_header() {
  section_header_.Clear();
}
inline std::string* ClientDownloadRequest_PEImageHeaders::add_section_header() {
  std::string* _s = _internal_add_section_header();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
  return _s;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::_internal_section_header(int index) const {
  return section_header_.Get(index);
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::section_header(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
  return _internal_section_header(index);
}
inline std::string* ClientDownloadRequest_PEImageHeaders::mutable_section_header(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
  return section_header_.Mutable(index);
}
inline void ClientDownloadRequest_PEImageHeaders::set_section_header(int index, const std::string& value) {
  section_header_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
}
inline void ClientDownloadRequest_PEImageHeaders::set_section_header(int index, std::string&& value) {
  section_header_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
}
inline void ClientDownloadRequest_PEImageHeaders::set_section_header(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  section_header_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
}
inline void ClientDownloadRequest_PEImageHeaders::set_section_header(int index, const void* value, size_t size) {
  section_header_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
}
inline std::string* ClientDownloadRequest_PEImageHeaders::_internal_add_section_header() {
  return section_header_.Add();
}
inline void ClientDownloadRequest_PEImageHeaders::add_section_header(const std::string& value) {
  section_header_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
}
inline void ClientDownloadRequest_PEImageHeaders::add_section_header(std::string&& value) {
  section_header_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
}
inline void ClientDownloadRequest_PEImageHeaders::add_section_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  section_header_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
}
inline void ClientDownloadRequest_PEImageHeaders::add_section_header(const void* value, size_t size) {
  section_header_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientDownloadRequest_PEImageHeaders::section_header() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
  return section_header_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientDownloadRequest_PEImageHeaders::mutable_section_header() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.PEImageHeaders.section_header)
  return &section_header_;
}

// optional bytes export_section_data = 6;
inline bool ClientDownloadRequest_PEImageHeaders::_internal_has_export_section_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientDownloadRequest_PEImageHeaders::has_export_section_data() const {
  return _internal_has_export_section_data();
}
inline void ClientDownloadRequest_PEImageHeaders::clear_export_section_data() {
  export_section_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::export_section_data() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.export_section_data)
  return _internal_export_section_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_PEImageHeaders::set_export_section_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 export_section_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.PEImageHeaders.export_section_data)
}
inline std::string* ClientDownloadRequest_PEImageHeaders::mutable_export_section_data() {
  std::string* _s = _internal_mutable_export_section_data();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.export_section_data)
  return _s;
}
inline const std::string& ClientDownloadRequest_PEImageHeaders::_internal_export_section_data() const {
  return export_section_data_.Get();
}
inline void ClientDownloadRequest_PEImageHeaders::_internal_set_export_section_data(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  export_section_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::_internal_mutable_export_section_data() {
  _has_bits_[0] |= 0x00000010u;
  return export_section_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_PEImageHeaders::release_export_section_data() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.PEImageHeaders.export_section_data)
  if (!_internal_has_export_section_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = export_section_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (export_section_data_.IsDefault()) {
    export_section_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_PEImageHeaders::set_allocated_export_section_data(std::string* export_section_data) {
  if (export_section_data != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  export_section_data_.SetAllocated(export_section_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (export_section_data_.IsDefault()) {
    export_section_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.PEImageHeaders.export_section_data)
}

// repeated .safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData debug_data = 7;
inline int ClientDownloadRequest_PEImageHeaders::_internal_debug_data_size() const {
  return debug_data_.size();
}
inline int ClientDownloadRequest_PEImageHeaders::debug_data_size() const {
  return _internal_debug_data_size();
}
inline void ClientDownloadRequest_PEImageHeaders::clear_debug_data() {
  debug_data_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData* ClientDownloadRequest_PEImageHeaders::mutable_debug_data(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.PEImageHeaders.debug_data)
  return debug_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData >*
ClientDownloadRequest_PEImageHeaders::mutable_debug_data() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.PEImageHeaders.debug_data)
  return &debug_data_;
}
inline const ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData& ClientDownloadRequest_PEImageHeaders::_internal_debug_data(int index) const {
  return debug_data_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData& ClientDownloadRequest_PEImageHeaders::debug_data(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.PEImageHeaders.debug_data)
  return _internal_debug_data(index);
}
inline ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData* ClientDownloadRequest_PEImageHeaders::_internal_add_debug_data() {
  return debug_data_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData* ClientDownloadRequest_PEImageHeaders::add_debug_data() {
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData* _add = _internal_add_debug_data();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.PEImageHeaders.debug_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData >&
ClientDownloadRequest_PEImageHeaders::debug_data() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.PEImageHeaders.debug_data)
  return debug_data_;
}

// -------------------------------------------------------------------

// ClientDownloadRequest_MachOHeaders_LoadCommand

// required uint32 command_id = 1;
inline bool ClientDownloadRequest_MachOHeaders_LoadCommand::_internal_has_command_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_MachOHeaders_LoadCommand::has_command_id() const {
  return _internal_has_command_id();
}
inline void ClientDownloadRequest_MachOHeaders_LoadCommand::clear_command_id() {
  command_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ClientDownloadRequest_MachOHeaders_LoadCommand::_internal_command_id() const {
  return command_id_;
}
inline uint32_t ClientDownloadRequest_MachOHeaders_LoadCommand::command_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand.command_id)
  return _internal_command_id();
}
inline void ClientDownloadRequest_MachOHeaders_LoadCommand::_internal_set_command_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  command_id_ = value;
}
inline void ClientDownloadRequest_MachOHeaders_LoadCommand::set_command_id(uint32_t value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand.command_id)
}

// required bytes command = 2;
inline bool ClientDownloadRequest_MachOHeaders_LoadCommand::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_MachOHeaders_LoadCommand::has_command() const {
  return _internal_has_command();
}
inline void ClientDownloadRequest_MachOHeaders_LoadCommand::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_MachOHeaders_LoadCommand::command() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_MachOHeaders_LoadCommand::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 command_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand.command)
}
inline std::string* ClientDownloadRequest_MachOHeaders_LoadCommand::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand.command)
  return _s;
}
inline const std::string& ClientDownloadRequest_MachOHeaders_LoadCommand::_internal_command() const {
  return command_.Get();
}
inline void ClientDownloadRequest_MachOHeaders_LoadCommand::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_MachOHeaders_LoadCommand::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_MachOHeaders_LoadCommand::release_command() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = command_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault()) {
    command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_MachOHeaders_LoadCommand::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault()) {
    command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand.command)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_MachOHeaders

// required bytes mach_header = 1;
inline bool ClientDownloadRequest_MachOHeaders::_internal_has_mach_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_MachOHeaders::has_mach_header() const {
  return _internal_has_mach_header();
}
inline void ClientDownloadRequest_MachOHeaders::clear_mach_header() {
  mach_header_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_MachOHeaders::mach_header() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.MachOHeaders.mach_header)
  return _internal_mach_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_MachOHeaders::set_mach_header(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mach_header_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.MachOHeaders.mach_header)
}
inline std::string* ClientDownloadRequest_MachOHeaders::mutable_mach_header() {
  std::string* _s = _internal_mutable_mach_header();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.MachOHeaders.mach_header)
  return _s;
}
inline const std::string& ClientDownloadRequest_MachOHeaders::_internal_mach_header() const {
  return mach_header_.Get();
}
inline void ClientDownloadRequest_MachOHeaders::_internal_set_mach_header(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mach_header_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_MachOHeaders::_internal_mutable_mach_header() {
  _has_bits_[0] |= 0x00000001u;
  return mach_header_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_MachOHeaders::release_mach_header() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.MachOHeaders.mach_header)
  if (!_internal_has_mach_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = mach_header_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mach_header_.IsDefault()) {
    mach_header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_MachOHeaders::set_allocated_mach_header(std::string* mach_header) {
  if (mach_header != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mach_header_.SetAllocated(mach_header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mach_header_.IsDefault()) {
    mach_header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.MachOHeaders.mach_header)
}

// repeated .safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand load_commands = 2;
inline int ClientDownloadRequest_MachOHeaders::_internal_load_commands_size() const {
  return load_commands_.size();
}
inline int ClientDownloadRequest_MachOHeaders::load_commands_size() const {
  return _internal_load_commands_size();
}
inline void ClientDownloadRequest_MachOHeaders::clear_load_commands() {
  load_commands_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand* ClientDownloadRequest_MachOHeaders::mutable_load_commands(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.MachOHeaders.load_commands)
  return load_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand >*
ClientDownloadRequest_MachOHeaders::mutable_load_commands() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.MachOHeaders.load_commands)
  return &load_commands_;
}
inline const ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand& ClientDownloadRequest_MachOHeaders::_internal_load_commands(int index) const {
  return load_commands_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand& ClientDownloadRequest_MachOHeaders::load_commands(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.MachOHeaders.load_commands)
  return _internal_load_commands(index);
}
inline ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand* ClientDownloadRequest_MachOHeaders::_internal_add_load_commands() {
  return load_commands_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand* ClientDownloadRequest_MachOHeaders::add_load_commands() {
  ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand* _add = _internal_add_load_commands();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.MachOHeaders.load_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand >&
ClientDownloadRequest_MachOHeaders::load_commands() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.MachOHeaders.load_commands)
  return load_commands_;
}

// -------------------------------------------------------------------

// ClientDownloadRequest_ImageHeaders

// optional .safe_browsing.ClientDownloadRequest.PEImageHeaders pe_headers = 1;
inline bool ClientDownloadRequest_ImageHeaders::_internal_has_pe_headers() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pe_headers_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest_ImageHeaders::has_pe_headers() const {
  return _internal_has_pe_headers();
}
inline void ClientDownloadRequest_ImageHeaders::clear_pe_headers() {
  if (pe_headers_ != nullptr) pe_headers_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ClientDownloadRequest_PEImageHeaders& ClientDownloadRequest_ImageHeaders::_internal_pe_headers() const {
  const ::safe_browsing::ClientDownloadRequest_PEImageHeaders* p = pe_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_PEImageHeaders&>(
      ::safe_browsing::_ClientDownloadRequest_PEImageHeaders_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_PEImageHeaders& ClientDownloadRequest_ImageHeaders::pe_headers() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ImageHeaders.pe_headers)
  return _internal_pe_headers();
}
inline void ClientDownloadRequest_ImageHeaders::unsafe_arena_set_allocated_pe_headers(
    ::safe_browsing::ClientDownloadRequest_PEImageHeaders* pe_headers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pe_headers_);
  }
  pe_headers_ = pe_headers;
  if (pe_headers) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.ImageHeaders.pe_headers)
}
inline ::safe_browsing::ClientDownloadRequest_PEImageHeaders* ClientDownloadRequest_ImageHeaders::release_pe_headers() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders* temp = pe_headers_;
  pe_headers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_PEImageHeaders* ClientDownloadRequest_ImageHeaders::unsafe_arena_release_pe_headers() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.ImageHeaders.pe_headers)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders* temp = pe_headers_;
  pe_headers_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_PEImageHeaders* ClientDownloadRequest_ImageHeaders::_internal_mutable_pe_headers() {
  _has_bits_[0] |= 0x00000001u;
  if (pe_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_PEImageHeaders>(GetArenaForAllocation());
    pe_headers_ = p;
  }
  return pe_headers_;
}
inline ::safe_browsing::ClientDownloadRequest_PEImageHeaders* ClientDownloadRequest_ImageHeaders::mutable_pe_headers() {
  ::safe_browsing::ClientDownloadRequest_PEImageHeaders* _msg = _internal_mutable_pe_headers();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.ImageHeaders.pe_headers)
  return _msg;
}
inline void ClientDownloadRequest_ImageHeaders::set_allocated_pe_headers(::safe_browsing::ClientDownloadRequest_PEImageHeaders* pe_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pe_headers_;
  }
  if (pe_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pe_headers);
    if (message_arena != submessage_arena) {
      pe_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pe_headers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pe_headers_ = pe_headers;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.ImageHeaders.pe_headers)
}

// repeated .safe_browsing.ClientDownloadRequest.MachOHeaders mach_o_headers = 2;
inline int ClientDownloadRequest_ImageHeaders::_internal_mach_o_headers_size() const {
  return mach_o_headers_.size();
}
inline int ClientDownloadRequest_ImageHeaders::mach_o_headers_size() const {
  return _internal_mach_o_headers_size();
}
inline void ClientDownloadRequest_ImageHeaders::clear_mach_o_headers() {
  mach_o_headers_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_MachOHeaders* ClientDownloadRequest_ImageHeaders::mutable_mach_o_headers(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.ImageHeaders.mach_o_headers)
  return mach_o_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders >*
ClientDownloadRequest_ImageHeaders::mutable_mach_o_headers() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.ImageHeaders.mach_o_headers)
  return &mach_o_headers_;
}
inline const ::safe_browsing::ClientDownloadRequest_MachOHeaders& ClientDownloadRequest_ImageHeaders::_internal_mach_o_headers(int index) const {
  return mach_o_headers_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_MachOHeaders& ClientDownloadRequest_ImageHeaders::mach_o_headers(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ImageHeaders.mach_o_headers)
  return _internal_mach_o_headers(index);
}
inline ::safe_browsing::ClientDownloadRequest_MachOHeaders* ClientDownloadRequest_ImageHeaders::_internal_add_mach_o_headers() {
  return mach_o_headers_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_MachOHeaders* ClientDownloadRequest_ImageHeaders::add_mach_o_headers() {
  ::safe_browsing::ClientDownloadRequest_MachOHeaders* _add = _internal_add_mach_o_headers();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.ImageHeaders.mach_o_headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_MachOHeaders >&
ClientDownloadRequest_ImageHeaders::mach_o_headers() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.ImageHeaders.mach_o_headers)
  return mach_o_headers_;
}

// -------------------------------------------------------------------

// ClientDownloadRequest_ArchivedBinary

// optional string file_basename = 1;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_file_basename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_file_basename() const {
  return _internal_has_file_basename();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_file_basename() {
  file_basename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_ArchivedBinary::file_basename() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.file_basename)
  return _internal_file_basename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_ArchivedBinary::set_file_basename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_basename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchivedBinary.file_basename)
}
inline std::string* ClientDownloadRequest_ArchivedBinary::mutable_file_basename() {
  std::string* _s = _internal_mutable_file_basename();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.ArchivedBinary.file_basename)
  return _s;
}
inline const std::string& ClientDownloadRequest_ArchivedBinary::_internal_file_basename() const {
  return file_basename_.Get();
}
inline void ClientDownloadRequest_ArchivedBinary::_internal_set_file_basename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_basename_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_ArchivedBinary::_internal_mutable_file_basename() {
  _has_bits_[0] |= 0x00000001u;
  return file_basename_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_ArchivedBinary::release_file_basename() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.ArchivedBinary.file_basename)
  if (!_internal_has_file_basename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_basename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_basename_.IsDefault()) {
    file_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_ArchivedBinary::set_allocated_file_basename(std::string* file_basename) {
  if (file_basename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_basename_.SetAllocated(file_basename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_basename_.IsDefault()) {
    file_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.ArchivedBinary.file_basename)
}

// optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 2;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_download_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_download_type() const {
  return _internal_has_download_type();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_download_type() {
  download_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::safe_browsing::ClientDownloadRequest_DownloadType ClientDownloadRequest_ArchivedBinary::_internal_download_type() const {
  return static_cast< ::safe_browsing::ClientDownloadRequest_DownloadType >(download_type_);
}
inline ::safe_browsing::ClientDownloadRequest_DownloadType ClientDownloadRequest_ArchivedBinary::download_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.download_type)
  return _internal_download_type();
}
inline void ClientDownloadRequest_ArchivedBinary::_internal_set_download_type(::safe_browsing::ClientDownloadRequest_DownloadType value) {
  assert(::safe_browsing::ClientDownloadRequest_DownloadType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  download_type_ = value;
}
inline void ClientDownloadRequest_ArchivedBinary::set_download_type(::safe_browsing::ClientDownloadRequest_DownloadType value) {
  _internal_set_download_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchivedBinary.download_type)
}

// optional .safe_browsing.ClientDownloadRequest.Digests digests = 3;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_digests() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || digests_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_digests() const {
  return _internal_has_digests();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_digests() {
  if (digests_ != nullptr) digests_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientDownloadRequest_Digests& ClientDownloadRequest_ArchivedBinary::_internal_digests() const {
  const ::safe_browsing::ClientDownloadRequest_Digests* p = digests_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_Digests&>(
      ::safe_browsing::_ClientDownloadRequest_Digests_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_Digests& ClientDownloadRequest_ArchivedBinary::digests() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.digests)
  return _internal_digests();
}
inline void ClientDownloadRequest_ArchivedBinary::unsafe_arena_set_allocated_digests(
    ::safe_browsing::ClientDownloadRequest_Digests* digests) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digests_);
  }
  digests_ = digests;
  if (digests) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.ArchivedBinary.digests)
}
inline ::safe_browsing::ClientDownloadRequest_Digests* ClientDownloadRequest_ArchivedBinary::release_digests() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_Digests* temp = digests_;
  digests_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_Digests* ClientDownloadRequest_ArchivedBinary::unsafe_arena_release_digests() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.ArchivedBinary.digests)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_Digests* temp = digests_;
  digests_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_Digests* ClientDownloadRequest_ArchivedBinary::_internal_mutable_digests() {
  _has_bits_[0] |= 0x00000002u;
  if (digests_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_Digests>(GetArenaForAllocation());
    digests_ = p;
  }
  return digests_;
}
inline ::safe_browsing::ClientDownloadRequest_Digests* ClientDownloadRequest_ArchivedBinary::mutable_digests() {
  ::safe_browsing::ClientDownloadRequest_Digests* _msg = _internal_mutable_digests();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.ArchivedBinary.digests)
  return _msg;
}
inline void ClientDownloadRequest_ArchivedBinary::set_allocated_digests(::safe_browsing::ClientDownloadRequest_Digests* digests) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete digests_;
  }
  if (digests) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(digests);
    if (message_arena != submessage_arena) {
      digests = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digests, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  digests_ = digests;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.ArchivedBinary.digests)
}

// optional int64 length = 4;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_length() const {
  return _internal_has_length();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_length() {
  length_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t ClientDownloadRequest_ArchivedBinary::_internal_length() const {
  return length_;
}
inline int64_t ClientDownloadRequest_ArchivedBinary::length() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.length)
  return _internal_length();
}
inline void ClientDownloadRequest_ArchivedBinary::_internal_set_length(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  length_ = value;
}
inline void ClientDownloadRequest_ArchivedBinary::set_length(int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchivedBinary.length)
}

// optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || signature_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_signature() const {
  return _internal_has_signature();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientDownloadRequest_SignatureInfo& ClientDownloadRequest_ArchivedBinary::_internal_signature() const {
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo* p = signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_SignatureInfo&>(
      ::safe_browsing::_ClientDownloadRequest_SignatureInfo_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_SignatureInfo& ClientDownloadRequest_ArchivedBinary::signature() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.signature)
  return _internal_signature();
}
inline void ClientDownloadRequest_ArchivedBinary::unsafe_arena_set_allocated_signature(
    ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.ArchivedBinary.signature)
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientDownloadRequest_ArchivedBinary::release_signature() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* temp = signature_;
  signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientDownloadRequest_ArchivedBinary::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.ArchivedBinary.signature)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientDownloadRequest_ArchivedBinary::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000004u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_SignatureInfo>(GetArenaForAllocation());
    signature_ = p;
  }
  return signature_;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientDownloadRequest_ArchivedBinary::mutable_signature() {
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.ArchivedBinary.signature)
  return _msg;
}
inline void ClientDownloadRequest_ArchivedBinary::set_allocated_signature(::safe_browsing::ClientDownloadRequest_SignatureInfo* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature);
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.ArchivedBinary.signature)
}

// optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 6;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_image_headers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || image_headers_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_image_headers() const {
  return _internal_has_image_headers();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_image_headers() {
  if (image_headers_ != nullptr) image_headers_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientDownloadRequest_ArchivedBinary::_internal_image_headers() const {
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders* p = image_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_ImageHeaders&>(
      ::safe_browsing::_ClientDownloadRequest_ImageHeaders_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientDownloadRequest_ArchivedBinary::image_headers() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.image_headers)
  return _internal_image_headers();
}
inline void ClientDownloadRequest_ArchivedBinary::unsafe_arena_set_allocated_image_headers(
    ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_headers_);
  }
  image_headers_ = image_headers;
  if (image_headers) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.ArchivedBinary.image_headers)
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientDownloadRequest_ArchivedBinary::release_image_headers() {
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientDownloadRequest_ArchivedBinary::unsafe_arena_release_image_headers() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.ArchivedBinary.image_headers)
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientDownloadRequest_ArchivedBinary::_internal_mutable_image_headers() {
  _has_bits_[0] |= 0x00000008u;
  if (image_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ImageHeaders>(GetArenaForAllocation());
    image_headers_ = p;
  }
  return image_headers_;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientDownloadRequest_ArchivedBinary::mutable_image_headers() {
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _msg = _internal_mutable_image_headers();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.ArchivedBinary.image_headers)
  return _msg;
}
inline void ClientDownloadRequest_ArchivedBinary::set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_headers_;
  }
  if (image_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_headers);
    if (message_arena != submessage_arena) {
      image_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_headers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  image_headers_ = image_headers;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.ArchivedBinary.image_headers)
}

// optional bool is_encrypted = 7;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_is_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_is_encrypted() const {
  return _internal_has_is_encrypted();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_is_encrypted() {
  is_encrypted_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ClientDownloadRequest_ArchivedBinary::_internal_is_encrypted() const {
  return is_encrypted_;
}
inline bool ClientDownloadRequest_ArchivedBinary::is_encrypted() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.is_encrypted)
  return _internal_is_encrypted();
}
inline void ClientDownloadRequest_ArchivedBinary::_internal_set_is_encrypted(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_encrypted_ = value;
}
inline void ClientDownloadRequest_ArchivedBinary::set_is_encrypted(bool value) {
  _internal_set_is_encrypted(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchivedBinary.is_encrypted)
}

// optional bool is_executable = 8;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_is_executable() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_is_executable() const {
  return _internal_has_is_executable();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_is_executable() {
  is_executable_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ClientDownloadRequest_ArchivedBinary::_internal_is_executable() const {
  return is_executable_;
}
inline bool ClientDownloadRequest_ArchivedBinary::is_executable() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.is_executable)
  return _internal_is_executable();
}
inline void ClientDownloadRequest_ArchivedBinary::_internal_set_is_executable(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_executable_ = value;
}
inline void ClientDownloadRequest_ArchivedBinary::set_is_executable(bool value) {
  _internal_set_is_executable(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchivedBinary.is_executable)
}

// optional bool is_archive = 9;
inline bool ClientDownloadRequest_ArchivedBinary::_internal_has_is_archive() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchivedBinary::has_is_archive() const {
  return _internal_has_is_archive();
}
inline void ClientDownloadRequest_ArchivedBinary::clear_is_archive() {
  is_archive_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ClientDownloadRequest_ArchivedBinary::_internal_is_archive() const {
  return is_archive_;
}
inline bool ClientDownloadRequest_ArchivedBinary::is_archive() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchivedBinary.is_archive)
  return _internal_is_archive();
}
inline void ClientDownloadRequest_ArchivedBinary::_internal_set_is_archive(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_archive_ = value;
}
inline void ClientDownloadRequest_ArchivedBinary::set_is_archive(bool value) {
  _internal_set_is_archive(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchivedBinary.is_archive)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_DetachedCodeSignature

// required string file_name = 1;
inline bool ClientDownloadRequest_DetachedCodeSignature::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_DetachedCodeSignature::has_file_name() const {
  return _internal_has_file_name();
}
inline void ClientDownloadRequest_DetachedCodeSignature::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_DetachedCodeSignature::file_name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_DetachedCodeSignature::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.file_name)
}
inline std::string* ClientDownloadRequest_DetachedCodeSignature::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.file_name)
  return _s;
}
inline const std::string& ClientDownloadRequest_DetachedCodeSignature::_internal_file_name() const {
  return file_name_.Get();
}
inline void ClientDownloadRequest_DetachedCodeSignature::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_DetachedCodeSignature::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_DetachedCodeSignature::release_file_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_DetachedCodeSignature::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.file_name)
}

// required bytes contents = 2;
inline bool ClientDownloadRequest_DetachedCodeSignature::_internal_has_contents() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_DetachedCodeSignature::has_contents() const {
  return _internal_has_contents();
}
inline void ClientDownloadRequest_DetachedCodeSignature::clear_contents() {
  contents_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientDownloadRequest_DetachedCodeSignature::contents() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_DetachedCodeSignature::set_contents(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 contents_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.contents)
}
inline std::string* ClientDownloadRequest_DetachedCodeSignature::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.contents)
  return _s;
}
inline const std::string& ClientDownloadRequest_DetachedCodeSignature::_internal_contents() const {
  return contents_.Get();
}
inline void ClientDownloadRequest_DetachedCodeSignature::_internal_set_contents(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  contents_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_DetachedCodeSignature::_internal_mutable_contents() {
  _has_bits_[0] |= 0x00000002u;
  return contents_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_DetachedCodeSignature::release_contents() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.contents)
  if (!_internal_has_contents()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = contents_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contents_.IsDefault()) {
    contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_DetachedCodeSignature::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contents_.SetAllocated(contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contents_.IsDefault()) {
    contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.DetachedCodeSignature.contents)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_DocumentInfo

// optional bool contains_macros = 1;
inline bool ClientDownloadRequest_DocumentInfo::_internal_has_contains_macros() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_DocumentInfo::has_contains_macros() const {
  return _internal_has_contains_macros();
}
inline void ClientDownloadRequest_DocumentInfo::clear_contains_macros() {
  contains_macros_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ClientDownloadRequest_DocumentInfo::_internal_contains_macros() const {
  return contains_macros_;
}
inline bool ClientDownloadRequest_DocumentInfo::contains_macros() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DocumentInfo.contains_macros)
  return _internal_contains_macros();
}
inline void ClientDownloadRequest_DocumentInfo::_internal_set_contains_macros(bool value) {
  _has_bits_[0] |= 0x00000001u;
  contains_macros_ = value;
}
inline void ClientDownloadRequest_DocumentInfo::set_contains_macros(bool value) {
  _internal_set_contains_macros(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.DocumentInfo.contains_macros)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_DocumentProcessingInfo

// optional bool processing_successful = 1;
inline bool ClientDownloadRequest_DocumentProcessingInfo::_internal_has_processing_successful() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_DocumentProcessingInfo::has_processing_successful() const {
  return _internal_has_processing_successful();
}
inline void ClientDownloadRequest_DocumentProcessingInfo::clear_processing_successful() {
  processing_successful_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ClientDownloadRequest_DocumentProcessingInfo::_internal_processing_successful() const {
  return processing_successful_;
}
inline bool ClientDownloadRequest_DocumentProcessingInfo::processing_successful() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.processing_successful)
  return _internal_processing_successful();
}
inline void ClientDownloadRequest_DocumentProcessingInfo::_internal_set_processing_successful(bool value) {
  _has_bits_[0] |= 0x00000002u;
  processing_successful_ = value;
}
inline void ClientDownloadRequest_DocumentProcessingInfo::set_processing_successful(bool value) {
  _internal_set_processing_successful(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.processing_successful)
}

// optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.MaldocaErrorType maldoca_error_type = 2;
inline bool ClientDownloadRequest_DocumentProcessingInfo::_internal_has_maldoca_error_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDownloadRequest_DocumentProcessingInfo::has_maldoca_error_type() const {
  return _internal_has_maldoca_error_type();
}
inline void ClientDownloadRequest_DocumentProcessingInfo::clear_maldoca_error_type() {
  maldoca_error_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::_internal_maldoca_error_type() const {
  return static_cast< ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType >(maldoca_error_type_);
}
inline ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::maldoca_error_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.maldoca_error_type)
  return _internal_maldoca_error_type();
}
inline void ClientDownloadRequest_DocumentProcessingInfo::_internal_set_maldoca_error_type(::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType value) {
  assert(::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  maldoca_error_type_ = value;
}
inline void ClientDownloadRequest_DocumentProcessingInfo::set_maldoca_error_type(::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType value) {
  _internal_set_maldoca_error_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.maldoca_error_type)
}

// optional string maldoca_error_message = 3;
inline bool ClientDownloadRequest_DocumentProcessingInfo::_internal_has_maldoca_error_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_DocumentProcessingInfo::has_maldoca_error_message() const {
  return _internal_has_maldoca_error_message();
}
inline void ClientDownloadRequest_DocumentProcessingInfo::clear_maldoca_error_message() {
  maldoca_error_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest_DocumentProcessingInfo::maldoca_error_message() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.maldoca_error_message)
  return _internal_maldoca_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest_DocumentProcessingInfo::set_maldoca_error_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 maldoca_error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.maldoca_error_message)
}
inline std::string* ClientDownloadRequest_DocumentProcessingInfo::mutable_maldoca_error_message() {
  std::string* _s = _internal_mutable_maldoca_error_message();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.maldoca_error_message)
  return _s;
}
inline const std::string& ClientDownloadRequest_DocumentProcessingInfo::_internal_maldoca_error_message() const {
  return maldoca_error_message_.Get();
}
inline void ClientDownloadRequest_DocumentProcessingInfo::_internal_set_maldoca_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  maldoca_error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_DocumentProcessingInfo::_internal_mutable_maldoca_error_message() {
  _has_bits_[0] |= 0x00000001u;
  return maldoca_error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest_DocumentProcessingInfo::release_maldoca_error_message() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.maldoca_error_message)
  if (!_internal_has_maldoca_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = maldoca_error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (maldoca_error_message_.IsDefault()) {
    maldoca_error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest_DocumentProcessingInfo::set_allocated_maldoca_error_message(std::string* maldoca_error_message) {
  if (maldoca_error_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  maldoca_error_message_.SetAllocated(maldoca_error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (maldoca_error_message_.IsDefault()) {
    maldoca_error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.maldoca_error_message)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_DocumentSummary

// optional .safe_browsing.ClientDownloadRequest.DocumentInfo metadata = 1;
inline bool ClientDownloadRequest_DocumentSummary::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest_DocumentSummary::has_metadata() const {
  return _internal_has_metadata();
}
inline void ClientDownloadRequest_DocumentSummary::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ClientDownloadRequest_DocumentInfo& ClientDownloadRequest_DocumentSummary::_internal_metadata() const {
  const ::safe_browsing::ClientDownloadRequest_DocumentInfo* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_DocumentInfo&>(
      ::safe_browsing::_ClientDownloadRequest_DocumentInfo_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_DocumentInfo& ClientDownloadRequest_DocumentSummary::metadata() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DocumentSummary.metadata)
  return _internal_metadata();
}
inline void ClientDownloadRequest_DocumentSummary::unsafe_arena_set_allocated_metadata(
    ::safe_browsing::ClientDownloadRequest_DocumentInfo* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.DocumentSummary.metadata)
}
inline ::safe_browsing::ClientDownloadRequest_DocumentInfo* ClientDownloadRequest_DocumentSummary::release_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientDownloadRequest_DocumentInfo* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentInfo* ClientDownloadRequest_DocumentSummary::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.DocumentSummary.metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientDownloadRequest_DocumentInfo* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentInfo* ClientDownloadRequest_DocumentSummary::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_DocumentInfo>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentInfo* ClientDownloadRequest_DocumentSummary::mutable_metadata() {
  ::safe_browsing::ClientDownloadRequest_DocumentInfo* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.DocumentSummary.metadata)
  return _msg;
}
inline void ClientDownloadRequest_DocumentSummary::set_allocated_metadata(::safe_browsing::ClientDownloadRequest_DocumentInfo* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.DocumentSummary.metadata)
}

// optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo processing_info = 2;
inline bool ClientDownloadRequest_DocumentSummary::_internal_has_processing_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || processing_info_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest_DocumentSummary::has_processing_info() const {
  return _internal_has_processing_info();
}
inline void ClientDownloadRequest_DocumentSummary::clear_processing_info() {
  if (processing_info_ != nullptr) processing_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo& ClientDownloadRequest_DocumentSummary::_internal_processing_info() const {
  const ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* p = processing_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo&>(
      ::safe_browsing::_ClientDownloadRequest_DocumentProcessingInfo_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo& ClientDownloadRequest_DocumentSummary::processing_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DocumentSummary.processing_info)
  return _internal_processing_info();
}
inline void ClientDownloadRequest_DocumentSummary::unsafe_arena_set_allocated_processing_info(
    ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* processing_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_info_);
  }
  processing_info_ = processing_info;
  if (processing_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.DocumentSummary.processing_info)
}
inline ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* ClientDownloadRequest_DocumentSummary::release_processing_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* temp = processing_info_;
  processing_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* ClientDownloadRequest_DocumentSummary::unsafe_arena_release_processing_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.DocumentSummary.processing_info)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* temp = processing_info_;
  processing_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* ClientDownloadRequest_DocumentSummary::_internal_mutable_processing_info() {
  _has_bits_[0] |= 0x00000002u;
  if (processing_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo>(GetArenaForAllocation());
    processing_info_ = p;
  }
  return processing_info_;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* ClientDownloadRequest_DocumentSummary::mutable_processing_info() {
  ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* _msg = _internal_mutable_processing_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.DocumentSummary.processing_info)
  return _msg;
}
inline void ClientDownloadRequest_DocumentSummary::set_allocated_processing_info(::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo* processing_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete processing_info_;
  }
  if (processing_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(processing_info);
    if (message_arena != submessage_arena) {
      processing_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  processing_info_ = processing_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.DocumentSummary.processing_info)
}

// -------------------------------------------------------------------

// ClientDownloadRequest_ArchiveSummary

// optional .safe_browsing.ClientDownloadRequest.ArchiveSummary.Status parser_status = 1;
inline bool ClientDownloadRequest_ArchiveSummary::_internal_has_parser_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchiveSummary::has_parser_status() const {
  return _internal_has_parser_status();
}
inline void ClientDownloadRequest_ArchiveSummary::clear_parser_status() {
  parser_status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary::_internal_parser_status() const {
  return static_cast< ::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status >(parser_status_);
}
inline ::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary::parser_status() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchiveSummary.parser_status)
  return _internal_parser_status();
}
inline void ClientDownloadRequest_ArchiveSummary::_internal_set_parser_status(::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status value) {
  assert(::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  parser_status_ = value;
}
inline void ClientDownloadRequest_ArchiveSummary::set_parser_status(::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status value) {
  _internal_set_parser_status(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchiveSummary.parser_status)
}

// optional int32 file_count = 2;
inline bool ClientDownloadRequest_ArchiveSummary::_internal_has_file_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchiveSummary::has_file_count() const {
  return _internal_has_file_count();
}
inline void ClientDownloadRequest_ArchiveSummary::clear_file_count() {
  file_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ClientDownloadRequest_ArchiveSummary::_internal_file_count() const {
  return file_count_;
}
inline int32_t ClientDownloadRequest_ArchiveSummary::file_count() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchiveSummary.file_count)
  return _internal_file_count();
}
inline void ClientDownloadRequest_ArchiveSummary::_internal_set_file_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  file_count_ = value;
}
inline void ClientDownloadRequest_ArchiveSummary::set_file_count(int32_t value) {
  _internal_set_file_count(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchiveSummary.file_count)
}

// optional int32 directory_count = 3;
inline bool ClientDownloadRequest_ArchiveSummary::_internal_has_directory_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDownloadRequest_ArchiveSummary::has_directory_count() const {
  return _internal_has_directory_count();
}
inline void ClientDownloadRequest_ArchiveSummary::clear_directory_count() {
  directory_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ClientDownloadRequest_ArchiveSummary::_internal_directory_count() const {
  return directory_count_;
}
inline int32_t ClientDownloadRequest_ArchiveSummary::directory_count() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.ArchiveSummary.directory_count)
  return _internal_directory_count();
}
inline void ClientDownloadRequest_ArchiveSummary::_internal_set_directory_count(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  directory_count_ = value;
}
inline void ClientDownloadRequest_ArchiveSummary::set_directory_count(int32_t value) {
  _internal_set_directory_count(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.ArchiveSummary.directory_count)
}

// -------------------------------------------------------------------

// ClientDownloadRequest

// required string url = 1;
inline bool ClientDownloadRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_url() const {
  return _internal_has_url();
}
inline void ClientDownloadRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadRequest::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.url)
}
inline std::string* ClientDownloadRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.url)
  return _s;
}
inline const std::string& ClientDownloadRequest::_internal_url() const {
  return url_.Get();
}
inline void ClientDownloadRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.url)
}

// required .safe_browsing.ClientDownloadRequest.Digests digests = 2;
inline bool ClientDownloadRequest::_internal_has_digests() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || digests_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest::has_digests() const {
  return _internal_has_digests();
}
inline void ClientDownloadRequest::clear_digests() {
  if (digests_ != nullptr) digests_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::safe_browsing::ClientDownloadRequest_Digests& ClientDownloadRequest::_internal_digests() const {
  const ::safe_browsing::ClientDownloadRequest_Digests* p = digests_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_Digests&>(
      ::safe_browsing::_ClientDownloadRequest_Digests_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_Digests& ClientDownloadRequest::digests() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.digests)
  return _internal_digests();
}
inline void ClientDownloadRequest::unsafe_arena_set_allocated_digests(
    ::safe_browsing::ClientDownloadRequest_Digests* digests) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digests_);
  }
  digests_ = digests;
  if (digests) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.digests)
}
inline ::safe_browsing::ClientDownloadRequest_Digests* ClientDownloadRequest::release_digests() {
  _has_bits_[0] &= ~0x00000020u;
  ::safe_browsing::ClientDownloadRequest_Digests* temp = digests_;
  digests_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_Digests* ClientDownloadRequest::unsafe_arena_release_digests() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.digests)
  _has_bits_[0] &= ~0x00000020u;
  ::safe_browsing::ClientDownloadRequest_Digests* temp = digests_;
  digests_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_Digests* ClientDownloadRequest::_internal_mutable_digests() {
  _has_bits_[0] |= 0x00000020u;
  if (digests_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_Digests>(GetArenaForAllocation());
    digests_ = p;
  }
  return digests_;
}
inline ::safe_browsing::ClientDownloadRequest_Digests* ClientDownloadRequest::mutable_digests() {
  ::safe_browsing::ClientDownloadRequest_Digests* _msg = _internal_mutable_digests();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.digests)
  return _msg;
}
inline void ClientDownloadRequest::set_allocated_digests(::safe_browsing::ClientDownloadRequest_Digests* digests) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete digests_;
  }
  if (digests) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(digests);
    if (message_arena != submessage_arena) {
      digests = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digests, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  digests_ = digests;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.digests)
}

// required int64 length = 3;
inline bool ClientDownloadRequest::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_length() const {
  return _internal_has_length();
}
inline void ClientDownloadRequest::clear_length() {
  length_ = int64_t{0};
  _has_bits_[0] &= ~0x00001000u;
}
inline int64_t ClientDownloadRequest::_internal_length() const {
  return length_;
}
inline int64_t ClientDownloadRequest::length() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.length)
  return _internal_length();
}
inline void ClientDownloadRequest::_internal_set_length(int64_t value) {
  _has_bits_[0] |= 0x00001000u;
  length_ = value;
}
inline void ClientDownloadRequest::set_length(int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.length)
}

// repeated .safe_browsing.ClientDownloadRequest.Resource resources = 4;
inline int ClientDownloadRequest::_internal_resources_size() const {
  return resources_.size();
}
inline int ClientDownloadRequest::resources_size() const {
  return _internal_resources_size();
}
inline void ClientDownloadRequest::clear_resources() {
  resources_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_Resource* ClientDownloadRequest::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.resources)
  return resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_Resource >*
ClientDownloadRequest::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.resources)
  return &resources_;
}
inline const ::safe_browsing::ClientDownloadRequest_Resource& ClientDownloadRequest::_internal_resources(int index) const {
  return resources_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_Resource& ClientDownloadRequest::resources(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.resources)
  return _internal_resources(index);
}
inline ::safe_browsing::ClientDownloadRequest_Resource* ClientDownloadRequest::_internal_add_resources() {
  return resources_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_Resource* ClientDownloadRequest::add_resources() {
  ::safe_browsing::ClientDownloadRequest_Resource* _add = _internal_add_resources();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_Resource >&
ClientDownloadRequest::resources() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.resources)
  return resources_;
}

// optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
inline bool ClientDownloadRequest::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || signature_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest::has_signature() const {
  return _internal_has_signature();
}
inline void ClientDownloadRequest::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::safe_browsing::ClientDownloadRequest_SignatureInfo& ClientDownloadRequest::_internal_signature() const {
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo* p = signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_SignatureInfo&>(
      ::safe_browsing::_ClientDownloadRequest_SignatureInfo_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_SignatureInfo& ClientDownloadRequest::signature() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.signature)
  return _internal_signature();
}
inline void ClientDownloadRequest::unsafe_arena_set_allocated_signature(
    ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.signature)
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientDownloadRequest::release_signature() {
  _has_bits_[0] &= ~0x00000040u;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* temp = signature_;
  signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientDownloadRequest::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.signature)
  _has_bits_[0] &= ~0x00000040u;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientDownloadRequest::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000040u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_SignatureInfo>(GetArenaForAllocation());
    signature_ = p;
  }
  return signature_;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientDownloadRequest::mutable_signature() {
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.signature)
  return _msg;
}
inline void ClientDownloadRequest::set_allocated_signature(::safe_browsing::ClientDownloadRequest_SignatureInfo* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature);
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.signature)
}

// optional bool user_initiated = 6;
inline bool ClientDownloadRequest::_internal_has_user_initiated() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_user_initiated() const {
  return _internal_has_user_initiated();
}
inline void ClientDownloadRequest::clear_user_initiated() {
  user_initiated_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ClientDownloadRequest::_internal_user_initiated() const {
  return user_initiated_;
}
inline bool ClientDownloadRequest::user_initiated() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.user_initiated)
  return _internal_user_initiated();
}
inline void ClientDownloadRequest::_internal_set_user_initiated(bool value) {
  _has_bits_[0] |= 0x00004000u;
  user_initiated_ = value;
}
inline void ClientDownloadRequest::set_user_initiated(bool value) {
  _internal_set_user_initiated(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.user_initiated)
}

// optional string file_basename = 9;
inline bool ClientDownloadRequest::_internal_has_file_basename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_file_basename() const {
  return _internal_has_file_basename();
}
inline void ClientDownloadRequest::clear_file_basename() {
  file_basename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientDownloadRequest::file_basename() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.file_basename)
  return _internal_file_basename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest::set_file_basename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_basename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.file_basename)
}
inline std::string* ClientDownloadRequest::mutable_file_basename() {
  std::string* _s = _internal_mutable_file_basename();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.file_basename)
  return _s;
}
inline const std::string& ClientDownloadRequest::_internal_file_basename() const {
  return file_basename_.Get();
}
inline void ClientDownloadRequest::_internal_set_file_basename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_basename_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::_internal_mutable_file_basename() {
  _has_bits_[0] |= 0x00000002u;
  return file_basename_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::release_file_basename() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.file_basename)
  if (!_internal_has_file_basename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_basename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_basename_.IsDefault()) {
    file_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest::set_allocated_file_basename(std::string* file_basename) {
  if (file_basename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_basename_.SetAllocated(file_basename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_basename_.IsDefault()) {
    file_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.file_basename)
}

// optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 10 [default = WIN_EXECUTABLE];
inline bool ClientDownloadRequest::_internal_has_download_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_download_type() const {
  return _internal_has_download_type();
}
inline void ClientDownloadRequest::clear_download_type() {
  download_type_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::safe_browsing::ClientDownloadRequest_DownloadType ClientDownloadRequest::_internal_download_type() const {
  return static_cast< ::safe_browsing::ClientDownloadRequest_DownloadType >(download_type_);
}
inline ::safe_browsing::ClientDownloadRequest_DownloadType ClientDownloadRequest::download_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.download_type)
  return _internal_download_type();
}
inline void ClientDownloadRequest::_internal_set_download_type(::safe_browsing::ClientDownloadRequest_DownloadType value) {
  assert(::safe_browsing::ClientDownloadRequest_DownloadType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  download_type_ = value;
}
inline void ClientDownloadRequest::set_download_type(::safe_browsing::ClientDownloadRequest_DownloadType value) {
  _internal_set_download_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.download_type)
}

// optional string locale = 11;
inline bool ClientDownloadRequest::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_locale() const {
  return _internal_has_locale();
}
inline void ClientDownloadRequest::clear_locale() {
  locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientDownloadRequest::locale() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest::set_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.locale)
}
inline std::string* ClientDownloadRequest::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.locale)
  return _s;
}
inline const std::string& ClientDownloadRequest::_internal_locale() const {
  return locale_.Get();
}
inline void ClientDownloadRequest::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000004u;
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::release_locale() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.locale)
}

// optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 18;
inline bool ClientDownloadRequest::_internal_has_image_headers() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || image_headers_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest::has_image_headers() const {
  return _internal_has_image_headers();
}
inline void ClientDownloadRequest::clear_image_headers() {
  if (image_headers_ != nullptr) image_headers_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientDownloadRequest::_internal_image_headers() const {
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders* p = image_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_ImageHeaders&>(
      ::safe_browsing::_ClientDownloadRequest_ImageHeaders_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientDownloadRequest::image_headers() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.image_headers)
  return _internal_image_headers();
}
inline void ClientDownloadRequest::unsafe_arena_set_allocated_image_headers(
    ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_headers_);
  }
  image_headers_ = image_headers;
  if (image_headers) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.image_headers)
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientDownloadRequest::release_image_headers() {
  _has_bits_[0] &= ~0x00000080u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientDownloadRequest::unsafe_arena_release_image_headers() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.image_headers)
  _has_bits_[0] &= ~0x00000080u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientDownloadRequest::_internal_mutable_image_headers() {
  _has_bits_[0] |= 0x00000080u;
  if (image_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ImageHeaders>(GetArenaForAllocation());
    image_headers_ = p;
  }
  return image_headers_;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientDownloadRequest::mutable_image_headers() {
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _msg = _internal_mutable_image_headers();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.image_headers)
  return _msg;
}
inline void ClientDownloadRequest::set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_headers_;
  }
  if (image_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_headers);
    if (message_arena != submessage_arena) {
      image_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_headers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  image_headers_ = image_headers;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.image_headers)
}

// repeated .safe_browsing.ClientDownloadRequest.ArchivedBinary archived_binary = 22;
inline int ClientDownloadRequest::_internal_archived_binary_size() const {
  return archived_binary_.size();
}
inline int ClientDownloadRequest::archived_binary_size() const {
  return _internal_archived_binary_size();
}
inline void ClientDownloadRequest::clear_archived_binary() {
  archived_binary_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_ArchivedBinary* ClientDownloadRequest::mutable_archived_binary(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.archived_binary)
  return archived_binary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ArchivedBinary >*
ClientDownloadRequest::mutable_archived_binary() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.archived_binary)
  return &archived_binary_;
}
inline const ::safe_browsing::ClientDownloadRequest_ArchivedBinary& ClientDownloadRequest::_internal_archived_binary(int index) const {
  return archived_binary_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_ArchivedBinary& ClientDownloadRequest::archived_binary(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.archived_binary)
  return _internal_archived_binary(index);
}
inline ::safe_browsing::ClientDownloadRequest_ArchivedBinary* ClientDownloadRequest::_internal_add_archived_binary() {
  return archived_binary_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_ArchivedBinary* ClientDownloadRequest::add_archived_binary() {
  ::safe_browsing::ClientDownloadRequest_ArchivedBinary* _add = _internal_add_archived_binary();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.archived_binary)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_ArchivedBinary >&
ClientDownloadRequest::archived_binary() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.archived_binary)
  return archived_binary_;
}

// optional .safe_browsing.ChromeUserPopulation population = 24;
inline bool ClientDownloadRequest::_internal_has_population() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || population_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest::has_population() const {
  return _internal_has_population();
}
inline void ClientDownloadRequest::clear_population() {
  if (population_ != nullptr) population_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::safe_browsing::ChromeUserPopulation& ClientDownloadRequest::_internal_population() const {
  const ::safe_browsing::ChromeUserPopulation* p = population_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ChromeUserPopulation&>(
      ::safe_browsing::_ChromeUserPopulation_default_instance_);
}
inline const ::safe_browsing::ChromeUserPopulation& ClientDownloadRequest::population() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.population)
  return _internal_population();
}
inline void ClientDownloadRequest::unsafe_arena_set_allocated_population(
    ::safe_browsing::ChromeUserPopulation* population) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(population_);
  }
  population_ = population;
  if (population) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.population)
}
inline ::safe_browsing::ChromeUserPopulation* ClientDownloadRequest::release_population() {
  _has_bits_[0] &= ~0x00000100u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* ClientDownloadRequest::unsafe_arena_release_population() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.population)
  _has_bits_[0] &= ~0x00000100u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* ClientDownloadRequest::_internal_mutable_population() {
  _has_bits_[0] |= 0x00000100u;
  if (population_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ChromeUserPopulation>(GetArenaForAllocation());
    population_ = p;
  }
  return population_;
}
inline ::safe_browsing::ChromeUserPopulation* ClientDownloadRequest::mutable_population() {
  ::safe_browsing::ChromeUserPopulation* _msg = _internal_mutable_population();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.population)
  return _msg;
}
inline void ClientDownloadRequest::set_allocated_population(::safe_browsing::ChromeUserPopulation* population) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete population_;
  }
  if (population) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(population);
    if (message_arena != submessage_arena) {
      population = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, population, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  population_ = population;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.population)
}

// optional bool archive_valid = 26;
inline bool ClientDownloadRequest::_internal_has_archive_valid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_archive_valid() const {
  return _internal_has_archive_valid();
}
inline void ClientDownloadRequest::clear_archive_valid() {
  archive_valid_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ClientDownloadRequest::_internal_archive_valid() const {
  return archive_valid_;
}
inline bool ClientDownloadRequest::archive_valid() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.archive_valid)
  return _internal_archive_valid();
}
inline void ClientDownloadRequest::_internal_set_archive_valid(bool value) {
  _has_bits_[0] |= 0x00008000u;
  archive_valid_ = value;
}
inline void ClientDownloadRequest::set_archive_valid(bool value) {
  _internal_set_archive_valid(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.archive_valid)
}

// optional bool skipped_url_allowlist = 28;
inline bool ClientDownloadRequest::_internal_has_skipped_url_allowlist() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_skipped_url_allowlist() const {
  return _internal_has_skipped_url_allowlist();
}
inline void ClientDownloadRequest::clear_skipped_url_allowlist() {
  skipped_url_allowlist_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ClientDownloadRequest::_internal_skipped_url_allowlist() const {
  return skipped_url_allowlist_;
}
inline bool ClientDownloadRequest::skipped_url_allowlist() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.skipped_url_allowlist)
  return _internal_skipped_url_allowlist();
}
inline void ClientDownloadRequest::_internal_set_skipped_url_allowlist(bool value) {
  _has_bits_[0] |= 0x00010000u;
  skipped_url_allowlist_ = value;
}
inline void ClientDownloadRequest::set_skipped_url_allowlist(bool value) {
  _internal_set_skipped_url_allowlist(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.skipped_url_allowlist)
}

// optional bool skipped_certificate_allowlist = 31;
inline bool ClientDownloadRequest::_internal_has_skipped_certificate_allowlist() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_skipped_certificate_allowlist() const {
  return _internal_has_skipped_certificate_allowlist();
}
inline void ClientDownloadRequest::clear_skipped_certificate_allowlist() {
  skipped_certificate_allowlist_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ClientDownloadRequest::_internal_skipped_certificate_allowlist() const {
  return skipped_certificate_allowlist_;
}
inline bool ClientDownloadRequest::skipped_certificate_allowlist() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.skipped_certificate_allowlist)
  return _internal_skipped_certificate_allowlist();
}
inline void ClientDownloadRequest::_internal_set_skipped_certificate_allowlist(bool value) {
  _has_bits_[0] |= 0x00020000u;
  skipped_certificate_allowlist_ = value;
}
inline void ClientDownloadRequest::set_skipped_certificate_allowlist(bool value) {
  _internal_set_skipped_certificate_allowlist(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.skipped_certificate_allowlist)
}

// repeated string alternate_extensions = 35;
inline int ClientDownloadRequest::_internal_alternate_extensions_size() const {
  return alternate_extensions_.size();
}
inline int ClientDownloadRequest::alternate_extensions_size() const {
  return _internal_alternate_extensions_size();
}
inline void ClientDownloadRequest::clear_alternate_extensions() {
  alternate_extensions_.Clear();
}
inline std::string* ClientDownloadRequest::add_alternate_extensions() {
  std::string* _s = _internal_add_alternate_extensions();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientDownloadRequest.alternate_extensions)
  return _s;
}
inline const std::string& ClientDownloadRequest::_internal_alternate_extensions(int index) const {
  return alternate_extensions_.Get(index);
}
inline const std::string& ClientDownloadRequest::alternate_extensions(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.alternate_extensions)
  return _internal_alternate_extensions(index);
}
inline std::string* ClientDownloadRequest::mutable_alternate_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.alternate_extensions)
  return alternate_extensions_.Mutable(index);
}
inline void ClientDownloadRequest::set_alternate_extensions(int index, const std::string& value) {
  alternate_extensions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.alternate_extensions)
}
inline void ClientDownloadRequest::set_alternate_extensions(int index, std::string&& value) {
  alternate_extensions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.alternate_extensions)
}
inline void ClientDownloadRequest::set_alternate_extensions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternate_extensions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientDownloadRequest.alternate_extensions)
}
inline void ClientDownloadRequest::set_alternate_extensions(int index, const char* value, size_t size) {
  alternate_extensions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientDownloadRequest.alternate_extensions)
}
inline std::string* ClientDownloadRequest::_internal_add_alternate_extensions() {
  return alternate_extensions_.Add();
}
inline void ClientDownloadRequest::add_alternate_extensions(const std::string& value) {
  alternate_extensions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.alternate_extensions)
}
inline void ClientDownloadRequest::add_alternate_extensions(std::string&& value) {
  alternate_extensions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.alternate_extensions)
}
inline void ClientDownloadRequest::add_alternate_extensions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternate_extensions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientDownloadRequest.alternate_extensions)
}
inline void ClientDownloadRequest::add_alternate_extensions(const char* value, size_t size) {
  alternate_extensions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientDownloadRequest.alternate_extensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientDownloadRequest::alternate_extensions() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.alternate_extensions)
  return alternate_extensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientDownloadRequest::mutable_alternate_extensions() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.alternate_extensions)
  return &alternate_extensions_;
}

// repeated .safe_browsing.ReferrerChainEntry referrer_chain = 36;
inline int ClientDownloadRequest::_internal_referrer_chain_size() const {
  return referrer_chain_.size();
}
inline int ClientDownloadRequest::referrer_chain_size() const {
  return _internal_referrer_chain_size();
}
inline void ClientDownloadRequest::clear_referrer_chain() {
  referrer_chain_.Clear();
}
inline ::safe_browsing::ReferrerChainEntry* ClientDownloadRequest::mutable_referrer_chain(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.referrer_chain)
  return referrer_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
ClientDownloadRequest::mutable_referrer_chain() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.referrer_chain)
  return &referrer_chain_;
}
inline const ::safe_browsing::ReferrerChainEntry& ClientDownloadRequest::_internal_referrer_chain(int index) const {
  return referrer_chain_.Get(index);
}
inline const ::safe_browsing::ReferrerChainEntry& ClientDownloadRequest::referrer_chain(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.referrer_chain)
  return _internal_referrer_chain(index);
}
inline ::safe_browsing::ReferrerChainEntry* ClientDownloadRequest::_internal_add_referrer_chain() {
  return referrer_chain_.Add();
}
inline ::safe_browsing::ReferrerChainEntry* ClientDownloadRequest::add_referrer_chain() {
  ::safe_browsing::ReferrerChainEntry* _add = _internal_add_referrer_chain();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.referrer_chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
ClientDownloadRequest::referrer_chain() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.referrer_chain)
  return referrer_chain_;
}

// optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 50;
inline bool ClientDownloadRequest::_internal_has_referrer_chain_options() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || referrer_chain_options_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest::has_referrer_chain_options() const {
  return _internal_has_referrer_chain_options();
}
inline void ClientDownloadRequest::clear_referrer_chain_options() {
  if (referrer_chain_options_ != nullptr) referrer_chain_options_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::safe_browsing::ReferrerChainOptions& ClientDownloadRequest::_internal_referrer_chain_options() const {
  const ::safe_browsing::ReferrerChainOptions* p = referrer_chain_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ReferrerChainOptions&>(
      ::safe_browsing::_ReferrerChainOptions_default_instance_);
}
inline const ::safe_browsing::ReferrerChainOptions& ClientDownloadRequest::referrer_chain_options() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.referrer_chain_options)
  return _internal_referrer_chain_options();
}
inline void ClientDownloadRequest::unsafe_arena_set_allocated_referrer_chain_options(
    ::safe_browsing::ReferrerChainOptions* referrer_chain_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referrer_chain_options_);
  }
  referrer_chain_options_ = referrer_chain_options;
  if (referrer_chain_options) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.referrer_chain_options)
}
inline ::safe_browsing::ReferrerChainOptions* ClientDownloadRequest::release_referrer_chain_options() {
  _has_bits_[0] &= ~0x00000200u;
  ::safe_browsing::ReferrerChainOptions* temp = referrer_chain_options_;
  referrer_chain_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ReferrerChainOptions* ClientDownloadRequest::unsafe_arena_release_referrer_chain_options() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.referrer_chain_options)
  _has_bits_[0] &= ~0x00000200u;
  ::safe_browsing::ReferrerChainOptions* temp = referrer_chain_options_;
  referrer_chain_options_ = nullptr;
  return temp;
}
inline ::safe_browsing::ReferrerChainOptions* ClientDownloadRequest::_internal_mutable_referrer_chain_options() {
  _has_bits_[0] |= 0x00000200u;
  if (referrer_chain_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ReferrerChainOptions>(GetArenaForAllocation());
    referrer_chain_options_ = p;
  }
  return referrer_chain_options_;
}
inline ::safe_browsing::ReferrerChainOptions* ClientDownloadRequest::mutable_referrer_chain_options() {
  ::safe_browsing::ReferrerChainOptions* _msg = _internal_mutable_referrer_chain_options();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.referrer_chain_options)
  return _msg;
}
inline void ClientDownloadRequest::set_allocated_referrer_chain_options(::safe_browsing::ReferrerChainOptions* referrer_chain_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete referrer_chain_options_;
  }
  if (referrer_chain_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(referrer_chain_options);
    if (message_arena != submessage_arena) {
      referrer_chain_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referrer_chain_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  referrer_chain_options_ = referrer_chain_options;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.referrer_chain_options)
}

// optional bool DEPRECATED_download_attribution_finch_enabled = 39 [deprecated = true];
inline bool ClientDownloadRequest::_internal_has_deprecated_download_attribution_finch_enabled() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_deprecated_download_attribution_finch_enabled() const {
  return _internal_has_deprecated_download_attribution_finch_enabled();
}
inline void ClientDownloadRequest::clear_deprecated_download_attribution_finch_enabled() {
  deprecated_download_attribution_finch_enabled_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ClientDownloadRequest::_internal_deprecated_download_attribution_finch_enabled() const {
  return deprecated_download_attribution_finch_enabled_;
}
inline bool ClientDownloadRequest::deprecated_download_attribution_finch_enabled() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.DEPRECATED_download_attribution_finch_enabled)
  return _internal_deprecated_download_attribution_finch_enabled();
}
inline void ClientDownloadRequest::_internal_set_deprecated_download_attribution_finch_enabled(bool value) {
  _has_bits_[0] |= 0x00040000u;
  deprecated_download_attribution_finch_enabled_ = value;
}
inline void ClientDownloadRequest::set_deprecated_download_attribution_finch_enabled(bool value) {
  _internal_set_deprecated_download_attribution_finch_enabled(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.DEPRECATED_download_attribution_finch_enabled)
}

// optional bytes udif_code_signature = 40;
inline bool ClientDownloadRequest::_internal_has_udif_code_signature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_udif_code_signature() const {
  return _internal_has_udif_code_signature();
}
inline void ClientDownloadRequest::clear_udif_code_signature() {
  udif_code_signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientDownloadRequest::udif_code_signature() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.udif_code_signature)
  return _internal_udif_code_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest::set_udif_code_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 udif_code_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.udif_code_signature)
}
inline std::string* ClientDownloadRequest::mutable_udif_code_signature() {
  std::string* _s = _internal_mutable_udif_code_signature();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.udif_code_signature)
  return _s;
}
inline const std::string& ClientDownloadRequest::_internal_udif_code_signature() const {
  return udif_code_signature_.Get();
}
inline void ClientDownloadRequest::_internal_set_udif_code_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  udif_code_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::_internal_mutable_udif_code_signature() {
  _has_bits_[0] |= 0x00000008u;
  return udif_code_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::release_udif_code_signature() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.udif_code_signature)
  if (!_internal_has_udif_code_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = udif_code_signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (udif_code_signature_.IsDefault()) {
    udif_code_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest::set_allocated_udif_code_signature(std::string* udif_code_signature) {
  if (udif_code_signature != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  udif_code_signature_.SetAllocated(udif_code_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (udif_code_signature_.IsDefault()) {
    udif_code_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.udif_code_signature)
}

// repeated .safe_browsing.ClientDownloadRequest.DetachedCodeSignature detached_code_signature = 59;
inline int ClientDownloadRequest::_internal_detached_code_signature_size() const {
  return detached_code_signature_.size();
}
inline int ClientDownloadRequest::detached_code_signature_size() const {
  return _internal_detached_code_signature_size();
}
inline void ClientDownloadRequest::clear_detached_code_signature() {
  detached_code_signature_.Clear();
}
inline ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature* ClientDownloadRequest::mutable_detached_code_signature(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.detached_code_signature)
  return detached_code_signature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature >*
ClientDownloadRequest::mutable_detached_code_signature() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientDownloadRequest.detached_code_signature)
  return &detached_code_signature_;
}
inline const ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature& ClientDownloadRequest::_internal_detached_code_signature(int index) const {
  return detached_code_signature_.Get(index);
}
inline const ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature& ClientDownloadRequest::detached_code_signature(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.detached_code_signature)
  return _internal_detached_code_signature(index);
}
inline ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature* ClientDownloadRequest::_internal_add_detached_code_signature() {
  return detached_code_signature_.Add();
}
inline ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature* ClientDownloadRequest::add_detached_code_signature() {
  ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature* _add = _internal_add_detached_code_signature();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientDownloadRequest.detached_code_signature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature >&
ClientDownloadRequest::detached_code_signature() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientDownloadRequest.detached_code_signature)
  return detached_code_signature_;
}

// optional bool request_ap_verdicts = 67;
inline bool ClientDownloadRequest::_internal_has_request_ap_verdicts() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_request_ap_verdicts() const {
  return _internal_has_request_ap_verdicts();
}
inline void ClientDownloadRequest::clear_request_ap_verdicts() {
  request_ap_verdicts_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ClientDownloadRequest::_internal_request_ap_verdicts() const {
  return request_ap_verdicts_;
}
inline bool ClientDownloadRequest::request_ap_verdicts() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.request_ap_verdicts)
  return _internal_request_ap_verdicts();
}
inline void ClientDownloadRequest::_internal_set_request_ap_verdicts(bool value) {
  _has_bits_[0] |= 0x00080000u;
  request_ap_verdicts_ = value;
}
inline void ClientDownloadRequest::set_request_ap_verdicts(bool value) {
  _internal_set_request_ap_verdicts(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.request_ap_verdicts)
}

// optional int32 archive_file_count = 68;
inline bool ClientDownloadRequest::_internal_has_archive_file_count() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_archive_file_count() const {
  return _internal_has_archive_file_count();
}
inline void ClientDownloadRequest::clear_archive_file_count() {
  archive_file_count_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline int32_t ClientDownloadRequest::_internal_archive_file_count() const {
  return archive_file_count_;
}
inline int32_t ClientDownloadRequest::archive_file_count() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.archive_file_count)
  return _internal_archive_file_count();
}
inline void ClientDownloadRequest::_internal_set_archive_file_count(int32_t value) {
  _has_bits_[0] |= 0x00100000u;
  archive_file_count_ = value;
}
inline void ClientDownloadRequest::set_archive_file_count(int32_t value) {
  _internal_set_archive_file_count(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.archive_file_count)
}

// optional int32 archive_directory_count = 69;
inline bool ClientDownloadRequest::_internal_has_archive_directory_count() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_archive_directory_count() const {
  return _internal_has_archive_directory_count();
}
inline void ClientDownloadRequest::clear_archive_directory_count() {
  archive_directory_count_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline int32_t ClientDownloadRequest::_internal_archive_directory_count() const {
  return archive_directory_count_;
}
inline int32_t ClientDownloadRequest::archive_directory_count() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.archive_directory_count)
  return _internal_archive_directory_count();
}
inline void ClientDownloadRequest::_internal_set_archive_directory_count(int32_t value) {
  _has_bits_[0] |= 0x00200000u;
  archive_directory_count_ = value;
}
inline void ClientDownloadRequest::set_archive_directory_count(int32_t value) {
  _internal_set_archive_directory_count(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.archive_directory_count)
}

// optional string access_token = 78;
inline bool ClientDownloadRequest::_internal_has_access_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientDownloadRequest::has_access_token() const {
  return _internal_has_access_token();
}
inline void ClientDownloadRequest::clear_access_token() {
  access_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientDownloadRequest::access_token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadRequest::set_access_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 access_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadRequest.access_token)
}
inline std::string* ClientDownloadRequest::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.access_token)
  return _s;
}
inline const std::string& ClientDownloadRequest::_internal_access_token() const {
  return access_token_.Get();
}
inline void ClientDownloadRequest::_internal_set_access_token(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::_internal_mutable_access_token() {
  _has_bits_[0] |= 0x00000010u;
  return access_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.access_token)
  if (!_internal_has_access_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = access_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (access_token_.IsDefault()) {
    access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  access_token_.SetAllocated(access_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (access_token_.IsDefault()) {
    access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.access_token)
}

// optional .safe_browsing.ClientDownloadRequest.DocumentSummary document_summary = 84;
inline bool ClientDownloadRequest::_internal_has_document_summary() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || document_summary_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest::has_document_summary() const {
  return _internal_has_document_summary();
}
inline void ClientDownloadRequest::clear_document_summary() {
  if (document_summary_ != nullptr) document_summary_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::safe_browsing::ClientDownloadRequest_DocumentSummary& ClientDownloadRequest::_internal_document_summary() const {
  const ::safe_browsing::ClientDownloadRequest_DocumentSummary* p = document_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_DocumentSummary&>(
      ::safe_browsing::_ClientDownloadRequest_DocumentSummary_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_DocumentSummary& ClientDownloadRequest::document_summary() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.document_summary)
  return _internal_document_summary();
}
inline void ClientDownloadRequest::unsafe_arena_set_allocated_document_summary(
    ::safe_browsing::ClientDownloadRequest_DocumentSummary* document_summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_summary_);
  }
  document_summary_ = document_summary;
  if (document_summary) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.document_summary)
}
inline ::safe_browsing::ClientDownloadRequest_DocumentSummary* ClientDownloadRequest::release_document_summary() {
  _has_bits_[0] &= ~0x00000400u;
  ::safe_browsing::ClientDownloadRequest_DocumentSummary* temp = document_summary_;
  document_summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentSummary* ClientDownloadRequest::unsafe_arena_release_document_summary() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.document_summary)
  _has_bits_[0] &= ~0x00000400u;
  ::safe_browsing::ClientDownloadRequest_DocumentSummary* temp = document_summary_;
  document_summary_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentSummary* ClientDownloadRequest::_internal_mutable_document_summary() {
  _has_bits_[0] |= 0x00000400u;
  if (document_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_DocumentSummary>(GetArenaForAllocation());
    document_summary_ = p;
  }
  return document_summary_;
}
inline ::safe_browsing::ClientDownloadRequest_DocumentSummary* ClientDownloadRequest::mutable_document_summary() {
  ::safe_browsing::ClientDownloadRequest_DocumentSummary* _msg = _internal_mutable_document_summary();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.document_summary)
  return _msg;
}
inline void ClientDownloadRequest::set_allocated_document_summary(::safe_browsing::ClientDownloadRequest_DocumentSummary* document_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete document_summary_;
  }
  if (document_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(document_summary);
    if (message_arena != submessage_arena) {
      document_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  document_summary_ = document_summary;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.document_summary)
}

// optional .safe_browsing.ClientDownloadRequest.ArchiveSummary archive_summary = 85;
inline bool ClientDownloadRequest::_internal_has_archive_summary() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || archive_summary_ != nullptr);
  return value;
}
inline bool ClientDownloadRequest::has_archive_summary() const {
  return _internal_has_archive_summary();
}
inline void ClientDownloadRequest::clear_archive_summary() {
  if (archive_summary_ != nullptr) archive_summary_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::safe_browsing::ClientDownloadRequest_ArchiveSummary& ClientDownloadRequest::_internal_archive_summary() const {
  const ::safe_browsing::ClientDownloadRequest_ArchiveSummary* p = archive_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_ArchiveSummary&>(
      ::safe_browsing::_ClientDownloadRequest_ArchiveSummary_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_ArchiveSummary& ClientDownloadRequest::archive_summary() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadRequest.archive_summary)
  return _internal_archive_summary();
}
inline void ClientDownloadRequest::unsafe_arena_set_allocated_archive_summary(
    ::safe_browsing::ClientDownloadRequest_ArchiveSummary* archive_summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archive_summary_);
  }
  archive_summary_ = archive_summary;
  if (archive_summary) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadRequest.archive_summary)
}
inline ::safe_browsing::ClientDownloadRequest_ArchiveSummary* ClientDownloadRequest::release_archive_summary() {
  _has_bits_[0] &= ~0x00000800u;
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary* temp = archive_summary_;
  archive_summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ArchiveSummary* ClientDownloadRequest::unsafe_arena_release_archive_summary() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadRequest.archive_summary)
  _has_bits_[0] &= ~0x00000800u;
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary* temp = archive_summary_;
  archive_summary_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ArchiveSummary* ClientDownloadRequest::_internal_mutable_archive_summary() {
  _has_bits_[0] |= 0x00000800u;
  if (archive_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ArchiveSummary>(GetArenaForAllocation());
    archive_summary_ = p;
  }
  return archive_summary_;
}
inline ::safe_browsing::ClientDownloadRequest_ArchiveSummary* ClientDownloadRequest::mutable_archive_summary() {
  ::safe_browsing::ClientDownloadRequest_ArchiveSummary* _msg = _internal_mutable_archive_summary();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadRequest.archive_summary)
  return _msg;
}
inline void ClientDownloadRequest::set_allocated_archive_summary(::safe_browsing::ClientDownloadRequest_ArchiveSummary* archive_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete archive_summary_;
  }
  if (archive_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(archive_summary);
    if (message_arena != submessage_arena) {
      archive_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archive_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  archive_summary_ = archive_summary;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadRequest.archive_summary)
}

// -------------------------------------------------------------------

// ReferrerChainOptions

// optional int32 recent_navigations_to_collect = 1 [default = 0];
inline bool ReferrerChainOptions::_internal_has_recent_navigations_to_collect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferrerChainOptions::has_recent_navigations_to_collect() const {
  return _internal_has_recent_navigations_to_collect();
}
inline void ReferrerChainOptions::clear_recent_navigations_to_collect() {
  recent_navigations_to_collect_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ReferrerChainOptions::_internal_recent_navigations_to_collect() const {
  return recent_navigations_to_collect_;
}
inline int32_t ReferrerChainOptions::recent_navigations_to_collect() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainOptions.recent_navigations_to_collect)
  return _internal_recent_navigations_to_collect();
}
inline void ReferrerChainOptions::_internal_set_recent_navigations_to_collect(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  recent_navigations_to_collect_ = value;
}
inline void ReferrerChainOptions::set_recent_navigations_to_collect(int32_t value) {
  _internal_set_recent_navigations_to_collect(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainOptions.recent_navigations_to_collect)
}

// -------------------------------------------------------------------

// ReferrerChainEntry_ServerRedirect

// optional string url = 1;
inline bool ReferrerChainEntry_ServerRedirect::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferrerChainEntry_ServerRedirect::has_url() const {
  return _internal_has_url();
}
inline void ReferrerChainEntry_ServerRedirect::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReferrerChainEntry_ServerRedirect::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.ServerRedirect.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReferrerChainEntry_ServerRedirect::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.ServerRedirect.url)
}
inline std::string* ReferrerChainEntry_ServerRedirect::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ReferrerChainEntry.ServerRedirect.url)
  return _s;
}
inline const std::string& ReferrerChainEntry_ServerRedirect::_internal_url() const {
  return url_.Get();
}
inline void ReferrerChainEntry_ServerRedirect::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry_ServerRedirect::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry_ServerRedirect::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ReferrerChainEntry.ServerRedirect.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReferrerChainEntry_ServerRedirect::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ReferrerChainEntry.ServerRedirect.url)
}

// -------------------------------------------------------------------

// ReferrerChainEntry

// optional string url = 1;
inline bool ReferrerChainEntry::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_url() const {
  return _internal_has_url();
}
inline void ReferrerChainEntry::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReferrerChainEntry::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReferrerChainEntry::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.url)
}
inline std::string* ReferrerChainEntry::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ReferrerChainEntry.url)
  return _s;
}
inline const std::string& ReferrerChainEntry::_internal_url() const {
  return url_.Get();
}
inline void ReferrerChainEntry::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ReferrerChainEntry.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReferrerChainEntry::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ReferrerChainEntry.url)
}

// optional string main_frame_url = 9;
inline bool ReferrerChainEntry::_internal_has_main_frame_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_main_frame_url() const {
  return _internal_has_main_frame_url();
}
inline void ReferrerChainEntry::clear_main_frame_url() {
  main_frame_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ReferrerChainEntry::main_frame_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.main_frame_url)
  return _internal_main_frame_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReferrerChainEntry::set_main_frame_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 main_frame_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.main_frame_url)
}
inline std::string* ReferrerChainEntry::mutable_main_frame_url() {
  std::string* _s = _internal_mutable_main_frame_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ReferrerChainEntry.main_frame_url)
  return _s;
}
inline const std::string& ReferrerChainEntry::_internal_main_frame_url() const {
  return main_frame_url_.Get();
}
inline void ReferrerChainEntry::_internal_set_main_frame_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  main_frame_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry::_internal_mutable_main_frame_url() {
  _has_bits_[0] |= 0x00000008u;
  return main_frame_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry::release_main_frame_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ReferrerChainEntry.main_frame_url)
  if (!_internal_has_main_frame_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = main_frame_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (main_frame_url_.IsDefault()) {
    main_frame_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReferrerChainEntry::set_allocated_main_frame_url(std::string* main_frame_url) {
  if (main_frame_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  main_frame_url_.SetAllocated(main_frame_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (main_frame_url_.IsDefault()) {
    main_frame_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ReferrerChainEntry.main_frame_url)
}

// optional .safe_browsing.ReferrerChainEntry.URLType type = 2 [default = CLIENT_REDIRECT];
inline bool ReferrerChainEntry::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_type() const {
  return _internal_has_type();
}
inline void ReferrerChainEntry::clear_type() {
  type_ = 4;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::safe_browsing::ReferrerChainEntry_URLType ReferrerChainEntry::_internal_type() const {
  return static_cast< ::safe_browsing::ReferrerChainEntry_URLType >(type_);
}
inline ::safe_browsing::ReferrerChainEntry_URLType ReferrerChainEntry::type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.type)
  return _internal_type();
}
inline void ReferrerChainEntry::_internal_set_type(::safe_browsing::ReferrerChainEntry_URLType value) {
  assert(::safe_browsing::ReferrerChainEntry_URLType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
}
inline void ReferrerChainEntry::set_type(::safe_browsing::ReferrerChainEntry_URLType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.type)
}

// repeated string ip_addresses = 3;
inline int ReferrerChainEntry::_internal_ip_addresses_size() const {
  return ip_addresses_.size();
}
inline int ReferrerChainEntry::ip_addresses_size() const {
  return _internal_ip_addresses_size();
}
inline void ReferrerChainEntry::clear_ip_addresses() {
  ip_addresses_.Clear();
}
inline std::string* ReferrerChainEntry::add_ip_addresses() {
  std::string* _s = _internal_add_ip_addresses();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ReferrerChainEntry.ip_addresses)
  return _s;
}
inline const std::string& ReferrerChainEntry::_internal_ip_addresses(int index) const {
  return ip_addresses_.Get(index);
}
inline const std::string& ReferrerChainEntry::ip_addresses(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.ip_addresses)
  return _internal_ip_addresses(index);
}
inline std::string* ReferrerChainEntry::mutable_ip_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ReferrerChainEntry.ip_addresses)
  return ip_addresses_.Mutable(index);
}
inline void ReferrerChainEntry::set_ip_addresses(int index, const std::string& value) {
  ip_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.ip_addresses)
}
inline void ReferrerChainEntry::set_ip_addresses(int index, std::string&& value) {
  ip_addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.ip_addresses)
}
inline void ReferrerChainEntry::set_ip_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ReferrerChainEntry.ip_addresses)
}
inline void ReferrerChainEntry::set_ip_addresses(int index, const char* value, size_t size) {
  ip_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ReferrerChainEntry.ip_addresses)
}
inline std::string* ReferrerChainEntry::_internal_add_ip_addresses() {
  return ip_addresses_.Add();
}
inline void ReferrerChainEntry::add_ip_addresses(const std::string& value) {
  ip_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ReferrerChainEntry.ip_addresses)
}
inline void ReferrerChainEntry::add_ip_addresses(std::string&& value) {
  ip_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ReferrerChainEntry.ip_addresses)
}
inline void ReferrerChainEntry::add_ip_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ReferrerChainEntry.ip_addresses)
}
inline void ReferrerChainEntry::add_ip_addresses(const char* value, size_t size) {
  ip_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ReferrerChainEntry.ip_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReferrerChainEntry::ip_addresses() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ReferrerChainEntry.ip_addresses)
  return ip_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReferrerChainEntry::mutable_ip_addresses() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ReferrerChainEntry.ip_addresses)
  return &ip_addresses_;
}

// optional string referrer_url = 4;
inline bool ReferrerChainEntry::_internal_has_referrer_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_referrer_url() const {
  return _internal_has_referrer_url();
}
inline void ReferrerChainEntry::clear_referrer_url() {
  referrer_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReferrerChainEntry::referrer_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.referrer_url)
  return _internal_referrer_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReferrerChainEntry::set_referrer_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 referrer_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.referrer_url)
}
inline std::string* ReferrerChainEntry::mutable_referrer_url() {
  std::string* _s = _internal_mutable_referrer_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ReferrerChainEntry.referrer_url)
  return _s;
}
inline const std::string& ReferrerChainEntry::_internal_referrer_url() const {
  return referrer_url_.Get();
}
inline void ReferrerChainEntry::_internal_set_referrer_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  referrer_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry::_internal_mutable_referrer_url() {
  _has_bits_[0] |= 0x00000002u;
  return referrer_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry::release_referrer_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ReferrerChainEntry.referrer_url)
  if (!_internal_has_referrer_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = referrer_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_url_.IsDefault()) {
    referrer_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReferrerChainEntry::set_allocated_referrer_url(std::string* referrer_url) {
  if (referrer_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  referrer_url_.SetAllocated(referrer_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_url_.IsDefault()) {
    referrer_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ReferrerChainEntry.referrer_url)
}

// optional string referrer_main_frame_url = 5;
inline bool ReferrerChainEntry::_internal_has_referrer_main_frame_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_referrer_main_frame_url() const {
  return _internal_has_referrer_main_frame_url();
}
inline void ReferrerChainEntry::clear_referrer_main_frame_url() {
  referrer_main_frame_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ReferrerChainEntry::referrer_main_frame_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.referrer_main_frame_url)
  return _internal_referrer_main_frame_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReferrerChainEntry::set_referrer_main_frame_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 referrer_main_frame_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.referrer_main_frame_url)
}
inline std::string* ReferrerChainEntry::mutable_referrer_main_frame_url() {
  std::string* _s = _internal_mutable_referrer_main_frame_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ReferrerChainEntry.referrer_main_frame_url)
  return _s;
}
inline const std::string& ReferrerChainEntry::_internal_referrer_main_frame_url() const {
  return referrer_main_frame_url_.Get();
}
inline void ReferrerChainEntry::_internal_set_referrer_main_frame_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  referrer_main_frame_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry::_internal_mutable_referrer_main_frame_url() {
  _has_bits_[0] |= 0x00000004u;
  return referrer_main_frame_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ReferrerChainEntry::release_referrer_main_frame_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ReferrerChainEntry.referrer_main_frame_url)
  if (!_internal_has_referrer_main_frame_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = referrer_main_frame_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_main_frame_url_.IsDefault()) {
    referrer_main_frame_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReferrerChainEntry::set_allocated_referrer_main_frame_url(std::string* referrer_main_frame_url) {
  if (referrer_main_frame_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  referrer_main_frame_url_.SetAllocated(referrer_main_frame_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_main_frame_url_.IsDefault()) {
    referrer_main_frame_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ReferrerChainEntry.referrer_main_frame_url)
}

// optional bool is_retargeting = 6;
inline bool ReferrerChainEntry::_internal_has_is_retargeting() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_is_retargeting() const {
  return _internal_has_is_retargeting();
}
inline void ReferrerChainEntry::clear_is_retargeting() {
  is_retargeting_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ReferrerChainEntry::_internal_is_retargeting() const {
  return is_retargeting_;
}
inline bool ReferrerChainEntry::is_retargeting() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.is_retargeting)
  return _internal_is_retargeting();
}
inline void ReferrerChainEntry::_internal_set_is_retargeting(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_retargeting_ = value;
}
inline void ReferrerChainEntry::set_is_retargeting(bool value) {
  _internal_set_is_retargeting(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.is_retargeting)
}

// optional double navigation_time_msec = 7;
inline bool ReferrerChainEntry::_internal_has_navigation_time_msec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_navigation_time_msec() const {
  return _internal_has_navigation_time_msec();
}
inline void ReferrerChainEntry::clear_navigation_time_msec() {
  navigation_time_msec_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double ReferrerChainEntry::_internal_navigation_time_msec() const {
  return navigation_time_msec_;
}
inline double ReferrerChainEntry::navigation_time_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.navigation_time_msec)
  return _internal_navigation_time_msec();
}
inline void ReferrerChainEntry::_internal_set_navigation_time_msec(double value) {
  _has_bits_[0] |= 0x00000010u;
  navigation_time_msec_ = value;
}
inline void ReferrerChainEntry::set_navigation_time_msec(double value) {
  _internal_set_navigation_time_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.navigation_time_msec)
}

// repeated .safe_browsing.ReferrerChainEntry.ServerRedirect server_redirect_chain = 8;
inline int ReferrerChainEntry::_internal_server_redirect_chain_size() const {
  return server_redirect_chain_.size();
}
inline int ReferrerChainEntry::server_redirect_chain_size() const {
  return _internal_server_redirect_chain_size();
}
inline void ReferrerChainEntry::clear_server_redirect_chain() {
  server_redirect_chain_.Clear();
}
inline ::safe_browsing::ReferrerChainEntry_ServerRedirect* ReferrerChainEntry::mutable_server_redirect_chain(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ReferrerChainEntry.server_redirect_chain)
  return server_redirect_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry_ServerRedirect >*
ReferrerChainEntry::mutable_server_redirect_chain() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ReferrerChainEntry.server_redirect_chain)
  return &server_redirect_chain_;
}
inline const ::safe_browsing::ReferrerChainEntry_ServerRedirect& ReferrerChainEntry::_internal_server_redirect_chain(int index) const {
  return server_redirect_chain_.Get(index);
}
inline const ::safe_browsing::ReferrerChainEntry_ServerRedirect& ReferrerChainEntry::server_redirect_chain(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.server_redirect_chain)
  return _internal_server_redirect_chain(index);
}
inline ::safe_browsing::ReferrerChainEntry_ServerRedirect* ReferrerChainEntry::_internal_add_server_redirect_chain() {
  return server_redirect_chain_.Add();
}
inline ::safe_browsing::ReferrerChainEntry_ServerRedirect* ReferrerChainEntry::add_server_redirect_chain() {
  ::safe_browsing::ReferrerChainEntry_ServerRedirect* _add = _internal_add_server_redirect_chain();
  // @@protoc_insertion_point(field_add:safe_browsing.ReferrerChainEntry.server_redirect_chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry_ServerRedirect >&
ReferrerChainEntry::server_redirect_chain() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ReferrerChainEntry.server_redirect_chain)
  return server_redirect_chain_;
}

// optional .safe_browsing.ReferrerChainEntry.NavigationInitiation navigation_initiation = 10;
inline bool ReferrerChainEntry::_internal_has_navigation_initiation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_navigation_initiation() const {
  return _internal_has_navigation_initiation();
}
inline void ReferrerChainEntry::clear_navigation_initiation() {
  navigation_initiation_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::safe_browsing::ReferrerChainEntry_NavigationInitiation ReferrerChainEntry::_internal_navigation_initiation() const {
  return static_cast< ::safe_browsing::ReferrerChainEntry_NavigationInitiation >(navigation_initiation_);
}
inline ::safe_browsing::ReferrerChainEntry_NavigationInitiation ReferrerChainEntry::navigation_initiation() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.navigation_initiation)
  return _internal_navigation_initiation();
}
inline void ReferrerChainEntry::_internal_set_navigation_initiation(::safe_browsing::ReferrerChainEntry_NavigationInitiation value) {
  assert(::safe_browsing::ReferrerChainEntry_NavigationInitiation_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  navigation_initiation_ = value;
}
inline void ReferrerChainEntry::set_navigation_initiation(::safe_browsing::ReferrerChainEntry_NavigationInitiation value) {
  _internal_set_navigation_initiation(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.navigation_initiation)
}

// optional bool maybe_launched_by_external_application = 11;
inline bool ReferrerChainEntry::_internal_has_maybe_launched_by_external_application() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_maybe_launched_by_external_application() const {
  return _internal_has_maybe_launched_by_external_application();
}
inline void ReferrerChainEntry::clear_maybe_launched_by_external_application() {
  maybe_launched_by_external_application_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ReferrerChainEntry::_internal_maybe_launched_by_external_application() const {
  return maybe_launched_by_external_application_;
}
inline bool ReferrerChainEntry::maybe_launched_by_external_application() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.maybe_launched_by_external_application)
  return _internal_maybe_launched_by_external_application();
}
inline void ReferrerChainEntry::_internal_set_maybe_launched_by_external_application(bool value) {
  _has_bits_[0] |= 0x00000080u;
  maybe_launched_by_external_application_ = value;
}
inline void ReferrerChainEntry::set_maybe_launched_by_external_application(bool value) {
  _internal_set_maybe_launched_by_external_application(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.maybe_launched_by_external_application)
}

// optional bool is_subframe_url_removed = 12;
inline bool ReferrerChainEntry::_internal_has_is_subframe_url_removed() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_is_subframe_url_removed() const {
  return _internal_has_is_subframe_url_removed();
}
inline void ReferrerChainEntry::clear_is_subframe_url_removed() {
  is_subframe_url_removed_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ReferrerChainEntry::_internal_is_subframe_url_removed() const {
  return is_subframe_url_removed_;
}
inline bool ReferrerChainEntry::is_subframe_url_removed() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.is_subframe_url_removed)
  return _internal_is_subframe_url_removed();
}
inline void ReferrerChainEntry::_internal_set_is_subframe_url_removed(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_subframe_url_removed_ = value;
}
inline void ReferrerChainEntry::set_is_subframe_url_removed(bool value) {
  _internal_set_is_subframe_url_removed(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.is_subframe_url_removed)
}

// optional bool is_subframe_referrer_url_removed = 13;
inline bool ReferrerChainEntry::_internal_has_is_subframe_referrer_url_removed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_is_subframe_referrer_url_removed() const {
  return _internal_has_is_subframe_referrer_url_removed();
}
inline void ReferrerChainEntry::clear_is_subframe_referrer_url_removed() {
  is_subframe_referrer_url_removed_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ReferrerChainEntry::_internal_is_subframe_referrer_url_removed() const {
  return is_subframe_referrer_url_removed_;
}
inline bool ReferrerChainEntry::is_subframe_referrer_url_removed() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.is_subframe_referrer_url_removed)
  return _internal_is_subframe_referrer_url_removed();
}
inline void ReferrerChainEntry::_internal_set_is_subframe_referrer_url_removed(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_subframe_referrer_url_removed_ = value;
}
inline void ReferrerChainEntry::set_is_subframe_referrer_url_removed(bool value) {
  _internal_set_is_subframe_referrer_url_removed(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.is_subframe_referrer_url_removed)
}

// optional bool is_url_removed_by_policy = 14;
inline bool ReferrerChainEntry::_internal_has_is_url_removed_by_policy() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ReferrerChainEntry::has_is_url_removed_by_policy() const {
  return _internal_has_is_url_removed_by_policy();
}
inline void ReferrerChainEntry::clear_is_url_removed_by_policy() {
  is_url_removed_by_policy_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ReferrerChainEntry::_internal_is_url_removed_by_policy() const {
  return is_url_removed_by_policy_;
}
inline bool ReferrerChainEntry::is_url_removed_by_policy() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ReferrerChainEntry.is_url_removed_by_policy)
  return _internal_is_url_removed_by_policy();
}
inline void ReferrerChainEntry::_internal_set_is_url_removed_by_policy(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_url_removed_by_policy_ = value;
}
inline void ReferrerChainEntry::set_is_url_removed_by_policy(bool value) {
  _internal_set_is_url_removed_by_policy(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ReferrerChainEntry.is_url_removed_by_policy)
}

// -------------------------------------------------------------------

// ClientDownloadResponse_MoreInfo

// optional string description = 1;
inline bool ClientDownloadResponse_MoreInfo::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadResponse_MoreInfo::has_description() const {
  return _internal_has_description();
}
inline void ClientDownloadResponse_MoreInfo::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadResponse_MoreInfo::description() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadResponse.MoreInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadResponse_MoreInfo::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadResponse.MoreInfo.description)
}
inline std::string* ClientDownloadResponse_MoreInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadResponse.MoreInfo.description)
  return _s;
}
inline const std::string& ClientDownloadResponse_MoreInfo::_internal_description() const {
  return description_.Get();
}
inline void ClientDownloadResponse_MoreInfo::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadResponse_MoreInfo::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadResponse_MoreInfo::release_description() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadResponse.MoreInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadResponse_MoreInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadResponse.MoreInfo.description)
}

// optional string url = 2;
inline bool ClientDownloadResponse_MoreInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDownloadResponse_MoreInfo::has_url() const {
  return _internal_has_url();
}
inline void ClientDownloadResponse_MoreInfo::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientDownloadResponse_MoreInfo::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadResponse.MoreInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadResponse_MoreInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadResponse.MoreInfo.url)
}
inline std::string* ClientDownloadResponse_MoreInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadResponse.MoreInfo.url)
  return _s;
}
inline const std::string& ClientDownloadResponse_MoreInfo::_internal_url() const {
  return url_.Get();
}
inline void ClientDownloadResponse_MoreInfo::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadResponse_MoreInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadResponse_MoreInfo::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadResponse.MoreInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadResponse_MoreInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadResponse.MoreInfo.url)
}

// -------------------------------------------------------------------

// ClientDownloadResponse

// optional .safe_browsing.ClientDownloadResponse.Verdict verdict = 1 [default = SAFE];
inline bool ClientDownloadResponse::_internal_has_verdict() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDownloadResponse::has_verdict() const {
  return _internal_has_verdict();
}
inline void ClientDownloadResponse::clear_verdict() {
  verdict_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::safe_browsing::ClientDownloadResponse_Verdict ClientDownloadResponse::_internal_verdict() const {
  return static_cast< ::safe_browsing::ClientDownloadResponse_Verdict >(verdict_);
}
inline ::safe_browsing::ClientDownloadResponse_Verdict ClientDownloadResponse::verdict() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadResponse.verdict)
  return _internal_verdict();
}
inline void ClientDownloadResponse::_internal_set_verdict(::safe_browsing::ClientDownloadResponse_Verdict value) {
  assert(::safe_browsing::ClientDownloadResponse_Verdict_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  verdict_ = value;
}
inline void ClientDownloadResponse::set_verdict(::safe_browsing::ClientDownloadResponse_Verdict value) {
  _internal_set_verdict(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadResponse.verdict)
}

// optional .safe_browsing.ClientDownloadResponse.MoreInfo more_info = 2;
inline bool ClientDownloadResponse::_internal_has_more_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || more_info_ != nullptr);
  return value;
}
inline bool ClientDownloadResponse::has_more_info() const {
  return _internal_has_more_info();
}
inline void ClientDownloadResponse::clear_more_info() {
  if (more_info_ != nullptr) more_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientDownloadResponse_MoreInfo& ClientDownloadResponse::_internal_more_info() const {
  const ::safe_browsing::ClientDownloadResponse_MoreInfo* p = more_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadResponse_MoreInfo&>(
      ::safe_browsing::_ClientDownloadResponse_MoreInfo_default_instance_);
}
inline const ::safe_browsing::ClientDownloadResponse_MoreInfo& ClientDownloadResponse::more_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadResponse.more_info)
  return _internal_more_info();
}
inline void ClientDownloadResponse::unsafe_arena_set_allocated_more_info(
    ::safe_browsing::ClientDownloadResponse_MoreInfo* more_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(more_info_);
  }
  more_info_ = more_info;
  if (more_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadResponse.more_info)
}
inline ::safe_browsing::ClientDownloadResponse_MoreInfo* ClientDownloadResponse::release_more_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadResponse_MoreInfo* temp = more_info_;
  more_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadResponse_MoreInfo* ClientDownloadResponse::unsafe_arena_release_more_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadResponse.more_info)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadResponse_MoreInfo* temp = more_info_;
  more_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadResponse_MoreInfo* ClientDownloadResponse::_internal_mutable_more_info() {
  _has_bits_[0] |= 0x00000002u;
  if (more_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadResponse_MoreInfo>(GetArenaForAllocation());
    more_info_ = p;
  }
  return more_info_;
}
inline ::safe_browsing::ClientDownloadResponse_MoreInfo* ClientDownloadResponse::mutable_more_info() {
  ::safe_browsing::ClientDownloadResponse_MoreInfo* _msg = _internal_mutable_more_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadResponse.more_info)
  return _msg;
}
inline void ClientDownloadResponse::set_allocated_more_info(::safe_browsing::ClientDownloadResponse_MoreInfo* more_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete more_info_;
  }
  if (more_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(more_info);
    if (message_arena != submessage_arena) {
      more_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, more_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  more_info_ = more_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadResponse.more_info)
}

// optional bytes token = 3;
inline bool ClientDownloadResponse::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadResponse::has_token() const {
  return _internal_has_token();
}
inline void ClientDownloadResponse::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadResponse::token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadResponse::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadResponse.token)
}
inline std::string* ClientDownloadResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadResponse.token)
  return _s;
}
inline const std::string& ClientDownloadResponse::_internal_token() const {
  return token_.Get();
}
inline void ClientDownloadResponse::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadResponse::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadResponse::release_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadResponse.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadResponse.token)
}

// optional bool upload = 5;
inline bool ClientDownloadResponse::_internal_has_upload() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientDownloadResponse::has_upload() const {
  return _internal_has_upload();
}
inline void ClientDownloadResponse::clear_upload() {
  upload_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ClientDownloadResponse::_internal_upload() const {
  return upload_;
}
inline bool ClientDownloadResponse::upload() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadResponse.upload)
  return _internal_upload();
}
inline void ClientDownloadResponse::_internal_set_upload(bool value) {
  _has_bits_[0] |= 0x00000008u;
  upload_ = value;
}
inline void ClientDownloadResponse::set_upload(bool value) {
  _internal_set_upload(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadResponse.upload)
}

// optional bool request_deep_scan = 19;
inline bool ClientDownloadResponse::_internal_has_request_deep_scan() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientDownloadResponse::has_request_deep_scan() const {
  return _internal_has_request_deep_scan();
}
inline void ClientDownloadResponse::clear_request_deep_scan() {
  request_deep_scan_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ClientDownloadResponse::_internal_request_deep_scan() const {
  return request_deep_scan_;
}
inline bool ClientDownloadResponse::request_deep_scan() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadResponse.request_deep_scan)
  return _internal_request_deep_scan();
}
inline void ClientDownloadResponse::_internal_set_request_deep_scan(bool value) {
  _has_bits_[0] |= 0x00000010u;
  request_deep_scan_ = value;
}
inline void ClientDownloadResponse::set_request_deep_scan(bool value) {
  _internal_set_request_deep_scan(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadResponse.request_deep_scan)
}

// -------------------------------------------------------------------

// ClientDownloadReport_UserInformation

// optional string email = 1;
inline bool ClientDownloadReport_UserInformation::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadReport_UserInformation::has_email() const {
  return _internal_has_email();
}
inline void ClientDownloadReport_UserInformation::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadReport_UserInformation::email() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadReport.UserInformation.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadReport_UserInformation::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadReport.UserInformation.email)
}
inline std::string* ClientDownloadReport_UserInformation::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadReport.UserInformation.email)
  return _s;
}
inline const std::string& ClientDownloadReport_UserInformation::_internal_email() const {
  return email_.Get();
}
inline void ClientDownloadReport_UserInformation::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadReport_UserInformation::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadReport_UserInformation::release_email() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadReport.UserInformation.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault()) {
    email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadReport_UserInformation::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault()) {
    email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadReport.UserInformation.email)
}

// -------------------------------------------------------------------

// ClientDownloadReport

// optional .safe_browsing.ClientDownloadReport.Reason reason = 1;
inline bool ClientDownloadReport::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientDownloadReport::has_reason() const {
  return _internal_has_reason();
}
inline void ClientDownloadReport::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::safe_browsing::ClientDownloadReport_Reason ClientDownloadReport::_internal_reason() const {
  return static_cast< ::safe_browsing::ClientDownloadReport_Reason >(reason_);
}
inline ::safe_browsing::ClientDownloadReport_Reason ClientDownloadReport::reason() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadReport.reason)
  return _internal_reason();
}
inline void ClientDownloadReport::_internal_set_reason(::safe_browsing::ClientDownloadReport_Reason value) {
  assert(::safe_browsing::ClientDownloadReport_Reason_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  reason_ = value;
}
inline void ClientDownloadReport::set_reason(::safe_browsing::ClientDownloadReport_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadReport.reason)
}

// optional .safe_browsing.ClientDownloadRequest download_request = 2;
inline bool ClientDownloadReport::_internal_has_download_request() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || download_request_ != nullptr);
  return value;
}
inline bool ClientDownloadReport::has_download_request() const {
  return _internal_has_download_request();
}
inline void ClientDownloadReport::clear_download_request() {
  if (download_request_ != nullptr) download_request_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientDownloadRequest& ClientDownloadReport::_internal_download_request() const {
  const ::safe_browsing::ClientDownloadRequest* p = download_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest&>(
      ::safe_browsing::_ClientDownloadRequest_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest& ClientDownloadReport::download_request() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadReport.download_request)
  return _internal_download_request();
}
inline void ClientDownloadReport::unsafe_arena_set_allocated_download_request(
    ::safe_browsing::ClientDownloadRequest* download_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_request_);
  }
  download_request_ = download_request;
  if (download_request) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadReport.download_request)
}
inline ::safe_browsing::ClientDownloadRequest* ClientDownloadReport::release_download_request() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest* temp = download_request_;
  download_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest* ClientDownloadReport::unsafe_arena_release_download_request() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadReport.download_request)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest* temp = download_request_;
  download_request_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest* ClientDownloadReport::_internal_mutable_download_request() {
  _has_bits_[0] |= 0x00000002u;
  if (download_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest>(GetArenaForAllocation());
    download_request_ = p;
  }
  return download_request_;
}
inline ::safe_browsing::ClientDownloadRequest* ClientDownloadReport::mutable_download_request() {
  ::safe_browsing::ClientDownloadRequest* _msg = _internal_mutable_download_request();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadReport.download_request)
  return _msg;
}
inline void ClientDownloadReport::set_allocated_download_request(::safe_browsing::ClientDownloadRequest* download_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete download_request_;
  }
  if (download_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(download_request);
    if (message_arena != submessage_arena) {
      download_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  download_request_ = download_request;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadReport.download_request)
}

// optional .safe_browsing.ClientDownloadReport.UserInformation user_information = 3;
inline bool ClientDownloadReport::_internal_has_user_information() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || user_information_ != nullptr);
  return value;
}
inline bool ClientDownloadReport::has_user_information() const {
  return _internal_has_user_information();
}
inline void ClientDownloadReport::clear_user_information() {
  if (user_information_ != nullptr) user_information_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientDownloadReport_UserInformation& ClientDownloadReport::_internal_user_information() const {
  const ::safe_browsing::ClientDownloadReport_UserInformation* p = user_information_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadReport_UserInformation&>(
      ::safe_browsing::_ClientDownloadReport_UserInformation_default_instance_);
}
inline const ::safe_browsing::ClientDownloadReport_UserInformation& ClientDownloadReport::user_information() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadReport.user_information)
  return _internal_user_information();
}
inline void ClientDownloadReport::unsafe_arena_set_allocated_user_information(
    ::safe_browsing::ClientDownloadReport_UserInformation* user_information) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_information_);
  }
  user_information_ = user_information;
  if (user_information) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadReport.user_information)
}
inline ::safe_browsing::ClientDownloadReport_UserInformation* ClientDownloadReport::release_user_information() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientDownloadReport_UserInformation* temp = user_information_;
  user_information_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadReport_UserInformation* ClientDownloadReport::unsafe_arena_release_user_information() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadReport.user_information)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientDownloadReport_UserInformation* temp = user_information_;
  user_information_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadReport_UserInformation* ClientDownloadReport::_internal_mutable_user_information() {
  _has_bits_[0] |= 0x00000004u;
  if (user_information_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadReport_UserInformation>(GetArenaForAllocation());
    user_information_ = p;
  }
  return user_information_;
}
inline ::safe_browsing::ClientDownloadReport_UserInformation* ClientDownloadReport::mutable_user_information() {
  ::safe_browsing::ClientDownloadReport_UserInformation* _msg = _internal_mutable_user_information();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadReport.user_information)
  return _msg;
}
inline void ClientDownloadReport::set_allocated_user_information(::safe_browsing::ClientDownloadReport_UserInformation* user_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_information_;
  }
  if (user_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_information);
    if (message_arena != submessage_arena) {
      user_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_information, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_information_ = user_information;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadReport.user_information)
}

// optional bytes comment = 4;
inline bool ClientDownloadReport::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDownloadReport::has_comment() const {
  return _internal_has_comment();
}
inline void ClientDownloadReport::clear_comment() {
  comment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDownloadReport::comment() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadReport.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientDownloadReport::set_comment(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 comment_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientDownloadReport.comment)
}
inline std::string* ClientDownloadReport::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadReport.comment)
  return _s;
}
inline const std::string& ClientDownloadReport::_internal_comment() const {
  return comment_.Get();
}
inline void ClientDownloadReport::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientDownloadReport::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000001u;
  return comment_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientDownloadReport::release_comment() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadReport.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = comment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comment_.IsDefault()) {
    comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientDownloadReport::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comment_.IsDefault()) {
    comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadReport.comment)
}

// optional .safe_browsing.ClientDownloadResponse download_response = 5;
inline bool ClientDownloadReport::_internal_has_download_response() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || download_response_ != nullptr);
  return value;
}
inline bool ClientDownloadReport::has_download_response() const {
  return _internal_has_download_response();
}
inline void ClientDownloadReport::clear_download_response() {
  if (download_response_ != nullptr) download_response_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::safe_browsing::ClientDownloadResponse& ClientDownloadReport::_internal_download_response() const {
  const ::safe_browsing::ClientDownloadResponse* p = download_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadResponse&>(
      ::safe_browsing::_ClientDownloadResponse_default_instance_);
}
inline const ::safe_browsing::ClientDownloadResponse& ClientDownloadReport::download_response() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientDownloadReport.download_response)
  return _internal_download_response();
}
inline void ClientDownloadReport::unsafe_arena_set_allocated_download_response(
    ::safe_browsing::ClientDownloadResponse* download_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_response_);
  }
  download_response_ = download_response;
  if (download_response) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientDownloadReport.download_response)
}
inline ::safe_browsing::ClientDownloadResponse* ClientDownloadReport::release_download_response() {
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientDownloadResponse* temp = download_response_;
  download_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadResponse* ClientDownloadReport::unsafe_arena_release_download_response() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientDownloadReport.download_response)
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientDownloadResponse* temp = download_response_;
  download_response_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadResponse* ClientDownloadReport::_internal_mutable_download_response() {
  _has_bits_[0] |= 0x00000008u;
  if (download_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadResponse>(GetArenaForAllocation());
    download_response_ = p;
  }
  return download_response_;
}
inline ::safe_browsing::ClientDownloadResponse* ClientDownloadReport::mutable_download_response() {
  ::safe_browsing::ClientDownloadResponse* _msg = _internal_mutable_download_response();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientDownloadReport.download_response)
  return _msg;
}
inline void ClientDownloadReport::set_allocated_download_response(::safe_browsing::ClientDownloadResponse* download_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete download_response_;
  }
  if (download_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(download_response);
    if (message_arena != submessage_arena) {
      download_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  download_response_ = download_response;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientDownloadReport.download_response)
}

// -------------------------------------------------------------------

// ClientUploadResponse

// optional .safe_browsing.ClientUploadResponse.UploadStatus status = 1;
inline bool ClientUploadResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientUploadResponse::has_status() const {
  return _internal_has_status();
}
inline void ClientUploadResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::safe_browsing::ClientUploadResponse_UploadStatus ClientUploadResponse::_internal_status() const {
  return static_cast< ::safe_browsing::ClientUploadResponse_UploadStatus >(status_);
}
inline ::safe_browsing::ClientUploadResponse_UploadStatus ClientUploadResponse::status() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientUploadResponse.status)
  return _internal_status();
}
inline void ClientUploadResponse::_internal_set_status(::safe_browsing::ClientUploadResponse_UploadStatus value) {
  assert(::safe_browsing::ClientUploadResponse_UploadStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void ClientUploadResponse::set_status(::safe_browsing::ClientUploadResponse_UploadStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientUploadResponse.status)
}

// optional string permalink = 2;
inline bool ClientUploadResponse::_internal_has_permalink() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientUploadResponse::has_permalink() const {
  return _internal_has_permalink();
}
inline void ClientUploadResponse::clear_permalink() {
  permalink_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientUploadResponse::permalink() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientUploadResponse.permalink)
  return _internal_permalink();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientUploadResponse::set_permalink(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 permalink_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientUploadResponse.permalink)
}
inline std::string* ClientUploadResponse::mutable_permalink() {
  std::string* _s = _internal_mutable_permalink();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientUploadResponse.permalink)
  return _s;
}
inline const std::string& ClientUploadResponse::_internal_permalink() const {
  return permalink_.Get();
}
inline void ClientUploadResponse::_internal_set_permalink(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  permalink_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUploadResponse::_internal_mutable_permalink() {
  _has_bits_[0] |= 0x00000001u;
  return permalink_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientUploadResponse::release_permalink() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientUploadResponse.permalink)
  if (!_internal_has_permalink()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = permalink_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (permalink_.IsDefault()) {
    permalink_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientUploadResponse::set_allocated_permalink(std::string* permalink) {
  if (permalink != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  permalink_.SetAllocated(permalink, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (permalink_.IsDefault()) {
    permalink_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientUploadResponse.permalink)
}

// -------------------------------------------------------------------

// ClientIncidentReport_IncidentData_TrackedPreferenceIncident

// optional string path = 1;
inline bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident::has_path() const {
  return _internal_has_path();
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident::path() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.path)
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.path)
  return _s;
}
inline const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_path() const {
  return path_.Get();
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::release_path() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault()) {
    path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault()) {
    path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.path)
}

// optional string atomic_value = 2;
inline bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_has_atomic_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident::has_atomic_value() const {
  return _internal_has_atomic_value();
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::clear_atomic_value() {
  atomic_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident::atomic_value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.atomic_value)
  return _internal_atomic_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_atomic_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 atomic_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.atomic_value)
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::mutable_atomic_value() {
  std::string* _s = _internal_mutable_atomic_value();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.atomic_value)
  return _s;
}
inline const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_atomic_value() const {
  return atomic_value_.Get();
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_set_atomic_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  atomic_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_mutable_atomic_value() {
  _has_bits_[0] |= 0x00000002u;
  return atomic_value_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::release_atomic_value() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.atomic_value)
  if (!_internal_has_atomic_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = atomic_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (atomic_value_.IsDefault()) {
    atomic_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_allocated_atomic_value(std::string* atomic_value) {
  if (atomic_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  atomic_value_.SetAllocated(atomic_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (atomic_value_.IsDefault()) {
    atomic_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.atomic_value)
}

// repeated string split_key = 3;
inline int ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_split_key_size() const {
  return split_key_.size();
}
inline int ClientIncidentReport_IncidentData_TrackedPreferenceIncident::split_key_size() const {
  return _internal_split_key_size();
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::clear_split_key() {
  split_key_.Clear();
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::add_split_key() {
  std::string* _s = _internal_add_split_key();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
  return _s;
}
inline const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_split_key(int index) const {
  return split_key_.Get(index);
}
inline const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident::split_key(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
  return _internal_split_key(index);
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::mutable_split_key(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
  return split_key_.Mutable(index);
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_split_key(int index, const std::string& value) {
  split_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_split_key(int index, std::string&& value) {
  split_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_split_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_split_key(int index, const char* value, size_t size) {
  split_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
}
inline std::string* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_add_split_key() {
  return split_key_.Add();
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::add_split_key(const std::string& value) {
  split_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::add_split_key(std::string&& value) {
  split_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::add_split_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::add_split_key(const char* value, size_t size) {
  split_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientIncidentReport_IncidentData_TrackedPreferenceIncident::split_key() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
  return split_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientIncidentReport_IncidentData_TrackedPreferenceIncident::mutable_split_key() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.split_key)
  return &split_key_;
}

// optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.ValueState value_state = 4;
inline bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_has_value_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident::has_value_state() const {
  return _internal_has_value_state();
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::clear_value_state() {
  value_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_value_state() const {
  return static_cast< ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState >(value_state_);
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::value_state() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.value_state)
  return _internal_value_state();
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_internal_set_value_state(::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState value) {
  assert(::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  value_state_ = value;
}
inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::set_value_state(::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState value) {
  _internal_set_value_state(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.value_state)
}

// -------------------------------------------------------------------

// ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile

// optional string relative_path = 1;
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_has_relative_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::has_relative_path() const {
  return _internal_has_relative_path();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::clear_relative_path() {
  relative_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::relative_path() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.relative_path)
  return _internal_relative_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::set_relative_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 relative_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.relative_path)
}
inline std::string* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::mutable_relative_path() {
  std::string* _s = _internal_mutable_relative_path();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.relative_path)
  return _s;
}
inline const std::string& ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_relative_path() const {
  return relative_path_.Get();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_set_relative_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  relative_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_mutable_relative_path() {
  _has_bits_[0] |= 0x00000001u;
  return relative_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::release_relative_path() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.relative_path)
  if (!_internal_has_relative_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = relative_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relative_path_.IsDefault()) {
    relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::set_allocated_relative_path(std::string* relative_path) {
  if (relative_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  relative_path_.SetAllocated(relative_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relative_path_.IsDefault()) {
    relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.relative_path)
}

// optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || signature_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::has_signature() const {
  return _internal_has_signature();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientDownloadRequest_SignatureInfo& ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_signature() const {
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo* p = signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_SignatureInfo&>(
      ::safe_browsing::_ClientDownloadRequest_SignatureInfo_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_SignatureInfo& ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::signature() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.signature)
  return _internal_signature();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::unsafe_arena_set_allocated_signature(
    ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.signature)
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::release_signature() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* temp = signature_;
  signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_SignatureInfo>(GetArenaForAllocation());
    signature_ = p;
  }
  return signature_;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::mutable_signature() {
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.signature)
  return _msg;
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::set_allocated_signature(::safe_browsing::ClientDownloadRequest_SignatureInfo* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature);
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.signature)
}

// optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_has_image_headers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || image_headers_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::has_image_headers() const {
  return _internal_has_image_headers();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::clear_image_headers() {
  if (image_headers_ != nullptr) image_headers_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_image_headers() const {
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders* p = image_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_ImageHeaders&>(
      ::safe_browsing::_ClientDownloadRequest_ImageHeaders_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::image_headers() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.image_headers)
  return _internal_image_headers();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::unsafe_arena_set_allocated_image_headers(
    ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_headers_);
  }
  image_headers_ = image_headers;
  if (image_headers) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.image_headers)
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::release_image_headers() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::unsafe_arena_release_image_headers() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.image_headers)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_internal_mutable_image_headers() {
  _has_bits_[0] |= 0x00000004u;
  if (image_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ImageHeaders>(GetArenaForAllocation());
    image_headers_ = p;
  }
  return image_headers_;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::mutable_image_headers() {
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _msg = _internal_mutable_image_headers();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.image_headers)
  return _msg;
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_headers_;
  }
  if (image_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_headers);
    if (message_arena != submessage_arena) {
      image_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_headers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  image_headers_ = image_headers;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile.image_headers)
}

// -------------------------------------------------------------------

// ClientIncidentReport_IncidentData_BinaryIntegrityIncident

// optional string file_basename = 1;
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_has_file_basename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::has_file_basename() const {
  return _internal_has_file_basename();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::clear_file_basename() {
  file_basename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_IncidentData_BinaryIntegrityIncident::file_basename() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.file_basename)
  return _internal_file_basename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::set_file_basename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_basename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.file_basename)
}
inline std::string* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::mutable_file_basename() {
  std::string* _s = _internal_mutable_file_basename();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.file_basename)
  return _s;
}
inline const std::string& ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_file_basename() const {
  return file_basename_.Get();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_set_file_basename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_basename_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_mutable_file_basename() {
  _has_bits_[0] |= 0x00000001u;
  return file_basename_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::release_file_basename() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.file_basename)
  if (!_internal_has_file_basename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_basename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_basename_.IsDefault()) {
    file_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::set_allocated_file_basename(std::string* file_basename) {
  if (file_basename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_basename_.SetAllocated(file_basename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_basename_.IsDefault()) {
    file_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.file_basename)
}

// optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || signature_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::has_signature() const {
  return _internal_has_signature();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientDownloadRequest_SignatureInfo& ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_signature() const {
  const ::safe_browsing::ClientDownloadRequest_SignatureInfo* p = signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_SignatureInfo&>(
      ::safe_browsing::_ClientDownloadRequest_SignatureInfo_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_SignatureInfo& ClientIncidentReport_IncidentData_BinaryIntegrityIncident::signature() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.signature)
  return _internal_signature();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::unsafe_arena_set_allocated_signature(
    ::safe_browsing::ClientDownloadRequest_SignatureInfo* signature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.signature)
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::release_signature() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* temp = signature_;
  signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_SignatureInfo>(GetArenaForAllocation());
    signature_ = p;
  }
  return signature_;
}
inline ::safe_browsing::ClientDownloadRequest_SignatureInfo* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::mutable_signature() {
  ::safe_browsing::ClientDownloadRequest_SignatureInfo* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.signature)
  return _msg;
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::set_allocated_signature(::safe_browsing::ClientDownloadRequest_SignatureInfo* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature);
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.signature)
}

// optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_has_image_headers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || image_headers_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::has_image_headers() const {
  return _internal_has_image_headers();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::clear_image_headers() {
  if (image_headers_ != nullptr) image_headers_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_image_headers() const {
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders* p = image_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_ImageHeaders&>(
      ::safe_browsing::_ClientDownloadRequest_ImageHeaders_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientIncidentReport_IncidentData_BinaryIntegrityIncident::image_headers() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.image_headers)
  return _internal_image_headers();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::unsafe_arena_set_allocated_image_headers(
    ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_headers_);
  }
  image_headers_ = image_headers;
  if (image_headers) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.image_headers)
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::release_image_headers() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::unsafe_arena_release_image_headers() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.image_headers)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_mutable_image_headers() {
  _has_bits_[0] |= 0x00000004u;
  if (image_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ImageHeaders>(GetArenaForAllocation());
    image_headers_ = p;
  }
  return image_headers_;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::mutable_image_headers() {
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _msg = _internal_mutable_image_headers();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.image_headers)
  return _msg;
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_headers_;
  }
  if (image_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_headers);
    if (message_arena != submessage_arena) {
      image_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_headers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  image_headers_ = image_headers;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.image_headers)
}

// optional int32 sec_error = 4;
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_has_sec_error() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::has_sec_error() const {
  return _internal_has_sec_error();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::clear_sec_error() {
  sec_error_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_sec_error() const {
  return sec_error_;
}
inline int32_t ClientIncidentReport_IncidentData_BinaryIntegrityIncident::sec_error() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.sec_error)
  return _internal_sec_error();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_set_sec_error(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  sec_error_ = value;
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::set_sec_error(int32_t value) {
  _internal_set_sec_error(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.sec_error)
}

// repeated .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile contained_file = 5;
inline int ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_contained_file_size() const {
  return contained_file_.size();
}
inline int ClientIncidentReport_IncidentData_BinaryIntegrityIncident::contained_file_size() const {
  return _internal_contained_file_size();
}
inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::clear_contained_file() {
  contained_file_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::mutable_contained_file(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.contained_file)
  return contained_file_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile >*
ClientIncidentReport_IncidentData_BinaryIntegrityIncident::mutable_contained_file() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.contained_file)
  return &contained_file_;
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_contained_file(int index) const {
  return contained_file_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& ClientIncidentReport_IncidentData_BinaryIntegrityIncident::contained_file(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.contained_file)
  return _internal_contained_file(index);
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_internal_add_contained_file() {
  return contained_file_.Add();
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::add_contained_file() {
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* _add = _internal_add_contained_file();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.contained_file)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile >&
ClientIncidentReport_IncidentData_BinaryIntegrityIncident::contained_file() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.contained_file)
  return contained_file_;
}

// -------------------------------------------------------------------

// ClientIncidentReport_IncidentData_ResourceRequestIncident

// optional bytes digest = 1;
inline bool ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_has_digest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_ResourceRequestIncident::has_digest() const {
  return _internal_has_digest();
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::clear_digest() {
  digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_IncidentData_ResourceRequestIncident::digest() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_IncidentData_ResourceRequestIncident::set_digest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 digest_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.digest)
}
inline std::string* ClientIncidentReport_IncidentData_ResourceRequestIncident::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.digest)
  return _s;
}
inline const std::string& ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_digest() const {
  return digest_.Get();
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  digest_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_mutable_digest() {
  _has_bits_[0] |= 0x00000001u;
  return digest_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_ResourceRequestIncident::release_digest() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = digest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (digest_.IsDefault()) {
    digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  digest_.SetAllocated(digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (digest_.IsDefault()) {
    digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.digest)
}

// optional string origin = 2;
inline bool ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_ResourceRequestIncident::has_origin() const {
  return _internal_has_origin();
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_IncidentData_ResourceRequestIncident::origin() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_IncidentData_ResourceRequestIncident::set_origin(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 origin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.origin)
}
inline std::string* ClientIncidentReport_IncidentData_ResourceRequestIncident::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.origin)
  return _s;
}
inline const std::string& ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_origin() const {
  return origin_.Get();
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000002u;
  return origin_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_IncidentData_ResourceRequestIncident::release_origin() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = origin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  origin_.SetAllocated(origin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.origin)
}

// optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.Type type = 3 [default = UNKNOWN];
inline bool ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData_ResourceRequestIncident::has_type() const {
  return _internal_has_type();
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_type() const {
  return static_cast< ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type >(type_);
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type ClientIncidentReport_IncidentData_ResourceRequestIncident::type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.type)
  return _internal_type();
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::_internal_set_type(::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type value) {
  assert(::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::set_type(::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.type)
}

// -------------------------------------------------------------------

// ClientIncidentReport_IncidentData

// optional int64 incident_time_msec = 1;
inline bool ClientIncidentReport_IncidentData::_internal_has_incident_time_msec() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientIncidentReport_IncidentData::has_incident_time_msec() const {
  return _internal_has_incident_time_msec();
}
inline void ClientIncidentReport_IncidentData::clear_incident_time_msec() {
  incident_time_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ClientIncidentReport_IncidentData::_internal_incident_time_msec() const {
  return incident_time_msec_;
}
inline int64_t ClientIncidentReport_IncidentData::incident_time_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.incident_time_msec)
  return _internal_incident_time_msec();
}
inline void ClientIncidentReport_IncidentData::_internal_set_incident_time_msec(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  incident_time_msec_ = value;
}
inline void ClientIncidentReport_IncidentData::set_incident_time_msec(int64_t value) {
  _internal_set_incident_time_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.IncidentData.incident_time_msec)
}

// optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident tracked_preference = 2;
inline bool ClientIncidentReport_IncidentData::_internal_has_tracked_preference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tracked_preference_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_IncidentData::has_tracked_preference() const {
  return _internal_has_tracked_preference();
}
inline void ClientIncidentReport_IncidentData::clear_tracked_preference() {
  if (tracked_preference_ != nullptr) tracked_preference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident& ClientIncidentReport_IncidentData::_internal_tracked_preference() const {
  const ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* p = tracked_preference_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident&>(
      ::safe_browsing::_ClientIncidentReport_IncidentData_TrackedPreferenceIncident_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident& ClientIncidentReport_IncidentData::tracked_preference() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.tracked_preference)
  return _internal_tracked_preference();
}
inline void ClientIncidentReport_IncidentData::unsafe_arena_set_allocated_tracked_preference(
    ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* tracked_preference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_preference_);
  }
  tracked_preference_ = tracked_preference;
  if (tracked_preference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.tracked_preference)
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* ClientIncidentReport_IncidentData::release_tracked_preference() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* temp = tracked_preference_;
  tracked_preference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* ClientIncidentReport_IncidentData::unsafe_arena_release_tracked_preference() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.tracked_preference)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* temp = tracked_preference_;
  tracked_preference_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* ClientIncidentReport_IncidentData::_internal_mutable_tracked_preference() {
  _has_bits_[0] |= 0x00000001u;
  if (tracked_preference_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident>(GetArenaForAllocation());
    tracked_preference_ = p;
  }
  return tracked_preference_;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* ClientIncidentReport_IncidentData::mutable_tracked_preference() {
  ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* _msg = _internal_mutable_tracked_preference();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.tracked_preference)
  return _msg;
}
inline void ClientIncidentReport_IncidentData::set_allocated_tracked_preference(::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident* tracked_preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tracked_preference_;
  }
  if (tracked_preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tracked_preference);
    if (message_arena != submessage_arena) {
      tracked_preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_preference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tracked_preference_ = tracked_preference;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.tracked_preference)
}

// optional .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident binary_integrity = 3;
inline bool ClientIncidentReport_IncidentData::_internal_has_binary_integrity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || binary_integrity_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_IncidentData::has_binary_integrity() const {
  return _internal_has_binary_integrity();
}
inline void ClientIncidentReport_IncidentData::clear_binary_integrity() {
  if (binary_integrity_ != nullptr) binary_integrity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident& ClientIncidentReport_IncidentData::_internal_binary_integrity() const {
  const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* p = binary_integrity_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident&>(
      ::safe_browsing::_ClientIncidentReport_IncidentData_BinaryIntegrityIncident_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident& ClientIncidentReport_IncidentData::binary_integrity() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.binary_integrity)
  return _internal_binary_integrity();
}
inline void ClientIncidentReport_IncidentData::unsafe_arena_set_allocated_binary_integrity(
    ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* binary_integrity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binary_integrity_);
  }
  binary_integrity_ = binary_integrity;
  if (binary_integrity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.binary_integrity)
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* ClientIncidentReport_IncidentData::release_binary_integrity() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* temp = binary_integrity_;
  binary_integrity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* ClientIncidentReport_IncidentData::unsafe_arena_release_binary_integrity() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.binary_integrity)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* temp = binary_integrity_;
  binary_integrity_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* ClientIncidentReport_IncidentData::_internal_mutable_binary_integrity() {
  _has_bits_[0] |= 0x00000002u;
  if (binary_integrity_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident>(GetArenaForAllocation());
    binary_integrity_ = p;
  }
  return binary_integrity_;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* ClientIncidentReport_IncidentData::mutable_binary_integrity() {
  ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* _msg = _internal_mutable_binary_integrity();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.binary_integrity)
  return _msg;
}
inline void ClientIncidentReport_IncidentData::set_allocated_binary_integrity(::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident* binary_integrity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete binary_integrity_;
  }
  if (binary_integrity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(binary_integrity);
    if (message_arena != submessage_arena) {
      binary_integrity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_integrity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  binary_integrity_ = binary_integrity;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.binary_integrity)
}

// optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident resource_request = 7;
inline bool ClientIncidentReport_IncidentData::_internal_has_resource_request() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || resource_request_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_IncidentData::has_resource_request() const {
  return _internal_has_resource_request();
}
inline void ClientIncidentReport_IncidentData::clear_resource_request() {
  if (resource_request_ != nullptr) resource_request_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident& ClientIncidentReport_IncidentData::_internal_resource_request() const {
  const ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* p = resource_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident&>(
      ::safe_browsing::_ClientIncidentReport_IncidentData_ResourceRequestIncident_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident& ClientIncidentReport_IncidentData::resource_request() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.IncidentData.resource_request)
  return _internal_resource_request();
}
inline void ClientIncidentReport_IncidentData::unsafe_arena_set_allocated_resource_request(
    ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* resource_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_request_);
  }
  resource_request_ = resource_request;
  if (resource_request) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.resource_request)
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* ClientIncidentReport_IncidentData::release_resource_request() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* temp = resource_request_;
  resource_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* ClientIncidentReport_IncidentData::unsafe_arena_release_resource_request() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.IncidentData.resource_request)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* temp = resource_request_;
  resource_request_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* ClientIncidentReport_IncidentData::_internal_mutable_resource_request() {
  _has_bits_[0] |= 0x00000004u;
  if (resource_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident>(GetArenaForAllocation());
    resource_request_ = p;
  }
  return resource_request_;
}
inline ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* ClientIncidentReport_IncidentData::mutable_resource_request() {
  ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* _msg = _internal_mutable_resource_request();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.IncidentData.resource_request)
  return _msg;
}
inline void ClientIncidentReport_IncidentData::set_allocated_resource_request(::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident* resource_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete resource_request_;
  }
  if (resource_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource_request);
    if (message_arena != submessage_arena) {
      resource_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resource_request_ = resource_request;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.IncidentData.resource_request)
}

// -------------------------------------------------------------------

// ClientIncidentReport_DownloadDetails

// optional bytes token = 1;
inline bool ClientIncidentReport_DownloadDetails::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_DownloadDetails::has_token() const {
  return _internal_has_token();
}
inline void ClientIncidentReport_DownloadDetails::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_DownloadDetails::token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.DownloadDetails.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_DownloadDetails::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.DownloadDetails.token)
}
inline std::string* ClientIncidentReport_DownloadDetails::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.DownloadDetails.token)
  return _s;
}
inline const std::string& ClientIncidentReport_DownloadDetails::_internal_token() const {
  return token_.Get();
}
inline void ClientIncidentReport_DownloadDetails::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_DownloadDetails::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_DownloadDetails::release_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.DownloadDetails.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_DownloadDetails::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.DownloadDetails.token)
}

// optional .safe_browsing.ClientDownloadRequest download = 2;
inline bool ClientIncidentReport_DownloadDetails::_internal_has_download() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || download_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_DownloadDetails::has_download() const {
  return _internal_has_download();
}
inline void ClientIncidentReport_DownloadDetails::clear_download() {
  if (download_ != nullptr) download_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientDownloadRequest& ClientIncidentReport_DownloadDetails::_internal_download() const {
  const ::safe_browsing::ClientDownloadRequest* p = download_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest&>(
      ::safe_browsing::_ClientDownloadRequest_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest& ClientIncidentReport_DownloadDetails::download() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.DownloadDetails.download)
  return _internal_download();
}
inline void ClientIncidentReport_DownloadDetails::unsafe_arena_set_allocated_download(
    ::safe_browsing::ClientDownloadRequest* download) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_);
  }
  download_ = download;
  if (download) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.DownloadDetails.download)
}
inline ::safe_browsing::ClientDownloadRequest* ClientIncidentReport_DownloadDetails::release_download() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest* temp = download_;
  download_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest* ClientIncidentReport_DownloadDetails::unsafe_arena_release_download() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.DownloadDetails.download)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest* temp = download_;
  download_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest* ClientIncidentReport_DownloadDetails::_internal_mutable_download() {
  _has_bits_[0] |= 0x00000002u;
  if (download_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest>(GetArenaForAllocation());
    download_ = p;
  }
  return download_;
}
inline ::safe_browsing::ClientDownloadRequest* ClientIncidentReport_DownloadDetails::mutable_download() {
  ::safe_browsing::ClientDownloadRequest* _msg = _internal_mutable_download();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.DownloadDetails.download)
  return _msg;
}
inline void ClientIncidentReport_DownloadDetails::set_allocated_download(::safe_browsing::ClientDownloadRequest* download) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete download_;
  }
  if (download) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(download);
    if (message_arena != submessage_arena) {
      download = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  download_ = download;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.DownloadDetails.download)
}

// optional int64 download_time_msec = 3;
inline bool ClientIncidentReport_DownloadDetails::_internal_has_download_time_msec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_DownloadDetails::has_download_time_msec() const {
  return _internal_has_download_time_msec();
}
inline void ClientIncidentReport_DownloadDetails::clear_download_time_msec() {
  download_time_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t ClientIncidentReport_DownloadDetails::_internal_download_time_msec() const {
  return download_time_msec_;
}
inline int64_t ClientIncidentReport_DownloadDetails::download_time_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.DownloadDetails.download_time_msec)
  return _internal_download_time_msec();
}
inline void ClientIncidentReport_DownloadDetails::_internal_set_download_time_msec(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  download_time_msec_ = value;
}
inline void ClientIncidentReport_DownloadDetails::set_download_time_msec(int64_t value) {
  _internal_set_download_time_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.DownloadDetails.download_time_msec)
}

// optional int64 open_time_msec = 4;
inline bool ClientIncidentReport_DownloadDetails::_internal_has_open_time_msec() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientIncidentReport_DownloadDetails::has_open_time_msec() const {
  return _internal_has_open_time_msec();
}
inline void ClientIncidentReport_DownloadDetails::clear_open_time_msec() {
  open_time_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ClientIncidentReport_DownloadDetails::_internal_open_time_msec() const {
  return open_time_msec_;
}
inline int64_t ClientIncidentReport_DownloadDetails::open_time_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.DownloadDetails.open_time_msec)
  return _internal_open_time_msec();
}
inline void ClientIncidentReport_DownloadDetails::_internal_set_open_time_msec(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  open_time_msec_ = value;
}
inline void ClientIncidentReport_DownloadDetails::set_open_time_msec(int64_t value) {
  _internal_set_open_time_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.DownloadDetails.open_time_msec)
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_OS_RegistryValue

// optional string name = 1;
inline bool ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_OS_RegistryValue::has_name() const {
  return _internal_has_name();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS_RegistryValue::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_OS_RegistryValue::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.name)
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryValue::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.name)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_name() const {
  return name_.Get();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryValue::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.name)
}

// optional uint32 type = 2;
inline bool ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_OS_RegistryValue::has_type() const {
  return _internal_has_type();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_type() const {
  return type_;
}
inline uint32_t ClientIncidentReport_EnvironmentData_OS_RegistryValue::type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.type)
  return _internal_type();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.type)
}

// optional bytes data = 3;
inline bool ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_OS_RegistryValue::has_data() const {
  return _internal_has_data();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS_RegistryValue::data() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_OS_RegistryValue::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.data)
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryValue::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.data)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_data() const {
  return data_.Get();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryValue::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryValue::release_data() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue.data)
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_OS_RegistryKey

// optional string name = 1;
inline bool ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_OS_RegistryKey::has_name() const {
  return _internal_has_name();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryKey::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS_RegistryKey::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_OS_RegistryKey::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.name)
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryKey::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.name)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_name() const {
  return name_.Get();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS_RegistryKey::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryKey::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.name)
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue value = 2;
inline int ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_value_size() const {
  return value_.size();
}
inline int ClientIncidentReport_EnvironmentData_OS_RegistryKey::value_size() const {
  return _internal_value_size();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryKey::clear_value() {
  value_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue* ClientIncidentReport_EnvironmentData_OS_RegistryKey::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue >*
ClientIncidentReport_EnvironmentData_OS_RegistryKey::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.value)
  return &value_;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue& ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue& ClientIncidentReport_EnvironmentData_OS_RegistryKey::value(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.value)
  return _internal_value(index);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue* ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_add_value() {
  return value_.Add();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue* ClientIncidentReport_EnvironmentData_OS_RegistryKey::add_value() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue >&
ClientIncidentReport_EnvironmentData_OS_RegistryKey::value() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.value)
  return value_;
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey key = 3;
inline int ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_key_size() const {
  return key_.size();
}
inline int ClientIncidentReport_EnvironmentData_OS_RegistryKey::key_size() const {
  return _internal_key_size();
}
inline void ClientIncidentReport_EnvironmentData_OS_RegistryKey::clear_key() {
  key_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* ClientIncidentReport_EnvironmentData_OS_RegistryKey::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.key)
  return key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >*
ClientIncidentReport_EnvironmentData_OS_RegistryKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.key)
  return &key_;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey& ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_key(int index) const {
  return key_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey& ClientIncidentReport_EnvironmentData_OS_RegistryKey::key(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.key)
  return _internal_key(index);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* ClientIncidentReport_EnvironmentData_OS_RegistryKey::_internal_add_key() {
  return key_.Add();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* ClientIncidentReport_EnvironmentData_OS_RegistryKey::add_key() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* _add = _internal_add_key();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >&
ClientIncidentReport_EnvironmentData_OS_RegistryKey::key() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey.key)
  return key_;
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_OS

// optional string os_name = 1;
inline bool ClientIncidentReport_EnvironmentData_OS::_internal_has_os_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_OS::has_os_name() const {
  return _internal_has_os_name();
}
inline void ClientIncidentReport_EnvironmentData_OS::clear_os_name() {
  os_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS::os_name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_name)
  return _internal_os_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_OS::set_os_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 os_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_name)
}
inline std::string* ClientIncidentReport_EnvironmentData_OS::mutable_os_name() {
  std::string* _s = _internal_mutable_os_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_name)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS::_internal_os_name() const {
  return os_name_.Get();
}
inline void ClientIncidentReport_EnvironmentData_OS::_internal_set_os_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  os_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS::_internal_mutable_os_name() {
  _has_bits_[0] |= 0x00000001u;
  return os_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS::release_os_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_name)
  if (!_internal_has_os_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = os_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_name_.IsDefault()) {
    os_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_OS::set_allocated_os_name(std::string* os_name) {
  if (os_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  os_name_.SetAllocated(os_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_name_.IsDefault()) {
    os_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_name)
}

// optional string os_version = 2;
inline bool ClientIncidentReport_EnvironmentData_OS::_internal_has_os_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_OS::has_os_version() const {
  return _internal_has_os_version();
}
inline void ClientIncidentReport_EnvironmentData_OS::clear_os_version() {
  os_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS::os_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_version)
  return _internal_os_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_OS::set_os_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 os_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_version)
}
inline std::string* ClientIncidentReport_EnvironmentData_OS::mutable_os_version() {
  std::string* _s = _internal_mutable_os_version();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_version)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_OS::_internal_os_version() const {
  return os_version_.Get();
}
inline void ClientIncidentReport_EnvironmentData_OS::_internal_set_os_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  os_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS::_internal_mutable_os_version() {
  _has_bits_[0] |= 0x00000002u;
  return os_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_OS::release_os_version() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_version)
  if (!_internal_has_os_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = os_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_version_.IsDefault()) {
    os_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_OS::set_allocated_os_version(std::string* os_version) {
  if (os_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  os_version_.SetAllocated(os_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_version_.IsDefault()) {
    os_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.OS.os_version)
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey registry_key = 3;
inline int ClientIncidentReport_EnvironmentData_OS::_internal_registry_key_size() const {
  return registry_key_.size();
}
inline int ClientIncidentReport_EnvironmentData_OS::registry_key_size() const {
  return _internal_registry_key_size();
}
inline void ClientIncidentReport_EnvironmentData_OS::clear_registry_key() {
  registry_key_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* ClientIncidentReport_EnvironmentData_OS::mutable_registry_key(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.OS.registry_key)
  return registry_key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >*
ClientIncidentReport_EnvironmentData_OS::mutable_registry_key() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.OS.registry_key)
  return &registry_key_;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey& ClientIncidentReport_EnvironmentData_OS::_internal_registry_key(int index) const {
  return registry_key_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey& ClientIncidentReport_EnvironmentData_OS::registry_key(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.registry_key)
  return _internal_registry_key(index);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* ClientIncidentReport_EnvironmentData_OS::_internal_add_registry_key() {
  return registry_key_.Add();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* ClientIncidentReport_EnvironmentData_OS::add_registry_key() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey* _add = _internal_add_registry_key();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.OS.registry_key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >&
ClientIncidentReport_EnvironmentData_OS::registry_key() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.OS.registry_key)
  return registry_key_;
}

// optional bool is_enrolled_to_domain = 4;
inline bool ClientIncidentReport_EnvironmentData_OS::_internal_has_is_enrolled_to_domain() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_OS::has_is_enrolled_to_domain() const {
  return _internal_has_is_enrolled_to_domain();
}
inline void ClientIncidentReport_EnvironmentData_OS::clear_is_enrolled_to_domain() {
  is_enrolled_to_domain_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ClientIncidentReport_EnvironmentData_OS::_internal_is_enrolled_to_domain() const {
  return is_enrolled_to_domain_;
}
inline bool ClientIncidentReport_EnvironmentData_OS::is_enrolled_to_domain() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.OS.is_enrolled_to_domain)
  return _internal_is_enrolled_to_domain();
}
inline void ClientIncidentReport_EnvironmentData_OS::_internal_set_is_enrolled_to_domain(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_enrolled_to_domain_ = value;
}
inline void ClientIncidentReport_EnvironmentData_OS::set_is_enrolled_to_domain(bool value) {
  _internal_set_is_enrolled_to_domain(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.OS.is_enrolled_to_domain)
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_Machine

// optional string cpu_architecture = 1;
inline bool ClientIncidentReport_EnvironmentData_Machine::_internal_has_cpu_architecture() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Machine::has_cpu_architecture() const {
  return _internal_has_cpu_architecture();
}
inline void ClientIncidentReport_EnvironmentData_Machine::clear_cpu_architecture() {
  cpu_architecture_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Machine::cpu_architecture() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_architecture)
  return _internal_cpu_architecture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Machine::set_cpu_architecture(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cpu_architecture_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_architecture)
}
inline std::string* ClientIncidentReport_EnvironmentData_Machine::mutable_cpu_architecture() {
  std::string* _s = _internal_mutable_cpu_architecture();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_architecture)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Machine::_internal_cpu_architecture() const {
  return cpu_architecture_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Machine::_internal_set_cpu_architecture(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_architecture_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Machine::_internal_mutable_cpu_architecture() {
  _has_bits_[0] |= 0x00000001u;
  return cpu_architecture_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Machine::release_cpu_architecture() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_architecture)
  if (!_internal_has_cpu_architecture()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cpu_architecture_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpu_architecture_.IsDefault()) {
    cpu_architecture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Machine::set_allocated_cpu_architecture(std::string* cpu_architecture) {
  if (cpu_architecture != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cpu_architecture_.SetAllocated(cpu_architecture, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpu_architecture_.IsDefault()) {
    cpu_architecture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_architecture)
}

// optional string cpu_vendor = 2;
inline bool ClientIncidentReport_EnvironmentData_Machine::_internal_has_cpu_vendor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Machine::has_cpu_vendor() const {
  return _internal_has_cpu_vendor();
}
inline void ClientIncidentReport_EnvironmentData_Machine::clear_cpu_vendor() {
  cpu_vendor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Machine::cpu_vendor() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_vendor)
  return _internal_cpu_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Machine::set_cpu_vendor(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 cpu_vendor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_vendor)
}
inline std::string* ClientIncidentReport_EnvironmentData_Machine::mutable_cpu_vendor() {
  std::string* _s = _internal_mutable_cpu_vendor();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_vendor)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Machine::_internal_cpu_vendor() const {
  return cpu_vendor_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Machine::_internal_set_cpu_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_vendor_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Machine::_internal_mutable_cpu_vendor() {
  _has_bits_[0] |= 0x00000002u;
  return cpu_vendor_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Machine::release_cpu_vendor() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_vendor)
  if (!_internal_has_cpu_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = cpu_vendor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpu_vendor_.IsDefault()) {
    cpu_vendor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Machine::set_allocated_cpu_vendor(std::string* cpu_vendor) {
  if (cpu_vendor != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cpu_vendor_.SetAllocated(cpu_vendor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpu_vendor_.IsDefault()) {
    cpu_vendor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpu_vendor)
}

// optional uint32 cpuid = 3;
inline bool ClientIncidentReport_EnvironmentData_Machine::_internal_has_cpuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Machine::has_cpuid() const {
  return _internal_has_cpuid();
}
inline void ClientIncidentReport_EnvironmentData_Machine::clear_cpuid() {
  cpuid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ClientIncidentReport_EnvironmentData_Machine::_internal_cpuid() const {
  return cpuid_;
}
inline uint32_t ClientIncidentReport_EnvironmentData_Machine::cpuid() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpuid)
  return _internal_cpuid();
}
inline void ClientIncidentReport_EnvironmentData_Machine::_internal_set_cpuid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  cpuid_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Machine::set_cpuid(uint32_t value) {
  _internal_set_cpuid(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Machine.cpuid)
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_Process_Patch

// optional string function = 1;
inline bool ClientIncidentReport_EnvironmentData_Process_Patch::_internal_has_function() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_Patch::has_function() const {
  return _internal_has_function();
}
inline void ClientIncidentReport_EnvironmentData_Process_Patch::clear_function() {
  function_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_Patch::function() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Process_Patch::set_function(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.function)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Patch::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.function)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_Patch::_internal_function() const {
  return function_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Process_Patch::_internal_set_function(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Patch::_internal_mutable_function() {
  _has_bits_[0] |= 0x00000001u;
  return function_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Patch::release_function() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.function)
  if (!_internal_has_function()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = function_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_.IsDefault()) {
    function_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Process_Patch::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_.SetAllocated(function, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_.IsDefault()) {
    function_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.function)
}

// optional string target_dll = 2;
inline bool ClientIncidentReport_EnvironmentData_Process_Patch::_internal_has_target_dll() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_Patch::has_target_dll() const {
  return _internal_has_target_dll();
}
inline void ClientIncidentReport_EnvironmentData_Process_Patch::clear_target_dll() {
  target_dll_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_Patch::target_dll() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.target_dll)
  return _internal_target_dll();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Process_Patch::set_target_dll(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 target_dll_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.target_dll)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Patch::mutable_target_dll() {
  std::string* _s = _internal_mutable_target_dll();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.target_dll)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_Patch::_internal_target_dll() const {
  return target_dll_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Process_Patch::_internal_set_target_dll(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  target_dll_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Patch::_internal_mutable_target_dll() {
  _has_bits_[0] |= 0x00000002u;
  return target_dll_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Patch::release_target_dll() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.target_dll)
  if (!_internal_has_target_dll()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = target_dll_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_dll_.IsDefault()) {
    target_dll_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Process_Patch::set_allocated_target_dll(std::string* target_dll) {
  if (target_dll != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_dll_.SetAllocated(target_dll, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_dll_.IsDefault()) {
    target_dll_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch.target_dll)
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_Process_NetworkProvider

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_Process_Dll

// optional string path = 1;
inline bool ClientIncidentReport_EnvironmentData_Process_Dll::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_Dll::has_path() const {
  return _internal_has_path();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_Dll::path() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Process_Dll::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.path)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Dll::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.path)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_Dll::_internal_path() const {
  return path_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Dll::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_Dll::release_path() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault()) {
    path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault()) {
    path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.path)
}

// optional uint64 base_address = 2;
inline bool ClientIncidentReport_EnvironmentData_Process_Dll::_internal_has_base_address() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_Dll::has_base_address() const {
  return _internal_has_base_address();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::clear_base_address() {
  base_address_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ClientIncidentReport_EnvironmentData_Process_Dll::_internal_base_address() const {
  return base_address_;
}
inline uint64_t ClientIncidentReport_EnvironmentData_Process_Dll::base_address() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.base_address)
  return _internal_base_address();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::_internal_set_base_address(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  base_address_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::set_base_address(uint64_t value) {
  _internal_set_base_address(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.base_address)
}

// optional uint32 length = 3;
inline bool ClientIncidentReport_EnvironmentData_Process_Dll::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_Dll::has_length() const {
  return _internal_has_length();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ClientIncidentReport_EnvironmentData_Process_Dll::_internal_length() const {
  return length_;
}
inline uint32_t ClientIncidentReport_EnvironmentData_Process_Dll::length() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.length)
  return _internal_length();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::_internal_set_length(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  length_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.length)
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.Feature feature = 4;
inline int ClientIncidentReport_EnvironmentData_Process_Dll::_internal_feature_size() const {
  return feature_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process_Dll::feature_size() const {
  return _internal_feature_size();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::clear_feature() {
  feature_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature ClientIncidentReport_EnvironmentData_Process_Dll::_internal_feature(int index) const {
  return static_cast< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature >(feature_.Get(index));
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature ClientIncidentReport_EnvironmentData_Process_Dll::feature(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.feature)
  return _internal_feature(index);
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::set_feature(int index, ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature value) {
  assert(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature_IsValid(value));
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.feature)
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::_internal_add_feature(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature value) {
  assert(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature_IsValid(value));
  feature_.Add(value);
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::add_feature(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature value) {
  _internal_add_feature(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ClientIncidentReport_EnvironmentData_Process_Dll::feature() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.feature)
  return feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ClientIncidentReport_EnvironmentData_Process_Dll::_internal_mutable_feature() {
  return &feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ClientIncidentReport_EnvironmentData_Process_Dll::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.feature)
  return _internal_mutable_feature();
}

// optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 5;
inline bool ClientIncidentReport_EnvironmentData_Process_Dll::_internal_has_image_headers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || image_headers_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_Dll::has_image_headers() const {
  return _internal_has_image_headers();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::clear_image_headers() {
  if (image_headers_ != nullptr) image_headers_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientIncidentReport_EnvironmentData_Process_Dll::_internal_image_headers() const {
  const ::safe_browsing::ClientDownloadRequest_ImageHeaders* p = image_headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest_ImageHeaders&>(
      ::safe_browsing::_ClientDownloadRequest_ImageHeaders_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest_ImageHeaders& ClientIncidentReport_EnvironmentData_Process_Dll::image_headers() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.image_headers)
  return _internal_image_headers();
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::unsafe_arena_set_allocated_image_headers(
    ::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_headers_);
  }
  image_headers_ = image_headers;
  if (image_headers) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.image_headers)
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_EnvironmentData_Process_Dll::release_image_headers() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_EnvironmentData_Process_Dll::unsafe_arena_release_image_headers() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.image_headers)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* temp = image_headers_;
  image_headers_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_EnvironmentData_Process_Dll::_internal_mutable_image_headers() {
  _has_bits_[0] |= 0x00000002u;
  if (image_headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest_ImageHeaders>(GetArenaForAllocation());
    image_headers_ = p;
  }
  return image_headers_;
}
inline ::safe_browsing::ClientDownloadRequest_ImageHeaders* ClientIncidentReport_EnvironmentData_Process_Dll::mutable_image_headers() {
  ::safe_browsing::ClientDownloadRequest_ImageHeaders* _msg = _internal_mutable_image_headers();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.image_headers)
  return _msg;
}
inline void ClientIncidentReport_EnvironmentData_Process_Dll::set_allocated_image_headers(::safe_browsing::ClientDownloadRequest_ImageHeaders* image_headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_headers_;
  }
  if (image_headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_headers);
    if (message_arena != submessage_arena) {
      image_headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_headers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_headers_ = image_headers;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.image_headers)
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification

// optional uint32 file_offset = 1;
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_has_file_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::has_file_offset() const {
  return _internal_has_file_offset();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::clear_file_offset() {
  file_offset_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_file_offset() const {
  return file_offset_;
}
inline uint32_t ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::file_offset() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.file_offset)
  return _internal_file_offset();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_set_file_offset(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  file_offset_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::set_file_offset(uint32_t value) {
  _internal_set_file_offset(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.file_offset)
}

// optional int32 byte_count = 2;
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_has_byte_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::has_byte_count() const {
  return _internal_has_byte_count();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::clear_byte_count() {
  byte_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_byte_count() const {
  return byte_count_;
}
inline int32_t ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::byte_count() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.byte_count)
  return _internal_byte_count();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_set_byte_count(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  byte_count_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::set_byte_count(int32_t value) {
  _internal_set_byte_count(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.byte_count)
}

// optional bytes modified_bytes = 3;
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_has_modified_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::has_modified_bytes() const {
  return _internal_has_modified_bytes();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::clear_modified_bytes() {
  modified_bytes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::modified_bytes() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.modified_bytes)
  return _internal_modified_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::set_modified_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 modified_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.modified_bytes)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::mutable_modified_bytes() {
  std::string* _s = _internal_mutable_modified_bytes();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.modified_bytes)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_modified_bytes() const {
  return modified_bytes_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_set_modified_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  modified_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_mutable_modified_bytes() {
  _has_bits_[0] |= 0x00000001u;
  return modified_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::release_modified_bytes() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.modified_bytes)
  if (!_internal_has_modified_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = modified_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modified_bytes_.IsDefault()) {
    modified_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::set_allocated_modified_bytes(std::string* modified_bytes) {
  if (modified_bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modified_bytes_.SetAllocated(modified_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modified_bytes_.IsDefault()) {
    modified_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.modified_bytes)
}

// optional string export_name = 4;
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_has_export_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::has_export_name() const {
  return _internal_has_export_name();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::clear_export_name() {
  export_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::export_name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.export_name)
  return _internal_export_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::set_export_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 export_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.export_name)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::mutable_export_name() {
  std::string* _s = _internal_mutable_export_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.export_name)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_export_name() const {
  return export_name_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_set_export_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  export_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_internal_mutable_export_name() {
  _has_bits_[0] |= 0x00000002u;
  return export_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::release_export_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.export_name)
  if (!_internal_has_export_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = export_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (export_name_.IsDefault()) {
    export_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::set_allocated_export_name(std::string* export_name) {
  if (export_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  export_name_.SetAllocated(export_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (export_name_.IsDefault()) {
    export_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification.export_name)
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_Process_ModuleState

// optional string name = 1;
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState::has_name() const {
  return _internal_has_name();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Process_ModuleState::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.name)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.name)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_name() const {
  return name_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.name)
}

// optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.ModifiedState modified_state = 2;
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_has_modified_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process_ModuleState::has_modified_state() const {
  return _internal_has_modified_state();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::clear_modified_state() {
  modified_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_modified_state() const {
  return static_cast< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState >(modified_state_);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState::modified_state() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.modified_state)
  return _internal_modified_state();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_set_modified_state(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState value) {
  assert(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  modified_state_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::set_modified_state(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState value) {
  _internal_set_modified_state(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.modified_state)
}

// repeated string OBSOLETE_modified_export = 3;
inline int ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_obsolete_modified_export_size() const {
  return obsolete_modified_export_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process_ModuleState::obsolete_modified_export_size() const {
  return _internal_obsolete_modified_export_size();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::clear_obsolete_modified_export() {
  obsolete_modified_export_.Clear();
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState::add_obsolete_modified_export() {
  std::string* _s = _internal_add_obsolete_modified_export();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_obsolete_modified_export(int index) const {
  return obsolete_modified_export_.Get(index);
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState::obsolete_modified_export(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
  return _internal_obsolete_modified_export(index);
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState::mutable_obsolete_modified_export(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
  return obsolete_modified_export_.Mutable(index);
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::set_obsolete_modified_export(int index, const std::string& value) {
  obsolete_modified_export_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::set_obsolete_modified_export(int index, std::string&& value) {
  obsolete_modified_export_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::set_obsolete_modified_export(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_modified_export_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::set_obsolete_modified_export(int index, const char* value, size_t size) {
  obsolete_modified_export_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_add_obsolete_modified_export() {
  return obsolete_modified_export_.Add();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::add_obsolete_modified_export(const std::string& value) {
  obsolete_modified_export_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::add_obsolete_modified_export(std::string&& value) {
  obsolete_modified_export_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::add_obsolete_modified_export(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_modified_export_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::add_obsolete_modified_export(const char* value, size_t size) {
  obsolete_modified_export_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientIncidentReport_EnvironmentData_Process_ModuleState::obsolete_modified_export() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
  return obsolete_modified_export_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientIncidentReport_EnvironmentData_Process_ModuleState::mutable_obsolete_modified_export() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.OBSOLETE_modified_export)
  return &obsolete_modified_export_;
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification modification = 4;
inline int ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_modification_size() const {
  return modification_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process_ModuleState::modification_size() const {
  return _internal_modification_size();
}
inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::clear_modification() {
  modification_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* ClientIncidentReport_EnvironmentData_Process_ModuleState::mutable_modification(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.modification)
  return modification_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification >*
ClientIncidentReport_EnvironmentData_Process_ModuleState::mutable_modification() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.modification)
  return &modification_;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_modification(int index) const {
  return modification_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& ClientIncidentReport_EnvironmentData_Process_ModuleState::modification(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.modification)
  return _internal_modification(index);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* ClientIncidentReport_EnvironmentData_Process_ModuleState::_internal_add_modification() {
  return modification_.Add();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* ClientIncidentReport_EnvironmentData_Process_ModuleState::add_modification() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* _add = _internal_add_modification();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.modification)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification >&
ClientIncidentReport_EnvironmentData_Process_ModuleState::modification() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.modification)
  return modification_;
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData_Process

// optional string version = 1;
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process::has_version() const {
  return _internal_has_version();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_EnvironmentData_Process::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.version)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.version)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process::_internal_version() const {
  return version_.Get();
}
inline void ClientIncidentReport_EnvironmentData_Process::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::release_version() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.Process.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_EnvironmentData_Process::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.Process.version)
}

// repeated string OBSOLETE_dlls = 2;
inline int ClientIncidentReport_EnvironmentData_Process::_internal_obsolete_dlls_size() const {
  return obsolete_dlls_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process::obsolete_dlls_size() const {
  return _internal_obsolete_dlls_size();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_obsolete_dlls() {
  obsolete_dlls_.Clear();
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::add_obsolete_dlls() {
  std::string* _s = _internal_add_obsolete_dlls();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process::_internal_obsolete_dlls(int index) const {
  return obsolete_dlls_.Get(index);
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process::obsolete_dlls(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
  return _internal_obsolete_dlls(index);
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::mutable_obsolete_dlls(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
  return obsolete_dlls_.Mutable(index);
}
inline void ClientIncidentReport_EnvironmentData_Process::set_obsolete_dlls(int index, const std::string& value) {
  obsolete_dlls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
}
inline void ClientIncidentReport_EnvironmentData_Process::set_obsolete_dlls(int index, std::string&& value) {
  obsolete_dlls_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
}
inline void ClientIncidentReport_EnvironmentData_Process::set_obsolete_dlls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_dlls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
}
inline void ClientIncidentReport_EnvironmentData_Process::set_obsolete_dlls(int index, const char* value, size_t size) {
  obsolete_dlls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::_internal_add_obsolete_dlls() {
  return obsolete_dlls_.Add();
}
inline void ClientIncidentReport_EnvironmentData_Process::add_obsolete_dlls(const std::string& value) {
  obsolete_dlls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
}
inline void ClientIncidentReport_EnvironmentData_Process::add_obsolete_dlls(std::string&& value) {
  obsolete_dlls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
}
inline void ClientIncidentReport_EnvironmentData_Process::add_obsolete_dlls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  obsolete_dlls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
}
inline void ClientIncidentReport_EnvironmentData_Process::add_obsolete_dlls(const char* value, size_t size) {
  obsolete_dlls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientIncidentReport_EnvironmentData_Process::obsolete_dlls() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
  return obsolete_dlls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientIncidentReport_EnvironmentData_Process::mutable_obsolete_dlls() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_dlls)
  return &obsolete_dlls_;
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch patches = 3;
inline int ClientIncidentReport_EnvironmentData_Process::_internal_patches_size() const {
  return patches_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process::patches_size() const {
  return _internal_patches_size();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_patches() {
  patches_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch* ClientIncidentReport_EnvironmentData_Process::mutable_patches(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.patches)
  return patches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch >*
ClientIncidentReport_EnvironmentData_Process::mutable_patches() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.patches)
  return &patches_;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch& ClientIncidentReport_EnvironmentData_Process::_internal_patches(int index) const {
  return patches_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch& ClientIncidentReport_EnvironmentData_Process::patches(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.patches)
  return _internal_patches(index);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch* ClientIncidentReport_EnvironmentData_Process::_internal_add_patches() {
  return patches_.Add();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch* ClientIncidentReport_EnvironmentData_Process::add_patches() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch* _add = _internal_add_patches();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.patches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch >&
ClientIncidentReport_EnvironmentData_Process::patches() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.patches)
  return patches_;
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider network_providers = 4;
inline int ClientIncidentReport_EnvironmentData_Process::_internal_network_providers_size() const {
  return network_providers_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process::network_providers_size() const {
  return _internal_network_providers_size();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_network_providers() {
  network_providers_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider* ClientIncidentReport_EnvironmentData_Process::mutable_network_providers(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.network_providers)
  return network_providers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider >*
ClientIncidentReport_EnvironmentData_Process::mutable_network_providers() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.network_providers)
  return &network_providers_;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider& ClientIncidentReport_EnvironmentData_Process::_internal_network_providers(int index) const {
  return network_providers_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider& ClientIncidentReport_EnvironmentData_Process::network_providers(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.network_providers)
  return _internal_network_providers(index);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider* ClientIncidentReport_EnvironmentData_Process::_internal_add_network_providers() {
  return network_providers_.Add();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider* ClientIncidentReport_EnvironmentData_Process::add_network_providers() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider* _add = _internal_add_network_providers();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.network_providers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider >&
ClientIncidentReport_EnvironmentData_Process::network_providers() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.network_providers)
  return network_providers_;
}

// optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Channel chrome_update_channel = 5;
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_has_chrome_update_channel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process::has_chrome_update_channel() const {
  return _internal_has_chrome_update_channel();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_chrome_update_channel() {
  chrome_update_channel_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::_internal_chrome_update_channel() const {
  return static_cast< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel >(chrome_update_channel_);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::chrome_update_channel() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.chrome_update_channel)
  return _internal_chrome_update_channel();
}
inline void ClientIncidentReport_EnvironmentData_Process::_internal_set_chrome_update_channel(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel value) {
  assert(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  chrome_update_channel_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process::set_chrome_update_channel(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel value) {
  _internal_set_chrome_update_channel(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.chrome_update_channel)
}

// optional int64 uptime_msec = 6;
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_has_uptime_msec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process::has_uptime_msec() const {
  return _internal_has_uptime_msec();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_uptime_msec() {
  uptime_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ClientIncidentReport_EnvironmentData_Process::_internal_uptime_msec() const {
  return uptime_msec_;
}
inline int64_t ClientIncidentReport_EnvironmentData_Process::uptime_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.uptime_msec)
  return _internal_uptime_msec();
}
inline void ClientIncidentReport_EnvironmentData_Process::_internal_set_uptime_msec(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  uptime_msec_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process::set_uptime_msec(int64_t value) {
  _internal_set_uptime_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.uptime_msec)
}

// optional bool metrics_consent = 7;
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_has_metrics_consent() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process::has_metrics_consent() const {
  return _internal_has_metrics_consent();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_metrics_consent() {
  metrics_consent_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_metrics_consent() const {
  return metrics_consent_;
}
inline bool ClientIncidentReport_EnvironmentData_Process::metrics_consent() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.metrics_consent)
  return _internal_metrics_consent();
}
inline void ClientIncidentReport_EnvironmentData_Process::_internal_set_metrics_consent(bool value) {
  _has_bits_[0] |= 0x00000008u;
  metrics_consent_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process::set_metrics_consent(bool value) {
  _internal_set_metrics_consent(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.metrics_consent)
}

// optional bool OBSOLETE_extended_consent = 8;
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_has_obsolete_extended_consent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process::has_obsolete_extended_consent() const {
  return _internal_has_obsolete_extended_consent();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_obsolete_extended_consent() {
  obsolete_extended_consent_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_obsolete_extended_consent() const {
  return obsolete_extended_consent_;
}
inline bool ClientIncidentReport_EnvironmentData_Process::obsolete_extended_consent() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_extended_consent)
  return _internal_obsolete_extended_consent();
}
inline void ClientIncidentReport_EnvironmentData_Process::_internal_set_obsolete_extended_consent(bool value) {
  _has_bits_[0] |= 0x00000010u;
  obsolete_extended_consent_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process::set_obsolete_extended_consent(bool value) {
  _internal_set_obsolete_extended_consent(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_extended_consent)
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll dll = 9;
inline int ClientIncidentReport_EnvironmentData_Process::_internal_dll_size() const {
  return dll_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process::dll_size() const {
  return _internal_dll_size();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_dll() {
  dll_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll* ClientIncidentReport_EnvironmentData_Process::mutable_dll(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.dll)
  return dll_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll >*
ClientIncidentReport_EnvironmentData_Process::mutable_dll() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.dll)
  return &dll_;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll& ClientIncidentReport_EnvironmentData_Process::_internal_dll(int index) const {
  return dll_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll& ClientIncidentReport_EnvironmentData_Process::dll(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.dll)
  return _internal_dll(index);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll* ClientIncidentReport_EnvironmentData_Process::_internal_add_dll() {
  return dll_.Add();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll* ClientIncidentReport_EnvironmentData_Process::add_dll() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll* _add = _internal_add_dll();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.dll)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll >&
ClientIncidentReport_EnvironmentData_Process::dll() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.dll)
  return dll_;
}

// repeated string blocklisted_dll = 10;
inline int ClientIncidentReport_EnvironmentData_Process::_internal_blocklisted_dll_size() const {
  return blocklisted_dll_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process::blocklisted_dll_size() const {
  return _internal_blocklisted_dll_size();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_blocklisted_dll() {
  blocklisted_dll_.Clear();
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::add_blocklisted_dll() {
  std::string* _s = _internal_add_blocklisted_dll();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
  return _s;
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process::_internal_blocklisted_dll(int index) const {
  return blocklisted_dll_.Get(index);
}
inline const std::string& ClientIncidentReport_EnvironmentData_Process::blocklisted_dll(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
  return _internal_blocklisted_dll(index);
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::mutable_blocklisted_dll(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
  return blocklisted_dll_.Mutable(index);
}
inline void ClientIncidentReport_EnvironmentData_Process::set_blocklisted_dll(int index, const std::string& value) {
  blocklisted_dll_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
}
inline void ClientIncidentReport_EnvironmentData_Process::set_blocklisted_dll(int index, std::string&& value) {
  blocklisted_dll_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
}
inline void ClientIncidentReport_EnvironmentData_Process::set_blocklisted_dll(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blocklisted_dll_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
}
inline void ClientIncidentReport_EnvironmentData_Process::set_blocklisted_dll(int index, const char* value, size_t size) {
  blocklisted_dll_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
}
inline std::string* ClientIncidentReport_EnvironmentData_Process::_internal_add_blocklisted_dll() {
  return blocklisted_dll_.Add();
}
inline void ClientIncidentReport_EnvironmentData_Process::add_blocklisted_dll(const std::string& value) {
  blocklisted_dll_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
}
inline void ClientIncidentReport_EnvironmentData_Process::add_blocklisted_dll(std::string&& value) {
  blocklisted_dll_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
}
inline void ClientIncidentReport_EnvironmentData_Process::add_blocklisted_dll(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blocklisted_dll_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
}
inline void ClientIncidentReport_EnvironmentData_Process::add_blocklisted_dll(const char* value, size_t size) {
  blocklisted_dll_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientIncidentReport_EnvironmentData_Process::blocklisted_dll() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
  return blocklisted_dll_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientIncidentReport_EnvironmentData_Process::mutable_blocklisted_dll() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.blocklisted_dll)
  return &blocklisted_dll_;
}

// repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState module_state = 11;
inline int ClientIncidentReport_EnvironmentData_Process::_internal_module_state_size() const {
  return module_state_.size();
}
inline int ClientIncidentReport_EnvironmentData_Process::module_state_size() const {
  return _internal_module_state_size();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_module_state() {
  module_state_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState* ClientIncidentReport_EnvironmentData_Process::mutable_module_state(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.Process.module_state)
  return module_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState >*
ClientIncidentReport_EnvironmentData_Process::mutable_module_state() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.module_state)
  return &module_state_;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState& ClientIncidentReport_EnvironmentData_Process::_internal_module_state(int index) const {
  return module_state_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState& ClientIncidentReport_EnvironmentData_Process::module_state(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.module_state)
  return _internal_module_state(index);
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState* ClientIncidentReport_EnvironmentData_Process::_internal_add_module_state() {
  return module_state_.Add();
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState* ClientIncidentReport_EnvironmentData_Process::add_module_state() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState* _add = _internal_add_module_state();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.EnvironmentData.Process.module_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState >&
ClientIncidentReport_EnvironmentData_Process::module_state() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.EnvironmentData.Process.module_state)
  return module_state_;
}

// optional bool OBSOLETE_field_trial_participant = 12;
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_has_obsolete_field_trial_participant() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientIncidentReport_EnvironmentData_Process::has_obsolete_field_trial_participant() const {
  return _internal_has_obsolete_field_trial_participant();
}
inline void ClientIncidentReport_EnvironmentData_Process::clear_obsolete_field_trial_participant() {
  obsolete_field_trial_participant_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ClientIncidentReport_EnvironmentData_Process::_internal_obsolete_field_trial_participant() const {
  return obsolete_field_trial_participant_;
}
inline bool ClientIncidentReport_EnvironmentData_Process::obsolete_field_trial_participant() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_field_trial_participant)
  return _internal_obsolete_field_trial_participant();
}
inline void ClientIncidentReport_EnvironmentData_Process::_internal_set_obsolete_field_trial_participant(bool value) {
  _has_bits_[0] |= 0x00000020u;
  obsolete_field_trial_participant_ = value;
}
inline void ClientIncidentReport_EnvironmentData_Process::set_obsolete_field_trial_participant(bool value) {
  _internal_set_obsolete_field_trial_participant(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.EnvironmentData.Process.OBSOLETE_field_trial_participant)
}

// -------------------------------------------------------------------

// ClientIncidentReport_EnvironmentData

// optional .safe_browsing.ClientIncidentReport.EnvironmentData.OS os = 1;
inline bool ClientIncidentReport_EnvironmentData::_internal_has_os() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || os_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_EnvironmentData::has_os() const {
  return _internal_has_os();
}
inline void ClientIncidentReport_EnvironmentData::clear_os() {
  if (os_ != nullptr) os_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS& ClientIncidentReport_EnvironmentData::_internal_os() const {
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* p = os_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS&>(
      ::safe_browsing::_ClientIncidentReport_EnvironmentData_OS_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS& ClientIncidentReport_EnvironmentData::os() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.os)
  return _internal_os();
}
inline void ClientIncidentReport_EnvironmentData::unsafe_arena_set_allocated_os(
    ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* os) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(os_);
  }
  os_ = os;
  if (os) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.os)
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* ClientIncidentReport_EnvironmentData::release_os() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* temp = os_;
  os_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* ClientIncidentReport_EnvironmentData::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.os)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* temp = os_;
  os_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* ClientIncidentReport_EnvironmentData::_internal_mutable_os() {
  _has_bits_[0] |= 0x00000001u;
  if (os_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_OS>(GetArenaForAllocation());
    os_ = p;
  }
  return os_;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* ClientIncidentReport_EnvironmentData::mutable_os() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_OS* _msg = _internal_mutable_os();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.os)
  return _msg;
}
inline void ClientIncidentReport_EnvironmentData::set_allocated_os(::safe_browsing::ClientIncidentReport_EnvironmentData_OS* os) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete os_;
  }
  if (os) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(os);
    if (message_arena != submessage_arena) {
      os = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, os, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  os_ = os;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.os)
}

// optional .safe_browsing.ClientIncidentReport.EnvironmentData.Machine machine = 2;
inline bool ClientIncidentReport_EnvironmentData::_internal_has_machine() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || machine_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_EnvironmentData::has_machine() const {
  return _internal_has_machine();
}
inline void ClientIncidentReport_EnvironmentData::clear_machine() {
  if (machine_ != nullptr) machine_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine& ClientIncidentReport_EnvironmentData::_internal_machine() const {
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* p = machine_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine&>(
      ::safe_browsing::_ClientIncidentReport_EnvironmentData_Machine_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine& ClientIncidentReport_EnvironmentData::machine() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.machine)
  return _internal_machine();
}
inline void ClientIncidentReport_EnvironmentData::unsafe_arena_set_allocated_machine(
    ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* machine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machine_);
  }
  machine_ = machine;
  if (machine) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.machine)
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* ClientIncidentReport_EnvironmentData::release_machine() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* temp = machine_;
  machine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* ClientIncidentReport_EnvironmentData::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.machine)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* temp = machine_;
  machine_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* ClientIncidentReport_EnvironmentData::_internal_mutable_machine() {
  _has_bits_[0] |= 0x00000002u;
  if (machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Machine>(GetArenaForAllocation());
    machine_ = p;
  }
  return machine_;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* ClientIncidentReport_EnvironmentData::mutable_machine() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* _msg = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.machine)
  return _msg;
}
inline void ClientIncidentReport_EnvironmentData::set_allocated_machine(::safe_browsing::ClientIncidentReport_EnvironmentData_Machine* machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete machine_;
  }
  if (machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(machine);
    if (message_arena != submessage_arena) {
      machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.machine)
}

// optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process process = 3;
inline bool ClientIncidentReport_EnvironmentData::_internal_has_process() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || process_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_EnvironmentData::has_process() const {
  return _internal_has_process();
}
inline void ClientIncidentReport_EnvironmentData::clear_process() {
  if (process_ != nullptr) process_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process& ClientIncidentReport_EnvironmentData::_internal_process() const {
  const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* p = process_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process&>(
      ::safe_browsing::_ClientIncidentReport_EnvironmentData_Process_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process& ClientIncidentReport_EnvironmentData::process() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.EnvironmentData.process)
  return _internal_process();
}
inline void ClientIncidentReport_EnvironmentData::unsafe_arena_set_allocated_process(
    ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* process) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_);
  }
  process_ = process;
  if (process) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.process)
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* ClientIncidentReport_EnvironmentData::release_process() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* temp = process_;
  process_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* ClientIncidentReport_EnvironmentData::unsafe_arena_release_process() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.EnvironmentData.process)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* ClientIncidentReport_EnvironmentData::_internal_mutable_process() {
  _has_bits_[0] |= 0x00000004u;
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData_Process>(GetArenaForAllocation());
    process_ = p;
  }
  return process_;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* ClientIncidentReport_EnvironmentData::mutable_process() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData_Process* _msg = _internal_mutable_process();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.EnvironmentData.process)
  return _msg;
}
inline void ClientIncidentReport_EnvironmentData::set_allocated_process(::safe_browsing::ClientIncidentReport_EnvironmentData_Process* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete process_;
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process);
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.EnvironmentData.process)
}

// -------------------------------------------------------------------

// ClientIncidentReport_ExtensionData_ExtensionInfo

// optional string id = 1;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_id() const {
  return _internal_has_id();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_ExtensionData_ExtensionInfo::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.id)
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.id)
  return _s;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_id() const {
  return id_.Get();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::release_id() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.id)
}

// optional string version = 2;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_version() const {
  return _internal_has_version();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_ExtensionData_ExtensionInfo::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.version)
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.version)
  return _s;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_version() const {
  return version_.Get();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::release_version() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.version)
}

// optional string name = 3;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_name() const {
  return _internal_has_name();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_ExtensionData_ExtensionInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.name)
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.name)
  return _s;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_name() const {
  return name_.Get();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.name)
}

// optional string description = 4;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_description() const {
  return _internal_has_description();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::description() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_ExtensionData_ExtensionInfo::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.description)
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.description)
  return _s;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_description() const {
  return description_.Get();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000008u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::release_description() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.description)
}

// optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.ExtensionState state = 5 [default = STATE_UNKNOWN];
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_state() const {
  return _internal_has_state();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_state() const {
  return static_cast< ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState >(state_);
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::state() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.state)
  return _internal_state();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_state(::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState value) {
  assert(::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  state_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_state(::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.state)
}

// optional int32 type = 6;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_type() const {
  return _internal_has_type();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_type() const {
  return type_;
}
inline int32_t ClientIncidentReport_ExtensionData_ExtensionInfo::type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.type)
  return _internal_type();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_type(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.type)
}

// optional string update_url = 7;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_update_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_update_url() const {
  return _internal_has_update_url();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_update_url() {
  update_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::update_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.update_url)
  return _internal_update_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_ExtensionData_ExtensionInfo::set_update_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 update_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.update_url)
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::mutable_update_url() {
  std::string* _s = _internal_mutable_update_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.update_url)
  return _s;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_update_url() const {
  return update_url_.Get();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_update_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  update_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_mutable_update_url() {
  _has_bits_[0] |= 0x00000010u;
  return update_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::release_update_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.update_url)
  if (!_internal_has_update_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = update_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_url_.IsDefault()) {
    update_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_allocated_update_url(std::string* update_url) {
  if (update_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  update_url_.SetAllocated(update_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_url_.IsDefault()) {
    update_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.update_url)
}

// optional bool has_signature_validation = 8;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_has_signature_validation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_has_signature_validation() const {
  return _internal_has_has_signature_validation();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_has_signature_validation() {
  has_signature_validation_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_signature_validation() const {
  return has_signature_validation_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_signature_validation() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.has_signature_validation)
  return _internal_has_signature_validation();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_has_signature_validation(bool value) {
  _has_bits_[0] |= 0x00000100u;
  has_signature_validation_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_has_signature_validation(bool value) {
  _internal_set_has_signature_validation(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.has_signature_validation)
}

// optional bool signature_is_valid = 9;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_signature_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_signature_is_valid() const {
  return _internal_has_signature_is_valid();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_signature_is_valid() {
  signature_is_valid_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_signature_is_valid() const {
  return signature_is_valid_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::signature_is_valid() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.signature_is_valid)
  return _internal_signature_is_valid();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_signature_is_valid(bool value) {
  _has_bits_[0] |= 0x00000200u;
  signature_is_valid_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_signature_is_valid(bool value) {
  _internal_set_signature_is_valid(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.signature_is_valid)
}

// optional bool installed_by_custodian = 10;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_installed_by_custodian() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_installed_by_custodian() const {
  return _internal_has_installed_by_custodian();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_installed_by_custodian() {
  installed_by_custodian_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_installed_by_custodian() const {
  return installed_by_custodian_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::installed_by_custodian() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.installed_by_custodian)
  return _internal_installed_by_custodian();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_installed_by_custodian(bool value) {
  _has_bits_[0] |= 0x00000400u;
  installed_by_custodian_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_installed_by_custodian(bool value) {
  _internal_set_installed_by_custodian(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.installed_by_custodian)
}

// optional bool installed_by_default = 11;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_installed_by_default() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_installed_by_default() const {
  return _internal_has_installed_by_default();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_installed_by_default() {
  installed_by_default_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_installed_by_default() const {
  return installed_by_default_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::installed_by_default() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.installed_by_default)
  return _internal_installed_by_default();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_installed_by_default(bool value) {
  _has_bits_[0] |= 0x00000800u;
  installed_by_default_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_installed_by_default(bool value) {
  _internal_set_installed_by_default(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.installed_by_default)
}

// optional bool installed_by_oem = 12;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_installed_by_oem() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_installed_by_oem() const {
  return _internal_has_installed_by_oem();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_installed_by_oem() {
  installed_by_oem_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_installed_by_oem() const {
  return installed_by_oem_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::installed_by_oem() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.installed_by_oem)
  return _internal_installed_by_oem();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_installed_by_oem(bool value) {
  _has_bits_[0] |= 0x00001000u;
  installed_by_oem_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_installed_by_oem(bool value) {
  _internal_set_installed_by_oem(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.installed_by_oem)
}

// optional bool from_bookmark = 13;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_from_bookmark() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_from_bookmark() const {
  return _internal_has_from_bookmark();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_from_bookmark() {
  from_bookmark_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_from_bookmark() const {
  return from_bookmark_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::from_bookmark() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.from_bookmark)
  return _internal_from_bookmark();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_from_bookmark(bool value) {
  _has_bits_[0] |= 0x00002000u;
  from_bookmark_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_from_bookmark(bool value) {
  _internal_set_from_bookmark(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.from_bookmark)
}

// optional bool from_webstore = 14;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_from_webstore() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_from_webstore() const {
  return _internal_has_from_webstore();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_from_webstore() {
  from_webstore_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_from_webstore() const {
  return from_webstore_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::from_webstore() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.from_webstore)
  return _internal_from_webstore();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_from_webstore(bool value) {
  _has_bits_[0] |= 0x00004000u;
  from_webstore_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_from_webstore(bool value) {
  _internal_set_from_webstore(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.from_webstore)
}

// optional bool converted_from_user_script = 15;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_converted_from_user_script() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_converted_from_user_script() const {
  return _internal_has_converted_from_user_script();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_converted_from_user_script() {
  converted_from_user_script_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_converted_from_user_script() const {
  return converted_from_user_script_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::converted_from_user_script() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.converted_from_user_script)
  return _internal_converted_from_user_script();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_converted_from_user_script(bool value) {
  _has_bits_[0] |= 0x00008000u;
  converted_from_user_script_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_converted_from_user_script(bool value) {
  _internal_set_converted_from_user_script(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.converted_from_user_script)
}

// optional bool may_be_untrusted = 16;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_may_be_untrusted() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_may_be_untrusted() const {
  return _internal_has_may_be_untrusted();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_may_be_untrusted() {
  may_be_untrusted_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_may_be_untrusted() const {
  return may_be_untrusted_;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::may_be_untrusted() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.may_be_untrusted)
  return _internal_may_be_untrusted();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_may_be_untrusted(bool value) {
  _has_bits_[0] |= 0x00020000u;
  may_be_untrusted_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_may_be_untrusted(bool value) {
  _internal_set_may_be_untrusted(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.may_be_untrusted)
}

// optional int64 install_time_msec = 17;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_install_time_msec() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_install_time_msec() const {
  return _internal_has_install_time_msec();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_install_time_msec() {
  install_time_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00010000u;
}
inline int64_t ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_install_time_msec() const {
  return install_time_msec_;
}
inline int64_t ClientIncidentReport_ExtensionData_ExtensionInfo::install_time_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.install_time_msec)
  return _internal_install_time_msec();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_install_time_msec(int64_t value) {
  _has_bits_[0] |= 0x00010000u;
  install_time_msec_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_install_time_msec(int64_t value) {
  _internal_set_install_time_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.install_time_msec)
}

// optional int32 manifest_location_type = 18;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_manifest_location_type() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_manifest_location_type() const {
  return _internal_has_manifest_location_type();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_manifest_location_type() {
  manifest_location_type_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_manifest_location_type() const {
  return manifest_location_type_;
}
inline int32_t ClientIncidentReport_ExtensionData_ExtensionInfo::manifest_location_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.manifest_location_type)
  return _internal_manifest_location_type();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_manifest_location_type(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  manifest_location_type_ = value;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_manifest_location_type(int32_t value) {
  _internal_set_manifest_location_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.manifest_location_type)
}

// optional string manifest = 19;
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_has_manifest() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientIncidentReport_ExtensionData_ExtensionInfo::has_manifest() const {
  return _internal_has_manifest();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::clear_manifest() {
  manifest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::manifest() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.manifest)
  return _internal_manifest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_ExtensionData_ExtensionInfo::set_manifest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 manifest_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.manifest)
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::mutable_manifest() {
  std::string* _s = _internal_mutable_manifest();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.manifest)
  return _s;
}
inline const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_manifest() const {
  return manifest_.Get();
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_set_manifest(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  manifest_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::_internal_mutable_manifest() {
  _has_bits_[0] |= 0x00000020u;
  return manifest_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_ExtensionData_ExtensionInfo::release_manifest() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.manifest)
  if (!_internal_has_manifest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = manifest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manifest_.IsDefault()) {
    manifest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_ExtensionData_ExtensionInfo::set_allocated_manifest(std::string* manifest) {
  if (manifest != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  manifest_.SetAllocated(manifest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manifest_.IsDefault()) {
    manifest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.manifest)
}

// -------------------------------------------------------------------

// ClientIncidentReport_ExtensionData

// optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo last_installed_extension = 1;
inline bool ClientIncidentReport_ExtensionData::_internal_has_last_installed_extension() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || last_installed_extension_ != nullptr);
  return value;
}
inline bool ClientIncidentReport_ExtensionData::has_last_installed_extension() const {
  return _internal_has_last_installed_extension();
}
inline void ClientIncidentReport_ExtensionData::clear_last_installed_extension() {
  if (last_installed_extension_ != nullptr) last_installed_extension_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo& ClientIncidentReport_ExtensionData::_internal_last_installed_extension() const {
  const ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* p = last_installed_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo&>(
      ::safe_browsing::_ClientIncidentReport_ExtensionData_ExtensionInfo_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo& ClientIncidentReport_ExtensionData::last_installed_extension() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.ExtensionData.last_installed_extension)
  return _internal_last_installed_extension();
}
inline void ClientIncidentReport_ExtensionData::unsafe_arena_set_allocated_last_installed_extension(
    ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* last_installed_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_installed_extension_);
  }
  last_installed_extension_ = last_installed_extension;
  if (last_installed_extension) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.ExtensionData.last_installed_extension)
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* ClientIncidentReport_ExtensionData::release_last_installed_extension() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* temp = last_installed_extension_;
  last_installed_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* ClientIncidentReport_ExtensionData::unsafe_arena_release_last_installed_extension() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.ExtensionData.last_installed_extension)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* temp = last_installed_extension_;
  last_installed_extension_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* ClientIncidentReport_ExtensionData::_internal_mutable_last_installed_extension() {
  _has_bits_[0] |= 0x00000001u;
  if (last_installed_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo>(GetArenaForAllocation());
    last_installed_extension_ = p;
  }
  return last_installed_extension_;
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* ClientIncidentReport_ExtensionData::mutable_last_installed_extension() {
  ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* _msg = _internal_mutable_last_installed_extension();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.ExtensionData.last_installed_extension)
  return _msg;
}
inline void ClientIncidentReport_ExtensionData::set_allocated_last_installed_extension(::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo* last_installed_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete last_installed_extension_;
  }
  if (last_installed_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_installed_extension);
    if (message_arena != submessage_arena) {
      last_installed_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_installed_extension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_installed_extension_ = last_installed_extension;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.ExtensionData.last_installed_extension)
}

// -------------------------------------------------------------------

// ClientIncidentReport_NonBinaryDownloadDetails

// optional string file_type = 1;
inline bool ClientIncidentReport_NonBinaryDownloadDetails::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentReport_NonBinaryDownloadDetails::has_file_type() const {
  return _internal_has_file_type();
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::clear_file_type() {
  file_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentReport_NonBinaryDownloadDetails::file_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.file_type)
  return _internal_file_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_NonBinaryDownloadDetails::set_file_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.file_type)
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::mutable_file_type() {
  std::string* _s = _internal_mutable_file_type();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.file_type)
  return _s;
}
inline const std::string& ClientIncidentReport_NonBinaryDownloadDetails::_internal_file_type() const {
  return file_type_.Get();
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::_internal_set_file_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::_internal_mutable_file_type() {
  _has_bits_[0] |= 0x00000001u;
  return file_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::release_file_type() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.file_type)
  if (!_internal_has_file_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_type_.IsDefault()) {
    file_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::set_allocated_file_type(std::string* file_type) {
  if (file_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_type_.SetAllocated(file_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_type_.IsDefault()) {
    file_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.file_type)
}

// optional bytes url_spec_sha256 = 2;
inline bool ClientIncidentReport_NonBinaryDownloadDetails::_internal_has_url_spec_sha256() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentReport_NonBinaryDownloadDetails::has_url_spec_sha256() const {
  return _internal_has_url_spec_sha256();
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::clear_url_spec_sha256() {
  url_spec_sha256_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientIncidentReport_NonBinaryDownloadDetails::url_spec_sha256() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.url_spec_sha256)
  return _internal_url_spec_sha256();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_NonBinaryDownloadDetails::set_url_spec_sha256(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_spec_sha256_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.url_spec_sha256)
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::mutable_url_spec_sha256() {
  std::string* _s = _internal_mutable_url_spec_sha256();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.url_spec_sha256)
  return _s;
}
inline const std::string& ClientIncidentReport_NonBinaryDownloadDetails::_internal_url_spec_sha256() const {
  return url_spec_sha256_.Get();
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::_internal_set_url_spec_sha256(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_spec_sha256_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::_internal_mutable_url_spec_sha256() {
  _has_bits_[0] |= 0x00000002u;
  return url_spec_sha256_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::release_url_spec_sha256() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.url_spec_sha256)
  if (!_internal_has_url_spec_sha256()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_spec_sha256_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_spec_sha256_.IsDefault()) {
    url_spec_sha256_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::set_allocated_url_spec_sha256(std::string* url_spec_sha256) {
  if (url_spec_sha256 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_spec_sha256_.SetAllocated(url_spec_sha256, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_spec_sha256_.IsDefault()) {
    url_spec_sha256_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.url_spec_sha256)
}

// optional string host = 3;
inline bool ClientIncidentReport_NonBinaryDownloadDetails::_internal_has_host() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientIncidentReport_NonBinaryDownloadDetails::has_host() const {
  return _internal_has_host();
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::clear_host() {
  host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientIncidentReport_NonBinaryDownloadDetails::host() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentReport_NonBinaryDownloadDetails::set_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.host)
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.host)
  return _s;
}
inline const std::string& ClientIncidentReport_NonBinaryDownloadDetails::_internal_host() const {
  return host_.Get();
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::_internal_set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  host_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::_internal_mutable_host() {
  _has_bits_[0] |= 0x00000004u;
  return host_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentReport_NonBinaryDownloadDetails::release_host() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.host)
  if (!_internal_has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = host_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault()) {
    host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault()) {
    host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.host)
}

// optional int64 length = 4;
inline bool ClientIncidentReport_NonBinaryDownloadDetails::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientIncidentReport_NonBinaryDownloadDetails::has_length() const {
  return _internal_has_length();
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::clear_length() {
  length_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ClientIncidentReport_NonBinaryDownloadDetails::_internal_length() const {
  return length_;
}
inline int64_t ClientIncidentReport_NonBinaryDownloadDetails::length() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.length)
  return _internal_length();
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::_internal_set_length(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  length_ = value;
}
inline void ClientIncidentReport_NonBinaryDownloadDetails::set_length(int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails.length)
}

// -------------------------------------------------------------------

// ClientIncidentReport

// repeated .safe_browsing.ClientIncidentReport.IncidentData incident = 1;
inline int ClientIncidentReport::_internal_incident_size() const {
  return incident_.size();
}
inline int ClientIncidentReport::incident_size() const {
  return _internal_incident_size();
}
inline void ClientIncidentReport::clear_incident() {
  incident_.Clear();
}
inline ::safe_browsing::ClientIncidentReport_IncidentData* ClientIncidentReport::mutable_incident(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.incident)
  return incident_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData >*
ClientIncidentReport::mutable_incident() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentReport.incident)
  return &incident_;
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData& ClientIncidentReport::_internal_incident(int index) const {
  return incident_.Get(index);
}
inline const ::safe_browsing::ClientIncidentReport_IncidentData& ClientIncidentReport::incident(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.incident)
  return _internal_incident(index);
}
inline ::safe_browsing::ClientIncidentReport_IncidentData* ClientIncidentReport::_internal_add_incident() {
  return incident_.Add();
}
inline ::safe_browsing::ClientIncidentReport_IncidentData* ClientIncidentReport::add_incident() {
  ::safe_browsing::ClientIncidentReport_IncidentData* _add = _internal_add_incident();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentReport.incident)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentReport_IncidentData >&
ClientIncidentReport::incident() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentReport.incident)
  return incident_;
}

// optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
inline bool ClientIncidentReport::_internal_has_download() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || download_ != nullptr);
  return value;
}
inline bool ClientIncidentReport::has_download() const {
  return _internal_has_download();
}
inline void ClientIncidentReport::clear_download() {
  if (download_ != nullptr) download_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ClientIncidentReport_DownloadDetails& ClientIncidentReport::_internal_download() const {
  const ::safe_browsing::ClientIncidentReport_DownloadDetails* p = download_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_DownloadDetails&>(
      ::safe_browsing::_ClientIncidentReport_DownloadDetails_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_DownloadDetails& ClientIncidentReport::download() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.download)
  return _internal_download();
}
inline void ClientIncidentReport::unsafe_arena_set_allocated_download(
    ::safe_browsing::ClientIncidentReport_DownloadDetails* download) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_);
  }
  download_ = download;
  if (download) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.download)
}
inline ::safe_browsing::ClientIncidentReport_DownloadDetails* ClientIncidentReport::release_download() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_DownloadDetails* temp = download_;
  download_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_DownloadDetails* ClientIncidentReport::unsafe_arena_release_download() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.download)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_DownloadDetails* temp = download_;
  download_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_DownloadDetails* ClientIncidentReport::_internal_mutable_download() {
  _has_bits_[0] |= 0x00000001u;
  if (download_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_DownloadDetails>(GetArenaForAllocation());
    download_ = p;
  }
  return download_;
}
inline ::safe_browsing::ClientIncidentReport_DownloadDetails* ClientIncidentReport::mutable_download() {
  ::safe_browsing::ClientIncidentReport_DownloadDetails* _msg = _internal_mutable_download();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.download)
  return _msg;
}
inline void ClientIncidentReport::set_allocated_download(::safe_browsing::ClientIncidentReport_DownloadDetails* download) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete download_;
  }
  if (download) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(download);
    if (message_arena != submessage_arena) {
      download = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  download_ = download;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.download)
}

// optional .safe_browsing.ClientIncidentReport.EnvironmentData environment = 3;
inline bool ClientIncidentReport::_internal_has_environment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || environment_ != nullptr);
  return value;
}
inline bool ClientIncidentReport::has_environment() const {
  return _internal_has_environment();
}
inline void ClientIncidentReport::clear_environment() {
  if (environment_ != nullptr) environment_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData& ClientIncidentReport::_internal_environment() const {
  const ::safe_browsing::ClientIncidentReport_EnvironmentData* p = environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_EnvironmentData&>(
      ::safe_browsing::_ClientIncidentReport_EnvironmentData_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_EnvironmentData& ClientIncidentReport::environment() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.environment)
  return _internal_environment();
}
inline void ClientIncidentReport::unsafe_arena_set_allocated_environment(
    ::safe_browsing::ClientIncidentReport_EnvironmentData* environment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment_);
  }
  environment_ = environment;
  if (environment) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.environment)
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData* ClientIncidentReport::release_environment() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientIncidentReport_EnvironmentData* temp = environment_;
  environment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData* ClientIncidentReport::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.environment)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ClientIncidentReport_EnvironmentData* temp = environment_;
  environment_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData* ClientIncidentReport::_internal_mutable_environment() {
  _has_bits_[0] |= 0x00000002u;
  if (environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_EnvironmentData>(GetArenaForAllocation());
    environment_ = p;
  }
  return environment_;
}
inline ::safe_browsing::ClientIncidentReport_EnvironmentData* ClientIncidentReport::mutable_environment() {
  ::safe_browsing::ClientIncidentReport_EnvironmentData* _msg = _internal_mutable_environment();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.environment)
  return _msg;
}
inline void ClientIncidentReport::set_allocated_environment(::safe_browsing::ClientIncidentReport_EnvironmentData* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete environment_;
  }
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(environment);
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.environment)
}

// optional .safe_browsing.ChromeUserPopulation population = 7;
inline bool ClientIncidentReport::_internal_has_population() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || population_ != nullptr);
  return value;
}
inline bool ClientIncidentReport::has_population() const {
  return _internal_has_population();
}
inline void ClientIncidentReport::clear_population() {
  if (population_ != nullptr) population_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ChromeUserPopulation& ClientIncidentReport::_internal_population() const {
  const ::safe_browsing::ChromeUserPopulation* p = population_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ChromeUserPopulation&>(
      ::safe_browsing::_ChromeUserPopulation_default_instance_);
}
inline const ::safe_browsing::ChromeUserPopulation& ClientIncidentReport::population() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.population)
  return _internal_population();
}
inline void ClientIncidentReport::unsafe_arena_set_allocated_population(
    ::safe_browsing::ChromeUserPopulation* population) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(population_);
  }
  population_ = population;
  if (population) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.population)
}
inline ::safe_browsing::ChromeUserPopulation* ClientIncidentReport::release_population() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* ClientIncidentReport::unsafe_arena_release_population() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.population)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* ClientIncidentReport::_internal_mutable_population() {
  _has_bits_[0] |= 0x00000004u;
  if (population_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ChromeUserPopulation>(GetArenaForAllocation());
    population_ = p;
  }
  return population_;
}
inline ::safe_browsing::ChromeUserPopulation* ClientIncidentReport::mutable_population() {
  ::safe_browsing::ChromeUserPopulation* _msg = _internal_mutable_population();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.population)
  return _msg;
}
inline void ClientIncidentReport::set_allocated_population(::safe_browsing::ChromeUserPopulation* population) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete population_;
  }
  if (population) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(population);
    if (message_arena != submessage_arena) {
      population = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, population, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  population_ = population;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.population)
}

// optional .safe_browsing.ClientIncidentReport.ExtensionData extension_data = 8;
inline bool ClientIncidentReport::_internal_has_extension_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || extension_data_ != nullptr);
  return value;
}
inline bool ClientIncidentReport::has_extension_data() const {
  return _internal_has_extension_data();
}
inline void ClientIncidentReport::clear_extension_data() {
  if (extension_data_ != nullptr) extension_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::safe_browsing::ClientIncidentReport_ExtensionData& ClientIncidentReport::_internal_extension_data() const {
  const ::safe_browsing::ClientIncidentReport_ExtensionData* p = extension_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_ExtensionData&>(
      ::safe_browsing::_ClientIncidentReport_ExtensionData_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_ExtensionData& ClientIncidentReport::extension_data() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.extension_data)
  return _internal_extension_data();
}
inline void ClientIncidentReport::unsafe_arena_set_allocated_extension_data(
    ::safe_browsing::ClientIncidentReport_ExtensionData* extension_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_data_);
  }
  extension_data_ = extension_data;
  if (extension_data) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.extension_data)
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData* ClientIncidentReport::release_extension_data() {
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientIncidentReport_ExtensionData* temp = extension_data_;
  extension_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData* ClientIncidentReport::unsafe_arena_release_extension_data() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.extension_data)
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientIncidentReport_ExtensionData* temp = extension_data_;
  extension_data_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData* ClientIncidentReport::_internal_mutable_extension_data() {
  _has_bits_[0] |= 0x00000008u;
  if (extension_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_ExtensionData>(GetArenaForAllocation());
    extension_data_ = p;
  }
  return extension_data_;
}
inline ::safe_browsing::ClientIncidentReport_ExtensionData* ClientIncidentReport::mutable_extension_data() {
  ::safe_browsing::ClientIncidentReport_ExtensionData* _msg = _internal_mutable_extension_data();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.extension_data)
  return _msg;
}
inline void ClientIncidentReport::set_allocated_extension_data(::safe_browsing::ClientIncidentReport_ExtensionData* extension_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete extension_data_;
  }
  if (extension_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension_data);
    if (message_arena != submessage_arena) {
      extension_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  extension_data_ = extension_data;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.extension_data)
}

// optional .safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails non_binary_download = 9;
inline bool ClientIncidentReport::_internal_has_non_binary_download() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || non_binary_download_ != nullptr);
  return value;
}
inline bool ClientIncidentReport::has_non_binary_download() const {
  return _internal_has_non_binary_download();
}
inline void ClientIncidentReport::clear_non_binary_download() {
  if (non_binary_download_ != nullptr) non_binary_download_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails& ClientIncidentReport::_internal_non_binary_download() const {
  const ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* p = non_binary_download_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails&>(
      ::safe_browsing::_ClientIncidentReport_NonBinaryDownloadDetails_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails& ClientIncidentReport::non_binary_download() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentReport.non_binary_download)
  return _internal_non_binary_download();
}
inline void ClientIncidentReport::unsafe_arena_set_allocated_non_binary_download(
    ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* non_binary_download) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_binary_download_);
  }
  non_binary_download_ = non_binary_download;
  if (non_binary_download) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientIncidentReport.non_binary_download)
}
inline ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* ClientIncidentReport::release_non_binary_download() {
  _has_bits_[0] &= ~0x00000010u;
  ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* temp = non_binary_download_;
  non_binary_download_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* ClientIncidentReport::unsafe_arena_release_non_binary_download() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentReport.non_binary_download)
  _has_bits_[0] &= ~0x00000010u;
  ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* temp = non_binary_download_;
  non_binary_download_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* ClientIncidentReport::_internal_mutable_non_binary_download() {
  _has_bits_[0] |= 0x00000010u;
  if (non_binary_download_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails>(GetArenaForAllocation());
    non_binary_download_ = p;
  }
  return non_binary_download_;
}
inline ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* ClientIncidentReport::mutable_non_binary_download() {
  ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* _msg = _internal_mutable_non_binary_download();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentReport.non_binary_download)
  return _msg;
}
inline void ClientIncidentReport::set_allocated_non_binary_download(::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails* non_binary_download) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete non_binary_download_;
  }
  if (non_binary_download) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(non_binary_download);
    if (message_arena != submessage_arena) {
      non_binary_download = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_binary_download, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  non_binary_download_ = non_binary_download;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentReport.non_binary_download)
}

// -------------------------------------------------------------------

// ClientIncidentResponse_EnvironmentRequest

// optional int32 dll_index = 1;
inline bool ClientIncidentResponse_EnvironmentRequest::_internal_has_dll_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentResponse_EnvironmentRequest::has_dll_index() const {
  return _internal_has_dll_index();
}
inline void ClientIncidentResponse_EnvironmentRequest::clear_dll_index() {
  dll_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ClientIncidentResponse_EnvironmentRequest::_internal_dll_index() const {
  return dll_index_;
}
inline int32_t ClientIncidentResponse_EnvironmentRequest::dll_index() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentResponse.EnvironmentRequest.dll_index)
  return _internal_dll_index();
}
inline void ClientIncidentResponse_EnvironmentRequest::_internal_set_dll_index(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  dll_index_ = value;
}
inline void ClientIncidentResponse_EnvironmentRequest::set_dll_index(int32_t value) {
  _internal_set_dll_index(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentResponse.EnvironmentRequest.dll_index)
}

// -------------------------------------------------------------------

// ClientIncidentResponse

// optional bytes token = 1;
inline bool ClientIncidentResponse::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientIncidentResponse::has_token() const {
  return _internal_has_token();
}
inline void ClientIncidentResponse::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientIncidentResponse::token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientIncidentResponse::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentResponse.token)
}
inline std::string* ClientIncidentResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentResponse.token)
  return _s;
}
inline const std::string& ClientIncidentResponse::_internal_token() const {
  return token_.Get();
}
inline void ClientIncidentResponse::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientIncidentResponse::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientIncidentResponse::release_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientIncidentResponse.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientIncidentResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientIncidentResponse.token)
}

// optional bool download_requested = 2;
inline bool ClientIncidentResponse::_internal_has_download_requested() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientIncidentResponse::has_download_requested() const {
  return _internal_has_download_requested();
}
inline void ClientIncidentResponse::clear_download_requested() {
  download_requested_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ClientIncidentResponse::_internal_download_requested() const {
  return download_requested_;
}
inline bool ClientIncidentResponse::download_requested() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentResponse.download_requested)
  return _internal_download_requested();
}
inline void ClientIncidentResponse::_internal_set_download_requested(bool value) {
  _has_bits_[0] |= 0x00000002u;
  download_requested_ = value;
}
inline void ClientIncidentResponse::set_download_requested(bool value) {
  _internal_set_download_requested(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientIncidentResponse.download_requested)
}

// repeated .safe_browsing.ClientIncidentResponse.EnvironmentRequest environment_requests = 3;
inline int ClientIncidentResponse::_internal_environment_requests_size() const {
  return environment_requests_.size();
}
inline int ClientIncidentResponse::environment_requests_size() const {
  return _internal_environment_requests_size();
}
inline void ClientIncidentResponse::clear_environment_requests() {
  environment_requests_.Clear();
}
inline ::safe_browsing::ClientIncidentResponse_EnvironmentRequest* ClientIncidentResponse::mutable_environment_requests(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientIncidentResponse.environment_requests)
  return environment_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentResponse_EnvironmentRequest >*
ClientIncidentResponse::mutable_environment_requests() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientIncidentResponse.environment_requests)
  return &environment_requests_;
}
inline const ::safe_browsing::ClientIncidentResponse_EnvironmentRequest& ClientIncidentResponse::_internal_environment_requests(int index) const {
  return environment_requests_.Get(index);
}
inline const ::safe_browsing::ClientIncidentResponse_EnvironmentRequest& ClientIncidentResponse::environment_requests(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientIncidentResponse.environment_requests)
  return _internal_environment_requests(index);
}
inline ::safe_browsing::ClientIncidentResponse_EnvironmentRequest* ClientIncidentResponse::_internal_add_environment_requests() {
  return environment_requests_.Add();
}
inline ::safe_browsing::ClientIncidentResponse_EnvironmentRequest* ClientIncidentResponse::add_environment_requests() {
  ::safe_browsing::ClientIncidentResponse_EnvironmentRequest* _add = _internal_add_environment_requests();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientIncidentResponse.environment_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientIncidentResponse_EnvironmentRequest >&
ClientIncidentResponse::environment_requests() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientIncidentResponse.environment_requests)
  return environment_requests_;
}

// -------------------------------------------------------------------

// DownloadMetadata

// optional uint32 download_id = 1;
inline bool DownloadMetadata::_internal_has_download_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DownloadMetadata::has_download_id() const {
  return _internal_has_download_id();
}
inline void DownloadMetadata::clear_download_id() {
  download_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DownloadMetadata::_internal_download_id() const {
  return download_id_;
}
inline uint32_t DownloadMetadata::download_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadMetadata.download_id)
  return _internal_download_id();
}
inline void DownloadMetadata::_internal_set_download_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  download_id_ = value;
}
inline void DownloadMetadata::set_download_id(uint32_t value) {
  _internal_set_download_id(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DownloadMetadata.download_id)
}

// optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
inline bool DownloadMetadata::_internal_has_download() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || download_ != nullptr);
  return value;
}
inline bool DownloadMetadata::has_download() const {
  return _internal_has_download();
}
inline void DownloadMetadata::clear_download() {
  if (download_ != nullptr) download_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ClientIncidentReport_DownloadDetails& DownloadMetadata::_internal_download() const {
  const ::safe_browsing::ClientIncidentReport_DownloadDetails* p = download_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientIncidentReport_DownloadDetails&>(
      ::safe_browsing::_ClientIncidentReport_DownloadDetails_default_instance_);
}
inline const ::safe_browsing::ClientIncidentReport_DownloadDetails& DownloadMetadata::download() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DownloadMetadata.download)
  return _internal_download();
}
inline void DownloadMetadata::unsafe_arena_set_allocated_download(
    ::safe_browsing::ClientIncidentReport_DownloadDetails* download) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_);
  }
  download_ = download;
  if (download) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.DownloadMetadata.download)
}
inline ::safe_browsing::ClientIncidentReport_DownloadDetails* DownloadMetadata::release_download() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_DownloadDetails* temp = download_;
  download_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_DownloadDetails* DownloadMetadata::unsafe_arena_release_download() {
  // @@protoc_insertion_point(field_release:safe_browsing.DownloadMetadata.download)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ClientIncidentReport_DownloadDetails* temp = download_;
  download_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientIncidentReport_DownloadDetails* DownloadMetadata::_internal_mutable_download() {
  _has_bits_[0] |= 0x00000001u;
  if (download_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientIncidentReport_DownloadDetails>(GetArenaForAllocation());
    download_ = p;
  }
  return download_;
}
inline ::safe_browsing::ClientIncidentReport_DownloadDetails* DownloadMetadata::mutable_download() {
  ::safe_browsing::ClientIncidentReport_DownloadDetails* _msg = _internal_mutable_download();
  // @@protoc_insertion_point(field_mutable:safe_browsing.DownloadMetadata.download)
  return _msg;
}
inline void DownloadMetadata::set_allocated_download(::safe_browsing::ClientIncidentReport_DownloadDetails* download) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete download_;
  }
  if (download) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(download);
    if (message_arena != submessage_arena) {
      download = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  download_ = download;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DownloadMetadata.download)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_HTTPHeader

// required bytes name = 1;
inline bool ClientSafeBrowsingReportRequest_HTTPHeader::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPHeader::has_name() const {
  return _internal_has_name();
}
inline void ClientSafeBrowsingReportRequest_HTTPHeader::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPHeader::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPHeader::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.name)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPHeader::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.name)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPHeader::_internal_name() const {
  return name_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPHeader::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPHeader::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPHeader::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPHeader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.name)
}

// optional bytes value = 2;
inline bool ClientSafeBrowsingReportRequest_HTTPHeader::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPHeader::has_value() const {
  return _internal_has_value();
}
inline void ClientSafeBrowsingReportRequest_HTTPHeader::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPHeader::value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPHeader::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.value)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPHeader::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.value)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPHeader::_internal_value() const {
  return value_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPHeader::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPHeader::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPHeader::release_value() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPHeader::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader.value)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine

// optional bytes verb = 1;
inline bool ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_has_verb() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::has_verb() const {
  return _internal_has_verb();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::clear_verb() {
  verb_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::verb() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.verb)
  return _internal_verb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::set_verb(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 verb_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.verb)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::mutable_verb() {
  std::string* _s = _internal_mutable_verb();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.verb)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_verb() const {
  return verb_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_set_verb(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  verb_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_mutable_verb() {
  _has_bits_[0] |= 0x00000001u;
  return verb_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::release_verb() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.verb)
  if (!_internal_has_verb()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = verb_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verb_.IsDefault()) {
    verb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::set_allocated_verb(std::string* verb) {
  if (verb != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verb_.SetAllocated(verb, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (verb_.IsDefault()) {
    verb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.verb)
}

// optional bytes uri = 2;
inline bool ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::has_uri() const {
  return _internal_has_uri();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::clear_uri() {
  uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::uri() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::set_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 uri_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.uri)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.uri)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_uri() const {
  return uri_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000002u;
  return uri_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::release_uri() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.uri)
}

// optional bytes version = 3;
inline bool ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::has_version() const {
  return _internal_has_version();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 version_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.version)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.version)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_version() const {
  return version_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000004u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::release_version() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine.version)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_HTTPRequest

// optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine firstline = 1;
inline bool ClientSafeBrowsingReportRequest_HTTPRequest::_internal_has_firstline() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || firstline_ != nullptr);
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPRequest::has_firstline() const {
  return _internal_has_firstline();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::clear_firstline() {
  if (firstline_ != nullptr) firstline_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& ClientSafeBrowsingReportRequest_HTTPRequest::_internal_firstline() const {
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* p = firstline_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine&>(
      ::safe_browsing::_ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine_default_instance_);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& ClientSafeBrowsingReportRequest_HTTPRequest::firstline() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.firstline)
  return _internal_firstline();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::unsafe_arena_set_allocated_firstline(
    ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* firstline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(firstline_);
  }
  firstline_ = firstline;
  if (firstline) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.firstline)
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* ClientSafeBrowsingReportRequest_HTTPRequest::release_firstline() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* temp = firstline_;
  firstline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* ClientSafeBrowsingReportRequest_HTTPRequest::unsafe_arena_release_firstline() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.firstline)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* temp = firstline_;
  firstline_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* ClientSafeBrowsingReportRequest_HTTPRequest::_internal_mutable_firstline() {
  _has_bits_[0] |= 0x00000004u;
  if (firstline_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine>(GetArenaForAllocation());
    firstline_ = p;
  }
  return firstline_;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* ClientSafeBrowsingReportRequest_HTTPRequest::mutable_firstline() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* _msg = _internal_mutable_firstline();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.firstline)
  return _msg;
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::set_allocated_firstline(::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* firstline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete firstline_;
  }
  if (firstline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(firstline);
    if (message_arena != submessage_arena) {
      firstline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firstline, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  firstline_ = firstline;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.firstline)
}

// repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
inline int ClientSafeBrowsingReportRequest_HTTPRequest::_internal_headers_size() const {
  return headers_.size();
}
inline int ClientSafeBrowsingReportRequest_HTTPRequest::headers_size() const {
  return _internal_headers_size();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::clear_headers() {
  headers_.Clear();
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* ClientSafeBrowsingReportRequest_HTTPRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >*
ClientSafeBrowsingReportRequest_HTTPRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.headers)
  return &headers_;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader& ClientSafeBrowsingReportRequest_HTTPRequest::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader& ClientSafeBrowsingReportRequest_HTTPRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.headers)
  return _internal_headers(index);
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* ClientSafeBrowsingReportRequest_HTTPRequest::_internal_add_headers() {
  return headers_.Add();
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* ClientSafeBrowsingReportRequest_HTTPRequest::add_headers() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >&
ClientSafeBrowsingReportRequest_HTTPRequest::headers() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.headers)
  return headers_;
}

// optional bytes body = 3;
inline bool ClientSafeBrowsingReportRequest_HTTPRequest::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPRequest::has_body() const {
  return _internal_has_body();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::clear_body() {
  body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest::body() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPRequest::set_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.body)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.body)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest::_internal_body() const {
  return body_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  return body_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest::release_body() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.body)
}

// optional bytes bodydigest = 4;
inline bool ClientSafeBrowsingReportRequest_HTTPRequest::_internal_has_bodydigest() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPRequest::has_bodydigest() const {
  return _internal_has_bodydigest();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::clear_bodydigest() {
  bodydigest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest::bodydigest() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.bodydigest)
  return _internal_bodydigest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPRequest::set_bodydigest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 bodydigest_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.bodydigest)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest::mutable_bodydigest() {
  std::string* _s = _internal_mutable_bodydigest();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.bodydigest)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPRequest::_internal_bodydigest() const {
  return bodydigest_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::_internal_set_bodydigest(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bodydigest_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest::_internal_mutable_bodydigest() {
  _has_bits_[0] |= 0x00000002u;
  return bodydigest_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPRequest::release_bodydigest() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.bodydigest)
  if (!_internal_has_bodydigest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = bodydigest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bodydigest_.IsDefault()) {
    bodydigest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::set_allocated_bodydigest(std::string* bodydigest) {
  if (bodydigest != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bodydigest_.SetAllocated(bodydigest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bodydigest_.IsDefault()) {
    bodydigest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.bodydigest)
}

// optional int32 bodylength = 5;
inline bool ClientSafeBrowsingReportRequest_HTTPRequest::_internal_has_bodylength() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPRequest::has_bodylength() const {
  return _internal_has_bodylength();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::clear_bodylength() {
  bodylength_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t ClientSafeBrowsingReportRequest_HTTPRequest::_internal_bodylength() const {
  return bodylength_;
}
inline int32_t ClientSafeBrowsingReportRequest_HTTPRequest::bodylength() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.bodylength)
  return _internal_bodylength();
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::_internal_set_bodylength(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  bodylength_ = value;
}
inline void ClientSafeBrowsingReportRequest_HTTPRequest::set_bodylength(int32_t value) {
  _internal_set_bodylength(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.bodylength)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine

// optional int32 code = 1;
inline bool ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::has_code() const {
  return _internal_has_code();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_code() const {
  return code_;
}
inline int32_t ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::code() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.code)
  return _internal_code();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_set_code(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  code_ = value;
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.code)
}

// optional bytes message = 2;
inline bool ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::has_message() const {
  return _internal_has_message();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::message() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.message)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.message)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_message() const {
  return message_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::release_message() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.message)
}

// optional bytes version = 3;
inline bool ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::has_version() const {
  return _internal_has_version();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.version)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.version)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_version() const {
  return version_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::release_version() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine.version)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_HTTPResponse

// optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine firstline = 1;
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::_internal_has_firstline() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || firstline_ != nullptr);
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::has_firstline() const {
  return _internal_has_firstline();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::clear_firstline() {
  if (firstline_ != nullptr) firstline_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& ClientSafeBrowsingReportRequest_HTTPResponse::_internal_firstline() const {
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* p = firstline_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine&>(
      ::safe_browsing::_ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine_default_instance_);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& ClientSafeBrowsingReportRequest_HTTPResponse::firstline() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.firstline)
  return _internal_firstline();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::unsafe_arena_set_allocated_firstline(
    ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* firstline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(firstline_);
  }
  firstline_ = firstline;
  if (firstline) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.firstline)
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* ClientSafeBrowsingReportRequest_HTTPResponse::release_firstline() {
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* temp = firstline_;
  firstline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* ClientSafeBrowsingReportRequest_HTTPResponse::unsafe_arena_release_firstline() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.firstline)
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* temp = firstline_;
  firstline_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* ClientSafeBrowsingReportRequest_HTTPResponse::_internal_mutable_firstline() {
  _has_bits_[0] |= 0x00000008u;
  if (firstline_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine>(GetArenaForAllocation());
    firstline_ = p;
  }
  return firstline_;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* ClientSafeBrowsingReportRequest_HTTPResponse::mutable_firstline() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* _msg = _internal_mutable_firstline();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.firstline)
  return _msg;
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::set_allocated_firstline(::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* firstline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete firstline_;
  }
  if (firstline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(firstline);
    if (message_arena != submessage_arena) {
      firstline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firstline, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  firstline_ = firstline;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.firstline)
}

// repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
inline int ClientSafeBrowsingReportRequest_HTTPResponse::_internal_headers_size() const {
  return headers_.size();
}
inline int ClientSafeBrowsingReportRequest_HTTPResponse::headers_size() const {
  return _internal_headers_size();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::clear_headers() {
  headers_.Clear();
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* ClientSafeBrowsingReportRequest_HTTPResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >*
ClientSafeBrowsingReportRequest_HTTPResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.headers)
  return &headers_;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader& ClientSafeBrowsingReportRequest_HTTPResponse::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader& ClientSafeBrowsingReportRequest_HTTPResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.headers)
  return _internal_headers(index);
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* ClientSafeBrowsingReportRequest_HTTPResponse::_internal_add_headers() {
  return headers_.Add();
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* ClientSafeBrowsingReportRequest_HTTPResponse::add_headers() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >&
ClientSafeBrowsingReportRequest_HTTPResponse::headers() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.headers)
  return headers_;
}

// optional bytes body = 3;
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::has_body() const {
  return _internal_has_body();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::clear_body() {
  body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse::body() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPResponse::set_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.body)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.body)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse::_internal_body() const {
  return body_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  return body_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::release_body() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.body)
}

// optional bytes bodydigest = 4;
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::_internal_has_bodydigest() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::has_bodydigest() const {
  return _internal_has_bodydigest();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::clear_bodydigest() {
  bodydigest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse::bodydigest() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.bodydigest)
  return _internal_bodydigest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPResponse::set_bodydigest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 bodydigest_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.bodydigest)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::mutable_bodydigest() {
  std::string* _s = _internal_mutable_bodydigest();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.bodydigest)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse::_internal_bodydigest() const {
  return bodydigest_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::_internal_set_bodydigest(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bodydigest_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::_internal_mutable_bodydigest() {
  _has_bits_[0] |= 0x00000002u;
  return bodydigest_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::release_bodydigest() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.bodydigest)
  if (!_internal_has_bodydigest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = bodydigest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bodydigest_.IsDefault()) {
    bodydigest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::set_allocated_bodydigest(std::string* bodydigest) {
  if (bodydigest != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bodydigest_.SetAllocated(bodydigest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bodydigest_.IsDefault()) {
    bodydigest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.bodydigest)
}

// optional int32 bodylength = 5;
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::_internal_has_bodylength() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::has_bodylength() const {
  return _internal_has_bodylength();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::clear_bodylength() {
  bodylength_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t ClientSafeBrowsingReportRequest_HTTPResponse::_internal_bodylength() const {
  return bodylength_;
}
inline int32_t ClientSafeBrowsingReportRequest_HTTPResponse::bodylength() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.bodylength)
  return _internal_bodylength();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::_internal_set_bodylength(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  bodylength_ = value;
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::set_bodylength(int32_t value) {
  _internal_set_bodylength(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.bodylength)
}

// optional bytes remote_ip = 6;
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::_internal_has_remote_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_HTTPResponse::has_remote_ip() const {
  return _internal_has_remote_ip();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::clear_remote_ip() {
  remote_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse::remote_ip() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.remote_ip)
  return _internal_remote_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_HTTPResponse::set_remote_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 remote_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.remote_ip)
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::mutable_remote_ip() {
  std::string* _s = _internal_mutable_remote_ip();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.remote_ip)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_HTTPResponse::_internal_remote_ip() const {
  return remote_ip_.Get();
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::_internal_set_remote_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  remote_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::_internal_mutable_remote_ip() {
  _has_bits_[0] |= 0x00000004u;
  return remote_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_HTTPResponse::release_remote_ip() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.remote_ip)
  if (!_internal_has_remote_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = remote_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_ip_.IsDefault()) {
    remote_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_HTTPResponse::set_allocated_remote_ip(std::string* remote_ip) {
  if (remote_ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  remote_ip_.SetAllocated(remote_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_ip_.IsDefault()) {
    remote_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.remote_ip)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_Resource

// required int32 id = 1;
inline bool ClientSafeBrowsingReportRequest_Resource::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_Resource::has_id() const {
  return _internal_has_id();
}
inline void ClientSafeBrowsingReportRequest_Resource::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t ClientSafeBrowsingReportRequest_Resource::_internal_id() const {
  return id_;
}
inline int32_t ClientSafeBrowsingReportRequest_Resource::id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.Resource.id)
  return _internal_id();
}
inline void ClientSafeBrowsingReportRequest_Resource::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void ClientSafeBrowsingReportRequest_Resource::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.Resource.id)
}

// optional string url = 2;
inline bool ClientSafeBrowsingReportRequest_Resource::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_Resource::has_url() const {
  return _internal_has_url();
}
inline void ClientSafeBrowsingReportRequest_Resource::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_Resource::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.Resource.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_Resource::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.Resource.url)
}
inline std::string* ClientSafeBrowsingReportRequest_Resource::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.Resource.url)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_Resource::_internal_url() const {
  return url_.Get();
}
inline void ClientSafeBrowsingReportRequest_Resource::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_Resource::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_Resource::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.Resource.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_Resource::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.Resource.url)
}

// optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest request = 3;
inline bool ClientSafeBrowsingReportRequest_Resource::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || request_ != nullptr);
  return value;
}
inline bool ClientSafeBrowsingReportRequest_Resource::has_request() const {
  return _internal_has_request();
}
inline void ClientSafeBrowsingReportRequest_Resource::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest& ClientSafeBrowsingReportRequest_Resource::_internal_request() const {
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest&>(
      ::safe_browsing::_ClientSafeBrowsingReportRequest_HTTPRequest_default_instance_);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest& ClientSafeBrowsingReportRequest_Resource::request() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.Resource.request)
  return _internal_request();
}
inline void ClientSafeBrowsingReportRequest_Resource::unsafe_arena_set_allocated_request(
    ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.Resource.request)
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* ClientSafeBrowsingReportRequest_Resource::release_request() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* temp = request_;
  request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* ClientSafeBrowsingReportRequest_Resource::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.Resource.request)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* ClientSafeBrowsingReportRequest_Resource::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000004u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest>(GetArenaForAllocation());
    request_ = p;
  }
  return request_;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* ClientSafeBrowsingReportRequest_Resource::mutable_request() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.Resource.request)
  return _msg;
}
inline void ClientSafeBrowsingReportRequest_Resource::set_allocated_request(::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.Resource.request)
}

// optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse response = 4;
inline bool ClientSafeBrowsingReportRequest_Resource::_internal_has_response() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || response_ != nullptr);
  return value;
}
inline bool ClientSafeBrowsingReportRequest_Resource::has_response() const {
  return _internal_has_response();
}
inline void ClientSafeBrowsingReportRequest_Resource::clear_response() {
  if (response_ != nullptr) response_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse& ClientSafeBrowsingReportRequest_Resource::_internal_response() const {
  const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse&>(
      ::safe_browsing::_ClientSafeBrowsingReportRequest_HTTPResponse_default_instance_);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse& ClientSafeBrowsingReportRequest_Resource::response() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.Resource.response)
  return _internal_response();
}
inline void ClientSafeBrowsingReportRequest_Resource::unsafe_arena_set_allocated_response(
    ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.Resource.response)
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* ClientSafeBrowsingReportRequest_Resource::release_response() {
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* ClientSafeBrowsingReportRequest_Resource::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.Resource.response)
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* ClientSafeBrowsingReportRequest_Resource::_internal_mutable_response() {
  _has_bits_[0] |= 0x00000008u;
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* ClientSafeBrowsingReportRequest_Resource::mutable_response() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.Resource.response)
  return _msg;
}
inline void ClientSafeBrowsingReportRequest_Resource::set_allocated_response(::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.Resource.response)
}

// optional int32 parent_id = 5;
inline bool ClientSafeBrowsingReportRequest_Resource::_internal_has_parent_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_Resource::has_parent_id() const {
  return _internal_has_parent_id();
}
inline void ClientSafeBrowsingReportRequest_Resource::clear_parent_id() {
  parent_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t ClientSafeBrowsingReportRequest_Resource::_internal_parent_id() const {
  return parent_id_;
}
inline int32_t ClientSafeBrowsingReportRequest_Resource::parent_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.Resource.parent_id)
  return _internal_parent_id();
}
inline void ClientSafeBrowsingReportRequest_Resource::_internal_set_parent_id(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  parent_id_ = value;
}
inline void ClientSafeBrowsingReportRequest_Resource::set_parent_id(int32_t value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.Resource.parent_id)
}

// repeated int32 child_ids = 6;
inline int ClientSafeBrowsingReportRequest_Resource::_internal_child_ids_size() const {
  return child_ids_.size();
}
inline int ClientSafeBrowsingReportRequest_Resource::child_ids_size() const {
  return _internal_child_ids_size();
}
inline void ClientSafeBrowsingReportRequest_Resource::clear_child_ids() {
  child_ids_.Clear();
}
inline int32_t ClientSafeBrowsingReportRequest_Resource::_internal_child_ids(int index) const {
  return child_ids_.Get(index);
}
inline int32_t ClientSafeBrowsingReportRequest_Resource::child_ids(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.Resource.child_ids)
  return _internal_child_ids(index);
}
inline void ClientSafeBrowsingReportRequest_Resource::set_child_ids(int index, int32_t value) {
  child_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.Resource.child_ids)
}
inline void ClientSafeBrowsingReportRequest_Resource::_internal_add_child_ids(int32_t value) {
  child_ids_.Add(value);
}
inline void ClientSafeBrowsingReportRequest_Resource::add_child_ids(int32_t value) {
  _internal_add_child_ids(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSafeBrowsingReportRequest.Resource.child_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClientSafeBrowsingReportRequest_Resource::_internal_child_ids() const {
  return child_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ClientSafeBrowsingReportRequest_Resource::child_ids() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSafeBrowsingReportRequest.Resource.child_ids)
  return _internal_child_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClientSafeBrowsingReportRequest_Resource::_internal_mutable_child_ids() {
  return &child_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ClientSafeBrowsingReportRequest_Resource::mutable_child_ids() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSafeBrowsingReportRequest.Resource.child_ids)
  return _internal_mutable_child_ids();
}

// optional string tag_name = 7;
inline bool ClientSafeBrowsingReportRequest_Resource::_internal_has_tag_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_Resource::has_tag_name() const {
  return _internal_has_tag_name();
}
inline void ClientSafeBrowsingReportRequest_Resource::clear_tag_name() {
  tag_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientSafeBrowsingReportRequest_Resource::tag_name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.Resource.tag_name)
  return _internal_tag_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_Resource::set_tag_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tag_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.Resource.tag_name)
}
inline std::string* ClientSafeBrowsingReportRequest_Resource::mutable_tag_name() {
  std::string* _s = _internal_mutable_tag_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.Resource.tag_name)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_Resource::_internal_tag_name() const {
  return tag_name_.Get();
}
inline void ClientSafeBrowsingReportRequest_Resource::_internal_set_tag_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_Resource::_internal_mutable_tag_name() {
  _has_bits_[0] |= 0x00000002u;
  return tag_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_Resource::release_tag_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.Resource.tag_name)
  if (!_internal_has_tag_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = tag_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_name_.IsDefault()) {
    tag_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_Resource::set_allocated_tag_name(std::string* tag_name) {
  if (tag_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tag_name_.SetAllocated(tag_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_name_.IsDefault()) {
    tag_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.Resource.tag_name)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties

// optional string client_version = 1;
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::has_client_version() const {
  return _internal_has_client_version();
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::clear_client_version() {
  client_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::client_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.client_version)
  return _internal_client_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::set_client_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 client_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.client_version)
}
inline std::string* ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::mutable_client_version() {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.client_version)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_client_version() const {
  return client_version_.Get();
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_set_client_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_mutable_client_version() {
  _has_bits_[0] |= 0x00000001u;
  return client_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::release_client_version() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.client_version)
  if (!_internal_has_client_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = client_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_version_.IsDefault()) {
    client_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::set_allocated_client_version(std::string* client_version) {
  if (client_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_version_.SetAllocated(client_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_version_.IsDefault()) {
    client_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.client_version)
}

// optional int64 google_play_services_version = 2;
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_has_google_play_services_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::has_google_play_services_version() const {
  return _internal_has_google_play_services_version();
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::clear_google_play_services_version() {
  google_play_services_version_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_google_play_services_version() const {
  return google_play_services_version_;
}
inline int64_t ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::google_play_services_version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.google_play_services_version)
  return _internal_google_play_services_version();
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_set_google_play_services_version(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  google_play_services_version_ = value;
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::set_google_play_services_version(int64_t value) {
  _internal_set_google_play_services_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.google_play_services_version)
}

// optional bool is_instant_apps = 3;
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_has_is_instant_apps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::has_is_instant_apps() const {
  return _internal_has_is_instant_apps();
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::clear_is_instant_apps() {
  is_instant_apps_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_is_instant_apps() const {
  return is_instant_apps_;
}
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::is_instant_apps() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.is_instant_apps)
  return _internal_is_instant_apps();
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_set_is_instant_apps(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_instant_apps_ = value;
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::set_is_instant_apps(bool value) {
  _internal_set_is_instant_apps(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.is_instant_apps)
}

// optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingUrlApiType url_api_type = 4;
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_has_url_api_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::has_url_api_type() const {
  return _internal_has_url_api_type();
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::clear_url_api_type() {
  url_api_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_url_api_type() const {
  return static_cast< ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType >(url_api_type_);
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::url_api_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.url_api_type)
  return _internal_url_api_type();
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_internal_set_url_api_type(::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType value) {
  assert(::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  url_api_type_ = value;
}
inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::set_url_api_type(::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType value) {
  _internal_set_url_api_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties.url_api_type)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests

// optional bytes sha256 = 1;
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::_internal_has_sha256() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::has_sha256() const {
  return _internal_has_sha256();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::clear_sha256() {
  sha256_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::sha256() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests.sha256)
  return _internal_sha256();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::set_sha256(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha256_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests.sha256)
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::mutable_sha256() {
  std::string* _s = _internal_mutable_sha256();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests.sha256)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::_internal_sha256() const {
  return sha256_.Get();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::_internal_set_sha256(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha256_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::_internal_mutable_sha256() {
  _has_bits_[0] |= 0x00000001u;
  return sha256_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::release_sha256() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests.sha256)
  if (!_internal_has_sha256()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha256_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha256_.IsDefault()) {
    sha256_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::set_allocated_sha256(std::string* sha256) {
  if (sha256 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha256_.SetAllocated(sha256, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha256_.IsDefault()) {
    sha256_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests.sha256)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest_DownloadItemInfo

// optional string url = 1;
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo::has_url() const {
  return _internal_has_url();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest_DownloadItemInfo::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_DownloadItemInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.url)
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.url)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_url() const {
  return url_.Get();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.url)
}

// optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests digests = 2;
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_has_digests() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || digests_ != nullptr);
  return value;
}
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo::has_digests() const {
  return _internal_has_digests();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::clear_digests() {
  if (digests_ != nullptr) digests_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_digests() const {
  const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* p = digests_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests&>(
      ::safe_browsing::_ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests_default_instance_);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& ClientSafeBrowsingReportRequest_DownloadItemInfo::digests() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.digests)
  return _internal_digests();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::unsafe_arena_set_allocated_digests(
    ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* digests) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digests_);
  }
  digests_ = digests;
  if (digests) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.digests)
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* ClientSafeBrowsingReportRequest_DownloadItemInfo::release_digests() {
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* temp = digests_;
  digests_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* ClientSafeBrowsingReportRequest_DownloadItemInfo::unsafe_arena_release_digests() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.digests)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* temp = digests_;
  digests_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_mutable_digests() {
  _has_bits_[0] |= 0x00000004u;
  if (digests_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests>(GetArenaForAllocation());
    digests_ = p;
  }
  return digests_;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* ClientSafeBrowsingReportRequest_DownloadItemInfo::mutable_digests() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* _msg = _internal_mutable_digests();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.digests)
  return _msg;
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::set_allocated_digests(::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* digests) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete digests_;
  }
  if (digests) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(digests);
    if (message_arena != submessage_arena) {
      digests = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digests, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  digests_ = digests;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.digests)
}

// optional int64 length = 3;
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo::has_length() const {
  return _internal_has_length();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::clear_length() {
  length_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_length() const {
  return length_;
}
inline int64_t ClientSafeBrowsingReportRequest_DownloadItemInfo::length() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.length)
  return _internal_length();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_set_length(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  length_ = value;
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::set_length(int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.length)
}

// optional string file_basename = 4;
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_has_file_basename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest_DownloadItemInfo::has_file_basename() const {
  return _internal_has_file_basename();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::clear_file_basename() {
  file_basename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientSafeBrowsingReportRequest_DownloadItemInfo::file_basename() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.file_basename)
  return _internal_file_basename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest_DownloadItemInfo::set_file_basename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_basename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.file_basename)
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo::mutable_file_basename() {
  std::string* _s = _internal_mutable_file_basename();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.file_basename)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_file_basename() const {
  return file_basename_.Get();
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_set_file_basename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_basename_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo::_internal_mutable_file_basename() {
  _has_bits_[0] |= 0x00000002u;
  return file_basename_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest_DownloadItemInfo::release_file_basename() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.file_basename)
  if (!_internal_has_file_basename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_basename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_basename_.IsDefault()) {
    file_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::set_allocated_file_basename(std::string* file_basename) {
  if (file_basename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_basename_.SetAllocated(file_basename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_basename_.IsDefault()) {
    file_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.file_basename)
}

// -------------------------------------------------------------------

// ClientSafeBrowsingReportRequest

// optional .safe_browsing.ClientSafeBrowsingReportRequest.ReportType type = 10;
inline bool ClientSafeBrowsingReportRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_type() const {
  return _internal_has_type();
}
inline void ClientSafeBrowsingReportRequest::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::_internal_type() const {
  return static_cast< ::safe_browsing::ClientSafeBrowsingReportRequest_ReportType >(type_);
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.type)
  return _internal_type();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_type(::safe_browsing::ClientSafeBrowsingReportRequest_ReportType value) {
  assert(::safe_browsing::ClientSafeBrowsingReportRequest_ReportType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void ClientSafeBrowsingReportRequest::set_type(::safe_browsing::ClientSafeBrowsingReportRequest_ReportType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.type)
}

// optional .safe_browsing.ClientDownloadResponse.Verdict download_verdict = 11;
inline bool ClientSafeBrowsingReportRequest::_internal_has_download_verdict() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_download_verdict() const {
  return _internal_has_download_verdict();
}
inline void ClientSafeBrowsingReportRequest::clear_download_verdict() {
  download_verdict_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::safe_browsing::ClientDownloadResponse_Verdict ClientSafeBrowsingReportRequest::_internal_download_verdict() const {
  return static_cast< ::safe_browsing::ClientDownloadResponse_Verdict >(download_verdict_);
}
inline ::safe_browsing::ClientDownloadResponse_Verdict ClientSafeBrowsingReportRequest::download_verdict() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.download_verdict)
  return _internal_download_verdict();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_download_verdict(::safe_browsing::ClientDownloadResponse_Verdict value) {
  assert(::safe_browsing::ClientDownloadResponse_Verdict_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  download_verdict_ = value;
}
inline void ClientSafeBrowsingReportRequest::set_download_verdict(::safe_browsing::ClientDownloadResponse_Verdict value) {
  _internal_set_download_verdict(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.download_verdict)
}

// optional string url = 1;
inline bool ClientSafeBrowsingReportRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_url() const {
  return _internal_has_url();
}
inline void ClientSafeBrowsingReportRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSafeBrowsingReportRequest::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.url)
}
inline std::string* ClientSafeBrowsingReportRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.url)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest::_internal_url() const {
  return url_.Get();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.url)
}

// optional string page_url = 2;
inline bool ClientSafeBrowsingReportRequest::_internal_has_page_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_page_url() const {
  return _internal_has_page_url();
}
inline void ClientSafeBrowsingReportRequest::clear_page_url() {
  page_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientSafeBrowsingReportRequest::page_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.page_url)
  return _internal_page_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest::set_page_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 page_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.page_url)
}
inline std::string* ClientSafeBrowsingReportRequest::mutable_page_url() {
  std::string* _s = _internal_mutable_page_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.page_url)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest::_internal_page_url() const {
  return page_url_.Get();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_page_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  page_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::_internal_mutable_page_url() {
  _has_bits_[0] |= 0x00000002u;
  return page_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::release_page_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.page_url)
  if (!_internal_has_page_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = page_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_url_.IsDefault()) {
    page_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_page_url(std::string* page_url) {
  if (page_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  page_url_.SetAllocated(page_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_url_.IsDefault()) {
    page_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.page_url)
}

// optional string referrer_url = 3;
inline bool ClientSafeBrowsingReportRequest::_internal_has_referrer_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_referrer_url() const {
  return _internal_has_referrer_url();
}
inline void ClientSafeBrowsingReportRequest::clear_referrer_url() {
  referrer_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientSafeBrowsingReportRequest::referrer_url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.referrer_url)
  return _internal_referrer_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest::set_referrer_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 referrer_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.referrer_url)
}
inline std::string* ClientSafeBrowsingReportRequest::mutable_referrer_url() {
  std::string* _s = _internal_mutable_referrer_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.referrer_url)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest::_internal_referrer_url() const {
  return referrer_url_.Get();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_referrer_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  referrer_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::_internal_mutable_referrer_url() {
  _has_bits_[0] |= 0x00000004u;
  return referrer_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::release_referrer_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.referrer_url)
  if (!_internal_has_referrer_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = referrer_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_url_.IsDefault()) {
    referrer_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_referrer_url(std::string* referrer_url) {
  if (referrer_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  referrer_url_.SetAllocated(referrer_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_url_.IsDefault()) {
    referrer_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.referrer_url)
}

// repeated .safe_browsing.ClientSafeBrowsingReportRequest.Resource resources = 4;
inline int ClientSafeBrowsingReportRequest::_internal_resources_size() const {
  return resources_.size();
}
inline int ClientSafeBrowsingReportRequest::resources_size() const {
  return _internal_resources_size();
}
inline void ClientSafeBrowsingReportRequest::clear_resources() {
  resources_.Clear();
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_Resource* ClientSafeBrowsingReportRequest::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.resources)
  return resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_Resource >*
ClientSafeBrowsingReportRequest::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSafeBrowsingReportRequest.resources)
  return &resources_;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_Resource& ClientSafeBrowsingReportRequest::_internal_resources(int index) const {
  return resources_.Get(index);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_Resource& ClientSafeBrowsingReportRequest::resources(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.resources)
  return _internal_resources(index);
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_Resource* ClientSafeBrowsingReportRequest::_internal_add_resources() {
  return resources_.Add();
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_Resource* ClientSafeBrowsingReportRequest::add_resources() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_Resource* _add = _internal_add_resources();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSafeBrowsingReportRequest.resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSafeBrowsingReportRequest_Resource >&
ClientSafeBrowsingReportRequest::resources() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSafeBrowsingReportRequest.resources)
  return resources_;
}

// repeated .safe_browsing.HTMLElement dom = 16;
inline int ClientSafeBrowsingReportRequest::_internal_dom_size() const {
  return dom_.size();
}
inline int ClientSafeBrowsingReportRequest::dom_size() const {
  return _internal_dom_size();
}
inline void ClientSafeBrowsingReportRequest::clear_dom() {
  dom_.Clear();
}
inline ::safe_browsing::HTMLElement* ClientSafeBrowsingReportRequest::mutable_dom(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.dom)
  return dom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement >*
ClientSafeBrowsingReportRequest::mutable_dom() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSafeBrowsingReportRequest.dom)
  return &dom_;
}
inline const ::safe_browsing::HTMLElement& ClientSafeBrowsingReportRequest::_internal_dom(int index) const {
  return dom_.Get(index);
}
inline const ::safe_browsing::HTMLElement& ClientSafeBrowsingReportRequest::dom(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.dom)
  return _internal_dom(index);
}
inline ::safe_browsing::HTMLElement* ClientSafeBrowsingReportRequest::_internal_add_dom() {
  return dom_.Add();
}
inline ::safe_browsing::HTMLElement* ClientSafeBrowsingReportRequest::add_dom() {
  ::safe_browsing::HTMLElement* _add = _internal_add_dom();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSafeBrowsingReportRequest.dom)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement >&
ClientSafeBrowsingReportRequest::dom() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSafeBrowsingReportRequest.dom)
  return dom_;
}

// optional bool complete = 5;
inline bool ClientSafeBrowsingReportRequest::_internal_has_complete() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_complete() const {
  return _internal_has_complete();
}
inline void ClientSafeBrowsingReportRequest::clear_complete() {
  complete_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ClientSafeBrowsingReportRequest::_internal_complete() const {
  return complete_;
}
inline bool ClientSafeBrowsingReportRequest::complete() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.complete)
  return _internal_complete();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_complete(bool value) {
  _has_bits_[0] |= 0x00000400u;
  complete_ = value;
}
inline void ClientSafeBrowsingReportRequest::set_complete(bool value) {
  _internal_set_complete(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.complete)
}

// repeated string client_asn = 6;
inline int ClientSafeBrowsingReportRequest::_internal_client_asn_size() const {
  return client_asn_.size();
}
inline int ClientSafeBrowsingReportRequest::client_asn_size() const {
  return _internal_client_asn_size();
}
inline void ClientSafeBrowsingReportRequest::clear_client_asn() {
  client_asn_.Clear();
}
inline std::string* ClientSafeBrowsingReportRequest::add_client_asn() {
  std::string* _s = _internal_add_client_asn();
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest::_internal_client_asn(int index) const {
  return client_asn_.Get(index);
}
inline const std::string& ClientSafeBrowsingReportRequest::client_asn(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
  return _internal_client_asn(index);
}
inline std::string* ClientSafeBrowsingReportRequest::mutable_client_asn(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
  return client_asn_.Mutable(index);
}
inline void ClientSafeBrowsingReportRequest::set_client_asn(int index, const std::string& value) {
  client_asn_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
}
inline void ClientSafeBrowsingReportRequest::set_client_asn(int index, std::string&& value) {
  client_asn_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
}
inline void ClientSafeBrowsingReportRequest::set_client_asn(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  client_asn_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
}
inline void ClientSafeBrowsingReportRequest::set_client_asn(int index, const char* value, size_t size) {
  client_asn_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
}
inline std::string* ClientSafeBrowsingReportRequest::_internal_add_client_asn() {
  return client_asn_.Add();
}
inline void ClientSafeBrowsingReportRequest::add_client_asn(const std::string& value) {
  client_asn_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
}
inline void ClientSafeBrowsingReportRequest::add_client_asn(std::string&& value) {
  client_asn_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
}
inline void ClientSafeBrowsingReportRequest::add_client_asn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  client_asn_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
}
inline void ClientSafeBrowsingReportRequest::add_client_asn(const char* value, size_t size) {
  client_asn_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientSafeBrowsingReportRequest::client_asn() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
  return client_asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientSafeBrowsingReportRequest::mutable_client_asn() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSafeBrowsingReportRequest.client_asn)
  return &client_asn_;
}

// optional string client_country = 7;
inline bool ClientSafeBrowsingReportRequest::_internal_has_client_country() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_client_country() const {
  return _internal_has_client_country();
}
inline void ClientSafeBrowsingReportRequest::clear_client_country() {
  client_country_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientSafeBrowsingReportRequest::client_country() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.client_country)
  return _internal_client_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest::set_client_country(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 client_country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.client_country)
}
inline std::string* ClientSafeBrowsingReportRequest::mutable_client_country() {
  std::string* _s = _internal_mutable_client_country();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.client_country)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest::_internal_client_country() const {
  return client_country_.Get();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_client_country(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  client_country_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::_internal_mutable_client_country() {
  _has_bits_[0] |= 0x00000008u;
  return client_country_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::release_client_country() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.client_country)
  if (!_internal_has_client_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = client_country_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_country_.IsDefault()) {
    client_country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_client_country(std::string* client_country) {
  if (client_country != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  client_country_.SetAllocated(client_country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_country_.IsDefault()) {
    client_country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.client_country)
}

// optional bool did_proceed = 8;
inline bool ClientSafeBrowsingReportRequest::_internal_has_did_proceed() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_did_proceed() const {
  return _internal_has_did_proceed();
}
inline void ClientSafeBrowsingReportRequest::clear_did_proceed() {
  did_proceed_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ClientSafeBrowsingReportRequest::_internal_did_proceed() const {
  return did_proceed_;
}
inline bool ClientSafeBrowsingReportRequest::did_proceed() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.did_proceed)
  return _internal_did_proceed();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_did_proceed(bool value) {
  _has_bits_[0] |= 0x00000800u;
  did_proceed_ = value;
}
inline void ClientSafeBrowsingReportRequest::set_did_proceed(bool value) {
  _internal_set_did_proceed(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.did_proceed)
}

// optional bool repeat_visit = 9;
inline bool ClientSafeBrowsingReportRequest::_internal_has_repeat_visit() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_repeat_visit() const {
  return _internal_has_repeat_visit();
}
inline void ClientSafeBrowsingReportRequest::clear_repeat_visit() {
  repeat_visit_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ClientSafeBrowsingReportRequest::_internal_repeat_visit() const {
  return repeat_visit_;
}
inline bool ClientSafeBrowsingReportRequest::repeat_visit() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.repeat_visit)
  return _internal_repeat_visit();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_repeat_visit(bool value) {
  _has_bits_[0] |= 0x00001000u;
  repeat_visit_ = value;
}
inline void ClientSafeBrowsingReportRequest::set_repeat_visit(bool value) {
  _internal_set_repeat_visit(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.repeat_visit)
}

// optional bytes token = 15;
inline bool ClientSafeBrowsingReportRequest::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_token() const {
  return _internal_has_token();
}
inline void ClientSafeBrowsingReportRequest::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientSafeBrowsingReportRequest::token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.token)
}
inline std::string* ClientSafeBrowsingReportRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.token)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest::_internal_token() const {
  return token_.Get();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000010u;
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::release_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.token)
}

// optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties client_properties = 17;
inline bool ClientSafeBrowsingReportRequest::_internal_has_client_properties() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || client_properties_ != nullptr);
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_client_properties() const {
  return _internal_has_client_properties();
}
inline void ClientSafeBrowsingReportRequest::clear_client_properties() {
  if (client_properties_ != nullptr) client_properties_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& ClientSafeBrowsingReportRequest::_internal_client_properties() const {
  const ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* p = client_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties&>(
      ::safe_browsing::_ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties_default_instance_);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& ClientSafeBrowsingReportRequest::client_properties() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.client_properties)
  return _internal_client_properties();
}
inline void ClientSafeBrowsingReportRequest::unsafe_arena_set_allocated_client_properties(
    ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* client_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_properties_);
  }
  client_properties_ = client_properties;
  if (client_properties) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.client_properties)
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* ClientSafeBrowsingReportRequest::release_client_properties() {
  _has_bits_[0] &= ~0x00000040u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* temp = client_properties_;
  client_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* ClientSafeBrowsingReportRequest::unsafe_arena_release_client_properties() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.client_properties)
  _has_bits_[0] &= ~0x00000040u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* temp = client_properties_;
  client_properties_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* ClientSafeBrowsingReportRequest::_internal_mutable_client_properties() {
  _has_bits_[0] |= 0x00000040u;
  if (client_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties>(GetArenaForAllocation());
    client_properties_ = p;
  }
  return client_properties_;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* ClientSafeBrowsingReportRequest::mutable_client_properties() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* _msg = _internal_mutable_client_properties();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.client_properties)
  return _msg;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_client_properties(::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* client_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete client_properties_;
  }
  if (client_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_properties);
    if (message_arena != submessage_arena) {
      client_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  client_properties_ = client_properties;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.client_properties)
}

// optional bool show_download_in_folder = 18;
inline bool ClientSafeBrowsingReportRequest::_internal_has_show_download_in_folder() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_show_download_in_folder() const {
  return _internal_has_show_download_in_folder();
}
inline void ClientSafeBrowsingReportRequest::clear_show_download_in_folder() {
  show_download_in_folder_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ClientSafeBrowsingReportRequest::_internal_show_download_in_folder() const {
  return show_download_in_folder_;
}
inline bool ClientSafeBrowsingReportRequest::show_download_in_folder() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.show_download_in_folder)
  return _internal_show_download_in_folder();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_show_download_in_folder(bool value) {
  _has_bits_[0] |= 0x00002000u;
  show_download_in_folder_ = value;
}
inline void ClientSafeBrowsingReportRequest::set_show_download_in_folder(bool value) {
  _internal_set_show_download_in_folder(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.show_download_in_folder)
}

// repeated .safe_browsing.ReferrerChainEntry referrer_chain = 23;
inline int ClientSafeBrowsingReportRequest::_internal_referrer_chain_size() const {
  return referrer_chain_.size();
}
inline int ClientSafeBrowsingReportRequest::referrer_chain_size() const {
  return _internal_referrer_chain_size();
}
inline void ClientSafeBrowsingReportRequest::clear_referrer_chain() {
  referrer_chain_.Clear();
}
inline ::safe_browsing::ReferrerChainEntry* ClientSafeBrowsingReportRequest::mutable_referrer_chain(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.referrer_chain)
  return referrer_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
ClientSafeBrowsingReportRequest::mutable_referrer_chain() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSafeBrowsingReportRequest.referrer_chain)
  return &referrer_chain_;
}
inline const ::safe_browsing::ReferrerChainEntry& ClientSafeBrowsingReportRequest::_internal_referrer_chain(int index) const {
  return referrer_chain_.Get(index);
}
inline const ::safe_browsing::ReferrerChainEntry& ClientSafeBrowsingReportRequest::referrer_chain(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.referrer_chain)
  return _internal_referrer_chain(index);
}
inline ::safe_browsing::ReferrerChainEntry* ClientSafeBrowsingReportRequest::_internal_add_referrer_chain() {
  return referrer_chain_.Add();
}
inline ::safe_browsing::ReferrerChainEntry* ClientSafeBrowsingReportRequest::add_referrer_chain() {
  ::safe_browsing::ReferrerChainEntry* _add = _internal_add_referrer_chain();
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSafeBrowsingReportRequest.referrer_chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
ClientSafeBrowsingReportRequest::referrer_chain() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSafeBrowsingReportRequest.referrer_chain)
  return referrer_chain_;
}

// optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo download_item_info = 24;
inline bool ClientSafeBrowsingReportRequest::_internal_has_download_item_info() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || download_item_info_ != nullptr);
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_download_item_info() const {
  return _internal_has_download_item_info();
}
inline void ClientSafeBrowsingReportRequest::clear_download_item_info() {
  if (download_item_info_ != nullptr) download_item_info_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo& ClientSafeBrowsingReportRequest::_internal_download_item_info() const {
  const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* p = download_item_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo&>(
      ::safe_browsing::_ClientSafeBrowsingReportRequest_DownloadItemInfo_default_instance_);
}
inline const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo& ClientSafeBrowsingReportRequest::download_item_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.download_item_info)
  return _internal_download_item_info();
}
inline void ClientSafeBrowsingReportRequest::unsafe_arena_set_allocated_download_item_info(
    ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* download_item_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(download_item_info_);
  }
  download_item_info_ = download_item_info;
  if (download_item_info) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.download_item_info)
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* ClientSafeBrowsingReportRequest::release_download_item_info() {
  _has_bits_[0] &= ~0x00000080u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* temp = download_item_info_;
  download_item_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* ClientSafeBrowsingReportRequest::unsafe_arena_release_download_item_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.download_item_info)
  _has_bits_[0] &= ~0x00000080u;
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* temp = download_item_info_;
  download_item_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* ClientSafeBrowsingReportRequest::_internal_mutable_download_item_info() {
  _has_bits_[0] |= 0x00000080u;
  if (download_item_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo>(GetArenaForAllocation());
    download_item_info_ = p;
  }
  return download_item_info_;
}
inline ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* ClientSafeBrowsingReportRequest::mutable_download_item_info() {
  ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* _msg = _internal_mutable_download_item_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.download_item_info)
  return _msg;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_download_item_info(::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo* download_item_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete download_item_info_;
  }
  if (download_item_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(download_item_info);
    if (message_arena != submessage_arena) {
      download_item_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download_item_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  download_item_info_ = download_item_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.download_item_info)
}

// optional string safety_net_id = 25 [deprecated = true];
inline bool ClientSafeBrowsingReportRequest::_internal_has_safety_net_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_safety_net_id() const {
  return _internal_has_safety_net_id();
}
inline void ClientSafeBrowsingReportRequest::clear_safety_net_id() {
  safety_net_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ClientSafeBrowsingReportRequest::safety_net_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.safety_net_id)
  return _internal_safety_net_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientSafeBrowsingReportRequest::set_safety_net_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 safety_net_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSafeBrowsingReportRequest.safety_net_id)
}
inline std::string* ClientSafeBrowsingReportRequest::mutable_safety_net_id() {
  std::string* _s = _internal_mutable_safety_net_id();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.safety_net_id)
  return _s;
}
inline const std::string& ClientSafeBrowsingReportRequest::_internal_safety_net_id() const {
  return safety_net_id_.Get();
}
inline void ClientSafeBrowsingReportRequest::_internal_set_safety_net_id(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  safety_net_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::_internal_mutable_safety_net_id() {
  _has_bits_[0] |= 0x00000020u;
  return safety_net_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientSafeBrowsingReportRequest::release_safety_net_id() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.safety_net_id)
  if (!_internal_has_safety_net_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = safety_net_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (safety_net_id_.IsDefault()) {
    safety_net_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_safety_net_id(std::string* safety_net_id) {
  if (safety_net_id != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  safety_net_id_.SetAllocated(safety_net_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (safety_net_id_.IsDefault()) {
    safety_net_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.safety_net_id)
}

// optional .safe_browsing.ChromeUserPopulation population = 26;
inline bool ClientSafeBrowsingReportRequest::_internal_has_population() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || population_ != nullptr);
  return value;
}
inline bool ClientSafeBrowsingReportRequest::has_population() const {
  return _internal_has_population();
}
inline void ClientSafeBrowsingReportRequest::clear_population() {
  if (population_ != nullptr) population_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::safe_browsing::ChromeUserPopulation& ClientSafeBrowsingReportRequest::_internal_population() const {
  const ::safe_browsing::ChromeUserPopulation* p = population_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ChromeUserPopulation&>(
      ::safe_browsing::_ChromeUserPopulation_default_instance_);
}
inline const ::safe_browsing::ChromeUserPopulation& ClientSafeBrowsingReportRequest::population() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSafeBrowsingReportRequest.population)
  return _internal_population();
}
inline void ClientSafeBrowsingReportRequest::unsafe_arena_set_allocated_population(
    ::safe_browsing::ChromeUserPopulation* population) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(population_);
  }
  population_ = population;
  if (population) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.population)
}
inline ::safe_browsing::ChromeUserPopulation* ClientSafeBrowsingReportRequest::release_population() {
  _has_bits_[0] &= ~0x00000100u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* ClientSafeBrowsingReportRequest::unsafe_arena_release_population() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSafeBrowsingReportRequest.population)
  _has_bits_[0] &= ~0x00000100u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* ClientSafeBrowsingReportRequest::_internal_mutable_population() {
  _has_bits_[0] |= 0x00000100u;
  if (population_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ChromeUserPopulation>(GetArenaForAllocation());
    population_ = p;
  }
  return population_;
}
inline ::safe_browsing::ChromeUserPopulation* ClientSafeBrowsingReportRequest::mutable_population() {
  ::safe_browsing::ChromeUserPopulation* _msg = _internal_mutable_population();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSafeBrowsingReportRequest.population)
  return _msg;
}
inline void ClientSafeBrowsingReportRequest::set_allocated_population(::safe_browsing::ChromeUserPopulation* population) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete population_;
  }
  if (population) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(population);
    if (message_arena != submessage_arena) {
      population = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, population, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  population_ = population;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSafeBrowsingReportRequest.population)
}

// -------------------------------------------------------------------

// HTMLElement_Attribute

// optional string name = 1;
inline bool HTMLElement_Attribute::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HTMLElement_Attribute::has_name() const {
  return _internal_has_name();
}
inline void HTMLElement_Attribute::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HTMLElement_Attribute::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.HTMLElement.Attribute.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HTMLElement_Attribute::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.HTMLElement.Attribute.name)
}
inline std::string* HTMLElement_Attribute::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.HTMLElement.Attribute.name)
  return _s;
}
inline const std::string& HTMLElement_Attribute::_internal_name() const {
  return name_.Get();
}
inline void HTMLElement_Attribute::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* HTMLElement_Attribute::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* HTMLElement_Attribute::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.HTMLElement.Attribute.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HTMLElement_Attribute::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.HTMLElement.Attribute.name)
}

// optional string value = 2;
inline bool HTMLElement_Attribute::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HTMLElement_Attribute::has_value() const {
  return _internal_has_value();
}
inline void HTMLElement_Attribute::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HTMLElement_Attribute::value() const {
  // @@protoc_insertion_point(field_get:safe_browsing.HTMLElement.Attribute.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HTMLElement_Attribute::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.HTMLElement.Attribute.value)
}
inline std::string* HTMLElement_Attribute::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:safe_browsing.HTMLElement.Attribute.value)
  return _s;
}
inline const std::string& HTMLElement_Attribute::_internal_value() const {
  return value_.Get();
}
inline void HTMLElement_Attribute::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* HTMLElement_Attribute::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* HTMLElement_Attribute::release_value() {
  // @@protoc_insertion_point(field_release:safe_browsing.HTMLElement.Attribute.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HTMLElement_Attribute::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.HTMLElement.Attribute.value)
}

// -------------------------------------------------------------------

// HTMLElement

// optional int32 id = 1;
inline bool HTMLElement::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HTMLElement::has_id() const {
  return _internal_has_id();
}
inline void HTMLElement::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t HTMLElement::_internal_id() const {
  return id_;
}
inline int32_t HTMLElement::id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.HTMLElement.id)
  return _internal_id();
}
inline void HTMLElement::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void HTMLElement::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:safe_browsing.HTMLElement.id)
}

// optional string tag = 2;
inline bool HTMLElement::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HTMLElement::has_tag() const {
  return _internal_has_tag();
}
inline void HTMLElement::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HTMLElement::tag() const {
  // @@protoc_insertion_point(field_get:safe_browsing.HTMLElement.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HTMLElement::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.HTMLElement.tag)
}
inline std::string* HTMLElement::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:safe_browsing.HTMLElement.tag)
  return _s;
}
inline const std::string& HTMLElement::_internal_tag() const {
  return tag_.Get();
}
inline void HTMLElement::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(value, GetArenaForAllocation());
}
inline std::string* HTMLElement::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(GetArenaForAllocation());
}
inline std::string* HTMLElement::release_tag() {
  // @@protoc_insertion_point(field_release:safe_browsing.HTMLElement.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HTMLElement::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.HTMLElement.tag)
}

// repeated int32 child_ids = 3;
inline int HTMLElement::_internal_child_ids_size() const {
  return child_ids_.size();
}
inline int HTMLElement::child_ids_size() const {
  return _internal_child_ids_size();
}
inline void HTMLElement::clear_child_ids() {
  child_ids_.Clear();
}
inline int32_t HTMLElement::_internal_child_ids(int index) const {
  return child_ids_.Get(index);
}
inline int32_t HTMLElement::child_ids(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.HTMLElement.child_ids)
  return _internal_child_ids(index);
}
inline void HTMLElement::set_child_ids(int index, int32_t value) {
  child_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.HTMLElement.child_ids)
}
inline void HTMLElement::_internal_add_child_ids(int32_t value) {
  child_ids_.Add(value);
}
inline void HTMLElement::add_child_ids(int32_t value) {
  _internal_add_child_ids(value);
  // @@protoc_insertion_point(field_add:safe_browsing.HTMLElement.child_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HTMLElement::_internal_child_ids() const {
  return child_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HTMLElement::child_ids() const {
  // @@protoc_insertion_point(field_list:safe_browsing.HTMLElement.child_ids)
  return _internal_child_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HTMLElement::_internal_mutable_child_ids() {
  return &child_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HTMLElement::mutable_child_ids() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.HTMLElement.child_ids)
  return _internal_mutable_child_ids();
}

// optional int32 resource_id = 5;
inline bool HTMLElement::_internal_has_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HTMLElement::has_resource_id() const {
  return _internal_has_resource_id();
}
inline void HTMLElement::clear_resource_id() {
  resource_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t HTMLElement::_internal_resource_id() const {
  return resource_id_;
}
inline int32_t HTMLElement::resource_id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.HTMLElement.resource_id)
  return _internal_resource_id();
}
inline void HTMLElement::_internal_set_resource_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  resource_id_ = value;
}
inline void HTMLElement::set_resource_id(int32_t value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:safe_browsing.HTMLElement.resource_id)
}

// repeated .safe_browsing.HTMLElement.Attribute attribute = 6;
inline int HTMLElement::_internal_attribute_size() const {
  return attribute_.size();
}
inline int HTMLElement::attribute_size() const {
  return _internal_attribute_size();
}
inline void HTMLElement::clear_attribute() {
  attribute_.Clear();
}
inline ::safe_browsing::HTMLElement_Attribute* HTMLElement::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.HTMLElement.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement_Attribute >*
HTMLElement::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.HTMLElement.attribute)
  return &attribute_;
}
inline const ::safe_browsing::HTMLElement_Attribute& HTMLElement::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::safe_browsing::HTMLElement_Attribute& HTMLElement::attribute(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.HTMLElement.attribute)
  return _internal_attribute(index);
}
inline ::safe_browsing::HTMLElement_Attribute* HTMLElement::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::safe_browsing::HTMLElement_Attribute* HTMLElement::add_attribute() {
  ::safe_browsing::HTMLElement_Attribute* _add = _internal_add_attribute();
  // @@protoc_insertion_point(field_add:safe_browsing.HTMLElement.attribute)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::HTMLElement_Attribute >&
HTMLElement::attribute() const {
  // @@protoc_insertion_point(field_list:safe_browsing.HTMLElement.attribute)
  return attribute_;
}

// optional bytes inner_html = 7;
inline bool HTMLElement::_internal_has_inner_html() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HTMLElement::has_inner_html() const {
  return _internal_has_inner_html();
}
inline void HTMLElement::clear_inner_html() {
  inner_html_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HTMLElement::inner_html() const {
  // @@protoc_insertion_point(field_get:safe_browsing.HTMLElement.inner_html)
  return _internal_inner_html();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HTMLElement::set_inner_html(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 inner_html_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.HTMLElement.inner_html)
}
inline std::string* HTMLElement::mutable_inner_html() {
  std::string* _s = _internal_mutable_inner_html();
  // @@protoc_insertion_point(field_mutable:safe_browsing.HTMLElement.inner_html)
  return _s;
}
inline const std::string& HTMLElement::_internal_inner_html() const {
  return inner_html_.Get();
}
inline void HTMLElement::_internal_set_inner_html(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  inner_html_.Set(value, GetArenaForAllocation());
}
inline std::string* HTMLElement::_internal_mutable_inner_html() {
  _has_bits_[0] |= 0x00000002u;
  return inner_html_.Mutable(GetArenaForAllocation());
}
inline std::string* HTMLElement::release_inner_html() {
  // @@protoc_insertion_point(field_release:safe_browsing.HTMLElement.inner_html)
  if (!_internal_has_inner_html()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = inner_html_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inner_html_.IsDefault()) {
    inner_html_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HTMLElement::set_allocated_inner_html(std::string* inner_html) {
  if (inner_html != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inner_html_.SetAllocated(inner_html, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inner_html_.IsDefault()) {
    inner_html_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.HTMLElement.inner_html)
}

// -------------------------------------------------------------------

// ExtensionWebStoreInstallRequest

// repeated .safe_browsing.ReferrerChainEntry referrer_chain = 1;
inline int ExtensionWebStoreInstallRequest::_internal_referrer_chain_size() const {
  return referrer_chain_.size();
}
inline int ExtensionWebStoreInstallRequest::referrer_chain_size() const {
  return _internal_referrer_chain_size();
}
inline void ExtensionWebStoreInstallRequest::clear_referrer_chain() {
  referrer_chain_.Clear();
}
inline ::safe_browsing::ReferrerChainEntry* ExtensionWebStoreInstallRequest::mutable_referrer_chain(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain)
  return referrer_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
ExtensionWebStoreInstallRequest::mutable_referrer_chain() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain)
  return &referrer_chain_;
}
inline const ::safe_browsing::ReferrerChainEntry& ExtensionWebStoreInstallRequest::_internal_referrer_chain(int index) const {
  return referrer_chain_.Get(index);
}
inline const ::safe_browsing::ReferrerChainEntry& ExtensionWebStoreInstallRequest::referrer_chain(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain)
  return _internal_referrer_chain(index);
}
inline ::safe_browsing::ReferrerChainEntry* ExtensionWebStoreInstallRequest::_internal_add_referrer_chain() {
  return referrer_chain_.Add();
}
inline ::safe_browsing::ReferrerChainEntry* ExtensionWebStoreInstallRequest::add_referrer_chain() {
  ::safe_browsing::ReferrerChainEntry* _add = _internal_add_referrer_chain();
  // @@protoc_insertion_point(field_add:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
ExtensionWebStoreInstallRequest::referrer_chain() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain)
  return referrer_chain_;
}

// optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 2;
inline bool ExtensionWebStoreInstallRequest::_internal_has_referrer_chain_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || referrer_chain_options_ != nullptr);
  return value;
}
inline bool ExtensionWebStoreInstallRequest::has_referrer_chain_options() const {
  return _internal_has_referrer_chain_options();
}
inline void ExtensionWebStoreInstallRequest::clear_referrer_chain_options() {
  if (referrer_chain_options_ != nullptr) referrer_chain_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ReferrerChainOptions& ExtensionWebStoreInstallRequest::_internal_referrer_chain_options() const {
  const ::safe_browsing::ReferrerChainOptions* p = referrer_chain_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ReferrerChainOptions&>(
      ::safe_browsing::_ReferrerChainOptions_default_instance_);
}
inline const ::safe_browsing::ReferrerChainOptions& ExtensionWebStoreInstallRequest::referrer_chain_options() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain_options)
  return _internal_referrer_chain_options();
}
inline void ExtensionWebStoreInstallRequest::unsafe_arena_set_allocated_referrer_chain_options(
    ::safe_browsing::ReferrerChainOptions* referrer_chain_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referrer_chain_options_);
  }
  referrer_chain_options_ = referrer_chain_options;
  if (referrer_chain_options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain_options)
}
inline ::safe_browsing::ReferrerChainOptions* ExtensionWebStoreInstallRequest::release_referrer_chain_options() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ReferrerChainOptions* temp = referrer_chain_options_;
  referrer_chain_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ReferrerChainOptions* ExtensionWebStoreInstallRequest::unsafe_arena_release_referrer_chain_options() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain_options)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ReferrerChainOptions* temp = referrer_chain_options_;
  referrer_chain_options_ = nullptr;
  return temp;
}
inline ::safe_browsing::ReferrerChainOptions* ExtensionWebStoreInstallRequest::_internal_mutable_referrer_chain_options() {
  _has_bits_[0] |= 0x00000001u;
  if (referrer_chain_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ReferrerChainOptions>(GetArenaForAllocation());
    referrer_chain_options_ = p;
  }
  return referrer_chain_options_;
}
inline ::safe_browsing::ReferrerChainOptions* ExtensionWebStoreInstallRequest::mutable_referrer_chain_options() {
  ::safe_browsing::ReferrerChainOptions* _msg = _internal_mutable_referrer_chain_options();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain_options)
  return _msg;
}
inline void ExtensionWebStoreInstallRequest::set_allocated_referrer_chain_options(::safe_browsing::ReferrerChainOptions* referrer_chain_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete referrer_chain_options_;
  }
  if (referrer_chain_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(referrer_chain_options);
    if (message_arena != submessage_arena) {
      referrer_chain_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referrer_chain_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referrer_chain_options_ = referrer_chain_options;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionWebStoreInstallRequest.referrer_chain_options)
}

// -------------------------------------------------------------------

// ExtensionTelemetryReportRequest_ExtensionInfo

// optional string id = 1;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_id() const {
  return _internal_has_id();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo::id() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionTelemetryReportRequest_ExtensionInfo::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.id)
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.id)
  return _s;
}
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo::_internal_id() const {
  return id_.Get();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::release_id() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.id)
}

// optional string version = 2;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_version() const {
  return _internal_has_version();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionTelemetryReportRequest_ExtensionInfo::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.version)
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.version)
  return _s;
}
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo::_internal_version() const {
  return version_.Get();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::release_version() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.version)
}

// optional string name = 3;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_name() const {
  return _internal_has_name();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo::name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionTelemetryReportRequest_ExtensionInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.name)
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.name)
  return _s;
}
inline const std::string& ExtensionTelemetryReportRequest_ExtensionInfo::_internal_name() const {
  return name_.Get();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_ExtensionInfo::release_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.name)
}

// optional int64 install_timestamp_msec = 4;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_install_timestamp_msec() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_install_timestamp_msec() const {
  return _internal_has_install_timestamp_msec();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_install_timestamp_msec() {
  install_timestamp_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ExtensionTelemetryReportRequest_ExtensionInfo::_internal_install_timestamp_msec() const {
  return install_timestamp_msec_;
}
inline int64_t ExtensionTelemetryReportRequest_ExtensionInfo::install_timestamp_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.install_timestamp_msec)
  return _internal_install_timestamp_msec();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_install_timestamp_msec(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  install_timestamp_msec_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_install_timestamp_msec(int64_t value) {
  _internal_set_install_timestamp_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.install_timestamp_msec)
}

// optional bool is_default_installed = 5;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_is_default_installed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_is_default_installed() const {
  return _internal_has_is_default_installed();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_is_default_installed() {
  is_default_installed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_is_default_installed() const {
  return is_default_installed_;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::is_default_installed() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.is_default_installed)
  return _internal_is_default_installed();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_is_default_installed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_default_installed_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_is_default_installed(bool value) {
  _internal_set_is_default_installed(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.is_default_installed)
}

// optional bool is_oem_installed = 6;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_is_oem_installed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_is_oem_installed() const {
  return _internal_has_is_oem_installed();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_is_oem_installed() {
  is_oem_installed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_is_oem_installed() const {
  return is_oem_installed_;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::is_oem_installed() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.is_oem_installed)
  return _internal_is_oem_installed();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_is_oem_installed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_oem_installed_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_is_oem_installed(bool value) {
  _internal_set_is_oem_installed(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.is_oem_installed)
}

// optional bool is_from_store = 7;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_is_from_store() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_is_from_store() const {
  return _internal_has_is_from_store();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_is_from_store() {
  is_from_store_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_is_from_store() const {
  return is_from_store_;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::is_from_store() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.is_from_store)
  return _internal_is_from_store();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_is_from_store(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_from_store_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_is_from_store(bool value) {
  _internal_set_is_from_store(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.is_from_store)
}

// optional bool updates_from_store = 8;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_updates_from_store() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_updates_from_store() const {
  return _internal_has_updates_from_store();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_updates_from_store() {
  updates_from_store_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_updates_from_store() const {
  return updates_from_store_;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::updates_from_store() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.updates_from_store)
  return _internal_updates_from_store();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_updates_from_store(bool value) {
  _has_bits_[0] |= 0x00000080u;
  updates_from_store_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_updates_from_store(bool value) {
  _internal_set_updates_from_store(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.updates_from_store)
}

// optional bool is_converted_from_user_script = 9;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_is_converted_from_user_script() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_is_converted_from_user_script() const {
  return _internal_has_is_converted_from_user_script();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_is_converted_from_user_script() {
  is_converted_from_user_script_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_is_converted_from_user_script() const {
  return is_converted_from_user_script_;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::is_converted_from_user_script() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.is_converted_from_user_script)
  return _internal_is_converted_from_user_script();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_is_converted_from_user_script(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_converted_from_user_script_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_is_converted_from_user_script(bool value) {
  _internal_set_is_converted_from_user_script(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.is_converted_from_user_script)
}

// optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.Type type = 10;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_type() const {
  return _internal_has_type();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::_internal_type() const {
  return static_cast< ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type >(type_);
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.type)
  return _internal_type();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_type(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type value) {
  assert(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_type(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.type)
}

// optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.InstallLocation install_location = 11;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_install_location() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_install_location() const {
  return _internal_has_install_location();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_install_location() {
  install_location_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::_internal_install_location() const {
  return static_cast< ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation >(install_location_);
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::install_location() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.install_location)
  return _internal_install_location();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_install_location(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation value) {
  assert(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  install_location_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_install_location(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation value) {
  _internal_set_install_location(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.install_location)
}

// optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.BlocklistState blocklist_state = 12;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_blocklist_state() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_blocklist_state() const {
  return _internal_has_blocklist_state();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_blocklist_state() {
  blocklist_state_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::_internal_blocklist_state() const {
  return static_cast< ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState >(blocklist_state_);
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::blocklist_state() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.blocklist_state)
  return _internal_blocklist_state();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_blocklist_state(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState value) {
  assert(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  blocklist_state_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_blocklist_state(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState value) {
  _internal_set_blocklist_state(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.blocklist_state)
}

// optional uint32 disable_reasons = 13;
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::_internal_has_disable_reasons() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_ExtensionInfo::has_disable_reasons() const {
  return _internal_has_disable_reasons();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::clear_disable_reasons() {
  disable_reasons_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t ExtensionTelemetryReportRequest_ExtensionInfo::_internal_disable_reasons() const {
  return disable_reasons_;
}
inline uint32_t ExtensionTelemetryReportRequest_ExtensionInfo::disable_reasons() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.disable_reasons)
  return _internal_disable_reasons();
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::_internal_set_disable_reasons(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  disable_reasons_ = value;
}
inline void ExtensionTelemetryReportRequest_ExtensionInfo::set_disable_reasons(uint32_t value) {
  _internal_set_disable_reasons(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.disable_reasons)
}

// -------------------------------------------------------------------

// ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo

// optional bytes hash = 1;
inline bool ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::has_hash() const {
  return _internal_has_hash();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::clear_hash() {
  hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::hash() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::set_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo.hash)
}
inline std::string* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo.hash)
  return _s;
}
inline const std::string& ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_internal_hash() const {
  return hash_.Get();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::release_hash() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo.hash)
}

// optional uint32 execution_count = 2;
inline bool ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_internal_has_execution_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::has_execution_count() const {
  return _internal_has_execution_count();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::clear_execution_count() {
  execution_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_internal_execution_count() const {
  return execution_count_;
}
inline uint32_t ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::execution_count() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo.execution_count)
  return _internal_execution_count();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_internal_set_execution_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  execution_count_ = value;
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::set_execution_count(uint32_t value) {
  _internal_set_execution_count(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo.execution_count)
}

// -------------------------------------------------------------------

// ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo

// repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo scripts = 1;
inline int ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_internal_scripts_size() const {
  return scripts_.size();
}
inline int ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::scripts_size() const {
  return _internal_scripts_size();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::clear_scripts() {
  scripts_.Clear();
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::mutable_scripts(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.scripts)
  return scripts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo >*
ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::mutable_scripts() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.scripts)
  return &scripts_;
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_internal_scripts(int index) const {
  return scripts_.Get(index);
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::scripts(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.scripts)
  return _internal_scripts(index);
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_internal_add_scripts() {
  return scripts_.Add();
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::add_scripts() {
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* _add = _internal_add_scripts();
  // @@protoc_insertion_point(field_add:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.scripts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo >&
ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::scripts() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.scripts)
  return scripts_;
}

// optional uint32 max_exceeded_script_count = 2;
inline bool ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_internal_has_max_exceeded_script_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::has_max_exceeded_script_count() const {
  return _internal_has_max_exceeded_script_count();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::clear_max_exceeded_script_count() {
  max_exceeded_script_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_internal_max_exceeded_script_count() const {
  return max_exceeded_script_count_;
}
inline uint32_t ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::max_exceeded_script_count() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.max_exceeded_script_count)
  return _internal_max_exceeded_script_count();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_internal_set_max_exceeded_script_count(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  max_exceeded_script_count_ = value;
}
inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::set_max_exceeded_script_count(uint32_t value) {
  _internal_set_max_exceeded_script_count(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.max_exceeded_script_count)
}

// -------------------------------------------------------------------

// ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo

// optional string url = 1;
inline bool ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::has_url() const {
  return _internal_has_url();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo.url)
}
inline std::string* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo.url)
  return _s;
}
inline const std::string& ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_internal_url() const {
  return url_.Get();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo.url)
}

// optional uint32 contact_count = 2;
inline bool ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_internal_has_contact_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::has_contact_count() const {
  return _internal_has_contact_count();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::clear_contact_count() {
  contact_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_internal_contact_count() const {
  return contact_count_;
}
inline uint32_t ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::contact_count() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo.contact_count)
  return _internal_contact_count();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_internal_set_contact_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  contact_count_ = value;
}
inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::set_contact_count(uint32_t value) {
  _internal_set_contact_count(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo.contact_count)
}

// -------------------------------------------------------------------

// ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo

// repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo remote_host = 1;
inline int ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::_internal_remote_host_size() const {
  return remote_host_.size();
}
inline int ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::remote_host_size() const {
  return _internal_remote_host_size();
}
inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::clear_remote_host() {
  remote_host_.Clear();
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::mutable_remote_host(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.remote_host)
  return remote_host_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo >*
ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::mutable_remote_host() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.remote_host)
  return &remote_host_;
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::_internal_remote_host(int index) const {
  return remote_host_.Get(index);
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::remote_host(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.remote_host)
  return _internal_remote_host(index);
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::_internal_add_remote_host() {
  return remote_host_.Add();
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::add_remote_host() {
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* _add = _internal_add_remote_host();
  // @@protoc_insertion_point(field_add:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.remote_host)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo >&
ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::remote_host() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.remote_host)
  return remote_host_;
}

// -------------------------------------------------------------------

// ExtensionTelemetryReportRequest_SignalInfo

// optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo tabs_execute_script_info = 1;
inline bool ExtensionTelemetryReportRequest_SignalInfo::_internal_has_tabs_execute_script_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tabs_execute_script_info_ != nullptr);
  return value;
}
inline bool ExtensionTelemetryReportRequest_SignalInfo::has_tabs_execute_script_info() const {
  return _internal_has_tabs_execute_script_info();
}
inline void ExtensionTelemetryReportRequest_SignalInfo::clear_tabs_execute_script_info() {
  if (tabs_execute_script_info_ != nullptr) tabs_execute_script_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& ExtensionTelemetryReportRequest_SignalInfo::_internal_tabs_execute_script_info() const {
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* p = tabs_execute_script_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo&>(
      ::safe_browsing::_ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_default_instance_);
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& ExtensionTelemetryReportRequest_SignalInfo::tabs_execute_script_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.tabs_execute_script_info)
  return _internal_tabs_execute_script_info();
}
inline void ExtensionTelemetryReportRequest_SignalInfo::unsafe_arena_set_allocated_tabs_execute_script_info(
    ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* tabs_execute_script_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tabs_execute_script_info_);
  }
  tabs_execute_script_info_ = tabs_execute_script_info;
  if (tabs_execute_script_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.tabs_execute_script_info)
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* ExtensionTelemetryReportRequest_SignalInfo::release_tabs_execute_script_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* temp = tabs_execute_script_info_;
  tabs_execute_script_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* ExtensionTelemetryReportRequest_SignalInfo::unsafe_arena_release_tabs_execute_script_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.tabs_execute_script_info)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* temp = tabs_execute_script_info_;
  tabs_execute_script_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* ExtensionTelemetryReportRequest_SignalInfo::_internal_mutable_tabs_execute_script_info() {
  _has_bits_[0] |= 0x00000001u;
  if (tabs_execute_script_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo>(GetArenaForAllocation());
    tabs_execute_script_info_ = p;
  }
  return tabs_execute_script_info_;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* ExtensionTelemetryReportRequest_SignalInfo::mutable_tabs_execute_script_info() {
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* _msg = _internal_mutable_tabs_execute_script_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.tabs_execute_script_info)
  return _msg;
}
inline void ExtensionTelemetryReportRequest_SignalInfo::set_allocated_tabs_execute_script_info(::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* tabs_execute_script_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tabs_execute_script_info_;
  }
  if (tabs_execute_script_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tabs_execute_script_info);
    if (message_arena != submessage_arena) {
      tabs_execute_script_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tabs_execute_script_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tabs_execute_script_info_ = tabs_execute_script_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.tabs_execute_script_info)
}

// optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo remote_host_contacted_info = 2;
inline bool ExtensionTelemetryReportRequest_SignalInfo::_internal_has_remote_host_contacted_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || remote_host_contacted_info_ != nullptr);
  return value;
}
inline bool ExtensionTelemetryReportRequest_SignalInfo::has_remote_host_contacted_info() const {
  return _internal_has_remote_host_contacted_info();
}
inline void ExtensionTelemetryReportRequest_SignalInfo::clear_remote_host_contacted_info() {
  if (remote_host_contacted_info_ != nullptr) remote_host_contacted_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& ExtensionTelemetryReportRequest_SignalInfo::_internal_remote_host_contacted_info() const {
  const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* p = remote_host_contacted_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo&>(
      ::safe_browsing::_ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_default_instance_);
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& ExtensionTelemetryReportRequest_SignalInfo::remote_host_contacted_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.remote_host_contacted_info)
  return _internal_remote_host_contacted_info();
}
inline void ExtensionTelemetryReportRequest_SignalInfo::unsafe_arena_set_allocated_remote_host_contacted_info(
    ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* remote_host_contacted_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_host_contacted_info_);
  }
  remote_host_contacted_info_ = remote_host_contacted_info;
  if (remote_host_contacted_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.remote_host_contacted_info)
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* ExtensionTelemetryReportRequest_SignalInfo::release_remote_host_contacted_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* temp = remote_host_contacted_info_;
  remote_host_contacted_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* ExtensionTelemetryReportRequest_SignalInfo::unsafe_arena_release_remote_host_contacted_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.remote_host_contacted_info)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* temp = remote_host_contacted_info_;
  remote_host_contacted_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* ExtensionTelemetryReportRequest_SignalInfo::_internal_mutable_remote_host_contacted_info() {
  _has_bits_[0] |= 0x00000002u;
  if (remote_host_contacted_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo>(GetArenaForAllocation());
    remote_host_contacted_info_ = p;
  }
  return remote_host_contacted_info_;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* ExtensionTelemetryReportRequest_SignalInfo::mutable_remote_host_contacted_info() {
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* _msg = _internal_mutable_remote_host_contacted_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.remote_host_contacted_info)
  return _msg;
}
inline void ExtensionTelemetryReportRequest_SignalInfo::set_allocated_remote_host_contacted_info(::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* remote_host_contacted_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remote_host_contacted_info_;
  }
  if (remote_host_contacted_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remote_host_contacted_info);
    if (message_arena != submessage_arena) {
      remote_host_contacted_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_host_contacted_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  remote_host_contacted_info_ = remote_host_contacted_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.remote_host_contacted_info)
}

// -------------------------------------------------------------------

// ExtensionTelemetryReportRequest_Report

// optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo extension = 1;
inline bool ExtensionTelemetryReportRequest_Report::_internal_has_extension() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || extension_ != nullptr);
  return value;
}
inline bool ExtensionTelemetryReportRequest_Report::has_extension() const {
  return _internal_has_extension();
}
inline void ExtensionTelemetryReportRequest_Report::clear_extension() {
  if (extension_ != nullptr) extension_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo& ExtensionTelemetryReportRequest_Report::_internal_extension() const {
  const ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* p = extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo&>(
      ::safe_browsing::_ExtensionTelemetryReportRequest_ExtensionInfo_default_instance_);
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo& ExtensionTelemetryReportRequest_Report::extension() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.Report.extension)
  return _internal_extension();
}
inline void ExtensionTelemetryReportRequest_Report::unsafe_arena_set_allocated_extension(
    ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_);
  }
  extension_ = extension;
  if (extension) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.Report.extension)
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* ExtensionTelemetryReportRequest_Report::release_extension() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* temp = extension_;
  extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* ExtensionTelemetryReportRequest_Report::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_release:safe_browsing.ExtensionTelemetryReportRequest.Report.extension)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* temp = extension_;
  extension_ = nullptr;
  return temp;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* ExtensionTelemetryReportRequest_Report::_internal_mutable_extension() {
  _has_bits_[0] |= 0x00000001u;
  if (extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo>(GetArenaForAllocation());
    extension_ = p;
  }
  return extension_;
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* ExtensionTelemetryReportRequest_Report::mutable_extension() {
  ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* _msg = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.Report.extension)
  return _msg;
}
inline void ExtensionTelemetryReportRequest_Report::set_allocated_extension(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo* extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete extension_;
  }
  if (extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension);
    if (message_arena != submessage_arena) {
      extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extension_ = extension;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ExtensionTelemetryReportRequest.Report.extension)
}

// repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo signals = 2;
inline int ExtensionTelemetryReportRequest_Report::_internal_signals_size() const {
  return signals_.size();
}
inline int ExtensionTelemetryReportRequest_Report::signals_size() const {
  return _internal_signals_size();
}
inline void ExtensionTelemetryReportRequest_Report::clear_signals() {
  signals_.Clear();
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo* ExtensionTelemetryReportRequest_Report::mutable_signals(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.Report.signals)
  return signals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo >*
ExtensionTelemetryReportRequest_Report::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ExtensionTelemetryReportRequest.Report.signals)
  return &signals_;
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo& ExtensionTelemetryReportRequest_Report::_internal_signals(int index) const {
  return signals_.Get(index);
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo& ExtensionTelemetryReportRequest_Report::signals(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.Report.signals)
  return _internal_signals(index);
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo* ExtensionTelemetryReportRequest_Report::_internal_add_signals() {
  return signals_.Add();
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo* ExtensionTelemetryReportRequest_Report::add_signals() {
  ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo* _add = _internal_add_signals();
  // @@protoc_insertion_point(field_add:safe_browsing.ExtensionTelemetryReportRequest.Report.signals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo >&
ExtensionTelemetryReportRequest_Report::signals() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ExtensionTelemetryReportRequest.Report.signals)
  return signals_;
}

// -------------------------------------------------------------------

// ExtensionTelemetryReportRequest

// optional int64 creation_timestamp_msec = 1;
inline bool ExtensionTelemetryReportRequest::_internal_has_creation_timestamp_msec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtensionTelemetryReportRequest::has_creation_timestamp_msec() const {
  return _internal_has_creation_timestamp_msec();
}
inline void ExtensionTelemetryReportRequest::clear_creation_timestamp_msec() {
  creation_timestamp_msec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ExtensionTelemetryReportRequest::_internal_creation_timestamp_msec() const {
  return creation_timestamp_msec_;
}
inline int64_t ExtensionTelemetryReportRequest::creation_timestamp_msec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.creation_timestamp_msec)
  return _internal_creation_timestamp_msec();
}
inline void ExtensionTelemetryReportRequest::_internal_set_creation_timestamp_msec(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  creation_timestamp_msec_ = value;
}
inline void ExtensionTelemetryReportRequest::set_creation_timestamp_msec(int64_t value) {
  _internal_set_creation_timestamp_msec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.ExtensionTelemetryReportRequest.creation_timestamp_msec)
}

// repeated .safe_browsing.ExtensionTelemetryReportRequest.Report reports = 2;
inline int ExtensionTelemetryReportRequest::_internal_reports_size() const {
  return reports_.size();
}
inline int ExtensionTelemetryReportRequest::reports_size() const {
  return _internal_reports_size();
}
inline void ExtensionTelemetryReportRequest::clear_reports() {
  reports_.Clear();
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_Report* ExtensionTelemetryReportRequest::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ExtensionTelemetryReportRequest.reports)
  return reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_Report >*
ExtensionTelemetryReportRequest::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ExtensionTelemetryReportRequest.reports)
  return &reports_;
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_Report& ExtensionTelemetryReportRequest::_internal_reports(int index) const {
  return reports_.Get(index);
}
inline const ::safe_browsing::ExtensionTelemetryReportRequest_Report& ExtensionTelemetryReportRequest::reports(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ExtensionTelemetryReportRequest.reports)
  return _internal_reports(index);
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_Report* ExtensionTelemetryReportRequest::_internal_add_reports() {
  return reports_.Add();
}
inline ::safe_browsing::ExtensionTelemetryReportRequest_Report* ExtensionTelemetryReportRequest::add_reports() {
  ::safe_browsing::ExtensionTelemetryReportRequest_Report* _add = _internal_add_reports();
  // @@protoc_insertion_point(field_add:safe_browsing.ExtensionTelemetryReportRequest.reports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ExtensionTelemetryReportRequest_Report >&
ExtensionTelemetryReportRequest::reports() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ExtensionTelemetryReportRequest.reports)
  return reports_;
}

// -------------------------------------------------------------------

// ExtensionTelemetryResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ChromeUserPopulation_UserPopulation> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ChromeUserPopulation_ProfileManagementStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::LoginReputationClientRequest_TriggerType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::LoginReputationClientRequest_ReportType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::LoginReputationClientResponse_VerdictType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientDownloadRequest_ResourceType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientDownloadRequest_DownloadType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ReferrerChainEntry_URLType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ReferrerChainEntry_NavigationInitiation> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientDownloadResponse_Verdict> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientDownloadReport_Reason> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientUploadResponse_UploadStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientSafeBrowsingReportRequest_ReportType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2fcsd_2eproto
