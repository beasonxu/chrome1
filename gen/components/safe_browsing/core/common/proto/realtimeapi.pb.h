// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/safe_browsing/core/common/proto/realtimeapi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2frealtimeapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2frealtimeapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/safe_browsing/core/common/proto/csd.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2frealtimeapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2frealtimeapi_2eproto {
  static const uint32_t offsets[];
};
namespace safe_browsing {
class RTLookupRequest;
struct RTLookupRequestDefaultTypeInternal;
extern RTLookupRequestDefaultTypeInternal _RTLookupRequest_default_instance_;
class RTLookupResponse;
struct RTLookupResponseDefaultTypeInternal;
extern RTLookupResponseDefaultTypeInternal _RTLookupResponse_default_instance_;
class RTLookupResponse_ThreatInfo;
struct RTLookupResponse_ThreatInfoDefaultTypeInternal;
extern RTLookupResponse_ThreatInfoDefaultTypeInternal _RTLookupResponse_ThreatInfo_default_instance_;
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> ::safe_browsing::RTLookupRequest* Arena::CreateMaybeMessage<::safe_browsing::RTLookupRequest>(Arena*);
template<> ::safe_browsing::RTLookupResponse* Arena::CreateMaybeMessage<::safe_browsing::RTLookupResponse>(Arena*);
template<> ::safe_browsing::RTLookupResponse_ThreatInfo* Arena::CreateMaybeMessage<::safe_browsing::RTLookupResponse_ThreatInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safe_browsing {

enum RTLookupRequest_LookupType : int {
  RTLookupRequest_LookupType_LOOKUP_TYPE_UNSPECIFIED = 0,
  RTLookupRequest_LookupType_NAVIGATION = 1,
  RTLookupRequest_LookupType_DOWNLOAD = 2
};
bool RTLookupRequest_LookupType_IsValid(int value);
constexpr RTLookupRequest_LookupType RTLookupRequest_LookupType_LookupType_MIN = RTLookupRequest_LookupType_LOOKUP_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_LookupType RTLookupRequest_LookupType_LookupType_MAX = RTLookupRequest_LookupType_DOWNLOAD;
constexpr int RTLookupRequest_LookupType_LookupType_ARRAYSIZE = RTLookupRequest_LookupType_LookupType_MAX + 1;

const std::string& RTLookupRequest_LookupType_Name(RTLookupRequest_LookupType value);
template<typename T>
inline const std::string& RTLookupRequest_LookupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupRequest_LookupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupRequest_LookupType_Name.");
  return RTLookupRequest_LookupType_Name(static_cast<RTLookupRequest_LookupType>(enum_t_value));
}
bool RTLookupRequest_LookupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupRequest_LookupType* value);
enum RTLookupRequest_OSType : int {
  RTLookupRequest_OSType_OS_TYPE_UNSPECIFIED = 0,
  RTLookupRequest_OSType_OS_TYPE_ANDROID = 1,
  RTLookupRequest_OSType_OS_TYPE_CHROME_OS = 2,
  RTLookupRequest_OSType_OS_TYPE_FUCHSIA = 3,
  RTLookupRequest_OSType_OS_TYPE_IOS = 4,
  RTLookupRequest_OSType_OS_TYPE_LINUX = 5,
  RTLookupRequest_OSType_OS_TYPE_MAC = 6,
  RTLookupRequest_OSType_OS_TYPE_WINDOWS = 7
};
bool RTLookupRequest_OSType_IsValid(int value);
constexpr RTLookupRequest_OSType RTLookupRequest_OSType_OSType_MIN = RTLookupRequest_OSType_OS_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_OSType RTLookupRequest_OSType_OSType_MAX = RTLookupRequest_OSType_OS_TYPE_WINDOWS;
constexpr int RTLookupRequest_OSType_OSType_ARRAYSIZE = RTLookupRequest_OSType_OSType_MAX + 1;

const std::string& RTLookupRequest_OSType_Name(RTLookupRequest_OSType value);
template<typename T>
inline const std::string& RTLookupRequest_OSType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupRequest_OSType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupRequest_OSType_Name.");
  return RTLookupRequest_OSType_Name(static_cast<RTLookupRequest_OSType>(enum_t_value));
}
bool RTLookupRequest_OSType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupRequest_OSType* value);
enum RTLookupRequest_ReportType : int {
  RTLookupRequest_ReportType_REPORT_TYPE_UNSPECIFIED = 0,
  RTLookupRequest_ReportType_FULL_REPORT = 1,
  RTLookupRequest_ReportType_SAMPLED_REPORT = 2
};
bool RTLookupRequest_ReportType_IsValid(int value);
constexpr RTLookupRequest_ReportType RTLookupRequest_ReportType_ReportType_MIN = RTLookupRequest_ReportType_REPORT_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_ReportType RTLookupRequest_ReportType_ReportType_MAX = RTLookupRequest_ReportType_SAMPLED_REPORT;
constexpr int RTLookupRequest_ReportType_ReportType_ARRAYSIZE = RTLookupRequest_ReportType_ReportType_MAX + 1;

const std::string& RTLookupRequest_ReportType_Name(RTLookupRequest_ReportType value);
template<typename T>
inline const std::string& RTLookupRequest_ReportType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupRequest_ReportType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupRequest_ReportType_Name.");
  return RTLookupRequest_ReportType_Name(static_cast<RTLookupRequest_ReportType>(enum_t_value));
}
bool RTLookupRequest_ReportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupRequest_ReportType* value);
enum RTLookupRequest_FrameType : int {
  RTLookupRequest_FrameType_FRAME_TYPE_UNSPECIFIED = 0,
  RTLookupRequest_FrameType_MAIN_FRAME = 1,
  RTLookupRequest_FrameType_SUB_FRAME = 2
};
bool RTLookupRequest_FrameType_IsValid(int value);
constexpr RTLookupRequest_FrameType RTLookupRequest_FrameType_FrameType_MIN = RTLookupRequest_FrameType_FRAME_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_FrameType RTLookupRequest_FrameType_FrameType_MAX = RTLookupRequest_FrameType_SUB_FRAME;
constexpr int RTLookupRequest_FrameType_FrameType_ARRAYSIZE = RTLookupRequest_FrameType_FrameType_MAX + 1;

const std::string& RTLookupRequest_FrameType_Name(RTLookupRequest_FrameType value);
template<typename T>
inline const std::string& RTLookupRequest_FrameType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupRequest_FrameType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupRequest_FrameType_Name.");
  return RTLookupRequest_FrameType_Name(static_cast<RTLookupRequest_FrameType>(enum_t_value));
}
bool RTLookupRequest_FrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupRequest_FrameType* value);
enum RTLookupResponse_ThreatInfo_ThreatType : int {
  RTLookupResponse_ThreatInfo_ThreatType_THREAT_TYPE_UNSPECIFIED = 0,
  RTLookupResponse_ThreatInfo_ThreatType_WEB_MALWARE = 1,
  RTLookupResponse_ThreatInfo_ThreatType_SOCIAL_ENGINEERING = 3,
  RTLookupResponse_ThreatInfo_ThreatType_UNWANTED_SOFTWARE = 4,
  RTLookupResponse_ThreatInfo_ThreatType_UNCLEAR_BILLING = 5
};
bool RTLookupResponse_ThreatInfo_ThreatType_IsValid(int value);
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MIN = RTLookupResponse_ThreatInfo_ThreatType_THREAT_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MAX = RTLookupResponse_ThreatInfo_ThreatType_UNCLEAR_BILLING;
constexpr int RTLookupResponse_ThreatInfo_ThreatType_ThreatType_ARRAYSIZE = RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MAX + 1;

const std::string& RTLookupResponse_ThreatInfo_ThreatType_Name(RTLookupResponse_ThreatInfo_ThreatType value);
template<typename T>
inline const std::string& RTLookupResponse_ThreatInfo_ThreatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupResponse_ThreatInfo_ThreatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupResponse_ThreatInfo_ThreatType_Name.");
  return RTLookupResponse_ThreatInfo_ThreatType_Name(static_cast<RTLookupResponse_ThreatInfo_ThreatType>(enum_t_value));
}
bool RTLookupResponse_ThreatInfo_ThreatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupResponse_ThreatInfo_ThreatType* value);
enum RTLookupResponse_ThreatInfo_VerdictType : int {
  RTLookupResponse_ThreatInfo_VerdictType_VERDICT_TYPE_UNSPECIFIED = 0,
  RTLookupResponse_ThreatInfo_VerdictType_SAFE = 1,
  RTLookupResponse_ThreatInfo_VerdictType_DANGEROUS = 100
};
bool RTLookupResponse_ThreatInfo_VerdictType_IsValid(int value);
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MIN = RTLookupResponse_ThreatInfo_VerdictType_VERDICT_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MAX = RTLookupResponse_ThreatInfo_VerdictType_DANGEROUS;
constexpr int RTLookupResponse_ThreatInfo_VerdictType_VerdictType_ARRAYSIZE = RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MAX + 1;

const std::string& RTLookupResponse_ThreatInfo_VerdictType_Name(RTLookupResponse_ThreatInfo_VerdictType value);
template<typename T>
inline const std::string& RTLookupResponse_ThreatInfo_VerdictType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupResponse_ThreatInfo_VerdictType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupResponse_ThreatInfo_VerdictType_Name.");
  return RTLookupResponse_ThreatInfo_VerdictType_Name(static_cast<RTLookupResponse_ThreatInfo_VerdictType>(enum_t_value));
}
bool RTLookupResponse_ThreatInfo_VerdictType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupResponse_ThreatInfo_VerdictType* value);
enum RTLookupResponse_ThreatInfo_CacheExpressionMatchType : int {
  RTLookupResponse_ThreatInfo_CacheExpressionMatchType_MATCH_TYPE_UNSPECIFIED = 0,
  RTLookupResponse_ThreatInfo_CacheExpressionMatchType_COVERING_MATCH = 1,
  RTLookupResponse_ThreatInfo_CacheExpressionMatchType_EXACT_MATCH = 2
};
bool RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(int value);
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MIN = RTLookupResponse_ThreatInfo_CacheExpressionMatchType_MATCH_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MAX = RTLookupResponse_ThreatInfo_CacheExpressionMatchType_EXACT_MATCH;
constexpr int RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_ARRAYSIZE = RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MAX + 1;

const std::string& RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(RTLookupResponse_ThreatInfo_CacheExpressionMatchType value);
template<typename T>
inline const std::string& RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RTLookupResponse_ThreatInfo_CacheExpressionMatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name.");
  return RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(static_cast<RTLookupResponse_ThreatInfo_CacheExpressionMatchType>(enum_t_value));
}
bool RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupResponse_ThreatInfo_CacheExpressionMatchType* value);
// ===================================================================

class RTLookupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.RTLookupRequest) */ {
 public:
  inline RTLookupRequest() : RTLookupRequest(nullptr) {}
  ~RTLookupRequest() override;
  explicit PROTOBUF_CONSTEXPR RTLookupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTLookupRequest(const RTLookupRequest& from);
  RTLookupRequest(RTLookupRequest&& from) noexcept
    : RTLookupRequest() {
    *this = ::std::move(from);
  }

  inline RTLookupRequest& operator=(const RTLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTLookupRequest& operator=(RTLookupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RTLookupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTLookupRequest* internal_default_instance() {
    return reinterpret_cast<const RTLookupRequest*>(
               &_RTLookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RTLookupRequest& a, RTLookupRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RTLookupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTLookupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTLookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RTLookupRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RTLookupRequest& from);
  void MergeFrom(const RTLookupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RTLookupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.RTLookupRequest";
  }
  protected:
  explicit RTLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RTLookupRequest_LookupType LookupType;
  static constexpr LookupType LOOKUP_TYPE_UNSPECIFIED =
    RTLookupRequest_LookupType_LOOKUP_TYPE_UNSPECIFIED;
  static constexpr LookupType NAVIGATION =
    RTLookupRequest_LookupType_NAVIGATION;
  static constexpr LookupType DOWNLOAD =
    RTLookupRequest_LookupType_DOWNLOAD;
  static inline bool LookupType_IsValid(int value) {
    return RTLookupRequest_LookupType_IsValid(value);
  }
  static constexpr LookupType LookupType_MIN =
    RTLookupRequest_LookupType_LookupType_MIN;
  static constexpr LookupType LookupType_MAX =
    RTLookupRequest_LookupType_LookupType_MAX;
  static constexpr int LookupType_ARRAYSIZE =
    RTLookupRequest_LookupType_LookupType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LookupType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LookupType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LookupType_Name.");
    return RTLookupRequest_LookupType_Name(enum_t_value);
  }
  static inline bool LookupType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LookupType* value) {
    return RTLookupRequest_LookupType_Parse(name, value);
  }

  typedef RTLookupRequest_OSType OSType;
  static constexpr OSType OS_TYPE_UNSPECIFIED =
    RTLookupRequest_OSType_OS_TYPE_UNSPECIFIED;
  static constexpr OSType OS_TYPE_ANDROID =
    RTLookupRequest_OSType_OS_TYPE_ANDROID;
  static constexpr OSType OS_TYPE_CHROME_OS =
    RTLookupRequest_OSType_OS_TYPE_CHROME_OS;
  static constexpr OSType OS_TYPE_FUCHSIA =
    RTLookupRequest_OSType_OS_TYPE_FUCHSIA;
  static constexpr OSType OS_TYPE_IOS =
    RTLookupRequest_OSType_OS_TYPE_IOS;
  static constexpr OSType OS_TYPE_LINUX =
    RTLookupRequest_OSType_OS_TYPE_LINUX;
  static constexpr OSType OS_TYPE_MAC =
    RTLookupRequest_OSType_OS_TYPE_MAC;
  static constexpr OSType OS_TYPE_WINDOWS =
    RTLookupRequest_OSType_OS_TYPE_WINDOWS;
  static inline bool OSType_IsValid(int value) {
    return RTLookupRequest_OSType_IsValid(value);
  }
  static constexpr OSType OSType_MIN =
    RTLookupRequest_OSType_OSType_MIN;
  static constexpr OSType OSType_MAX =
    RTLookupRequest_OSType_OSType_MAX;
  static constexpr int OSType_ARRAYSIZE =
    RTLookupRequest_OSType_OSType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& OSType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OSType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OSType_Name.");
    return RTLookupRequest_OSType_Name(enum_t_value);
  }
  static inline bool OSType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OSType* value) {
    return RTLookupRequest_OSType_Parse(name, value);
  }

  typedef RTLookupRequest_ReportType ReportType;
  static constexpr ReportType REPORT_TYPE_UNSPECIFIED =
    RTLookupRequest_ReportType_REPORT_TYPE_UNSPECIFIED;
  static constexpr ReportType FULL_REPORT =
    RTLookupRequest_ReportType_FULL_REPORT;
  static constexpr ReportType SAMPLED_REPORT =
    RTLookupRequest_ReportType_SAMPLED_REPORT;
  static inline bool ReportType_IsValid(int value) {
    return RTLookupRequest_ReportType_IsValid(value);
  }
  static constexpr ReportType ReportType_MIN =
    RTLookupRequest_ReportType_ReportType_MIN;
  static constexpr ReportType ReportType_MAX =
    RTLookupRequest_ReportType_ReportType_MAX;
  static constexpr int ReportType_ARRAYSIZE =
    RTLookupRequest_ReportType_ReportType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReportType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReportType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReportType_Name.");
    return RTLookupRequest_ReportType_Name(enum_t_value);
  }
  static inline bool ReportType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReportType* value) {
    return RTLookupRequest_ReportType_Parse(name, value);
  }

  typedef RTLookupRequest_FrameType FrameType;
  static constexpr FrameType FRAME_TYPE_UNSPECIFIED =
    RTLookupRequest_FrameType_FRAME_TYPE_UNSPECIFIED;
  static constexpr FrameType MAIN_FRAME =
    RTLookupRequest_FrameType_MAIN_FRAME;
  static constexpr FrameType SUB_FRAME =
    RTLookupRequest_FrameType_SUB_FRAME;
  static inline bool FrameType_IsValid(int value) {
    return RTLookupRequest_FrameType_IsValid(value);
  }
  static constexpr FrameType FrameType_MIN =
    RTLookupRequest_FrameType_FrameType_MIN;
  static constexpr FrameType FrameType_MAX =
    RTLookupRequest_FrameType_FrameType_MAX;
  static constexpr int FrameType_ARRAYSIZE =
    RTLookupRequest_FrameType_FrameType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FrameType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameType_Name.");
    return RTLookupRequest_FrameType_Name(enum_t_value);
  }
  static inline bool FrameType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrameType* value) {
    return RTLookupRequest_FrameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReferrerChainFieldNumber = 8,
    kUrlFieldNumber = 1,
    kDEPRECATEDScopedOauthTokenFieldNumber = 4,
    kDmTokenFieldNumber = 5,
    kPopulationFieldNumber = 3,
    kLookupTypeFieldNumber = 2,
    kVersionFieldNumber = 6,
    kOsTypeFieldNumber = 7,
    kReportTypeFieldNumber = 9,
    kFrameTypeFieldNumber = 10,
  };
  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 8;
  int referrer_chain_size() const;
  private:
  int _internal_referrer_chain_size() const;
  public:
  void clear_referrer_chain();
  ::safe_browsing::ReferrerChainEntry* mutable_referrer_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
      mutable_referrer_chain();
  private:
  const ::safe_browsing::ReferrerChainEntry& _internal_referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* _internal_add_referrer_chain();
  public:
  const ::safe_browsing::ReferrerChainEntry& referrer_chain(int index) const;
  ::safe_browsing::ReferrerChainEntry* add_referrer_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
      referrer_chain() const;

  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string DEPRECATED_scoped_oauth_token = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_scoped_oauth_token() const;
  private:
  bool _internal_has_deprecated_scoped_oauth_token() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_scoped_oauth_token();
  PROTOBUF_DEPRECATED const std::string& deprecated_scoped_oauth_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_deprecated_scoped_oauth_token(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_deprecated_scoped_oauth_token();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_deprecated_scoped_oauth_token();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_scoped_oauth_token(std::string* deprecated_scoped_oauth_token);
  private:
  const std::string& _internal_deprecated_scoped_oauth_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated_scoped_oauth_token(const std::string& value);
  std::string* _internal_mutable_deprecated_scoped_oauth_token();
  public:

  // optional string dm_token = 5;
  bool has_dm_token() const;
  private:
  bool _internal_has_dm_token() const;
  public:
  void clear_dm_token();
  const std::string& dm_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dm_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dm_token();
  PROTOBUF_NODISCARD std::string* release_dm_token();
  void set_allocated_dm_token(std::string* dm_token);
  private:
  const std::string& _internal_dm_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dm_token(const std::string& value);
  std::string* _internal_mutable_dm_token();
  public:

  // optional .safe_browsing.ChromeUserPopulation population = 3;
  bool has_population() const;
  private:
  bool _internal_has_population() const;
  public:
  void clear_population();
  const ::safe_browsing::ChromeUserPopulation& population() const;
  PROTOBUF_NODISCARD ::safe_browsing::ChromeUserPopulation* release_population();
  ::safe_browsing::ChromeUserPopulation* mutable_population();
  void set_allocated_population(::safe_browsing::ChromeUserPopulation* population);
  private:
  const ::safe_browsing::ChromeUserPopulation& _internal_population() const;
  ::safe_browsing::ChromeUserPopulation* _internal_mutable_population();
  public:
  void unsafe_arena_set_allocated_population(
      ::safe_browsing::ChromeUserPopulation* population);
  ::safe_browsing::ChromeUserPopulation* unsafe_arena_release_population();

  // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
  bool has_lookup_type() const;
  private:
  bool _internal_has_lookup_type() const;
  public:
  void clear_lookup_type();
  ::safe_browsing::RTLookupRequest_LookupType lookup_type() const;
  void set_lookup_type(::safe_browsing::RTLookupRequest_LookupType value);
  private:
  ::safe_browsing::RTLookupRequest_LookupType _internal_lookup_type() const;
  void _internal_set_lookup_type(::safe_browsing::RTLookupRequest_LookupType value);
  public:

  // optional int32 version = 6 [default = 0];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional .safe_browsing.RTLookupRequest.OSType os_type = 7;
  bool has_os_type() const;
  private:
  bool _internal_has_os_type() const;
  public:
  void clear_os_type();
  ::safe_browsing::RTLookupRequest_OSType os_type() const;
  void set_os_type(::safe_browsing::RTLookupRequest_OSType value);
  private:
  ::safe_browsing::RTLookupRequest_OSType _internal_os_type() const;
  void _internal_set_os_type(::safe_browsing::RTLookupRequest_OSType value);
  public:

  // optional .safe_browsing.RTLookupRequest.ReportType report_type = 9;
  bool has_report_type() const;
  private:
  bool _internal_has_report_type() const;
  public:
  void clear_report_type();
  ::safe_browsing::RTLookupRequest_ReportType report_type() const;
  void set_report_type(::safe_browsing::RTLookupRequest_ReportType value);
  private:
  ::safe_browsing::RTLookupRequest_ReportType _internal_report_type() const;
  void _internal_set_report_type(::safe_browsing::RTLookupRequest_ReportType value);
  public:

  // optional .safe_browsing.RTLookupRequest.FrameType frame_type = 10;
  bool has_frame_type() const;
  private:
  bool _internal_has_frame_type() const;
  public:
  void clear_frame_type();
  ::safe_browsing::RTLookupRequest_FrameType frame_type() const;
  void set_frame_type(::safe_browsing::RTLookupRequest_FrameType value);
  private:
  ::safe_browsing::RTLookupRequest_FrameType _internal_frame_type() const;
  void _internal_set_frame_type(::safe_browsing::RTLookupRequest_FrameType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.RTLookupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry > referrer_chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_scoped_oauth_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_token_;
  ::safe_browsing::ChromeUserPopulation* population_;
  int lookup_type_;
  int32_t version_;
  int os_type_;
  int report_type_;
  int frame_type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2frealtimeapi_2eproto;
};
// -------------------------------------------------------------------

class RTLookupResponse_ThreatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.RTLookupResponse.ThreatInfo) */ {
 public:
  inline RTLookupResponse_ThreatInfo() : RTLookupResponse_ThreatInfo(nullptr) {}
  ~RTLookupResponse_ThreatInfo() override;
  explicit PROTOBUF_CONSTEXPR RTLookupResponse_ThreatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTLookupResponse_ThreatInfo(const RTLookupResponse_ThreatInfo& from);
  RTLookupResponse_ThreatInfo(RTLookupResponse_ThreatInfo&& from) noexcept
    : RTLookupResponse_ThreatInfo() {
    *this = ::std::move(from);
  }

  inline RTLookupResponse_ThreatInfo& operator=(const RTLookupResponse_ThreatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTLookupResponse_ThreatInfo& operator=(RTLookupResponse_ThreatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RTLookupResponse_ThreatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTLookupResponse_ThreatInfo* internal_default_instance() {
    return reinterpret_cast<const RTLookupResponse_ThreatInfo*>(
               &_RTLookupResponse_ThreatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RTLookupResponse_ThreatInfo& a, RTLookupResponse_ThreatInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RTLookupResponse_ThreatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTLookupResponse_ThreatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTLookupResponse_ThreatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RTLookupResponse_ThreatInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RTLookupResponse_ThreatInfo& from);
  void MergeFrom(const RTLookupResponse_ThreatInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RTLookupResponse_ThreatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.RTLookupResponse.ThreatInfo";
  }
  protected:
  explicit RTLookupResponse_ThreatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RTLookupResponse_ThreatInfo_ThreatType ThreatType;
  static constexpr ThreatType THREAT_TYPE_UNSPECIFIED =
    RTLookupResponse_ThreatInfo_ThreatType_THREAT_TYPE_UNSPECIFIED;
  static constexpr ThreatType WEB_MALWARE =
    RTLookupResponse_ThreatInfo_ThreatType_WEB_MALWARE;
  static constexpr ThreatType SOCIAL_ENGINEERING =
    RTLookupResponse_ThreatInfo_ThreatType_SOCIAL_ENGINEERING;
  static constexpr ThreatType UNWANTED_SOFTWARE =
    RTLookupResponse_ThreatInfo_ThreatType_UNWANTED_SOFTWARE;
  static constexpr ThreatType UNCLEAR_BILLING =
    RTLookupResponse_ThreatInfo_ThreatType_UNCLEAR_BILLING;
  static inline bool ThreatType_IsValid(int value) {
    return RTLookupResponse_ThreatInfo_ThreatType_IsValid(value);
  }
  static constexpr ThreatType ThreatType_MIN =
    RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MIN;
  static constexpr ThreatType ThreatType_MAX =
    RTLookupResponse_ThreatInfo_ThreatType_ThreatType_MAX;
  static constexpr int ThreatType_ARRAYSIZE =
    RTLookupResponse_ThreatInfo_ThreatType_ThreatType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ThreatType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ThreatType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ThreatType_Name.");
    return RTLookupResponse_ThreatInfo_ThreatType_Name(enum_t_value);
  }
  static inline bool ThreatType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ThreatType* value) {
    return RTLookupResponse_ThreatInfo_ThreatType_Parse(name, value);
  }

  typedef RTLookupResponse_ThreatInfo_VerdictType VerdictType;
  static constexpr VerdictType VERDICT_TYPE_UNSPECIFIED =
    RTLookupResponse_ThreatInfo_VerdictType_VERDICT_TYPE_UNSPECIFIED;
  static constexpr VerdictType SAFE =
    RTLookupResponse_ThreatInfo_VerdictType_SAFE;
  static constexpr VerdictType DANGEROUS =
    RTLookupResponse_ThreatInfo_VerdictType_DANGEROUS;
  static inline bool VerdictType_IsValid(int value) {
    return RTLookupResponse_ThreatInfo_VerdictType_IsValid(value);
  }
  static constexpr VerdictType VerdictType_MIN =
    RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MIN;
  static constexpr VerdictType VerdictType_MAX =
    RTLookupResponse_ThreatInfo_VerdictType_VerdictType_MAX;
  static constexpr int VerdictType_ARRAYSIZE =
    RTLookupResponse_ThreatInfo_VerdictType_VerdictType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VerdictType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerdictType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerdictType_Name.");
    return RTLookupResponse_ThreatInfo_VerdictType_Name(enum_t_value);
  }
  static inline bool VerdictType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VerdictType* value) {
    return RTLookupResponse_ThreatInfo_VerdictType_Parse(name, value);
  }

  typedef RTLookupResponse_ThreatInfo_CacheExpressionMatchType CacheExpressionMatchType;
  static constexpr CacheExpressionMatchType MATCH_TYPE_UNSPECIFIED =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_MATCH_TYPE_UNSPECIFIED;
  static constexpr CacheExpressionMatchType COVERING_MATCH =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_COVERING_MATCH;
  static constexpr CacheExpressionMatchType EXACT_MATCH =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_EXACT_MATCH;
  static inline bool CacheExpressionMatchType_IsValid(int value) {
    return RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(value);
  }
  static constexpr CacheExpressionMatchType CacheExpressionMatchType_MIN =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MIN;
  static constexpr CacheExpressionMatchType CacheExpressionMatchType_MAX =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_MAX;
  static constexpr int CacheExpressionMatchType_ARRAYSIZE =
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType_CacheExpressionMatchType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CacheExpressionMatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CacheExpressionMatchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CacheExpressionMatchType_Name.");
    return RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(enum_t_value);
  }
  static inline bool CacheExpressionMatchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CacheExpressionMatchType* value) {
    return RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCacheExpressionFieldNumber = 3,
    kCacheExpressionUsingMatchTypeFieldNumber = 6,
    kCacheDurationSecFieldNumber = 2,
    kThreatTypeFieldNumber = 1,
    kVerdictTypeFieldNumber = 4,
    kCacheExpressionMatchTypeFieldNumber = 5,
  };
  // optional string cache_expression = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_cache_expression() const;
  private:
  bool _internal_has_cache_expression() const;
  public:
  PROTOBUF_DEPRECATED void clear_cache_expression();
  PROTOBUF_DEPRECATED const std::string& cache_expression() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_cache_expression(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_cache_expression();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_cache_expression();
  PROTOBUF_DEPRECATED void set_allocated_cache_expression(std::string* cache_expression);
  private:
  const std::string& _internal_cache_expression() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_expression(const std::string& value);
  std::string* _internal_mutable_cache_expression();
  public:

  // optional string cache_expression_using_match_type = 6;
  bool has_cache_expression_using_match_type() const;
  private:
  bool _internal_has_cache_expression_using_match_type() const;
  public:
  void clear_cache_expression_using_match_type();
  const std::string& cache_expression_using_match_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_expression_using_match_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_expression_using_match_type();
  PROTOBUF_NODISCARD std::string* release_cache_expression_using_match_type();
  void set_allocated_cache_expression_using_match_type(std::string* cache_expression_using_match_type);
  private:
  const std::string& _internal_cache_expression_using_match_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_expression_using_match_type(const std::string& value);
  std::string* _internal_mutable_cache_expression_using_match_type();
  public:

  // optional int64 cache_duration_sec = 2;
  bool has_cache_duration_sec() const;
  private:
  bool _internal_has_cache_duration_sec() const;
  public:
  void clear_cache_duration_sec();
  int64_t cache_duration_sec() const;
  void set_cache_duration_sec(int64_t value);
  private:
  int64_t _internal_cache_duration_sec() const;
  void _internal_set_cache_duration_sec(int64_t value);
  public:

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
  bool has_threat_type() const;
  private:
  bool _internal_has_threat_type() const;
  public:
  void clear_threat_type();
  ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType threat_type() const;
  void set_threat_type(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType value);
  private:
  ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType _internal_threat_type() const;
  void _internal_set_threat_type(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType value);
  public:

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
  bool has_verdict_type() const;
  private:
  bool _internal_has_verdict_type() const;
  public:
  void clear_verdict_type();
  ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType verdict_type() const;
  void set_verdict_type(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType value);
  private:
  ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType _internal_verdict_type() const;
  void _internal_set_verdict_type(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType value);
  public:

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
  bool has_cache_expression_match_type() const;
  private:
  bool _internal_has_cache_expression_match_type() const;
  public:
  void clear_cache_expression_match_type();
  ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType cache_expression_match_type() const;
  void set_cache_expression_match_type(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType value);
  private:
  ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType _internal_cache_expression_match_type() const;
  void _internal_set_cache_expression_match_type(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.RTLookupResponse.ThreatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_expression_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_expression_using_match_type_;
  int64_t cache_duration_sec_;
  int threat_type_;
  int verdict_type_;
  int cache_expression_match_type_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2frealtimeapi_2eproto;
};
// -------------------------------------------------------------------

class RTLookupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.RTLookupResponse) */ {
 public:
  inline RTLookupResponse() : RTLookupResponse(nullptr) {}
  ~RTLookupResponse() override;
  explicit PROTOBUF_CONSTEXPR RTLookupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTLookupResponse(const RTLookupResponse& from);
  RTLookupResponse(RTLookupResponse&& from) noexcept
    : RTLookupResponse() {
    *this = ::std::move(from);
  }

  inline RTLookupResponse& operator=(const RTLookupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTLookupResponse& operator=(RTLookupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RTLookupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTLookupResponse* internal_default_instance() {
    return reinterpret_cast<const RTLookupResponse*>(
               &_RTLookupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RTLookupResponse& a, RTLookupResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RTLookupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTLookupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTLookupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RTLookupResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RTLookupResponse& from);
  void MergeFrom(const RTLookupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RTLookupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.RTLookupResponse";
  }
  protected:
  explicit RTLookupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RTLookupResponse_ThreatInfo ThreatInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kThreatInfoFieldNumber = 1,
  };
  // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
  int threat_info_size() const;
  private:
  int _internal_threat_info_size() const;
  public:
  void clear_threat_info();
  ::safe_browsing::RTLookupResponse_ThreatInfo* mutable_threat_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo >*
      mutable_threat_info();
  private:
  const ::safe_browsing::RTLookupResponse_ThreatInfo& _internal_threat_info(int index) const;
  ::safe_browsing::RTLookupResponse_ThreatInfo* _internal_add_threat_info();
  public:
  const ::safe_browsing::RTLookupResponse_ThreatInfo& threat_info(int index) const;
  ::safe_browsing::RTLookupResponse_ThreatInfo* add_threat_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo >&
      threat_info() const;

  // @@protoc_insertion_point(class_scope:safe_browsing.RTLookupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo > threat_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2frealtimeapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RTLookupRequest

// optional string url = 1;
inline bool RTLookupRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RTLookupRequest::has_url() const {
  return _internal_has_url();
}
inline void RTLookupRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RTLookupRequest::url() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RTLookupRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.url)
}
inline std::string* RTLookupRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupRequest.url)
  return _s;
}
inline const std::string& RTLookupRequest::_internal_url() const {
  return url_.Get();
}
inline void RTLookupRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* RTLookupRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* RTLookupRequest::release_url() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RTLookupRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupRequest.url)
}

// optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
inline bool RTLookupRequest::_internal_has_lookup_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RTLookupRequest::has_lookup_type() const {
  return _internal_has_lookup_type();
}
inline void RTLookupRequest::clear_lookup_type() {
  lookup_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::safe_browsing::RTLookupRequest_LookupType RTLookupRequest::_internal_lookup_type() const {
  return static_cast< ::safe_browsing::RTLookupRequest_LookupType >(lookup_type_);
}
inline ::safe_browsing::RTLookupRequest_LookupType RTLookupRequest::lookup_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.lookup_type)
  return _internal_lookup_type();
}
inline void RTLookupRequest::_internal_set_lookup_type(::safe_browsing::RTLookupRequest_LookupType value) {
  assert(::safe_browsing::RTLookupRequest_LookupType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  lookup_type_ = value;
}
inline void RTLookupRequest::set_lookup_type(::safe_browsing::RTLookupRequest_LookupType value) {
  _internal_set_lookup_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.lookup_type)
}

// optional .safe_browsing.ChromeUserPopulation population = 3;
inline bool RTLookupRequest::_internal_has_population() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || population_ != nullptr);
  return value;
}
inline bool RTLookupRequest::has_population() const {
  return _internal_has_population();
}
inline const ::safe_browsing::ChromeUserPopulation& RTLookupRequest::_internal_population() const {
  const ::safe_browsing::ChromeUserPopulation* p = population_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ChromeUserPopulation&>(
      ::safe_browsing::_ChromeUserPopulation_default_instance_);
}
inline const ::safe_browsing::ChromeUserPopulation& RTLookupRequest::population() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.population)
  return _internal_population();
}
inline void RTLookupRequest::unsafe_arena_set_allocated_population(
    ::safe_browsing::ChromeUserPopulation* population) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(population_);
  }
  population_ = population;
  if (population) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.RTLookupRequest.population)
}
inline ::safe_browsing::ChromeUserPopulation* RTLookupRequest::release_population() {
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* RTLookupRequest::unsafe_arena_release_population() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupRequest.population)
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ChromeUserPopulation* temp = population_;
  population_ = nullptr;
  return temp;
}
inline ::safe_browsing::ChromeUserPopulation* RTLookupRequest::_internal_mutable_population() {
  _has_bits_[0] |= 0x00000008u;
  if (population_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ChromeUserPopulation>(GetArenaForAllocation());
    population_ = p;
  }
  return population_;
}
inline ::safe_browsing::ChromeUserPopulation* RTLookupRequest::mutable_population() {
  ::safe_browsing::ChromeUserPopulation* _msg = _internal_mutable_population();
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupRequest.population)
  return _msg;
}
inline void RTLookupRequest::set_allocated_population(::safe_browsing::ChromeUserPopulation* population) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(population_);
  }
  if (population) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(population));
    if (message_arena != submessage_arena) {
      population = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, population, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  population_ = population;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupRequest.population)
}

// optional string DEPRECATED_scoped_oauth_token = 4 [deprecated = true];
inline bool RTLookupRequest::_internal_has_deprecated_scoped_oauth_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RTLookupRequest::has_deprecated_scoped_oauth_token() const {
  return _internal_has_deprecated_scoped_oauth_token();
}
inline void RTLookupRequest::clear_deprecated_scoped_oauth_token() {
  deprecated_scoped_oauth_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RTLookupRequest::deprecated_scoped_oauth_token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.DEPRECATED_scoped_oauth_token)
  return _internal_deprecated_scoped_oauth_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RTLookupRequest::set_deprecated_scoped_oauth_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 deprecated_scoped_oauth_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.DEPRECATED_scoped_oauth_token)
}
inline std::string* RTLookupRequest::mutable_deprecated_scoped_oauth_token() {
  std::string* _s = _internal_mutable_deprecated_scoped_oauth_token();
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupRequest.DEPRECATED_scoped_oauth_token)
  return _s;
}
inline const std::string& RTLookupRequest::_internal_deprecated_scoped_oauth_token() const {
  return deprecated_scoped_oauth_token_.Get();
}
inline void RTLookupRequest::_internal_set_deprecated_scoped_oauth_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  deprecated_scoped_oauth_token_.Set(value, GetArenaForAllocation());
}
inline std::string* RTLookupRequest::_internal_mutable_deprecated_scoped_oauth_token() {
  _has_bits_[0] |= 0x00000002u;
  return deprecated_scoped_oauth_token_.Mutable(GetArenaForAllocation());
}
inline std::string* RTLookupRequest::release_deprecated_scoped_oauth_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupRequest.DEPRECATED_scoped_oauth_token)
  if (!_internal_has_deprecated_scoped_oauth_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = deprecated_scoped_oauth_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_scoped_oauth_token_.IsDefault()) {
    deprecated_scoped_oauth_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RTLookupRequest::set_allocated_deprecated_scoped_oauth_token(std::string* deprecated_scoped_oauth_token) {
  if (deprecated_scoped_oauth_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  deprecated_scoped_oauth_token_.SetAllocated(deprecated_scoped_oauth_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_scoped_oauth_token_.IsDefault()) {
    deprecated_scoped_oauth_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupRequest.DEPRECATED_scoped_oauth_token)
}

// optional string dm_token = 5;
inline bool RTLookupRequest::_internal_has_dm_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RTLookupRequest::has_dm_token() const {
  return _internal_has_dm_token();
}
inline void RTLookupRequest::clear_dm_token() {
  dm_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RTLookupRequest::dm_token() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.dm_token)
  return _internal_dm_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RTLookupRequest::set_dm_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 dm_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.dm_token)
}
inline std::string* RTLookupRequest::mutable_dm_token() {
  std::string* _s = _internal_mutable_dm_token();
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupRequest.dm_token)
  return _s;
}
inline const std::string& RTLookupRequest::_internal_dm_token() const {
  return dm_token_.Get();
}
inline void RTLookupRequest::_internal_set_dm_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  dm_token_.Set(value, GetArenaForAllocation());
}
inline std::string* RTLookupRequest::_internal_mutable_dm_token() {
  _has_bits_[0] |= 0x00000004u;
  return dm_token_.Mutable(GetArenaForAllocation());
}
inline std::string* RTLookupRequest::release_dm_token() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupRequest.dm_token)
  if (!_internal_has_dm_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = dm_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_token_.IsDefault()) {
    dm_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RTLookupRequest::set_allocated_dm_token(std::string* dm_token) {
  if (dm_token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dm_token_.SetAllocated(dm_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_token_.IsDefault()) {
    dm_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupRequest.dm_token)
}

// optional int32 version = 6 [default = 0];
inline bool RTLookupRequest::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RTLookupRequest::has_version() const {
  return _internal_has_version();
}
inline void RTLookupRequest::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t RTLookupRequest::_internal_version() const {
  return version_;
}
inline int32_t RTLookupRequest::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.version)
  return _internal_version();
}
inline void RTLookupRequest::_internal_set_version(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  version_ = value;
}
inline void RTLookupRequest::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.version)
}

// optional .safe_browsing.RTLookupRequest.OSType os_type = 7;
inline bool RTLookupRequest::_internal_has_os_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RTLookupRequest::has_os_type() const {
  return _internal_has_os_type();
}
inline void RTLookupRequest::clear_os_type() {
  os_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::safe_browsing::RTLookupRequest_OSType RTLookupRequest::_internal_os_type() const {
  return static_cast< ::safe_browsing::RTLookupRequest_OSType >(os_type_);
}
inline ::safe_browsing::RTLookupRequest_OSType RTLookupRequest::os_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.os_type)
  return _internal_os_type();
}
inline void RTLookupRequest::_internal_set_os_type(::safe_browsing::RTLookupRequest_OSType value) {
  assert(::safe_browsing::RTLookupRequest_OSType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  os_type_ = value;
}
inline void RTLookupRequest::set_os_type(::safe_browsing::RTLookupRequest_OSType value) {
  _internal_set_os_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.os_type)
}

// repeated .safe_browsing.ReferrerChainEntry referrer_chain = 8;
inline int RTLookupRequest::_internal_referrer_chain_size() const {
  return referrer_chain_.size();
}
inline int RTLookupRequest::referrer_chain_size() const {
  return _internal_referrer_chain_size();
}
inline ::safe_browsing::ReferrerChainEntry* RTLookupRequest::mutable_referrer_chain(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupRequest.referrer_chain)
  return referrer_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >*
RTLookupRequest::mutable_referrer_chain() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.RTLookupRequest.referrer_chain)
  return &referrer_chain_;
}
inline const ::safe_browsing::ReferrerChainEntry& RTLookupRequest::_internal_referrer_chain(int index) const {
  return referrer_chain_.Get(index);
}
inline const ::safe_browsing::ReferrerChainEntry& RTLookupRequest::referrer_chain(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.referrer_chain)
  return _internal_referrer_chain(index);
}
inline ::safe_browsing::ReferrerChainEntry* RTLookupRequest::_internal_add_referrer_chain() {
  return referrer_chain_.Add();
}
inline ::safe_browsing::ReferrerChainEntry* RTLookupRequest::add_referrer_chain() {
  ::safe_browsing::ReferrerChainEntry* _add = _internal_add_referrer_chain();
  // @@protoc_insertion_point(field_add:safe_browsing.RTLookupRequest.referrer_chain)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ReferrerChainEntry >&
RTLookupRequest::referrer_chain() const {
  // @@protoc_insertion_point(field_list:safe_browsing.RTLookupRequest.referrer_chain)
  return referrer_chain_;
}

// optional .safe_browsing.RTLookupRequest.ReportType report_type = 9;
inline bool RTLookupRequest::_internal_has_report_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RTLookupRequest::has_report_type() const {
  return _internal_has_report_type();
}
inline void RTLookupRequest::clear_report_type() {
  report_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::safe_browsing::RTLookupRequest_ReportType RTLookupRequest::_internal_report_type() const {
  return static_cast< ::safe_browsing::RTLookupRequest_ReportType >(report_type_);
}
inline ::safe_browsing::RTLookupRequest_ReportType RTLookupRequest::report_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.report_type)
  return _internal_report_type();
}
inline void RTLookupRequest::_internal_set_report_type(::safe_browsing::RTLookupRequest_ReportType value) {
  assert(::safe_browsing::RTLookupRequest_ReportType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  report_type_ = value;
}
inline void RTLookupRequest::set_report_type(::safe_browsing::RTLookupRequest_ReportType value) {
  _internal_set_report_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.report_type)
}

// optional .safe_browsing.RTLookupRequest.FrameType frame_type = 10;
inline bool RTLookupRequest::_internal_has_frame_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RTLookupRequest::has_frame_type() const {
  return _internal_has_frame_type();
}
inline void RTLookupRequest::clear_frame_type() {
  frame_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::safe_browsing::RTLookupRequest_FrameType RTLookupRequest::_internal_frame_type() const {
  return static_cast< ::safe_browsing::RTLookupRequest_FrameType >(frame_type_);
}
inline ::safe_browsing::RTLookupRequest_FrameType RTLookupRequest::frame_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupRequest.frame_type)
  return _internal_frame_type();
}
inline void RTLookupRequest::_internal_set_frame_type(::safe_browsing::RTLookupRequest_FrameType value) {
  assert(::safe_browsing::RTLookupRequest_FrameType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  frame_type_ = value;
}
inline void RTLookupRequest::set_frame_type(::safe_browsing::RTLookupRequest_FrameType value) {
  _internal_set_frame_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupRequest.frame_type)
}

// -------------------------------------------------------------------

// RTLookupResponse_ThreatInfo

// optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
inline bool RTLookupResponse_ThreatInfo::_internal_has_threat_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RTLookupResponse_ThreatInfo::has_threat_type() const {
  return _internal_has_threat_type();
}
inline void RTLookupResponse_ThreatInfo::clear_threat_type() {
  threat_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::_internal_threat_type() const {
  return static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType >(threat_type_);
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::threat_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.threat_type)
  return _internal_threat_type();
}
inline void RTLookupResponse_ThreatInfo::_internal_set_threat_type(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType value) {
  assert(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  threat_type_ = value;
}
inline void RTLookupResponse_ThreatInfo::set_threat_type(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType value) {
  _internal_set_threat_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.threat_type)
}

// optional int64 cache_duration_sec = 2;
inline bool RTLookupResponse_ThreatInfo::_internal_has_cache_duration_sec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RTLookupResponse_ThreatInfo::has_cache_duration_sec() const {
  return _internal_has_cache_duration_sec();
}
inline void RTLookupResponse_ThreatInfo::clear_cache_duration_sec() {
  cache_duration_sec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t RTLookupResponse_ThreatInfo::_internal_cache_duration_sec() const {
  return cache_duration_sec_;
}
inline int64_t RTLookupResponse_ThreatInfo::cache_duration_sec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.cache_duration_sec)
  return _internal_cache_duration_sec();
}
inline void RTLookupResponse_ThreatInfo::_internal_set_cache_duration_sec(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  cache_duration_sec_ = value;
}
inline void RTLookupResponse_ThreatInfo::set_cache_duration_sec(int64_t value) {
  _internal_set_cache_duration_sec(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.cache_duration_sec)
}

// optional string cache_expression = 3 [deprecated = true];
inline bool RTLookupResponse_ThreatInfo::_internal_has_cache_expression() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RTLookupResponse_ThreatInfo::has_cache_expression() const {
  return _internal_has_cache_expression();
}
inline void RTLookupResponse_ThreatInfo::clear_cache_expression() {
  cache_expression_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RTLookupResponse_ThreatInfo::cache_expression() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
  return _internal_cache_expression();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RTLookupResponse_ThreatInfo::set_cache_expression(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cache_expression_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
}
inline std::string* RTLookupResponse_ThreatInfo::mutable_cache_expression() {
  std::string* _s = _internal_mutable_cache_expression();
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
  return _s;
}
inline const std::string& RTLookupResponse_ThreatInfo::_internal_cache_expression() const {
  return cache_expression_.Get();
}
inline void RTLookupResponse_ThreatInfo::_internal_set_cache_expression(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_expression_.Set(value, GetArenaForAllocation());
}
inline std::string* RTLookupResponse_ThreatInfo::_internal_mutable_cache_expression() {
  _has_bits_[0] |= 0x00000001u;
  return cache_expression_.Mutable(GetArenaForAllocation());
}
inline std::string* RTLookupResponse_ThreatInfo::release_cache_expression() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
  if (!_internal_has_cache_expression()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cache_expression_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_expression_.IsDefault()) {
    cache_expression_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RTLookupResponse_ThreatInfo::set_allocated_cache_expression(std::string* cache_expression) {
  if (cache_expression != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_expression_.SetAllocated(cache_expression, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_expression_.IsDefault()) {
    cache_expression_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression)
}

// optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
inline bool RTLookupResponse_ThreatInfo::_internal_has_verdict_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RTLookupResponse_ThreatInfo::has_verdict_type() const {
  return _internal_has_verdict_type();
}
inline void RTLookupResponse_ThreatInfo::clear_verdict_type() {
  verdict_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::_internal_verdict_type() const {
  return static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType >(verdict_type_);
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::verdict_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.verdict_type)
  return _internal_verdict_type();
}
inline void RTLookupResponse_ThreatInfo::_internal_set_verdict_type(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType value) {
  assert(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  verdict_type_ = value;
}
inline void RTLookupResponse_ThreatInfo::set_verdict_type(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType value) {
  _internal_set_verdict_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.verdict_type)
}

// optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
inline bool RTLookupResponse_ThreatInfo::_internal_has_cache_expression_match_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RTLookupResponse_ThreatInfo::has_cache_expression_match_type() const {
  return _internal_has_cache_expression_match_type();
}
inline void RTLookupResponse_ThreatInfo::clear_cache_expression_match_type() {
  cache_expression_match_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::_internal_cache_expression_match_type() const {
  return static_cast< ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType >(cache_expression_match_type_);
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::cache_expression_match_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_match_type)
  return _internal_cache_expression_match_type();
}
inline void RTLookupResponse_ThreatInfo::_internal_set_cache_expression_match_type(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType value) {
  assert(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  cache_expression_match_type_ = value;
}
inline void RTLookupResponse_ThreatInfo::set_cache_expression_match_type(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType value) {
  _internal_set_cache_expression_match_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_match_type)
}

// optional string cache_expression_using_match_type = 6;
inline bool RTLookupResponse_ThreatInfo::_internal_has_cache_expression_using_match_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RTLookupResponse_ThreatInfo::has_cache_expression_using_match_type() const {
  return _internal_has_cache_expression_using_match_type();
}
inline void RTLookupResponse_ThreatInfo::clear_cache_expression_using_match_type() {
  cache_expression_using_match_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RTLookupResponse_ThreatInfo::cache_expression_using_match_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
  return _internal_cache_expression_using_match_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RTLookupResponse_ThreatInfo::set_cache_expression_using_match_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 cache_expression_using_match_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
}
inline std::string* RTLookupResponse_ThreatInfo::mutable_cache_expression_using_match_type() {
  std::string* _s = _internal_mutable_cache_expression_using_match_type();
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
  return _s;
}
inline const std::string& RTLookupResponse_ThreatInfo::_internal_cache_expression_using_match_type() const {
  return cache_expression_using_match_type_.Get();
}
inline void RTLookupResponse_ThreatInfo::_internal_set_cache_expression_using_match_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_expression_using_match_type_.Set(value, GetArenaForAllocation());
}
inline std::string* RTLookupResponse_ThreatInfo::_internal_mutable_cache_expression_using_match_type() {
  _has_bits_[0] |= 0x00000002u;
  return cache_expression_using_match_type_.Mutable(GetArenaForAllocation());
}
inline std::string* RTLookupResponse_ThreatInfo::release_cache_expression_using_match_type() {
  // @@protoc_insertion_point(field_release:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
  if (!_internal_has_cache_expression_using_match_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = cache_expression_using_match_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_expression_using_match_type_.IsDefault()) {
    cache_expression_using_match_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RTLookupResponse_ThreatInfo::set_allocated_cache_expression_using_match_type(std::string* cache_expression_using_match_type) {
  if (cache_expression_using_match_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cache_expression_using_match_type_.SetAllocated(cache_expression_using_match_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_expression_using_match_type_.IsDefault()) {
    cache_expression_using_match_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.RTLookupResponse.ThreatInfo.cache_expression_using_match_type)
}

// -------------------------------------------------------------------

// RTLookupResponse

// repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
inline int RTLookupResponse::_internal_threat_info_size() const {
  return threat_info_.size();
}
inline int RTLookupResponse::threat_info_size() const {
  return _internal_threat_info_size();
}
inline void RTLookupResponse::clear_threat_info() {
  threat_info_.Clear();
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo* RTLookupResponse::mutable_threat_info(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.RTLookupResponse.threat_info)
  return threat_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo >*
RTLookupResponse::mutable_threat_info() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.RTLookupResponse.threat_info)
  return &threat_info_;
}
inline const ::safe_browsing::RTLookupResponse_ThreatInfo& RTLookupResponse::_internal_threat_info(int index) const {
  return threat_info_.Get(index);
}
inline const ::safe_browsing::RTLookupResponse_ThreatInfo& RTLookupResponse::threat_info(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.RTLookupResponse.threat_info)
  return _internal_threat_info(index);
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo* RTLookupResponse::_internal_add_threat_info() {
  return threat_info_.Add();
}
inline ::safe_browsing::RTLookupResponse_ThreatInfo* RTLookupResponse::add_threat_info() {
  ::safe_browsing::RTLookupResponse_ThreatInfo* _add = _internal_add_threat_info();
  // @@protoc_insertion_point(field_add:safe_browsing.RTLookupResponse.threat_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::RTLookupResponse_ThreatInfo >&
RTLookupResponse::threat_info() const {
  // @@protoc_insertion_point(field_list:safe_browsing.RTLookupResponse.threat_info)
  return threat_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::safe_browsing::RTLookupRequest_LookupType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupRequest_OSType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupRequest_ReportType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupRequest_FrameType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType> : ::std::true_type {};
template <> struct is_proto_enum< ::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fcommon_2fproto_2frealtimeapi_2eproto
