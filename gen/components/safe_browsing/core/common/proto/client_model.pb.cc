// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/safe_browsing/core/common/proto/client_model.proto

#include "components/safe_browsing/core/common/proto/client_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safe_browsing {
PROTOBUF_CONSTEXPR ClientSideModel_Rule::ClientSideModel_Rule(
    ::_pbi::ConstantInitialized)
  : feature_()
  , weight_(0){}
struct ClientSideModel_RuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSideModel_RuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSideModel_RuleDefaultTypeInternal() {}
  union {
    ClientSideModel_Rule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSideModel_RuleDefaultTypeInternal _ClientSideModel_Rule_default_instance_;
PROTOBUF_CONSTEXPR ClientSideModel_IPSubnet::ClientSideModel_IPSubnet(
    ::_pbi::ConstantInitialized)
  : prefix_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , size_(128){}
struct ClientSideModel_IPSubnetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSideModel_IPSubnetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSideModel_IPSubnetDefaultTypeInternal() {}
  union {
    ClientSideModel_IPSubnet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSideModel_IPSubnetDefaultTypeInternal _ClientSideModel_IPSubnet_default_instance_;
PROTOBUF_CONSTEXPR ClientSideModel::ClientSideModel(
    ::_pbi::ConstantInitialized)
  : hashes_()
  , rule_()
  , page_term_()
  , page_word_()
  , bad_subnet_()
  , tflite_metadata_(nullptr)
  , max_words_per_term_(0)
  , version_(0)
  , murmur_hash_seed_(0u)
  , dom_model_version_(0)
  , threshold_probability_(0.5f)
  , max_shingles_per_page_(200)
  , shingle_size_(4){}
struct ClientSideModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSideModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSideModelDefaultTypeInternal() {}
  union {
    ClientSideModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSideModelDefaultTypeInternal _ClientSideModel_default_instance_;
PROTOBUF_CONSTEXPR TfLiteModelMetadata_Threshold::TfLiteModelMetadata_Threshold(
    ::_pbi::ConstantInitialized)
  : label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , threshold_(0){}
struct TfLiteModelMetadata_ThresholdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TfLiteModelMetadata_ThresholdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TfLiteModelMetadata_ThresholdDefaultTypeInternal() {}
  union {
    TfLiteModelMetadata_Threshold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TfLiteModelMetadata_ThresholdDefaultTypeInternal _TfLiteModelMetadata_Threshold_default_instance_;
PROTOBUF_CONSTEXPR TfLiteModelMetadata::TfLiteModelMetadata(
    ::_pbi::ConstantInitialized)
  : thresholds_()
  , model_version_(0)
  , input_width_(0)
  , input_height_(0){}
struct TfLiteModelMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TfLiteModelMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TfLiteModelMetadataDefaultTypeInternal() {}
  union {
    TfLiteModelMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TfLiteModelMetadataDefaultTypeInternal _TfLiteModelMetadata_default_instance_;
}  // namespace safe_browsing
namespace safe_browsing {

// ===================================================================

class ClientSideModel_Rule::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSideModel_Rule>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientSideModel_Rule::ClientSideModel_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  feature_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSideModel.Rule)
}
ClientSideModel_Rule::ClientSideModel_Rule(const ClientSideModel_Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSideModel.Rule)
}

inline void ClientSideModel_Rule::SharedCtor() {
weight_ = 0;
}

ClientSideModel_Rule::~ClientSideModel_Rule() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSideModel.Rule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSideModel_Rule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientSideModel_Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSideModel_Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSideModel.Rule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSideModel_Rule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_feature(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_feature(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSideModel_Rule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSideModel.Rule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 feature = 1;
  for (int i = 0, n = this->_internal_feature_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_feature(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required float weight = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSideModel.Rule)
  return target;
}

size_t ClientSideModel_Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSideModel.Rule)
  size_t total_size = 0;

  // required float weight = 2;
  if (_internal_has_weight()) {
    total_size += 1 + 4;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 feature = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->feature_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_feature_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSideModel_Rule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSideModel_Rule*>(
      &from));
}

void ClientSideModel_Rule::MergeFrom(const ClientSideModel_Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSideModel.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from._internal_has_weight()) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSideModel_Rule::CopyFrom(const ClientSideModel_Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSideModel.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSideModel_Rule::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientSideModel_Rule::InternalSwap(ClientSideModel_Rule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_.InternalSwap(&other->feature_);
  swap(weight_, other->weight_);
}

std::string ClientSideModel_Rule::GetTypeName() const {
  return "safe_browsing.ClientSideModel.Rule";
}


// ===================================================================

class ClientSideModel_IPSubnet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSideModel_IPSubnet>()._has_bits_);
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientSideModel_IPSubnet::ClientSideModel_IPSubnet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSideModel.IPSubnet)
}
ClientSideModel_IPSubnet::ClientSideModel_IPSubnet(const ClientSideModel_IPSubnet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prefix()) {
    prefix_.Set(from._internal_prefix(), 
      GetArenaForAllocation());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSideModel.IPSubnet)
}

inline void ClientSideModel_IPSubnet::SharedCtor() {
prefix_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
size_ = 128;
}

ClientSideModel_IPSubnet::~ClientSideModel_IPSubnet() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSideModel.IPSubnet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSideModel_IPSubnet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.Destroy();
}

void ClientSideModel_IPSubnet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSideModel_IPSubnet::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSideModel.IPSubnet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prefix_.ClearNonDefaultToEmpty();
    }
    size_ = 128;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSideModel_IPSubnet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 size = 2 [default = 128];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSideModel_IPSubnet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSideModel.IPSubnet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // optional int32 size = 2 [default = 128];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSideModel.IPSubnet)
  return target;
}

size_t ClientSideModel_IPSubnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSideModel.IPSubnet)
  size_t total_size = 0;

  // required bytes prefix = 1;
  if (_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 size = 2 [default = 128];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSideModel_IPSubnet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSideModel_IPSubnet*>(
      &from));
}

void ClientSideModel_IPSubnet::MergeFrom(const ClientSideModel_IPSubnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSideModel.IPSubnet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_prefix(from._internal_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSideModel_IPSubnet::CopyFrom(const ClientSideModel_IPSubnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSideModel.IPSubnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSideModel_IPSubnet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientSideModel_IPSubnet::InternalSwap(ClientSideModel_IPSubnet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  swap(size_, other->size_);
}

std::string ClientSideModel_IPSubnet::GetTypeName() const {
  return "safe_browsing.ClientSideModel.IPSubnet";
}


// ===================================================================

class ClientSideModel::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSideModel>()._has_bits_);
  static void set_has_max_words_per_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dom_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_murmur_hash_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_shingles_per_page(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_shingle_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_threshold_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::safe_browsing::TfLiteModelMetadata& tflite_metadata(const ClientSideModel* msg);
  static void set_has_tflite_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::safe_browsing::TfLiteModelMetadata&
ClientSideModel::_Internal::tflite_metadata(const ClientSideModel* msg) {
  return *msg->tflite_metadata_;
}
ClientSideModel::ClientSideModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  hashes_(arena),
  rule_(arena),
  page_term_(arena),
  page_word_(arena),
  bad_subnet_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSideModel)
}
ClientSideModel::ClientSideModel(const ClientSideModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      hashes_(from.hashes_),
      rule_(from.rule_),
      page_term_(from.page_term_),
      page_word_(from.page_word_),
      bad_subnet_(from.bad_subnet_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_tflite_metadata()) {
    tflite_metadata_ = new ::safe_browsing::TfLiteModelMetadata(*from.tflite_metadata_);
  } else {
    tflite_metadata_ = nullptr;
  }
  ::memcpy(&max_words_per_term_, &from.max_words_per_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&shingle_size_) -
    reinterpret_cast<char*>(&max_words_per_term_)) + sizeof(shingle_size_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSideModel)
}

inline void ClientSideModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tflite_metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dom_model_version_) -
    reinterpret_cast<char*>(&tflite_metadata_)) + sizeof(dom_model_version_));
threshold_probability_ = 0.5f;
max_shingles_per_page_ = 200;
shingle_size_ = 4;
}

ClientSideModel::~ClientSideModel() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSideModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSideModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tflite_metadata_;
}

void ClientSideModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSideModel::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSideModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  rule_.Clear();
  page_term_.Clear();
  page_word_.Clear();
  bad_subnet_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tflite_metadata_ != nullptr);
    tflite_metadata_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&max_words_per_term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dom_model_version_) -
        reinterpret_cast<char*>(&max_words_per_term_)) + sizeof(dom_model_version_));
    threshold_probability_ = 0.5f;
    max_shingles_per_page_ = 200;
    shingle_size_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSideModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientSideModel.Rule rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 page_term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_page_term(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_page_term(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 page_word = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_page_word(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_page_word(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 max_words_per_term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_words_per_term(&has_bits);
          max_words_per_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bad_subnet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 murmur_hash_seed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_murmur_hash_seed(&has_bits);
          murmur_hash_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_shingles_per_page = 9 [default = 200];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_max_shingles_per_page(&has_bits);
          max_shingles_per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shingle_size = 10 [default = 4];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_shingle_size(&has_bits);
          shingle_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float threshold_probability = 11 [default = 0.5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_threshold_probability(&has_bits);
          threshold_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.TfLiteModelMetadata tflite_metadata = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tflite_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dom_model_version = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_dom_model_version(&has_bits);
          dom_model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSideModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSideModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  for (int i = 0, n = this->_internal_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_hashes(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated .safe_browsing.ClientSideModel.Rule rule = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rule_size()); i < n; i++) {
    const auto& repfield = this->_internal_rule(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 page_term = 3;
  for (int i = 0, n = this->_internal_page_term_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_page_term(i), target);
  }

  // repeated fixed32 page_word = 4;
  for (int i = 0, n = this->_internal_page_word_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_page_word(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 max_words_per_term = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_words_per_term(), target);
  }

  // optional int32 version = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_version(), target);
  }

  // repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bad_subnet_size()); i < n; i++) {
    const auto& repfield = this->_internal_bad_subnet(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed32 murmur_hash_seed = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_murmur_hash_seed(), target);
  }

  // optional int32 max_shingles_per_page = 9 [default = 200];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_shingles_per_page(), target);
  }

  // optional int32 shingle_size = 10 [default = 4];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_shingle_size(), target);
  }

  // optional float threshold_probability = 11 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_threshold_probability(), target);
  }

  // optional .safe_browsing.TfLiteModelMetadata tflite_metadata = 17;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tflite_metadata(this),
        _Internal::tflite_metadata(this).GetCachedSize(), target, stream);
  }

  // optional int32 dom_model_version = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_dom_model_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSideModel)
  return target;
}

size_t ClientSideModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSideModel)
  size_t total_size = 0;

  // required int32 max_words_per_term = 5;
  if (_internal_has_max_words_per_term()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_words_per_term());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hashes_.size());
  for (int i = 0, n = hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      hashes_.Get(i));
  }

  // repeated .safe_browsing.ClientSideModel.Rule rule = 2;
  total_size += 1UL * this->_internal_rule_size();
  for (const auto& msg : this->rule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 page_term = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->page_term_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_page_term_size());
    total_size += data_size;
  }

  // repeated fixed32 page_word = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_page_word_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_page_word_size());
    total_size += data_size;
  }

  // repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
  total_size += 1UL * this->_internal_bad_subnet_size();
  for (const auto& msg : this->bad_subnet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .safe_browsing.TfLiteModelMetadata tflite_metadata = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tflite_metadata_);
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional int32 version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional fixed32 murmur_hash_seed = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 dom_model_version = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dom_model_version());
    }

    // optional float threshold_probability = 11 [default = 0.5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 max_shingles_per_page = 9 [default = 200];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_shingles_per_page());
    }

    // optional int32 shingle_size = 10 [default = 4];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shingle_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSideModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSideModel*>(
      &from));
}

void ClientSideModel::MergeFrom(const ClientSideModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSideModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  rule_.MergeFrom(from.rule_);
  page_term_.MergeFrom(from.page_term_);
  page_word_.MergeFrom(from.page_word_);
  bad_subnet_.MergeFrom(from.bad_subnet_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tflite_metadata()->::safe_browsing::TfLiteModelMetadata::MergeFrom(from._internal_tflite_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      max_words_per_term_ = from.max_words_per_term_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      murmur_hash_seed_ = from.murmur_hash_seed_;
    }
    if (cached_has_bits & 0x00000010u) {
      dom_model_version_ = from.dom_model_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      threshold_probability_ = from.threshold_probability_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_shingles_per_page_ = from.max_shingles_per_page_;
    }
    if (cached_has_bits & 0x00000080u) {
      shingle_size_ = from.shingle_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSideModel::CopyFrom(const ClientSideModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSideModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSideModel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rule_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bad_subnet_))
    return false;
  return true;
}

void ClientSideModel::InternalSwap(ClientSideModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hashes_.InternalSwap(&other->hashes_);
  rule_.InternalSwap(&other->rule_);
  page_term_.InternalSwap(&other->page_term_);
  page_word_.InternalSwap(&other->page_word_);
  bad_subnet_.InternalSwap(&other->bad_subnet_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSideModel, dom_model_version_)
      + sizeof(ClientSideModel::dom_model_version_)
      - PROTOBUF_FIELD_OFFSET(ClientSideModel, tflite_metadata_)>(
          reinterpret_cast<char*>(&tflite_metadata_),
          reinterpret_cast<char*>(&other->tflite_metadata_));
  swap(threshold_probability_, other->threshold_probability_);
  swap(max_shingles_per_page_, other->max_shingles_per_page_);
  swap(shingle_size_, other->shingle_size_);
}

std::string ClientSideModel::GetTypeName() const {
  return "safe_browsing.ClientSideModel";
}


// ===================================================================

class TfLiteModelMetadata_Threshold::_Internal {
 public:
  using HasBits = decltype(std::declval<TfLiteModelMetadata_Threshold>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TfLiteModelMetadata_Threshold::TfLiteModelMetadata_Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.TfLiteModelMetadata.Threshold)
}
TfLiteModelMetadata_Threshold::TfLiteModelMetadata_Threshold(const TfLiteModelMetadata_Threshold& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.TfLiteModelMetadata.Threshold)
}

inline void TfLiteModelMetadata_Threshold::SharedCtor() {
label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
threshold_ = 0;
}

TfLiteModelMetadata_Threshold::~TfLiteModelMetadata_Threshold() {
  // @@protoc_insertion_point(destructor:safe_browsing.TfLiteModelMetadata.Threshold)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TfLiteModelMetadata_Threshold::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.Destroy();
}

void TfLiteModelMetadata_Threshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TfLiteModelMetadata_Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.TfLiteModelMetadata.Threshold)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TfLiteModelMetadata_Threshold::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TfLiteModelMetadata_Threshold::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.TfLiteModelMetadata.Threshold)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional float threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.TfLiteModelMetadata.Threshold)
  return target;
}

size_t TfLiteModelMetadata_Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.TfLiteModelMetadata.Threshold)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional float threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfLiteModelMetadata_Threshold::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TfLiteModelMetadata_Threshold*>(
      &from));
}

void TfLiteModelMetadata_Threshold::MergeFrom(const TfLiteModelMetadata_Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.TfLiteModelMetadata.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      threshold_ = from.threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TfLiteModelMetadata_Threshold::CopyFrom(const TfLiteModelMetadata_Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.TfLiteModelMetadata.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfLiteModelMetadata_Threshold::IsInitialized() const {
  return true;
}

void TfLiteModelMetadata_Threshold::InternalSwap(TfLiteModelMetadata_Threshold* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  swap(threshold_, other->threshold_);
}

std::string TfLiteModelMetadata_Threshold::GetTypeName() const {
  return "safe_browsing.TfLiteModelMetadata.Threshold";
}


// ===================================================================

class TfLiteModelMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<TfLiteModelMetadata>()._has_bits_);
  static void set_has_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_input_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TfLiteModelMetadata::TfLiteModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  thresholds_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.TfLiteModelMetadata)
}
TfLiteModelMetadata::TfLiteModelMetadata(const TfLiteModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      thresholds_(from.thresholds_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&model_version_, &from.model_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_height_) -
    reinterpret_cast<char*>(&model_version_)) + sizeof(input_height_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.TfLiteModelMetadata)
}

inline void TfLiteModelMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_height_) -
    reinterpret_cast<char*>(&model_version_)) + sizeof(input_height_));
}

TfLiteModelMetadata::~TfLiteModelMetadata() {
  // @@protoc_insertion_point(destructor:safe_browsing.TfLiteModelMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TfLiteModelMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TfLiteModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TfLiteModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.TfLiteModelMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thresholds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&model_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_height_) -
        reinterpret_cast<char*>(&model_version_)) + sizeof(input_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TfLiteModelMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 model_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_model_version(&has_bits);
          model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.TfLiteModelMetadata.Threshold thresholds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thresholds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_input_width(&has_bits);
          input_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_input_height(&has_bits);
          input_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TfLiteModelMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.TfLiteModelMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 model_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_model_version(), target);
  }

  // repeated .safe_browsing.TfLiteModelMetadata.Threshold thresholds = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thresholds_size()); i < n; i++) {
    const auto& repfield = this->_internal_thresholds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 input_width = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_input_width(), target);
  }

  // optional int32 input_height = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_input_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.TfLiteModelMetadata)
  return target;
}

size_t TfLiteModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.TfLiteModelMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.TfLiteModelMetadata.Threshold thresholds = 2;
  total_size += 1UL * this->_internal_thresholds_size();
  for (const auto& msg : this->thresholds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 model_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model_version());
    }

    // optional int32 input_width = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_input_width());
    }

    // optional int32 input_height = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_input_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfLiteModelMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TfLiteModelMetadata*>(
      &from));
}

void TfLiteModelMetadata::MergeFrom(const TfLiteModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.TfLiteModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  thresholds_.MergeFrom(from.thresholds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      model_version_ = from.model_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      input_width_ = from.input_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      input_height_ = from.input_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TfLiteModelMetadata::CopyFrom(const TfLiteModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.TfLiteModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfLiteModelMetadata::IsInitialized() const {
  return true;
}

void TfLiteModelMetadata::InternalSwap(TfLiteModelMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thresholds_.InternalSwap(&other->thresholds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TfLiteModelMetadata, input_height_)
      + sizeof(TfLiteModelMetadata::input_height_)
      - PROTOBUF_FIELD_OFFSET(TfLiteModelMetadata, model_version_)>(
          reinterpret_cast<char*>(&model_version_),
          reinterpret_cast<char*>(&other->model_version_));
}

std::string TfLiteModelMetadata::GetTypeName() const {
  return "safe_browsing.TfLiteModelMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSideModel_Rule*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSideModel_Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSideModel_Rule >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSideModel_IPSubnet*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSideModel_IPSubnet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSideModel_IPSubnet >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSideModel*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSideModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSideModel >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::TfLiteModelMetadata_Threshold*
Arena::CreateMaybeMessage< ::safe_browsing::TfLiteModelMetadata_Threshold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::TfLiteModelMetadata_Threshold >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::TfLiteModelMetadata*
Arena::CreateMaybeMessage< ::safe_browsing::TfLiteModelMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::TfLiteModelMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
