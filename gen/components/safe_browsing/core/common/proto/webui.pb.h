// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webui.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webui_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webui_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webui_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webui_2eproto {
  static const uint32_t offsets[];
};
namespace safe_browsing {
class DatabaseManagerInfo;
struct DatabaseManagerInfoDefaultTypeInternal;
extern DatabaseManagerInfoDefaultTypeInternal _DatabaseManagerInfo_default_instance_;
class DatabaseManagerInfo_DatabaseInfo;
struct DatabaseManagerInfo_DatabaseInfoDefaultTypeInternal;
extern DatabaseManagerInfo_DatabaseInfoDefaultTypeInternal _DatabaseManagerInfo_DatabaseInfo_default_instance_;
class DatabaseManagerInfo_DatabaseInfo_StoreInfo;
struct DatabaseManagerInfo_DatabaseInfo_StoreInfoDefaultTypeInternal;
extern DatabaseManagerInfo_DatabaseInfo_StoreInfoDefaultTypeInternal _DatabaseManagerInfo_DatabaseInfo_StoreInfo_default_instance_;
class DatabaseManagerInfo_UpdateInfo;
struct DatabaseManagerInfo_UpdateInfoDefaultTypeInternal;
extern DatabaseManagerInfo_UpdateInfoDefaultTypeInternal _DatabaseManagerInfo_UpdateInfo_default_instance_;
class FullHashCacheInfo;
struct FullHashCacheInfoDefaultTypeInternal;
extern FullHashCacheInfoDefaultTypeInternal _FullHashCacheInfo_default_instance_;
class FullHashCacheInfo_FullHashCache;
struct FullHashCacheInfo_FullHashCacheDefaultTypeInternal;
extern FullHashCacheInfo_FullHashCacheDefaultTypeInternal _FullHashCacheInfo_FullHashCache_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo;
struct FullHashCacheInfo_FullHashCache_CachedHashPrefixInfoDefaultTypeInternal;
extern FullHashCacheInfo_FullHashCache_CachedHashPrefixInfoDefaultTypeInternal _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo;
struct FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfoDefaultTypeInternal;
extern FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfoDefaultTypeInternal _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier;
struct FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifierDefaultTypeInternal;
extern FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifierDefaultTypeInternal _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_;
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> ::safe_browsing::DatabaseManagerInfo* Arena::CreateMaybeMessage<::safe_browsing::DatabaseManagerInfo>(Arena*);
template<> ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* Arena::CreateMaybeMessage<::safe_browsing::DatabaseManagerInfo_DatabaseInfo>(Arena*);
template<> ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* Arena::CreateMaybeMessage<::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo>(Arena*);
template<> ::safe_browsing::DatabaseManagerInfo_UpdateInfo* Arena::CreateMaybeMessage<::safe_browsing::DatabaseManagerInfo_UpdateInfo>(Arena*);
template<> ::safe_browsing::FullHashCacheInfo* Arena::CreateMaybeMessage<::safe_browsing::FullHashCacheInfo>(Arena*);
template<> ::safe_browsing::FullHashCacheInfo_FullHashCache* Arena::CreateMaybeMessage<::safe_browsing::FullHashCacheInfo_FullHashCache>(Arena*);
template<> ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* Arena::CreateMaybeMessage<::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo>(Arena*);
template<> ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* Arena::CreateMaybeMessage<::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo>(Arena*);
template<> ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* Arena::CreateMaybeMessage<::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safe_browsing {

// ===================================================================

class DatabaseManagerInfo_UpdateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.DatabaseManagerInfo.UpdateInfo) */ {
 public:
  inline DatabaseManagerInfo_UpdateInfo() : DatabaseManagerInfo_UpdateInfo(nullptr) {}
  ~DatabaseManagerInfo_UpdateInfo() override;
  explicit PROTOBUF_CONSTEXPR DatabaseManagerInfo_UpdateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatabaseManagerInfo_UpdateInfo(const DatabaseManagerInfo_UpdateInfo& from);
  DatabaseManagerInfo_UpdateInfo(DatabaseManagerInfo_UpdateInfo&& from) noexcept
    : DatabaseManagerInfo_UpdateInfo() {
    *this = ::std::move(from);
  }

  inline DatabaseManagerInfo_UpdateInfo& operator=(const DatabaseManagerInfo_UpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseManagerInfo_UpdateInfo& operator=(DatabaseManagerInfo_UpdateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DatabaseManagerInfo_UpdateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatabaseManagerInfo_UpdateInfo* internal_default_instance() {
    return reinterpret_cast<const DatabaseManagerInfo_UpdateInfo*>(
               &_DatabaseManagerInfo_UpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DatabaseManagerInfo_UpdateInfo& a, DatabaseManagerInfo_UpdateInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DatabaseManagerInfo_UpdateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseManagerInfo_UpdateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseManagerInfo_UpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseManagerInfo_UpdateInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DatabaseManagerInfo_UpdateInfo& from);
  void MergeFrom(const DatabaseManagerInfo_UpdateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatabaseManagerInfo_UpdateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.DatabaseManagerInfo.UpdateInfo";
  }
  protected:
  explicit DatabaseManagerInfo_UpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastUpdateTimeMillisFieldNumber = 2,
    kNextUpdateTimeMillisFieldNumber = 3,
    kNetworkStatusCodeFieldNumber = 1,
  };
  // optional uint64 last_update_time_millis = 2;
  bool has_last_update_time_millis() const;
  private:
  bool _internal_has_last_update_time_millis() const;
  public:
  void clear_last_update_time_millis();
  uint64_t last_update_time_millis() const;
  void set_last_update_time_millis(uint64_t value);
  private:
  uint64_t _internal_last_update_time_millis() const;
  void _internal_set_last_update_time_millis(uint64_t value);
  public:

  // optional uint64 next_update_time_millis = 3;
  bool has_next_update_time_millis() const;
  private:
  bool _internal_has_next_update_time_millis() const;
  public:
  void clear_next_update_time_millis();
  uint64_t next_update_time_millis() const;
  void set_next_update_time_millis(uint64_t value);
  private:
  uint64_t _internal_next_update_time_millis() const;
  void _internal_set_next_update_time_millis(uint64_t value);
  public:

  // optional int32 network_status_code = 1;
  bool has_network_status_code() const;
  private:
  bool _internal_has_network_status_code() const;
  public:
  void clear_network_status_code();
  int32_t network_status_code() const;
  void set_network_status_code(int32_t value);
  private:
  int32_t _internal_network_status_code() const;
  void _internal_set_network_status_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.DatabaseManagerInfo.UpdateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t last_update_time_millis_;
  uint64_t next_update_time_millis_;
  int32_t network_status_code_;
  friend struct ::TableStruct_webui_2eproto;
};
// -------------------------------------------------------------------

class DatabaseManagerInfo_DatabaseInfo_StoreInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo) */ {
 public:
  inline DatabaseManagerInfo_DatabaseInfo_StoreInfo() : DatabaseManagerInfo_DatabaseInfo_StoreInfo(nullptr) {}
  ~DatabaseManagerInfo_DatabaseInfo_StoreInfo() override;
  explicit PROTOBUF_CONSTEXPR DatabaseManagerInfo_DatabaseInfo_StoreInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatabaseManagerInfo_DatabaseInfo_StoreInfo(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from);
  DatabaseManagerInfo_DatabaseInfo_StoreInfo(DatabaseManagerInfo_DatabaseInfo_StoreInfo&& from) noexcept
    : DatabaseManagerInfo_DatabaseInfo_StoreInfo() {
    *this = ::std::move(from);
  }

  inline DatabaseManagerInfo_DatabaseInfo_StoreInfo& operator=(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseManagerInfo_DatabaseInfo_StoreInfo& operator=(DatabaseManagerInfo_DatabaseInfo_StoreInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DatabaseManagerInfo_DatabaseInfo_StoreInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatabaseManagerInfo_DatabaseInfo_StoreInfo* internal_default_instance() {
    return reinterpret_cast<const DatabaseManagerInfo_DatabaseInfo_StoreInfo*>(
               &_DatabaseManagerInfo_DatabaseInfo_StoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DatabaseManagerInfo_DatabaseInfo_StoreInfo& a, DatabaseManagerInfo_DatabaseInfo_StoreInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DatabaseManagerInfo_DatabaseInfo_StoreInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseManagerInfo_DatabaseInfo_StoreInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseManagerInfo_DatabaseInfo_StoreInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseManagerInfo_DatabaseInfo_StoreInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from);
  void MergeFrom(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatabaseManagerInfo_DatabaseInfo_StoreInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo";
  }
  protected:
  explicit DatabaseManagerInfo_DatabaseInfo_StoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kStateFieldNumber = 6,
    kFileSizeBytesFieldNumber = 2,
    kLastApplyUpdateTimeMillisFieldNumber = 4,
    kUpdateStatusFieldNumber = 3,
    kChecksAttemptedFieldNumber = 5,
  };
  // optional string file_name = 1;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional string state = 6;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // optional int64 file_size_bytes = 2;
  bool has_file_size_bytes() const;
  private:
  bool _internal_has_file_size_bytes() const;
  public:
  void clear_file_size_bytes();
  int64_t file_size_bytes() const;
  void set_file_size_bytes(int64_t value);
  private:
  int64_t _internal_file_size_bytes() const;
  void _internal_set_file_size_bytes(int64_t value);
  public:

  // optional uint64 last_apply_update_time_millis = 4;
  bool has_last_apply_update_time_millis() const;
  private:
  bool _internal_has_last_apply_update_time_millis() const;
  public:
  void clear_last_apply_update_time_millis();
  uint64_t last_apply_update_time_millis() const;
  void set_last_apply_update_time_millis(uint64_t value);
  private:
  uint64_t _internal_last_apply_update_time_millis() const;
  void _internal_set_last_apply_update_time_millis(uint64_t value);
  public:

  // optional int32 update_status = 3;
  bool has_update_status() const;
  private:
  bool _internal_has_update_status() const;
  public:
  void clear_update_status();
  int32_t update_status() const;
  void set_update_status(int32_t value);
  private:
  int32_t _internal_update_status() const;
  void _internal_set_update_status(int32_t value);
  public:

  // optional uint32 checks_attempted = 5;
  bool has_checks_attempted() const;
  private:
  bool _internal_has_checks_attempted() const;
  public:
  void clear_checks_attempted();
  uint32_t checks_attempted() const;
  void set_checks_attempted(uint32_t value);
  private:
  uint32_t _internal_checks_attempted() const;
  void _internal_set_checks_attempted(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  int64_t file_size_bytes_;
  uint64_t last_apply_update_time_millis_;
  int32_t update_status_;
  uint32_t checks_attempted_;
  friend struct ::TableStruct_webui_2eproto;
};
// -------------------------------------------------------------------

class DatabaseManagerInfo_DatabaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.DatabaseManagerInfo.DatabaseInfo) */ {
 public:
  inline DatabaseManagerInfo_DatabaseInfo() : DatabaseManagerInfo_DatabaseInfo(nullptr) {}
  ~DatabaseManagerInfo_DatabaseInfo() override;
  explicit PROTOBUF_CONSTEXPR DatabaseManagerInfo_DatabaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatabaseManagerInfo_DatabaseInfo(const DatabaseManagerInfo_DatabaseInfo& from);
  DatabaseManagerInfo_DatabaseInfo(DatabaseManagerInfo_DatabaseInfo&& from) noexcept
    : DatabaseManagerInfo_DatabaseInfo() {
    *this = ::std::move(from);
  }

  inline DatabaseManagerInfo_DatabaseInfo& operator=(const DatabaseManagerInfo_DatabaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseManagerInfo_DatabaseInfo& operator=(DatabaseManagerInfo_DatabaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DatabaseManagerInfo_DatabaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatabaseManagerInfo_DatabaseInfo* internal_default_instance() {
    return reinterpret_cast<const DatabaseManagerInfo_DatabaseInfo*>(
               &_DatabaseManagerInfo_DatabaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DatabaseManagerInfo_DatabaseInfo& a, DatabaseManagerInfo_DatabaseInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DatabaseManagerInfo_DatabaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseManagerInfo_DatabaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseManagerInfo_DatabaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseManagerInfo_DatabaseInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DatabaseManagerInfo_DatabaseInfo& from);
  void MergeFrom(const DatabaseManagerInfo_DatabaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatabaseManagerInfo_DatabaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.DatabaseManagerInfo.DatabaseInfo";
  }
  protected:
  explicit DatabaseManagerInfo_DatabaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DatabaseManagerInfo_DatabaseInfo_StoreInfo StoreInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kStoreInfoFieldNumber = 3,
    kDatabaseSizeBytesFieldNumber = 2,
    kUpdateSuccessfulFieldNumber = 1,
  };
  // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
  int store_info_size() const;
  private:
  int _internal_store_info_size() const;
  public:
  void clear_store_info();
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* mutable_store_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >*
      mutable_store_info();
  private:
  const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo& _internal_store_info(int index) const;
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* _internal_add_store_info();
  public:
  const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo& store_info(int index) const;
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* add_store_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >&
      store_info() const;

  // optional uint64 database_size_bytes = 2;
  bool has_database_size_bytes() const;
  private:
  bool _internal_has_database_size_bytes() const;
  public:
  void clear_database_size_bytes();
  uint64_t database_size_bytes() const;
  void set_database_size_bytes(uint64_t value);
  private:
  uint64_t _internal_database_size_bytes() const;
  void _internal_set_database_size_bytes(uint64_t value);
  public:

  // optional bool update_successful = 1;
  bool has_update_successful() const;
  private:
  bool _internal_has_update_successful() const;
  public:
  void clear_update_successful();
  bool update_successful() const;
  void set_update_successful(bool value);
  private:
  bool _internal_update_successful() const;
  void _internal_set_update_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo > store_info_;
  uint64_t database_size_bytes_;
  bool update_successful_;
  friend struct ::TableStruct_webui_2eproto;
};
// -------------------------------------------------------------------

class DatabaseManagerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.DatabaseManagerInfo) */ {
 public:
  inline DatabaseManagerInfo() : DatabaseManagerInfo(nullptr) {}
  ~DatabaseManagerInfo() override;
  explicit PROTOBUF_CONSTEXPR DatabaseManagerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatabaseManagerInfo(const DatabaseManagerInfo& from);
  DatabaseManagerInfo(DatabaseManagerInfo&& from) noexcept
    : DatabaseManagerInfo() {
    *this = ::std::move(from);
  }

  inline DatabaseManagerInfo& operator=(const DatabaseManagerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseManagerInfo& operator=(DatabaseManagerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DatabaseManagerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatabaseManagerInfo* internal_default_instance() {
    return reinterpret_cast<const DatabaseManagerInfo*>(
               &_DatabaseManagerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DatabaseManagerInfo& a, DatabaseManagerInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DatabaseManagerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseManagerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatabaseManagerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatabaseManagerInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DatabaseManagerInfo& from);
  void MergeFrom(const DatabaseManagerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatabaseManagerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.DatabaseManagerInfo";
  }
  protected:
  explicit DatabaseManagerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DatabaseManagerInfo_UpdateInfo UpdateInfo;
  typedef DatabaseManagerInfo_DatabaseInfo DatabaseInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateInfoFieldNumber = 1,
    kDatabaseInfoFieldNumber = 2,
  };
  // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
  bool has_update_info() const;
  private:
  bool _internal_has_update_info() const;
  public:
  void clear_update_info();
  const ::safe_browsing::DatabaseManagerInfo_UpdateInfo& update_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::DatabaseManagerInfo_UpdateInfo* release_update_info();
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo* mutable_update_info();
  void set_allocated_update_info(::safe_browsing::DatabaseManagerInfo_UpdateInfo* update_info);
  private:
  const ::safe_browsing::DatabaseManagerInfo_UpdateInfo& _internal_update_info() const;
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo* _internal_mutable_update_info();
  public:
  void unsafe_arena_set_allocated_update_info(
      ::safe_browsing::DatabaseManagerInfo_UpdateInfo* update_info);
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo* unsafe_arena_release_update_info();

  // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
  bool has_database_info() const;
  private:
  bool _internal_has_database_info() const;
  public:
  void clear_database_info();
  const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo& database_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* release_database_info();
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* mutable_database_info();
  void set_allocated_database_info(::safe_browsing::DatabaseManagerInfo_DatabaseInfo* database_info);
  private:
  const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo& _internal_database_info() const;
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* _internal_mutable_database_info();
  public:
  void unsafe_arena_set_allocated_database_info(
      ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* database_info);
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* unsafe_arena_release_database_info();

  // @@protoc_insertion_point(class_scope:safe_browsing.DatabaseManagerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo* update_info_;
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* database_info_;
  friend struct ::TableStruct_webui_2eproto;
};
// -------------------------------------------------------------------

class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier) */ {
 public:
  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier() : FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(nullptr) {}
  ~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier() override;
  explicit PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from);
  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier&& from) noexcept
    : FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier() {
    *this = ::std::move(from);
  }

  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& operator=(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& operator=(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* internal_default_instance() {
    return reinterpret_cast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier*>(
               &_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& a, FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from);
  void MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier";
  }
  protected:
  explicit FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformTypeFieldNumber = 1,
    kThreatEntryTypeFieldNumber = 2,
    kThreatTypeFieldNumber = 3,
  };
  // optional int32 platform_type = 1;
  bool has_platform_type() const;
  private:
  bool _internal_has_platform_type() const;
  public:
  void clear_platform_type();
  int32_t platform_type() const;
  void set_platform_type(int32_t value);
  private:
  int32_t _internal_platform_type() const;
  void _internal_set_platform_type(int32_t value);
  public:

  // optional int32 threat_entry_type = 2;
  bool has_threat_entry_type() const;
  private:
  bool _internal_has_threat_entry_type() const;
  public:
  void clear_threat_entry_type();
  int32_t threat_entry_type() const;
  void set_threat_entry_type(int32_t value);
  private:
  int32_t _internal_threat_entry_type() const;
  void _internal_set_threat_entry_type(int32_t value);
  public:

  // optional int32 threat_type = 3;
  bool has_threat_type() const;
  private:
  bool _internal_has_threat_type() const;
  public:
  void clear_threat_type();
  int32_t threat_type() const;
  void set_threat_type(int32_t value);
  private:
  int32_t _internal_threat_type() const;
  void _internal_set_threat_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t platform_type_;
  int32_t threat_entry_type_;
  int32_t threat_type_;
  friend struct ::TableStruct_webui_2eproto;
};
// -------------------------------------------------------------------

class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo) */ {
 public:
  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo() : FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(nullptr) {}
  ~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo() override;
  explicit PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from);
  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo&& from) noexcept
    : FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo() {
    *this = ::std::move(from);
  }

  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& operator=(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& operator=(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* internal_default_instance() {
    return reinterpret_cast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo*>(
               &_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& a, FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from);
  void MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo";
  }
  protected:
  explicit FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier ListIdentifier;

  // accessors -------------------------------------------------------

  enum : int {
    kFullHashFieldNumber = 2,
    kListIdentifierFieldNumber = 3,
    kPositiveExpiryFieldNumber = 1,
  };
  // optional string full_hash = 2;
  bool has_full_hash() const;
  private:
  bool _internal_has_full_hash() const;
  public:
  void clear_full_hash();
  const std::string& full_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_hash();
  PROTOBUF_NODISCARD std::string* release_full_hash();
  void set_allocated_full_hash(std::string* full_hash);
  private:
  const std::string& _internal_full_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_hash(const std::string& value);
  std::string* _internal_mutable_full_hash();
  public:

  // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
  bool has_list_identifier() const;
  private:
  bool _internal_has_list_identifier() const;
  public:
  void clear_list_identifier();
  const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& list_identifier() const;
  PROTOBUF_NODISCARD ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* release_list_identifier();
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* mutable_list_identifier();
  void set_allocated_list_identifier(::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* list_identifier);
  private:
  const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& _internal_list_identifier() const;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* _internal_mutable_list_identifier();
  public:
  void unsafe_arena_set_allocated_list_identifier(
      ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* list_identifier);
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* unsafe_arena_release_list_identifier();

  // optional int64 positive_expiry = 1;
  bool has_positive_expiry() const;
  private:
  bool _internal_has_positive_expiry() const;
  public:
  void clear_positive_expiry();
  int64_t positive_expiry() const;
  void set_positive_expiry(int64_t value);
  private:
  int64_t _internal_positive_expiry() const;
  void _internal_set_positive_expiry(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_hash_;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* list_identifier_;
  int64_t positive_expiry_;
  friend struct ::TableStruct_webui_2eproto;
};
// -------------------------------------------------------------------

class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo) */ {
 public:
  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo() : FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(nullptr) {}
  ~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo() override;
  explicit PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from);
  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo&& from) noexcept
    : FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo() {
    *this = ::std::move(from);
  }

  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& operator=(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& operator=(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* internal_default_instance() {
    return reinterpret_cast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo*>(
               &_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& a, FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from);
  void MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo";
  }
  protected:
  explicit FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo FullHashInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kFullHashInfoFieldNumber = 2,
    kNegativeExpiryFieldNumber = 1,
  };
  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
  int full_hash_info_size() const;
  private:
  int _internal_full_hash_info_size() const;
  public:
  void clear_full_hash_info();
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* mutable_full_hash_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >*
      mutable_full_hash_info();
  private:
  const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& _internal_full_hash_info(int index) const;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* _internal_add_full_hash_info();
  public:
  const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& full_hash_info(int index) const;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* add_full_hash_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >&
      full_hash_info() const;

  // optional int64 negative_expiry = 1;
  bool has_negative_expiry() const;
  private:
  bool _internal_has_negative_expiry() const;
  public:
  void clear_negative_expiry();
  int64_t negative_expiry() const;
  void set_negative_expiry(int64_t value);
  private:
  int64_t _internal_negative_expiry() const;
  void _internal_set_negative_expiry(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo > full_hash_info_;
  int64_t negative_expiry_;
  friend struct ::TableStruct_webui_2eproto;
};
// -------------------------------------------------------------------

class FullHashCacheInfo_FullHashCache final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.FullHashCacheInfo.FullHashCache) */ {
 public:
  inline FullHashCacheInfo_FullHashCache() : FullHashCacheInfo_FullHashCache(nullptr) {}
  ~FullHashCacheInfo_FullHashCache() override;
  explicit PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullHashCacheInfo_FullHashCache(const FullHashCacheInfo_FullHashCache& from);
  FullHashCacheInfo_FullHashCache(FullHashCacheInfo_FullHashCache&& from) noexcept
    : FullHashCacheInfo_FullHashCache() {
    *this = ::std::move(from);
  }

  inline FullHashCacheInfo_FullHashCache& operator=(const FullHashCacheInfo_FullHashCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullHashCacheInfo_FullHashCache& operator=(FullHashCacheInfo_FullHashCache&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FullHashCacheInfo_FullHashCache& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullHashCacheInfo_FullHashCache* internal_default_instance() {
    return reinterpret_cast<const FullHashCacheInfo_FullHashCache*>(
               &_FullHashCacheInfo_FullHashCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FullHashCacheInfo_FullHashCache& a, FullHashCacheInfo_FullHashCache& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FullHashCacheInfo_FullHashCache* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullHashCacheInfo_FullHashCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullHashCacheInfo_FullHashCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullHashCacheInfo_FullHashCache>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FullHashCacheInfo_FullHashCache& from);
  void MergeFrom(const FullHashCacheInfo_FullHashCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FullHashCacheInfo_FullHashCache* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.FullHashCacheInfo.FullHashCache";
  }
  protected:
  explicit FullHashCacheInfo_FullHashCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo CachedHashPrefixInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kHashPrefixFieldNumber = 1,
    kCachedHashPrefixInfoFieldNumber = 2,
  };
  // optional string hash_prefix = 1;
  bool has_hash_prefix() const;
  private:
  bool _internal_has_hash_prefix() const;
  public:
  void clear_hash_prefix();
  const std::string& hash_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash_prefix();
  PROTOBUF_NODISCARD std::string* release_hash_prefix();
  void set_allocated_hash_prefix(std::string* hash_prefix);
  private:
  const std::string& _internal_hash_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash_prefix(const std::string& value);
  std::string* _internal_mutable_hash_prefix();
  public:

  // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
  bool has_cached_hash_prefix_info() const;
  private:
  bool _internal_has_cached_hash_prefix_info() const;
  public:
  void clear_cached_hash_prefix_info();
  const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& cached_hash_prefix_info() const;
  PROTOBUF_NODISCARD ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* release_cached_hash_prefix_info();
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* mutable_cached_hash_prefix_info();
  void set_allocated_cached_hash_prefix_info(::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* cached_hash_prefix_info);
  private:
  const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& _internal_cached_hash_prefix_info() const;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* _internal_mutable_cached_hash_prefix_info();
  public:
  void unsafe_arena_set_allocated_cached_hash_prefix_info(
      ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* cached_hash_prefix_info);
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* unsafe_arena_release_cached_hash_prefix_info();

  // @@protoc_insertion_point(class_scope:safe_browsing.FullHashCacheInfo.FullHashCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_prefix_;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* cached_hash_prefix_info_;
  friend struct ::TableStruct_webui_2eproto;
};
// -------------------------------------------------------------------

class FullHashCacheInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.FullHashCacheInfo) */ {
 public:
  inline FullHashCacheInfo() : FullHashCacheInfo(nullptr) {}
  ~FullHashCacheInfo() override;
  explicit PROTOBUF_CONSTEXPR FullHashCacheInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullHashCacheInfo(const FullHashCacheInfo& from);
  FullHashCacheInfo(FullHashCacheInfo&& from) noexcept
    : FullHashCacheInfo() {
    *this = ::std::move(from);
  }

  inline FullHashCacheInfo& operator=(const FullHashCacheInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullHashCacheInfo& operator=(FullHashCacheInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FullHashCacheInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullHashCacheInfo* internal_default_instance() {
    return reinterpret_cast<const FullHashCacheInfo*>(
               &_FullHashCacheInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FullHashCacheInfo& a, FullHashCacheInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FullHashCacheInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullHashCacheInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullHashCacheInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullHashCacheInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FullHashCacheInfo& from);
  void MergeFrom(const FullHashCacheInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FullHashCacheInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.FullHashCacheInfo";
  }
  protected:
  explicit FullHashCacheInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FullHashCacheInfo_FullHashCache FullHashCache;

  // accessors -------------------------------------------------------

  enum : int {
    kFullHashCacheFieldNumber = 2,
    kNumberOfHitsFieldNumber = 1,
  };
  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
  int full_hash_cache_size() const;
  private:
  int _internal_full_hash_cache_size() const;
  public:
  void clear_full_hash_cache();
  ::safe_browsing::FullHashCacheInfo_FullHashCache* mutable_full_hash_cache(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache >*
      mutable_full_hash_cache();
  private:
  const ::safe_browsing::FullHashCacheInfo_FullHashCache& _internal_full_hash_cache(int index) const;
  ::safe_browsing::FullHashCacheInfo_FullHashCache* _internal_add_full_hash_cache();
  public:
  const ::safe_browsing::FullHashCacheInfo_FullHashCache& full_hash_cache(int index) const;
  ::safe_browsing::FullHashCacheInfo_FullHashCache* add_full_hash_cache();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache >&
      full_hash_cache() const;

  // optional int32 number_of_hits = 1;
  bool has_number_of_hits() const;
  private:
  bool _internal_has_number_of_hits() const;
  public:
  void clear_number_of_hits();
  int32_t number_of_hits() const;
  void set_number_of_hits(int32_t value);
  private:
  int32_t _internal_number_of_hits() const;
  void _internal_set_number_of_hits(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safe_browsing.FullHashCacheInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache > full_hash_cache_;
  int32_t number_of_hits_;
  friend struct ::TableStruct_webui_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DatabaseManagerInfo_UpdateInfo

// optional int32 network_status_code = 1;
inline bool DatabaseManagerInfo_UpdateInfo::_internal_has_network_status_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_UpdateInfo::has_network_status_code() const {
  return _internal_has_network_status_code();
}
inline void DatabaseManagerInfo_UpdateInfo::clear_network_status_code() {
  network_status_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t DatabaseManagerInfo_UpdateInfo::_internal_network_status_code() const {
  return network_status_code_;
}
inline int32_t DatabaseManagerInfo_UpdateInfo::network_status_code() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.UpdateInfo.network_status_code)
  return _internal_network_status_code();
}
inline void DatabaseManagerInfo_UpdateInfo::_internal_set_network_status_code(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  network_status_code_ = value;
}
inline void DatabaseManagerInfo_UpdateInfo::set_network_status_code(int32_t value) {
  _internal_set_network_status_code(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.UpdateInfo.network_status_code)
}

// optional uint64 last_update_time_millis = 2;
inline bool DatabaseManagerInfo_UpdateInfo::_internal_has_last_update_time_millis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_UpdateInfo::has_last_update_time_millis() const {
  return _internal_has_last_update_time_millis();
}
inline void DatabaseManagerInfo_UpdateInfo::clear_last_update_time_millis() {
  last_update_time_millis_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DatabaseManagerInfo_UpdateInfo::_internal_last_update_time_millis() const {
  return last_update_time_millis_;
}
inline uint64_t DatabaseManagerInfo_UpdateInfo::last_update_time_millis() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.UpdateInfo.last_update_time_millis)
  return _internal_last_update_time_millis();
}
inline void DatabaseManagerInfo_UpdateInfo::_internal_set_last_update_time_millis(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  last_update_time_millis_ = value;
}
inline void DatabaseManagerInfo_UpdateInfo::set_last_update_time_millis(uint64_t value) {
  _internal_set_last_update_time_millis(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.UpdateInfo.last_update_time_millis)
}

// optional uint64 next_update_time_millis = 3;
inline bool DatabaseManagerInfo_UpdateInfo::_internal_has_next_update_time_millis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_UpdateInfo::has_next_update_time_millis() const {
  return _internal_has_next_update_time_millis();
}
inline void DatabaseManagerInfo_UpdateInfo::clear_next_update_time_millis() {
  next_update_time_millis_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DatabaseManagerInfo_UpdateInfo::_internal_next_update_time_millis() const {
  return next_update_time_millis_;
}
inline uint64_t DatabaseManagerInfo_UpdateInfo::next_update_time_millis() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.UpdateInfo.next_update_time_millis)
  return _internal_next_update_time_millis();
}
inline void DatabaseManagerInfo_UpdateInfo::_internal_set_next_update_time_millis(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  next_update_time_millis_ = value;
}
inline void DatabaseManagerInfo_UpdateInfo::set_next_update_time_millis(uint64_t value) {
  _internal_set_next_update_time_millis(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.UpdateInfo.next_update_time_millis)
}

// -------------------------------------------------------------------

// DatabaseManagerInfo_DatabaseInfo_StoreInfo

// optional string file_name = 1;
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_file_name() const {
  return _internal_has_file_name();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DatabaseManagerInfo_DatabaseInfo_StoreInfo::file_name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
}
inline std::string* DatabaseManagerInfo_DatabaseInfo_StoreInfo::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
  return _s;
}
inline const std::string& DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_file_name() const {
  return file_name_.Get();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DatabaseManagerInfo_DatabaseInfo_StoreInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
}

// optional int64 file_size_bytes = 2;
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_has_file_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_file_size_bytes() const {
  return _internal_has_file_size_bytes();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_file_size_bytes() {
  file_size_bytes_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_file_size_bytes() const {
  return file_size_bytes_;
}
inline int64_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::file_size_bytes() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_size_bytes)
  return _internal_file_size_bytes();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_set_file_size_bytes(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  file_size_bytes_ = value;
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_file_size_bytes(int64_t value) {
  _internal_set_file_size_bytes(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_size_bytes)
}

// optional int32 update_status = 3;
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_has_update_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_update_status() const {
  return _internal_has_update_status();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_update_status() {
  update_status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_update_status() const {
  return update_status_;
}
inline int32_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::update_status() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.update_status)
  return _internal_update_status();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_set_update_status(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  update_status_ = value;
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_update_status(int32_t value) {
  _internal_set_update_status(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.update_status)
}

// optional uint64 last_apply_update_time_millis = 4;
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_has_last_apply_update_time_millis() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_last_apply_update_time_millis() const {
  return _internal_has_last_apply_update_time_millis();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_last_apply_update_time_millis() {
  last_apply_update_time_millis_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_last_apply_update_time_millis() const {
  return last_apply_update_time_millis_;
}
inline uint64_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::last_apply_update_time_millis() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.last_apply_update_time_millis)
  return _internal_last_apply_update_time_millis();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_set_last_apply_update_time_millis(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  last_apply_update_time_millis_ = value;
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_last_apply_update_time_millis(uint64_t value) {
  _internal_set_last_apply_update_time_millis(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.last_apply_update_time_millis)
}

// optional uint32 checks_attempted = 5;
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_has_checks_attempted() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_checks_attempted() const {
  return _internal_has_checks_attempted();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_checks_attempted() {
  checks_attempted_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_checks_attempted() const {
  return checks_attempted_;
}
inline uint32_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::checks_attempted() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.checks_attempted)
  return _internal_checks_attempted();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_set_checks_attempted(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  checks_attempted_ = value;
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_checks_attempted(uint32_t value) {
  _internal_set_checks_attempted(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.checks_attempted)
}

// optional string state = 6;
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_state() const {
  return _internal_has_state();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_state() {
  state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DatabaseManagerInfo_DatabaseInfo_StoreInfo::state() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.state)
}
inline std::string* DatabaseManagerInfo_DatabaseInfo_StoreInfo::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.state)
  return _s;
}
inline const std::string& DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_state() const {
  return state_.Get();
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_set_state(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  state_.Set(value, GetArenaForAllocation());
}
inline std::string* DatabaseManagerInfo_DatabaseInfo_StoreInfo::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000002u;
  return state_.Mutable(GetArenaForAllocation());
}
inline std::string* DatabaseManagerInfo_DatabaseInfo_StoreInfo::release_state() {
  // @@protoc_insertion_point(field_release:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.state)
  if (!_internal_has_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (state_.IsDefault()) {
    state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (state_.IsDefault()) {
    state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.state)
}

// -------------------------------------------------------------------

// DatabaseManagerInfo_DatabaseInfo

// optional bool update_successful = 1;
inline bool DatabaseManagerInfo_DatabaseInfo::_internal_has_update_successful() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_DatabaseInfo::has_update_successful() const {
  return _internal_has_update_successful();
}
inline void DatabaseManagerInfo_DatabaseInfo::clear_update_successful() {
  update_successful_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DatabaseManagerInfo_DatabaseInfo::_internal_update_successful() const {
  return update_successful_;
}
inline bool DatabaseManagerInfo_DatabaseInfo::update_successful() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.update_successful)
  return _internal_update_successful();
}
inline void DatabaseManagerInfo_DatabaseInfo::_internal_set_update_successful(bool value) {
  _has_bits_[0] |= 0x00000002u;
  update_successful_ = value;
}
inline void DatabaseManagerInfo_DatabaseInfo::set_update_successful(bool value) {
  _internal_set_update_successful(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.update_successful)
}

// optional uint64 database_size_bytes = 2;
inline bool DatabaseManagerInfo_DatabaseInfo::_internal_has_database_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DatabaseManagerInfo_DatabaseInfo::has_database_size_bytes() const {
  return _internal_has_database_size_bytes();
}
inline void DatabaseManagerInfo_DatabaseInfo::clear_database_size_bytes() {
  database_size_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DatabaseManagerInfo_DatabaseInfo::_internal_database_size_bytes() const {
  return database_size_bytes_;
}
inline uint64_t DatabaseManagerInfo_DatabaseInfo::database_size_bytes() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.database_size_bytes)
  return _internal_database_size_bytes();
}
inline void DatabaseManagerInfo_DatabaseInfo::_internal_set_database_size_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  database_size_bytes_ = value;
}
inline void DatabaseManagerInfo_DatabaseInfo::set_database_size_bytes(uint64_t value) {
  _internal_set_database_size_bytes(value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.database_size_bytes)
}

// repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
inline int DatabaseManagerInfo_DatabaseInfo::_internal_store_info_size() const {
  return store_info_.size();
}
inline int DatabaseManagerInfo_DatabaseInfo::store_info_size() const {
  return _internal_store_info_size();
}
inline void DatabaseManagerInfo_DatabaseInfo::clear_store_info() {
  store_info_.Clear();
}
inline ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* DatabaseManagerInfo_DatabaseInfo::mutable_store_info(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return store_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >*
DatabaseManagerInfo_DatabaseInfo::mutable_store_info() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return &store_info_;
}
inline const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo& DatabaseManagerInfo_DatabaseInfo::_internal_store_info(int index) const {
  return store_info_.Get(index);
}
inline const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo& DatabaseManagerInfo_DatabaseInfo::store_info(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return _internal_store_info(index);
}
inline ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* DatabaseManagerInfo_DatabaseInfo::_internal_add_store_info() {
  return store_info_.Add();
}
inline ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* DatabaseManagerInfo_DatabaseInfo::add_store_info() {
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* _add = _internal_add_store_info();
  // @@protoc_insertion_point(field_add:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >&
DatabaseManagerInfo_DatabaseInfo::store_info() const {
  // @@protoc_insertion_point(field_list:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return store_info_;
}

// -------------------------------------------------------------------

// DatabaseManagerInfo

// optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
inline bool DatabaseManagerInfo::_internal_has_update_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || update_info_ != nullptr);
  return value;
}
inline bool DatabaseManagerInfo::has_update_info() const {
  return _internal_has_update_info();
}
inline void DatabaseManagerInfo::clear_update_info() {
  if (update_info_ != nullptr) update_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::DatabaseManagerInfo_UpdateInfo& DatabaseManagerInfo::_internal_update_info() const {
  const ::safe_browsing::DatabaseManagerInfo_UpdateInfo* p = update_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::DatabaseManagerInfo_UpdateInfo&>(
      ::safe_browsing::_DatabaseManagerInfo_UpdateInfo_default_instance_);
}
inline const ::safe_browsing::DatabaseManagerInfo_UpdateInfo& DatabaseManagerInfo::update_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.update_info)
  return _internal_update_info();
}
inline void DatabaseManagerInfo::unsafe_arena_set_allocated_update_info(
    ::safe_browsing::DatabaseManagerInfo_UpdateInfo* update_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_info_);
  }
  update_info_ = update_info;
  if (update_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.DatabaseManagerInfo.update_info)
}
inline ::safe_browsing::DatabaseManagerInfo_UpdateInfo* DatabaseManagerInfo::release_update_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo* temp = update_info_;
  update_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::DatabaseManagerInfo_UpdateInfo* DatabaseManagerInfo::unsafe_arena_release_update_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.DatabaseManagerInfo.update_info)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo* temp = update_info_;
  update_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::DatabaseManagerInfo_UpdateInfo* DatabaseManagerInfo::_internal_mutable_update_info() {
  _has_bits_[0] |= 0x00000001u;
  if (update_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::DatabaseManagerInfo_UpdateInfo>(GetArenaForAllocation());
    update_info_ = p;
  }
  return update_info_;
}
inline ::safe_browsing::DatabaseManagerInfo_UpdateInfo* DatabaseManagerInfo::mutable_update_info() {
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo* _msg = _internal_mutable_update_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.update_info)
  return _msg;
}
inline void DatabaseManagerInfo::set_allocated_update_info(::safe_browsing::DatabaseManagerInfo_UpdateInfo* update_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete update_info_;
  }
  if (update_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_info);
    if (message_arena != submessage_arena) {
      update_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_info_ = update_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DatabaseManagerInfo.update_info)
}

// optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
inline bool DatabaseManagerInfo::_internal_has_database_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || database_info_ != nullptr);
  return value;
}
inline bool DatabaseManagerInfo::has_database_info() const {
  return _internal_has_database_info();
}
inline void DatabaseManagerInfo::clear_database_info() {
  if (database_info_ != nullptr) database_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo& DatabaseManagerInfo::_internal_database_info() const {
  const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* p = database_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo&>(
      ::safe_browsing::_DatabaseManagerInfo_DatabaseInfo_default_instance_);
}
inline const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo& DatabaseManagerInfo::database_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.database_info)
  return _internal_database_info();
}
inline void DatabaseManagerInfo::unsafe_arena_set_allocated_database_info(
    ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* database_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_info_);
  }
  database_info_ = database_info;
  if (database_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.DatabaseManagerInfo.database_info)
}
inline ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* DatabaseManagerInfo::release_database_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* temp = database_info_;
  database_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* DatabaseManagerInfo::unsafe_arena_release_database_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.DatabaseManagerInfo.database_info)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* temp = database_info_;
  database_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* DatabaseManagerInfo::_internal_mutable_database_info() {
  _has_bits_[0] |= 0x00000002u;
  if (database_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::DatabaseManagerInfo_DatabaseInfo>(GetArenaForAllocation());
    database_info_ = p;
  }
  return database_info_;
}
inline ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* DatabaseManagerInfo::mutable_database_info() {
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* _msg = _internal_mutable_database_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.database_info)
  return _msg;
}
inline void DatabaseManagerInfo::set_allocated_database_info(::safe_browsing::DatabaseManagerInfo_DatabaseInfo* database_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete database_info_;
  }
  if (database_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(database_info);
    if (message_arena != submessage_arena) {
      database_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  database_info_ = database_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DatabaseManagerInfo.database_info)
}

// -------------------------------------------------------------------

// FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier

// optional int32 platform_type = 1;
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_has_platform_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::has_platform_type() const {
  return _internal_has_platform_type();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_platform_type() {
  platform_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_platform_type() const {
  return platform_type_;
}
inline int32_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::platform_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.platform_type)
  return _internal_platform_type();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_set_platform_type(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  platform_type_ = value;
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_platform_type(int32_t value) {
  _internal_set_platform_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.platform_type)
}

// optional int32 threat_entry_type = 2;
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_has_threat_entry_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::has_threat_entry_type() const {
  return _internal_has_threat_entry_type();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_threat_entry_type() {
  threat_entry_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_threat_entry_type() const {
  return threat_entry_type_;
}
inline int32_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::threat_entry_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.threat_entry_type)
  return _internal_threat_entry_type();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_set_threat_entry_type(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  threat_entry_type_ = value;
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_threat_entry_type(int32_t value) {
  _internal_set_threat_entry_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.threat_entry_type)
}

// optional int32 threat_type = 3;
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_has_threat_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::has_threat_type() const {
  return _internal_has_threat_type();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_threat_type() {
  threat_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_threat_type() const {
  return threat_type_;
}
inline int32_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::threat_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.threat_type)
  return _internal_threat_type();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_internal_set_threat_type(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  threat_type_ = value;
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_threat_type(int32_t value) {
  _internal_set_threat_type(value);
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.threat_type)
}

// -------------------------------------------------------------------

// FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo

// optional int64 positive_expiry = 1;
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_has_positive_expiry() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::has_positive_expiry() const {
  return _internal_has_positive_expiry();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_positive_expiry() {
  positive_expiry_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_positive_expiry() const {
  return positive_expiry_;
}
inline int64_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::positive_expiry() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.positive_expiry)
  return _internal_positive_expiry();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_set_positive_expiry(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  positive_expiry_ = value;
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_positive_expiry(int64_t value) {
  _internal_set_positive_expiry(value);
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.positive_expiry)
}

// optional string full_hash = 2;
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_has_full_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::has_full_hash() const {
  return _internal_has_full_hash();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_full_hash() {
  full_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::full_hash() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
  return _internal_full_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_full_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 full_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
}
inline std::string* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::mutable_full_hash() {
  std::string* _s = _internal_mutable_full_hash();
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
  return _s;
}
inline const std::string& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_full_hash() const {
  return full_hash_.Get();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_set_full_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  full_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_mutable_full_hash() {
  _has_bits_[0] |= 0x00000001u;
  return full_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::release_full_hash() {
  // @@protoc_insertion_point(field_release:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
  if (!_internal_has_full_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = full_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (full_hash_.IsDefault()) {
    full_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_allocated_full_hash(std::string* full_hash) {
  if (full_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  full_hash_.SetAllocated(full_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (full_hash_.IsDefault()) {
    full_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
}

// optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_has_list_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || list_identifier_ != nullptr);
  return value;
}
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::has_list_identifier() const {
  return _internal_has_list_identifier();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_list_identifier() {
  if (list_identifier_ != nullptr) list_identifier_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_list_identifier() const {
  const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* p = list_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier&>(
      ::safe_browsing::_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_);
}
inline const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::list_identifier() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
  return _internal_list_identifier();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::unsafe_arena_set_allocated_list_identifier(
    ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* list_identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_identifier_);
  }
  list_identifier_ = list_identifier;
  if (list_identifier) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::release_list_identifier() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* temp = list_identifier_;
  list_identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::unsafe_arena_release_list_identifier() {
  // @@protoc_insertion_point(field_release:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* temp = list_identifier_;
  list_identifier_ = nullptr;
  return temp;
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_internal_mutable_list_identifier() {
  _has_bits_[0] |= 0x00000002u;
  if (list_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier>(GetArenaForAllocation());
    list_identifier_ = p;
  }
  return list_identifier_;
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::mutable_list_identifier() {
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* _msg = _internal_mutable_list_identifier();
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
  return _msg;
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_allocated_list_identifier(::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* list_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete list_identifier_;
  }
  if (list_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list_identifier);
    if (message_arena != submessage_arena) {
      list_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  list_identifier_ = list_identifier;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
}

// -------------------------------------------------------------------

// FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo

// optional int64 negative_expiry = 1;
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_internal_has_negative_expiry() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::has_negative_expiry() const {
  return _internal_has_negative_expiry();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::clear_negative_expiry() {
  negative_expiry_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_internal_negative_expiry() const {
  return negative_expiry_;
}
inline int64_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::negative_expiry() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.negative_expiry)
  return _internal_negative_expiry();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_internal_set_negative_expiry(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  negative_expiry_ = value;
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::set_negative_expiry(int64_t value) {
  _internal_set_negative_expiry(value);
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.negative_expiry)
}

// repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
inline int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_internal_full_hash_info_size() const {
  return full_hash_info_.size();
}
inline int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::full_hash_info_size() const {
  return _internal_full_hash_info_size();
}
inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::clear_full_hash_info() {
  full_hash_info_.Clear();
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::mutable_full_hash_info(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return full_hash_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >*
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::mutable_full_hash_info() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return &full_hash_info_;
}
inline const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_internal_full_hash_info(int index) const {
  return full_hash_info_.Get(index);
}
inline const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::full_hash_info(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return _internal_full_hash_info(index);
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_internal_add_full_hash_info() {
  return full_hash_info_.Add();
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::add_full_hash_info() {
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* _add = _internal_add_full_hash_info();
  // @@protoc_insertion_point(field_add:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >&
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::full_hash_info() const {
  // @@protoc_insertion_point(field_list:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return full_hash_info_;
}

// -------------------------------------------------------------------

// FullHashCacheInfo_FullHashCache

// optional string hash_prefix = 1;
inline bool FullHashCacheInfo_FullHashCache::_internal_has_hash_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FullHashCacheInfo_FullHashCache::has_hash_prefix() const {
  return _internal_has_hash_prefix();
}
inline void FullHashCacheInfo_FullHashCache::clear_hash_prefix() {
  hash_prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FullHashCacheInfo_FullHashCache::hash_prefix() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
  return _internal_hash_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FullHashCacheInfo_FullHashCache::set_hash_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hash_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
}
inline std::string* FullHashCacheInfo_FullHashCache::mutable_hash_prefix() {
  std::string* _s = _internal_mutable_hash_prefix();
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
  return _s;
}
inline const std::string& FullHashCacheInfo_FullHashCache::_internal_hash_prefix() const {
  return hash_prefix_.Get();
}
inline void FullHashCacheInfo_FullHashCache::_internal_set_hash_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* FullHashCacheInfo_FullHashCache::_internal_mutable_hash_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return hash_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* FullHashCacheInfo_FullHashCache::release_hash_prefix() {
  // @@protoc_insertion_point(field_release:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
  if (!_internal_has_hash_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = hash_prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_prefix_.IsDefault()) {
    hash_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FullHashCacheInfo_FullHashCache::set_allocated_hash_prefix(std::string* hash_prefix) {
  if (hash_prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_prefix_.SetAllocated(hash_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_prefix_.IsDefault()) {
    hash_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
}

// optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
inline bool FullHashCacheInfo_FullHashCache::_internal_has_cached_hash_prefix_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cached_hash_prefix_info_ != nullptr);
  return value;
}
inline bool FullHashCacheInfo_FullHashCache::has_cached_hash_prefix_info() const {
  return _internal_has_cached_hash_prefix_info();
}
inline void FullHashCacheInfo_FullHashCache::clear_cached_hash_prefix_info() {
  if (cached_hash_prefix_info_ != nullptr) cached_hash_prefix_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& FullHashCacheInfo_FullHashCache::_internal_cached_hash_prefix_info() const {
  const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* p = cached_hash_prefix_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo&>(
      ::safe_browsing::_FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_);
}
inline const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& FullHashCacheInfo_FullHashCache::cached_hash_prefix_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
  return _internal_cached_hash_prefix_info();
}
inline void FullHashCacheInfo_FullHashCache::unsafe_arena_set_allocated_cached_hash_prefix_info(
    ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* cached_hash_prefix_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cached_hash_prefix_info_);
  }
  cached_hash_prefix_info_ = cached_hash_prefix_info;
  if (cached_hash_prefix_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* FullHashCacheInfo_FullHashCache::release_cached_hash_prefix_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* temp = cached_hash_prefix_info_;
  cached_hash_prefix_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* FullHashCacheInfo_FullHashCache::unsafe_arena_release_cached_hash_prefix_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
  _has_bits_[0] &= ~0x00000002u;
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* temp = cached_hash_prefix_info_;
  cached_hash_prefix_info_ = nullptr;
  return temp;
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* FullHashCacheInfo_FullHashCache::_internal_mutable_cached_hash_prefix_info() {
  _has_bits_[0] |= 0x00000002u;
  if (cached_hash_prefix_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo>(GetArenaForAllocation());
    cached_hash_prefix_info_ = p;
  }
  return cached_hash_prefix_info_;
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* FullHashCacheInfo_FullHashCache::mutable_cached_hash_prefix_info() {
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* _msg = _internal_mutable_cached_hash_prefix_info();
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
  return _msg;
}
inline void FullHashCacheInfo_FullHashCache::set_allocated_cached_hash_prefix_info(::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* cached_hash_prefix_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cached_hash_prefix_info_;
  }
  if (cached_hash_prefix_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cached_hash_prefix_info);
    if (message_arena != submessage_arena) {
      cached_hash_prefix_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cached_hash_prefix_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cached_hash_prefix_info_ = cached_hash_prefix_info;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
}

// -------------------------------------------------------------------

// FullHashCacheInfo

// optional int32 number_of_hits = 1;
inline bool FullHashCacheInfo::_internal_has_number_of_hits() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FullHashCacheInfo::has_number_of_hits() const {
  return _internal_has_number_of_hits();
}
inline void FullHashCacheInfo::clear_number_of_hits() {
  number_of_hits_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FullHashCacheInfo::_internal_number_of_hits() const {
  return number_of_hits_;
}
inline int32_t FullHashCacheInfo::number_of_hits() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.number_of_hits)
  return _internal_number_of_hits();
}
inline void FullHashCacheInfo::_internal_set_number_of_hits(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  number_of_hits_ = value;
}
inline void FullHashCacheInfo::set_number_of_hits(int32_t value) {
  _internal_set_number_of_hits(value);
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.number_of_hits)
}

// repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
inline int FullHashCacheInfo::_internal_full_hash_cache_size() const {
  return full_hash_cache_.size();
}
inline int FullHashCacheInfo::full_hash_cache_size() const {
  return _internal_full_hash_cache_size();
}
inline void FullHashCacheInfo::clear_full_hash_cache() {
  full_hash_cache_.Clear();
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache* FullHashCacheInfo::mutable_full_hash_cache(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return full_hash_cache_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache >*
FullHashCacheInfo::mutable_full_hash_cache() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return &full_hash_cache_;
}
inline const ::safe_browsing::FullHashCacheInfo_FullHashCache& FullHashCacheInfo::_internal_full_hash_cache(int index) const {
  return full_hash_cache_.Get(index);
}
inline const ::safe_browsing::FullHashCacheInfo_FullHashCache& FullHashCacheInfo::full_hash_cache(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return _internal_full_hash_cache(index);
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache* FullHashCacheInfo::_internal_add_full_hash_cache() {
  return full_hash_cache_.Add();
}
inline ::safe_browsing::FullHashCacheInfo_FullHashCache* FullHashCacheInfo::add_full_hash_cache() {
  ::safe_browsing::FullHashCacheInfo_FullHashCache* _add = _internal_add_full_hash_cache();
  // @@protoc_insertion_point(field_add:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache >&
FullHashCacheInfo::full_hash_cache() const {
  // @@protoc_insertion_point(field_list:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return full_hash_cache_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webui_2eproto
