// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webui.proto

#include "webui.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safe_browsing {
PROTOBUF_CONSTEXPR DatabaseManagerInfo_UpdateInfo::DatabaseManagerInfo_UpdateInfo(
    ::_pbi::ConstantInitialized)
  : last_update_time_millis_(uint64_t{0u})
  , next_update_time_millis_(uint64_t{0u})
  , network_status_code_(0){}
struct DatabaseManagerInfo_UpdateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatabaseManagerInfo_UpdateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatabaseManagerInfo_UpdateInfoDefaultTypeInternal() {}
  union {
    DatabaseManagerInfo_UpdateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatabaseManagerInfo_UpdateInfoDefaultTypeInternal _DatabaseManagerInfo_UpdateInfo_default_instance_;
PROTOBUF_CONSTEXPR DatabaseManagerInfo_DatabaseInfo_StoreInfo::DatabaseManagerInfo_DatabaseInfo_StoreInfo(
    ::_pbi::ConstantInitialized)
  : file_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , state_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_size_bytes_(int64_t{0})
  , last_apply_update_time_millis_(uint64_t{0u})
  , update_status_(0)
  , checks_attempted_(0u){}
struct DatabaseManagerInfo_DatabaseInfo_StoreInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatabaseManagerInfo_DatabaseInfo_StoreInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatabaseManagerInfo_DatabaseInfo_StoreInfoDefaultTypeInternal() {}
  union {
    DatabaseManagerInfo_DatabaseInfo_StoreInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatabaseManagerInfo_DatabaseInfo_StoreInfoDefaultTypeInternal _DatabaseManagerInfo_DatabaseInfo_StoreInfo_default_instance_;
PROTOBUF_CONSTEXPR DatabaseManagerInfo_DatabaseInfo::DatabaseManagerInfo_DatabaseInfo(
    ::_pbi::ConstantInitialized)
  : store_info_()
  , database_size_bytes_(uint64_t{0u})
  , update_successful_(false){}
struct DatabaseManagerInfo_DatabaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatabaseManagerInfo_DatabaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatabaseManagerInfo_DatabaseInfoDefaultTypeInternal() {}
  union {
    DatabaseManagerInfo_DatabaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatabaseManagerInfo_DatabaseInfoDefaultTypeInternal _DatabaseManagerInfo_DatabaseInfo_default_instance_;
PROTOBUF_CONSTEXPR DatabaseManagerInfo::DatabaseManagerInfo(
    ::_pbi::ConstantInitialized)
  : update_info_(nullptr)
  , database_info_(nullptr){}
struct DatabaseManagerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatabaseManagerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatabaseManagerInfoDefaultTypeInternal() {}
  union {
    DatabaseManagerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatabaseManagerInfoDefaultTypeInternal _DatabaseManagerInfo_default_instance_;
PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(
    ::_pbi::ConstantInitialized)
  : platform_type_(0)
  , threat_entry_type_(0)
  , threat_type_(0){}
struct FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifierDefaultTypeInternal() {}
  union {
    FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifierDefaultTypeInternal _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_;
PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(
    ::_pbi::ConstantInitialized)
  : full_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , list_identifier_(nullptr)
  , positive_expiry_(int64_t{0}){}
struct FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfoDefaultTypeInternal() {}
  union {
    FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfoDefaultTypeInternal _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_;
PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(
    ::_pbi::ConstantInitialized)
  : full_hash_info_()
  , negative_expiry_(int64_t{0}){}
struct FullHashCacheInfo_FullHashCache_CachedHashPrefixInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache_CachedHashPrefixInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfoDefaultTypeInternal() {}
  union {
    FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullHashCacheInfo_FullHashCache_CachedHashPrefixInfoDefaultTypeInternal _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_;
PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCache::FullHashCacheInfo_FullHashCache(
    ::_pbi::ConstantInitialized)
  : hash_prefix_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cached_hash_prefix_info_(nullptr){}
struct FullHashCacheInfo_FullHashCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullHashCacheInfo_FullHashCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullHashCacheInfo_FullHashCacheDefaultTypeInternal() {}
  union {
    FullHashCacheInfo_FullHashCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullHashCacheInfo_FullHashCacheDefaultTypeInternal _FullHashCacheInfo_FullHashCache_default_instance_;
PROTOBUF_CONSTEXPR FullHashCacheInfo::FullHashCacheInfo(
    ::_pbi::ConstantInitialized)
  : full_hash_cache_()
  , number_of_hits_(0){}
struct FullHashCacheInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullHashCacheInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullHashCacheInfoDefaultTypeInternal() {}
  union {
    FullHashCacheInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullHashCacheInfoDefaultTypeInternal _FullHashCacheInfo_default_instance_;
}  // namespace safe_browsing
namespace safe_browsing {

// ===================================================================

class DatabaseManagerInfo_UpdateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseManagerInfo_UpdateInfo>()._has_bits_);
  static void set_has_network_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_update_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_next_update_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DatabaseManagerInfo_UpdateInfo::DatabaseManagerInfo_UpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
}
DatabaseManagerInfo_UpdateInfo::DatabaseManagerInfo_UpdateInfo(const DatabaseManagerInfo_UpdateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&last_update_time_millis_, &from.last_update_time_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_status_code_) -
    reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
}

inline void DatabaseManagerInfo_UpdateInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_update_time_millis_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&network_status_code_) -
    reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
}

DatabaseManagerInfo_UpdateInfo::~DatabaseManagerInfo_UpdateInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatabaseManagerInfo_UpdateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DatabaseManagerInfo_UpdateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatabaseManagerInfo_UpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&last_update_time_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_status_code_) -
        reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DatabaseManagerInfo_UpdateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 network_status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_network_status_code(&has_bits);
          network_status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 last_update_time_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_update_time_millis(&has_bits);
          last_update_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 next_update_time_millis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_next_update_time_millis(&has_bits);
          next_update_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatabaseManagerInfo_UpdateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 network_status_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_network_status_code(), target);
  }

  // optional uint64 last_update_time_millis = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_update_time_millis(), target);
  }

  // optional uint64 next_update_time_millis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_next_update_time_millis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  return target;
}

size_t DatabaseManagerInfo_UpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 last_update_time_millis = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_update_time_millis());
    }

    // optional uint64 next_update_time_millis = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_next_update_time_millis());
    }

    // optional int32 network_status_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_network_status_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseManagerInfo_UpdateInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DatabaseManagerInfo_UpdateInfo*>(
      &from));
}

void DatabaseManagerInfo_UpdateInfo::MergeFrom(const DatabaseManagerInfo_UpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      last_update_time_millis_ = from.last_update_time_millis_;
    }
    if (cached_has_bits & 0x00000002u) {
      next_update_time_millis_ = from.next_update_time_millis_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_status_code_ = from.network_status_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DatabaseManagerInfo_UpdateInfo::CopyFrom(const DatabaseManagerInfo_UpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_UpdateInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_UpdateInfo::InternalSwap(DatabaseManagerInfo_UpdateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatabaseManagerInfo_UpdateInfo, network_status_code_)
      + sizeof(DatabaseManagerInfo_UpdateInfo::network_status_code_)
      - PROTOBUF_FIELD_OFFSET(DatabaseManagerInfo_UpdateInfo, last_update_time_millis_)>(
          reinterpret_cast<char*>(&last_update_time_millis_),
          reinterpret_cast<char*>(&other->last_update_time_millis_));
}

std::string DatabaseManagerInfo_UpdateInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.UpdateInfo";
}


// ===================================================================

class DatabaseManagerInfo_DatabaseInfo_StoreInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseManagerInfo_DatabaseInfo_StoreInfo>()._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_update_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_apply_update_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_checks_attempted(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DatabaseManagerInfo_DatabaseInfo_StoreInfo::DatabaseManagerInfo_DatabaseInfo_StoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
}
DatabaseManagerInfo_DatabaseInfo_StoreInfo::DatabaseManagerInfo_DatabaseInfo_StoreInfo(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    file_name_.Set(from._internal_file_name(), 
      GetArenaForAllocation());
  }
  state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_state()) {
    state_.Set(from._internal_state(), 
      GetArenaForAllocation());
  }
  ::memcpy(&file_size_bytes_, &from.file_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&checks_attempted_) -
    reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
}

inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SharedCtor() {
file_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  state_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_size_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&checks_attempted_) -
    reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
}

DatabaseManagerInfo_DatabaseInfo_StoreInfo::~DatabaseManagerInfo_DatabaseInfo_StoreInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.Destroy();
  state_.Destroy();
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      state_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&file_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checks_attempted_) -
        reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DatabaseManagerInfo_DatabaseInfo_StoreInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 file_size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file_size_bytes(&has_bits);
          file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 update_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_update_status(&has_bits);
          update_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 last_apply_update_time_millis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_apply_update_time_millis(&has_bits);
          last_apply_update_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 checks_attempted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_checks_attempted(&has_bits);
          checks_attempted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatabaseManagerInfo_DatabaseInfo_StoreInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // optional int64 file_size_bytes = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_file_size_bytes(), target);
  }

  // optional int32 update_status = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_update_status(), target);
  }

  // optional uint64 last_apply_update_time_millis = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_apply_update_time_millis(), target);
  }

  // optional uint32 checks_attempted = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_checks_attempted(), target);
  }

  // optional string state = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  return target;
}

size_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string file_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional string state = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state());
    }

    // optional int64 file_size_bytes = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_size_bytes());
    }

    // optional uint64 last_apply_update_time_millis = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_apply_update_time_millis());
    }

    // optional int32 update_status = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_update_status());
    }

    // optional uint32 checks_attempted = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_checks_attempted());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DatabaseManagerInfo_DatabaseInfo_StoreInfo*>(
      &from));
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::MergeFrom(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_state(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      file_size_bytes_ = from.file_size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_apply_update_time_millis_ = from.last_apply_update_time_millis_;
    }
    if (cached_has_bits & 0x00000010u) {
      update_status_ = from.update_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      checks_attempted_ = from.checks_attempted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::CopyFrom(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::InternalSwap(DatabaseManagerInfo_DatabaseInfo_StoreInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &state_, lhs_arena,
      &other->state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatabaseManagerInfo_DatabaseInfo_StoreInfo, checks_attempted_)
      + sizeof(DatabaseManagerInfo_DatabaseInfo_StoreInfo::checks_attempted_)
      - PROTOBUF_FIELD_OFFSET(DatabaseManagerInfo_DatabaseInfo_StoreInfo, file_size_bytes_)>(
          reinterpret_cast<char*>(&file_size_bytes_),
          reinterpret_cast<char*>(&other->file_size_bytes_));
}

std::string DatabaseManagerInfo_DatabaseInfo_StoreInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo";
}


// ===================================================================

class DatabaseManagerInfo_DatabaseInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseManagerInfo_DatabaseInfo>()._has_bits_);
  static void set_has_update_successful(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_database_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DatabaseManagerInfo_DatabaseInfo::DatabaseManagerInfo_DatabaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  store_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
}
DatabaseManagerInfo_DatabaseInfo::DatabaseManagerInfo_DatabaseInfo(const DatabaseManagerInfo_DatabaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      store_info_(from.store_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&database_size_bytes_, &from.database_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_successful_) -
    reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
}

inline void DatabaseManagerInfo_DatabaseInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&database_size_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_successful_) -
    reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
}

DatabaseManagerInfo_DatabaseInfo::~DatabaseManagerInfo_DatabaseInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatabaseManagerInfo_DatabaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DatabaseManagerInfo_DatabaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatabaseManagerInfo_DatabaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&database_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_successful_) -
        reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DatabaseManagerInfo_DatabaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool update_successful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_update_successful(&has_bits);
          update_successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 database_size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_database_size_bytes(&has_bits);
          database_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_store_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatabaseManagerInfo_DatabaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool update_successful = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_update_successful(), target);
  }

  // optional uint64 database_size_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_database_size_bytes(), target);
  }

  // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_store_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_store_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  return target;
}

size_t DatabaseManagerInfo_DatabaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
  total_size += 1UL * this->_internal_store_info_size();
  for (const auto& msg : this->store_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 database_size_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_database_size_bytes());
    }

    // optional bool update_successful = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseManagerInfo_DatabaseInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DatabaseManagerInfo_DatabaseInfo*>(
      &from));
}

void DatabaseManagerInfo_DatabaseInfo::MergeFrom(const DatabaseManagerInfo_DatabaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  store_info_.MergeFrom(from.store_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      database_size_bytes_ = from.database_size_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_successful_ = from.update_successful_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DatabaseManagerInfo_DatabaseInfo::CopyFrom(const DatabaseManagerInfo_DatabaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_DatabaseInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_DatabaseInfo::InternalSwap(DatabaseManagerInfo_DatabaseInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  store_info_.InternalSwap(&other->store_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatabaseManagerInfo_DatabaseInfo, update_successful_)
      + sizeof(DatabaseManagerInfo_DatabaseInfo::update_successful_)
      - PROTOBUF_FIELD_OFFSET(DatabaseManagerInfo_DatabaseInfo, database_size_bytes_)>(
          reinterpret_cast<char*>(&database_size_bytes_),
          reinterpret_cast<char*>(&other->database_size_bytes_));
}

std::string DatabaseManagerInfo_DatabaseInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.DatabaseInfo";
}


// ===================================================================

class DatabaseManagerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseManagerInfo>()._has_bits_);
  static const ::safe_browsing::DatabaseManagerInfo_UpdateInfo& update_info(const DatabaseManagerInfo* msg);
  static void set_has_update_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo& database_info(const DatabaseManagerInfo* msg);
  static void set_has_database_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::DatabaseManagerInfo_UpdateInfo&
DatabaseManagerInfo::_Internal::update_info(const DatabaseManagerInfo* msg) {
  return *msg->update_info_;
}
const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo&
DatabaseManagerInfo::_Internal::database_info(const DatabaseManagerInfo* msg) {
  return *msg->database_info_;
}
DatabaseManagerInfo::DatabaseManagerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.DatabaseManagerInfo)
}
DatabaseManagerInfo::DatabaseManagerInfo(const DatabaseManagerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_update_info()) {
    update_info_ = new ::safe_browsing::DatabaseManagerInfo_UpdateInfo(*from.update_info_);
  } else {
    update_info_ = nullptr;
  }
  if (from._internal_has_database_info()) {
    database_info_ = new ::safe_browsing::DatabaseManagerInfo_DatabaseInfo(*from.database_info_);
  } else {
    database_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo)
}

inline void DatabaseManagerInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&update_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&database_info_) -
    reinterpret_cast<char*>(&update_info_)) + sizeof(database_info_));
}

DatabaseManagerInfo::~DatabaseManagerInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatabaseManagerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete update_info_;
  if (this != internal_default_instance()) delete database_info_;
}

void DatabaseManagerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatabaseManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_info_ != nullptr);
      update_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(database_info_ != nullptr);
      database_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DatabaseManagerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatabaseManagerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.DatabaseManagerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::update_info(this),
        _Internal::update_info(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::database_info(this),
        _Internal::database_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.DatabaseManagerInfo)
  return target;
}

size_t DatabaseManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_info_);
    }

    // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseManagerInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DatabaseManagerInfo*>(
      &from));
}

void DatabaseManagerInfo::MergeFrom(const DatabaseManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_update_info()->::safe_browsing::DatabaseManagerInfo_UpdateInfo::MergeFrom(from._internal_update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_database_info()->::safe_browsing::DatabaseManagerInfo_DatabaseInfo::MergeFrom(from._internal_database_info());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DatabaseManagerInfo::CopyFrom(const DatabaseManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo::InternalSwap(DatabaseManagerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatabaseManagerInfo, database_info_)
      + sizeof(DatabaseManagerInfo::database_info_)
      - PROTOBUF_FIELD_OFFSET(DatabaseManagerInfo, update_info_)>(
          reinterpret_cast<char*>(&update_info_),
          reinterpret_cast<char*>(&other->update_info_));
}

std::string DatabaseManagerInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo";
}


// ===================================================================

class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier>()._has_bits_);
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threat_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_threat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&platform_type_, &from.platform_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&threat_type_) -
    reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
}

inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&platform_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&threat_type_) -
    reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&platform_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&threat_type_) -
        reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 platform_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_platform_type(&has_bits);
          platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 threat_entry_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_threat_entry_type(&has_bits);
          threat_entry_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 threat_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_threat_type(&has_bits);
          threat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platform_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_platform_type(), target);
  }

  // optional int32 threat_entry_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_threat_entry_type(), target);
  }

  // optional int32 threat_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_threat_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  return target;
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 platform_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_platform_type());
    }

    // optional int32 threat_entry_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_threat_entry_type());
    }

    // optional int32 threat_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_threat_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier*>(
      &from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      platform_type_ = from.platform_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      threat_entry_type_ = from.threat_entry_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      threat_type_ = from.threat_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier, threat_type_)
      + sizeof(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::threat_type_)
      - PROTOBUF_FIELD_OFFSET(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier, platform_type_)>(
          reinterpret_cast<char*>(&platform_type_),
          reinterpret_cast<char*>(&other->platform_type_));
}

std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier";
}


// ===================================================================

class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo>()._has_bits_);
  static void set_has_positive_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_full_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& list_identifier(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* msg);
  static void set_has_list_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier&
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_Internal::list_identifier(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* msg) {
  return *msg->list_identifier_;
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  full_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_hash()) {
    full_hash_.Set(from._internal_full_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_list_identifier()) {
    list_identifier_ = new ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(*from.list_identifier_);
  } else {
    list_identifier_ = nullptr;
  }
  positive_expiry_ = from.positive_expiry_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
}

inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SharedCtor() {
full_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&list_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&positive_expiry_) -
    reinterpret_cast<char*>(&list_identifier_)) + sizeof(positive_expiry_));
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  full_hash_.Destroy();
  if (this != internal_default_instance()) delete list_identifier_;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      full_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(list_identifier_ != nullptr);
      list_identifier_->Clear();
    }
  }
  positive_expiry_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 positive_expiry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_positive_expiry(&has_bits);
          positive_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string full_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_full_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 positive_expiry = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_positive_expiry(), target);
  }

  // optional string full_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_full_hash(), target);
  }

  // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::list_identifier(this),
        _Internal::list_identifier(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  return target;
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string full_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_hash());
    }

    // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_identifier_);
    }

    // optional int64 positive_expiry = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_positive_expiry());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo*>(
      &from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_full_hash(from._internal_full_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_list_identifier()->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::MergeFrom(from._internal_list_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      positive_expiry_ = from.positive_expiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &full_hash_, lhs_arena,
      &other->full_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo, positive_expiry_)
      + sizeof(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::positive_expiry_)
      - PROTOBUF_FIELD_OFFSET(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo, list_identifier_)>(
          reinterpret_cast<char*>(&list_identifier_),
          reinterpret_cast<char*>(&other->list_identifier_));
}

std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo";
}


// ===================================================================

class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo>()._has_bits_);
  static void set_has_negative_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  full_hash_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      full_hash_info_(from.full_hash_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  negative_expiry_ = from.negative_expiry_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
}

inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SharedCtor() {
negative_expiry_ = int64_t{0};
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_hash_info_.Clear();
  negative_expiry_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 negative_expiry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_negative_expiry(&has_bits);
          negative_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_full_hash_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 negative_expiry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_negative_expiry(), target);
  }

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_full_hash_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_full_hash_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  return target;
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
  total_size += 1UL * this->_internal_full_hash_info_size();
  for (const auto& msg : this->full_hash_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 negative_expiry = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_negative_expiry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo*>(
      &from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  full_hash_info_.MergeFrom(from.full_hash_info_);
  if (from._internal_has_negative_expiry()) {
    _internal_set_negative_expiry(from._internal_negative_expiry());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  full_hash_info_.InternalSwap(&other->full_hash_info_);
  swap(negative_expiry_, other->negative_expiry_);
}

std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo";
}


// ===================================================================

class FullHashCacheInfo_FullHashCache::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo_FullHashCache>()._has_bits_);
  static void set_has_hash_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& cached_hash_prefix_info(const FullHashCacheInfo_FullHashCache* msg);
  static void set_has_cached_hash_prefix_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo&
FullHashCacheInfo_FullHashCache::_Internal::cached_hash_prefix_info(const FullHashCacheInfo_FullHashCache* msg) {
  return *msg->cached_hash_prefix_info_;
}
FullHashCacheInfo_FullHashCache::FullHashCacheInfo_FullHashCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.FullHashCacheInfo.FullHashCache)
}
FullHashCacheInfo_FullHashCache::FullHashCacheInfo_FullHashCache(const FullHashCacheInfo_FullHashCache& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hash_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hash_prefix()) {
    hash_prefix_.Set(from._internal_hash_prefix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cached_hash_prefix_info()) {
    cached_hash_prefix_info_ = new ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(*from.cached_hash_prefix_info_);
  } else {
    cached_hash_prefix_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache)
}

inline void FullHashCacheInfo_FullHashCache::SharedCtor() {
hash_prefix_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_prefix_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cached_hash_prefix_info_ = nullptr;
}

FullHashCacheInfo_FullHashCache::~FullHashCacheInfo_FullHashCache() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullHashCacheInfo_FullHashCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_prefix_.Destroy();
  if (this != internal_default_instance()) delete cached_hash_prefix_info_;
}

void FullHashCacheInfo_FullHashCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FullHashCacheInfo_FullHashCache::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hash_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cached_hash_prefix_info_ != nullptr);
      cached_hash_prefix_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FullHashCacheInfo_FullHashCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string hash_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cached_hash_prefix_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullHashCacheInfo_FullHashCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hash_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash_prefix(), target);
  }

  // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cached_hash_prefix_info(this),
        _Internal::cached_hash_prefix_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.FullHashCacheInfo.FullHashCache)
  return target;
}

size_t FullHashCacheInfo_FullHashCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string hash_prefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash_prefix());
    }

    // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cached_hash_prefix_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo_FullHashCache::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FullHashCacheInfo_FullHashCache*>(
      &from));
}

void FullHashCacheInfo_FullHashCache::MergeFrom(const FullHashCacheInfo_FullHashCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash_prefix(from._internal_hash_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cached_hash_prefix_info()->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::MergeFrom(from._internal_cached_hash_prefix_info());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FullHashCacheInfo_FullHashCache::CopyFrom(const FullHashCacheInfo_FullHashCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache::InternalSwap(FullHashCacheInfo_FullHashCache* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hash_prefix_, lhs_arena,
      &other->hash_prefix_, rhs_arena
  );
  swap(cached_hash_prefix_info_, other->cached_hash_prefix_info_);
}

std::string FullHashCacheInfo_FullHashCache::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache";
}


// ===================================================================

class FullHashCacheInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FullHashCacheInfo>()._has_bits_);
  static void set_has_number_of_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FullHashCacheInfo::FullHashCacheInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  full_hash_cache_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.FullHashCacheInfo)
}
FullHashCacheInfo::FullHashCacheInfo(const FullHashCacheInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      full_hash_cache_(from.full_hash_cache_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  number_of_hits_ = from.number_of_hits_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo)
}

inline void FullHashCacheInfo::SharedCtor() {
number_of_hits_ = 0;
}

FullHashCacheInfo::~FullHashCacheInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullHashCacheInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FullHashCacheInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FullHashCacheInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_hash_cache_.Clear();
  number_of_hits_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FullHashCacheInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 number_of_hits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_number_of_hits(&has_bits);
          number_of_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_full_hash_cache(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullHashCacheInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.FullHashCacheInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 number_of_hits = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_number_of_hits(), target);
  }

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_full_hash_cache_size()); i < n; i++) {
    const auto& repfield = this->_internal_full_hash_cache(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.FullHashCacheInfo)
  return target;
}

size_t FullHashCacheInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
  total_size += 1UL * this->_internal_full_hash_cache_size();
  for (const auto& msg : this->full_hash_cache_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 number_of_hits = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_hits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullHashCacheInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FullHashCacheInfo*>(
      &from));
}

void FullHashCacheInfo::MergeFrom(const FullHashCacheInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  full_hash_cache_.MergeFrom(from.full_hash_cache_);
  if (from._internal_has_number_of_hits()) {
    _internal_set_number_of_hits(from._internal_number_of_hits());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FullHashCacheInfo::CopyFrom(const FullHashCacheInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo::InternalSwap(FullHashCacheInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  full_hash_cache_.InternalSwap(&other->full_hash_cache_);
  swap(number_of_hits_, other->number_of_hits_);
}

std::string FullHashCacheInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::DatabaseManagerInfo_UpdateInfo*
Arena::CreateMaybeMessage< ::safe_browsing::DatabaseManagerInfo_UpdateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::DatabaseManagerInfo_UpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo*
Arena::CreateMaybeMessage< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DatabaseManagerInfo_DatabaseInfo*
Arena::CreateMaybeMessage< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DatabaseManagerInfo*
Arena::CreateMaybeMessage< ::safe_browsing::DatabaseManagerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::DatabaseManagerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier*
Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo*
Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo*
Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo_FullHashCache*
Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo_FullHashCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::FullHashCacheInfo_FullHashCache >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::FullHashCacheInfo*
Arena::CreateMaybeMessage< ::safe_browsing::FullHashCacheInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::FullHashCacheInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
