// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/safe_browsing/core/common/proto/csd.proto

#include "components/safe_browsing/core/common/proto/csd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safe_browsing {
PROTOBUF_CONSTEXPR ChromeUserPopulation_PageLoadToken::ChromeUserPopulation_PageLoadToken(
    ::_pbi::ConstantInitialized)
  : token_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , token_time_msec_(int64_t{0})
  , token_source_(0)
{}
struct ChromeUserPopulation_PageLoadTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeUserPopulation_PageLoadTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeUserPopulation_PageLoadTokenDefaultTypeInternal() {}
  union {
    ChromeUserPopulation_PageLoadToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeUserPopulation_PageLoadTokenDefaultTypeInternal _ChromeUserPopulation_PageLoadToken_default_instance_;
PROTOBUF_CONSTEXPR ChromeUserPopulation::ChromeUserPopulation(
    ::_pbi::ConstantInitialized)
  : finch_active_groups_()
  , page_load_tokens_()
  , user_agent_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_population_(0)

  , profile_management_status_(0)

  , is_history_sync_enabled_(false)
  , is_under_advanced_protection_(false)
  , is_incognito_(false)
  , is_mbb_enabled_(false)
  , number_of_profiles_(0)
  , number_of_loaded_profiles_(0)
  , number_of_open_profiles_(0)
  , aesb_last_update_time_windows_epoch_micros_(int64_t{0})
  , is_aesb_enabled_(false){}
struct ChromeUserPopulationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeUserPopulationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeUserPopulationDefaultTypeInternal() {}
  union {
    ChromeUserPopulation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeUserPopulationDefaultTypeInternal _ChromeUserPopulation_default_instance_;
PROTOBUF_CONSTEXPR ClientPhishingRequest_Feature::ClientPhishingRequest_Feature(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(0){}
struct ClientPhishingRequest_FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPhishingRequest_FeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPhishingRequest_FeatureDefaultTypeInternal() {}
  union {
    ClientPhishingRequest_Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPhishingRequest_FeatureDefaultTypeInternal _ClientPhishingRequest_Feature_default_instance_;
PROTOBUF_CONSTEXPR ClientPhishingRequest_CategoryScore::ClientPhishingRequest_CategoryScore(
    ::_pbi::ConstantInitialized)
  : label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(0){}
struct ClientPhishingRequest_CategoryScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPhishingRequest_CategoryScoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPhishingRequest_CategoryScoreDefaultTypeInternal() {}
  union {
    ClientPhishingRequest_CategoryScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPhishingRequest_CategoryScoreDefaultTypeInternal _ClientPhishingRequest_CategoryScore_default_instance_;
PROTOBUF_CONSTEXPR ClientPhishingRequest::ClientPhishingRequest(
    ::_pbi::ConstantInitialized)
  : feature_map_()
  , non_model_feature_map_()
  , shingle_hashes_()
  , _shingle_hashes_cached_byte_size_(0)
  , referrer_chain_()
  , tflite_model_scores_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , obsolete_referrer_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , obsolete_hash_prefix_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , deprecated_model_filename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , population_(nullptr)
  , visual_features_(nullptr)
  , client_score_(0)
  , model_version_(0)
  , is_phishing_(false)
  , is_dom_match_(false)
  , is_tflite_match_(false)
  , tflite_model_version_(0)
  , dom_model_version_(0){}
struct ClientPhishingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPhishingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPhishingRequestDefaultTypeInternal() {}
  union {
    ClientPhishingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPhishingRequestDefaultTypeInternal _ClientPhishingRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientPhishingResponse::ClientPhishingResponse(
    ::_pbi::ConstantInitialized)
  : obsolete_whitelist_expression_()
  , phishy_(false){}
struct ClientPhishingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPhishingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPhishingResponseDefaultTypeInternal() {}
  union {
    ClientPhishingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPhishingResponseDefaultTypeInternal _ClientPhishingResponse_default_instance_;
PROTOBUF_CONSTEXPR LoginReputationClientRequest_Frame_Form::LoginReputationClientRequest_Frame_Form(
    ::_pbi::ConstantInitialized)
  : action_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , has_password_field_(false){}
struct LoginReputationClientRequest_Frame_FormDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReputationClientRequest_Frame_FormDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReputationClientRequest_Frame_FormDefaultTypeInternal() {}
  union {
    LoginReputationClientRequest_Frame_Form _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReputationClientRequest_Frame_FormDefaultTypeInternal _LoginReputationClientRequest_Frame_Form_default_instance_;
PROTOBUF_CONSTEXPR LoginReputationClientRequest_Frame::LoginReputationClientRequest_Frame(
    ::_pbi::ConstantInitialized)
  : referrer_chain_()
  , forms_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , referrer_chain_options_(nullptr)
  , frame_index_(0)
  , parent_frame_index_(0)
  , has_password_field_(false){}
struct LoginReputationClientRequest_FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReputationClientRequest_FrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReputationClientRequest_FrameDefaultTypeInternal() {}
  union {
    LoginReputationClientRequest_Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReputationClientRequest_FrameDefaultTypeInternal _LoginReputationClientRequest_Frame_default_instance_;
PROTOBUF_CONSTEXPR LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(
    ::_pbi::ConstantInitialized)
  : is_account_syncing_(false)
  , account_type_(0)
{}
struct LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountTypeDefaultTypeInternal() {}
  union {
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountTypeDefaultTypeInternal _LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_default_instance_;
PROTOBUF_CONSTEXPR LoginReputationClientRequest_PasswordReuseEvent::LoginReputationClientRequest_PasswordReuseEvent(
    ::_pbi::ConstantInitialized)
  : domains_matching_password_()
  , reused_password_account_type_(nullptr)
  , frame_id_(0)
  , sync_account_type_(0)

  , reused_password_type_(0)
{}
struct LoginReputationClientRequest_PasswordReuseEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReputationClientRequest_PasswordReuseEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReputationClientRequest_PasswordReuseEventDefaultTypeInternal() {}
  union {
    LoginReputationClientRequest_PasswordReuseEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReputationClientRequest_PasswordReuseEventDefaultTypeInternal _LoginReputationClientRequest_PasswordReuseEvent_default_instance_;
PROTOBUF_CONSTEXPR LoginReputationClientRequest_UrlDisplayExperiment::LoginReputationClientRequest_UrlDisplayExperiment(
    ::_pbi::ConstantInitialized)
  : delayed_warnings_enabled_(false)
  , delayed_warnings_mouse_clicks_enabled_(false)
  , reveal_on_hover_(false)
  , hide_on_interaction_(false)
  , elide_to_registrable_domain_(false)
  , simplified_url_display_enabled_(false){}
struct LoginReputationClientRequest_UrlDisplayExperimentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReputationClientRequest_UrlDisplayExperimentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReputationClientRequest_UrlDisplayExperimentDefaultTypeInternal() {}
  union {
    LoginReputationClientRequest_UrlDisplayExperiment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReputationClientRequest_UrlDisplayExperimentDefaultTypeInternal _LoginReputationClientRequest_UrlDisplayExperiment_default_instance_;
PROTOBUF_CONSTEXPR LoginReputationClientRequest_ReferringAppInfo::LoginReputationClientRequest_ReferringAppInfo(
    ::_pbi::ConstantInitialized)
  : referring_app_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , referring_app_source_(0)
{}
struct LoginReputationClientRequest_ReferringAppInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReputationClientRequest_ReferringAppInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReputationClientRequest_ReferringAppInfoDefaultTypeInternal() {}
  union {
    LoginReputationClientRequest_ReferringAppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReputationClientRequest_ReferringAppInfoDefaultTypeInternal _LoginReputationClientRequest_ReferringAppInfo_default_instance_;
PROTOBUF_CONSTEXPR LoginReputationClientRequest::LoginReputationClientRequest(
    ::_pbi::ConstantInitialized)
  : frames_()
  , page_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_reuse_event_(nullptr)
  , population_(nullptr)
  , visual_features_(nullptr)
  , dom_features_(nullptr)
  , url_display_experiment_(nullptr)
  , referring_app_info_(nullptr)
  , trigger_type_(0)

  , stored_verdict_cnt_(0)
  , clicked_through_interstitial_(false)
  , content_area_height_(0)
  , content_area_width_(0)
  , report_type_(0)
{}
struct LoginReputationClientRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReputationClientRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReputationClientRequestDefaultTypeInternal() {}
  union {
    LoginReputationClientRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReputationClientRequestDefaultTypeInternal _LoginReputationClientRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginReputationClientResponse::LoginReputationClientResponse(
    ::_pbi::ConstantInitialized)
  : cache_expression_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , verdict_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cache_duration_sec_(int64_t{0})
  , verdict_type_(0)

  , deprecated_cache_expression_exact_match_(false){}
struct LoginReputationClientResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReputationClientResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReputationClientResponseDefaultTypeInternal() {}
  union {
    LoginReputationClientResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReputationClientResponseDefaultTypeInternal _LoginReputationClientResponse_default_instance_;
PROTOBUF_CONSTEXPR VisualFeatures_BlurredImage::VisualFeatures_BlurredImage(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , width_(0)
  , height_(0){}
struct VisualFeatures_BlurredImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisualFeatures_BlurredImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisualFeatures_BlurredImageDefaultTypeInternal() {}
  union {
    VisualFeatures_BlurredImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisualFeatures_BlurredImageDefaultTypeInternal _VisualFeatures_BlurredImage_default_instance_;
PROTOBUF_CONSTEXPR VisualFeatures::VisualFeatures(
    ::_pbi::ConstantInitialized)
  : image_(nullptr){}
struct VisualFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisualFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisualFeaturesDefaultTypeInternal() {}
  union {
    VisualFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisualFeaturesDefaultTypeInternal _VisualFeatures_default_instance_;
PROTOBUF_CONSTEXPR DomFeatures_Feature::DomFeatures_Feature(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(0){}
struct DomFeatures_FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DomFeatures_FeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DomFeatures_FeatureDefaultTypeInternal() {}
  union {
    DomFeatures_Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DomFeatures_FeatureDefaultTypeInternal _DomFeatures_Feature_default_instance_;
PROTOBUF_CONSTEXPR DomFeatures::DomFeatures(
    ::_pbi::ConstantInitialized)
  : feature_map_()
  , shingle_hashes_()
  , _shingle_hashes_cached_byte_size_(0)
  , model_version_(0){}
struct DomFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DomFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DomFeaturesDefaultTypeInternal() {}
  union {
    DomFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DomFeaturesDefaultTypeInternal _DomFeatures_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_Digests::ClientDownloadRequest_Digests(
    ::_pbi::ConstantInitialized)
  : sha256_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sha1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadRequest_DigestsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_DigestsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_DigestsDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_Digests _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_DigestsDefaultTypeInternal _ClientDownloadRequest_Digests_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_Resource::ClientDownloadRequest_Resource(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , remote_ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , referrer_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct ClientDownloadRequest_ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_ResourceDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_ResourceDefaultTypeInternal _ClientDownloadRequest_Resource_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_CertificateChain_Element::ClientDownloadRequest_CertificateChain_Element(
    ::_pbi::ConstantInitialized)
  : certificate_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadRequest_CertificateChain_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_CertificateChain_ElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_CertificateChain_ElementDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_CertificateChain_Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_CertificateChain_ElementDefaultTypeInternal _ClientDownloadRequest_CertificateChain_Element_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_CertificateChain::ClientDownloadRequest_CertificateChain(
    ::_pbi::ConstantInitialized)
  : element_(){}
struct ClientDownloadRequest_CertificateChainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_CertificateChainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_CertificateChainDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_CertificateChain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_CertificateChainDefaultTypeInternal _ClientDownloadRequest_CertificateChain_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_ExtendedAttr::ClientDownloadRequest_ExtendedAttr(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadRequest_ExtendedAttrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_ExtendedAttrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_ExtendedAttrDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_ExtendedAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_ExtendedAttrDefaultTypeInternal _ClientDownloadRequest_ExtendedAttr_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_SignatureInfo::ClientDownloadRequest_SignatureInfo(
    ::_pbi::ConstantInitialized)
  : certificate_chain_()
  , signed_data_()
  , xattr_()
  , trusted_(false){}
struct ClientDownloadRequest_SignatureInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_SignatureInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_SignatureInfoDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_SignatureInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_SignatureInfoDefaultTypeInternal _ClientDownloadRequest_SignatureInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_PEImageHeaders_DebugData::ClientDownloadRequest_PEImageHeaders_DebugData(
    ::_pbi::ConstantInitialized)
  : directory_entry_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , raw_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadRequest_PEImageHeaders_DebugDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_PEImageHeaders_DebugDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_PEImageHeaders_DebugDataDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_PEImageHeaders_DebugData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_PEImageHeaders_DebugDataDefaultTypeInternal _ClientDownloadRequest_PEImageHeaders_DebugData_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_PEImageHeaders::ClientDownloadRequest_PEImageHeaders(
    ::_pbi::ConstantInitialized)
  : section_header_()
  , debug_data_()
  , dos_header_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_header_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_headers32_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_headers64_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , export_section_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadRequest_PEImageHeadersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_PEImageHeadersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_PEImageHeadersDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_PEImageHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_PEImageHeadersDefaultTypeInternal _ClientDownloadRequest_PEImageHeaders_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_MachOHeaders_LoadCommand::ClientDownloadRequest_MachOHeaders_LoadCommand(
    ::_pbi::ConstantInitialized)
  : command_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , command_id_(0u){}
struct ClientDownloadRequest_MachOHeaders_LoadCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_MachOHeaders_LoadCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_MachOHeaders_LoadCommandDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_MachOHeaders_LoadCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_MachOHeaders_LoadCommandDefaultTypeInternal _ClientDownloadRequest_MachOHeaders_LoadCommand_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_MachOHeaders::ClientDownloadRequest_MachOHeaders(
    ::_pbi::ConstantInitialized)
  : load_commands_()
  , mach_header_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadRequest_MachOHeadersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_MachOHeadersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_MachOHeadersDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_MachOHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_MachOHeadersDefaultTypeInternal _ClientDownloadRequest_MachOHeaders_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_ImageHeaders::ClientDownloadRequest_ImageHeaders(
    ::_pbi::ConstantInitialized)
  : mach_o_headers_()
  , pe_headers_(nullptr){}
struct ClientDownloadRequest_ImageHeadersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_ImageHeadersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_ImageHeadersDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_ImageHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_ImageHeadersDefaultTypeInternal _ClientDownloadRequest_ImageHeaders_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_ArchivedBinary::ClientDownloadRequest_ArchivedBinary(
    ::_pbi::ConstantInitialized)
  : file_basename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , digests_(nullptr)
  , signature_(nullptr)
  , image_headers_(nullptr)
  , length_(int64_t{0})
  , download_type_(0)

  , is_encrypted_(false)
  , is_executable_(false)
  , is_archive_(false){}
struct ClientDownloadRequest_ArchivedBinaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_ArchivedBinaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_ArchivedBinaryDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_ArchivedBinary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_ArchivedBinaryDefaultTypeInternal _ClientDownloadRequest_ArchivedBinary_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_DetachedCodeSignature::ClientDownloadRequest_DetachedCodeSignature(
    ::_pbi::ConstantInitialized)
  : file_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , contents_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadRequest_DetachedCodeSignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_DetachedCodeSignatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_DetachedCodeSignatureDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_DetachedCodeSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_DetachedCodeSignatureDefaultTypeInternal _ClientDownloadRequest_DetachedCodeSignature_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentInfo::ClientDownloadRequest_DocumentInfo(
    ::_pbi::ConstantInitialized)
  : contains_macros_(false){}
struct ClientDownloadRequest_DocumentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_DocumentInfoDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_DocumentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_DocumentInfoDefaultTypeInternal _ClientDownloadRequest_DocumentInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentProcessingInfo::ClientDownloadRequest_DocumentProcessingInfo(
    ::_pbi::ConstantInitialized)
  : maldoca_error_message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , processing_successful_(false)
  , maldoca_error_type_(0)
{}
struct ClientDownloadRequest_DocumentProcessingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentProcessingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_DocumentProcessingInfoDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_DocumentProcessingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_DocumentProcessingInfoDefaultTypeInternal _ClientDownloadRequest_DocumentProcessingInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentSummary::ClientDownloadRequest_DocumentSummary(
    ::_pbi::ConstantInitialized)
  : metadata_(nullptr)
  , processing_info_(nullptr){}
struct ClientDownloadRequest_DocumentSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_DocumentSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_DocumentSummaryDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_DocumentSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_DocumentSummaryDefaultTypeInternal _ClientDownloadRequest_DocumentSummary_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest_ArchiveSummary::ClientDownloadRequest_ArchiveSummary(
    ::_pbi::ConstantInitialized)
  : parser_status_(0)

  , file_count_(0)
  , directory_count_(0){}
struct ClientDownloadRequest_ArchiveSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequest_ArchiveSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequest_ArchiveSummaryDefaultTypeInternal() {}
  union {
    ClientDownloadRequest_ArchiveSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequest_ArchiveSummaryDefaultTypeInternal _ClientDownloadRequest_ArchiveSummary_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadRequest::ClientDownloadRequest(
    ::_pbi::ConstantInitialized)
  : resources_()
  , archived_binary_()
  , alternate_extensions_()
  , referrer_chain_()
  , detached_code_signature_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_basename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , udif_code_signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , access_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , digests_(nullptr)
  , signature_(nullptr)
  , image_headers_(nullptr)
  , population_(nullptr)
  , referrer_chain_options_(nullptr)
  , document_summary_(nullptr)
  , archive_summary_(nullptr)
  , length_(int64_t{0})
  , download_type_(0)

  , user_initiated_(false)
  , archive_valid_(false)
  , skipped_url_allowlist_(false)
  , skipped_certificate_allowlist_(false)
  , deprecated_download_attribution_finch_enabled_(false)
  , request_ap_verdicts_(false)
  , archive_file_count_(0)
  , archive_directory_count_(0){}
struct ClientDownloadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadRequestDefaultTypeInternal() {}
  union {
    ClientDownloadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadRequestDefaultTypeInternal _ClientDownloadRequest_default_instance_;
PROTOBUF_CONSTEXPR ReferrerChainOptions::ReferrerChainOptions(
    ::_pbi::ConstantInitialized)
  : recent_navigations_to_collect_(0){}
struct ReferrerChainOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferrerChainOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferrerChainOptionsDefaultTypeInternal() {}
  union {
    ReferrerChainOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferrerChainOptionsDefaultTypeInternal _ReferrerChainOptions_default_instance_;
PROTOBUF_CONSTEXPR ReferrerChainEntry_ServerRedirect::ReferrerChainEntry_ServerRedirect(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ReferrerChainEntry_ServerRedirectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferrerChainEntry_ServerRedirectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferrerChainEntry_ServerRedirectDefaultTypeInternal() {}
  union {
    ReferrerChainEntry_ServerRedirect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferrerChainEntry_ServerRedirectDefaultTypeInternal _ReferrerChainEntry_ServerRedirect_default_instance_;
PROTOBUF_CONSTEXPR ReferrerChainEntry::ReferrerChainEntry(
    ::_pbi::ConstantInitialized)
  : ip_addresses_()
  , server_redirect_chain_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , referrer_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , referrer_main_frame_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , main_frame_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , navigation_time_msec_(0)
  , navigation_initiation_(0)

  , is_retargeting_(false)
  , maybe_launched_by_external_application_(false)
  , is_subframe_url_removed_(false)
  , is_subframe_referrer_url_removed_(false)
  , is_url_removed_by_policy_(false)
  , type_(4)
{}
struct ReferrerChainEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferrerChainEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferrerChainEntryDefaultTypeInternal() {}
  union {
    ReferrerChainEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferrerChainEntryDefaultTypeInternal _ReferrerChainEntry_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadResponse_MoreInfo::ClientDownloadResponse_MoreInfo(
    ::_pbi::ConstantInitialized)
  : description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadResponse_MoreInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadResponse_MoreInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadResponse_MoreInfoDefaultTypeInternal() {}
  union {
    ClientDownloadResponse_MoreInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadResponse_MoreInfoDefaultTypeInternal _ClientDownloadResponse_MoreInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadResponse::ClientDownloadResponse(
    ::_pbi::ConstantInitialized)
  : token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , more_info_(nullptr)
  , verdict_(0)

  , upload_(false)
  , request_deep_scan_(false){}
struct ClientDownloadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadResponseDefaultTypeInternal() {}
  union {
    ClientDownloadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadResponseDefaultTypeInternal _ClientDownloadResponse_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadReport_UserInformation::ClientDownloadReport_UserInformation(
    ::_pbi::ConstantInitialized)
  : email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientDownloadReport_UserInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadReport_UserInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadReport_UserInformationDefaultTypeInternal() {}
  union {
    ClientDownloadReport_UserInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadReport_UserInformationDefaultTypeInternal _ClientDownloadReport_UserInformation_default_instance_;
PROTOBUF_CONSTEXPR ClientDownloadReport::ClientDownloadReport(
    ::_pbi::ConstantInitialized)
  : comment_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , download_request_(nullptr)
  , user_information_(nullptr)
  , download_response_(nullptr)
  , reason_(0)
{}
struct ClientDownloadReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDownloadReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDownloadReportDefaultTypeInternal() {}
  union {
    ClientDownloadReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDownloadReportDefaultTypeInternal _ClientDownloadReport_default_instance_;
PROTOBUF_CONSTEXPR ClientUploadResponse::ClientUploadResponse(
    ::_pbi::ConstantInitialized)
  : permalink_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0)
{}
struct ClientUploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientUploadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientUploadResponseDefaultTypeInternal() {}
  union {
    ClientUploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientUploadResponseDefaultTypeInternal _ClientUploadResponse_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_TrackedPreferenceIncident::ClientIncidentReport_IncidentData_TrackedPreferenceIncident(
    ::_pbi::ConstantInitialized)
  : split_key_()
  , path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , atomic_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_state_(0)
{}
struct ClientIncidentReport_IncidentData_TrackedPreferenceIncidentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_TrackedPreferenceIncidentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_IncidentData_TrackedPreferenceIncidentDefaultTypeInternal() {}
  union {
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_IncidentData_TrackedPreferenceIncidentDefaultTypeInternal _ClientIncidentReport_IncidentData_TrackedPreferenceIncident_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile(
    ::_pbi::ConstantInitialized)
  : relative_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signature_(nullptr)
  , image_headers_(nullptr){}
struct ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFileDefaultTypeInternal() {}
  union {
    ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFileDefaultTypeInternal _ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_BinaryIntegrityIncident::ClientIncidentReport_IncidentData_BinaryIntegrityIncident(
    ::_pbi::ConstantInitialized)
  : contained_file_()
  , file_basename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signature_(nullptr)
  , image_headers_(nullptr)
  , sec_error_(0){}
struct ClientIncidentReport_IncidentData_BinaryIntegrityIncidentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_BinaryIntegrityIncidentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_IncidentData_BinaryIntegrityIncidentDefaultTypeInternal() {}
  union {
    ClientIncidentReport_IncidentData_BinaryIntegrityIncident _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_IncidentData_BinaryIntegrityIncidentDefaultTypeInternal _ClientIncidentReport_IncidentData_BinaryIntegrityIncident_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_ResourceRequestIncident::ClientIncidentReport_IncidentData_ResourceRequestIncident(
    ::_pbi::ConstantInitialized)
  : digest_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct ClientIncidentReport_IncidentData_ResourceRequestIncidentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData_ResourceRequestIncidentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_IncidentData_ResourceRequestIncidentDefaultTypeInternal() {}
  union {
    ClientIncidentReport_IncidentData_ResourceRequestIncident _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_IncidentData_ResourceRequestIncidentDefaultTypeInternal _ClientIncidentReport_IncidentData_ResourceRequestIncident_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentData::ClientIncidentReport_IncidentData(
    ::_pbi::ConstantInitialized)
  : tracked_preference_(nullptr)
  , binary_integrity_(nullptr)
  , resource_request_(nullptr)
  , incident_time_msec_(int64_t{0}){}
struct ClientIncidentReport_IncidentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_IncidentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_IncidentDataDefaultTypeInternal() {}
  union {
    ClientIncidentReport_IncidentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_IncidentDataDefaultTypeInternal _ClientIncidentReport_IncidentData_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_DownloadDetails::ClientIncidentReport_DownloadDetails(
    ::_pbi::ConstantInitialized)
  : token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , download_(nullptr)
  , download_time_msec_(int64_t{0})
  , open_time_msec_(int64_t{0}){}
struct ClientIncidentReport_DownloadDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_DownloadDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_DownloadDetailsDefaultTypeInternal() {}
  union {
    ClientIncidentReport_DownloadDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_DownloadDetailsDefaultTypeInternal _ClientIncidentReport_DownloadDetails_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OS_RegistryValue::ClientIncidentReport_EnvironmentData_OS_RegistryValue(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0u){}
struct ClientIncidentReport_EnvironmentData_OS_RegistryValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OS_RegistryValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_OS_RegistryValueDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_OS_RegistryValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_OS_RegistryValueDefaultTypeInternal _ClientIncidentReport_EnvironmentData_OS_RegistryValue_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OS_RegistryKey::ClientIncidentReport_EnvironmentData_OS_RegistryKey(
    ::_pbi::ConstantInitialized)
  : value_()
  , key_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientIncidentReport_EnvironmentData_OS_RegistryKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OS_RegistryKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_OS_RegistryKeyDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_OS_RegistryKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_OS_RegistryKeyDefaultTypeInternal _ClientIncidentReport_EnvironmentData_OS_RegistryKey_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OS::ClientIncidentReport_EnvironmentData_OS(
    ::_pbi::ConstantInitialized)
  : registry_key_()
  , os_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , os_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , is_enrolled_to_domain_(false){}
struct ClientIncidentReport_EnvironmentData_OSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_OSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_OSDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_OS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_OSDefaultTypeInternal _ClientIncidentReport_EnvironmentData_OS_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Machine::ClientIncidentReport_EnvironmentData_Machine(
    ::_pbi::ConstantInitialized)
  : cpu_architecture_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cpu_vendor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cpuid_(0u){}
struct ClientIncidentReport_EnvironmentData_MachineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_MachineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_MachineDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_Machine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_MachineDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Machine_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_Patch::ClientIncidentReport_EnvironmentData_Process_Patch(
    ::_pbi::ConstantInitialized)
  : function_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , target_dll_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientIncidentReport_EnvironmentData_Process_PatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_PatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_Process_PatchDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_Process_Patch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_Process_PatchDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_Patch_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_NetworkProvider::ClientIncidentReport_EnvironmentData_Process_NetworkProvider(
    ::_pbi::ConstantInitialized){}
struct ClientIncidentReport_EnvironmentData_Process_NetworkProviderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_NetworkProviderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_Process_NetworkProviderDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_Process_NetworkProvider _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_Process_NetworkProviderDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_NetworkProvider_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_Dll::ClientIncidentReport_EnvironmentData_Process_Dll(
    ::_pbi::ConstantInitialized)
  : feature_()
  , path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_headers_(nullptr)
  , base_address_(uint64_t{0u})
  , length_(0u){}
struct ClientIncidentReport_EnvironmentData_Process_DllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_DllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_Process_DllDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_Process_Dll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_Process_DllDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_Dll_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification(
    ::_pbi::ConstantInitialized)
  : modified_bytes_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , export_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_offset_(0u)
  , byte_count_(0){}
struct ClientIncidentReport_EnvironmentData_Process_ModuleState_ModificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_ModuleState_ModificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_Process_ModuleState_ModificationDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_Process_ModuleState_ModificationDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_ModuleState::ClientIncidentReport_EnvironmentData_Process_ModuleState(
    ::_pbi::ConstantInitialized)
  : obsolete_modified_export_()
  , modification_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , modified_state_(0)
{}
struct ClientIncidentReport_EnvironmentData_Process_ModuleStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process_ModuleStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_Process_ModuleStateDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_Process_ModuleState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_Process_ModuleStateDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_ModuleState_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_Process::ClientIncidentReport_EnvironmentData_Process(
    ::_pbi::ConstantInitialized)
  : obsolete_dlls_()
  , patches_()
  , network_providers_()
  , dll_()
  , blocklisted_dll_()
  , module_state_()
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , uptime_msec_(int64_t{0})
  , chrome_update_channel_(0)

  , metrics_consent_(false)
  , obsolete_extended_consent_(false)
  , obsolete_field_trial_participant_(false){}
struct ClientIncidentReport_EnvironmentData_ProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData_ProcessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentData_ProcessDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData_Process _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentData_ProcessDefaultTypeInternal _ClientIncidentReport_EnvironmentData_Process_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentData::ClientIncidentReport_EnvironmentData(
    ::_pbi::ConstantInitialized)
  : os_(nullptr)
  , machine_(nullptr)
  , process_(nullptr){}
struct ClientIncidentReport_EnvironmentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_EnvironmentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_EnvironmentDataDefaultTypeInternal() {}
  union {
    ClientIncidentReport_EnvironmentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_EnvironmentDataDefaultTypeInternal _ClientIncidentReport_EnvironmentData_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_ExtensionData_ExtensionInfo::ClientIncidentReport_ExtensionData_ExtensionInfo(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , update_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , manifest_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , state_(0)

  , type_(0)
  , has_signature_validation_(false)
  , signature_is_valid_(false)
  , installed_by_custodian_(false)
  , installed_by_default_(false)
  , installed_by_oem_(false)
  , from_bookmark_(false)
  , from_webstore_(false)
  , converted_from_user_script_(false)
  , install_time_msec_(int64_t{0})
  , may_be_untrusted_(false)
  , manifest_location_type_(0){}
struct ClientIncidentReport_ExtensionData_ExtensionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_ExtensionData_ExtensionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_ExtensionData_ExtensionInfoDefaultTypeInternal() {}
  union {
    ClientIncidentReport_ExtensionData_ExtensionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_ExtensionData_ExtensionInfoDefaultTypeInternal _ClientIncidentReport_ExtensionData_ExtensionInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_ExtensionData::ClientIncidentReport_ExtensionData(
    ::_pbi::ConstantInitialized)
  : last_installed_extension_(nullptr){}
struct ClientIncidentReport_ExtensionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_ExtensionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_ExtensionDataDefaultTypeInternal() {}
  union {
    ClientIncidentReport_ExtensionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_ExtensionDataDefaultTypeInternal _ClientIncidentReport_ExtensionData_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport_NonBinaryDownloadDetails::ClientIncidentReport_NonBinaryDownloadDetails(
    ::_pbi::ConstantInitialized)
  : file_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_spec_sha256_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , host_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , length_(int64_t{0}){}
struct ClientIncidentReport_NonBinaryDownloadDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReport_NonBinaryDownloadDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReport_NonBinaryDownloadDetailsDefaultTypeInternal() {}
  union {
    ClientIncidentReport_NonBinaryDownloadDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReport_NonBinaryDownloadDetailsDefaultTypeInternal _ClientIncidentReport_NonBinaryDownloadDetails_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentReport::ClientIncidentReport(
    ::_pbi::ConstantInitialized)
  : incident_()
  , download_(nullptr)
  , environment_(nullptr)
  , population_(nullptr)
  , extension_data_(nullptr)
  , non_binary_download_(nullptr){}
struct ClientIncidentReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentReportDefaultTypeInternal() {}
  union {
    ClientIncidentReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentReportDefaultTypeInternal _ClientIncidentReport_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentResponse_EnvironmentRequest::ClientIncidentResponse_EnvironmentRequest(
    ::_pbi::ConstantInitialized)
  : dll_index_(0){}
struct ClientIncidentResponse_EnvironmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentResponse_EnvironmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentResponse_EnvironmentRequestDefaultTypeInternal() {}
  union {
    ClientIncidentResponse_EnvironmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentResponse_EnvironmentRequestDefaultTypeInternal _ClientIncidentResponse_EnvironmentRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientIncidentResponse::ClientIncidentResponse(
    ::_pbi::ConstantInitialized)
  : environment_requests_()
  , token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , download_requested_(false){}
struct ClientIncidentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIncidentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIncidentResponseDefaultTypeInternal() {}
  union {
    ClientIncidentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIncidentResponseDefaultTypeInternal _ClientIncidentResponse_default_instance_;
PROTOBUF_CONSTEXPR DownloadMetadata::DownloadMetadata(
    ::_pbi::ConstantInitialized)
  : download_(nullptr)
  , download_id_(0u){}
struct DownloadMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadMetadataDefaultTypeInternal() {}
  union {
    DownloadMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadMetadataDefaultTypeInternal _DownloadMetadata_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPHeader::ClientSafeBrowsingReportRequest_HTTPHeader(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientSafeBrowsingReportRequest_HTTPHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_HTTPHeaderDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_HTTPHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_HTTPHeaderDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPHeader_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(
    ::_pbi::ConstantInitialized)
  : verb_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , uri_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientSafeBrowsingReportRequest_HTTPRequest_FirstLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPRequest_FirstLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_HTTPRequest_FirstLineDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_HTTPRequest_FirstLineDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPRequest::ClientSafeBrowsingReportRequest_HTTPRequest(
    ::_pbi::ConstantInitialized)
  : headers_()
  , body_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bodydigest_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , firstline_(nullptr)
  , bodylength_(0){}
struct ClientSafeBrowsingReportRequest_HTTPRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_HTTPRequestDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_HTTPRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_HTTPRequestDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , code_(0){}
struct ClientSafeBrowsingReportRequest_HTTPResponse_FirstLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPResponse_FirstLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_HTTPResponse_FirstLineDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_HTTPResponse_FirstLineDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPResponse::ClientSafeBrowsingReportRequest_HTTPResponse(
    ::_pbi::ConstantInitialized)
  : headers_()
  , body_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bodydigest_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , remote_ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , firstline_(nullptr)
  , bodylength_(0){}
struct ClientSafeBrowsingReportRequest_HTTPResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_HTTPResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_HTTPResponseDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_HTTPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_HTTPResponseDefaultTypeInternal _ClientSafeBrowsingReportRequest_HTTPResponse_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_Resource::ClientSafeBrowsingReportRequest_Resource(
    ::_pbi::ConstantInitialized)
  : child_ids_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tag_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_(nullptr)
  , response_(nullptr)
  , id_(0)
  , parent_id_(0){}
struct ClientSafeBrowsingReportRequest_ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_ResourceDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_ResourceDefaultTypeInternal _ClientSafeBrowsingReportRequest_Resource_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(
    ::_pbi::ConstantInitialized)
  : client_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , google_play_services_version_(int64_t{0})
  , is_instant_apps_(false)
  , url_api_type_(0)
{}
struct ClientSafeBrowsingReportRequest_SafeBrowsingClientPropertiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_SafeBrowsingClientPropertiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_SafeBrowsingClientPropertiesDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_SafeBrowsingClientPropertiesDefaultTypeInternal _ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(
    ::_pbi::ConstantInitialized)
  : sha256_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientSafeBrowsingReportRequest_DownloadItemInfo_DigestsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_DownloadItemInfo_DigestsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_DownloadItemInfo_DigestsDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_DownloadItemInfo_DigestsDefaultTypeInternal _ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_DownloadItemInfo::ClientSafeBrowsingReportRequest_DownloadItemInfo(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_basename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , digests_(nullptr)
  , length_(int64_t{0}){}
struct ClientSafeBrowsingReportRequest_DownloadItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest_DownloadItemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequest_DownloadItemInfoDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest_DownloadItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequest_DownloadItemInfoDefaultTypeInternal _ClientSafeBrowsingReportRequest_DownloadItemInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequest::ClientSafeBrowsingReportRequest(
    ::_pbi::ConstantInitialized)
  : resources_()
  , client_asn_()
  , dom_()
  , referrer_chain_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , referrer_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_country_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , safety_net_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_properties_(nullptr)
  , download_item_info_(nullptr)
  , population_(nullptr)
  , type_(0)

  , complete_(false)
  , did_proceed_(false)
  , repeat_visit_(false)
  , show_download_in_folder_(false)
  , download_verdict_(0)
{}
struct ClientSafeBrowsingReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSafeBrowsingReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSafeBrowsingReportRequestDefaultTypeInternal() {}
  union {
    ClientSafeBrowsingReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSafeBrowsingReportRequestDefaultTypeInternal _ClientSafeBrowsingReportRequest_default_instance_;
PROTOBUF_CONSTEXPR HTMLElement_Attribute::HTMLElement_Attribute(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct HTMLElement_AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HTMLElement_AttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HTMLElement_AttributeDefaultTypeInternal() {}
  union {
    HTMLElement_Attribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HTMLElement_AttributeDefaultTypeInternal _HTMLElement_Attribute_default_instance_;
PROTOBUF_CONSTEXPR HTMLElement::HTMLElement(
    ::_pbi::ConstantInitialized)
  : child_ids_()
  , attribute_()
  , tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , inner_html_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(0)
  , resource_id_(0){}
struct HTMLElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HTMLElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HTMLElementDefaultTypeInternal() {}
  union {
    HTMLElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HTMLElementDefaultTypeInternal _HTMLElement_default_instance_;
PROTOBUF_CONSTEXPR ExtensionWebStoreInstallRequest::ExtensionWebStoreInstallRequest(
    ::_pbi::ConstantInitialized)
  : referrer_chain_()
  , referrer_chain_options_(nullptr){}
struct ExtensionWebStoreInstallRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionWebStoreInstallRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionWebStoreInstallRequestDefaultTypeInternal() {}
  union {
    ExtensionWebStoreInstallRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionWebStoreInstallRequestDefaultTypeInternal _ExtensionWebStoreInstallRequest_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_ExtensionInfo::ExtensionTelemetryReportRequest_ExtensionInfo(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , install_timestamp_msec_(int64_t{0})
  , is_default_installed_(false)
  , is_oem_installed_(false)
  , is_from_store_(false)
  , updates_from_store_(false)
  , is_converted_from_user_script_(false)
  , type_(0)

  , install_location_(0)

  , blocklist_state_(0)

  , disable_reasons_(0u){}
struct ExtensionTelemetryReportRequest_ExtensionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_ExtensionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryReportRequest_ExtensionInfoDefaultTypeInternal() {}
  union {
    ExtensionTelemetryReportRequest_ExtensionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryReportRequest_ExtensionInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_ExtensionInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo(
    ::_pbi::ConstantInitialized)
  : hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , execution_count_(0u){}
struct ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfoDefaultTypeInternal() {}
  union {
    ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(
    ::_pbi::ConstantInitialized)
  : scripts_()
  , max_exceeded_script_count_(0u){}
struct ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfoDefaultTypeInternal() {}
  union {
    ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , contact_count_(0u){}
struct ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfoDefaultTypeInternal() {}
  union {
    ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(
    ::_pbi::ConstantInitialized)
  : remote_host_(){}
struct ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfoDefaultTypeInternal() {}
  union {
    ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfo::ExtensionTelemetryReportRequest_SignalInfo(
    ::_pbi::ConstantInitialized)
  : tabs_execute_script_info_(nullptr)
  , remote_host_contacted_info_(nullptr){}
struct ExtensionTelemetryReportRequest_SignalInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_SignalInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryReportRequest_SignalInfoDefaultTypeInternal() {}
  union {
    ExtensionTelemetryReportRequest_SignalInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryReportRequest_SignalInfoDefaultTypeInternal _ExtensionTelemetryReportRequest_SignalInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_Report::ExtensionTelemetryReportRequest_Report(
    ::_pbi::ConstantInitialized)
  : signals_()
  , extension_(nullptr){}
struct ExtensionTelemetryReportRequest_ReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest_ReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryReportRequest_ReportDefaultTypeInternal() {}
  union {
    ExtensionTelemetryReportRequest_Report _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryReportRequest_ReportDefaultTypeInternal _ExtensionTelemetryReportRequest_Report_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequest::ExtensionTelemetryReportRequest(
    ::_pbi::ConstantInitialized)
  : reports_()
  , creation_timestamp_msec_(int64_t{0}){}
struct ExtensionTelemetryReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryReportRequestDefaultTypeInternal() {}
  union {
    ExtensionTelemetryReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryReportRequestDefaultTypeInternal _ExtensionTelemetryReportRequest_default_instance_;
PROTOBUF_CONSTEXPR ExtensionTelemetryResponse::ExtensionTelemetryResponse(
    ::_pbi::ConstantInitialized){}
struct ExtensionTelemetryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionTelemetryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionTelemetryResponseDefaultTypeInternal() {}
  union {
    ExtensionTelemetryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionTelemetryResponseDefaultTypeInternal _ExtensionTelemetryResponse_default_instance_;
}  // namespace safe_browsing
namespace safe_browsing {
bool ChromeUserPopulation_PageLoadToken_TokenSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeUserPopulation_PageLoadToken_TokenSource_strings[2] = {};

static const char ChromeUserPopulation_PageLoadToken_TokenSource_names[] =
  "CLIENT_GENERATION"
  "SOURCE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeUserPopulation_PageLoadToken_TokenSource_entries[] = {
  { {ChromeUserPopulation_PageLoadToken_TokenSource_names + 0, 17}, 1 },
  { {ChromeUserPopulation_PageLoadToken_TokenSource_names + 17, 18}, 0 },
};

static const int ChromeUserPopulation_PageLoadToken_TokenSource_entries_by_number[] = {
  1, // 0 -> SOURCE_UNSPECIFIED
  0, // 1 -> CLIENT_GENERATION
};

const std::string& ChromeUserPopulation_PageLoadToken_TokenSource_Name(
    ChromeUserPopulation_PageLoadToken_TokenSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeUserPopulation_PageLoadToken_TokenSource_entries,
          ChromeUserPopulation_PageLoadToken_TokenSource_entries_by_number,
          2, ChromeUserPopulation_PageLoadToken_TokenSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeUserPopulation_PageLoadToken_TokenSource_entries,
      ChromeUserPopulation_PageLoadToken_TokenSource_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeUserPopulation_PageLoadToken_TokenSource_strings[idx].get();
}
bool ChromeUserPopulation_PageLoadToken_TokenSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserPopulation_PageLoadToken_TokenSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeUserPopulation_PageLoadToken_TokenSource_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ChromeUserPopulation_PageLoadToken_TokenSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeUserPopulation_PageLoadToken_TokenSource ChromeUserPopulation_PageLoadToken::SOURCE_UNSPECIFIED;
constexpr ChromeUserPopulation_PageLoadToken_TokenSource ChromeUserPopulation_PageLoadToken::CLIENT_GENERATION;
constexpr ChromeUserPopulation_PageLoadToken_TokenSource ChromeUserPopulation_PageLoadToken::TokenSource_MIN;
constexpr ChromeUserPopulation_PageLoadToken_TokenSource ChromeUserPopulation_PageLoadToken::TokenSource_MAX;
constexpr int ChromeUserPopulation_PageLoadToken::TokenSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeUserPopulation_UserPopulation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeUserPopulation_UserPopulation_strings[4] = {};

static const char ChromeUserPopulation_UserPopulation_names[] =
  "ENHANCED_PROTECTION"
  "EXTENDED_REPORTING"
  "SAFE_BROWSING"
  "UNKNOWN_USER_POPULATION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeUserPopulation_UserPopulation_entries[] = {
  { {ChromeUserPopulation_UserPopulation_names + 0, 19}, 3 },
  { {ChromeUserPopulation_UserPopulation_names + 19, 18}, 2 },
  { {ChromeUserPopulation_UserPopulation_names + 37, 13}, 1 },
  { {ChromeUserPopulation_UserPopulation_names + 50, 23}, 0 },
};

static const int ChromeUserPopulation_UserPopulation_entries_by_number[] = {
  3, // 0 -> UNKNOWN_USER_POPULATION
  2, // 1 -> SAFE_BROWSING
  1, // 2 -> EXTENDED_REPORTING
  0, // 3 -> ENHANCED_PROTECTION
};

const std::string& ChromeUserPopulation_UserPopulation_Name(
    ChromeUserPopulation_UserPopulation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeUserPopulation_UserPopulation_entries,
          ChromeUserPopulation_UserPopulation_entries_by_number,
          4, ChromeUserPopulation_UserPopulation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeUserPopulation_UserPopulation_entries,
      ChromeUserPopulation_UserPopulation_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeUserPopulation_UserPopulation_strings[idx].get();
}
bool ChromeUserPopulation_UserPopulation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserPopulation_UserPopulation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeUserPopulation_UserPopulation_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeUserPopulation_UserPopulation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeUserPopulation_UserPopulation ChromeUserPopulation::UNKNOWN_USER_POPULATION;
constexpr ChromeUserPopulation_UserPopulation ChromeUserPopulation::SAFE_BROWSING;
constexpr ChromeUserPopulation_UserPopulation ChromeUserPopulation::EXTENDED_REPORTING;
constexpr ChromeUserPopulation_UserPopulation ChromeUserPopulation::ENHANCED_PROTECTION;
constexpr ChromeUserPopulation_UserPopulation ChromeUserPopulation::UserPopulation_MIN;
constexpr ChromeUserPopulation_UserPopulation ChromeUserPopulation::UserPopulation_MAX;
constexpr int ChromeUserPopulation::UserPopulation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeUserPopulation_ProfileManagementStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeUserPopulation_ProfileManagementStatus_strings[4] = {};

static const char ChromeUserPopulation_ProfileManagementStatus_names[] =
  "ENTERPRISE_MANAGED"
  "NOT_MANAGED"
  "UNAVAILABLE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeUserPopulation_ProfileManagementStatus_entries[] = {
  { {ChromeUserPopulation_ProfileManagementStatus_names + 0, 18}, 3 },
  { {ChromeUserPopulation_ProfileManagementStatus_names + 18, 11}, 2 },
  { {ChromeUserPopulation_ProfileManagementStatus_names + 29, 11}, 1 },
  { {ChromeUserPopulation_ProfileManagementStatus_names + 40, 7}, 0 },
};

static const int ChromeUserPopulation_ProfileManagementStatus_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  2, // 1 -> UNAVAILABLE
  1, // 2 -> NOT_MANAGED
  0, // 3 -> ENTERPRISE_MANAGED
};

const std::string& ChromeUserPopulation_ProfileManagementStatus_Name(
    ChromeUserPopulation_ProfileManagementStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeUserPopulation_ProfileManagementStatus_entries,
          ChromeUserPopulation_ProfileManagementStatus_entries_by_number,
          4, ChromeUserPopulation_ProfileManagementStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeUserPopulation_ProfileManagementStatus_entries,
      ChromeUserPopulation_ProfileManagementStatus_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeUserPopulation_ProfileManagementStatus_strings[idx].get();
}
bool ChromeUserPopulation_ProfileManagementStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeUserPopulation_ProfileManagementStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeUserPopulation_ProfileManagementStatus_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeUserPopulation_ProfileManagementStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation::UNKNOWN;
constexpr ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation::UNAVAILABLE;
constexpr ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation::NOT_MANAGED;
constexpr ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation::ENTERPRISE_MANAGED;
constexpr ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation::ProfileManagementStatus_MIN;
constexpr ChromeUserPopulation_ProfileManagementStatus ChromeUserPopulation::ProfileManagementStatus_MAX;
constexpr int ChromeUserPopulation::ProfileManagementStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_strings[5] = {};

static const char LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_names[] =
  "GMAIL"
  "GSUITE"
  "NON_GAIA_ENTERPRISE"
  "SAVED_PASSWORD"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_entries[] = {
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_names + 0, 5}, 2 },
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_names + 5, 6}, 1 },
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_names + 11, 19}, 3 },
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_names + 30, 14}, 4 },
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_names + 44, 7}, 0 },
};

static const int LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  1, // 1 -> GSUITE
  0, // 2 -> GMAIL
  2, // 3 -> NON_GAIA_ENTERPRISE
  3, // 4 -> SAVED_PASSWORD
};

const std::string& LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Name(
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_entries,
          LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_entries_by_number,
          5, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_entries,
      LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_strings[idx].get();
}
bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::UNKNOWN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::GSUITE;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::GMAIL;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::NON_GAIA_ENTERPRISE;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::SAVED_PASSWORD;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::AccountType_MIN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::AccountType_MAX;
constexpr int LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::AccountType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_strings[3] = {};

static const char LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_names[] =
  "GMAIL"
  "GSUITE"
  "NOT_SIGNED_IN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_entries[] = {
  { {LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_names + 0, 5}, 1 },
  { {LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_names + 5, 6}, 2 },
  { {LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_names + 11, 13}, 0 },
};

static const int LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_entries_by_number[] = {
  2, // 0 -> NOT_SIGNED_IN
  0, // 1 -> GMAIL
  1, // 2 -> GSUITE
};

const std::string& LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Name(
    LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_entries,
          LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_entries_by_number,
          3, LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_entries,
      LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_strings[idx].get();
}
bool LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent::NOT_SIGNED_IN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent::GMAIL;
constexpr LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent::GSUITE;
constexpr LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent::SyncAccountType_MIN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType LoginReputationClientRequest_PasswordReuseEvent::SyncAccountType_MAX;
constexpr int LoginReputationClientRequest_PasswordReuseEvent::SyncAccountType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_strings[5] = {};

static const char LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_names[] =
  "ENTERPRISE_PASSWORD"
  "OTHER_GAIA_PASSWORD"
  "REUSED_PASSWORD_TYPE_UNKNOWN"
  "SAVED_PASSWORD"
  "SIGN_IN_PASSWORD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_entries[] = {
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_names + 0, 19}, 4 },
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_names + 19, 19}, 3 },
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_names + 38, 28}, 0 },
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_names + 66, 14}, 1 },
  { {LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_names + 80, 16}, 2 },
};

static const int LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_entries_by_number[] = {
  2, // 0 -> REUSED_PASSWORD_TYPE_UNKNOWN
  3, // 1 -> SAVED_PASSWORD
  4, // 2 -> SIGN_IN_PASSWORD
  1, // 3 -> OTHER_GAIA_PASSWORD
  0, // 4 -> ENTERPRISE_PASSWORD
};

const std::string& LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Name(
    LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_entries,
          LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_entries_by_number,
          5, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_entries,
      LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_strings[idx].get();
}
bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::REUSED_PASSWORD_TYPE_UNKNOWN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::SAVED_PASSWORD;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::SIGN_IN_PASSWORD;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::OTHER_GAIA_PASSWORD;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::ENTERPRISE_PASSWORD;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::ReusedPasswordType_MIN;
constexpr LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType LoginReputationClientRequest_PasswordReuseEvent::ReusedPasswordType_MAX;
constexpr int LoginReputationClientRequest_PasswordReuseEvent::ReusedPasswordType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_strings[4] = {};

static const char LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_names[] =
  "ACTIVITY_REFERRER"
  "KNOWN_APP_ID"
  "REFERRING_APP_SOURCE_UNSPECIFIED"
  "UNKNOWN_APP_ID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_entries[] = {
  { {LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_names + 0, 17}, 3 },
  { {LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_names + 17, 12}, 1 },
  { {LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_names + 29, 32}, 0 },
  { {LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_names + 61, 14}, 2 },
};

static const int LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_entries_by_number[] = {
  2, // 0 -> REFERRING_APP_SOURCE_UNSPECIFIED
  1, // 1 -> KNOWN_APP_ID
  3, // 2 -> UNKNOWN_APP_ID
  0, // 3 -> ACTIVITY_REFERRER
};

const std::string& LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Name(
    LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_entries,
          LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_entries_by_number,
          4, LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_entries,
      LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_strings[idx].get();
}
bool LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo::REFERRING_APP_SOURCE_UNSPECIFIED;
constexpr LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo::KNOWN_APP_ID;
constexpr LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo::UNKNOWN_APP_ID;
constexpr LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo::ACTIVITY_REFERRER;
constexpr LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo::ReferringAppSource_MIN;
constexpr LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource LoginReputationClientRequest_ReferringAppInfo::ReferringAppSource_MAX;
constexpr int LoginReputationClientRequest_ReferringAppInfo::ReferringAppSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LoginReputationClientRequest_TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginReputationClientRequest_TriggerType_strings[3] = {};

static const char LoginReputationClientRequest_TriggerType_names[] =
  "PASSWORD_REUSE_EVENT"
  "TRIGGER_TYPE_UNSPECIFIED"
  "UNFAMILIAR_LOGIN_PAGE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginReputationClientRequest_TriggerType_entries[] = {
  { {LoginReputationClientRequest_TriggerType_names + 0, 20}, 2 },
  { {LoginReputationClientRequest_TriggerType_names + 20, 24}, 0 },
  { {LoginReputationClientRequest_TriggerType_names + 44, 21}, 1 },
};

static const int LoginReputationClientRequest_TriggerType_entries_by_number[] = {
  1, // 0 -> TRIGGER_TYPE_UNSPECIFIED
  2, // 1 -> UNFAMILIAR_LOGIN_PAGE
  0, // 2 -> PASSWORD_REUSE_EVENT
};

const std::string& LoginReputationClientRequest_TriggerType_Name(
    LoginReputationClientRequest_TriggerType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginReputationClientRequest_TriggerType_entries,
          LoginReputationClientRequest_TriggerType_entries_by_number,
          3, LoginReputationClientRequest_TriggerType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginReputationClientRequest_TriggerType_entries,
      LoginReputationClientRequest_TriggerType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginReputationClientRequest_TriggerType_strings[idx].get();
}
bool LoginReputationClientRequest_TriggerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_TriggerType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginReputationClientRequest_TriggerType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LoginReputationClientRequest_TriggerType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginReputationClientRequest_TriggerType LoginReputationClientRequest::TRIGGER_TYPE_UNSPECIFIED;
constexpr LoginReputationClientRequest_TriggerType LoginReputationClientRequest::UNFAMILIAR_LOGIN_PAGE;
constexpr LoginReputationClientRequest_TriggerType LoginReputationClientRequest::PASSWORD_REUSE_EVENT;
constexpr LoginReputationClientRequest_TriggerType LoginReputationClientRequest::TriggerType_MIN;
constexpr LoginReputationClientRequest_TriggerType LoginReputationClientRequest::TriggerType_MAX;
constexpr int LoginReputationClientRequest::TriggerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LoginReputationClientRequest_ReportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginReputationClientRequest_ReportType_strings[3] = {};

static const char LoginReputationClientRequest_ReportType_names[] =
  "FULL_REPORT"
  "SAMPLE_REPORT"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginReputationClientRequest_ReportType_entries[] = {
  { {LoginReputationClientRequest_ReportType_names + 0, 11}, 1 },
  { {LoginReputationClientRequest_ReportType_names + 11, 13}, 2 },
  { {LoginReputationClientRequest_ReportType_names + 24, 7}, 0 },
};

static const int LoginReputationClientRequest_ReportType_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  0, // 1 -> FULL_REPORT
  1, // 2 -> SAMPLE_REPORT
};

const std::string& LoginReputationClientRequest_ReportType_Name(
    LoginReputationClientRequest_ReportType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginReputationClientRequest_ReportType_entries,
          LoginReputationClientRequest_ReportType_entries_by_number,
          3, LoginReputationClientRequest_ReportType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginReputationClientRequest_ReportType_entries,
      LoginReputationClientRequest_ReportType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginReputationClientRequest_ReportType_strings[idx].get();
}
bool LoginReputationClientRequest_ReportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientRequest_ReportType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginReputationClientRequest_ReportType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LoginReputationClientRequest_ReportType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginReputationClientRequest_ReportType LoginReputationClientRequest::UNKNOWN;
constexpr LoginReputationClientRequest_ReportType LoginReputationClientRequest::FULL_REPORT;
constexpr LoginReputationClientRequest_ReportType LoginReputationClientRequest::SAMPLE_REPORT;
constexpr LoginReputationClientRequest_ReportType LoginReputationClientRequest::ReportType_MIN;
constexpr LoginReputationClientRequest_ReportType LoginReputationClientRequest::ReportType_MAX;
constexpr int LoginReputationClientRequest::ReportType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool LoginReputationClientResponse_VerdictType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginReputationClientResponse_VerdictType_strings[4] = {};

static const char LoginReputationClientResponse_VerdictType_names[] =
  "LOW_REPUTATION"
  "PHISHING"
  "SAFE"
  "VERDICT_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginReputationClientResponse_VerdictType_entries[] = {
  { {LoginReputationClientResponse_VerdictType_names + 0, 14}, 2 },
  { {LoginReputationClientResponse_VerdictType_names + 14, 8}, 3 },
  { {LoginReputationClientResponse_VerdictType_names + 22, 4}, 1 },
  { {LoginReputationClientResponse_VerdictType_names + 26, 24}, 0 },
};

static const int LoginReputationClientResponse_VerdictType_entries_by_number[] = {
  3, // 0 -> VERDICT_TYPE_UNSPECIFIED
  2, // 1 -> SAFE
  0, // 2 -> LOW_REPUTATION
  1, // 3 -> PHISHING
};

const std::string& LoginReputationClientResponse_VerdictType_Name(
    LoginReputationClientResponse_VerdictType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginReputationClientResponse_VerdictType_entries,
          LoginReputationClientResponse_VerdictType_entries_by_number,
          4, LoginReputationClientResponse_VerdictType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginReputationClientResponse_VerdictType_entries,
      LoginReputationClientResponse_VerdictType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginReputationClientResponse_VerdictType_strings[idx].get();
}
bool LoginReputationClientResponse_VerdictType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginReputationClientResponse_VerdictType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginReputationClientResponse_VerdictType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<LoginReputationClientResponse_VerdictType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginReputationClientResponse_VerdictType LoginReputationClientResponse::VERDICT_TYPE_UNSPECIFIED;
constexpr LoginReputationClientResponse_VerdictType LoginReputationClientResponse::SAFE;
constexpr LoginReputationClientResponse_VerdictType LoginReputationClientResponse::LOW_REPUTATION;
constexpr LoginReputationClientResponse_VerdictType LoginReputationClientResponse::PHISHING;
constexpr LoginReputationClientResponse_VerdictType LoginReputationClientResponse::VerdictType_MIN;
constexpr LoginReputationClientResponse_VerdictType LoginReputationClientResponse::VerdictType_MAX;
constexpr int LoginReputationClientResponse::VerdictType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_strings[50] = {};

static const char ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names[] =
  "ABORTED"
  "ALREADY_EXISTS"
  "ARCHIVE_CORRUPTED"
  "BOF_HEADER_TOO_SHORT"
  "CANCELLED"
  "CLIPBOARD_FORMAT_OR_ANSI_STRING_TOO_SHORT"
  "DATA_LOSS"
  "DEADLINE_EXCEEDED"
  "DOC_TYPE_INFERENCE_FAILED"
  "EMPTY_FAT_HEADER"
  "FAILED_PRECONDITION"
  "FAIL_PARSE_BIFF_VERSION"
  "INTERNAL"
  "INVALID_ARGUMENT"
  "INVALID_DDE_OLE_LINK"
  "INVALID_FAT_HEADER"
  "INVALID_OLE2_HEADER"
  "INVALID_ROOT_DIR"
  "INVALID_XML_DOC"
  "MISSING_ENCODING"
  "MISSING_FILE_IN_ARCHIVE"
  "MISSING_PROPERTIES"
  "NOT_BIFF_FORMAT"
  "NOT_FOUND"
  "NOT_IMPLEMENTED"
  "NOT_IMPLEMENTED_FOR_CHROME"
  "OK"
  "OLE_DIR_PARSING_FAILED"
  "OLE_FAT_HEADER_PARSING_FAILED"
  "OLE_NATIVE_EMBEDDED_FILESIZE_MISMATCH"
  "OLE_NATIVE_EMBEDDED_PARSE_CONTENT_FAIL"
  "OLE_NATIVE_EMBEDDED_PARSE_FILENAME_FAIL"
  "OLE_NATIVE_EMBEDDED_PARSE_FILEPATH_FAIL"
  "OLE_NATIVE_EMBEDDED_PARSE_FILESIZE_FAIL"
  "OLE_NATIVE_EMBEDDED_PARSE_RESERVED_FAIL"
  "OLE_NATIVE_EMBEDDED_PARSE_SIZE_FAIL"
  "OLE_NATIVE_EMBEDDED_PARSE_TEMPPATH_FAIL"
  "OLE_NATIVE_EMBEDDED_PARSE_TYPE_FAIL"
  "OLE_NATIVE_EMBEDDED_SIZE_MISMATCH"
  "OUT_OF_RANGE"
  "PERMISSION_DENIED"
  "PREFIXED_ANSI_STRING_CONTENT_TOO_SHORT"
  "PREFIXED_ANSI_STRING_HEADER_TOO_SHORT"
  "RESOURCE_EXHAUSTED"
  "SANDBOX_ERROR"
  "UNAUTHENTICATED"
  "UNAVAILABLE"
  "UNIMPLEMENTED"
  "UNKNOWN"
  "UNSUPPORTED_DOC_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_entries[] = {
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 0, 7}, 10 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 7, 14}, 6 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 21, 17}, 1003 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 38, 20}, 1009 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 58, 9}, 1 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 67, 41}, 1008 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 108, 9}, 15 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 117, 17}, 4 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 134, 25}, 1000 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 159, 16}, 1025 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 175, 19}, 9 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 194, 23}, 1011 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 217, 8}, 13 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 225, 16}, 3 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 241, 20}, 1012 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 261, 18}, 1024 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 279, 19}, 1023 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 298, 16}, 1026 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 314, 15}, 1028 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 329, 16}, 1032 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 345, 23}, 1027 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 368, 18}, 1029 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 386, 15}, 1010 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 401, 9}, 5 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 410, 15}, 1031 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 425, 26}, 1030 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 451, 2}, 0 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 453, 22}, 1004 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 475, 29}, 1005 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 504, 37}, 1021 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 541, 38}, 1022 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 579, 39}, 1016 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 618, 39}, 1017 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 657, 39}, 1020 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 696, 39}, 1018 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 735, 35}, 1013 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 770, 39}, 1019 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 809, 35}, 1015 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 844, 33}, 1014 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 877, 12}, 11 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 889, 17}, 7 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 906, 38}, 1007 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 944, 37}, 1006 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 981, 18}, 8 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 999, 13}, 1002 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 1012, 15}, 16 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 1027, 11}, 14 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 1038, 13}, 12 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 1051, 7}, 2 },
  { {ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_names + 1058, 20}, 1001 },
};

static const int ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_entries_by_number[] = {
  26, // 0 -> OK
  4, // 1 -> CANCELLED
  48, // 2 -> UNKNOWN
  13, // 3 -> INVALID_ARGUMENT
  7, // 4 -> DEADLINE_EXCEEDED
  23, // 5 -> NOT_FOUND
  1, // 6 -> ALREADY_EXISTS
  40, // 7 -> PERMISSION_DENIED
  43, // 8 -> RESOURCE_EXHAUSTED
  10, // 9 -> FAILED_PRECONDITION
  0, // 10 -> ABORTED
  39, // 11 -> OUT_OF_RANGE
  47, // 12 -> UNIMPLEMENTED
  12, // 13 -> INTERNAL
  46, // 14 -> UNAVAILABLE
  6, // 15 -> DATA_LOSS
  45, // 16 -> UNAUTHENTICATED
  8, // 1000 -> DOC_TYPE_INFERENCE_FAILED
  49, // 1001 -> UNSUPPORTED_DOC_TYPE
  44, // 1002 -> SANDBOX_ERROR
  2, // 1003 -> ARCHIVE_CORRUPTED
  27, // 1004 -> OLE_DIR_PARSING_FAILED
  28, // 1005 -> OLE_FAT_HEADER_PARSING_FAILED
  42, // 1006 -> PREFIXED_ANSI_STRING_HEADER_TOO_SHORT
  41, // 1007 -> PREFIXED_ANSI_STRING_CONTENT_TOO_SHORT
  5, // 1008 -> CLIPBOARD_FORMAT_OR_ANSI_STRING_TOO_SHORT
  3, // 1009 -> BOF_HEADER_TOO_SHORT
  22, // 1010 -> NOT_BIFF_FORMAT
  11, // 1011 -> FAIL_PARSE_BIFF_VERSION
  14, // 1012 -> INVALID_DDE_OLE_LINK
  35, // 1013 -> OLE_NATIVE_EMBEDDED_PARSE_SIZE_FAIL
  38, // 1014 -> OLE_NATIVE_EMBEDDED_SIZE_MISMATCH
  37, // 1015 -> OLE_NATIVE_EMBEDDED_PARSE_TYPE_FAIL
  31, // 1016 -> OLE_NATIVE_EMBEDDED_PARSE_FILENAME_FAIL
  32, // 1017 -> OLE_NATIVE_EMBEDDED_PARSE_FILEPATH_FAIL
  34, // 1018 -> OLE_NATIVE_EMBEDDED_PARSE_RESERVED_FAIL
  36, // 1019 -> OLE_NATIVE_EMBEDDED_PARSE_TEMPPATH_FAIL
  33, // 1020 -> OLE_NATIVE_EMBEDDED_PARSE_FILESIZE_FAIL
  29, // 1021 -> OLE_NATIVE_EMBEDDED_FILESIZE_MISMATCH
  30, // 1022 -> OLE_NATIVE_EMBEDDED_PARSE_CONTENT_FAIL
  16, // 1023 -> INVALID_OLE2_HEADER
  15, // 1024 -> INVALID_FAT_HEADER
  9, // 1025 -> EMPTY_FAT_HEADER
  17, // 1026 -> INVALID_ROOT_DIR
  20, // 1027 -> MISSING_FILE_IN_ARCHIVE
  18, // 1028 -> INVALID_XML_DOC
  21, // 1029 -> MISSING_PROPERTIES
  25, // 1030 -> NOT_IMPLEMENTED_FOR_CHROME
  24, // 1031 -> NOT_IMPLEMENTED
  19, // 1032 -> MISSING_ENCODING
};

const std::string& ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Name(
    ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_entries,
          ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_entries_by_number,
          50, ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_entries,
      ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_entries_by_number,
      50, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_strings[idx].get();
}
bool ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_entries, 50, name, &int_value);
  if (success) {
    *value = static_cast<ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OK;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::CANCELLED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::UNKNOWN;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::INVALID_ARGUMENT;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::DEADLINE_EXCEEDED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::NOT_FOUND;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::ALREADY_EXISTS;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::PERMISSION_DENIED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::RESOURCE_EXHAUSTED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::FAILED_PRECONDITION;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::ABORTED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OUT_OF_RANGE;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::UNIMPLEMENTED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::INTERNAL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::UNAVAILABLE;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::DATA_LOSS;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::UNAUTHENTICATED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::DOC_TYPE_INFERENCE_FAILED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::UNSUPPORTED_DOC_TYPE;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::SANDBOX_ERROR;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::ARCHIVE_CORRUPTED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_DIR_PARSING_FAILED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_FAT_HEADER_PARSING_FAILED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::PREFIXED_ANSI_STRING_HEADER_TOO_SHORT;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::PREFIXED_ANSI_STRING_CONTENT_TOO_SHORT;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::CLIPBOARD_FORMAT_OR_ANSI_STRING_TOO_SHORT;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::BOF_HEADER_TOO_SHORT;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::NOT_BIFF_FORMAT;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::FAIL_PARSE_BIFF_VERSION;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::INVALID_DDE_OLE_LINK;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_PARSE_SIZE_FAIL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_SIZE_MISMATCH;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_PARSE_TYPE_FAIL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_PARSE_FILENAME_FAIL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_PARSE_FILEPATH_FAIL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_PARSE_RESERVED_FAIL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_PARSE_TEMPPATH_FAIL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_PARSE_FILESIZE_FAIL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_FILESIZE_MISMATCH;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::OLE_NATIVE_EMBEDDED_PARSE_CONTENT_FAIL;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::INVALID_OLE2_HEADER;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::INVALID_FAT_HEADER;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::EMPTY_FAT_HEADER;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::INVALID_ROOT_DIR;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::MISSING_FILE_IN_ARCHIVE;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::INVALID_XML_DOC;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::MISSING_PROPERTIES;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::NOT_IMPLEMENTED_FOR_CHROME;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::NOT_IMPLEMENTED;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::MISSING_ENCODING;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::MaldocaErrorType_MIN;
constexpr ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType ClientDownloadRequest_DocumentProcessingInfo::MaldocaErrorType_MAX;
constexpr int ClientDownloadRequest_DocumentProcessingInfo::MaldocaErrorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientDownloadRequest_ArchiveSummary_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientDownloadRequest_ArchiveSummary_Status_strings[4] = {};

static const char ClientDownloadRequest_ArchiveSummary_Status_names[] =
  "PARSER_TIMED_OUT"
  "TOO_LARGE"
  "UNKNOWN"
  "VALID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientDownloadRequest_ArchiveSummary_Status_entries[] = {
  { {ClientDownloadRequest_ArchiveSummary_Status_names + 0, 16}, 2 },
  { {ClientDownloadRequest_ArchiveSummary_Status_names + 16, 9}, 3 },
  { {ClientDownloadRequest_ArchiveSummary_Status_names + 25, 7}, 0 },
  { {ClientDownloadRequest_ArchiveSummary_Status_names + 32, 5}, 1 },
};

static const int ClientDownloadRequest_ArchiveSummary_Status_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  3, // 1 -> VALID
  0, // 2 -> PARSER_TIMED_OUT
  1, // 3 -> TOO_LARGE
};

const std::string& ClientDownloadRequest_ArchiveSummary_Status_Name(
    ClientDownloadRequest_ArchiveSummary_Status value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientDownloadRequest_ArchiveSummary_Status_entries,
          ClientDownloadRequest_ArchiveSummary_Status_entries_by_number,
          4, ClientDownloadRequest_ArchiveSummary_Status_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientDownloadRequest_ArchiveSummary_Status_entries,
      ClientDownloadRequest_ArchiveSummary_Status_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientDownloadRequest_ArchiveSummary_Status_strings[idx].get();
}
bool ClientDownloadRequest_ArchiveSummary_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadRequest_ArchiveSummary_Status* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientDownloadRequest_ArchiveSummary_Status_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ClientDownloadRequest_ArchiveSummary_Status>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary::UNKNOWN;
constexpr ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary::VALID;
constexpr ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary::PARSER_TIMED_OUT;
constexpr ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary::TOO_LARGE;
constexpr ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary::Status_MIN;
constexpr ClientDownloadRequest_ArchiveSummary_Status ClientDownloadRequest_ArchiveSummary::Status_MAX;
constexpr int ClientDownloadRequest_ArchiveSummary::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientDownloadRequest_ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientDownloadRequest_ResourceType_strings[6] = {};

static const char ClientDownloadRequest_ResourceType_names[] =
  "DOWNLOAD_REDIRECT"
  "DOWNLOAD_URL"
  "PPAPI_DOCUMENT"
  "PPAPI_PLUGIN"
  "TAB_REDIRECT"
  "TAB_URL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientDownloadRequest_ResourceType_entries[] = {
  { {ClientDownloadRequest_ResourceType_names + 0, 17}, 1 },
  { {ClientDownloadRequest_ResourceType_names + 17, 12}, 0 },
  { {ClientDownloadRequest_ResourceType_names + 29, 14}, 4 },
  { {ClientDownloadRequest_ResourceType_names + 43, 12}, 5 },
  { {ClientDownloadRequest_ResourceType_names + 55, 12}, 3 },
  { {ClientDownloadRequest_ResourceType_names + 67, 7}, 2 },
};

static const int ClientDownloadRequest_ResourceType_entries_by_number[] = {
  1, // 0 -> DOWNLOAD_URL
  0, // 1 -> DOWNLOAD_REDIRECT
  5, // 2 -> TAB_URL
  4, // 3 -> TAB_REDIRECT
  2, // 4 -> PPAPI_DOCUMENT
  3, // 5 -> PPAPI_PLUGIN
};

const std::string& ClientDownloadRequest_ResourceType_Name(
    ClientDownloadRequest_ResourceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientDownloadRequest_ResourceType_entries,
          ClientDownloadRequest_ResourceType_entries_by_number,
          6, ClientDownloadRequest_ResourceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientDownloadRequest_ResourceType_entries,
      ClientDownloadRequest_ResourceType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientDownloadRequest_ResourceType_strings[idx].get();
}
bool ClientDownloadRequest_ResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadRequest_ResourceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientDownloadRequest_ResourceType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ClientDownloadRequest_ResourceType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest::DOWNLOAD_URL;
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest::DOWNLOAD_REDIRECT;
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest::TAB_URL;
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest::TAB_REDIRECT;
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest::PPAPI_DOCUMENT;
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest::PPAPI_PLUGIN;
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest::ResourceType_MIN;
constexpr ClientDownloadRequest_ResourceType ClientDownloadRequest::ResourceType_MAX;
constexpr int ClientDownloadRequest::ResourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientDownloadRequest_DownloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientDownloadRequest_DownloadType_strings[15] = {};

static const char ClientDownloadRequest_DownloadType_names[] =
  "ANDROID_APK"
  "ARCHIVE"
  "CHROME_EXTENSION"
  "DOCUMENT"
  "INVALID_RAR"
  "INVALID_ZIP"
  "MAC_ARCHIVE_FAILED_PARSING"
  "MAC_EXECUTABLE"
  "PPAPI_SAVE_REQUEST"
  "RAR_COMPRESSED_ARCHIVE"
  "RAR_COMPRESSED_EXECUTABLE"
  "SAMPLED_UNSUPPORTED_FILE"
  "WIN_EXECUTABLE"
  "ZIPPED_ARCHIVE"
  "ZIPPED_EXECUTABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientDownloadRequest_DownloadType_entries[] = {
  { {ClientDownloadRequest_DownloadType_names + 0, 11}, 2 },
  { {ClientDownloadRequest_DownloadType_names + 11, 7}, 6 },
  { {ClientDownloadRequest_DownloadType_names + 18, 16}, 1 },
  { {ClientDownloadRequest_DownloadType_names + 34, 8}, 14 },
  { {ClientDownloadRequest_DownloadType_names + 42, 11}, 13 },
  { {ClientDownloadRequest_DownloadType_names + 53, 11}, 7 },
  { {ClientDownloadRequest_DownloadType_names + 64, 26}, 8 },
  { {ClientDownloadRequest_DownloadType_names + 90, 14}, 4 },
  { {ClientDownloadRequest_DownloadType_names + 104, 18}, 9 },
  { {ClientDownloadRequest_DownloadType_names + 122, 22}, 12 },
  { {ClientDownloadRequest_DownloadType_names + 144, 25}, 11 },
  { {ClientDownloadRequest_DownloadType_names + 169, 24}, 10 },
  { {ClientDownloadRequest_DownloadType_names + 193, 14}, 0 },
  { {ClientDownloadRequest_DownloadType_names + 207, 14}, 5 },
  { {ClientDownloadRequest_DownloadType_names + 221, 17}, 3 },
};

static const int ClientDownloadRequest_DownloadType_entries_by_number[] = {
  12, // 0 -> WIN_EXECUTABLE
  2, // 1 -> CHROME_EXTENSION
  0, // 2 -> ANDROID_APK
  14, // 3 -> ZIPPED_EXECUTABLE
  7, // 4 -> MAC_EXECUTABLE
  13, // 5 -> ZIPPED_ARCHIVE
  1, // 6 -> ARCHIVE
  5, // 7 -> INVALID_ZIP
  6, // 8 -> MAC_ARCHIVE_FAILED_PARSING
  8, // 9 -> PPAPI_SAVE_REQUEST
  11, // 10 -> SAMPLED_UNSUPPORTED_FILE
  10, // 11 -> RAR_COMPRESSED_EXECUTABLE
  9, // 12 -> RAR_COMPRESSED_ARCHIVE
  4, // 13 -> INVALID_RAR
  3, // 14 -> DOCUMENT
};

const std::string& ClientDownloadRequest_DownloadType_Name(
    ClientDownloadRequest_DownloadType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientDownloadRequest_DownloadType_entries,
          ClientDownloadRequest_DownloadType_entries_by_number,
          15, ClientDownloadRequest_DownloadType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientDownloadRequest_DownloadType_entries,
      ClientDownloadRequest_DownloadType_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientDownloadRequest_DownloadType_strings[idx].get();
}
bool ClientDownloadRequest_DownloadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadRequest_DownloadType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientDownloadRequest_DownloadType_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<ClientDownloadRequest_DownloadType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::WIN_EXECUTABLE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::CHROME_EXTENSION;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::ANDROID_APK;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::ZIPPED_EXECUTABLE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::MAC_EXECUTABLE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::ZIPPED_ARCHIVE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::ARCHIVE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::INVALID_ZIP;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::MAC_ARCHIVE_FAILED_PARSING;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::PPAPI_SAVE_REQUEST;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::SAMPLED_UNSUPPORTED_FILE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::RAR_COMPRESSED_EXECUTABLE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::RAR_COMPRESSED_ARCHIVE;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::INVALID_RAR;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::DOCUMENT;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::DownloadType_MIN;
constexpr ClientDownloadRequest_DownloadType ClientDownloadRequest::DownloadType_MAX;
constexpr int ClientDownloadRequest::DownloadType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ReferrerChainEntry_URLType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ReferrerChainEntry_URLType_strings[7] = {};

static const char ReferrerChainEntry_URLType_names[] =
  "CLIENT_REDIRECT"
  "DEPRECATED_SERVER_REDIRECT"
  "EVENT_URL"
  "LANDING_PAGE"
  "LANDING_REFERRER"
  "RECENT_NAVIGATION"
  "REFERRER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ReferrerChainEntry_URLType_entries[] = {
  { {ReferrerChainEntry_URLType_names + 0, 15}, 4 },
  { {ReferrerChainEntry_URLType_names + 15, 26}, 5 },
  { {ReferrerChainEntry_URLType_names + 41, 9}, 1 },
  { {ReferrerChainEntry_URLType_names + 50, 12}, 2 },
  { {ReferrerChainEntry_URLType_names + 62, 16}, 3 },
  { {ReferrerChainEntry_URLType_names + 78, 17}, 6 },
  { {ReferrerChainEntry_URLType_names + 95, 8}, 7 },
};

static const int ReferrerChainEntry_URLType_entries_by_number[] = {
  2, // 1 -> EVENT_URL
  3, // 2 -> LANDING_PAGE
  4, // 3 -> LANDING_REFERRER
  0, // 4 -> CLIENT_REDIRECT
  1, // 5 -> DEPRECATED_SERVER_REDIRECT
  5, // 6 -> RECENT_NAVIGATION
  6, // 7 -> REFERRER
};

const std::string& ReferrerChainEntry_URLType_Name(
    ReferrerChainEntry_URLType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ReferrerChainEntry_URLType_entries,
          ReferrerChainEntry_URLType_entries_by_number,
          7, ReferrerChainEntry_URLType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ReferrerChainEntry_URLType_entries,
      ReferrerChainEntry_URLType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ReferrerChainEntry_URLType_strings[idx].get();
}
bool ReferrerChainEntry_URLType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReferrerChainEntry_URLType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ReferrerChainEntry_URLType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<ReferrerChainEntry_URLType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::EVENT_URL;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::LANDING_PAGE;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::LANDING_REFERRER;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::CLIENT_REDIRECT;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::DEPRECATED_SERVER_REDIRECT;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::RECENT_NAVIGATION;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::REFERRER;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::URLType_MIN;
constexpr ReferrerChainEntry_URLType ReferrerChainEntry::URLType_MAX;
constexpr int ReferrerChainEntry::URLType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ReferrerChainEntry_NavigationInitiation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ReferrerChainEntry_NavigationInitiation_strings[4] = {};

static const char ReferrerChainEntry_NavigationInitiation_names[] =
  "BROWSER_INITIATED"
  "RENDERER_INITIATED_WITHOUT_USER_GESTURE"
  "RENDERER_INITIATED_WITH_USER_GESTURE"
  "UNDEFINED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ReferrerChainEntry_NavigationInitiation_entries[] = {
  { {ReferrerChainEntry_NavigationInitiation_names + 0, 17}, 1 },
  { {ReferrerChainEntry_NavigationInitiation_names + 17, 39}, 2 },
  { {ReferrerChainEntry_NavigationInitiation_names + 56, 36}, 3 },
  { {ReferrerChainEntry_NavigationInitiation_names + 92, 9}, 0 },
};

static const int ReferrerChainEntry_NavigationInitiation_entries_by_number[] = {
  3, // 0 -> UNDEFINED
  0, // 1 -> BROWSER_INITIATED
  1, // 2 -> RENDERER_INITIATED_WITHOUT_USER_GESTURE
  2, // 3 -> RENDERER_INITIATED_WITH_USER_GESTURE
};

const std::string& ReferrerChainEntry_NavigationInitiation_Name(
    ReferrerChainEntry_NavigationInitiation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ReferrerChainEntry_NavigationInitiation_entries,
          ReferrerChainEntry_NavigationInitiation_entries_by_number,
          4, ReferrerChainEntry_NavigationInitiation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ReferrerChainEntry_NavigationInitiation_entries,
      ReferrerChainEntry_NavigationInitiation_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ReferrerChainEntry_NavigationInitiation_strings[idx].get();
}
bool ReferrerChainEntry_NavigationInitiation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReferrerChainEntry_NavigationInitiation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ReferrerChainEntry_NavigationInitiation_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ReferrerChainEntry_NavigationInitiation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReferrerChainEntry_NavigationInitiation ReferrerChainEntry::UNDEFINED;
constexpr ReferrerChainEntry_NavigationInitiation ReferrerChainEntry::BROWSER_INITIATED;
constexpr ReferrerChainEntry_NavigationInitiation ReferrerChainEntry::RENDERER_INITIATED_WITHOUT_USER_GESTURE;
constexpr ReferrerChainEntry_NavigationInitiation ReferrerChainEntry::RENDERER_INITIATED_WITH_USER_GESTURE;
constexpr ReferrerChainEntry_NavigationInitiation ReferrerChainEntry::NavigationInitiation_MIN;
constexpr ReferrerChainEntry_NavigationInitiation ReferrerChainEntry::NavigationInitiation_MAX;
constexpr int ReferrerChainEntry::NavigationInitiation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientDownloadResponse_Verdict_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientDownloadResponse_Verdict_strings[7] = {};

static const char ClientDownloadResponse_Verdict_names[] =
  "DANGEROUS"
  "DANGEROUS_ACCOUNT_COMPROMISE"
  "DANGEROUS_HOST"
  "POTENTIALLY_UNWANTED"
  "SAFE"
  "UNCOMMON"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientDownloadResponse_Verdict_entries[] = {
  { {ClientDownloadResponse_Verdict_names + 0, 9}, 1 },
  { {ClientDownloadResponse_Verdict_names + 9, 28}, 8 },
  { {ClientDownloadResponse_Verdict_names + 37, 14}, 4 },
  { {ClientDownloadResponse_Verdict_names + 51, 20}, 3 },
  { {ClientDownloadResponse_Verdict_names + 71, 4}, 0 },
  { {ClientDownloadResponse_Verdict_names + 75, 8}, 2 },
  { {ClientDownloadResponse_Verdict_names + 83, 7}, 5 },
};

static const int ClientDownloadResponse_Verdict_entries_by_number[] = {
  4, // 0 -> SAFE
  0, // 1 -> DANGEROUS
  5, // 2 -> UNCOMMON
  3, // 3 -> POTENTIALLY_UNWANTED
  2, // 4 -> DANGEROUS_HOST
  6, // 5 -> UNKNOWN
  1, // 8 -> DANGEROUS_ACCOUNT_COMPROMISE
};

const std::string& ClientDownloadResponse_Verdict_Name(
    ClientDownloadResponse_Verdict value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientDownloadResponse_Verdict_entries,
          ClientDownloadResponse_Verdict_entries_by_number,
          7, ClientDownloadResponse_Verdict_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientDownloadResponse_Verdict_entries,
      ClientDownloadResponse_Verdict_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientDownloadResponse_Verdict_strings[idx].get();
}
bool ClientDownloadResponse_Verdict_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadResponse_Verdict* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientDownloadResponse_Verdict_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<ClientDownloadResponse_Verdict>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::SAFE;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::DANGEROUS;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::UNCOMMON;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::POTENTIALLY_UNWANTED;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::DANGEROUS_HOST;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::UNKNOWN;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::DANGEROUS_ACCOUNT_COMPROMISE;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::Verdict_MIN;
constexpr ClientDownloadResponse_Verdict ClientDownloadResponse::Verdict_MAX;
constexpr int ClientDownloadResponse::Verdict_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientDownloadReport_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientDownloadReport_Reason_strings[3] = {};

static const char ClientDownloadReport_Reason_names[] =
  "APPEAL"
  "FALSE_POSITIVE"
  "SHARE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientDownloadReport_Reason_entries[] = {
  { {ClientDownloadReport_Reason_names + 0, 6}, 2 },
  { {ClientDownloadReport_Reason_names + 6, 14}, 1 },
  { {ClientDownloadReport_Reason_names + 20, 5}, 0 },
};

static const int ClientDownloadReport_Reason_entries_by_number[] = {
  2, // 0 -> SHARE
  1, // 1 -> FALSE_POSITIVE
  0, // 2 -> APPEAL
};

const std::string& ClientDownloadReport_Reason_Name(
    ClientDownloadReport_Reason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientDownloadReport_Reason_entries,
          ClientDownloadReport_Reason_entries_by_number,
          3, ClientDownloadReport_Reason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientDownloadReport_Reason_entries,
      ClientDownloadReport_Reason_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientDownloadReport_Reason_strings[idx].get();
}
bool ClientDownloadReport_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientDownloadReport_Reason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientDownloadReport_Reason_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ClientDownloadReport_Reason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientDownloadReport_Reason ClientDownloadReport::SHARE;
constexpr ClientDownloadReport_Reason ClientDownloadReport::FALSE_POSITIVE;
constexpr ClientDownloadReport_Reason ClientDownloadReport::APPEAL;
constexpr ClientDownloadReport_Reason ClientDownloadReport::Reason_MIN;
constexpr ClientDownloadReport_Reason ClientDownloadReport::Reason_MAX;
constexpr int ClientDownloadReport::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientUploadResponse_UploadStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientUploadResponse_UploadStatus_strings[2] = {};

static const char ClientUploadResponse_UploadStatus_names[] =
  "SUCCESS"
  "UPLOAD_FAILURE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientUploadResponse_UploadStatus_entries[] = {
  { {ClientUploadResponse_UploadStatus_names + 0, 7}, 0 },
  { {ClientUploadResponse_UploadStatus_names + 7, 14}, 1 },
};

static const int ClientUploadResponse_UploadStatus_entries_by_number[] = {
  0, // 0 -> SUCCESS
  1, // 1 -> UPLOAD_FAILURE
};

const std::string& ClientUploadResponse_UploadStatus_Name(
    ClientUploadResponse_UploadStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientUploadResponse_UploadStatus_entries,
          ClientUploadResponse_UploadStatus_entries_by_number,
          2, ClientUploadResponse_UploadStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientUploadResponse_UploadStatus_entries,
      ClientUploadResponse_UploadStatus_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientUploadResponse_UploadStatus_strings[idx].get();
}
bool ClientUploadResponse_UploadStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientUploadResponse_UploadStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientUploadResponse_UploadStatus_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ClientUploadResponse_UploadStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientUploadResponse_UploadStatus ClientUploadResponse::SUCCESS;
constexpr ClientUploadResponse_UploadStatus ClientUploadResponse::UPLOAD_FAILURE;
constexpr ClientUploadResponse_UploadStatus ClientUploadResponse::UploadStatus_MIN;
constexpr ClientUploadResponse_UploadStatus ClientUploadResponse::UploadStatus_MAX;
constexpr int ClientUploadResponse::UploadStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_strings[7] = {};

static const char ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_names[] =
  "BYPASS_CHANGED"
  "BYPASS_CLEARED"
  "CHANGED"
  "CLEARED"
  "UNKNOWN"
  "UNTRUSTED_UNKNOWN_VALUE"
  "WEAK_LEGACY_OBSOLETE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_entries[] = {
  { {ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_names + 0, 14}, 6 },
  { {ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_names + 14, 14}, 5 },
  { {ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_names + 28, 7}, 3 },
  { {ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_names + 35, 7}, 1 },
  { {ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_names + 42, 7}, 0 },
  { {ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_names + 49, 23}, 4 },
  { {ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_names + 72, 20}, 2 },
};

static const int ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  3, // 1 -> CLEARED
  6, // 2 -> WEAK_LEGACY_OBSOLETE
  2, // 3 -> CHANGED
  5, // 4 -> UNTRUSTED_UNKNOWN_VALUE
  1, // 5 -> BYPASS_CLEARED
  0, // 6 -> BYPASS_CHANGED
};

const std::string& ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Name(
    ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_entries,
          ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_entries_by_number,
          7, ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_entries,
      ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_strings[idx].get();
}
bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::UNKNOWN;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::CLEARED;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::WEAK_LEGACY_OBSOLETE;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::CHANGED;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::UNTRUSTED_UNKNOWN_VALUE;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::BYPASS_CLEARED;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::BYPASS_CHANGED;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::ValueState_MIN;
constexpr ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState ClientIncidentReport_IncidentData_TrackedPreferenceIncident::ValueState_MAX;
constexpr int ClientIncidentReport_IncidentData_TrackedPreferenceIncident::ValueState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_strings[2] = {};

static const char ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_names[] =
  "TYPE_PATTERN"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_entries[] = {
  { {ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_names + 0, 12}, 3 },
  { {ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_names + 12, 7}, 0 },
};

static const int ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 3 -> TYPE_PATTERN
};

const std::string& ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Name(
    ClientIncidentReport_IncidentData_ResourceRequestIncident_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_entries,
          ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_entries_by_number,
          2, ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_entries,
      ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_strings[idx].get();
}
bool ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_IncidentData_ResourceRequestIncident_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ClientIncidentReport_IncidentData_ResourceRequestIncident_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientIncidentReport_IncidentData_ResourceRequestIncident_Type ClientIncidentReport_IncidentData_ResourceRequestIncident::UNKNOWN;
constexpr ClientIncidentReport_IncidentData_ResourceRequestIncident_Type ClientIncidentReport_IncidentData_ResourceRequestIncident::TYPE_PATTERN;
constexpr ClientIncidentReport_IncidentData_ResourceRequestIncident_Type ClientIncidentReport_IncidentData_ResourceRequestIncident::Type_MIN;
constexpr ClientIncidentReport_IncidentData_ResourceRequestIncident_Type ClientIncidentReport_IncidentData_ResourceRequestIncident::Type_MAX;
constexpr int ClientIncidentReport_IncidentData_ResourceRequestIncident::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientIncidentReport_EnvironmentData_Process_Dll_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientIncidentReport_EnvironmentData_Process_Dll_Feature_strings[2] = {};

static const char ClientIncidentReport_EnvironmentData_Process_Dll_Feature_names[] =
  "LSP"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientIncidentReport_EnvironmentData_Process_Dll_Feature_entries[] = {
  { {ClientIncidentReport_EnvironmentData_Process_Dll_Feature_names + 0, 3}, 1 },
  { {ClientIncidentReport_EnvironmentData_Process_Dll_Feature_names + 3, 7}, 0 },
};

static const int ClientIncidentReport_EnvironmentData_Process_Dll_Feature_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> LSP
};

const std::string& ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Name(
    ClientIncidentReport_EnvironmentData_Process_Dll_Feature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientIncidentReport_EnvironmentData_Process_Dll_Feature_entries,
          ClientIncidentReport_EnvironmentData_Process_Dll_Feature_entries_by_number,
          2, ClientIncidentReport_EnvironmentData_Process_Dll_Feature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientIncidentReport_EnvironmentData_Process_Dll_Feature_entries,
      ClientIncidentReport_EnvironmentData_Process_Dll_Feature_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientIncidentReport_EnvironmentData_Process_Dll_Feature_strings[idx].get();
}
bool ClientIncidentReport_EnvironmentData_Process_Dll_Feature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_EnvironmentData_Process_Dll_Feature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientIncidentReport_EnvironmentData_Process_Dll_Feature_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ClientIncidentReport_EnvironmentData_Process_Dll_Feature>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientIncidentReport_EnvironmentData_Process_Dll_Feature ClientIncidentReport_EnvironmentData_Process_Dll::UNKNOWN;
constexpr ClientIncidentReport_EnvironmentData_Process_Dll_Feature ClientIncidentReport_EnvironmentData_Process_Dll::LSP;
constexpr ClientIncidentReport_EnvironmentData_Process_Dll_Feature ClientIncidentReport_EnvironmentData_Process_Dll::Feature_MIN;
constexpr ClientIncidentReport_EnvironmentData_Process_Dll_Feature ClientIncidentReport_EnvironmentData_Process_Dll::Feature_MAX;
constexpr int ClientIncidentReport_EnvironmentData_Process_Dll::Feature_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_strings[4] = {};

static const char ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_names[] =
  "MODULE_STATE_MODIFIED"
  "MODULE_STATE_UNKNOWN"
  "MODULE_STATE_UNMODIFIED"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_entries[] = {
  { {ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_names + 0, 21}, 3 },
  { {ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_names + 21, 20}, 1 },
  { {ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_names + 41, 23}, 2 },
  { {ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_names + 64, 7}, 0 },
};

static const int ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  1, // 1 -> MODULE_STATE_UNKNOWN
  2, // 2 -> MODULE_STATE_UNMODIFIED
  0, // 3 -> MODULE_STATE_MODIFIED
};

const std::string& ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Name(
    ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_entries,
          ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_entries_by_number,
          4, ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_entries,
      ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_strings[idx].get();
}
bool ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState::UNKNOWN;
constexpr ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState::MODULE_STATE_UNKNOWN;
constexpr ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState::MODULE_STATE_UNMODIFIED;
constexpr ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState::MODULE_STATE_MODIFIED;
constexpr ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState::ModifiedState_MIN;
constexpr ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState ClientIncidentReport_EnvironmentData_Process_ModuleState::ModifiedState_MAX;
constexpr int ClientIncidentReport_EnvironmentData_Process_ModuleState::ModifiedState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientIncidentReport_EnvironmentData_Process_Channel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientIncidentReport_EnvironmentData_Process_Channel_strings[5] = {};

static const char ClientIncidentReport_EnvironmentData_Process_Channel_names[] =
  "CHANNEL_BETA"
  "CHANNEL_CANARY"
  "CHANNEL_DEV"
  "CHANNEL_STABLE"
  "CHANNEL_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientIncidentReport_EnvironmentData_Process_Channel_entries[] = {
  { {ClientIncidentReport_EnvironmentData_Process_Channel_names + 0, 12}, 3 },
  { {ClientIncidentReport_EnvironmentData_Process_Channel_names + 12, 14}, 1 },
  { {ClientIncidentReport_EnvironmentData_Process_Channel_names + 26, 11}, 2 },
  { {ClientIncidentReport_EnvironmentData_Process_Channel_names + 37, 14}, 4 },
  { {ClientIncidentReport_EnvironmentData_Process_Channel_names + 51, 15}, 0 },
};

static const int ClientIncidentReport_EnvironmentData_Process_Channel_entries_by_number[] = {
  4, // 0 -> CHANNEL_UNKNOWN
  1, // 1 -> CHANNEL_CANARY
  2, // 2 -> CHANNEL_DEV
  0, // 3 -> CHANNEL_BETA
  3, // 4 -> CHANNEL_STABLE
};

const std::string& ClientIncidentReport_EnvironmentData_Process_Channel_Name(
    ClientIncidentReport_EnvironmentData_Process_Channel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientIncidentReport_EnvironmentData_Process_Channel_entries,
          ClientIncidentReport_EnvironmentData_Process_Channel_entries_by_number,
          5, ClientIncidentReport_EnvironmentData_Process_Channel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientIncidentReport_EnvironmentData_Process_Channel_entries,
      ClientIncidentReport_EnvironmentData_Process_Channel_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientIncidentReport_EnvironmentData_Process_Channel_strings[idx].get();
}
bool ClientIncidentReport_EnvironmentData_Process_Channel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_EnvironmentData_Process_Channel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientIncidentReport_EnvironmentData_Process_Channel_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ClientIncidentReport_EnvironmentData_Process_Channel>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::CHANNEL_UNKNOWN;
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::CHANNEL_CANARY;
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::CHANNEL_DEV;
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::CHANNEL_BETA;
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::CHANNEL_STABLE;
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::Channel_MIN;
constexpr ClientIncidentReport_EnvironmentData_Process_Channel ClientIncidentReport_EnvironmentData_Process::Channel_MAX;
constexpr int ClientIncidentReport_EnvironmentData_Process::Channel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_strings[6] = {};

static const char ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_names[] =
  "STATE_BLOCKED"
  "STATE_BLOCKLISTED"
  "STATE_DISABLED"
  "STATE_ENABLED"
  "STATE_TERMINATED"
  "STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_entries[] = {
  { {ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_names + 0, 13}, 4 },
  { {ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_names + 13, 17}, 3 },
  { {ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_names + 30, 14}, 2 },
  { {ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_names + 44, 13}, 1 },
  { {ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_names + 57, 16}, 5 },
  { {ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_names + 73, 13}, 0 },
};

static const int ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_entries_by_number[] = {
  5, // 0 -> STATE_UNKNOWN
  3, // 1 -> STATE_ENABLED
  2, // 2 -> STATE_DISABLED
  1, // 3 -> STATE_BLOCKLISTED
  0, // 4 -> STATE_BLOCKED
  4, // 5 -> STATE_TERMINATED
};

const std::string& ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Name(
    ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_entries,
          ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_entries_by_number,
          6, ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_entries,
      ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_strings[idx].get();
}
bool ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::STATE_UNKNOWN;
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::STATE_ENABLED;
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::STATE_DISABLED;
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::STATE_BLOCKLISTED;
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::STATE_BLOCKED;
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::STATE_TERMINATED;
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::ExtensionState_MIN;
constexpr ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState ClientIncidentReport_ExtensionData_ExtensionInfo::ExtensionState_MAX;
constexpr int ClientIncidentReport_ExtensionData_ExtensionInfo::ExtensionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientSafeBrowsingReportRequest_ReportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientSafeBrowsingReportRequest_ReportType_strings[17] = {};

static const char ClientSafeBrowsingReportRequest_ReportType_names[] =
  "AD_SAMPLE"
  "APK_DOWNLOAD"
  "BILLING"
  "BLOCKED_AD_POPUP"
  "BLOCKED_AD_REDIRECT"
  "DANGEROUS_DOWNLOAD_BY_API"
  "DANGEROUS_DOWNLOAD_OPENED"
  "DANGEROUS_DOWNLOAD_RECOVERY"
  "DANGEROUS_DOWNLOAD_WARNING"
  "UNKNOWN"
  "URL_CLIENT_SIDE_MALWARE"
  "URL_CLIENT_SIDE_PHISHING"
  "URL_MALWARE"
  "URL_PASSWORD_PROTECTION_PHISHING"
  "URL_PHISHING"
  "URL_SUSPICIOUS"
  "URL_UNWANTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientSafeBrowsingReportRequest_ReportType_entries[] = {
  { {ClientSafeBrowsingReportRequest_ReportType_names + 0, 9}, 14 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 9, 12}, 17 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 21, 7}, 16 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 28, 16}, 20 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 44, 19}, 19 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 63, 25}, 10 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 88, 25}, 13 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 113, 27}, 6 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 140, 26}, 7 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 166, 7}, 0 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 173, 23}, 5 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 196, 24}, 4 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 220, 11}, 2 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 231, 32}, 12 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 263, 12}, 1 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 275, 14}, 15 },
  { {ClientSafeBrowsingReportRequest_ReportType_names + 289, 12}, 3 },
};

static const int ClientSafeBrowsingReportRequest_ReportType_entries_by_number[] = {
  9, // 0 -> UNKNOWN
  14, // 1 -> URL_PHISHING
  12, // 2 -> URL_MALWARE
  16, // 3 -> URL_UNWANTED
  11, // 4 -> URL_CLIENT_SIDE_PHISHING
  10, // 5 -> URL_CLIENT_SIDE_MALWARE
  7, // 6 -> DANGEROUS_DOWNLOAD_RECOVERY
  8, // 7 -> DANGEROUS_DOWNLOAD_WARNING
  5, // 10 -> DANGEROUS_DOWNLOAD_BY_API
  13, // 12 -> URL_PASSWORD_PROTECTION_PHISHING
  6, // 13 -> DANGEROUS_DOWNLOAD_OPENED
  0, // 14 -> AD_SAMPLE
  15, // 15 -> URL_SUSPICIOUS
  2, // 16 -> BILLING
  1, // 17 -> APK_DOWNLOAD
  4, // 19 -> BLOCKED_AD_REDIRECT
  3, // 20 -> BLOCKED_AD_POPUP
};

const std::string& ClientSafeBrowsingReportRequest_ReportType_Name(
    ClientSafeBrowsingReportRequest_ReportType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientSafeBrowsingReportRequest_ReportType_entries,
          ClientSafeBrowsingReportRequest_ReportType_entries_by_number,
          17, ClientSafeBrowsingReportRequest_ReportType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientSafeBrowsingReportRequest_ReportType_entries,
      ClientSafeBrowsingReportRequest_ReportType_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientSafeBrowsingReportRequest_ReportType_strings[idx].get();
}
bool ClientSafeBrowsingReportRequest_ReportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientSafeBrowsingReportRequest_ReportType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientSafeBrowsingReportRequest_ReportType_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<ClientSafeBrowsingReportRequest_ReportType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::UNKNOWN;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::URL_PHISHING;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::URL_MALWARE;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::URL_UNWANTED;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::URL_CLIENT_SIDE_PHISHING;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::URL_CLIENT_SIDE_MALWARE;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::DANGEROUS_DOWNLOAD_RECOVERY;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::DANGEROUS_DOWNLOAD_WARNING;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::DANGEROUS_DOWNLOAD_BY_API;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::URL_PASSWORD_PROTECTION_PHISHING;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::DANGEROUS_DOWNLOAD_OPENED;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::AD_SAMPLE;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::URL_SUSPICIOUS;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::BILLING;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::APK_DOWNLOAD;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::BLOCKED_AD_REDIRECT;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::BLOCKED_AD_POPUP;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::ReportType_MIN;
constexpr ClientSafeBrowsingReportRequest_ReportType ClientSafeBrowsingReportRequest::ReportType_MAX;
constexpr int ClientSafeBrowsingReportRequest::ReportType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_strings[6] = {};

static const char ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_names[] =
  "ANDROID_SAFETYNET"
  "FLYWHEEL"
  "PVER3_NATIVE"
  "PVER4_NATIVE"
  "REAL_TIME"
  "SAFE_BROWSING_URL_API_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_entries[] = {
  { {ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_names + 0, 17}, 3 },
  { {ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_names + 17, 8}, 4 },
  { {ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_names + 25, 12}, 1 },
  { {ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_names + 37, 12}, 2 },
  { {ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_names + 49, 9}, 5 },
  { {ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_names + 58, 38}, 0 },
};

static const int ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_entries_by_number[] = {
  5, // 0 -> SAFE_BROWSING_URL_API_TYPE_UNSPECIFIED
  2, // 1 -> PVER3_NATIVE
  3, // 2 -> PVER4_NATIVE
  0, // 3 -> ANDROID_SAFETYNET
  1, // 4 -> FLYWHEEL
  4, // 5 -> REAL_TIME
};

const std::string& ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Name(
    ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_entries,
          ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_entries_by_number,
          6, ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_entries,
      ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_strings[idx].get();
}
bool ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest::SAFE_BROWSING_URL_API_TYPE_UNSPECIFIED;
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest::PVER3_NATIVE;
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest::PVER4_NATIVE;
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest::ANDROID_SAFETYNET;
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest::FLYWHEEL;
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest::REAL_TIME;
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest::SafeBrowsingUrlApiType_MIN;
constexpr ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType ClientSafeBrowsingReportRequest::SafeBrowsingUrlApiType_MAX;
constexpr int ClientSafeBrowsingReportRequest::SafeBrowsingUrlApiType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ExtensionTelemetryReportRequest_ExtensionInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ExtensionTelemetryReportRequest_ExtensionInfo_Type_strings[9] = {};

static const char ExtensionTelemetryReportRequest_ExtensionInfo_Type_names[] =
  "EXTENSION"
  "HOSTED_APP"
  "LEGACY_PACKAGED_APP"
  "LOGIN_SCREEN_EXTENSION"
  "PLATFORM_APP"
  "SHARED_MODULE"
  "THEME"
  "UNKNOWN_TYPE"
  "USER_SCRIPT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExtensionTelemetryReportRequest_ExtensionInfo_Type_entries[] = {
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 0, 9}, 1 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 9, 10}, 4 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 19, 19}, 5 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 38, 22}, 8 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 60, 12}, 6 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 72, 13}, 7 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 85, 5}, 2 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 90, 12}, 0 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_Type_names + 102, 11}, 3 },
};

static const int ExtensionTelemetryReportRequest_ExtensionInfo_Type_entries_by_number[] = {
  7, // 0 -> UNKNOWN_TYPE
  0, // 1 -> EXTENSION
  6, // 2 -> THEME
  8, // 3 -> USER_SCRIPT
  1, // 4 -> HOSTED_APP
  2, // 5 -> LEGACY_PACKAGED_APP
  4, // 6 -> PLATFORM_APP
  5, // 7 -> SHARED_MODULE
  3, // 8 -> LOGIN_SCREEN_EXTENSION
};

const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_Type_Name(
    ExtensionTelemetryReportRequest_ExtensionInfo_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExtensionTelemetryReportRequest_ExtensionInfo_Type_entries,
          ExtensionTelemetryReportRequest_ExtensionInfo_Type_entries_by_number,
          9, ExtensionTelemetryReportRequest_ExtensionInfo_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExtensionTelemetryReportRequest_ExtensionInfo_Type_entries,
      ExtensionTelemetryReportRequest_ExtensionInfo_Type_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ExtensionTelemetryReportRequest_ExtensionInfo_Type_strings[idx].get();
}
bool ExtensionTelemetryReportRequest_ExtensionInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtensionTelemetryReportRequest_ExtensionInfo_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExtensionTelemetryReportRequest_ExtensionInfo_Type_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<ExtensionTelemetryReportRequest_ExtensionInfo_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::UNKNOWN_TYPE;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::EXTENSION;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::THEME;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::USER_SCRIPT;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::HOSTED_APP;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::LEGACY_PACKAGED_APP;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::PLATFORM_APP;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::SHARED_MODULE;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::LOGIN_SCREEN_EXTENSION;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::Type_MIN;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_Type ExtensionTelemetryReportRequest_ExtensionInfo::Type_MAX;
constexpr int ExtensionTelemetryReportRequest_ExtensionInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_strings[11] = {};

static const char ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names[] =
  "COMMAND_LINE"
  "COMPONENT"
  "EXTERNAL_COMPONENT"
  "EXTERNAL_POLICY"
  "EXTERNAL_POLICY_DOWNLOAD"
  "EXTERNAL_PREF"
  "EXTERNAL_PREF_DOWNLOAD"
  "EXTERNAL_REGISTRY"
  "INTERNAL"
  "UNKNOWN_LOCATION"
  "UNPACKED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_entries[] = {
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 0, 12}, 8 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 12, 9}, 5 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 21, 18}, 10 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 39, 15}, 9 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 54, 24}, 7 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 78, 13}, 2 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 91, 22}, 6 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 113, 17}, 3 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 130, 8}, 1 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 138, 16}, 0 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_names + 154, 8}, 4 },
};

static const int ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_entries_by_number[] = {
  9, // 0 -> UNKNOWN_LOCATION
  8, // 1 -> INTERNAL
  5, // 2 -> EXTERNAL_PREF
  7, // 3 -> EXTERNAL_REGISTRY
  10, // 4 -> UNPACKED
  1, // 5 -> COMPONENT
  6, // 6 -> EXTERNAL_PREF_DOWNLOAD
  4, // 7 -> EXTERNAL_POLICY_DOWNLOAD
  0, // 8 -> COMMAND_LINE
  3, // 9 -> EXTERNAL_POLICY
  2, // 10 -> EXTERNAL_COMPONENT
};

const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Name(
    ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_entries,
          ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_entries_by_number,
          11, ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_entries,
      ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_strings[idx].get();
}
bool ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::UNKNOWN_LOCATION;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::INTERNAL;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::EXTERNAL_PREF;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::EXTERNAL_REGISTRY;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::UNPACKED;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::COMPONENT;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::EXTERNAL_PREF_DOWNLOAD;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::EXTERNAL_POLICY_DOWNLOAD;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::COMMAND_LINE;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::EXTERNAL_POLICY;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::EXTERNAL_COMPONENT;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::InstallLocation_MIN;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation ExtensionTelemetryReportRequest_ExtensionInfo::InstallLocation_MAX;
constexpr int ExtensionTelemetryReportRequest_ExtensionInfo::InstallLocation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_strings[6] = {};

static const char ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_names[] =
  "BLOCKLISTED_CWS_POLICY_VIOLATION"
  "BLOCKLISTED_MALWARE"
  "BLOCKLISTED_POTENTIALLY_UNWANTED"
  "BLOCKLISTED_SECURITY_VULNERABILITY"
  "BLOCKLISTED_UNKNOWN"
  "NOT_BLOCKLISTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_entries[] = {
  { {ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_names + 0, 32}, 3 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_names + 32, 19}, 1 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_names + 51, 32}, 4 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_names + 83, 34}, 2 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_names + 117, 19}, 5 },
  { {ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_names + 136, 15}, 0 },
};

static const int ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_entries_by_number[] = {
  5, // 0 -> NOT_BLOCKLISTED
  1, // 1 -> BLOCKLISTED_MALWARE
  3, // 2 -> BLOCKLISTED_SECURITY_VULNERABILITY
  0, // 3 -> BLOCKLISTED_CWS_POLICY_VIOLATION
  2, // 4 -> BLOCKLISTED_POTENTIALLY_UNWANTED
  4, // 5 -> BLOCKLISTED_UNKNOWN
};

const std::string& ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Name(
    ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_entries,
          ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_entries_by_number,
          6, ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_entries,
      ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_strings[idx].get();
}
bool ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::NOT_BLOCKLISTED;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::BLOCKLISTED_MALWARE;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::BLOCKLISTED_SECURITY_VULNERABILITY;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::BLOCKLISTED_CWS_POLICY_VIOLATION;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::BLOCKLISTED_POTENTIALLY_UNWANTED;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::BLOCKLISTED_UNKNOWN;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::BlocklistState_MIN;
constexpr ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState ExtensionTelemetryReportRequest_ExtensionInfo::BlocklistState_MAX;
constexpr int ExtensionTelemetryReportRequest_ExtensionInfo::BlocklistState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeUserPopulation_PageLoadToken::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeUserPopulation_PageLoadToken>()._has_bits_);
  static void set_has_token_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeUserPopulation_PageLoadToken::ChromeUserPopulation_PageLoadToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ChromeUserPopulation.PageLoadToken)
}
ChromeUserPopulation_PageLoadToken::ChromeUserPopulation_PageLoadToken(const ChromeUserPopulation_PageLoadToken& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  token_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_value()) {
    token_value_.Set(from._internal_token_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&token_time_msec_, &from.token_time_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_source_) -
    reinterpret_cast<char*>(&token_time_msec_)) + sizeof(token_source_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ChromeUserPopulation.PageLoadToken)
}

inline void ChromeUserPopulation_PageLoadToken::SharedCtor() {
token_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_time_msec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&token_source_) -
    reinterpret_cast<char*>(&token_time_msec_)) + sizeof(token_source_));
}

ChromeUserPopulation_PageLoadToken::~ChromeUserPopulation_PageLoadToken() {
  // @@protoc_insertion_point(destructor:safe_browsing.ChromeUserPopulation.PageLoadToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeUserPopulation_PageLoadToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_value_.Destroy();
}

void ChromeUserPopulation_PageLoadToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeUserPopulation_PageLoadToken::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ChromeUserPopulation.PageLoadToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&token_time_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&token_source_) -
        reinterpret_cast<char*>(&token_time_msec_)) + sizeof(token_source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeUserPopulation_PageLoadToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ChromeUserPopulation.PageLoadToken.TokenSource token_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource_IsValid(val))) {
            _internal_set_token_source(static_cast<::safe_browsing::ChromeUserPopulation_PageLoadToken_TokenSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 token_time_msec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_token_time_msec(&has_bits);
          token_time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes token_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeUserPopulation_PageLoadToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ChromeUserPopulation.PageLoadToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ChromeUserPopulation.PageLoadToken.TokenSource token_source = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_token_source(), target);
  }

  // optional int64 token_time_msec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_token_time_msec(), target);
  }

  // optional bytes token_value = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ChromeUserPopulation.PageLoadToken)
  return target;
}

size_t ChromeUserPopulation_PageLoadToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ChromeUserPopulation.PageLoadToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes token_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token_value());
    }

    // optional int64 token_time_msec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_token_time_msec());
    }

    // optional .safe_browsing.ChromeUserPopulation.PageLoadToken.TokenSource token_source = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_token_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeUserPopulation_PageLoadToken::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeUserPopulation_PageLoadToken*>(
      &from));
}

void ChromeUserPopulation_PageLoadToken::MergeFrom(const ChromeUserPopulation_PageLoadToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ChromeUserPopulation.PageLoadToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token_value(from._internal_token_value());
    }
    if (cached_has_bits & 0x00000002u) {
      token_time_msec_ = from.token_time_msec_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_source_ = from.token_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeUserPopulation_PageLoadToken::CopyFrom(const ChromeUserPopulation_PageLoadToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ChromeUserPopulation.PageLoadToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserPopulation_PageLoadToken::IsInitialized() const {
  return true;
}

void ChromeUserPopulation_PageLoadToken::InternalSwap(ChromeUserPopulation_PageLoadToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_value_, lhs_arena,
      &other->token_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeUserPopulation_PageLoadToken, token_source_)
      + sizeof(ChromeUserPopulation_PageLoadToken::token_source_)
      - PROTOBUF_FIELD_OFFSET(ChromeUserPopulation_PageLoadToken, token_time_msec_)>(
          reinterpret_cast<char*>(&token_time_msec_),
          reinterpret_cast<char*>(&other->token_time_msec_));
}

std::string ChromeUserPopulation_PageLoadToken::GetTypeName() const {
  return "safe_browsing.ChromeUserPopulation.PageLoadToken";
}


// ===================================================================

class ChromeUserPopulation::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeUserPopulation>()._has_bits_);
  static void set_has_user_population(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_history_sync_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_profile_management_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_under_advanced_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_incognito(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_mbb_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_user_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_profiles(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_number_of_loaded_profiles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_number_of_open_profiles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_aesb_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_aesb_last_update_time_windows_epoch_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ChromeUserPopulation::ChromeUserPopulation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  finch_active_groups_(arena),
  page_load_tokens_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ChromeUserPopulation)
}
ChromeUserPopulation::ChromeUserPopulation(const ChromeUserPopulation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      finch_active_groups_(from.finch_active_groups_),
      page_load_tokens_(from.page_load_tokens_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_agent()) {
    user_agent_.Set(from._internal_user_agent(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_population_, &from.user_population_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_aesb_enabled_) -
    reinterpret_cast<char*>(&user_population_)) + sizeof(is_aesb_enabled_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ChromeUserPopulation)
}

inline void ChromeUserPopulation::SharedCtor() {
user_agent_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_agent_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_population_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_aesb_enabled_) -
    reinterpret_cast<char*>(&user_population_)) + sizeof(is_aesb_enabled_));
}

ChromeUserPopulation::~ChromeUserPopulation() {
  // @@protoc_insertion_point(destructor:safe_browsing.ChromeUserPopulation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeUserPopulation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_agent_.Destroy();
}

void ChromeUserPopulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeUserPopulation::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ChromeUserPopulation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finch_active_groups_.Clear();
  page_load_tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_agent_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&user_population_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_profiles_) -
        reinterpret_cast<char*>(&user_population_)) + sizeof(number_of_profiles_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&number_of_loaded_profiles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_aesb_enabled_) -
        reinterpret_cast<char*>(&number_of_loaded_profiles_)) + sizeof(is_aesb_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeUserPopulation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ChromeUserPopulation.UserPopulation user_population = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ChromeUserPopulation_UserPopulation_IsValid(val))) {
            _internal_set_user_population(static_cast<::safe_browsing::ChromeUserPopulation_UserPopulation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_history_sync_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_history_sync_enabled(&has_bits);
          is_history_sync_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string finch_active_groups = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_finch_active_groups();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ChromeUserPopulation.ProfileManagementStatus profile_management_status = 5 [default = UNKNOWN];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ChromeUserPopulation_ProfileManagementStatus_IsValid(val))) {
            _internal_set_profile_management_status(static_cast<::safe_browsing::ChromeUserPopulation_ProfileManagementStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_under_advanced_protection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_under_advanced_protection(&has_bits);
          is_under_advanced_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_incognito = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_incognito(&has_bits);
          is_incognito_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_mbb_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_mbb_enabled(&has_bits);
          is_mbb_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_agent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_user_agent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 number_of_profiles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_number_of_profiles(&has_bits);
          number_of_profiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 number_of_loaded_profiles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_number_of_loaded_profiles(&has_bits);
          number_of_loaded_profiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 number_of_open_profiles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_number_of_open_profiles(&has_bits);
          number_of_open_profiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ChromeUserPopulation.PageLoadToken page_load_tokens = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_load_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_aesb_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_aesb_enabled(&has_bits);
          is_aesb_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 aesb_last_update_time_windows_epoch_micros = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_aesb_last_update_time_windows_epoch_micros(&has_bits);
          aesb_last_update_time_windows_epoch_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeUserPopulation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ChromeUserPopulation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ChromeUserPopulation.UserPopulation user_population = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_user_population(), target);
  }

  // optional bool is_history_sync_enabled = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_history_sync_enabled(), target);
  }

  // repeated string finch_active_groups = 4;
  for (int i = 0, n = this->_internal_finch_active_groups_size(); i < n; i++) {
    const auto& s = this->_internal_finch_active_groups(i);
    target = stream->WriteString(4, s, target);
  }

  // optional .safe_browsing.ChromeUserPopulation.ProfileManagementStatus profile_management_status = 5 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_profile_management_status(), target);
  }

  // optional bool is_under_advanced_protection = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_under_advanced_protection(), target);
  }

  // optional bool is_incognito = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_incognito(), target);
  }

  // optional bool is_mbb_enabled = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_mbb_enabled(), target);
  }

  // optional string user_agent = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_agent(), target);
  }

  // optional int32 number_of_profiles = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_number_of_profiles(), target);
  }

  // optional int32 number_of_loaded_profiles = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_number_of_loaded_profiles(), target);
  }

  // optional int32 number_of_open_profiles = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_number_of_open_profiles(), target);
  }

  // repeated .safe_browsing.ChromeUserPopulation.PageLoadToken page_load_tokens = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_page_load_tokens_size()); i < n; i++) {
    const auto& repfield = this->_internal_page_load_tokens(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_aesb_enabled = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_aesb_enabled(), target);
  }

  // optional int64 aesb_last_update_time_windows_epoch_micros = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_aesb_last_update_time_windows_epoch_micros(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ChromeUserPopulation)
  return target;
}

size_t ChromeUserPopulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ChromeUserPopulation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string finch_active_groups = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(finch_active_groups_.size());
  for (int i = 0, n = finch_active_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      finch_active_groups_.Get(i));
  }

  // repeated .safe_browsing.ChromeUserPopulation.PageLoadToken page_load_tokens = 14;
  total_size += 1UL * this->_internal_page_load_tokens_size();
  for (const auto& msg : this->page_load_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_agent = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_agent());
    }

    // optional .safe_browsing.ChromeUserPopulation.UserPopulation user_population = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_user_population());
    }

    // optional .safe_browsing.ChromeUserPopulation.ProfileManagementStatus profile_management_status = 5 [default = UNKNOWN];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_profile_management_status());
    }

    // optional bool is_history_sync_enabled = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_under_advanced_protection = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_incognito = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_mbb_enabled = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 number_of_profiles = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_profiles());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 number_of_loaded_profiles = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_loaded_profiles());
    }

    // optional int32 number_of_open_profiles = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_open_profiles());
    }

    // optional int64 aesb_last_update_time_windows_epoch_micros = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_aesb_last_update_time_windows_epoch_micros());
    }

    // optional bool is_aesb_enabled = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeUserPopulation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeUserPopulation*>(
      &from));
}

void ChromeUserPopulation::MergeFrom(const ChromeUserPopulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ChromeUserPopulation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  finch_active_groups_.MergeFrom(from.finch_active_groups_);
  page_load_tokens_.MergeFrom(from.page_load_tokens_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_agent(from._internal_user_agent());
    }
    if (cached_has_bits & 0x00000002u) {
      user_population_ = from.user_population_;
    }
    if (cached_has_bits & 0x00000004u) {
      profile_management_status_ = from.profile_management_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_history_sync_enabled_ = from.is_history_sync_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_under_advanced_protection_ = from.is_under_advanced_protection_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_incognito_ = from.is_incognito_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_mbb_enabled_ = from.is_mbb_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      number_of_profiles_ = from.number_of_profiles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      number_of_loaded_profiles_ = from.number_of_loaded_profiles_;
    }
    if (cached_has_bits & 0x00000200u) {
      number_of_open_profiles_ = from.number_of_open_profiles_;
    }
    if (cached_has_bits & 0x00000400u) {
      aesb_last_update_time_windows_epoch_micros_ = from.aesb_last_update_time_windows_epoch_micros_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_aesb_enabled_ = from.is_aesb_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeUserPopulation::CopyFrom(const ChromeUserPopulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ChromeUserPopulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserPopulation::IsInitialized() const {
  return true;
}

void ChromeUserPopulation::InternalSwap(ChromeUserPopulation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  finch_active_groups_.InternalSwap(&other->finch_active_groups_);
  page_load_tokens_.InternalSwap(&other->page_load_tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_agent_, lhs_arena,
      &other->user_agent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeUserPopulation, is_aesb_enabled_)
      + sizeof(ChromeUserPopulation::is_aesb_enabled_)
      - PROTOBUF_FIELD_OFFSET(ChromeUserPopulation, user_population_)>(
          reinterpret_cast<char*>(&user_population_),
          reinterpret_cast<char*>(&other->user_population_));
}

std::string ChromeUserPopulation::GetTypeName() const {
  return "safe_browsing.ChromeUserPopulation";
}


// ===================================================================

class ClientPhishingRequest_Feature::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPhishingRequest_Feature>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ClientPhishingRequest_Feature::ClientPhishingRequest_Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientPhishingRequest.Feature)
}
ClientPhishingRequest_Feature::ClientPhishingRequest_Feature(const ClientPhishingRequest_Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientPhishingRequest.Feature)
}

inline void ClientPhishingRequest_Feature::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
}

ClientPhishingRequest_Feature::~ClientPhishingRequest_Feature() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientPhishingRequest.Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPhishingRequest_Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ClientPhishingRequest_Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPhishingRequest_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientPhishingRequest.Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientPhishingRequest_Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPhishingRequest_Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientPhishingRequest.Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required double value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientPhishingRequest.Feature)
  return target;
}

size_t ClientPhishingRequest_Feature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:safe_browsing.ClientPhishingRequest.Feature)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required double value = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ClientPhishingRequest_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientPhishingRequest.Feature)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required double value = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientPhishingRequest_Feature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientPhishingRequest_Feature*>(
      &from));
}

void ClientPhishingRequest_Feature::MergeFrom(const ClientPhishingRequest_Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientPhishingRequest.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientPhishingRequest_Feature::CopyFrom(const ClientPhishingRequest_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientPhishingRequest.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPhishingRequest_Feature::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientPhishingRequest_Feature::InternalSwap(ClientPhishingRequest_Feature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(value_, other->value_);
}

std::string ClientPhishingRequest_Feature::GetTypeName() const {
  return "safe_browsing.ClientPhishingRequest.Feature";
}


// ===================================================================

class ClientPhishingRequest_CategoryScore::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPhishingRequest_CategoryScore>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientPhishingRequest_CategoryScore::ClientPhishingRequest_CategoryScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientPhishingRequest.CategoryScore)
}
ClientPhishingRequest_CategoryScore::ClientPhishingRequest_CategoryScore(const ClientPhishingRequest_CategoryScore& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientPhishingRequest.CategoryScore)
}

inline void ClientPhishingRequest_CategoryScore::SharedCtor() {
label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
}

ClientPhishingRequest_CategoryScore::~ClientPhishingRequest_CategoryScore() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientPhishingRequest.CategoryScore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPhishingRequest_CategoryScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.Destroy();
}

void ClientPhishingRequest_CategoryScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPhishingRequest_CategoryScore::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientPhishingRequest.CategoryScore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientPhishingRequest_CategoryScore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPhishingRequest_CategoryScore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientPhishingRequest.CategoryScore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientPhishingRequest.CategoryScore)
  return target;
}

size_t ClientPhishingRequest_CategoryScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientPhishingRequest.CategoryScore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientPhishingRequest_CategoryScore::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientPhishingRequest_CategoryScore*>(
      &from));
}

void ClientPhishingRequest_CategoryScore::MergeFrom(const ClientPhishingRequest_CategoryScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientPhishingRequest.CategoryScore)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientPhishingRequest_CategoryScore::CopyFrom(const ClientPhishingRequest_CategoryScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientPhishingRequest.CategoryScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPhishingRequest_CategoryScore::IsInitialized() const {
  return true;
}

void ClientPhishingRequest_CategoryScore::InternalSwap(ClientPhishingRequest_CategoryScore* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  swap(value_, other->value_);
}

std::string ClientPhishingRequest_CategoryScore::GetTypeName() const {
  return "safe_browsing.ClientPhishingRequest.CategoryScore";
}


// ===================================================================

class ClientPhishingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPhishingRequest>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obsolete_hash_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_phishing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dom_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obsolete_referrer_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deprecated_model_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::safe_browsing::ChromeUserPopulation& population(const ClientPhishingRequest* msg);
  static void set_has_population(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_dom_match(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tflite_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_tflite_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::safe_browsing::VisualFeatures& visual_features(const ClientPhishingRequest* msg);
  static void set_has_visual_features(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000040) ^ 0x00000040) != 0;
  }
};

const ::safe_browsing::ChromeUserPopulation&
ClientPhishingRequest::_Internal::population(const ClientPhishingRequest* msg) {
  return *msg->population_;
}
const ::safe_browsing::VisualFeatures&
ClientPhishingRequest::_Internal::visual_features(const ClientPhishingRequest* msg) {
  return *msg->visual_features_;
}
ClientPhishingRequest::ClientPhishingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  feature_map_(arena),
  non_model_feature_map_(arena),
  shingle_hashes_(arena),
  referrer_chain_(arena),
  tflite_model_scores_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientPhishingRequest)
}
ClientPhishingRequest::ClientPhishingRequest(const ClientPhishingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      feature_map_(from.feature_map_),
      non_model_feature_map_(from.non_model_feature_map_),
      shingle_hashes_(from.shingle_hashes_),
      referrer_chain_(from.referrer_chain_),
      tflite_model_scores_(from.tflite_model_scores_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  obsolete_referrer_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    obsolete_referrer_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obsolete_referrer_url()) {
    obsolete_referrer_url_.Set(from._internal_obsolete_referrer_url(), 
      GetArenaForAllocation());
  }
  obsolete_hash_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    obsolete_hash_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obsolete_hash_prefix()) {
    obsolete_hash_prefix_.Set(from._internal_obsolete_hash_prefix(), 
      GetArenaForAllocation());
  }
  deprecated_model_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deprecated_model_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deprecated_model_filename()) {
    deprecated_model_filename_.Set(from._internal_deprecated_model_filename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_population()) {
    population_ = new ::safe_browsing::ChromeUserPopulation(*from.population_);
  } else {
    population_ = nullptr;
  }
  if (from._internal_has_visual_features()) {
    visual_features_ = new ::safe_browsing::VisualFeatures(*from.visual_features_);
  } else {
    visual_features_ = nullptr;
  }
  ::memcpy(&client_score_, &from.client_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&dom_model_version_) -
    reinterpret_cast<char*>(&client_score_)) + sizeof(dom_model_version_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientPhishingRequest)
}

inline void ClientPhishingRequest::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
obsolete_referrer_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  obsolete_referrer_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
obsolete_hash_prefix_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  obsolete_hash_prefix_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deprecated_model_filename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deprecated_model_filename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&population_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dom_model_version_) -
    reinterpret_cast<char*>(&population_)) + sizeof(dom_model_version_));
}

ClientPhishingRequest::~ClientPhishingRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientPhishingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPhishingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  obsolete_referrer_url_.Destroy();
  obsolete_hash_prefix_.Destroy();
  deprecated_model_filename_.Destroy();
  if (this != internal_default_instance()) delete population_;
  if (this != internal_default_instance()) delete visual_features_;
}

void ClientPhishingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPhishingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientPhishingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_map_.Clear();
  non_model_feature_map_.Clear();
  shingle_hashes_.Clear();
  referrer_chain_.Clear();
  tflite_model_scores_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      obsolete_referrer_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      obsolete_hash_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_model_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(population_ != nullptr);
      population_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(visual_features_ != nullptr);
      visual_features_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&client_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_version_) -
        reinterpret_cast<char*>(&client_score_)) + sizeof(model_version_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&is_phishing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dom_model_version_) -
        reinterpret_cast<char*>(&is_phishing_)) + sizeof(dom_model_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientPhishingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float client_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_client_score(&has_bits);
          client_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_phishing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_phishing(&has_bits);
          is_phishing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientPhishingRequest.Feature feature_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 model_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_model_version(&has_bits);
          model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientPhishingRequest.Feature non_model_feature_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_non_model_feature_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string OBSOLETE_referrer_url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_obsolete_referrer_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes OBSOLETE_hash_prefix = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_obsolete_hash_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 shingle_hashes = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shingle_hashes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_shingle_hashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string DEPRECATED_model_filename = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_deprecated_model_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ChromeUserPopulation population = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_population(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_dom_match = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_is_dom_match(&has_bits);
          is_dom_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_referrer_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 tflite_model_version = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tflite_model_version(&has_bits);
          tflite_model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientPhishingRequest.CategoryScore tflite_model_scores = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tflite_model_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_tflite_match = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_is_tflite_match(&has_bits);
          is_tflite_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.VisualFeatures visual_features = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_visual_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dom_model_version = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_dom_model_version(&has_bits);
          dom_model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPhishingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientPhishingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // required float client_score = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_client_score(), target);
  }

  // optional bool is_phishing = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_phishing(), target);
  }

  // repeated .safe_browsing.ClientPhishingRequest.Feature feature_map = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 model_version = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_model_version(), target);
  }

  // repeated .safe_browsing.ClientPhishingRequest.Feature non_model_feature_map = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_non_model_feature_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_non_model_feature_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string OBSOLETE_referrer_url = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_obsolete_referrer_url(), target);
  }

  // optional bytes OBSOLETE_hash_prefix = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_obsolete_hash_prefix(), target);
  }

  // repeated uint32 shingle_hashes = 12 [packed = true];
  {
    int byte_size = _shingle_hashes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_shingle_hashes(), byte_size, target);
    }
  }

  // optional string DEPRECATED_model_filename = 13 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_deprecated_model_filename(), target);
  }

  // optional .safe_browsing.ChromeUserPopulation population = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::population(this),
        _Internal::population(this).GetCachedSize(), target, stream);
  }

  // optional bool is_dom_match = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_is_dom_match(), target);
  }

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referrer_chain_size()); i < n; i++) {
    const auto& repfield = this->_internal_referrer_chain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 tflite_model_version = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_tflite_model_version(), target);
  }

  // repeated .safe_browsing.ClientPhishingRequest.CategoryScore tflite_model_scores = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tflite_model_scores_size()); i < n; i++) {
    const auto& repfield = this->_internal_tflite_model_scores(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_tflite_match = 25;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_is_tflite_match(), target);
  }

  // optional .safe_browsing.VisualFeatures visual_features = 26;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::visual_features(this),
        _Internal::visual_features(this).GetCachedSize(), target, stream);
  }

  // optional int32 dom_model_version = 27;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_dom_model_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientPhishingRequest)
  return target;
}

size_t ClientPhishingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientPhishingRequest)
  size_t total_size = 0;

  // required float client_score = 2;
  if (_internal_has_client_score()) {
    total_size += 1 + 4;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientPhishingRequest.Feature feature_map = 5;
  total_size += 1UL * this->_internal_feature_map_size();
  for (const auto& msg : this->feature_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.ClientPhishingRequest.Feature non_model_feature_map = 8;
  total_size += 1UL * this->_internal_non_model_feature_map_size();
  for (const auto& msg : this->non_model_feature_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 shingle_hashes = 12 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->shingle_hashes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _shingle_hashes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 22;
  total_size += 2UL * this->_internal_referrer_chain_size();
  for (const auto& msg : this->referrer_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.ClientPhishingRequest.CategoryScore tflite_model_scores = 24;
  total_size += 2UL * this->_internal_tflite_model_scores_size();
  for (const auto& msg : this->tflite_model_scores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string OBSOLETE_referrer_url = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obsolete_referrer_url());
    }

    // optional bytes OBSOLETE_hash_prefix = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_obsolete_hash_prefix());
    }

    // optional string DEPRECATED_model_filename = 13 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_model_filename());
    }

    // optional .safe_browsing.ChromeUserPopulation population = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *population_);
    }

    // optional .safe_browsing.VisualFeatures visual_features = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visual_features_);
    }

  }
  // optional int32 model_version = 6;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model_version());
  }

  if (cached_has_bits & 0x00001f00u) {
    // optional bool is_phishing = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_dom_match = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_tflite_match = 25;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional int32 tflite_model_version = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tflite_model_version());
    }

    // optional int32 dom_model_version = 27;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dom_model_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientPhishingRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientPhishingRequest*>(
      &from));
}

void ClientPhishingRequest::MergeFrom(const ClientPhishingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientPhishingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  feature_map_.MergeFrom(from.feature_map_);
  non_model_feature_map_.MergeFrom(from.non_model_feature_map_);
  shingle_hashes_.MergeFrom(from.shingle_hashes_);
  referrer_chain_.MergeFrom(from.referrer_chain_);
  tflite_model_scores_.MergeFrom(from.tflite_model_scores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_obsolete_referrer_url(from._internal_obsolete_referrer_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_obsolete_hash_prefix(from._internal_obsolete_hash_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_deprecated_model_filename(from._internal_deprecated_model_filename());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_population()->::safe_browsing::ChromeUserPopulation::MergeFrom(from._internal_population());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_visual_features()->::safe_browsing::VisualFeatures::MergeFrom(from._internal_visual_features());
    }
    if (cached_has_bits & 0x00000040u) {
      client_score_ = from.client_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      model_version_ = from.model_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_phishing_ = from.is_phishing_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_dom_match_ = from.is_dom_match_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_tflite_match_ = from.is_tflite_match_;
    }
    if (cached_has_bits & 0x00000800u) {
      tflite_model_version_ = from.tflite_model_version_;
    }
    if (cached_has_bits & 0x00001000u) {
      dom_model_version_ = from.dom_model_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientPhishingRequest::CopyFrom(const ClientPhishingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientPhishingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPhishingRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(feature_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(non_model_feature_map_))
    return false;
  return true;
}

void ClientPhishingRequest::InternalSwap(ClientPhishingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_map_.InternalSwap(&other->feature_map_);
  non_model_feature_map_.InternalSwap(&other->non_model_feature_map_);
  shingle_hashes_.InternalSwap(&other->shingle_hashes_);
  referrer_chain_.InternalSwap(&other->referrer_chain_);
  tflite_model_scores_.InternalSwap(&other->tflite_model_scores_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &obsolete_referrer_url_, lhs_arena,
      &other->obsolete_referrer_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &obsolete_hash_prefix_, lhs_arena,
      &other->obsolete_hash_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &deprecated_model_filename_, lhs_arena,
      &other->deprecated_model_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPhishingRequest, dom_model_version_)
      + sizeof(ClientPhishingRequest::dom_model_version_)
      - PROTOBUF_FIELD_OFFSET(ClientPhishingRequest, population_)>(
          reinterpret_cast<char*>(&population_),
          reinterpret_cast<char*>(&other->population_));
}

std::string ClientPhishingRequest::GetTypeName() const {
  return "safe_browsing.ClientPhishingRequest";
}


// ===================================================================

class ClientPhishingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPhishingResponse>()._has_bits_);
  static void set_has_phishy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientPhishingResponse::ClientPhishingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  obsolete_whitelist_expression_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientPhishingResponse)
}
ClientPhishingResponse::ClientPhishingResponse(const ClientPhishingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      obsolete_whitelist_expression_(from.obsolete_whitelist_expression_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  phishy_ = from.phishy_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientPhishingResponse)
}

inline void ClientPhishingResponse::SharedCtor() {
phishy_ = false;
}

ClientPhishingResponse::~ClientPhishingResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientPhishingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPhishingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientPhishingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPhishingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientPhishingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obsolete_whitelist_expression_.Clear();
  phishy_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientPhishingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool phishy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_phishy(&has_bits);
          phishy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string OBSOLETE_whitelist_expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_obsolete_whitelist_expression();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPhishingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientPhishingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool phishy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_phishy(), target);
  }

  // repeated string OBSOLETE_whitelist_expression = 2;
  for (int i = 0, n = this->_internal_obsolete_whitelist_expression_size(); i < n; i++) {
    const auto& s = this->_internal_obsolete_whitelist_expression(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientPhishingResponse)
  return target;
}

size_t ClientPhishingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientPhishingResponse)
  size_t total_size = 0;

  // required bool phishy = 1;
  if (_internal_has_phishy()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string OBSOLETE_whitelist_expression = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(obsolete_whitelist_expression_.size());
  for (int i = 0, n = obsolete_whitelist_expression_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      obsolete_whitelist_expression_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientPhishingResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientPhishingResponse*>(
      &from));
}

void ClientPhishingResponse::MergeFrom(const ClientPhishingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientPhishingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obsolete_whitelist_expression_.MergeFrom(from.obsolete_whitelist_expression_);
  if (from._internal_has_phishy()) {
    _internal_set_phishy(from._internal_phishy());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientPhishingResponse::CopyFrom(const ClientPhishingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientPhishingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPhishingResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientPhishingResponse::InternalSwap(ClientPhishingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsolete_whitelist_expression_.InternalSwap(&other->obsolete_whitelist_expression_);
  swap(phishy_, other->phishy_);
}

std::string ClientPhishingResponse::GetTypeName() const {
  return "safe_browsing.ClientPhishingResponse";
}


// ===================================================================

class LoginReputationClientRequest_Frame_Form::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReputationClientRequest_Frame_Form>()._has_bits_);
  static void set_has_action_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_password_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoginReputationClientRequest_Frame_Form::LoginReputationClientRequest_Frame_Form(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.LoginReputationClientRequest.Frame.Form)
}
LoginReputationClientRequest_Frame_Form::LoginReputationClientRequest_Frame_Form(const LoginReputationClientRequest_Frame_Form& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  action_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_url()) {
    action_url_.Set(from._internal_action_url(), 
      GetArenaForAllocation());
  }
  has_password_field_ = from.has_password_field_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.LoginReputationClientRequest.Frame.Form)
}

inline void LoginReputationClientRequest_Frame_Form::SharedCtor() {
action_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
has_password_field_ = false;
}

LoginReputationClientRequest_Frame_Form::~LoginReputationClientRequest_Frame_Form() {
  // @@protoc_insertion_point(destructor:safe_browsing.LoginReputationClientRequest.Frame.Form)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReputationClientRequest_Frame_Form::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_url_.Destroy();
}

void LoginReputationClientRequest_Frame_Form::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReputationClientRequest_Frame_Form::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.LoginReputationClientRequest.Frame.Form)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_url_.ClearNonDefaultToEmpty();
  }
  has_password_field_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginReputationClientRequest_Frame_Form::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string action_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_password_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_password_field(&has_bits);
          has_password_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReputationClientRequest_Frame_Form::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.LoginReputationClientRequest.Frame.Form)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string action_url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action_url(), target);
  }

  // optional bool has_password_field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_password_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.LoginReputationClientRequest.Frame.Form)
  return target;
}

size_t LoginReputationClientRequest_Frame_Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.LoginReputationClientRequest.Frame.Form)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string action_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_url());
    }

    // optional bool has_password_field = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReputationClientRequest_Frame_Form::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginReputationClientRequest_Frame_Form*>(
      &from));
}

void LoginReputationClientRequest_Frame_Form::MergeFrom(const LoginReputationClientRequest_Frame_Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.LoginReputationClientRequest.Frame.Form)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action_url(from._internal_action_url());
    }
    if (cached_has_bits & 0x00000002u) {
      has_password_field_ = from.has_password_field_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginReputationClientRequest_Frame_Form::CopyFrom(const LoginReputationClientRequest_Frame_Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.LoginReputationClientRequest.Frame.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReputationClientRequest_Frame_Form::IsInitialized() const {
  return true;
}

void LoginReputationClientRequest_Frame_Form::InternalSwap(LoginReputationClientRequest_Frame_Form* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &action_url_, lhs_arena,
      &other->action_url_, rhs_arena
  );
  swap(has_password_field_, other->has_password_field_);
}

std::string LoginReputationClientRequest_Frame_Form::GetTypeName() const {
  return "safe_browsing.LoginReputationClientRequest.Frame.Form";
}


// ===================================================================

class LoginReputationClientRequest_Frame::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReputationClientRequest_Frame>()._has_bits_);
  static void set_has_frame_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parent_frame_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_password_field(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::safe_browsing::ReferrerChainOptions& referrer_chain_options(const LoginReputationClientRequest_Frame* msg);
  static void set_has_referrer_chain_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::ReferrerChainOptions&
LoginReputationClientRequest_Frame::_Internal::referrer_chain_options(const LoginReputationClientRequest_Frame* msg) {
  return *msg->referrer_chain_options_;
}
LoginReputationClientRequest_Frame::LoginReputationClientRequest_Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  referrer_chain_(arena),
  forms_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.LoginReputationClientRequest.Frame)
}
LoginReputationClientRequest_Frame::LoginReputationClientRequest_Frame(const LoginReputationClientRequest_Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      referrer_chain_(from.referrer_chain_),
      forms_(from.forms_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_referrer_chain_options()) {
    referrer_chain_options_ = new ::safe_browsing::ReferrerChainOptions(*from.referrer_chain_options_);
  } else {
    referrer_chain_options_ = nullptr;
  }
  ::memcpy(&frame_index_, &from.frame_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_password_field_) -
    reinterpret_cast<char*>(&frame_index_)) + sizeof(has_password_field_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.LoginReputationClientRequest.Frame)
}

inline void LoginReputationClientRequest_Frame::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&referrer_chain_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_password_field_) -
    reinterpret_cast<char*>(&referrer_chain_options_)) + sizeof(has_password_field_));
}

LoginReputationClientRequest_Frame::~LoginReputationClientRequest_Frame() {
  // @@protoc_insertion_point(destructor:safe_browsing.LoginReputationClientRequest.Frame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReputationClientRequest_Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  if (this != internal_default_instance()) delete referrer_chain_options_;
}

void LoginReputationClientRequest_Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReputationClientRequest_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.LoginReputationClientRequest.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  referrer_chain_.Clear();
  forms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(referrer_chain_options_ != nullptr);
      referrer_chain_options_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&frame_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_password_field_) -
        reinterpret_cast<char*>(&frame_index_)) + sizeof(has_password_field_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginReputationClientRequest_Frame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 frame_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_index(&has_bits);
          frame_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 parent_frame_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_parent_frame_index(&has_bits);
          parent_frame_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_password_field = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_has_password_field(&has_bits);
          has_password_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referrer_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.LoginReputationClientRequest.Frame.Form forms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_referrer_chain_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReputationClientRequest_Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.LoginReputationClientRequest.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 frame_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_index(), target);
  }

  // optional int32 parent_frame_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_parent_frame_index(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // optional bool has_password_field = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_password_field(), target);
  }

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referrer_chain_size()); i < n; i++) {
    const auto& repfield = this->_internal_referrer_chain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.LoginReputationClientRequest.Frame.Form forms = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_forms_size()); i < n; i++) {
    const auto& repfield = this->_internal_forms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::referrer_chain_options(this),
        _Internal::referrer_chain_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.LoginReputationClientRequest.Frame)
  return target;
}

size_t LoginReputationClientRequest_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.LoginReputationClientRequest.Frame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 5;
  total_size += 1UL * this->_internal_referrer_chain_size();
  for (const auto& msg : this->referrer_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.LoginReputationClientRequest.Frame.Form forms = 6;
  total_size += 1UL * this->_internal_forms_size();
  for (const auto& msg : this->forms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *referrer_chain_options_);
    }

    // optional int32 frame_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frame_index());
    }

    // optional int32 parent_frame_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent_frame_index());
    }

    // optional bool has_password_field = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReputationClientRequest_Frame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginReputationClientRequest_Frame*>(
      &from));
}

void LoginReputationClientRequest_Frame::MergeFrom(const LoginReputationClientRequest_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.LoginReputationClientRequest.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  referrer_chain_.MergeFrom(from.referrer_chain_);
  forms_.MergeFrom(from.forms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_referrer_chain_options()->::safe_browsing::ReferrerChainOptions::MergeFrom(from._internal_referrer_chain_options());
    }
    if (cached_has_bits & 0x00000004u) {
      frame_index_ = from.frame_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      parent_frame_index_ = from.parent_frame_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_password_field_ = from.has_password_field_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginReputationClientRequest_Frame::CopyFrom(const LoginReputationClientRequest_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.LoginReputationClientRequest.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReputationClientRequest_Frame::IsInitialized() const {
  return true;
}

void LoginReputationClientRequest_Frame::InternalSwap(LoginReputationClientRequest_Frame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  referrer_chain_.InternalSwap(&other->referrer_chain_);
  forms_.InternalSwap(&other->forms_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest_Frame, has_password_field_)
      + sizeof(LoginReputationClientRequest_Frame::has_password_field_)
      - PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest_Frame, referrer_chain_options_)>(
          reinterpret_cast<char*>(&referrer_chain_options_),
          reinterpret_cast<char*>(&other->referrer_chain_options_));
}

std::string LoginReputationClientRequest_Frame::GetTypeName() const {
  return "safe_browsing.LoginReputationClientRequest.Frame";
}


// ===================================================================

class LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType>()._has_bits_);
  static void set_has_is_account_syncing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
}
LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&is_account_syncing_, &from.is_account_syncing_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_type_) -
    reinterpret_cast<char*>(&is_account_syncing_)) + sizeof(account_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
}

inline void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_account_syncing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_type_) -
    reinterpret_cast<char*>(&is_account_syncing_)) + sizeof(account_type_));
}

LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::~LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType() {
  // @@protoc_insertion_point(destructor:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&is_account_syncing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_type_) -
        reinterpret_cast<char*>(&is_account_syncing_)) + sizeof(account_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_account_syncing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_account_syncing(&has_bits);
          is_account_syncing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.AccountType account_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType_IsValid(val))) {
            _internal_set_account_type(static_cast<::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType_AccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_account_syncing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_account_syncing(), target);
  }

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.AccountType account_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_account_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
  return target;
}

size_t LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_account_syncing = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType.AccountType account_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_account_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType*>(
      &from));
}

void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::MergeFrom(const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_account_syncing_ = from.is_account_syncing_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_type_ = from.account_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::CopyFrom(const LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::IsInitialized() const {
  return true;
}

void LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::InternalSwap(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType, account_type_)
      + sizeof(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::account_type_)
      - PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType, is_account_syncing_)>(
          reinterpret_cast<char*>(&is_account_syncing_),
          reinterpret_cast<char*>(&other->is_account_syncing_));
}

std::string LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::GetTypeName() const {
  return "safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType";
}


// ===================================================================

class LoginReputationClientRequest_PasswordReuseEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReputationClientRequest_PasswordReuseEvent>()._has_bits_);
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sync_account_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reused_password_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType& reused_password_account_type(const LoginReputationClientRequest_PasswordReuseEvent* msg);
  static void set_has_reused_password_account_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType&
LoginReputationClientRequest_PasswordReuseEvent::_Internal::reused_password_account_type(const LoginReputationClientRequest_PasswordReuseEvent* msg) {
  return *msg->reused_password_account_type_;
}
LoginReputationClientRequest_PasswordReuseEvent::LoginReputationClientRequest_PasswordReuseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  domains_matching_password_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
}
LoginReputationClientRequest_PasswordReuseEvent::LoginReputationClientRequest_PasswordReuseEvent(const LoginReputationClientRequest_PasswordReuseEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      domains_matching_password_(from.domains_matching_password_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_reused_password_account_type()) {
    reused_password_account_type_ = new ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType(*from.reused_password_account_type_);
  } else {
    reused_password_account_type_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reused_password_type_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(reused_password_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
}

inline void LoginReputationClientRequest_PasswordReuseEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reused_password_account_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reused_password_type_) -
    reinterpret_cast<char*>(&reused_password_account_type_)) + sizeof(reused_password_type_));
}

LoginReputationClientRequest_PasswordReuseEvent::~LoginReputationClientRequest_PasswordReuseEvent() {
  // @@protoc_insertion_point(destructor:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReputationClientRequest_PasswordReuseEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reused_password_account_type_;
}

void LoginReputationClientRequest_PasswordReuseEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReputationClientRequest_PasswordReuseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_matching_password_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reused_password_account_type_ != nullptr);
    reused_password_account_type_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&frame_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reused_password_type_) -
        reinterpret_cast<char*>(&frame_id_)) + sizeof(reused_password_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginReputationClientRequest_PasswordReuseEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string domains_matching_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_domains_matching_password();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.SyncAccountType sync_account_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType_IsValid(val))) {
            _internal_set_sync_account_type(static_cast<::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_SyncAccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordType reused_password_type = 5 [default = REUSED_PASSWORD_TYPE_UNKNOWN];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType_IsValid(val))) {
            _internal_set_reused_password_type(static_cast<::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType reused_password_account_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reused_password_account_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReputationClientRequest_PasswordReuseEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string domains_matching_password = 1;
  for (int i = 0, n = this->_internal_domains_matching_password_size(); i < n; i++) {
    const auto& s = this->_internal_domains_matching_password(i);
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_frame_id(), target);
  }

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.SyncAccountType sync_account_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sync_account_type(), target);
  }

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordType reused_password_type = 5 [default = REUSED_PASSWORD_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reused_password_type(), target);
  }

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType reused_password_account_type = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::reused_password_account_type(this),
        _Internal::reused_password_account_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
  return target;
}

size_t LoginReputationClientRequest_PasswordReuseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string domains_matching_password = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(domains_matching_password_.size());
  for (int i = 0, n = domains_matching_password_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      domains_matching_password_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordAccountType reused_password_account_type = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reused_password_account_type_);
    }

    // optional int32 frame_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frame_id());
    }

    // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.SyncAccountType sync_account_type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sync_account_type());
    }

    // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent.ReusedPasswordType reused_password_type = 5 [default = REUSED_PASSWORD_TYPE_UNKNOWN];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reused_password_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReputationClientRequest_PasswordReuseEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginReputationClientRequest_PasswordReuseEvent*>(
      &from));
}

void LoginReputationClientRequest_PasswordReuseEvent::MergeFrom(const LoginReputationClientRequest_PasswordReuseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  domains_matching_password_.MergeFrom(from.domains_matching_password_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_reused_password_account_type()->::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType::MergeFrom(from._internal_reused_password_account_type());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_ = from.frame_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_account_type_ = from.sync_account_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      reused_password_type_ = from.reused_password_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginReputationClientRequest_PasswordReuseEvent::CopyFrom(const LoginReputationClientRequest_PasswordReuseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.LoginReputationClientRequest.PasswordReuseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReputationClientRequest_PasswordReuseEvent::IsInitialized() const {
  return true;
}

void LoginReputationClientRequest_PasswordReuseEvent::InternalSwap(LoginReputationClientRequest_PasswordReuseEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  domains_matching_password_.InternalSwap(&other->domains_matching_password_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest_PasswordReuseEvent, reused_password_type_)
      + sizeof(LoginReputationClientRequest_PasswordReuseEvent::reused_password_type_)
      - PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest_PasswordReuseEvent, reused_password_account_type_)>(
          reinterpret_cast<char*>(&reused_password_account_type_),
          reinterpret_cast<char*>(&other->reused_password_account_type_));
}

std::string LoginReputationClientRequest_PasswordReuseEvent::GetTypeName() const {
  return "safe_browsing.LoginReputationClientRequest.PasswordReuseEvent";
}


// ===================================================================

class LoginReputationClientRequest_UrlDisplayExperiment::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReputationClientRequest_UrlDisplayExperiment>()._has_bits_);
  static void set_has_delayed_warnings_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delayed_warnings_mouse_clicks_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reveal_on_hover(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hide_on_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_elide_to_registrable_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_simplified_url_display_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LoginReputationClientRequest_UrlDisplayExperiment::LoginReputationClientRequest_UrlDisplayExperiment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
}
LoginReputationClientRequest_UrlDisplayExperiment::LoginReputationClientRequest_UrlDisplayExperiment(const LoginReputationClientRequest_UrlDisplayExperiment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&delayed_warnings_enabled_, &from.delayed_warnings_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&simplified_url_display_enabled_) -
    reinterpret_cast<char*>(&delayed_warnings_enabled_)) + sizeof(simplified_url_display_enabled_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
}

inline void LoginReputationClientRequest_UrlDisplayExperiment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&delayed_warnings_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&simplified_url_display_enabled_) -
    reinterpret_cast<char*>(&delayed_warnings_enabled_)) + sizeof(simplified_url_display_enabled_));
}

LoginReputationClientRequest_UrlDisplayExperiment::~LoginReputationClientRequest_UrlDisplayExperiment() {
  // @@protoc_insertion_point(destructor:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReputationClientRequest_UrlDisplayExperiment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginReputationClientRequest_UrlDisplayExperiment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReputationClientRequest_UrlDisplayExperiment::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&delayed_warnings_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&simplified_url_display_enabled_) -
        reinterpret_cast<char*>(&delayed_warnings_enabled_)) + sizeof(simplified_url_display_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginReputationClientRequest_UrlDisplayExperiment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool delayed_warnings_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_delayed_warnings_enabled(&has_bits);
          delayed_warnings_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool delayed_warnings_mouse_clicks_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_delayed_warnings_mouse_clicks_enabled(&has_bits);
          delayed_warnings_mouse_clicks_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reveal_on_hover = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reveal_on_hover(&has_bits);
          reveal_on_hover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_on_interaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hide_on_interaction(&has_bits);
          hide_on_interaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool elide_to_registrable_domain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_elide_to_registrable_domain(&has_bits);
          elide_to_registrable_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool simplified_url_display_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_simplified_url_display_enabled(&has_bits);
          simplified_url_display_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReputationClientRequest_UrlDisplayExperiment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool delayed_warnings_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_delayed_warnings_enabled(), target);
  }

  // optional bool delayed_warnings_mouse_clicks_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_delayed_warnings_mouse_clicks_enabled(), target);
  }

  // optional bool reveal_on_hover = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_reveal_on_hover(), target);
  }

  // optional bool hide_on_interaction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_hide_on_interaction(), target);
  }

  // optional bool elide_to_registrable_domain = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_elide_to_registrable_domain(), target);
  }

  // optional bool simplified_url_display_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_simplified_url_display_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
  return target;
}

size_t LoginReputationClientRequest_UrlDisplayExperiment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool delayed_warnings_enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool delayed_warnings_mouse_clicks_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool reveal_on_hover = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool hide_on_interaction = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool elide_to_registrable_domain = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool simplified_url_display_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReputationClientRequest_UrlDisplayExperiment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginReputationClientRequest_UrlDisplayExperiment*>(
      &from));
}

void LoginReputationClientRequest_UrlDisplayExperiment::MergeFrom(const LoginReputationClientRequest_UrlDisplayExperiment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      delayed_warnings_enabled_ = from.delayed_warnings_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      delayed_warnings_mouse_clicks_enabled_ = from.delayed_warnings_mouse_clicks_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      reveal_on_hover_ = from.reveal_on_hover_;
    }
    if (cached_has_bits & 0x00000008u) {
      hide_on_interaction_ = from.hide_on_interaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      elide_to_registrable_domain_ = from.elide_to_registrable_domain_;
    }
    if (cached_has_bits & 0x00000020u) {
      simplified_url_display_enabled_ = from.simplified_url_display_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginReputationClientRequest_UrlDisplayExperiment::CopyFrom(const LoginReputationClientRequest_UrlDisplayExperiment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReputationClientRequest_UrlDisplayExperiment::IsInitialized() const {
  return true;
}

void LoginReputationClientRequest_UrlDisplayExperiment::InternalSwap(LoginReputationClientRequest_UrlDisplayExperiment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest_UrlDisplayExperiment, simplified_url_display_enabled_)
      + sizeof(LoginReputationClientRequest_UrlDisplayExperiment::simplified_url_display_enabled_)
      - PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest_UrlDisplayExperiment, delayed_warnings_enabled_)>(
          reinterpret_cast<char*>(&delayed_warnings_enabled_),
          reinterpret_cast<char*>(&other->delayed_warnings_enabled_));
}

std::string LoginReputationClientRequest_UrlDisplayExperiment::GetTypeName() const {
  return "safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment";
}


// ===================================================================

class LoginReputationClientRequest_ReferringAppInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReputationClientRequest_ReferringAppInfo>()._has_bits_);
  static void set_has_referring_app_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referring_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LoginReputationClientRequest_ReferringAppInfo::LoginReputationClientRequest_ReferringAppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
}
LoginReputationClientRequest_ReferringAppInfo::LoginReputationClientRequest_ReferringAppInfo(const LoginReputationClientRequest_ReferringAppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referring_app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referring_app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referring_app_name()) {
    referring_app_name_.Set(from._internal_referring_app_name(), 
      GetArenaForAllocation());
  }
  referring_app_source_ = from.referring_app_source_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
}

inline void LoginReputationClientRequest_ReferringAppInfo::SharedCtor() {
referring_app_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referring_app_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
referring_app_source_ = 0;
}

LoginReputationClientRequest_ReferringAppInfo::~LoginReputationClientRequest_ReferringAppInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReputationClientRequest_ReferringAppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referring_app_name_.Destroy();
}

void LoginReputationClientRequest_ReferringAppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReputationClientRequest_ReferringAppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    referring_app_name_.ClearNonDefaultToEmpty();
  }
  referring_app_source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginReputationClientRequest_ReferringAppInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo.ReferringAppSource referring_app_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource_IsValid(val))) {
            _internal_set_referring_app_source(static_cast<::safe_browsing::LoginReputationClientRequest_ReferringAppInfo_ReferringAppSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string referring_app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_referring_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReputationClientRequest_ReferringAppInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo.ReferringAppSource referring_app_source = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_referring_app_source(), target);
  }

  // optional string referring_app_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_referring_app_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
  return target;
}

size_t LoginReputationClientRequest_ReferringAppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string referring_app_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referring_app_name());
    }

    // optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo.ReferringAppSource referring_app_source = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_referring_app_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReputationClientRequest_ReferringAppInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginReputationClientRequest_ReferringAppInfo*>(
      &from));
}

void LoginReputationClientRequest_ReferringAppInfo::MergeFrom(const LoginReputationClientRequest_ReferringAppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referring_app_name(from._internal_referring_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      referring_app_source_ = from.referring_app_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginReputationClientRequest_ReferringAppInfo::CopyFrom(const LoginReputationClientRequest_ReferringAppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.LoginReputationClientRequest.ReferringAppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReputationClientRequest_ReferringAppInfo::IsInitialized() const {
  return true;
}

void LoginReputationClientRequest_ReferringAppInfo::InternalSwap(LoginReputationClientRequest_ReferringAppInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &referring_app_name_, lhs_arena,
      &other->referring_app_name_, rhs_arena
  );
  swap(referring_app_source_, other->referring_app_source_);
}

std::string LoginReputationClientRequest_ReferringAppInfo::GetTypeName() const {
  return "safe_browsing.LoginReputationClientRequest.ReferringAppInfo";
}


// ===================================================================

class LoginReputationClientRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReputationClientRequest>()._has_bits_);
  static void set_has_page_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trigger_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent& password_reuse_event(const LoginReputationClientRequest* msg);
  static void set_has_password_reuse_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stored_verdict_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::safe_browsing::ChromeUserPopulation& population(const LoginReputationClientRequest* msg);
  static void set_has_population(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clicked_through_interstitial(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content_area_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_content_area_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::safe_browsing::VisualFeatures& visual_features(const LoginReputationClientRequest* msg);
  static void set_has_visual_features(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::safe_browsing::DomFeatures& dom_features(const LoginReputationClientRequest* msg);
  static void set_has_dom_features(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_report_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment& url_display_experiment(const LoginReputationClientRequest* msg);
  static void set_has_url_display_experiment(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo& referring_app_info(const LoginReputationClientRequest* msg);
  static void set_has_referring_app_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent&
LoginReputationClientRequest::_Internal::password_reuse_event(const LoginReputationClientRequest* msg) {
  return *msg->password_reuse_event_;
}
const ::safe_browsing::ChromeUserPopulation&
LoginReputationClientRequest::_Internal::population(const LoginReputationClientRequest* msg) {
  return *msg->population_;
}
const ::safe_browsing::VisualFeatures&
LoginReputationClientRequest::_Internal::visual_features(const LoginReputationClientRequest* msg) {
  return *msg->visual_features_;
}
const ::safe_browsing::DomFeatures&
LoginReputationClientRequest::_Internal::dom_features(const LoginReputationClientRequest* msg) {
  return *msg->dom_features_;
}
const ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment&
LoginReputationClientRequest::_Internal::url_display_experiment(const LoginReputationClientRequest* msg) {
  return *msg->url_display_experiment_;
}
const ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo&
LoginReputationClientRequest::_Internal::referring_app_info(const LoginReputationClientRequest* msg) {
  return *msg->referring_app_info_;
}
LoginReputationClientRequest::LoginReputationClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  frames_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.LoginReputationClientRequest)
}
LoginReputationClientRequest::LoginReputationClientRequest(const LoginReputationClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  page_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_page_url()) {
    page_url_.Set(from._internal_page_url(), 
      GetArenaForAllocation());
  }
  content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content_type()) {
    content_type_.Set(from._internal_content_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_password_reuse_event()) {
    password_reuse_event_ = new ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent(*from.password_reuse_event_);
  } else {
    password_reuse_event_ = nullptr;
  }
  if (from._internal_has_population()) {
    population_ = new ::safe_browsing::ChromeUserPopulation(*from.population_);
  } else {
    population_ = nullptr;
  }
  if (from._internal_has_visual_features()) {
    visual_features_ = new ::safe_browsing::VisualFeatures(*from.visual_features_);
  } else {
    visual_features_ = nullptr;
  }
  if (from._internal_has_dom_features()) {
    dom_features_ = new ::safe_browsing::DomFeatures(*from.dom_features_);
  } else {
    dom_features_ = nullptr;
  }
  if (from._internal_has_url_display_experiment()) {
    url_display_experiment_ = new ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment(*from.url_display_experiment_);
  } else {
    url_display_experiment_ = nullptr;
  }
  if (from._internal_has_referring_app_info()) {
    referring_app_info_ = new ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo(*from.referring_app_info_);
  } else {
    referring_app_info_ = nullptr;
  }
  ::memcpy(&trigger_type_, &from.trigger_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_type_) -
    reinterpret_cast<char*>(&trigger_type_)) + sizeof(report_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.LoginReputationClientRequest)
}

inline void LoginReputationClientRequest::SharedCtor() {
page_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&password_reuse_event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&report_type_) -
    reinterpret_cast<char*>(&password_reuse_event_)) + sizeof(report_type_));
}

LoginReputationClientRequest::~LoginReputationClientRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.LoginReputationClientRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReputationClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_url_.Destroy();
  content_type_.Destroy();
  if (this != internal_default_instance()) delete password_reuse_event_;
  if (this != internal_default_instance()) delete population_;
  if (this != internal_default_instance()) delete visual_features_;
  if (this != internal_default_instance()) delete dom_features_;
  if (this != internal_default_instance()) delete url_display_experiment_;
  if (this != internal_default_instance()) delete referring_app_info_;
}

void LoginReputationClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReputationClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.LoginReputationClientRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      page_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      content_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(password_reuse_event_ != nullptr);
      password_reuse_event_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(population_ != nullptr);
      population_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(visual_features_ != nullptr);
      visual_features_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dom_features_ != nullptr);
      dom_features_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(url_display_experiment_ != nullptr);
      url_display_experiment_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(referring_app_info_ != nullptr);
      referring_app_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&trigger_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_type_) -
        reinterpret_cast<char*>(&trigger_type_)) + sizeof(report_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginReputationClientRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string page_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_page_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.TriggerType trigger_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::LoginReputationClientRequest_TriggerType_IsValid(val))) {
            _internal_set_trigger_type(static_cast<::safe_browsing::LoginReputationClientRequest_TriggerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.LoginReputationClientRequest.Frame frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent password_reuse_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_password_reuse_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stored_verdict_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_stored_verdict_cnt(&has_bits);
          stored_verdict_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ChromeUserPopulation population = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_population(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clicked_through_interstitial = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_clicked_through_interstitial(&has_bits);
          clicked_through_interstitial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string content_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 content_area_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_content_area_height(&has_bits);
          content_area_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 content_area_width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_content_area_width(&has_bits);
          content_area_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.VisualFeatures visual_features = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_visual_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.DomFeatures dom_features = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dom_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.ReportType report_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::LoginReputationClientRequest_ReportType_IsValid(val))) {
            _internal_set_report_type(static_cast<::safe_browsing::LoginReputationClientRequest_ReportType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment url_display_experiment = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_url_display_experiment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo referring_app_info = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_referring_app_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReputationClientRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.LoginReputationClientRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string page_url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_page_url(), target);
  }

  // optional .safe_browsing.LoginReputationClientRequest.TriggerType trigger_type = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_trigger_type(), target);
  }

  // repeated .safe_browsing.LoginReputationClientRequest.Frame frames = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent password_reuse_event = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::password_reuse_event(this),
        _Internal::password_reuse_event(this).GetCachedSize(), target, stream);
  }

  // optional int32 stored_verdict_cnt = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_stored_verdict_cnt(), target);
  }

  // optional .safe_browsing.ChromeUserPopulation population = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::population(this),
        _Internal::population(this).GetCachedSize(), target, stream);
  }

  // optional bool clicked_through_interstitial = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_clicked_through_interstitial(), target);
  }

  // optional string content_type = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_content_type(), target);
  }

  // optional int32 content_area_height = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_content_area_height(), target);
  }

  // optional int32 content_area_width = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_content_area_width(), target);
  }

  // optional .safe_browsing.VisualFeatures visual_features = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::visual_features(this),
        _Internal::visual_features(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.DomFeatures dom_features = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::dom_features(this),
        _Internal::dom_features(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.LoginReputationClientRequest.ReportType report_type = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_report_type(), target);
  }

  // optional .safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment url_display_experiment = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::url_display_experiment(this),
        _Internal::url_display_experiment(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo referring_app_info = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::referring_app_info(this),
        _Internal::referring_app_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.LoginReputationClientRequest)
  return target;
}

size_t LoginReputationClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.LoginReputationClientRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.LoginReputationClientRequest.Frame frames = 3;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string page_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_url());
    }

    // optional string content_type = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content_type());
    }

    // optional .safe_browsing.LoginReputationClientRequest.PasswordReuseEvent password_reuse_event = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *password_reuse_event_);
    }

    // optional .safe_browsing.ChromeUserPopulation population = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *population_);
    }

    // optional .safe_browsing.VisualFeatures visual_features = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visual_features_);
    }

    // optional .safe_browsing.DomFeatures dom_features = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dom_features_);
    }

    // optional .safe_browsing.LoginReputationClientRequest.UrlDisplayExperiment url_display_experiment = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *url_display_experiment_);
    }

    // optional .safe_browsing.LoginReputationClientRequest.ReferringAppInfo referring_app_info = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *referring_app_info_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .safe_browsing.LoginReputationClientRequest.TriggerType trigger_type = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_trigger_type());
    }

    // optional int32 stored_verdict_cnt = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stored_verdict_cnt());
    }

    // optional bool clicked_through_interstitial = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 content_area_height = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_content_area_height());
    }

    // optional int32 content_area_width = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_content_area_width());
    }

    // optional .safe_browsing.LoginReputationClientRequest.ReportType report_type = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_report_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReputationClientRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginReputationClientRequest*>(
      &from));
}

void LoginReputationClientRequest::MergeFrom(const LoginReputationClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.LoginReputationClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_page_url(from._internal_page_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_content_type(from._internal_content_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_password_reuse_event()->::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent::MergeFrom(from._internal_password_reuse_event());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_population()->::safe_browsing::ChromeUserPopulation::MergeFrom(from._internal_population());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_visual_features()->::safe_browsing::VisualFeatures::MergeFrom(from._internal_visual_features());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dom_features()->::safe_browsing::DomFeatures::MergeFrom(from._internal_dom_features());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_url_display_experiment()->::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment::MergeFrom(from._internal_url_display_experiment());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_referring_app_info()->::safe_browsing::LoginReputationClientRequest_ReferringAppInfo::MergeFrom(from._internal_referring_app_info());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      trigger_type_ = from.trigger_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      stored_verdict_cnt_ = from.stored_verdict_cnt_;
    }
    if (cached_has_bits & 0x00000400u) {
      clicked_through_interstitial_ = from.clicked_through_interstitial_;
    }
    if (cached_has_bits & 0x00000800u) {
      content_area_height_ = from.content_area_height_;
    }
    if (cached_has_bits & 0x00001000u) {
      content_area_width_ = from.content_area_width_;
    }
    if (cached_has_bits & 0x00002000u) {
      report_type_ = from.report_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginReputationClientRequest::CopyFrom(const LoginReputationClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.LoginReputationClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReputationClientRequest::IsInitialized() const {
  return true;
}

void LoginReputationClientRequest::InternalSwap(LoginReputationClientRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  frames_.InternalSwap(&other->frames_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_url_, lhs_arena,
      &other->page_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_type_, lhs_arena,
      &other->content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest, report_type_)
      + sizeof(LoginReputationClientRequest::report_type_)
      - PROTOBUF_FIELD_OFFSET(LoginReputationClientRequest, password_reuse_event_)>(
          reinterpret_cast<char*>(&password_reuse_event_),
          reinterpret_cast<char*>(&other->password_reuse_event_));
}

std::string LoginReputationClientRequest::GetTypeName() const {
  return "safe_browsing.LoginReputationClientRequest";
}


// ===================================================================

class LoginReputationClientResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReputationClientResponse>()._has_bits_);
  static void set_has_verdict_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cache_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deprecated_cache_expression_exact_match(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_verdict_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoginReputationClientResponse::LoginReputationClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.LoginReputationClientResponse)
}
LoginReputationClientResponse::LoginReputationClientResponse(const LoginReputationClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  cache_expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cache_expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cache_expression()) {
    cache_expression_.Set(from._internal_cache_expression(), 
      GetArenaForAllocation());
  }
  verdict_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verdict_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verdict_token()) {
    verdict_token_.Set(from._internal_verdict_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cache_duration_sec_, &from.cache_duration_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_cache_expression_exact_match_) -
    reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(deprecated_cache_expression_exact_match_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.LoginReputationClientResponse)
}

inline void LoginReputationClientResponse::SharedCtor() {
cache_expression_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cache_expression_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verdict_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verdict_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cache_duration_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_cache_expression_exact_match_) -
    reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(deprecated_cache_expression_exact_match_));
}

LoginReputationClientResponse::~LoginReputationClientResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.LoginReputationClientResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReputationClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cache_expression_.Destroy();
  verdict_token_.Destroy();
}

void LoginReputationClientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReputationClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.LoginReputationClientResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cache_expression_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      verdict_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&cache_duration_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_cache_expression_exact_match_) -
        reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(deprecated_cache_expression_exact_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoginReputationClientResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.LoginReputationClientResponse.VerdictType verdict_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::LoginReputationClientResponse_VerdictType_IsValid(val))) {
            _internal_set_verdict_type(static_cast<::safe_browsing::LoginReputationClientResponse_VerdictType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 cache_duration_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cache_duration_sec(&has_bits);
          cache_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cache_expression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cache_expression();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool DEPRECATED_cache_expression_exact_match = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deprecated_cache_expression_exact_match(&has_bits);
          deprecated_cache_expression_exact_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes verdict_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verdict_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReputationClientResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.LoginReputationClientResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.LoginReputationClientResponse.VerdictType verdict_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_verdict_type(), target);
  }

  // optional int64 cache_duration_sec = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_cache_duration_sec(), target);
  }

  // optional string cache_expression = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cache_expression(), target);
  }

  // optional bool DEPRECATED_cache_expression_exact_match = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_deprecated_cache_expression_exact_match(), target);
  }

  // optional bytes verdict_token = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_verdict_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.LoginReputationClientResponse)
  return target;
}

size_t LoginReputationClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.LoginReputationClientResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cache_expression = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_expression());
    }

    // optional bytes verdict_token = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_verdict_token());
    }

    // optional int64 cache_duration_sec = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cache_duration_sec());
    }

    // optional .safe_browsing.LoginReputationClientResponse.VerdictType verdict_type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_verdict_type());
    }

    // optional bool DEPRECATED_cache_expression_exact_match = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReputationClientResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoginReputationClientResponse*>(
      &from));
}

void LoginReputationClientResponse::MergeFrom(const LoginReputationClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.LoginReputationClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cache_expression(from._internal_cache_expression());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_verdict_token(from._internal_verdict_token());
    }
    if (cached_has_bits & 0x00000004u) {
      cache_duration_sec_ = from.cache_duration_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      verdict_type_ = from.verdict_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      deprecated_cache_expression_exact_match_ = from.deprecated_cache_expression_exact_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoginReputationClientResponse::CopyFrom(const LoginReputationClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.LoginReputationClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReputationClientResponse::IsInitialized() const {
  return true;
}

void LoginReputationClientResponse::InternalSwap(LoginReputationClientResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cache_expression_, lhs_arena,
      &other->cache_expression_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &verdict_token_, lhs_arena,
      &other->verdict_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginReputationClientResponse, deprecated_cache_expression_exact_match_)
      + sizeof(LoginReputationClientResponse::deprecated_cache_expression_exact_match_)
      - PROTOBUF_FIELD_OFFSET(LoginReputationClientResponse, cache_duration_sec_)>(
          reinterpret_cast<char*>(&cache_duration_sec_),
          reinterpret_cast<char*>(&other->cache_duration_sec_));
}

std::string LoginReputationClientResponse::GetTypeName() const {
  return "safe_browsing.LoginReputationClientResponse";
}


// ===================================================================

class VisualFeatures_BlurredImage::_Internal {
 public:
  using HasBits = decltype(std::declval<VisualFeatures_BlurredImage>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VisualFeatures_BlurredImage::VisualFeatures_BlurredImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.VisualFeatures.BlurredImage)
}
VisualFeatures_BlurredImage::VisualFeatures_BlurredImage(const VisualFeatures_BlurredImage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.VisualFeatures.BlurredImage)
}

inline void VisualFeatures_BlurredImage::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

VisualFeatures_BlurredImage::~VisualFeatures_BlurredImage() {
  // @@protoc_insertion_point(destructor:safe_browsing.VisualFeatures.BlurredImage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VisualFeatures_BlurredImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void VisualFeatures_BlurredImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisualFeatures_BlurredImage::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.VisualFeatures.BlurredImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VisualFeatures_BlurredImage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisualFeatures_BlurredImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.VisualFeatures.BlurredImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.VisualFeatures.BlurredImage)
  return target;
}

size_t VisualFeatures_BlurredImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.VisualFeatures.BlurredImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 width = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualFeatures_BlurredImage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VisualFeatures_BlurredImage*>(
      &from));
}

void VisualFeatures_BlurredImage::MergeFrom(const VisualFeatures_BlurredImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.VisualFeatures.BlurredImage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VisualFeatures_BlurredImage::CopyFrom(const VisualFeatures_BlurredImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.VisualFeatures.BlurredImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualFeatures_BlurredImage::IsInitialized() const {
  return true;
}

void VisualFeatures_BlurredImage::InternalSwap(VisualFeatures_BlurredImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisualFeatures_BlurredImage, height_)
      + sizeof(VisualFeatures_BlurredImage::height_)
      - PROTOBUF_FIELD_OFFSET(VisualFeatures_BlurredImage, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

std::string VisualFeatures_BlurredImage::GetTypeName() const {
  return "safe_browsing.VisualFeatures.BlurredImage";
}


// ===================================================================

class VisualFeatures::_Internal {
 public:
  using HasBits = decltype(std::declval<VisualFeatures>()._has_bits_);
  static const ::safe_browsing::VisualFeatures_BlurredImage& image(const VisualFeatures* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::VisualFeatures_BlurredImage&
VisualFeatures::_Internal::image(const VisualFeatures* msg) {
  return *msg->image_;
}
VisualFeatures::VisualFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.VisualFeatures)
}
VisualFeatures::VisualFeatures(const VisualFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::safe_browsing::VisualFeatures_BlurredImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.VisualFeatures)
}

inline void VisualFeatures::SharedCtor() {
image_ = nullptr;
}

VisualFeatures::~VisualFeatures() {
  // @@protoc_insertion_point(destructor:safe_browsing.VisualFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VisualFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void VisualFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisualFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.VisualFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(image_ != nullptr);
    image_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VisualFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.VisualFeatures.BlurredImage image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisualFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.VisualFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.VisualFeatures.BlurredImage image = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.VisualFeatures)
  return target;
}

size_t VisualFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.VisualFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .safe_browsing.VisualFeatures.BlurredImage image = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualFeatures::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VisualFeatures*>(
      &from));
}

void VisualFeatures::MergeFrom(const VisualFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.VisualFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::safe_browsing::VisualFeatures_BlurredImage::MergeFrom(from._internal_image());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VisualFeatures::CopyFrom(const VisualFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.VisualFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualFeatures::IsInitialized() const {
  return true;
}

void VisualFeatures::InternalSwap(VisualFeatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(image_, other->image_);
}

std::string VisualFeatures::GetTypeName() const {
  return "safe_browsing.VisualFeatures";
}


// ===================================================================

class DomFeatures_Feature::_Internal {
 public:
  using HasBits = decltype(std::declval<DomFeatures_Feature>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DomFeatures_Feature::DomFeatures_Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.DomFeatures.Feature)
}
DomFeatures_Feature::DomFeatures_Feature(const DomFeatures_Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DomFeatures.Feature)
}

inline void DomFeatures_Feature::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
}

DomFeatures_Feature::~DomFeatures_Feature() {
  // @@protoc_insertion_point(destructor:safe_browsing.DomFeatures.Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DomFeatures_Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void DomFeatures_Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DomFeatures_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DomFeatures.Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DomFeatures_Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DomFeatures_Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.DomFeatures.Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.DomFeatures.Feature)
  return target;
}

size_t DomFeatures_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DomFeatures.Feature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomFeatures_Feature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DomFeatures_Feature*>(
      &from));
}

void DomFeatures_Feature::MergeFrom(const DomFeatures_Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DomFeatures.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DomFeatures_Feature::CopyFrom(const DomFeatures_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DomFeatures.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomFeatures_Feature::IsInitialized() const {
  return true;
}

void DomFeatures_Feature::InternalSwap(DomFeatures_Feature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(value_, other->value_);
}

std::string DomFeatures_Feature::GetTypeName() const {
  return "safe_browsing.DomFeatures.Feature";
}


// ===================================================================

class DomFeatures::_Internal {
 public:
  using HasBits = decltype(std::declval<DomFeatures>()._has_bits_);
  static void set_has_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DomFeatures::DomFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  feature_map_(arena),
  shingle_hashes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.DomFeatures)
}
DomFeatures::DomFeatures(const DomFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      feature_map_(from.feature_map_),
      shingle_hashes_(from.shingle_hashes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  model_version_ = from.model_version_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DomFeatures)
}

inline void DomFeatures::SharedCtor() {
model_version_ = 0;
}

DomFeatures::~DomFeatures() {
  // @@protoc_insertion_point(destructor:safe_browsing.DomFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DomFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DomFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DomFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DomFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_map_.Clear();
  shingle_hashes_.Clear();
  model_version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DomFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safe_browsing.DomFeatures.Feature feature_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 shingle_hashes = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shingle_hashes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_shingle_hashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 model_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_model_version(&has_bits);
          model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DomFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.DomFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.DomFeatures.Feature feature_map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 shingle_hashes = 2 [packed = true];
  {
    int byte_size = _shingle_hashes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_shingle_hashes(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 model_version = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_model_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.DomFeatures)
  return target;
}

size_t DomFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DomFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.DomFeatures.Feature feature_map = 1;
  total_size += 1UL * this->_internal_feature_map_size();
  for (const auto& msg : this->feature_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 shingle_hashes = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->shingle_hashes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _shingle_hashes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional int32 model_version = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomFeatures::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DomFeatures*>(
      &from));
}

void DomFeatures::MergeFrom(const DomFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DomFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  feature_map_.MergeFrom(from.feature_map_);
  shingle_hashes_.MergeFrom(from.shingle_hashes_);
  if (from._internal_has_model_version()) {
    _internal_set_model_version(from._internal_model_version());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DomFeatures::CopyFrom(const DomFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DomFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomFeatures::IsInitialized() const {
  return true;
}

void DomFeatures::InternalSwap(DomFeatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_map_.InternalSwap(&other->feature_map_);
  shingle_hashes_.InternalSwap(&other->shingle_hashes_);
  swap(model_version_, other->model_version_);
}

std::string DomFeatures::GetTypeName() const {
  return "safe_browsing.DomFeatures";
}


// ===================================================================

class ClientDownloadRequest_Digests::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_Digests>()._has_bits_);
  static void set_has_sha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_md5(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClientDownloadRequest_Digests::ClientDownloadRequest_Digests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.Digests)
}
ClientDownloadRequest_Digests::ClientDownloadRequest_Digests(const ClientDownloadRequest_Digests& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha256()) {
    sha256_.Set(from._internal_sha256(), 
      GetArenaForAllocation());
  }
  sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha1()) {
    sha1_.Set(from._internal_sha1(), 
      GetArenaForAllocation());
  }
  md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_md5()) {
    md5_.Set(from._internal_md5(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.Digests)
}

inline void ClientDownloadRequest_Digests::SharedCtor() {
sha256_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha256_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadRequest_Digests::~ClientDownloadRequest_Digests() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.Digests)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_Digests::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha256_.Destroy();
  sha1_.Destroy();
  md5_.Destroy();
}

void ClientDownloadRequest_Digests::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_Digests::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.Digests)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      md5_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_Digests::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sha256 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sha1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes md5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_Digests::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.Digests)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha256 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sha256(), target);
  }

  // optional bytes sha1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha1(), target);
  }

  // optional bytes md5 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.Digests)
  return target;
}

size_t ClientDownloadRequest_Digests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.Digests)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes sha256 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha256());
    }

    // optional bytes sha1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha1());
    }

    // optional bytes md5 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_md5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_Digests::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_Digests*>(
      &from));
}

void ClientDownloadRequest_Digests::MergeFrom(const ClientDownloadRequest_Digests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.Digests)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha256(from._internal_sha256());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha1(from._internal_sha1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_md5(from._internal_md5());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_Digests::CopyFrom(const ClientDownloadRequest_Digests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.Digests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_Digests::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_Digests::InternalSwap(ClientDownloadRequest_Digests* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sha256_, lhs_arena,
      &other->sha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sha1_, lhs_arena,
      &other->sha1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &md5_, lhs_arena,
      &other->md5_, rhs_arena
  );
}

std::string ClientDownloadRequest_Digests::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.Digests";
}


// ===================================================================

class ClientDownloadRequest_Resource::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_Resource>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referrer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

ClientDownloadRequest_Resource::ClientDownloadRequest_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.Resource)
}
ClientDownloadRequest_Resource::ClientDownloadRequest_Resource(const ClientDownloadRequest_Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  remote_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remote_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_ip()) {
    remote_ip_.Set(from._internal_remote_ip(), 
      GetArenaForAllocation());
  }
  referrer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer()) {
    referrer_.Set(from._internal_referrer(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.Resource)
}

inline void ClientDownloadRequest_Resource::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remote_ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remote_ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
referrer_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

ClientDownloadRequest_Resource::~ClientDownloadRequest_Resource() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  remote_ip_.Destroy();
  referrer_.Destroy();
}

void ClientDownloadRequest_Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      remote_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      referrer_.ClearNonDefaultToEmpty();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .safe_browsing.ClientDownloadRequest.ResourceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientDownloadRequest_ResourceType_IsValid(val))) {
            _internal_set_type(static_cast<::safe_browsing::ClientDownloadRequest_ResourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes remote_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_remote_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_referrer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // required .safe_browsing.ClientDownloadRequest.ResourceType type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional bytes remote_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_remote_ip(), target);
  }

  // optional string referrer = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_referrer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.Resource)
  return target;
}

size_t ClientDownloadRequest_Resource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:safe_browsing.ClientDownloadRequest.Resource)
  size_t total_size = 0;

  if (_internal_has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_type()) {
    // required .safe_browsing.ClientDownloadRequest.ResourceType type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t ClientDownloadRequest_Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.Resource)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required .safe_browsing.ClientDownloadRequest.ResourceType type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bytes remote_ip = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_remote_ip());
    }

    // optional string referrer = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_Resource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_Resource*>(
      &from));
}

void ClientDownloadRequest_Resource::MergeFrom(const ClientDownloadRequest_Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_remote_ip(from._internal_remote_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_referrer(from._internal_referrer());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_Resource::CopyFrom(const ClientDownloadRequest_Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_Resource::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientDownloadRequest_Resource::InternalSwap(ClientDownloadRequest_Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &remote_ip_, lhs_arena,
      &other->remote_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &referrer_, lhs_arena,
      &other->referrer_, rhs_arena
  );
  swap(type_, other->type_);
}

std::string ClientDownloadRequest_Resource::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.Resource";
}


// ===================================================================

class ClientDownloadRequest_CertificateChain_Element::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_CertificateChain_Element>()._has_bits_);
  static void set_has_certificate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientDownloadRequest_CertificateChain_Element::ClientDownloadRequest_CertificateChain_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
}
ClientDownloadRequest_CertificateChain_Element::ClientDownloadRequest_CertificateChain_Element(const ClientDownloadRequest_CertificateChain_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_certificate()) {
    certificate_.Set(from._internal_certificate(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
}

inline void ClientDownloadRequest_CertificateChain_Element::SharedCtor() {
certificate_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  certificate_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadRequest_CertificateChain_Element::~ClientDownloadRequest_CertificateChain_Element() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_CertificateChain_Element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  certificate_.Destroy();
}

void ClientDownloadRequest_CertificateChain_Element::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_CertificateChain_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    certificate_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_CertificateChain_Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes certificate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_certificate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_CertificateChain_Element::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes certificate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_certificate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
  return target;
}

size_t ClientDownloadRequest_CertificateChain_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes certificate = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_certificate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_CertificateChain_Element::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_CertificateChain_Element*>(
      &from));
}

void ClientDownloadRequest_CertificateChain_Element::MergeFrom(const ClientDownloadRequest_CertificateChain_Element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_certificate()) {
    _internal_set_certificate(from._internal_certificate());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_CertificateChain_Element::CopyFrom(const ClientDownloadRequest_CertificateChain_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.CertificateChain.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_CertificateChain_Element::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_CertificateChain_Element::InternalSwap(ClientDownloadRequest_CertificateChain_Element* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &certificate_, lhs_arena,
      &other->certificate_, rhs_arena
  );
}

std::string ClientDownloadRequest_CertificateChain_Element::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.CertificateChain.Element";
}


// ===================================================================

class ClientDownloadRequest_CertificateChain::_Internal {
 public:
};

ClientDownloadRequest_CertificateChain::ClientDownloadRequest_CertificateChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  element_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.CertificateChain)
}
ClientDownloadRequest_CertificateChain::ClientDownloadRequest_CertificateChain(const ClientDownloadRequest_CertificateChain& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.CertificateChain)
}

inline void ClientDownloadRequest_CertificateChain::SharedCtor() {
}

ClientDownloadRequest_CertificateChain::~ClientDownloadRequest_CertificateChain() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.CertificateChain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_CertificateChain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientDownloadRequest_CertificateChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_CertificateChain::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.CertificateChain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_CertificateChain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safe_browsing.ClientDownloadRequest.CertificateChain.Element element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_CertificateChain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.CertificateChain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientDownloadRequest.CertificateChain.Element element = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_element_size()); i < n; i++) {
    const auto& repfield = this->_internal_element(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.CertificateChain)
  return target;
}

size_t ClientDownloadRequest_CertificateChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.CertificateChain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientDownloadRequest.CertificateChain.Element element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_CertificateChain::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_CertificateChain*>(
      &from));
}

void ClientDownloadRequest_CertificateChain::MergeFrom(const ClientDownloadRequest_CertificateChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.CertificateChain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_CertificateChain::CopyFrom(const ClientDownloadRequest_CertificateChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.CertificateChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_CertificateChain::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_CertificateChain::InternalSwap(ClientDownloadRequest_CertificateChain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

std::string ClientDownloadRequest_CertificateChain::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.CertificateChain";
}


// ===================================================================

class ClientDownloadRequest_ExtendedAttr::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_ExtendedAttr>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientDownloadRequest_ExtendedAttr::ClientDownloadRequest_ExtendedAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.ExtendedAttr)
}
ClientDownloadRequest_ExtendedAttr::ClientDownloadRequest_ExtendedAttr(const ClientDownloadRequest_ExtendedAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.ExtendedAttr)
}

inline void ClientDownloadRequest_ExtendedAttr::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadRequest_ExtendedAttr::~ClientDownloadRequest_ExtendedAttr() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.ExtendedAttr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_ExtendedAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  value_.Destroy();
}

void ClientDownloadRequest_ExtendedAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_ExtendedAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.ExtendedAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_ExtendedAttr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_ExtendedAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.ExtendedAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.ExtendedAttr)
  return target;
}

size_t ClientDownloadRequest_ExtendedAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.ExtendedAttr)
  size_t total_size = 0;

  // required string key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_ExtendedAttr::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_ExtendedAttr*>(
      &from));
}

void ClientDownloadRequest_ExtendedAttr::MergeFrom(const ClientDownloadRequest_ExtendedAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.ExtendedAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_ExtendedAttr::CopyFrom(const ClientDownloadRequest_ExtendedAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.ExtendedAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_ExtendedAttr::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientDownloadRequest_ExtendedAttr::InternalSwap(ClientDownloadRequest_ExtendedAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string ClientDownloadRequest_ExtendedAttr::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.ExtendedAttr";
}


// ===================================================================

class ClientDownloadRequest_SignatureInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_SignatureInfo>()._has_bits_);
  static void set_has_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientDownloadRequest_SignatureInfo::ClientDownloadRequest_SignatureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  certificate_chain_(arena),
  signed_data_(arena),
  xattr_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.SignatureInfo)
}
ClientDownloadRequest_SignatureInfo::ClientDownloadRequest_SignatureInfo(const ClientDownloadRequest_SignatureInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      certificate_chain_(from.certificate_chain_),
      signed_data_(from.signed_data_),
      xattr_(from.xattr_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  trusted_ = from.trusted_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.SignatureInfo)
}

inline void ClientDownloadRequest_SignatureInfo::SharedCtor() {
trusted_ = false;
}

ClientDownloadRequest_SignatureInfo::~ClientDownloadRequest_SignatureInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.SignatureInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_SignatureInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientDownloadRequest_SignatureInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_SignatureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.SignatureInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certificate_chain_.Clear();
  signed_data_.Clear();
  xattr_.Clear();
  trusted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_SignatureInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safe_browsing.ClientDownloadRequest.CertificateChain certificate_chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_certificate_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool trusted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trusted(&has_bits);
          trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes signed_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signed_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientDownloadRequest.ExtendedAttr xattr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_xattr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_SignatureInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.SignatureInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientDownloadRequest.CertificateChain certificate_chain = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_certificate_chain_size()); i < n; i++) {
    const auto& repfield = this->_internal_certificate_chain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool trusted = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_trusted(), target);
  }

  // repeated bytes signed_data = 3;
  for (int i = 0, n = this->_internal_signed_data_size(); i < n; i++) {
    const auto& s = this->_internal_signed_data(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated .safe_browsing.ClientDownloadRequest.ExtendedAttr xattr = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_xattr_size()); i < n; i++) {
    const auto& repfield = this->_internal_xattr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.SignatureInfo)
  return target;
}

size_t ClientDownloadRequest_SignatureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.SignatureInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientDownloadRequest.CertificateChain certificate_chain = 1;
  total_size += 1UL * this->_internal_certificate_chain_size();
  for (const auto& msg : this->certificate_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes signed_data = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signed_data_.size());
  for (int i = 0, n = signed_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signed_data_.Get(i));
  }

  // repeated .safe_browsing.ClientDownloadRequest.ExtendedAttr xattr = 4;
  total_size += 1UL * this->_internal_xattr_size();
  for (const auto& msg : this->xattr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool trusted = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_SignatureInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_SignatureInfo*>(
      &from));
}

void ClientDownloadRequest_SignatureInfo::MergeFrom(const ClientDownloadRequest_SignatureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.SignatureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  certificate_chain_.MergeFrom(from.certificate_chain_);
  signed_data_.MergeFrom(from.signed_data_);
  xattr_.MergeFrom(from.xattr_);
  if (from._internal_has_trusted()) {
    _internal_set_trusted(from._internal_trusted());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_SignatureInfo::CopyFrom(const ClientDownloadRequest_SignatureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.SignatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_SignatureInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(xattr_))
    return false;
  return true;
}

void ClientDownloadRequest_SignatureInfo::InternalSwap(ClientDownloadRequest_SignatureInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  certificate_chain_.InternalSwap(&other->certificate_chain_);
  signed_data_.InternalSwap(&other->signed_data_);
  xattr_.InternalSwap(&other->xattr_);
  swap(trusted_, other->trusted_);
}

std::string ClientDownloadRequest_SignatureInfo::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.SignatureInfo";
}


// ===================================================================

class ClientDownloadRequest_PEImageHeaders_DebugData::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_PEImageHeaders_DebugData>()._has_bits_);
  static void set_has_directory_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_raw_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientDownloadRequest_PEImageHeaders_DebugData::ClientDownloadRequest_PEImageHeaders_DebugData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
}
ClientDownloadRequest_PEImageHeaders_DebugData::ClientDownloadRequest_PEImageHeaders_DebugData(const ClientDownloadRequest_PEImageHeaders_DebugData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  directory_entry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_entry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory_entry()) {
    directory_entry_.Set(from._internal_directory_entry(), 
      GetArenaForAllocation());
  }
  raw_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    raw_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_raw_data()) {
    raw_data_.Set(from._internal_raw_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
}

inline void ClientDownloadRequest_PEImageHeaders_DebugData::SharedCtor() {
directory_entry_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_entry_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
raw_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadRequest_PEImageHeaders_DebugData::~ClientDownloadRequest_PEImageHeaders_DebugData() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_PEImageHeaders_DebugData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  directory_entry_.Destroy();
  raw_data_.Destroy();
}

void ClientDownloadRequest_PEImageHeaders_DebugData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_PEImageHeaders_DebugData::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      directory_entry_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      raw_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_PEImageHeaders_DebugData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes directory_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory_entry();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes raw_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_raw_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_PEImageHeaders_DebugData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes directory_entry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_directory_entry(), target);
  }

  // optional bytes raw_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_raw_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
  return target;
}

size_t ClientDownloadRequest_PEImageHeaders_DebugData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes directory_entry = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_directory_entry());
    }

    // optional bytes raw_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_PEImageHeaders_DebugData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_PEImageHeaders_DebugData*>(
      &from));
}

void ClientDownloadRequest_PEImageHeaders_DebugData::MergeFrom(const ClientDownloadRequest_PEImageHeaders_DebugData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_directory_entry(from._internal_directory_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_raw_data(from._internal_raw_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_PEImageHeaders_DebugData::CopyFrom(const ClientDownloadRequest_PEImageHeaders_DebugData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_PEImageHeaders_DebugData::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_PEImageHeaders_DebugData::InternalSwap(ClientDownloadRequest_PEImageHeaders_DebugData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &directory_entry_, lhs_arena,
      &other->directory_entry_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &raw_data_, lhs_arena,
      &other->raw_data_, rhs_arena
  );
}

std::string ClientDownloadRequest_PEImageHeaders_DebugData::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData";
}


// ===================================================================

class ClientDownloadRequest_PEImageHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_PEImageHeaders>()._has_bits_);
  static void set_has_dos_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_optional_headers32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_headers64(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_export_section_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ClientDownloadRequest_PEImageHeaders::ClientDownloadRequest_PEImageHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  section_header_(arena),
  debug_data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.PEImageHeaders)
}
ClientDownloadRequest_PEImageHeaders::ClientDownloadRequest_PEImageHeaders(const ClientDownloadRequest_PEImageHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      section_header_(from.section_header_),
      debug_data_(from.debug_data_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  dos_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dos_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dos_header()) {
    dos_header_.Set(from._internal_dos_header(), 
      GetArenaForAllocation());
  }
  file_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_header()) {
    file_header_.Set(from._internal_file_header(), 
      GetArenaForAllocation());
  }
  optional_headers32_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_headers32_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_headers32()) {
    optional_headers32_.Set(from._internal_optional_headers32(), 
      GetArenaForAllocation());
  }
  optional_headers64_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_headers64_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_headers64()) {
    optional_headers64_.Set(from._internal_optional_headers64(), 
      GetArenaForAllocation());
  }
  export_section_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    export_section_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_export_section_data()) {
    export_section_data_.Set(from._internal_export_section_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.PEImageHeaders)
}

inline void ClientDownloadRequest_PEImageHeaders::SharedCtor() {
dos_header_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dos_header_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_header_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_header_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_headers32_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_headers32_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_headers64_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_headers64_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
export_section_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  export_section_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadRequest_PEImageHeaders::~ClientDownloadRequest_PEImageHeaders() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.PEImageHeaders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_PEImageHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dos_header_.Destroy();
  file_header_.Destroy();
  optional_headers32_.Destroy();
  optional_headers64_.Destroy();
  export_section_data_.Destroy();
}

void ClientDownloadRequest_PEImageHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_PEImageHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.PEImageHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_header_.Clear();
  debug_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      dos_header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      optional_headers32_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      optional_headers64_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      export_section_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_PEImageHeaders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes dos_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dos_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes file_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes optional_headers32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_optional_headers32();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes optional_headers64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_optional_headers64();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes section_header = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_section_header();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes export_section_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_export_section_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData debug_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_PEImageHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.PEImageHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes dos_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_dos_header(), target);
  }

  // optional bytes file_header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_file_header(), target);
  }

  // optional bytes optional_headers32 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_optional_headers32(), target);
  }

  // optional bytes optional_headers64 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_optional_headers64(), target);
  }

  // repeated bytes section_header = 5;
  for (int i = 0, n = this->_internal_section_header_size(); i < n; i++) {
    const auto& s = this->_internal_section_header(i);
    target = stream->WriteBytes(5, s, target);
  }

  // optional bytes export_section_data = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_export_section_data(), target);
  }

  // repeated .safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData debug_data = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_debug_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_debug_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.PEImageHeaders)
  return target;
}

size_t ClientDownloadRequest_PEImageHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.PEImageHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes section_header = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(section_header_.size());
  for (int i = 0, n = section_header_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      section_header_.Get(i));
  }

  // repeated .safe_browsing.ClientDownloadRequest.PEImageHeaders.DebugData debug_data = 7;
  total_size += 1UL * this->_internal_debug_data_size();
  for (const auto& msg : this->debug_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes dos_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_dos_header());
    }

    // optional bytes file_header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_file_header());
    }

    // optional bytes optional_headers32 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_headers32());
    }

    // optional bytes optional_headers64 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_headers64());
    }

    // optional bytes export_section_data = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_export_section_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_PEImageHeaders::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_PEImageHeaders*>(
      &from));
}

void ClientDownloadRequest_PEImageHeaders::MergeFrom(const ClientDownloadRequest_PEImageHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.PEImageHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  section_header_.MergeFrom(from.section_header_);
  debug_data_.MergeFrom(from.debug_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_dos_header(from._internal_dos_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_header(from._internal_file_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_optional_headers32(from._internal_optional_headers32());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_optional_headers64(from._internal_optional_headers64());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_export_section_data(from._internal_export_section_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_PEImageHeaders::CopyFrom(const ClientDownloadRequest_PEImageHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.PEImageHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_PEImageHeaders::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_PEImageHeaders::InternalSwap(ClientDownloadRequest_PEImageHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_header_.InternalSwap(&other->section_header_);
  debug_data_.InternalSwap(&other->debug_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &dos_header_, lhs_arena,
      &other->dos_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_header_, lhs_arena,
      &other->file_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_headers32_, lhs_arena,
      &other->optional_headers32_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_headers64_, lhs_arena,
      &other->optional_headers64_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &export_section_data_, lhs_arena,
      &other->export_section_data_, rhs_arena
  );
}

std::string ClientDownloadRequest_PEImageHeaders::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.PEImageHeaders";
}


// ===================================================================

class ClientDownloadRequest_MachOHeaders_LoadCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_MachOHeaders_LoadCommand>()._has_bits_);
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ClientDownloadRequest_MachOHeaders_LoadCommand::ClientDownloadRequest_MachOHeaders_LoadCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
}
ClientDownloadRequest_MachOHeaders_LoadCommand::ClientDownloadRequest_MachOHeaders_LoadCommand(const ClientDownloadRequest_MachOHeaders_LoadCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command()) {
    command_.Set(from._internal_command(), 
      GetArenaForAllocation());
  }
  command_id_ = from.command_id_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
}

inline void ClientDownloadRequest_MachOHeaders_LoadCommand::SharedCtor() {
command_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
command_id_ = 0u;
}

ClientDownloadRequest_MachOHeaders_LoadCommand::~ClientDownloadRequest_MachOHeaders_LoadCommand() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_MachOHeaders_LoadCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  command_.Destroy();
}

void ClientDownloadRequest_MachOHeaders_LoadCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_MachOHeaders_LoadCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmpty();
  }
  command_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_MachOHeaders_LoadCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 command_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_MachOHeaders_LoadCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 command_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_command_id(), target);
  }

  // required bytes command = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
  return target;
}

size_t ClientDownloadRequest_MachOHeaders_LoadCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
  size_t total_size = 0;

  if (_internal_has_command()) {
    // required bytes command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  if (_internal_has_command_id()) {
    // required uint32 command_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_command_id());
  }

  return total_size;
}
size_t ClientDownloadRequest_MachOHeaders_LoadCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());

    // required uint32 command_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_command_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_MachOHeaders_LoadCommand::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_MachOHeaders_LoadCommand*>(
      &from));
}

void ClientDownloadRequest_MachOHeaders_LoadCommand::MergeFrom(const ClientDownloadRequest_MachOHeaders_LoadCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_command(from._internal_command());
    }
    if (cached_has_bits & 0x00000002u) {
      command_id_ = from.command_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_MachOHeaders_LoadCommand::CopyFrom(const ClientDownloadRequest_MachOHeaders_LoadCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_MachOHeaders_LoadCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientDownloadRequest_MachOHeaders_LoadCommand::InternalSwap(ClientDownloadRequest_MachOHeaders_LoadCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
  swap(command_id_, other->command_id_);
}

std::string ClientDownloadRequest_MachOHeaders_LoadCommand::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand";
}


// ===================================================================

class ClientDownloadRequest_MachOHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_MachOHeaders>()._has_bits_);
  static void set_has_mach_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientDownloadRequest_MachOHeaders::ClientDownloadRequest_MachOHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  load_commands_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.MachOHeaders)
}
ClientDownloadRequest_MachOHeaders::ClientDownloadRequest_MachOHeaders(const ClientDownloadRequest_MachOHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      load_commands_(from.load_commands_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  mach_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mach_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mach_header()) {
    mach_header_.Set(from._internal_mach_header(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.MachOHeaders)
}

inline void ClientDownloadRequest_MachOHeaders::SharedCtor() {
mach_header_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mach_header_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadRequest_MachOHeaders::~ClientDownloadRequest_MachOHeaders() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.MachOHeaders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_MachOHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mach_header_.Destroy();
}

void ClientDownloadRequest_MachOHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_MachOHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.MachOHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mach_header_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_MachOHeaders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes mach_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mach_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand load_commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_load_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_MachOHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.MachOHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes mach_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mach_header(), target);
  }

  // repeated .safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand load_commands = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_load_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_load_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.MachOHeaders)
  return target;
}

size_t ClientDownloadRequest_MachOHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.MachOHeaders)
  size_t total_size = 0;

  // required bytes mach_header = 1;
  if (_internal_has_mach_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mach_header());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientDownloadRequest.MachOHeaders.LoadCommand load_commands = 2;
  total_size += 1UL * this->_internal_load_commands_size();
  for (const auto& msg : this->load_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_MachOHeaders::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_MachOHeaders*>(
      &from));
}

void ClientDownloadRequest_MachOHeaders::MergeFrom(const ClientDownloadRequest_MachOHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.MachOHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  load_commands_.MergeFrom(from.load_commands_);
  if (from._internal_has_mach_header()) {
    _internal_set_mach_header(from._internal_mach_header());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_MachOHeaders::CopyFrom(const ClientDownloadRequest_MachOHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.MachOHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_MachOHeaders::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(load_commands_))
    return false;
  return true;
}

void ClientDownloadRequest_MachOHeaders::InternalSwap(ClientDownloadRequest_MachOHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  load_commands_.InternalSwap(&other->load_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mach_header_, lhs_arena,
      &other->mach_header_, rhs_arena
  );
}

std::string ClientDownloadRequest_MachOHeaders::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.MachOHeaders";
}


// ===================================================================

class ClientDownloadRequest_ImageHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_ImageHeaders>()._has_bits_);
  static const ::safe_browsing::ClientDownloadRequest_PEImageHeaders& pe_headers(const ClientDownloadRequest_ImageHeaders* msg);
  static void set_has_pe_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::ClientDownloadRequest_PEImageHeaders&
ClientDownloadRequest_ImageHeaders::_Internal::pe_headers(const ClientDownloadRequest_ImageHeaders* msg) {
  return *msg->pe_headers_;
}
ClientDownloadRequest_ImageHeaders::ClientDownloadRequest_ImageHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  mach_o_headers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.ImageHeaders)
}
ClientDownloadRequest_ImageHeaders::ClientDownloadRequest_ImageHeaders(const ClientDownloadRequest_ImageHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      mach_o_headers_(from.mach_o_headers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_pe_headers()) {
    pe_headers_ = new ::safe_browsing::ClientDownloadRequest_PEImageHeaders(*from.pe_headers_);
  } else {
    pe_headers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.ImageHeaders)
}

inline void ClientDownloadRequest_ImageHeaders::SharedCtor() {
pe_headers_ = nullptr;
}

ClientDownloadRequest_ImageHeaders::~ClientDownloadRequest_ImageHeaders() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.ImageHeaders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_ImageHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pe_headers_;
}

void ClientDownloadRequest_ImageHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_ImageHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.ImageHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mach_o_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pe_headers_ != nullptr);
    pe_headers_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_ImageHeaders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientDownloadRequest.PEImageHeaders pe_headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pe_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientDownloadRequest.MachOHeaders mach_o_headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mach_o_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_ImageHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.ImageHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientDownloadRequest.PEImageHeaders pe_headers = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pe_headers(this),
        _Internal::pe_headers(this).GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.ClientDownloadRequest.MachOHeaders mach_o_headers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mach_o_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_mach_o_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.ImageHeaders)
  return target;
}

size_t ClientDownloadRequest_ImageHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.ImageHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientDownloadRequest.MachOHeaders mach_o_headers = 2;
  total_size += 1UL * this->_internal_mach_o_headers_size();
  for (const auto& msg : this->mach_o_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .safe_browsing.ClientDownloadRequest.PEImageHeaders pe_headers = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pe_headers_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_ImageHeaders::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_ImageHeaders*>(
      &from));
}

void ClientDownloadRequest_ImageHeaders::MergeFrom(const ClientDownloadRequest_ImageHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.ImageHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mach_o_headers_.MergeFrom(from.mach_o_headers_);
  if (from._internal_has_pe_headers()) {
    _internal_mutable_pe_headers()->::safe_browsing::ClientDownloadRequest_PEImageHeaders::MergeFrom(from._internal_pe_headers());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_ImageHeaders::CopyFrom(const ClientDownloadRequest_ImageHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.ImageHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_ImageHeaders::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mach_o_headers_))
    return false;
  return true;
}

void ClientDownloadRequest_ImageHeaders::InternalSwap(ClientDownloadRequest_ImageHeaders* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mach_o_headers_.InternalSwap(&other->mach_o_headers_);
  swap(pe_headers_, other->pe_headers_);
}

std::string ClientDownloadRequest_ImageHeaders::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.ImageHeaders";
}


// ===================================================================

class ClientDownloadRequest_ArchivedBinary::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_ArchivedBinary>()._has_bits_);
  static void set_has_file_basename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_download_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::safe_browsing::ClientDownloadRequest_Digests& digests(const ClientDownloadRequest_ArchivedBinary* msg);
  static void set_has_digests(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::safe_browsing::ClientDownloadRequest_SignatureInfo& signature(const ClientDownloadRequest_ArchivedBinary* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers(const ClientDownloadRequest_ArchivedBinary* msg);
  static void set_has_image_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_executable(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::safe_browsing::ClientDownloadRequest_Digests&
ClientDownloadRequest_ArchivedBinary::_Internal::digests(const ClientDownloadRequest_ArchivedBinary* msg) {
  return *msg->digests_;
}
const ::safe_browsing::ClientDownloadRequest_SignatureInfo&
ClientDownloadRequest_ArchivedBinary::_Internal::signature(const ClientDownloadRequest_ArchivedBinary* msg) {
  return *msg->signature_;
}
const ::safe_browsing::ClientDownloadRequest_ImageHeaders&
ClientDownloadRequest_ArchivedBinary::_Internal::image_headers(const ClientDownloadRequest_ArchivedBinary* msg) {
  return *msg->image_headers_;
}
ClientDownloadRequest_ArchivedBinary::ClientDownloadRequest_ArchivedBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.ArchivedBinary)
}
ClientDownloadRequest_ArchivedBinary::ClientDownloadRequest_ArchivedBinary(const ClientDownloadRequest_ArchivedBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_basename()) {
    file_basename_.Set(from._internal_file_basename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_digests()) {
    digests_ = new ::safe_browsing::ClientDownloadRequest_Digests(*from.digests_);
  } else {
    digests_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::safe_browsing::ClientDownloadRequest_SignatureInfo(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_image_headers()) {
    image_headers_ = new ::safe_browsing::ClientDownloadRequest_ImageHeaders(*from.image_headers_);
  } else {
    image_headers_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_archive_) -
    reinterpret_cast<char*>(&length_)) + sizeof(is_archive_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.ArchivedBinary)
}

inline void ClientDownloadRequest_ArchivedBinary::SharedCtor() {
file_basename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_basename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&digests_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_archive_) -
    reinterpret_cast<char*>(&digests_)) + sizeof(is_archive_));
}

ClientDownloadRequest_ArchivedBinary::~ClientDownloadRequest_ArchivedBinary() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.ArchivedBinary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_ArchivedBinary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_basename_.Destroy();
  if (this != internal_default_instance()) delete digests_;
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete image_headers_;
}

void ClientDownloadRequest_ArchivedBinary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_ArchivedBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.ArchivedBinary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      file_basename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(digests_ != nullptr);
      digests_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(image_headers_ != nullptr);
      image_headers_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_executable_) -
        reinterpret_cast<char*>(&length_)) + sizeof(is_executable_));
  }
  is_archive_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_ArchivedBinary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_basename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_basename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientDownloadRequest_DownloadType_IsValid(val))) {
            _internal_set_download_type(static_cast<::safe_browsing::ClientDownloadRequest_DownloadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.Digests digests = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_digests(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_encrypted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_encrypted(&has_bits);
          is_encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_executable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_executable(&has_bits);
          is_executable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_archive = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_archive(&has_bits);
          is_archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_ArchivedBinary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.ArchivedBinary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_basename = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_basename(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_download_type(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.Digests digests = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::digests(this),
        _Internal::digests(this).GetCachedSize(), target, stream);
  }

  // optional int64 length = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_length(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::image_headers(this),
        _Internal::image_headers(this).GetCachedSize(), target, stream);
  }

  // optional bool is_encrypted = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_encrypted(), target);
  }

  // optional bool is_executable = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_executable(), target);
  }

  // optional bool is_archive = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_archive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.ArchivedBinary)
  return target;
}

size_t ClientDownloadRequest_ArchivedBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.ArchivedBinary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_basename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_basename());
    }

    // optional .safe_browsing.ClientDownloadRequest.Digests digests = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *digests_);
    }

    // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_headers_);
    }

    // optional int64 length = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_length());
    }

    // optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_download_type());
    }

    // optional bool is_encrypted = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_executable = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_archive = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_ArchivedBinary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_ArchivedBinary*>(
      &from));
}

void ClientDownloadRequest_ArchivedBinary::MergeFrom(const ClientDownloadRequest_ArchivedBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.ArchivedBinary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_basename(from._internal_file_basename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_digests()->::safe_browsing::ClientDownloadRequest_Digests::MergeFrom(from._internal_digests());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_signature()->::safe_browsing::ClientDownloadRequest_SignatureInfo::MergeFrom(from._internal_signature());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_image_headers()->::safe_browsing::ClientDownloadRequest_ImageHeaders::MergeFrom(from._internal_image_headers());
    }
    if (cached_has_bits & 0x00000010u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000020u) {
      download_type_ = from.download_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_encrypted_ = from.is_encrypted_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_executable_ = from.is_executable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_archive(from._internal_is_archive());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_ArchivedBinary::CopyFrom(const ClientDownloadRequest_ArchivedBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.ArchivedBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_ArchivedBinary::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  if (_internal_has_image_headers()) {
    if (!image_headers_->IsInitialized()) return false;
  }
  return true;
}

void ClientDownloadRequest_ArchivedBinary::InternalSwap(ClientDownloadRequest_ArchivedBinary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_basename_, lhs_arena,
      &other->file_basename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientDownloadRequest_ArchivedBinary, is_archive_)
      + sizeof(ClientDownloadRequest_ArchivedBinary::is_archive_)
      - PROTOBUF_FIELD_OFFSET(ClientDownloadRequest_ArchivedBinary, digests_)>(
          reinterpret_cast<char*>(&digests_),
          reinterpret_cast<char*>(&other->digests_));
}

std::string ClientDownloadRequest_ArchivedBinary::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.ArchivedBinary";
}


// ===================================================================

class ClientDownloadRequest_DetachedCodeSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_DetachedCodeSignature>()._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ClientDownloadRequest_DetachedCodeSignature::ClientDownloadRequest_DetachedCodeSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
}
ClientDownloadRequest_DetachedCodeSignature::ClientDownloadRequest_DetachedCodeSignature(const ClientDownloadRequest_DetachedCodeSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    file_name_.Set(from._internal_file_name(), 
      GetArenaForAllocation());
  }
  contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contents()) {
    contents_.Set(from._internal_contents(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
}

inline void ClientDownloadRequest_DetachedCodeSignature::SharedCtor() {
file_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contents_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contents_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadRequest_DetachedCodeSignature::~ClientDownloadRequest_DetachedCodeSignature() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_DetachedCodeSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.Destroy();
  contents_.Destroy();
}

void ClientDownloadRequest_DetachedCodeSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_DetachedCodeSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      contents_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_DetachedCodeSignature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_DetachedCodeSignature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // required bytes contents = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
  return target;
}

size_t ClientDownloadRequest_DetachedCodeSignature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
  size_t total_size = 0;

  if (_internal_has_file_name()) {
    // required string file_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  if (_internal_has_contents()) {
    // required bytes contents = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contents());
  }

  return total_size;
}
size_t ClientDownloadRequest_DetachedCodeSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string file_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());

    // required bytes contents = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contents());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_DetachedCodeSignature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_DetachedCodeSignature*>(
      &from));
}

void ClientDownloadRequest_DetachedCodeSignature::MergeFrom(const ClientDownloadRequest_DetachedCodeSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_contents(from._internal_contents());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_DetachedCodeSignature::CopyFrom(const ClientDownloadRequest_DetachedCodeSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.DetachedCodeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_DetachedCodeSignature::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientDownloadRequest_DetachedCodeSignature::InternalSwap(ClientDownloadRequest_DetachedCodeSignature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &contents_, lhs_arena,
      &other->contents_, rhs_arena
  );
}

std::string ClientDownloadRequest_DetachedCodeSignature::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.DetachedCodeSignature";
}


// ===================================================================

class ClientDownloadRequest_DocumentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_DocumentInfo>()._has_bits_);
  static void set_has_contains_macros(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientDownloadRequest_DocumentInfo::ClientDownloadRequest_DocumentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.DocumentInfo)
}
ClientDownloadRequest_DocumentInfo::ClientDownloadRequest_DocumentInfo(const ClientDownloadRequest_DocumentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  contains_macros_ = from.contains_macros_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.DocumentInfo)
}

inline void ClientDownloadRequest_DocumentInfo::SharedCtor() {
contains_macros_ = false;
}

ClientDownloadRequest_DocumentInfo::~ClientDownloadRequest_DocumentInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.DocumentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_DocumentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientDownloadRequest_DocumentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_DocumentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.DocumentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contains_macros_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_DocumentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool contains_macros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_contains_macros(&has_bits);
          contains_macros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_DocumentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.DocumentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool contains_macros = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_contains_macros(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.DocumentInfo)
  return target;
}

size_t ClientDownloadRequest_DocumentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.DocumentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool contains_macros = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_DocumentInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_DocumentInfo*>(
      &from));
}

void ClientDownloadRequest_DocumentInfo::MergeFrom(const ClientDownloadRequest_DocumentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.DocumentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_contains_macros()) {
    _internal_set_contains_macros(from._internal_contains_macros());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_DocumentInfo::CopyFrom(const ClientDownloadRequest_DocumentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.DocumentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_DocumentInfo::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_DocumentInfo::InternalSwap(ClientDownloadRequest_DocumentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contains_macros_, other->contains_macros_);
}

std::string ClientDownloadRequest_DocumentInfo::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.DocumentInfo";
}


// ===================================================================

class ClientDownloadRequest_DocumentProcessingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_DocumentProcessingInfo>()._has_bits_);
  static void set_has_processing_successful(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maldoca_error_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maldoca_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientDownloadRequest_DocumentProcessingInfo::ClientDownloadRequest_DocumentProcessingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
}
ClientDownloadRequest_DocumentProcessingInfo::ClientDownloadRequest_DocumentProcessingInfo(const ClientDownloadRequest_DocumentProcessingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  maldoca_error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    maldoca_error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_maldoca_error_message()) {
    maldoca_error_message_.Set(from._internal_maldoca_error_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&processing_successful_, &from.processing_successful_,
    static_cast<size_t>(reinterpret_cast<char*>(&maldoca_error_type_) -
    reinterpret_cast<char*>(&processing_successful_)) + sizeof(maldoca_error_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
}

inline void ClientDownloadRequest_DocumentProcessingInfo::SharedCtor() {
maldoca_error_message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  maldoca_error_message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&processing_successful_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maldoca_error_type_) -
    reinterpret_cast<char*>(&processing_successful_)) + sizeof(maldoca_error_type_));
}

ClientDownloadRequest_DocumentProcessingInfo::~ClientDownloadRequest_DocumentProcessingInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_DocumentProcessingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  maldoca_error_message_.Destroy();
}

void ClientDownloadRequest_DocumentProcessingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_DocumentProcessingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    maldoca_error_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&processing_successful_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maldoca_error_type_) -
        reinterpret_cast<char*>(&processing_successful_)) + sizeof(maldoca_error_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_DocumentProcessingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool processing_successful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_processing_successful(&has_bits);
          processing_successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.MaldocaErrorType maldoca_error_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType_IsValid(val))) {
            _internal_set_maldoca_error_type(static_cast<::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo_MaldocaErrorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string maldoca_error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_maldoca_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_DocumentProcessingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool processing_successful = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_processing_successful(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.MaldocaErrorType maldoca_error_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_maldoca_error_type(), target);
  }

  // optional string maldoca_error_message = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_maldoca_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
  return target;
}

size_t ClientDownloadRequest_DocumentProcessingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string maldoca_error_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_maldoca_error_message());
    }

    // optional bool processing_successful = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo.MaldocaErrorType maldoca_error_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_maldoca_error_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_DocumentProcessingInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_DocumentProcessingInfo*>(
      &from));
}

void ClientDownloadRequest_DocumentProcessingInfo::MergeFrom(const ClientDownloadRequest_DocumentProcessingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_maldoca_error_message(from._internal_maldoca_error_message());
    }
    if (cached_has_bits & 0x00000002u) {
      processing_successful_ = from.processing_successful_;
    }
    if (cached_has_bits & 0x00000004u) {
      maldoca_error_type_ = from.maldoca_error_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_DocumentProcessingInfo::CopyFrom(const ClientDownloadRequest_DocumentProcessingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.DocumentProcessingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_DocumentProcessingInfo::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_DocumentProcessingInfo::InternalSwap(ClientDownloadRequest_DocumentProcessingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &maldoca_error_message_, lhs_arena,
      &other->maldoca_error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientDownloadRequest_DocumentProcessingInfo, maldoca_error_type_)
      + sizeof(ClientDownloadRequest_DocumentProcessingInfo::maldoca_error_type_)
      - PROTOBUF_FIELD_OFFSET(ClientDownloadRequest_DocumentProcessingInfo, processing_successful_)>(
          reinterpret_cast<char*>(&processing_successful_),
          reinterpret_cast<char*>(&other->processing_successful_));
}

std::string ClientDownloadRequest_DocumentProcessingInfo::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.DocumentProcessingInfo";
}


// ===================================================================

class ClientDownloadRequest_DocumentSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_DocumentSummary>()._has_bits_);
  static const ::safe_browsing::ClientDownloadRequest_DocumentInfo& metadata(const ClientDownloadRequest_DocumentSummary* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo& processing_info(const ClientDownloadRequest_DocumentSummary* msg);
  static void set_has_processing_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::ClientDownloadRequest_DocumentInfo&
ClientDownloadRequest_DocumentSummary::_Internal::metadata(const ClientDownloadRequest_DocumentSummary* msg) {
  return *msg->metadata_;
}
const ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo&
ClientDownloadRequest_DocumentSummary::_Internal::processing_info(const ClientDownloadRequest_DocumentSummary* msg) {
  return *msg->processing_info_;
}
ClientDownloadRequest_DocumentSummary::ClientDownloadRequest_DocumentSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.DocumentSummary)
}
ClientDownloadRequest_DocumentSummary::ClientDownloadRequest_DocumentSummary(const ClientDownloadRequest_DocumentSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::safe_browsing::ClientDownloadRequest_DocumentInfo(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_processing_info()) {
    processing_info_ = new ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo(*from.processing_info_);
  } else {
    processing_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.DocumentSummary)
}

inline void ClientDownloadRequest_DocumentSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processing_info_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(processing_info_));
}

ClientDownloadRequest_DocumentSummary::~ClientDownloadRequest_DocumentSummary() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.DocumentSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_DocumentSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete processing_info_;
}

void ClientDownloadRequest_DocumentSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_DocumentSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.DocumentSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(processing_info_ != nullptr);
      processing_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_DocumentSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientDownloadRequest.DocumentInfo metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo processing_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_DocumentSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.DocumentSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientDownloadRequest.DocumentInfo metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo processing_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::processing_info(this),
        _Internal::processing_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.DocumentSummary)
  return target;
}

size_t ClientDownloadRequest_DocumentSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.DocumentSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .safe_browsing.ClientDownloadRequest.DocumentInfo metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .safe_browsing.ClientDownloadRequest.DocumentProcessingInfo processing_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *processing_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_DocumentSummary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_DocumentSummary*>(
      &from));
}

void ClientDownloadRequest_DocumentSummary::MergeFrom(const ClientDownloadRequest_DocumentSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.DocumentSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::safe_browsing::ClientDownloadRequest_DocumentInfo::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_processing_info()->::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo::MergeFrom(from._internal_processing_info());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_DocumentSummary::CopyFrom(const ClientDownloadRequest_DocumentSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.DocumentSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_DocumentSummary::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_DocumentSummary::InternalSwap(ClientDownloadRequest_DocumentSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientDownloadRequest_DocumentSummary, processing_info_)
      + sizeof(ClientDownloadRequest_DocumentSummary::processing_info_)
      - PROTOBUF_FIELD_OFFSET(ClientDownloadRequest_DocumentSummary, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

std::string ClientDownloadRequest_DocumentSummary::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.DocumentSummary";
}


// ===================================================================

class ClientDownloadRequest_ArchiveSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest_ArchiveSummary>()._has_bits_);
  static void set_has_parser_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_directory_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClientDownloadRequest_ArchiveSummary::ClientDownloadRequest_ArchiveSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest.ArchiveSummary)
}
ClientDownloadRequest_ArchiveSummary::ClientDownloadRequest_ArchiveSummary(const ClientDownloadRequest_ArchiveSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&parser_status_, &from.parser_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&directory_count_) -
    reinterpret_cast<char*>(&parser_status_)) + sizeof(directory_count_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest.ArchiveSummary)
}

inline void ClientDownloadRequest_ArchiveSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parser_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&directory_count_) -
    reinterpret_cast<char*>(&parser_status_)) + sizeof(directory_count_));
}

ClientDownloadRequest_ArchiveSummary::~ClientDownloadRequest_ArchiveSummary() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest.ArchiveSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest_ArchiveSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientDownloadRequest_ArchiveSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest_ArchiveSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest.ArchiveSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&parser_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&directory_count_) -
        reinterpret_cast<char*>(&parser_status_)) + sizeof(directory_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest_ArchiveSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientDownloadRequest.ArchiveSummary.Status parser_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status_IsValid(val))) {
            _internal_set_parser_status(static_cast<::safe_browsing::ClientDownloadRequest_ArchiveSummary_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 file_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file_count(&has_bits);
          file_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 directory_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_directory_count(&has_bits);
          directory_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest_ArchiveSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest.ArchiveSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientDownloadRequest.ArchiveSummary.Status parser_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parser_status(), target);
  }

  // optional int32 file_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_file_count(), target);
  }

  // optional int32 directory_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_directory_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest.ArchiveSummary)
  return target;
}

size_t ClientDownloadRequest_ArchiveSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest.ArchiveSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .safe_browsing.ClientDownloadRequest.ArchiveSummary.Status parser_status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parser_status());
    }

    // optional int32 file_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_count());
    }

    // optional int32 directory_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_directory_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest_ArchiveSummary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest_ArchiveSummary*>(
      &from));
}

void ClientDownloadRequest_ArchiveSummary::MergeFrom(const ClientDownloadRequest_ArchiveSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest.ArchiveSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      parser_status_ = from.parser_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_count_ = from.file_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      directory_count_ = from.directory_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest_ArchiveSummary::CopyFrom(const ClientDownloadRequest_ArchiveSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest.ArchiveSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest_ArchiveSummary::IsInitialized() const {
  return true;
}

void ClientDownloadRequest_ArchiveSummary::InternalSwap(ClientDownloadRequest_ArchiveSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientDownloadRequest_ArchiveSummary, directory_count_)
      + sizeof(ClientDownloadRequest_ArchiveSummary::directory_count_)
      - PROTOBUF_FIELD_OFFSET(ClientDownloadRequest_ArchiveSummary, parser_status_)>(
          reinterpret_cast<char*>(&parser_status_),
          reinterpret_cast<char*>(&other->parser_status_));
}

std::string ClientDownloadRequest_ArchiveSummary::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest.ArchiveSummary";
}


// ===================================================================

class ClientDownloadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadRequest>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientDownloadRequest_Digests& digests(const ClientDownloadRequest* msg);
  static void set_has_digests(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::safe_browsing::ClientDownloadRequest_SignatureInfo& signature(const ClientDownloadRequest* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_user_initiated(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_file_basename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_download_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers(const ClientDownloadRequest* msg);
  static void set_has_image_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::safe_browsing::ChromeUserPopulation& population(const ClientDownloadRequest* msg);
  static void set_has_population(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_archive_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_skipped_url_allowlist(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_skipped_certificate_allowlist(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::safe_browsing::ReferrerChainOptions& referrer_chain_options(const ClientDownloadRequest* msg);
  static void set_has_referrer_chain_options(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_deprecated_download_attribution_finch_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_udif_code_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_request_ap_verdicts(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_archive_file_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_archive_directory_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::safe_browsing::ClientDownloadRequest_DocumentSummary& document_summary(const ClientDownloadRequest* msg);
  static void set_has_document_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::safe_browsing::ClientDownloadRequest_ArchiveSummary& archive_summary(const ClientDownloadRequest* msg);
  static void set_has_archive_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001021) ^ 0x00001021) != 0;
  }
};

const ::safe_browsing::ClientDownloadRequest_Digests&
ClientDownloadRequest::_Internal::digests(const ClientDownloadRequest* msg) {
  return *msg->digests_;
}
const ::safe_browsing::ClientDownloadRequest_SignatureInfo&
ClientDownloadRequest::_Internal::signature(const ClientDownloadRequest* msg) {
  return *msg->signature_;
}
const ::safe_browsing::ClientDownloadRequest_ImageHeaders&
ClientDownloadRequest::_Internal::image_headers(const ClientDownloadRequest* msg) {
  return *msg->image_headers_;
}
const ::safe_browsing::ChromeUserPopulation&
ClientDownloadRequest::_Internal::population(const ClientDownloadRequest* msg) {
  return *msg->population_;
}
const ::safe_browsing::ReferrerChainOptions&
ClientDownloadRequest::_Internal::referrer_chain_options(const ClientDownloadRequest* msg) {
  return *msg->referrer_chain_options_;
}
const ::safe_browsing::ClientDownloadRequest_DocumentSummary&
ClientDownloadRequest::_Internal::document_summary(const ClientDownloadRequest* msg) {
  return *msg->document_summary_;
}
const ::safe_browsing::ClientDownloadRequest_ArchiveSummary&
ClientDownloadRequest::_Internal::archive_summary(const ClientDownloadRequest* msg) {
  return *msg->archive_summary_;
}
ClientDownloadRequest::ClientDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  resources_(arena),
  archived_binary_(arena),
  alternate_extensions_(arena),
  referrer_chain_(arena),
  detached_code_signature_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadRequest)
}
ClientDownloadRequest::ClientDownloadRequest(const ClientDownloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      resources_(from.resources_),
      archived_binary_(from.archived_binary_),
      alternate_extensions_(from.alternate_extensions_),
      referrer_chain_(from.referrer_chain_),
      detached_code_signature_(from.detached_code_signature_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  file_basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_basename()) {
    file_basename_.Set(from._internal_file_basename(), 
      GetArenaForAllocation());
  }
  locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    locale_.Set(from._internal_locale(), 
      GetArenaForAllocation());
  }
  udif_code_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    udif_code_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_udif_code_signature()) {
    udif_code_signature_.Set(from._internal_udif_code_signature(), 
      GetArenaForAllocation());
  }
  access_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    access_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_access_token()) {
    access_token_.Set(from._internal_access_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_digests()) {
    digests_ = new ::safe_browsing::ClientDownloadRequest_Digests(*from.digests_);
  } else {
    digests_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::safe_browsing::ClientDownloadRequest_SignatureInfo(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_image_headers()) {
    image_headers_ = new ::safe_browsing::ClientDownloadRequest_ImageHeaders(*from.image_headers_);
  } else {
    image_headers_ = nullptr;
  }
  if (from._internal_has_population()) {
    population_ = new ::safe_browsing::ChromeUserPopulation(*from.population_);
  } else {
    population_ = nullptr;
  }
  if (from._internal_has_referrer_chain_options()) {
    referrer_chain_options_ = new ::safe_browsing::ReferrerChainOptions(*from.referrer_chain_options_);
  } else {
    referrer_chain_options_ = nullptr;
  }
  if (from._internal_has_document_summary()) {
    document_summary_ = new ::safe_browsing::ClientDownloadRequest_DocumentSummary(*from.document_summary_);
  } else {
    document_summary_ = nullptr;
  }
  if (from._internal_has_archive_summary()) {
    archive_summary_ = new ::safe_browsing::ClientDownloadRequest_ArchiveSummary(*from.archive_summary_);
  } else {
    archive_summary_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&archive_directory_count_) -
    reinterpret_cast<char*>(&length_)) + sizeof(archive_directory_count_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadRequest)
}

inline void ClientDownloadRequest::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_basename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_basename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
udif_code_signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  udif_code_signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
access_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  access_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&digests_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&archive_directory_count_) -
    reinterpret_cast<char*>(&digests_)) + sizeof(archive_directory_count_));
}

ClientDownloadRequest::~ClientDownloadRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  file_basename_.Destroy();
  locale_.Destroy();
  udif_code_signature_.Destroy();
  access_token_.Destroy();
  if (this != internal_default_instance()) delete digests_;
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete image_headers_;
  if (this != internal_default_instance()) delete population_;
  if (this != internal_default_instance()) delete referrer_chain_options_;
  if (this != internal_default_instance()) delete document_summary_;
  if (this != internal_default_instance()) delete archive_summary_;
}

void ClientDownloadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_.Clear();
  archived_binary_.Clear();
  alternate_extensions_.Clear();
  referrer_chain_.Clear();
  detached_code_signature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_basename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      udif_code_signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      access_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(digests_ != nullptr);
      digests_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(image_headers_ != nullptr);
      image_headers_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(population_ != nullptr);
      population_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(referrer_chain_options_ != nullptr);
      referrer_chain_options_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(document_summary_ != nullptr);
      document_summary_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(archive_summary_ != nullptr);
      archive_summary_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&archive_valid_) -
        reinterpret_cast<char*>(&length_)) + sizeof(archive_valid_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&skipped_url_allowlist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&archive_directory_count_) -
        reinterpret_cast<char*>(&skipped_url_allowlist_)) + sizeof(archive_directory_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .safe_browsing.ClientDownloadRequest.Digests digests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_digests(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientDownloadRequest.Resource resources = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_initiated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_user_initiated(&has_bits);
          user_initiated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_basename = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_file_basename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 10 [default = WIN_EXECUTABLE];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientDownloadRequest_DownloadType_IsValid(val))) {
            _internal_set_download_type(static_cast<::safe_browsing::ClientDownloadRequest_DownloadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientDownloadRequest.ArchivedBinary archived_binary = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_archived_binary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ChromeUserPopulation population = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_population(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool archive_valid = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_archive_valid(&has_bits);
          archive_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skipped_url_allowlist = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_skipped_url_allowlist(&has_bits);
          skipped_url_allowlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skipped_certificate_allowlist = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_skipped_certificate_allowlist(&has_bits);
          skipped_certificate_allowlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string alternate_extensions = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_alternate_extensions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_referrer_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool DEPRECATED_download_attribution_finch_enabled = 39 [deprecated = true];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_deprecated_download_attribution_finch_enabled(&has_bits);
          deprecated_download_attribution_finch_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes udif_code_signature = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_udif_code_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_referrer_chain_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientDownloadRequest.DetachedCodeSignature detached_code_signature = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_detached_code_signature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<474>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool request_ap_verdicts = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_request_ap_verdicts(&has_bits);
          request_ap_verdicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 archive_file_count = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_archive_file_count(&has_bits);
          archive_file_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 archive_directory_count = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_archive_directory_count(&has_bits);
          archive_directory_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string access_token = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_access_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.DocumentSummary document_summary = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.ArchiveSummary archive_summary = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_archive_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // required .safe_browsing.ClientDownloadRequest.Digests digests = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::digests(this),
        _Internal::digests(this).GetCachedSize(), target, stream);
  }

  // required int64 length = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_length(), target);
  }

  // repeated .safe_browsing.ClientDownloadRequest.Resource resources = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resources_size()); i < n; i++) {
    const auto& repfield = this->_internal_resources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  // optional bool user_initiated = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_user_initiated(), target);
  }

  // optional string file_basename = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_file_basename(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 10 [default = WIN_EXECUTABLE];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_download_type(), target);
  }

  // optional string locale = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_locale(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 18;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::image_headers(this),
        _Internal::image_headers(this).GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.ClientDownloadRequest.ArchivedBinary archived_binary = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_archived_binary_size()); i < n; i++) {
    const auto& repfield = this->_internal_archived_binary(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ChromeUserPopulation population = 24;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::population(this),
        _Internal::population(this).GetCachedSize(), target, stream);
  }

  // optional bool archive_valid = 26;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_archive_valid(), target);
  }

  // optional bool skipped_url_allowlist = 28;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_skipped_url_allowlist(), target);
  }

  // optional bool skipped_certificate_allowlist = 31;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_skipped_certificate_allowlist(), target);
  }

  // repeated string alternate_extensions = 35;
  for (int i = 0, n = this->_internal_alternate_extensions_size(); i < n; i++) {
    const auto& s = this->_internal_alternate_extensions(i);
    target = stream->WriteString(35, s, target);
  }

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 36;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referrer_chain_size()); i < n; i++) {
    const auto& repfield = this->_internal_referrer_chain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(36, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool DEPRECATED_download_attribution_finch_enabled = 39 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_deprecated_download_attribution_finch_enabled(), target);
  }

  // optional bytes udif_code_signature = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        40, this->_internal_udif_code_signature(), target);
  }

  // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 50;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::referrer_chain_options(this),
        _Internal::referrer_chain_options(this).GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.ClientDownloadRequest.DetachedCodeSignature detached_code_signature = 59;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detached_code_signature_size()); i < n; i++) {
    const auto& repfield = this->_internal_detached_code_signature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(59, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool request_ap_verdicts = 67;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_request_ap_verdicts(), target);
  }

  // optional int32 archive_file_count = 68;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(68, this->_internal_archive_file_count(), target);
  }

  // optional int32 archive_directory_count = 69;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(69, this->_internal_archive_directory_count(), target);
  }

  // optional string access_token = 78;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        78, this->_internal_access_token(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.DocumentSummary document_summary = 84;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, _Internal::document_summary(this),
        _Internal::document_summary(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientDownloadRequest.ArchiveSummary archive_summary = 85;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::archive_summary(this),
        _Internal::archive_summary(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadRequest)
  return target;
}

size_t ClientDownloadRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:safe_browsing.ClientDownloadRequest)
  size_t total_size = 0;

  if (_internal_has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_digests()) {
    // required .safe_browsing.ClientDownloadRequest.Digests digests = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *digests_);
  }

  if (_internal_has_length()) {
    // required int64 length = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_length());
  }

  return total_size;
}
size_t ClientDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001021) ^ 0x00001021) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required .safe_browsing.ClientDownloadRequest.Digests digests = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *digests_);

    // required int64 length = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientDownloadRequest.Resource resources = 4;
  total_size += 1UL * this->_internal_resources_size();
  for (const auto& msg : this->resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.ClientDownloadRequest.ArchivedBinary archived_binary = 22;
  total_size += 2UL * this->_internal_archived_binary_size();
  for (const auto& msg : this->archived_binary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string alternate_extensions = 35;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alternate_extensions_.size());
  for (int i = 0, n = alternate_extensions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alternate_extensions_.Get(i));
  }

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 36;
  total_size += 2UL * this->_internal_referrer_chain_size();
  for (const auto& msg : this->referrer_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.ClientDownloadRequest.DetachedCodeSignature detached_code_signature = 59;
  total_size += 2UL * this->_internal_detached_code_signature_size();
  for (const auto& msg : this->detached_code_signature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string file_basename = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_basename());
    }

    // optional string locale = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional bytes udif_code_signature = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_udif_code_signature());
    }

    // optional string access_token = 78;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_access_token());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_headers_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .safe_browsing.ChromeUserPopulation population = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *population_);
    }

    // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 50;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *referrer_chain_options_);
    }

    // optional .safe_browsing.ClientDownloadRequest.DocumentSummary document_summary = 84;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *document_summary_);
    }

    // optional .safe_browsing.ClientDownloadRequest.ArchiveSummary archive_summary = 85;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *archive_summary_);
    }

  }
  if (cached_has_bits & 0x0000e000u) {
    // optional .safe_browsing.ClientDownloadRequest.DownloadType download_type = 10 [default = WIN_EXECUTABLE];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_download_type());
    }

    // optional bool user_initiated = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool archive_valid = 26;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional bool skipped_url_allowlist = 28;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool skipped_certificate_allowlist = 31;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool DEPRECATED_download_attribution_finch_enabled = 39 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool request_ap_verdicts = 67;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional int32 archive_file_count = 68;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_archive_file_count());
    }

    // optional int32 archive_directory_count = 69;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_archive_directory_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadRequest*>(
      &from));
}

void ClientDownloadRequest::MergeFrom(const ClientDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  resources_.MergeFrom(from.resources_);
  archived_binary_.MergeFrom(from.archived_binary_);
  alternate_extensions_.MergeFrom(from.alternate_extensions_);
  referrer_chain_.MergeFrom(from.referrer_chain_);
  detached_code_signature_.MergeFrom(from.detached_code_signature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_basename(from._internal_file_basename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_udif_code_signature(from._internal_udif_code_signature());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_access_token(from._internal_access_token());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_digests()->::safe_browsing::ClientDownloadRequest_Digests::MergeFrom(from._internal_digests());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_signature()->::safe_browsing::ClientDownloadRequest_SignatureInfo::MergeFrom(from._internal_signature());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_image_headers()->::safe_browsing::ClientDownloadRequest_ImageHeaders::MergeFrom(from._internal_image_headers());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_population()->::safe_browsing::ChromeUserPopulation::MergeFrom(from._internal_population());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_referrer_chain_options()->::safe_browsing::ReferrerChainOptions::MergeFrom(from._internal_referrer_chain_options());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_document_summary()->::safe_browsing::ClientDownloadRequest_DocumentSummary::MergeFrom(from._internal_document_summary());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_archive_summary()->::safe_browsing::ClientDownloadRequest_ArchiveSummary::MergeFrom(from._internal_archive_summary());
    }
    if (cached_has_bits & 0x00001000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00002000u) {
      download_type_ = from.download_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      user_initiated_ = from.user_initiated_;
    }
    if (cached_has_bits & 0x00008000u) {
      archive_valid_ = from.archive_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      skipped_url_allowlist_ = from.skipped_url_allowlist_;
    }
    if (cached_has_bits & 0x00020000u) {
      skipped_certificate_allowlist_ = from.skipped_certificate_allowlist_;
    }
    if (cached_has_bits & 0x00040000u) {
      deprecated_download_attribution_finch_enabled_ = from.deprecated_download_attribution_finch_enabled_;
    }
    if (cached_has_bits & 0x00080000u) {
      request_ap_verdicts_ = from.request_ap_verdicts_;
    }
    if (cached_has_bits & 0x00100000u) {
      archive_file_count_ = from.archive_file_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      archive_directory_count_ = from.archive_directory_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadRequest::CopyFrom(const ClientDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(resources_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(archived_binary_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(detached_code_signature_))
    return false;
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  if (_internal_has_image_headers()) {
    if (!image_headers_->IsInitialized()) return false;
  }
  return true;
}

void ClientDownloadRequest::InternalSwap(ClientDownloadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  resources_.InternalSwap(&other->resources_);
  archived_binary_.InternalSwap(&other->archived_binary_);
  alternate_extensions_.InternalSwap(&other->alternate_extensions_);
  referrer_chain_.InternalSwap(&other->referrer_chain_);
  detached_code_signature_.InternalSwap(&other->detached_code_signature_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_basename_, lhs_arena,
      &other->file_basename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &udif_code_signature_, lhs_arena,
      &other->udif_code_signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &access_token_, lhs_arena,
      &other->access_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientDownloadRequest, archive_directory_count_)
      + sizeof(ClientDownloadRequest::archive_directory_count_)
      - PROTOBUF_FIELD_OFFSET(ClientDownloadRequest, digests_)>(
          reinterpret_cast<char*>(&digests_),
          reinterpret_cast<char*>(&other->digests_));
}

std::string ClientDownloadRequest::GetTypeName() const {
  return "safe_browsing.ClientDownloadRequest";
}


// ===================================================================

class ReferrerChainOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferrerChainOptions>()._has_bits_);
  static void set_has_recent_navigations_to_collect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReferrerChainOptions::ReferrerChainOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ReferrerChainOptions)
}
ReferrerChainOptions::ReferrerChainOptions(const ReferrerChainOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  recent_navigations_to_collect_ = from.recent_navigations_to_collect_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ReferrerChainOptions)
}

inline void ReferrerChainOptions::SharedCtor() {
recent_navigations_to_collect_ = 0;
}

ReferrerChainOptions::~ReferrerChainOptions() {
  // @@protoc_insertion_point(destructor:safe_browsing.ReferrerChainOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferrerChainOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReferrerChainOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferrerChainOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ReferrerChainOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recent_navigations_to_collect_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReferrerChainOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 recent_navigations_to_collect = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_recent_navigations_to_collect(&has_bits);
          recent_navigations_to_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferrerChainOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ReferrerChainOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 recent_navigations_to_collect = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_recent_navigations_to_collect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ReferrerChainOptions)
  return target;
}

size_t ReferrerChainOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ReferrerChainOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 recent_navigations_to_collect = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recent_navigations_to_collect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferrerChainOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ReferrerChainOptions*>(
      &from));
}

void ReferrerChainOptions::MergeFrom(const ReferrerChainOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ReferrerChainOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recent_navigations_to_collect()) {
    _internal_set_recent_navigations_to_collect(from._internal_recent_navigations_to_collect());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ReferrerChainOptions::CopyFrom(const ReferrerChainOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ReferrerChainOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferrerChainOptions::IsInitialized() const {
  return true;
}

void ReferrerChainOptions::InternalSwap(ReferrerChainOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recent_navigations_to_collect_, other->recent_navigations_to_collect_);
}

std::string ReferrerChainOptions::GetTypeName() const {
  return "safe_browsing.ReferrerChainOptions";
}


// ===================================================================

class ReferrerChainEntry_ServerRedirect::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferrerChainEntry_ServerRedirect>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReferrerChainEntry_ServerRedirect::ReferrerChainEntry_ServerRedirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ReferrerChainEntry.ServerRedirect)
}
ReferrerChainEntry_ServerRedirect::ReferrerChainEntry_ServerRedirect(const ReferrerChainEntry_ServerRedirect& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ReferrerChainEntry.ServerRedirect)
}

inline void ReferrerChainEntry_ServerRedirect::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReferrerChainEntry_ServerRedirect::~ReferrerChainEntry_ServerRedirect() {
  // @@protoc_insertion_point(destructor:safe_browsing.ReferrerChainEntry.ServerRedirect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferrerChainEntry_ServerRedirect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void ReferrerChainEntry_ServerRedirect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferrerChainEntry_ServerRedirect::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ReferrerChainEntry.ServerRedirect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReferrerChainEntry_ServerRedirect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferrerChainEntry_ServerRedirect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ReferrerChainEntry.ServerRedirect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ReferrerChainEntry.ServerRedirect)
  return target;
}

size_t ReferrerChainEntry_ServerRedirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ReferrerChainEntry.ServerRedirect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferrerChainEntry_ServerRedirect::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ReferrerChainEntry_ServerRedirect*>(
      &from));
}

void ReferrerChainEntry_ServerRedirect::MergeFrom(const ReferrerChainEntry_ServerRedirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ReferrerChainEntry.ServerRedirect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ReferrerChainEntry_ServerRedirect::CopyFrom(const ReferrerChainEntry_ServerRedirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ReferrerChainEntry.ServerRedirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferrerChainEntry_ServerRedirect::IsInitialized() const {
  return true;
}

void ReferrerChainEntry_ServerRedirect::InternalSwap(ReferrerChainEntry_ServerRedirect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string ReferrerChainEntry_ServerRedirect::GetTypeName() const {
  return "safe_browsing.ReferrerChainEntry.ServerRedirect";
}


// ===================================================================

class ReferrerChainEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferrerChainEntry>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_main_frame_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_referrer_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referrer_main_frame_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_retargeting(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_navigation_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_navigation_initiation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_maybe_launched_by_external_application(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_subframe_url_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_subframe_referrer_url_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_url_removed_by_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ReferrerChainEntry::ReferrerChainEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  ip_addresses_(arena),
  server_redirect_chain_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ReferrerChainEntry)
}
ReferrerChainEntry::ReferrerChainEntry(const ReferrerChainEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      ip_addresses_(from.ip_addresses_),
      server_redirect_chain_(from.server_redirect_chain_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  referrer_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_url()) {
    referrer_url_.Set(from._internal_referrer_url(), 
      GetArenaForAllocation());
  }
  referrer_main_frame_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_main_frame_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_main_frame_url()) {
    referrer_main_frame_url_.Set(from._internal_referrer_main_frame_url(), 
      GetArenaForAllocation());
  }
  main_frame_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    main_frame_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_main_frame_url()) {
    main_frame_url_.Set(from._internal_main_frame_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&navigation_time_msec_, &from.navigation_time_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&navigation_time_msec_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ReferrerChainEntry)
}

inline void ReferrerChainEntry::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
referrer_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
referrer_main_frame_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_main_frame_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
main_frame_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  main_frame_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&navigation_time_msec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_url_removed_by_policy_) -
    reinterpret_cast<char*>(&navigation_time_msec_)) + sizeof(is_url_removed_by_policy_));
type_ = 4;
}

ReferrerChainEntry::~ReferrerChainEntry() {
  // @@protoc_insertion_point(destructor:safe_browsing.ReferrerChainEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferrerChainEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  referrer_url_.Destroy();
  referrer_main_frame_url_.Destroy();
  main_frame_url_.Destroy();
}

void ReferrerChainEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferrerChainEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ReferrerChainEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addresses_.Clear();
  server_redirect_chain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      referrer_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      referrer_main_frame_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      main_frame_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&navigation_time_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maybe_launched_by_external_application_) -
        reinterpret_cast<char*>(&navigation_time_msec_)) + sizeof(maybe_launched_by_external_application_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_subframe_url_removed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_url_removed_by_policy_) -
        reinterpret_cast<char*>(&is_subframe_url_removed_)) + sizeof(is_url_removed_by_policy_));
    type_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReferrerChainEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ReferrerChainEntry.URLType type = 2 [default = CLIENT_REDIRECT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ReferrerChainEntry_URLType_IsValid(val))) {
            _internal_set_type(static_cast<::safe_browsing::ReferrerChainEntry_URLType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string ip_addresses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_referrer_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_main_frame_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_referrer_main_frame_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_retargeting = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_retargeting(&has_bits);
          is_retargeting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double navigation_time_msec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_navigation_time_msec(&has_bits);
          navigation_time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ReferrerChainEntry.ServerRedirect server_redirect_chain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server_redirect_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string main_frame_url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_main_frame_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ReferrerChainEntry.NavigationInitiation navigation_initiation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ReferrerChainEntry_NavigationInitiation_IsValid(val))) {
            _internal_set_navigation_initiation(static_cast<::safe_browsing::ReferrerChainEntry_NavigationInitiation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool maybe_launched_by_external_application = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_maybe_launched_by_external_application(&has_bits);
          maybe_launched_by_external_application_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_subframe_url_removed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_is_subframe_url_removed(&has_bits);
          is_subframe_url_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_subframe_referrer_url_removed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_subframe_referrer_url_removed(&has_bits);
          is_subframe_referrer_url_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_url_removed_by_policy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_url_removed_by_policy(&has_bits);
          is_url_removed_by_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferrerChainEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ReferrerChainEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional .safe_browsing.ReferrerChainEntry.URLType type = 2 [default = CLIENT_REDIRECT];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated string ip_addresses = 3;
  for (int i = 0, n = this->_internal_ip_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_ip_addresses(i);
    target = stream->WriteString(3, s, target);
  }

  // optional string referrer_url = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_referrer_url(), target);
  }

  // optional string referrer_main_frame_url = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_referrer_main_frame_url(), target);
  }

  // optional bool is_retargeting = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_retargeting(), target);
  }

  // optional double navigation_time_msec = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_navigation_time_msec(), target);
  }

  // repeated .safe_browsing.ReferrerChainEntry.ServerRedirect server_redirect_chain = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_server_redirect_chain_size()); i < n; i++) {
    const auto& repfield = this->_internal_server_redirect_chain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string main_frame_url = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_main_frame_url(), target);
  }

  // optional .safe_browsing.ReferrerChainEntry.NavigationInitiation navigation_initiation = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_navigation_initiation(), target);
  }

  // optional bool maybe_launched_by_external_application = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_maybe_launched_by_external_application(), target);
  }

  // optional bool is_subframe_url_removed = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_subframe_url_removed(), target);
  }

  // optional bool is_subframe_referrer_url_removed = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_subframe_referrer_url_removed(), target);
  }

  // optional bool is_url_removed_by_policy = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_url_removed_by_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ReferrerChainEntry)
  return target;
}

size_t ReferrerChainEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ReferrerChainEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_addresses = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ip_addresses_.size());
  for (int i = 0, n = ip_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ip_addresses_.Get(i));
  }

  // repeated .safe_browsing.ReferrerChainEntry.ServerRedirect server_redirect_chain = 8;
  total_size += 1UL * this->_internal_server_redirect_chain_size();
  for (const auto& msg : this->server_redirect_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string referrer_url = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_url());
    }

    // optional string referrer_main_frame_url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_main_frame_url());
    }

    // optional string main_frame_url = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_main_frame_url());
    }

    // optional double navigation_time_msec = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .safe_browsing.ReferrerChainEntry.NavigationInitiation navigation_initiation = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_navigation_initiation());
    }

    // optional bool is_retargeting = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool maybe_launched_by_external_application = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_subframe_url_removed = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_subframe_referrer_url_removed = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_url_removed_by_policy = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .safe_browsing.ReferrerChainEntry.URLType type = 2 [default = CLIENT_REDIRECT];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferrerChainEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ReferrerChainEntry*>(
      &from));
}

void ReferrerChainEntry::MergeFrom(const ReferrerChainEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ReferrerChainEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ip_addresses_.MergeFrom(from.ip_addresses_);
  server_redirect_chain_.MergeFrom(from.server_redirect_chain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_referrer_url(from._internal_referrer_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_referrer_main_frame_url(from._internal_referrer_main_frame_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_main_frame_url(from._internal_main_frame_url());
    }
    if (cached_has_bits & 0x00000010u) {
      navigation_time_msec_ = from.navigation_time_msec_;
    }
    if (cached_has_bits & 0x00000020u) {
      navigation_initiation_ = from.navigation_initiation_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_retargeting_ = from.is_retargeting_;
    }
    if (cached_has_bits & 0x00000080u) {
      maybe_launched_by_external_application_ = from.maybe_launched_by_external_application_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_subframe_url_removed_ = from.is_subframe_url_removed_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_subframe_referrer_url_removed_ = from.is_subframe_referrer_url_removed_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_url_removed_by_policy_ = from.is_url_removed_by_policy_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ReferrerChainEntry::CopyFrom(const ReferrerChainEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ReferrerChainEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferrerChainEntry::IsInitialized() const {
  return true;
}

void ReferrerChainEntry::InternalSwap(ReferrerChainEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_addresses_.InternalSwap(&other->ip_addresses_);
  server_redirect_chain_.InternalSwap(&other->server_redirect_chain_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &referrer_url_, lhs_arena,
      &other->referrer_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &referrer_main_frame_url_, lhs_arena,
      &other->referrer_main_frame_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &main_frame_url_, lhs_arena,
      &other->main_frame_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferrerChainEntry, is_url_removed_by_policy_)
      + sizeof(ReferrerChainEntry::is_url_removed_by_policy_)
      - PROTOBUF_FIELD_OFFSET(ReferrerChainEntry, navigation_time_msec_)>(
          reinterpret_cast<char*>(&navigation_time_msec_),
          reinterpret_cast<char*>(&other->navigation_time_msec_));
  swap(type_, other->type_);
}

std::string ReferrerChainEntry::GetTypeName() const {
  return "safe_browsing.ReferrerChainEntry";
}


// ===================================================================

class ClientDownloadResponse_MoreInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadResponse_MoreInfo>()._has_bits_);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientDownloadResponse_MoreInfo::ClientDownloadResponse_MoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadResponse.MoreInfo)
}
ClientDownloadResponse_MoreInfo::ClientDownloadResponse_MoreInfo(const ClientDownloadResponse_MoreInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadResponse.MoreInfo)
}

inline void ClientDownloadResponse_MoreInfo::SharedCtor() {
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadResponse_MoreInfo::~ClientDownloadResponse_MoreInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadResponse.MoreInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadResponse_MoreInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.Destroy();
  url_.Destroy();
}

void ClientDownloadResponse_MoreInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadResponse_MoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadResponse.MoreInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadResponse_MoreInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadResponse_MoreInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadResponse.MoreInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string description = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadResponse.MoreInfo)
  return target;
}

size_t ClientDownloadResponse_MoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadResponse.MoreInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadResponse_MoreInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadResponse_MoreInfo*>(
      &from));
}

void ClientDownloadResponse_MoreInfo::MergeFrom(const ClientDownloadResponse_MoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadResponse.MoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadResponse_MoreInfo::CopyFrom(const ClientDownloadResponse_MoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadResponse.MoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadResponse_MoreInfo::IsInitialized() const {
  return true;
}

void ClientDownloadResponse_MoreInfo::InternalSwap(ClientDownloadResponse_MoreInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string ClientDownloadResponse_MoreInfo::GetTypeName() const {
  return "safe_browsing.ClientDownloadResponse.MoreInfo";
}


// ===================================================================

class ClientDownloadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadResponse>()._has_bits_);
  static void set_has_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::ClientDownloadResponse_MoreInfo& more_info(const ClientDownloadResponse* msg);
  static void set_has_more_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upload(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_request_deep_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::safe_browsing::ClientDownloadResponse_MoreInfo&
ClientDownloadResponse::_Internal::more_info(const ClientDownloadResponse* msg) {
  return *msg->more_info_;
}
ClientDownloadResponse::ClientDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadResponse)
}
ClientDownloadResponse::ClientDownloadResponse(const ClientDownloadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_more_info()) {
    more_info_ = new ::safe_browsing::ClientDownloadResponse_MoreInfo(*from.more_info_);
  } else {
    more_info_ = nullptr;
  }
  ::memcpy(&verdict_, &from.verdict_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_deep_scan_) -
    reinterpret_cast<char*>(&verdict_)) + sizeof(request_deep_scan_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadResponse)
}

inline void ClientDownloadResponse::SharedCtor() {
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&more_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_deep_scan_) -
    reinterpret_cast<char*>(&more_info_)) + sizeof(request_deep_scan_));
}

ClientDownloadResponse::~ClientDownloadResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.Destroy();
  if (this != internal_default_instance()) delete more_info_;
}

void ClientDownloadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(more_info_ != nullptr);
      more_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&verdict_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_deep_scan_) -
        reinterpret_cast<char*>(&verdict_)) + sizeof(request_deep_scan_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientDownloadResponse.Verdict verdict = 1 [default = SAFE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientDownloadResponse_Verdict_IsValid(val))) {
            _internal_set_verdict(static_cast<::safe_browsing::ClientDownloadResponse_Verdict>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadResponse.MoreInfo more_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_more_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool upload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_upload(&has_bits);
          upload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool request_deep_scan = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_request_deep_scan(&has_bits);
          request_deep_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientDownloadResponse.Verdict verdict = 1 [default = SAFE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_verdict(), target);
  }

  // optional .safe_browsing.ClientDownloadResponse.MoreInfo more_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::more_info(this),
        _Internal::more_info(this).GetCachedSize(), target, stream);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token(), target);
  }

  // optional bool upload = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_upload(), target);
  }

  // optional bool request_deep_scan = 19;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_request_deep_scan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadResponse)
  return target;
}

size_t ClientDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional .safe_browsing.ClientDownloadResponse.MoreInfo more_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *more_info_);
    }

    // optional .safe_browsing.ClientDownloadResponse.Verdict verdict = 1 [default = SAFE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_verdict());
    }

    // optional bool upload = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool request_deep_scan = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadResponse*>(
      &from));
}

void ClientDownloadResponse::MergeFrom(const ClientDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_more_info()->::safe_browsing::ClientDownloadResponse_MoreInfo::MergeFrom(from._internal_more_info());
    }
    if (cached_has_bits & 0x00000004u) {
      verdict_ = from.verdict_;
    }
    if (cached_has_bits & 0x00000008u) {
      upload_ = from.upload_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_deep_scan_ = from.request_deep_scan_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadResponse::CopyFrom(const ClientDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadResponse::IsInitialized() const {
  return true;
}

void ClientDownloadResponse::InternalSwap(ClientDownloadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientDownloadResponse, request_deep_scan_)
      + sizeof(ClientDownloadResponse::request_deep_scan_)
      - PROTOBUF_FIELD_OFFSET(ClientDownloadResponse, more_info_)>(
          reinterpret_cast<char*>(&more_info_),
          reinterpret_cast<char*>(&other->more_info_));
}

std::string ClientDownloadResponse::GetTypeName() const {
  return "safe_browsing.ClientDownloadResponse";
}


// ===================================================================

class ClientDownloadReport_UserInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadReport_UserInformation>()._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientDownloadReport_UserInformation::ClientDownloadReport_UserInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadReport.UserInformation)
}
ClientDownloadReport_UserInformation::ClientDownloadReport_UserInformation(const ClientDownloadReport_UserInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email()) {
    email_.Set(from._internal_email(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadReport.UserInformation)
}

inline void ClientDownloadReport_UserInformation::SharedCtor() {
email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientDownloadReport_UserInformation::~ClientDownloadReport_UserInformation() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadReport.UserInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadReport_UserInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.Destroy();
}

void ClientDownloadReport_UserInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadReport_UserInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadReport.UserInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    email_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadReport_UserInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadReport_UserInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadReport.UserInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string email = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadReport.UserInformation)
  return target;
}

size_t ClientDownloadReport_UserInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadReport.UserInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string email = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadReport_UserInformation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadReport_UserInformation*>(
      &from));
}

void ClientDownloadReport_UserInformation::MergeFrom(const ClientDownloadReport_UserInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadReport.UserInformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_email()) {
    _internal_set_email(from._internal_email());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadReport_UserInformation::CopyFrom(const ClientDownloadReport_UserInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadReport.UserInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadReport_UserInformation::IsInitialized() const {
  return true;
}

void ClientDownloadReport_UserInformation::InternalSwap(ClientDownloadReport_UserInformation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
}

std::string ClientDownloadReport_UserInformation::GetTypeName() const {
  return "safe_browsing.ClientDownloadReport.UserInformation";
}


// ===================================================================

class ClientDownloadReport::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientDownloadReport>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::safe_browsing::ClientDownloadRequest& download_request(const ClientDownloadReport* msg);
  static void set_has_download_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::ClientDownloadReport_UserInformation& user_information(const ClientDownloadReport* msg);
  static void set_has_user_information(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientDownloadResponse& download_response(const ClientDownloadReport* msg);
  static void set_has_download_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::safe_browsing::ClientDownloadRequest&
ClientDownloadReport::_Internal::download_request(const ClientDownloadReport* msg) {
  return *msg->download_request_;
}
const ::safe_browsing::ClientDownloadReport_UserInformation&
ClientDownloadReport::_Internal::user_information(const ClientDownloadReport* msg) {
  return *msg->user_information_;
}
const ::safe_browsing::ClientDownloadResponse&
ClientDownloadReport::_Internal::download_response(const ClientDownloadReport* msg) {
  return *msg->download_response_;
}
ClientDownloadReport::ClientDownloadReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientDownloadReport)
}
ClientDownloadReport::ClientDownloadReport(const ClientDownloadReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment()) {
    comment_.Set(from._internal_comment(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_download_request()) {
    download_request_ = new ::safe_browsing::ClientDownloadRequest(*from.download_request_);
  } else {
    download_request_ = nullptr;
  }
  if (from._internal_has_user_information()) {
    user_information_ = new ::safe_browsing::ClientDownloadReport_UserInformation(*from.user_information_);
  } else {
    user_information_ = nullptr;
  }
  if (from._internal_has_download_response()) {
    download_response_ = new ::safe_browsing::ClientDownloadResponse(*from.download_response_);
  } else {
    download_response_ = nullptr;
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientDownloadReport)
}

inline void ClientDownloadReport::SharedCtor() {
comment_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&download_request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&download_request_)) + sizeof(reason_));
}

ClientDownloadReport::~ClientDownloadReport() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientDownloadReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDownloadReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  comment_.Destroy();
  if (this != internal_default_instance()) delete download_request_;
  if (this != internal_default_instance()) delete user_information_;
  if (this != internal_default_instance()) delete download_response_;
}

void ClientDownloadReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDownloadReport::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientDownloadReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(download_request_ != nullptr);
      download_request_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(user_information_ != nullptr);
      user_information_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(download_response_ != nullptr);
      download_response_->Clear();
    }
  }
  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDownloadReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientDownloadReport.Reason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientDownloadReport_Reason_IsValid(val))) {
            _internal_set_reason(static_cast<::safe_browsing::ClientDownloadReport_Reason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest download_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_download_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadReport.UserInformation user_information = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_information(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes comment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadResponse download_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_download_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDownloadReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientDownloadReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientDownloadReport.Reason reason = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest download_request = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::download_request(this),
        _Internal::download_request(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientDownloadReport.UserInformation user_information = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::user_information(this),
        _Internal::user_information(this).GetCachedSize(), target, stream);
  }

  // optional bytes comment = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_comment(), target);
  }

  // optional .safe_browsing.ClientDownloadResponse download_response = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::download_response(this),
        _Internal::download_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientDownloadReport)
  return target;
}

size_t ClientDownloadReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientDownloadReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes comment = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_comment());
    }

    // optional .safe_browsing.ClientDownloadRequest download_request = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *download_request_);
    }

    // optional .safe_browsing.ClientDownloadReport.UserInformation user_information = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_information_);
    }

    // optional .safe_browsing.ClientDownloadResponse download_response = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *download_response_);
    }

    // optional .safe_browsing.ClientDownloadReport.Reason reason = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDownloadReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDownloadReport*>(
      &from));
}

void ClientDownloadReport::MergeFrom(const ClientDownloadReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientDownloadReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_download_request()->::safe_browsing::ClientDownloadRequest::MergeFrom(from._internal_download_request());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_user_information()->::safe_browsing::ClientDownloadReport_UserInformation::MergeFrom(from._internal_user_information());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_download_response()->::safe_browsing::ClientDownloadResponse::MergeFrom(from._internal_download_response());
    }
    if (cached_has_bits & 0x00000010u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDownloadReport::CopyFrom(const ClientDownloadReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientDownloadReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDownloadReport::IsInitialized() const {
  if (_internal_has_download_request()) {
    if (!download_request_->IsInitialized()) return false;
  }
  return true;
}

void ClientDownloadReport::InternalSwap(ClientDownloadReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &comment_, lhs_arena,
      &other->comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientDownloadReport, reason_)
      + sizeof(ClientDownloadReport::reason_)
      - PROTOBUF_FIELD_OFFSET(ClientDownloadReport, download_request_)>(
          reinterpret_cast<char*>(&download_request_),
          reinterpret_cast<char*>(&other->download_request_));
}

std::string ClientDownloadReport::GetTypeName() const {
  return "safe_browsing.ClientDownloadReport";
}


// ===================================================================

class ClientUploadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientUploadResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_permalink(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientUploadResponse::ClientUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientUploadResponse)
}
ClientUploadResponse::ClientUploadResponse(const ClientUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  permalink_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    permalink_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_permalink()) {
    permalink_.Set(from._internal_permalink(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientUploadResponse)
}

inline void ClientUploadResponse::SharedCtor() {
permalink_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  permalink_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

ClientUploadResponse::~ClientUploadResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientUploadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientUploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  permalink_.Destroy();
}

void ClientUploadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientUploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    permalink_.ClearNonDefaultToEmpty();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientUploadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientUploadResponse.UploadStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientUploadResponse_UploadStatus_IsValid(val))) {
            _internal_set_status(static_cast<::safe_browsing::ClientUploadResponse_UploadStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string permalink = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_permalink();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientUploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientUploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientUploadResponse.UploadStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string permalink = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_permalink(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientUploadResponse)
  return target;
}

size_t ClientUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientUploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string permalink = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_permalink());
    }

    // optional .safe_browsing.ClientUploadResponse.UploadStatus status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientUploadResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientUploadResponse*>(
      &from));
}

void ClientUploadResponse::MergeFrom(const ClientUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_permalink(from._internal_permalink());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientUploadResponse::CopyFrom(const ClientUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUploadResponse::IsInitialized() const {
  return true;
}

void ClientUploadResponse::InternalSwap(ClientUploadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &permalink_, lhs_arena,
      &other->permalink_, rhs_arena
  );
  swap(status_, other->status_);
}

std::string ClientUploadResponse::GetTypeName() const {
  return "safe_browsing.ClientUploadResponse";
}


// ===================================================================

class ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_IncidentData_TrackedPreferenceIncident>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_atomic_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClientIncidentReport_IncidentData_TrackedPreferenceIncident::ClientIncidentReport_IncidentData_TrackedPreferenceIncident(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  split_key_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
}
ClientIncidentReport_IncidentData_TrackedPreferenceIncident::ClientIncidentReport_IncidentData_TrackedPreferenceIncident(const ClientIncidentReport_IncidentData_TrackedPreferenceIncident& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      split_key_(from.split_key_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  atomic_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    atomic_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_atomic_value()) {
    atomic_value_.Set(from._internal_atomic_value(), 
      GetArenaForAllocation());
  }
  value_state_ = from.value_state_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
}

inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::SharedCtor() {
path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
atomic_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  atomic_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_state_ = 0;
}

ClientIncidentReport_IncidentData_TrackedPreferenceIncident::~ClientIncidentReport_IncidentData_TrackedPreferenceIncident() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.Destroy();
  atomic_value_.Destroy();
}

void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      atomic_value_.ClearNonDefaultToEmpty();
    }
  }
  value_state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string atomic_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_atomic_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string split_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_split_key();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.ValueState value_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState_IsValid(val))) {
            _internal_set_value_state(static_cast<::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident_ValueState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_IncidentData_TrackedPreferenceIncident::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional string atomic_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_atomic_value(), target);
  }

  // repeated string split_key = 3;
  for (int i = 0, n = this->_internal_split_key_size(); i < n; i++) {
    const auto& s = this->_internal_split_key(i);
    target = stream->WriteString(3, s, target);
  }

  // optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.ValueState value_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_value_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
  return target;
}

size_t ClientIncidentReport_IncidentData_TrackedPreferenceIncident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string split_key = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(split_key_.size());
  for (int i = 0, n = split_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      split_key_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string atomic_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_atomic_value());
    }

    // optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident.ValueState value_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_value_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_IncidentData_TrackedPreferenceIncident*>(
      &from));
}

void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::MergeFrom(const ClientIncidentReport_IncidentData_TrackedPreferenceIncident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  split_key_.MergeFrom(from.split_key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_atomic_value(from._internal_atomic_value());
    }
    if (cached_has_bits & 0x00000004u) {
      value_state_ = from.value_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::CopyFrom(const ClientIncidentReport_IncidentData_TrackedPreferenceIncident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_IncidentData_TrackedPreferenceIncident::IsInitialized() const {
  return true;
}

void ClientIncidentReport_IncidentData_TrackedPreferenceIncident::InternalSwap(ClientIncidentReport_IncidentData_TrackedPreferenceIncident* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  split_key_.InternalSwap(&other->split_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &atomic_value_, lhs_arena,
      &other->atomic_value_, rhs_arena
  );
  swap(value_state_, other->value_state_);
}

std::string ClientIncidentReport_IncidentData_TrackedPreferenceIncident::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident";
}


// ===================================================================

class ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile>()._has_bits_);
  static void set_has_relative_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientDownloadRequest_SignatureInfo& signature(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* msg);
  static void set_has_image_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::safe_browsing::ClientDownloadRequest_SignatureInfo&
ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_Internal::signature(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* msg) {
  return *msg->signature_;
}
const ::safe_browsing::ClientDownloadRequest_ImageHeaders&
ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_Internal::image_headers(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* msg) {
  return *msg->image_headers_;
}
ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
}
ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  relative_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    relative_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_relative_path()) {
    relative_path_.Set(from._internal_relative_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::safe_browsing::ClientDownloadRequest_SignatureInfo(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_image_headers()) {
    image_headers_ = new ::safe_browsing::ClientDownloadRequest_ImageHeaders(*from.image_headers_);
  } else {
    image_headers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
}

inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::SharedCtor() {
relative_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  relative_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_headers_) -
    reinterpret_cast<char*>(&signature_)) + sizeof(image_headers_));
}

ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::~ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  relative_path_.Destroy();
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete image_headers_;
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      relative_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_headers_ != nullptr);
      image_headers_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string relative_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_relative_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relative_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relative_path(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::image_headers(this),
        _Internal::image_headers(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
  return target;
}

size_t ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string relative_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_relative_path());
    }

    // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_headers_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile*>(
      &from));
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::MergeFrom(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_relative_path(from._internal_relative_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signature()->::safe_browsing::ClientDownloadRequest_SignatureInfo::MergeFrom(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_image_headers()->::safe_browsing::ClientDownloadRequest_ImageHeaders::MergeFrom(from._internal_image_headers());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::CopyFrom(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  if (_internal_has_image_headers()) {
    if (!image_headers_->IsInitialized()) return false;
  }
  return true;
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::InternalSwap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &relative_path_, lhs_arena,
      &other->relative_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile, image_headers_)
      + sizeof(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::image_headers_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile, signature_)>(
          reinterpret_cast<char*>(&signature_),
          reinterpret_cast<char*>(&other->signature_));
}

std::string ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile";
}


// ===================================================================

class ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_IncidentData_BinaryIntegrityIncident>()._has_bits_);
  static void set_has_file_basename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientDownloadRequest_SignatureInfo& signature(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident* msg);
  static void set_has_image_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sec_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::safe_browsing::ClientDownloadRequest_SignatureInfo&
ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_Internal::signature(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident* msg) {
  return *msg->signature_;
}
const ::safe_browsing::ClientDownloadRequest_ImageHeaders&
ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_Internal::image_headers(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident* msg) {
  return *msg->image_headers_;
}
ClientIncidentReport_IncidentData_BinaryIntegrityIncident::ClientIncidentReport_IncidentData_BinaryIntegrityIncident(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  contained_file_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
}
ClientIncidentReport_IncidentData_BinaryIntegrityIncident::ClientIncidentReport_IncidentData_BinaryIntegrityIncident(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      contained_file_(from.contained_file_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_basename()) {
    file_basename_.Set(from._internal_file_basename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::safe_browsing::ClientDownloadRequest_SignatureInfo(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_image_headers()) {
    image_headers_ = new ::safe_browsing::ClientDownloadRequest_ImageHeaders(*from.image_headers_);
  } else {
    image_headers_ = nullptr;
  }
  sec_error_ = from.sec_error_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
}

inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::SharedCtor() {
file_basename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_basename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sec_error_) -
    reinterpret_cast<char*>(&signature_)) + sizeof(sec_error_));
}

ClientIncidentReport_IncidentData_BinaryIntegrityIncident::~ClientIncidentReport_IncidentData_BinaryIntegrityIncident() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_basename_.Destroy();
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete image_headers_;
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contained_file_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      file_basename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_headers_ != nullptr);
      image_headers_->Clear();
    }
  }
  sec_error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_basename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_basename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sec_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sec_error(&has_bits);
          sec_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile contained_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained_file(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_IncidentData_BinaryIntegrityIncident::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_basename = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_basename(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::image_headers(this),
        _Internal::image_headers(this).GetCachedSize(), target, stream);
  }

  // optional int32 sec_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sec_error(), target);
  }

  // repeated .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile contained_file = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contained_file_size()); i < n; i++) {
    const auto& repfield = this->_internal_contained_file(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
  return target;
}

size_t ClientIncidentReport_IncidentData_BinaryIntegrityIncident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident.ContainedFile contained_file = 5;
  total_size += 1UL * this->_internal_contained_file_size();
  for (const auto& msg : this->contained_file_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string file_basename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_basename());
    }

    // optional .safe_browsing.ClientDownloadRequest.SignatureInfo signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_headers_);
    }

    // optional int32 sec_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sec_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_IncidentData_BinaryIntegrityIncident*>(
      &from));
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::MergeFrom(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  contained_file_.MergeFrom(from.contained_file_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_basename(from._internal_file_basename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signature()->::safe_browsing::ClientDownloadRequest_SignatureInfo::MergeFrom(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_image_headers()->::safe_browsing::ClientDownloadRequest_ImageHeaders::MergeFrom(from._internal_image_headers());
    }
    if (cached_has_bits & 0x00000008u) {
      sec_error_ = from.sec_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::CopyFrom(const ClientIncidentReport_IncidentData_BinaryIntegrityIncident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_IncidentData_BinaryIntegrityIncident::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(contained_file_))
    return false;
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  if (_internal_has_image_headers()) {
    if (!image_headers_->IsInitialized()) return false;
  }
  return true;
}

void ClientIncidentReport_IncidentData_BinaryIntegrityIncident::InternalSwap(ClientIncidentReport_IncidentData_BinaryIntegrityIncident* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contained_file_.InternalSwap(&other->contained_file_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_basename_, lhs_arena,
      &other->file_basename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_IncidentData_BinaryIntegrityIncident, sec_error_)
      + sizeof(ClientIncidentReport_IncidentData_BinaryIntegrityIncident::sec_error_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_IncidentData_BinaryIntegrityIncident, signature_)>(
          reinterpret_cast<char*>(&signature_),
          reinterpret_cast<char*>(&other->signature_));
}

std::string ClientIncidentReport_IncidentData_BinaryIntegrityIncident::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident";
}


// ===================================================================

class ClientIncidentReport_IncidentData_ResourceRequestIncident::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_IncidentData_ResourceRequestIncident>()._has_bits_);
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClientIncidentReport_IncidentData_ResourceRequestIncident::ClientIncidentReport_IncidentData_ResourceRequestIncident(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
}
ClientIncidentReport_IncidentData_ResourceRequestIncident::ClientIncidentReport_IncidentData_ResourceRequestIncident(const ClientIncidentReport_IncidentData_ResourceRequestIncident& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    digest_.Set(from._internal_digest(), 
      GetArenaForAllocation());
  }
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
}

inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::SharedCtor() {
digest_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  digest_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

ClientIncidentReport_IncidentData_ResourceRequestIncident::~ClientIncidentReport_IncidentData_ResourceRequestIncident() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_IncidentData_ResourceRequestIncident::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  digest_.Destroy();
  origin_.Destroy();
}

void ClientIncidentReport_IncidentData_ResourceRequestIncident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_IncidentData_ResourceRequestIncident::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      origin_.ClearNonDefaultToEmpty();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_IncidentData_ResourceRequestIncident::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.Type type = 3 [default = UNKNOWN];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type_IsValid(val))) {
            _internal_set_type(static_cast<::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_IncidentData_ResourceRequestIncident::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes digest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // optional string origin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  // optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.Type type = 3 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
  return target;
}

size_t ClientIncidentReport_IncidentData_ResourceRequestIncident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes digest = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_digest());
    }

    // optional string origin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident.Type type = 3 [default = UNKNOWN];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_IncidentData_ResourceRequestIncident::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_IncidentData_ResourceRequestIncident*>(
      &from));
}

void ClientIncidentReport_IncidentData_ResourceRequestIncident::MergeFrom(const ClientIncidentReport_IncidentData_ResourceRequestIncident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_IncidentData_ResourceRequestIncident::CopyFrom(const ClientIncidentReport_IncidentData_ResourceRequestIncident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_IncidentData_ResourceRequestIncident::IsInitialized() const {
  return true;
}

void ClientIncidentReport_IncidentData_ResourceRequestIncident::InternalSwap(ClientIncidentReport_IncidentData_ResourceRequestIncident* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &digest_, lhs_arena,
      &other->digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  swap(type_, other->type_);
}

std::string ClientIncidentReport_IncidentData_ResourceRequestIncident::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident";
}


// ===================================================================

class ClientIncidentReport_IncidentData::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_IncidentData>()._has_bits_);
  static void set_has_incident_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident& tracked_preference(const ClientIncidentReport_IncidentData* msg);
  static void set_has_tracked_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident& binary_integrity(const ClientIncidentReport_IncidentData* msg);
  static void set_has_binary_integrity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident& resource_request(const ClientIncidentReport_IncidentData* msg);
  static void set_has_resource_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident&
ClientIncidentReport_IncidentData::_Internal::tracked_preference(const ClientIncidentReport_IncidentData* msg) {
  return *msg->tracked_preference_;
}
const ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident&
ClientIncidentReport_IncidentData::_Internal::binary_integrity(const ClientIncidentReport_IncidentData* msg) {
  return *msg->binary_integrity_;
}
const ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident&
ClientIncidentReport_IncidentData::_Internal::resource_request(const ClientIncidentReport_IncidentData* msg) {
  return *msg->resource_request_;
}
ClientIncidentReport_IncidentData::ClientIncidentReport_IncidentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.IncidentData)
}
ClientIncidentReport_IncidentData::ClientIncidentReport_IncidentData(const ClientIncidentReport_IncidentData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_tracked_preference()) {
    tracked_preference_ = new ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident(*from.tracked_preference_);
  } else {
    tracked_preference_ = nullptr;
  }
  if (from._internal_has_binary_integrity()) {
    binary_integrity_ = new ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident(*from.binary_integrity_);
  } else {
    binary_integrity_ = nullptr;
  }
  if (from._internal_has_resource_request()) {
    resource_request_ = new ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident(*from.resource_request_);
  } else {
    resource_request_ = nullptr;
  }
  incident_time_msec_ = from.incident_time_msec_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.IncidentData)
}

inline void ClientIncidentReport_IncidentData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracked_preference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&incident_time_msec_) -
    reinterpret_cast<char*>(&tracked_preference_)) + sizeof(incident_time_msec_));
}

ClientIncidentReport_IncidentData::~ClientIncidentReport_IncidentData() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.IncidentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_IncidentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tracked_preference_;
  if (this != internal_default_instance()) delete binary_integrity_;
  if (this != internal_default_instance()) delete resource_request_;
}

void ClientIncidentReport_IncidentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_IncidentData::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.IncidentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tracked_preference_ != nullptr);
      tracked_preference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(binary_integrity_ != nullptr);
      binary_integrity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resource_request_ != nullptr);
      resource_request_->Clear();
    }
  }
  incident_time_msec_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_IncidentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 incident_time_msec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_incident_time_msec(&has_bits);
          incident_time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident tracked_preference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracked_preference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident binary_integrity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_integrity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident resource_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_IncidentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.IncidentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 incident_time_msec = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_incident_time_msec(), target);
  }

  // optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident tracked_preference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tracked_preference(this),
        _Internal::tracked_preference(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident binary_integrity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::binary_integrity(this),
        _Internal::binary_integrity(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident resource_request = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::resource_request(this),
        _Internal::resource_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.IncidentData)
  return target;
}

size_t ClientIncidentReport_IncidentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.IncidentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .safe_browsing.ClientIncidentReport.IncidentData.TrackedPreferenceIncident tracked_preference = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracked_preference_);
    }

    // optional .safe_browsing.ClientIncidentReport.IncidentData.BinaryIntegrityIncident binary_integrity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *binary_integrity_);
    }

    // optional .safe_browsing.ClientIncidentReport.IncidentData.ResourceRequestIncident resource_request = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_request_);
    }

    // optional int64 incident_time_msec = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_incident_time_msec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_IncidentData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_IncidentData*>(
      &from));
}

void ClientIncidentReport_IncidentData::MergeFrom(const ClientIncidentReport_IncidentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.IncidentData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tracked_preference()->::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident::MergeFrom(from._internal_tracked_preference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_binary_integrity()->::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident::MergeFrom(from._internal_binary_integrity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resource_request()->::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident::MergeFrom(from._internal_resource_request());
    }
    if (cached_has_bits & 0x00000008u) {
      incident_time_msec_ = from.incident_time_msec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_IncidentData::CopyFrom(const ClientIncidentReport_IncidentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.IncidentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_IncidentData::IsInitialized() const {
  if (_internal_has_binary_integrity()) {
    if (!binary_integrity_->IsInitialized()) return false;
  }
  return true;
}

void ClientIncidentReport_IncidentData::InternalSwap(ClientIncidentReport_IncidentData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_IncidentData, incident_time_msec_)
      + sizeof(ClientIncidentReport_IncidentData::incident_time_msec_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_IncidentData, tracked_preference_)>(
          reinterpret_cast<char*>(&tracked_preference_),
          reinterpret_cast<char*>(&other->tracked_preference_));
}

std::string ClientIncidentReport_IncidentData::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.IncidentData";
}


// ===================================================================

class ClientIncidentReport_DownloadDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_DownloadDetails>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientDownloadRequest& download(const ClientIncidentReport_DownloadDetails* msg);
  static void set_has_download(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_download_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_open_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::safe_browsing::ClientDownloadRequest&
ClientIncidentReport_DownloadDetails::_Internal::download(const ClientIncidentReport_DownloadDetails* msg) {
  return *msg->download_;
}
ClientIncidentReport_DownloadDetails::ClientIncidentReport_DownloadDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.DownloadDetails)
}
ClientIncidentReport_DownloadDetails::ClientIncidentReport_DownloadDetails(const ClientIncidentReport_DownloadDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_download()) {
    download_ = new ::safe_browsing::ClientDownloadRequest(*from.download_);
  } else {
    download_ = nullptr;
  }
  ::memcpy(&download_time_msec_, &from.download_time_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_time_msec_) -
    reinterpret_cast<char*>(&download_time_msec_)) + sizeof(open_time_msec_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.DownloadDetails)
}

inline void ClientIncidentReport_DownloadDetails::SharedCtor() {
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&download_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&open_time_msec_) -
    reinterpret_cast<char*>(&download_)) + sizeof(open_time_msec_));
}

ClientIncidentReport_DownloadDetails::~ClientIncidentReport_DownloadDetails() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.DownloadDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_DownloadDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.Destroy();
  if (this != internal_default_instance()) delete download_;
}

void ClientIncidentReport_DownloadDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_DownloadDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.DownloadDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(download_ != nullptr);
      download_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&download_time_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&open_time_msec_) -
        reinterpret_cast<char*>(&download_time_msec_)) + sizeof(open_time_msec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_DownloadDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest download = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_download(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 download_time_msec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_download_time_msec(&has_bits);
          download_time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 open_time_msec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_open_time_msec(&has_bits);
          open_time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_DownloadDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.DownloadDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // optional .safe_browsing.ClientDownloadRequest download = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::download(this),
        _Internal::download(this).GetCachedSize(), target, stream);
  }

  // optional int64 download_time_msec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_download_time_msec(), target);
  }

  // optional int64 open_time_msec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_open_time_msec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.DownloadDetails)
  return target;
}

size_t ClientIncidentReport_DownloadDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.DownloadDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional .safe_browsing.ClientDownloadRequest download = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *download_);
    }

    // optional int64 download_time_msec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_download_time_msec());
    }

    // optional int64 open_time_msec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_open_time_msec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_DownloadDetails::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_DownloadDetails*>(
      &from));
}

void ClientIncidentReport_DownloadDetails::MergeFrom(const ClientIncidentReport_DownloadDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.DownloadDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_download()->::safe_browsing::ClientDownloadRequest::MergeFrom(from._internal_download());
    }
    if (cached_has_bits & 0x00000004u) {
      download_time_msec_ = from.download_time_msec_;
    }
    if (cached_has_bits & 0x00000008u) {
      open_time_msec_ = from.open_time_msec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_DownloadDetails::CopyFrom(const ClientIncidentReport_DownloadDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.DownloadDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_DownloadDetails::IsInitialized() const {
  if (_internal_has_download()) {
    if (!download_->IsInitialized()) return false;
  }
  return true;
}

void ClientIncidentReport_DownloadDetails::InternalSwap(ClientIncidentReport_DownloadDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_DownloadDetails, open_time_msec_)
      + sizeof(ClientIncidentReport_DownloadDetails::open_time_msec_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_DownloadDetails, download_)>(
          reinterpret_cast<char*>(&download_),
          reinterpret_cast<char*>(&other->download_));
}

std::string ClientIncidentReport_DownloadDetails::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.DownloadDetails";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_OS_RegistryValue::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_OS_RegistryValue>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientIncidentReport_EnvironmentData_OS_RegistryValue::ClientIncidentReport_EnvironmentData_OS_RegistryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
}
ClientIncidentReport_EnvironmentData_OS_RegistryValue::ClientIncidentReport_EnvironmentData_OS_RegistryValue(const ClientIncidentReport_EnvironmentData_OS_RegistryValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
}

inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0u;
}

ClientIncidentReport_EnvironmentData_OS_RegistryValue::~ClientIncidentReport_EnvironmentData_OS_RegistryValue() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_OS_RegistryValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  data_.Destroy();
}

void ClientIncidentReport_EnvironmentData_OS_RegistryValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_OS_RegistryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_OS_RegistryValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_OS_RegistryValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_OS_RegistryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_OS_RegistryValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_OS_RegistryValue*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_OS_RegistryValue::MergeFrom(const ClientIncidentReport_EnvironmentData_OS_RegistryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_OS_RegistryValue::CopyFrom(const ClientIncidentReport_EnvironmentData_OS_RegistryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_OS_RegistryValue::IsInitialized() const {
  return true;
}

void ClientIncidentReport_EnvironmentData_OS_RegistryValue::InternalSwap(ClientIncidentReport_EnvironmentData_OS_RegistryValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(type_, other->type_);
}

std::string ClientIncidentReport_EnvironmentData_OS_RegistryValue::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_OS_RegistryKey::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_OS_RegistryKey>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientIncidentReport_EnvironmentData_OS_RegistryKey::ClientIncidentReport_EnvironmentData_OS_RegistryKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  value_(arena),
  key_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
}
ClientIncidentReport_EnvironmentData_OS_RegistryKey::ClientIncidentReport_EnvironmentData_OS_RegistryKey(const ClientIncidentReport_EnvironmentData_OS_RegistryKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      value_(from.value_),
      key_(from.key_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
}

inline void ClientIncidentReport_EnvironmentData_OS_RegistryKey::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientIncidentReport_EnvironmentData_OS_RegistryKey::~ClientIncidentReport_EnvironmentData_OS_RegistryKey() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_OS_RegistryKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ClientIncidentReport_EnvironmentData_OS_RegistryKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_OS_RegistryKey::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_OS_RegistryKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_OS_RegistryKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue value = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey key = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_OS_RegistryKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryValue value = 2;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey key = 3;
  total_size += 1UL * this->_internal_key_size();
  for (const auto& msg : this->key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_OS_RegistryKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_OS_RegistryKey*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_OS_RegistryKey::MergeFrom(const ClientIncidentReport_EnvironmentData_OS_RegistryKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  key_.MergeFrom(from.key_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_OS_RegistryKey::CopyFrom(const ClientIncidentReport_EnvironmentData_OS_RegistryKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_OS_RegistryKey::IsInitialized() const {
  return true;
}

void ClientIncidentReport_EnvironmentData_OS_RegistryKey::InternalSwap(ClientIncidentReport_EnvironmentData_OS_RegistryKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  key_.InternalSwap(&other->key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

std::string ClientIncidentReport_EnvironmentData_OS_RegistryKey::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_OS::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_OS>()._has_bits_);
  static void set_has_os_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_os_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_enrolled_to_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClientIncidentReport_EnvironmentData_OS::ClientIncidentReport_EnvironmentData_OS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  registry_key_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
}
ClientIncidentReport_EnvironmentData_OS::ClientIncidentReport_EnvironmentData_OS(const ClientIncidentReport_EnvironmentData_OS& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      registry_key_(from.registry_key_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  os_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_os_name()) {
    os_name_.Set(from._internal_os_name(), 
      GetArenaForAllocation());
  }
  os_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_os_version()) {
    os_version_.Set(from._internal_os_version(), 
      GetArenaForAllocation());
  }
  is_enrolled_to_domain_ = from.is_enrolled_to_domain_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
}

inline void ClientIncidentReport_EnvironmentData_OS::SharedCtor() {
os_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
is_enrolled_to_domain_ = false;
}

ClientIncidentReport_EnvironmentData_OS::~ClientIncidentReport_EnvironmentData_OS() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_OS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  os_name_.Destroy();
  os_version_.Destroy();
}

void ClientIncidentReport_EnvironmentData_OS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_OS::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registry_key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      os_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      os_version_.ClearNonDefaultToEmpty();
    }
  }
  is_enrolled_to_domain_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_OS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string os_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_os_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string os_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_os_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey registry_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_registry_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_enrolled_to_domain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_enrolled_to_domain(&has_bits);
          is_enrolled_to_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_OS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string os_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_os_name(), target);
  }

  // optional string os_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_os_version(), target);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey registry_key = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_registry_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_registry_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_enrolled_to_domain = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_enrolled_to_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_OS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.OS.RegistryKey registry_key = 3;
  total_size += 1UL * this->_internal_registry_key_size();
  for (const auto& msg : this->registry_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string os_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os_name());
    }

    // optional string os_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os_version());
    }

    // optional bool is_enrolled_to_domain = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_OS::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_OS*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_OS::MergeFrom(const ClientIncidentReport_EnvironmentData_OS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  registry_key_.MergeFrom(from.registry_key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_os_name(from._internal_os_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_os_version(from._internal_os_version());
    }
    if (cached_has_bits & 0x00000004u) {
      is_enrolled_to_domain_ = from.is_enrolled_to_domain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_OS::CopyFrom(const ClientIncidentReport_EnvironmentData_OS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.OS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_OS::IsInitialized() const {
  return true;
}

void ClientIncidentReport_EnvironmentData_OS::InternalSwap(ClientIncidentReport_EnvironmentData_OS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  registry_key_.InternalSwap(&other->registry_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &os_name_, lhs_arena,
      &other->os_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &os_version_, lhs_arena,
      &other->os_version_, rhs_arena
  );
  swap(is_enrolled_to_domain_, other->is_enrolled_to_domain_);
}

std::string ClientIncidentReport_EnvironmentData_OS::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.OS";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_Machine::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_Machine>()._has_bits_);
  static void set_has_cpu_architecture(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cpu_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cpuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClientIncidentReport_EnvironmentData_Machine::ClientIncidentReport_EnvironmentData_Machine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
}
ClientIncidentReport_EnvironmentData_Machine::ClientIncidentReport_EnvironmentData_Machine(const ClientIncidentReport_EnvironmentData_Machine& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  cpu_architecture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cpu_architecture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cpu_architecture()) {
    cpu_architecture_.Set(from._internal_cpu_architecture(), 
      GetArenaForAllocation());
  }
  cpu_vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cpu_vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cpu_vendor()) {
    cpu_vendor_.Set(from._internal_cpu_vendor(), 
      GetArenaForAllocation());
  }
  cpuid_ = from.cpuid_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
}

inline void ClientIncidentReport_EnvironmentData_Machine::SharedCtor() {
cpu_architecture_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cpu_architecture_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cpu_vendor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cpu_vendor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cpuid_ = 0u;
}

ClientIncidentReport_EnvironmentData_Machine::~ClientIncidentReport_EnvironmentData_Machine() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_Machine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cpu_architecture_.Destroy();
  cpu_vendor_.Destroy();
}

void ClientIncidentReport_EnvironmentData_Machine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_Machine::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cpu_architecture_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cpu_vendor_.ClearNonDefaultToEmpty();
    }
  }
  cpuid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_Machine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string cpu_architecture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cpu_architecture();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cpu_vendor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cpu_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cpuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cpuid(&has_bits);
          cpuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_Machine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cpu_architecture = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu_architecture(), target);
  }

  // optional string cpu_vendor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpu_vendor(), target);
  }

  // optional uint32 cpuid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cpuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_Machine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string cpu_architecture = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpu_architecture());
    }

    // optional string cpu_vendor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpu_vendor());
    }

    // optional uint32 cpuid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpuid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_Machine::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_Machine*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_Machine::MergeFrom(const ClientIncidentReport_EnvironmentData_Machine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cpu_architecture(from._internal_cpu_architecture());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cpu_vendor(from._internal_cpu_vendor());
    }
    if (cached_has_bits & 0x00000004u) {
      cpuid_ = from.cpuid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_Machine::CopyFrom(const ClientIncidentReport_EnvironmentData_Machine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_Machine::IsInitialized() const {
  return true;
}

void ClientIncidentReport_EnvironmentData_Machine::InternalSwap(ClientIncidentReport_EnvironmentData_Machine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cpu_architecture_, lhs_arena,
      &other->cpu_architecture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cpu_vendor_, lhs_arena,
      &other->cpu_vendor_, rhs_arena
  );
  swap(cpuid_, other->cpuid_);
}

std::string ClientIncidentReport_EnvironmentData_Machine::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.Machine";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_Process_Patch::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_Process_Patch>()._has_bits_);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_dll(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientIncidentReport_EnvironmentData_Process_Patch::ClientIncidentReport_EnvironmentData_Process_Patch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
}
ClientIncidentReport_EnvironmentData_Process_Patch::ClientIncidentReport_EnvironmentData_Process_Patch(const ClientIncidentReport_EnvironmentData_Process_Patch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  function_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    function_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_function()) {
    function_.Set(from._internal_function(), 
      GetArenaForAllocation());
  }
  target_dll_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_dll_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_dll()) {
    target_dll_.Set(from._internal_target_dll(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
}

inline void ClientIncidentReport_EnvironmentData_Process_Patch::SharedCtor() {
function_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  function_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_dll_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_dll_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientIncidentReport_EnvironmentData_Process_Patch::~ClientIncidentReport_EnvironmentData_Process_Patch() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_Process_Patch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_.Destroy();
  target_dll_.Destroy();
}

void ClientIncidentReport_EnvironmentData_Process_Patch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_Process_Patch::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      function_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      target_dll_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_Process_Patch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string target_dll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_dll();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_Process_Patch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string function = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function(), target);
  }

  // optional string target_dll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_dll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_Process_Patch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string function = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_function());
    }

    // optional string target_dll = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_dll());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_Process_Patch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_Process_Patch*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_Process_Patch::MergeFrom(const ClientIncidentReport_EnvironmentData_Process_Patch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function(from._internal_function());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target_dll(from._internal_target_dll());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_Process_Patch::CopyFrom(const ClientIncidentReport_EnvironmentData_Process_Patch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_Process_Patch::IsInitialized() const {
  return true;
}

void ClientIncidentReport_EnvironmentData_Process_Patch::InternalSwap(ClientIncidentReport_EnvironmentData_Process_Patch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &function_, lhs_arena,
      &other->function_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &target_dll_, lhs_arena,
      &other->target_dll_, rhs_arena
  );
}

std::string ClientIncidentReport_EnvironmentData_Process_Patch::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_Process_NetworkProvider::_Internal {
 public:
};

ClientIncidentReport_EnvironmentData_Process_NetworkProvider::ClientIncidentReport_EnvironmentData_Process_NetworkProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
}
ClientIncidentReport_EnvironmentData_Process_NetworkProvider::ClientIncidentReport_EnvironmentData_Process_NetworkProvider(const ClientIncidentReport_EnvironmentData_Process_NetworkProvider& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
}

inline void ClientIncidentReport_EnvironmentData_Process_NetworkProvider::SharedCtor() {
}

ClientIncidentReport_EnvironmentData_Process_NetworkProvider::~ClientIncidentReport_EnvironmentData_Process_NetworkProvider() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_Process_NetworkProvider::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientIncidentReport_EnvironmentData_Process_NetworkProvider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_Process_NetworkProvider::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_Process_NetworkProvider::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_Process_NetworkProvider::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_Process_NetworkProvider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_Process_NetworkProvider::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_Process_NetworkProvider*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_Process_NetworkProvider::MergeFrom(const ClientIncidentReport_EnvironmentData_Process_NetworkProvider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_Process_NetworkProvider::CopyFrom(const ClientIncidentReport_EnvironmentData_Process_NetworkProvider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_Process_NetworkProvider::IsInitialized() const {
  return true;
}

void ClientIncidentReport_EnvironmentData_Process_NetworkProvider::InternalSwap(ClientIncidentReport_EnvironmentData_Process_NetworkProvider* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string ClientIncidentReport_EnvironmentData_Process_NetworkProvider::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_Process_Dll::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_Process_Dll>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::safe_browsing::ClientDownloadRequest_ImageHeaders& image_headers(const ClientIncidentReport_EnvironmentData_Process_Dll* msg);
  static void set_has_image_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::ClientDownloadRequest_ImageHeaders&
ClientIncidentReport_EnvironmentData_Process_Dll::_Internal::image_headers(const ClientIncidentReport_EnvironmentData_Process_Dll* msg) {
  return *msg->image_headers_;
}
ClientIncidentReport_EnvironmentData_Process_Dll::ClientIncidentReport_EnvironmentData_Process_Dll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  feature_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
}
ClientIncidentReport_EnvironmentData_Process_Dll::ClientIncidentReport_EnvironmentData_Process_Dll(const ClientIncidentReport_EnvironmentData_Process_Dll& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_image_headers()) {
    image_headers_ = new ::safe_browsing::ClientDownloadRequest_ImageHeaders(*from.image_headers_);
  } else {
    image_headers_ = nullptr;
  }
  ::memcpy(&base_address_, &from.base_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&base_address_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
}

inline void ClientIncidentReport_EnvironmentData_Process_Dll::SharedCtor() {
path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_headers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&image_headers_)) + sizeof(length_));
}

ClientIncidentReport_EnvironmentData_Process_Dll::~ClientIncidentReport_EnvironmentData_Process_Dll() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_Process_Dll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.Destroy();
  if (this != internal_default_instance()) delete image_headers_;
}

void ClientIncidentReport_EnvironmentData_Process_Dll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_Process_Dll::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(image_headers_ != nullptr);
      image_headers_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&base_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&base_address_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_Process_Dll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 base_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_base_address(&has_bits);
          base_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.Feature feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature_IsValid(val))) {
              _internal_add_feature(static_cast<::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_feature(), ptr, ctx, ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll_Feature_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_Process_Dll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional uint64 base_address = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_base_address(), target);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.Feature feature = 4;
  for (int i = 0, n = this->_internal_feature_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_feature(i), target);
  }

  // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::image_headers(this),
        _Internal::image_headers(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_Process_Dll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll.Feature feature = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_feature_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_feature(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional .safe_browsing.ClientDownloadRequest.ImageHeaders image_headers = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_headers_);
    }

    // optional uint64 base_address = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_address());
    }

    // optional uint32 length = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_Process_Dll::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_Process_Dll*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_Process_Dll::MergeFrom(const ClientIncidentReport_EnvironmentData_Process_Dll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_image_headers()->::safe_browsing::ClientDownloadRequest_ImageHeaders::MergeFrom(from._internal_image_headers());
    }
    if (cached_has_bits & 0x00000004u) {
      base_address_ = from.base_address_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_Process_Dll::CopyFrom(const ClientIncidentReport_EnvironmentData_Process_Dll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_Process_Dll::IsInitialized() const {
  if (_internal_has_image_headers()) {
    if (!image_headers_->IsInitialized()) return false;
  }
  return true;
}

void ClientIncidentReport_EnvironmentData_Process_Dll::InternalSwap(ClientIncidentReport_EnvironmentData_Process_Dll* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_.InternalSwap(&other->feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_EnvironmentData_Process_Dll, length_)
      + sizeof(ClientIncidentReport_EnvironmentData_Process_Dll::length_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_EnvironmentData_Process_Dll, image_headers_)>(
          reinterpret_cast<char*>(&image_headers_),
          reinterpret_cast<char*>(&other->image_headers_));
}

std::string ClientIncidentReport_EnvironmentData_Process_Dll::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification>()._has_bits_);
  static void set_has_file_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_byte_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_modified_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_export_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
}
ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification(const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  modified_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    modified_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_modified_bytes()) {
    modified_bytes_.Set(from._internal_modified_bytes(), 
      GetArenaForAllocation());
  }
  export_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    export_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_export_name()) {
    export_name_.Set(from._internal_export_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&file_offset_, &from.file_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&byte_count_) -
    reinterpret_cast<char*>(&file_offset_)) + sizeof(byte_count_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
}

inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::SharedCtor() {
modified_bytes_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  modified_bytes_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
export_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  export_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&byte_count_) -
    reinterpret_cast<char*>(&file_offset_)) + sizeof(byte_count_));
}

ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::~ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modified_bytes_.Destroy();
  export_name_.Destroy();
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      modified_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      export_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&file_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&byte_count_) -
        reinterpret_cast<char*>(&file_offset_)) + sizeof(byte_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 file_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_file_offset(&has_bits);
          file_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 byte_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_byte_count(&has_bits);
          byte_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes modified_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_modified_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string export_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_export_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 file_offset = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_file_offset(), target);
  }

  // optional int32 byte_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_byte_count(), target);
  }

  // optional bytes modified_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_modified_bytes(), target);
  }

  // optional string export_name = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_export_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes modified_bytes = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_modified_bytes());
    }

    // optional string export_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_export_name());
    }

    // optional uint32 file_offset = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_offset());
    }

    // optional int32 byte_count = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_byte_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::MergeFrom(const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_modified_bytes(from._internal_modified_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_export_name(from._internal_export_name());
    }
    if (cached_has_bits & 0x00000004u) {
      file_offset_ = from.file_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      byte_count_ = from.byte_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::CopyFrom(const ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::IsInitialized() const {
  return true;
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::InternalSwap(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &modified_bytes_, lhs_arena,
      &other->modified_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &export_name_, lhs_arena,
      &other->export_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification, byte_count_)
      + sizeof(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::byte_count_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification, file_offset_)>(
          reinterpret_cast<char*>(&file_offset_),
          reinterpret_cast<char*>(&other->file_offset_));
}

std::string ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_Process_ModuleState::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_Process_ModuleState>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_modified_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientIncidentReport_EnvironmentData_Process_ModuleState::ClientIncidentReport_EnvironmentData_Process_ModuleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  obsolete_modified_export_(arena),
  modification_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
}
ClientIncidentReport_EnvironmentData_Process_ModuleState::ClientIncidentReport_EnvironmentData_Process_ModuleState(const ClientIncidentReport_EnvironmentData_Process_ModuleState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      obsolete_modified_export_(from.obsolete_modified_export_),
      modification_(from.modification_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  modified_state_ = from.modified_state_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
}

inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
modified_state_ = 0;
}

ClientIncidentReport_EnvironmentData_Process_ModuleState::~ClientIncidentReport_EnvironmentData_Process_ModuleState() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_Process_ModuleState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obsolete_modified_export_.Clear();
  modification_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  modified_state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_Process_ModuleState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.ModifiedState modified_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState_IsValid(val))) {
            _internal_set_modified_state(static_cast<::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_ModifiedState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string OBSOLETE_modified_export = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_obsolete_modified_export();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification modification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_Process_ModuleState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.ModifiedState modified_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_modified_state(), target);
  }

  // repeated string OBSOLETE_modified_export = 3;
  for (int i = 0, n = this->_internal_obsolete_modified_export_size(); i < n; i++) {
    const auto& s = this->_internal_obsolete_modified_export(i);
    target = stream->WriteString(3, s, target);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification modification = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modification_size()); i < n; i++) {
    const auto& repfield = this->_internal_modification(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_Process_ModuleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string OBSOLETE_modified_export = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(obsolete_modified_export_.size());
  for (int i = 0, n = obsolete_modified_export_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      obsolete_modified_export_.Get(i));
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.Modification modification = 4;
  total_size += 1UL * this->_internal_modification_size();
  for (const auto& msg : this->modification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState.ModifiedState modified_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_modified_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_Process_ModuleState*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState::MergeFrom(const ClientIncidentReport_EnvironmentData_Process_ModuleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obsolete_modified_export_.MergeFrom(from.obsolete_modified_export_);
  modification_.MergeFrom(from.modification_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      modified_state_ = from.modified_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState::CopyFrom(const ClientIncidentReport_EnvironmentData_Process_ModuleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_Process_ModuleState::IsInitialized() const {
  return true;
}

void ClientIncidentReport_EnvironmentData_Process_ModuleState::InternalSwap(ClientIncidentReport_EnvironmentData_Process_ModuleState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsolete_modified_export_.InternalSwap(&other->obsolete_modified_export_);
  modification_.InternalSwap(&other->modification_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(modified_state_, other->modified_state_);
}

std::string ClientIncidentReport_EnvironmentData_Process_ModuleState::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData_Process::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData_Process>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chrome_update_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uptime_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metrics_consent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_obsolete_extended_consent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_obsolete_field_trial_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ClientIncidentReport_EnvironmentData_Process::ClientIncidentReport_EnvironmentData_Process(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  obsolete_dlls_(arena),
  patches_(arena),
  network_providers_(arena),
  dll_(arena),
  blocklisted_dll_(arena),
  module_state_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
}
ClientIncidentReport_EnvironmentData_Process::ClientIncidentReport_EnvironmentData_Process(const ClientIncidentReport_EnvironmentData_Process& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      obsolete_dlls_(from.obsolete_dlls_),
      patches_(from.patches_),
      network_providers_(from.network_providers_),
      dll_(from.dll_),
      blocklisted_dll_(from.blocklisted_dll_),
      module_state_(from.module_state_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uptime_msec_, &from.uptime_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&obsolete_field_trial_participant_) -
    reinterpret_cast<char*>(&uptime_msec_)) + sizeof(obsolete_field_trial_participant_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
}

inline void ClientIncidentReport_EnvironmentData_Process::SharedCtor() {
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uptime_msec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&obsolete_field_trial_participant_) -
    reinterpret_cast<char*>(&uptime_msec_)) + sizeof(obsolete_field_trial_participant_));
}

ClientIncidentReport_EnvironmentData_Process::~ClientIncidentReport_EnvironmentData_Process() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData_Process::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.Destroy();
}

void ClientIncidentReport_EnvironmentData_Process::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obsolete_dlls_.Clear();
  patches_.Clear();
  network_providers_.Clear();
  dll_.Clear();
  blocklisted_dll_.Clear();
  module_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&uptime_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obsolete_field_trial_participant_) -
        reinterpret_cast<char*>(&uptime_msec_)) + sizeof(obsolete_field_trial_participant_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData_Process::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string OBSOLETE_dlls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_obsolete_dlls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch patches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider network_providers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_network_providers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Channel chrome_update_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel_IsValid(val))) {
            _internal_set_chrome_update_channel(static_cast<::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Channel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 uptime_msec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_uptime_msec(&has_bits);
          uptime_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool metrics_consent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_metrics_consent(&has_bits);
          metrics_consent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool OBSOLETE_extended_consent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_obsolete_extended_consent(&has_bits);
          obsolete_extended_consent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll dll = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dll(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string blocklisted_dll = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blocklisted_dll();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState module_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool OBSOLETE_field_trial_participant = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_obsolete_field_trial_participant(&has_bits);
          obsolete_field_trial_participant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData_Process::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated string OBSOLETE_dlls = 2;
  for (int i = 0, n = this->_internal_obsolete_dlls_size(); i < n; i++) {
    const auto& s = this->_internal_obsolete_dlls(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch patches = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_patches_size()); i < n; i++) {
    const auto& repfield = this->_internal_patches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider network_providers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_network_providers_size()); i < n; i++) {
    const auto& repfield = this->_internal_network_providers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Channel chrome_update_channel = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_chrome_update_channel(), target);
  }

  // optional int64 uptime_msec = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_uptime_msec(), target);
  }

  // optional bool metrics_consent = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_metrics_consent(), target);
  }

  // optional bool OBSOLETE_extended_consent = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_obsolete_extended_consent(), target);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll dll = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dll_size()); i < n; i++) {
    const auto& repfield = this->_internal_dll(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string blocklisted_dll = 10;
  for (int i = 0, n = this->_internal_blocklisted_dll_size(); i < n; i++) {
    const auto& s = this->_internal_blocklisted_dll(i);
    target = stream->WriteString(10, s, target);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState module_state = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_module_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_module_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool OBSOLETE_field_trial_participant = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_obsolete_field_trial_participant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
  return target;
}

size_t ClientIncidentReport_EnvironmentData_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string OBSOLETE_dlls = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(obsolete_dlls_.size());
  for (int i = 0, n = obsolete_dlls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      obsolete_dlls_.Get(i));
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Patch patches = 3;
  total_size += 1UL * this->_internal_patches_size();
  for (const auto& msg : this->patches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.NetworkProvider network_providers = 4;
  total_size += 1UL * this->_internal_network_providers_size();
  for (const auto& msg : this->network_providers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Dll dll = 9;
  total_size += 1UL * this->_internal_dll_size();
  for (const auto& msg : this->dll_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string blocklisted_dll = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blocklisted_dll_.size());
  for (int i = 0, n = blocklisted_dll_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blocklisted_dll_.Get(i));
  }

  // repeated .safe_browsing.ClientIncidentReport.EnvironmentData.Process.ModuleState module_state = 11;
  total_size += 1UL * this->_internal_module_state_size();
  for (const auto& msg : this->module_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional int64 uptime_msec = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uptime_msec());
    }

    // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process.Channel chrome_update_channel = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_chrome_update_channel());
    }

    // optional bool metrics_consent = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool OBSOLETE_extended_consent = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool OBSOLETE_field_trial_participant = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData_Process::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData_Process*>(
      &from));
}

void ClientIncidentReport_EnvironmentData_Process::MergeFrom(const ClientIncidentReport_EnvironmentData_Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obsolete_dlls_.MergeFrom(from.obsolete_dlls_);
  patches_.MergeFrom(from.patches_);
  network_providers_.MergeFrom(from.network_providers_);
  dll_.MergeFrom(from.dll_);
  blocklisted_dll_.MergeFrom(from.blocklisted_dll_);
  module_state_.MergeFrom(from.module_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      uptime_msec_ = from.uptime_msec_;
    }
    if (cached_has_bits & 0x00000004u) {
      chrome_update_channel_ = from.chrome_update_channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      metrics_consent_ = from.metrics_consent_;
    }
    if (cached_has_bits & 0x00000010u) {
      obsolete_extended_consent_ = from.obsolete_extended_consent_;
    }
    if (cached_has_bits & 0x00000020u) {
      obsolete_field_trial_participant_ = from.obsolete_field_trial_participant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData_Process::CopyFrom(const ClientIncidentReport_EnvironmentData_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData_Process::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dll_))
    return false;
  return true;
}

void ClientIncidentReport_EnvironmentData_Process::InternalSwap(ClientIncidentReport_EnvironmentData_Process* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsolete_dlls_.InternalSwap(&other->obsolete_dlls_);
  patches_.InternalSwap(&other->patches_);
  network_providers_.InternalSwap(&other->network_providers_);
  dll_.InternalSwap(&other->dll_);
  blocklisted_dll_.InternalSwap(&other->blocklisted_dll_);
  module_state_.InternalSwap(&other->module_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_EnvironmentData_Process, obsolete_field_trial_participant_)
      + sizeof(ClientIncidentReport_EnvironmentData_Process::obsolete_field_trial_participant_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_EnvironmentData_Process, uptime_msec_)>(
          reinterpret_cast<char*>(&uptime_msec_),
          reinterpret_cast<char*>(&other->uptime_msec_));
}

std::string ClientIncidentReport_EnvironmentData_Process::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData.Process";
}


// ===================================================================

class ClientIncidentReport_EnvironmentData::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_EnvironmentData>()._has_bits_);
  static const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS& os(const ClientIncidentReport_EnvironmentData* msg);
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine& machine(const ClientIncidentReport_EnvironmentData* msg);
  static void set_has_machine(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process& process(const ClientIncidentReport_EnvironmentData* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::safe_browsing::ClientIncidentReport_EnvironmentData_OS&
ClientIncidentReport_EnvironmentData::_Internal::os(const ClientIncidentReport_EnvironmentData* msg) {
  return *msg->os_;
}
const ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine&
ClientIncidentReport_EnvironmentData::_Internal::machine(const ClientIncidentReport_EnvironmentData* msg) {
  return *msg->machine_;
}
const ::safe_browsing::ClientIncidentReport_EnvironmentData_Process&
ClientIncidentReport_EnvironmentData::_Internal::process(const ClientIncidentReport_EnvironmentData* msg) {
  return *msg->process_;
}
ClientIncidentReport_EnvironmentData::ClientIncidentReport_EnvironmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.EnvironmentData)
}
ClientIncidentReport_EnvironmentData::ClientIncidentReport_EnvironmentData(const ClientIncidentReport_EnvironmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_os()) {
    os_ = new ::safe_browsing::ClientIncidentReport_EnvironmentData_OS(*from.os_);
  } else {
    os_ = nullptr;
  }
  if (from._internal_has_machine()) {
    machine_ = new ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine(*from.machine_);
  } else {
    machine_ = nullptr;
  }
  if (from._internal_has_process()) {
    process_ = new ::safe_browsing::ClientIncidentReport_EnvironmentData_Process(*from.process_);
  } else {
    process_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.EnvironmentData)
}

inline void ClientIncidentReport_EnvironmentData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&os_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&process_) -
    reinterpret_cast<char*>(&os_)) + sizeof(process_));
}

ClientIncidentReport_EnvironmentData::~ClientIncidentReport_EnvironmentData() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.EnvironmentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_EnvironmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete os_;
  if (this != internal_default_instance()) delete machine_;
  if (this != internal_default_instance()) delete process_;
}

void ClientIncidentReport_EnvironmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_EnvironmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.EnvironmentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(os_ != nullptr);
      os_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(machine_ != nullptr);
      machine_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(process_ != nullptr);
      process_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_EnvironmentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientIncidentReport.EnvironmentData.OS os = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_os(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Machine machine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process process = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_EnvironmentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.EnvironmentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.OS os = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::os(this),
        _Internal::os(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Machine machine = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::machine(this),
        _Internal::machine(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process process = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::process(this),
        _Internal::process(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.EnvironmentData)
  return target;
}

size_t ClientIncidentReport_EnvironmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.EnvironmentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .safe_browsing.ClientIncidentReport.EnvironmentData.OS os = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *os_);
    }

    // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Machine machine = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *machine_);
    }

    // optional .safe_browsing.ClientIncidentReport.EnvironmentData.Process process = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_EnvironmentData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_EnvironmentData*>(
      &from));
}

void ClientIncidentReport_EnvironmentData::MergeFrom(const ClientIncidentReport_EnvironmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.EnvironmentData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_os()->::safe_browsing::ClientIncidentReport_EnvironmentData_OS::MergeFrom(from._internal_os());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_machine()->::safe_browsing::ClientIncidentReport_EnvironmentData_Machine::MergeFrom(from._internal_machine());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_process()->::safe_browsing::ClientIncidentReport_EnvironmentData_Process::MergeFrom(from._internal_process());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_EnvironmentData::CopyFrom(const ClientIncidentReport_EnvironmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.EnvironmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_EnvironmentData::IsInitialized() const {
  if (_internal_has_process()) {
    if (!process_->IsInitialized()) return false;
  }
  return true;
}

void ClientIncidentReport_EnvironmentData::InternalSwap(ClientIncidentReport_EnvironmentData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_EnvironmentData, process_)
      + sizeof(ClientIncidentReport_EnvironmentData::process_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_EnvironmentData, os_)>(
          reinterpret_cast<char*>(&os_),
          reinterpret_cast<char*>(&other->os_));
}

std::string ClientIncidentReport_EnvironmentData::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.EnvironmentData";
}


// ===================================================================

class ClientIncidentReport_ExtensionData_ExtensionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_ExtensionData_ExtensionInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_update_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_signature_validation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_signature_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_installed_by_custodian(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_installed_by_default(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_installed_by_oem(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_from_bookmark(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_from_webstore(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_converted_from_user_script(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_may_be_untrusted(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_install_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_manifest_location_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_manifest(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ClientIncidentReport_ExtensionData_ExtensionInfo::ClientIncidentReport_ExtensionData_ExtensionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
}
ClientIncidentReport_ExtensionData_ExtensionInfo::ClientIncidentReport_ExtensionData_ExtensionInfo(const ClientIncidentReport_ExtensionData_ExtensionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  update_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_update_url()) {
    update_url_.Set(from._internal_update_url(), 
      GetArenaForAllocation());
  }
  manifest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manifest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manifest()) {
    manifest_.Set(from._internal_manifest(), 
      GetArenaForAllocation());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&manifest_location_type_) -
    reinterpret_cast<char*>(&state_)) + sizeof(manifest_location_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
}

inline void ClientIncidentReport_ExtensionData_ExtensionInfo::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manifest_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manifest_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&manifest_location_type_) -
    reinterpret_cast<char*>(&state_)) + sizeof(manifest_location_type_));
}

ClientIncidentReport_ExtensionData_ExtensionInfo::~ClientIncidentReport_ExtensionData_ExtensionInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_ExtensionData_ExtensionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  version_.Destroy();
  name_.Destroy();
  description_.Destroy();
  update_url_.Destroy();
  manifest_.Destroy();
}

void ClientIncidentReport_ExtensionData_ExtensionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_ExtensionData_ExtensionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      update_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      manifest_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&state_)) + sizeof(type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&has_signature_validation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&converted_from_user_script_) -
        reinterpret_cast<char*>(&has_signature_validation_)) + sizeof(converted_from_user_script_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&install_time_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manifest_location_type_) -
        reinterpret_cast<char*>(&install_time_msec_)) + sizeof(manifest_location_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_ExtensionData_ExtensionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.ExtensionState state = 5 [default = STATE_UNKNOWN];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState_IsValid(val))) {
            _internal_set_state(static_cast<::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo_ExtensionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string update_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_update_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_signature_validation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_has_signature_validation(&has_bits);
          has_signature_validation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool signature_is_valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_signature_is_valid(&has_bits);
          signature_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool installed_by_custodian = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_installed_by_custodian(&has_bits);
          installed_by_custodian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool installed_by_default = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_installed_by_default(&has_bits);
          installed_by_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool installed_by_oem = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_installed_by_oem(&has_bits);
          installed_by_oem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_bookmark = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_from_bookmark(&has_bits);
          from_bookmark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_webstore = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_from_webstore(&has_bits);
          from_webstore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool converted_from_user_script = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_converted_from_user_script(&has_bits);
          converted_from_user_script_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool may_be_untrusted = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_may_be_untrusted(&has_bits);
          may_be_untrusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 install_time_msec = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_install_time_msec(&has_bits);
          install_time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 manifest_location_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_manifest_location_type(&has_bits);
          manifest_location_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string manifest = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_manifest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_ExtensionData_ExtensionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.ExtensionState state = 5 [default = STATE_UNKNOWN];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  // optional int32 type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_type(), target);
  }

  // optional string update_url = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_update_url(), target);
  }

  // optional bool has_signature_validation = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_signature_validation(), target);
  }

  // optional bool signature_is_valid = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_signature_is_valid(), target);
  }

  // optional bool installed_by_custodian = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_installed_by_custodian(), target);
  }

  // optional bool installed_by_default = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_installed_by_default(), target);
  }

  // optional bool installed_by_oem = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_installed_by_oem(), target);
  }

  // optional bool from_bookmark = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_from_bookmark(), target);
  }

  // optional bool from_webstore = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_from_webstore(), target);
  }

  // optional bool converted_from_user_script = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_converted_from_user_script(), target);
  }

  // optional bool may_be_untrusted = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_may_be_untrusted(), target);
  }

  // optional int64 install_time_msec = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_install_time_msec(), target);
  }

  // optional int32 manifest_location_type = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_manifest_location_type(), target);
  }

  // optional string manifest = 19;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_manifest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
  return target;
}

size_t ClientIncidentReport_ExtensionData_ExtensionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string update_url = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_update_url());
    }

    // optional string manifest = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manifest());
    }

    // optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo.ExtensionState state = 5 [default = STATE_UNKNOWN];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional int32 type = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool has_signature_validation = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool signature_is_valid = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool installed_by_custodian = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool installed_by_default = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool installed_by_oem = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool from_bookmark = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool from_webstore = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool converted_from_user_script = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int64 install_time_msec = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_install_time_msec());
    }

    // optional bool may_be_untrusted = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 manifest_location_type = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_manifest_location_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_ExtensionData_ExtensionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_ExtensionData_ExtensionInfo*>(
      &from));
}

void ClientIncidentReport_ExtensionData_ExtensionInfo::MergeFrom(const ClientIncidentReport_ExtensionData_ExtensionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_update_url(from._internal_update_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_manifest(from._internal_manifest());
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      has_signature_validation_ = from.has_signature_validation_;
    }
    if (cached_has_bits & 0x00000200u) {
      signature_is_valid_ = from.signature_is_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      installed_by_custodian_ = from.installed_by_custodian_;
    }
    if (cached_has_bits & 0x00000800u) {
      installed_by_default_ = from.installed_by_default_;
    }
    if (cached_has_bits & 0x00001000u) {
      installed_by_oem_ = from.installed_by_oem_;
    }
    if (cached_has_bits & 0x00002000u) {
      from_bookmark_ = from.from_bookmark_;
    }
    if (cached_has_bits & 0x00004000u) {
      from_webstore_ = from.from_webstore_;
    }
    if (cached_has_bits & 0x00008000u) {
      converted_from_user_script_ = from.converted_from_user_script_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      install_time_msec_ = from.install_time_msec_;
    }
    if (cached_has_bits & 0x00020000u) {
      may_be_untrusted_ = from.may_be_untrusted_;
    }
    if (cached_has_bits & 0x00040000u) {
      manifest_location_type_ = from.manifest_location_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_ExtensionData_ExtensionInfo::CopyFrom(const ClientIncidentReport_ExtensionData_ExtensionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_ExtensionData_ExtensionInfo::IsInitialized() const {
  return true;
}

void ClientIncidentReport_ExtensionData_ExtensionInfo::InternalSwap(ClientIncidentReport_ExtensionData_ExtensionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &update_url_, lhs_arena,
      &other->update_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &manifest_, lhs_arena,
      &other->manifest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport_ExtensionData_ExtensionInfo, manifest_location_type_)
      + sizeof(ClientIncidentReport_ExtensionData_ExtensionInfo::manifest_location_type_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport_ExtensionData_ExtensionInfo, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

std::string ClientIncidentReport_ExtensionData_ExtensionInfo::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo";
}


// ===================================================================

class ClientIncidentReport_ExtensionData::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_ExtensionData>()._has_bits_);
  static const ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo& last_installed_extension(const ClientIncidentReport_ExtensionData* msg);
  static void set_has_last_installed_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo&
ClientIncidentReport_ExtensionData::_Internal::last_installed_extension(const ClientIncidentReport_ExtensionData* msg) {
  return *msg->last_installed_extension_;
}
ClientIncidentReport_ExtensionData::ClientIncidentReport_ExtensionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.ExtensionData)
}
ClientIncidentReport_ExtensionData::ClientIncidentReport_ExtensionData(const ClientIncidentReport_ExtensionData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_last_installed_extension()) {
    last_installed_extension_ = new ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo(*from.last_installed_extension_);
  } else {
    last_installed_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.ExtensionData)
}

inline void ClientIncidentReport_ExtensionData::SharedCtor() {
last_installed_extension_ = nullptr;
}

ClientIncidentReport_ExtensionData::~ClientIncidentReport_ExtensionData() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.ExtensionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_ExtensionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete last_installed_extension_;
}

void ClientIncidentReport_ExtensionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_ExtensionData::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.ExtensionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(last_installed_extension_ != nullptr);
    last_installed_extension_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_ExtensionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo last_installed_extension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_installed_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_ExtensionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.ExtensionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo last_installed_extension = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::last_installed_extension(this),
        _Internal::last_installed_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.ExtensionData)
  return target;
}

size_t ClientIncidentReport_ExtensionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.ExtensionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .safe_browsing.ClientIncidentReport.ExtensionData.ExtensionInfo last_installed_extension = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_installed_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_ExtensionData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_ExtensionData*>(
      &from));
}

void ClientIncidentReport_ExtensionData::MergeFrom(const ClientIncidentReport_ExtensionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.ExtensionData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_last_installed_extension()) {
    _internal_mutable_last_installed_extension()->::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo::MergeFrom(from._internal_last_installed_extension());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_ExtensionData::CopyFrom(const ClientIncidentReport_ExtensionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.ExtensionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_ExtensionData::IsInitialized() const {
  return true;
}

void ClientIncidentReport_ExtensionData::InternalSwap(ClientIncidentReport_ExtensionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_installed_extension_, other->last_installed_extension_);
}

std::string ClientIncidentReport_ExtensionData::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.ExtensionData";
}


// ===================================================================

class ClientIncidentReport_NonBinaryDownloadDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport_NonBinaryDownloadDetails>()._has_bits_);
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url_spec_sha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ClientIncidentReport_NonBinaryDownloadDetails::ClientIncidentReport_NonBinaryDownloadDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
}
ClientIncidentReport_NonBinaryDownloadDetails::ClientIncidentReport_NonBinaryDownloadDetails(const ClientIncidentReport_NonBinaryDownloadDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_type()) {
    file_type_.Set(from._internal_file_type(), 
      GetArenaForAllocation());
  }
  url_spec_sha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_spec_sha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_spec_sha256()) {
    url_spec_sha256_.Set(from._internal_url_spec_sha256(), 
      GetArenaForAllocation());
  }
  host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    host_.Set(from._internal_host(), 
      GetArenaForAllocation());
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
}

inline void ClientIncidentReport_NonBinaryDownloadDetails::SharedCtor() {
file_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_spec_sha256_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_spec_sha256_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
host_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
length_ = int64_t{0};
}

ClientIncidentReport_NonBinaryDownloadDetails::~ClientIncidentReport_NonBinaryDownloadDetails() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport_NonBinaryDownloadDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_type_.Destroy();
  url_spec_sha256_.Destroy();
  host_.Destroy();
}

void ClientIncidentReport_NonBinaryDownloadDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport_NonBinaryDownloadDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      file_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_spec_sha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      host_.ClearNonDefaultToEmpty();
    }
  }
  length_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport_NonBinaryDownloadDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes url_spec_sha256 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url_spec_sha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport_NonBinaryDownloadDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_type(), target);
  }

  // optional bytes url_spec_sha256 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_url_spec_sha256(), target);
  }

  // optional string host = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host(), target);
  }

  // optional int64 length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
  return target;
}

size_t ClientIncidentReport_NonBinaryDownloadDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string file_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_type());
    }

    // optional bytes url_spec_sha256 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_url_spec_sha256());
    }

    // optional string host = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional int64 length = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport_NonBinaryDownloadDetails::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport_NonBinaryDownloadDetails*>(
      &from));
}

void ClientIncidentReport_NonBinaryDownloadDetails::MergeFrom(const ClientIncidentReport_NonBinaryDownloadDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_type(from._internal_file_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_spec_sha256(from._internal_url_spec_sha256());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport_NonBinaryDownloadDetails::CopyFrom(const ClientIncidentReport_NonBinaryDownloadDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport_NonBinaryDownloadDetails::IsInitialized() const {
  return true;
}

void ClientIncidentReport_NonBinaryDownloadDetails::InternalSwap(ClientIncidentReport_NonBinaryDownloadDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_type_, lhs_arena,
      &other->file_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_spec_sha256_, lhs_arena,
      &other->url_spec_sha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
  swap(length_, other->length_);
}

std::string ClientIncidentReport_NonBinaryDownloadDetails::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails";
}


// ===================================================================

class ClientIncidentReport::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentReport>()._has_bits_);
  static const ::safe_browsing::ClientIncidentReport_DownloadDetails& download(const ClientIncidentReport* msg);
  static void set_has_download(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientIncidentReport_EnvironmentData& environment(const ClientIncidentReport* msg);
  static void set_has_environment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::ChromeUserPopulation& population(const ClientIncidentReport* msg);
  static void set_has_population(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::ClientIncidentReport_ExtensionData& extension_data(const ClientIncidentReport* msg);
  static void set_has_extension_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails& non_binary_download(const ClientIncidentReport* msg);
  static void set_has_non_binary_download(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::safe_browsing::ClientIncidentReport_DownloadDetails&
ClientIncidentReport::_Internal::download(const ClientIncidentReport* msg) {
  return *msg->download_;
}
const ::safe_browsing::ClientIncidentReport_EnvironmentData&
ClientIncidentReport::_Internal::environment(const ClientIncidentReport* msg) {
  return *msg->environment_;
}
const ::safe_browsing::ChromeUserPopulation&
ClientIncidentReport::_Internal::population(const ClientIncidentReport* msg) {
  return *msg->population_;
}
const ::safe_browsing::ClientIncidentReport_ExtensionData&
ClientIncidentReport::_Internal::extension_data(const ClientIncidentReport* msg) {
  return *msg->extension_data_;
}
const ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails&
ClientIncidentReport::_Internal::non_binary_download(const ClientIncidentReport* msg) {
  return *msg->non_binary_download_;
}
ClientIncidentReport::ClientIncidentReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  incident_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentReport)
}
ClientIncidentReport::ClientIncidentReport(const ClientIncidentReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      incident_(from.incident_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_download()) {
    download_ = new ::safe_browsing::ClientIncidentReport_DownloadDetails(*from.download_);
  } else {
    download_ = nullptr;
  }
  if (from._internal_has_environment()) {
    environment_ = new ::safe_browsing::ClientIncidentReport_EnvironmentData(*from.environment_);
  } else {
    environment_ = nullptr;
  }
  if (from._internal_has_population()) {
    population_ = new ::safe_browsing::ChromeUserPopulation(*from.population_);
  } else {
    population_ = nullptr;
  }
  if (from._internal_has_extension_data()) {
    extension_data_ = new ::safe_browsing::ClientIncidentReport_ExtensionData(*from.extension_data_);
  } else {
    extension_data_ = nullptr;
  }
  if (from._internal_has_non_binary_download()) {
    non_binary_download_ = new ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails(*from.non_binary_download_);
  } else {
    non_binary_download_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentReport)
}

inline void ClientIncidentReport::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&download_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&non_binary_download_) -
    reinterpret_cast<char*>(&download_)) + sizeof(non_binary_download_));
}

ClientIncidentReport::~ClientIncidentReport() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete download_;
  if (this != internal_default_instance()) delete environment_;
  if (this != internal_default_instance()) delete population_;
  if (this != internal_default_instance()) delete extension_data_;
  if (this != internal_default_instance()) delete non_binary_download_;
}

void ClientIncidentReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentReport::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incident_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(download_ != nullptr);
      download_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(environment_ != nullptr);
      environment_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(population_ != nullptr);
      population_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(extension_data_ != nullptr);
      extension_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(non_binary_download_ != nullptr);
      non_binary_download_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safe_browsing.ClientIncidentReport.IncidentData incident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incident(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_download(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.EnvironmentData environment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ChromeUserPopulation population = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_population(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.ExtensionData extension_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails non_binary_download = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_binary_download(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientIncidentReport.IncidentData incident = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incident_size()); i < n; i++) {
    const auto& repfield = this->_internal_incident(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::download(this),
        _Internal::download(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientIncidentReport.EnvironmentData environment = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::environment(this),
        _Internal::environment(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ChromeUserPopulation population = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::population(this),
        _Internal::population(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientIncidentReport.ExtensionData extension_data = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::extension_data(this),
        _Internal::extension_data(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails non_binary_download = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::non_binary_download(this),
        _Internal::non_binary_download(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentReport)
  return target;
}

size_t ClientIncidentReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientIncidentReport.IncidentData incident = 1;
  total_size += 1UL * this->_internal_incident_size();
  for (const auto& msg : this->incident_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *download_);
    }

    // optional .safe_browsing.ClientIncidentReport.EnvironmentData environment = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *environment_);
    }

    // optional .safe_browsing.ChromeUserPopulation population = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *population_);
    }

    // optional .safe_browsing.ClientIncidentReport.ExtensionData extension_data = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extension_data_);
    }

    // optional .safe_browsing.ClientIncidentReport.NonBinaryDownloadDetails non_binary_download = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *non_binary_download_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentReport*>(
      &from));
}

void ClientIncidentReport::MergeFrom(const ClientIncidentReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  incident_.MergeFrom(from.incident_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_download()->::safe_browsing::ClientIncidentReport_DownloadDetails::MergeFrom(from._internal_download());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_environment()->::safe_browsing::ClientIncidentReport_EnvironmentData::MergeFrom(from._internal_environment());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_population()->::safe_browsing::ChromeUserPopulation::MergeFrom(from._internal_population());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_extension_data()->::safe_browsing::ClientIncidentReport_ExtensionData::MergeFrom(from._internal_extension_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_non_binary_download()->::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails::MergeFrom(from._internal_non_binary_download());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentReport::CopyFrom(const ClientIncidentReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentReport::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(incident_))
    return false;
  if (_internal_has_download()) {
    if (!download_->IsInitialized()) return false;
  }
  if (_internal_has_environment()) {
    if (!environment_->IsInitialized()) return false;
  }
  return true;
}

void ClientIncidentReport::InternalSwap(ClientIncidentReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  incident_.InternalSwap(&other->incident_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientIncidentReport, non_binary_download_)
      + sizeof(ClientIncidentReport::non_binary_download_)
      - PROTOBUF_FIELD_OFFSET(ClientIncidentReport, download_)>(
          reinterpret_cast<char*>(&download_),
          reinterpret_cast<char*>(&other->download_));
}

std::string ClientIncidentReport::GetTypeName() const {
  return "safe_browsing.ClientIncidentReport";
}


// ===================================================================

class ClientIncidentResponse_EnvironmentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentResponse_EnvironmentRequest>()._has_bits_);
  static void set_has_dll_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientIncidentResponse_EnvironmentRequest::ClientIncidentResponse_EnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
}
ClientIncidentResponse_EnvironmentRequest::ClientIncidentResponse_EnvironmentRequest(const ClientIncidentResponse_EnvironmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  dll_index_ = from.dll_index_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
}

inline void ClientIncidentResponse_EnvironmentRequest::SharedCtor() {
dll_index_ = 0;
}

ClientIncidentResponse_EnvironmentRequest::~ClientIncidentResponse_EnvironmentRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentResponse_EnvironmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientIncidentResponse_EnvironmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentResponse_EnvironmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dll_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentResponse_EnvironmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dll_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dll_index(&has_bits);
          dll_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentResponse_EnvironmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dll_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dll_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
  return target;
}

size_t ClientIncidentResponse_EnvironmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dll_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dll_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentResponse_EnvironmentRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentResponse_EnvironmentRequest*>(
      &from));
}

void ClientIncidentResponse_EnvironmentRequest::MergeFrom(const ClientIncidentResponse_EnvironmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dll_index()) {
    _internal_set_dll_index(from._internal_dll_index());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentResponse_EnvironmentRequest::CopyFrom(const ClientIncidentResponse_EnvironmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentResponse.EnvironmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentResponse_EnvironmentRequest::IsInitialized() const {
  return true;
}

void ClientIncidentResponse_EnvironmentRequest::InternalSwap(ClientIncidentResponse_EnvironmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dll_index_, other->dll_index_);
}

std::string ClientIncidentResponse_EnvironmentRequest::GetTypeName() const {
  return "safe_browsing.ClientIncidentResponse.EnvironmentRequest";
}


// ===================================================================

class ClientIncidentResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIncidentResponse>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_download_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientIncidentResponse::ClientIncidentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  environment_requests_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientIncidentResponse)
}
ClientIncidentResponse::ClientIncidentResponse(const ClientIncidentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      environment_requests_(from.environment_requests_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  download_requested_ = from.download_requested_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientIncidentResponse)
}

inline void ClientIncidentResponse::SharedCtor() {
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
download_requested_ = false;
}

ClientIncidentResponse::~ClientIncidentResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientIncidentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIncidentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.Destroy();
}

void ClientIncidentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIncidentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientIncidentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  environment_requests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmpty();
  }
  download_requested_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIncidentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool download_requested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_download_requested(&has_bits);
          download_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientIncidentResponse.EnvironmentRequest environment_requests = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_environment_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIncidentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientIncidentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // optional bool download_requested = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_download_requested(), target);
  }

  // repeated .safe_browsing.ClientIncidentResponse.EnvironmentRequest environment_requests = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_environment_requests_size()); i < n; i++) {
    const auto& repfield = this->_internal_environment_requests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientIncidentResponse)
  return target;
}

size_t ClientIncidentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientIncidentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientIncidentResponse.EnvironmentRequest environment_requests = 3;
  total_size += 1UL * this->_internal_environment_requests_size();
  for (const auto& msg : this->environment_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional bool download_requested = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIncidentResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIncidentResponse*>(
      &from));
}

void ClientIncidentResponse::MergeFrom(const ClientIncidentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientIncidentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  environment_requests_.MergeFrom(from.environment_requests_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      download_requested_ = from.download_requested_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIncidentResponse::CopyFrom(const ClientIncidentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientIncidentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIncidentResponse::IsInitialized() const {
  return true;
}

void ClientIncidentResponse::InternalSwap(ClientIncidentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  environment_requests_.InternalSwap(&other->environment_requests_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  swap(download_requested_, other->download_requested_);
}

std::string ClientIncidentResponse::GetTypeName() const {
  return "safe_browsing.ClientIncidentResponse";
}


// ===================================================================

class DownloadMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadMetadata>()._has_bits_);
  static void set_has_download_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::ClientIncidentReport_DownloadDetails& download(const DownloadMetadata* msg);
  static void set_has_download(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::ClientIncidentReport_DownloadDetails&
DownloadMetadata::_Internal::download(const DownloadMetadata* msg) {
  return *msg->download_;
}
DownloadMetadata::DownloadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.DownloadMetadata)
}
DownloadMetadata::DownloadMetadata(const DownloadMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_download()) {
    download_ = new ::safe_browsing::ClientIncidentReport_DownloadDetails(*from.download_);
  } else {
    download_ = nullptr;
  }
  download_id_ = from.download_id_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DownloadMetadata)
}

inline void DownloadMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&download_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&download_id_) -
    reinterpret_cast<char*>(&download_)) + sizeof(download_id_));
}

DownloadMetadata::~DownloadMetadata() {
  // @@protoc_insertion_point(destructor:safe_browsing.DownloadMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete download_;
}

void DownloadMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DownloadMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(download_ != nullptr);
    download_->Clear();
  }
  download_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DownloadMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 download_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_download_id(&has_bits);
          download_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_download(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.DownloadMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 download_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_download_id(), target);
  }

  // optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::download(this),
        _Internal::download(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.DownloadMetadata)
  return target;
}

size_t DownloadMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DownloadMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .safe_browsing.ClientIncidentReport.DownloadDetails download = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *download_);
    }

    // optional uint32 download_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_download_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DownloadMetadata*>(
      &from));
}

void DownloadMetadata::MergeFrom(const DownloadMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DownloadMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_download()->::safe_browsing::ClientIncidentReport_DownloadDetails::MergeFrom(from._internal_download());
    }
    if (cached_has_bits & 0x00000002u) {
      download_id_ = from.download_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DownloadMetadata::CopyFrom(const DownloadMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DownloadMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMetadata::IsInitialized() const {
  if (_internal_has_download()) {
    if (!download_->IsInitialized()) return false;
  }
  return true;
}

void DownloadMetadata::InternalSwap(DownloadMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadMetadata, download_id_)
      + sizeof(DownloadMetadata::download_id_)
      - PROTOBUF_FIELD_OFFSET(DownloadMetadata, download_)>(
          reinterpret_cast<char*>(&download_),
          reinterpret_cast<char*>(&other->download_));
}

std::string DownloadMetadata::GetTypeName() const {
  return "safe_browsing.DownloadMetadata";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_HTTPHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_HTTPHeader>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientSafeBrowsingReportRequest_HTTPHeader::ClientSafeBrowsingReportRequest_HTTPHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
}
ClientSafeBrowsingReportRequest_HTTPHeader::ClientSafeBrowsingReportRequest_HTTPHeader(const ClientSafeBrowsingReportRequest_HTTPHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
}

inline void ClientSafeBrowsingReportRequest_HTTPHeader::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientSafeBrowsingReportRequest_HTTPHeader::~ClientSafeBrowsingReportRequest_HTTPHeader() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_HTTPHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  value_.Destroy();
}

void ClientSafeBrowsingReportRequest_HTTPHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_HTTPHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_HTTPHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_HTTPHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
  return target;
}

size_t ClientSafeBrowsingReportRequest_HTTPHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
  size_t total_size = 0;

  // required bytes name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_HTTPHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_HTTPHeader*>(
      &from));
}

void ClientSafeBrowsingReportRequest_HTTPHeader::MergeFrom(const ClientSafeBrowsingReportRequest_HTTPHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_HTTPHeader::CopyFrom(const ClientSafeBrowsingReportRequest_HTTPHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_HTTPHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientSafeBrowsingReportRequest_HTTPHeader::InternalSwap(ClientSafeBrowsingReportRequest_HTTPHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string ClientSafeBrowsingReportRequest_HTTPHeader::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine>()._has_bits_);
  static void set_has_verb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
}
ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  verb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verb()) {
    verb_.Set(from._internal_verb(), 
      GetArenaForAllocation());
  }
  uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uri()) {
    uri_.Set(from._internal_uri(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
}

inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::SharedCtor() {
verb_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verb_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uri_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::~ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  verb_.Destroy();
  uri_.Destroy();
  version_.Destroy();
}

void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      verb_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes verb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_verb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes verb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_verb(), target);
  }

  // optional bytes uri = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_uri(), target);
  }

  // optional bytes version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
  return target;
}

size_t ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes verb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_verb());
    }

    // optional bytes uri = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uri());
    }

    // optional bytes version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine*>(
      &from));
}

void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::MergeFrom(const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_verb(from._internal_verb());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::CopyFrom(const ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::IsInitialized() const {
  return true;
}

void ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::InternalSwap(ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &verb_, lhs_arena,
      &other->verb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uri_, lhs_arena,
      &other->uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

std::string ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_HTTPRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_HTTPRequest>()._has_bits_);
  static const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine& firstline(const ClientSafeBrowsingReportRequest_HTTPRequest* msg);
  static void set_has_firstline(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bodydigest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bodylength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine&
ClientSafeBrowsingReportRequest_HTTPRequest::_Internal::firstline(const ClientSafeBrowsingReportRequest_HTTPRequest* msg) {
  return *msg->firstline_;
}
ClientSafeBrowsingReportRequest_HTTPRequest::ClientSafeBrowsingReportRequest_HTTPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
}
ClientSafeBrowsingReportRequest_HTTPRequest::ClientSafeBrowsingReportRequest_HTTPRequest(const ClientSafeBrowsingReportRequest_HTTPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    body_.Set(from._internal_body(), 
      GetArenaForAllocation());
  }
  bodydigest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bodydigest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bodydigest()) {
    bodydigest_.Set(from._internal_bodydigest(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_firstline()) {
    firstline_ = new ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine(*from.firstline_);
  } else {
    firstline_ = nullptr;
  }
  bodylength_ = from.bodylength_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
}

inline void ClientSafeBrowsingReportRequest_HTTPRequest::SharedCtor() {
body_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bodydigest_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bodydigest_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&firstline_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bodylength_) -
    reinterpret_cast<char*>(&firstline_)) + sizeof(bodylength_));
}

ClientSafeBrowsingReportRequest_HTTPRequest::~ClientSafeBrowsingReportRequest_HTTPRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_HTTPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  body_.Destroy();
  bodydigest_.Destroy();
  if (this != internal_default_instance()) delete firstline_;
}

void ClientSafeBrowsingReportRequest_HTTPRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_HTTPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bodydigest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(firstline_ != nullptr);
      firstline_->Clear();
    }
  }
  bodylength_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_HTTPRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine firstline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_firstline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bodydigest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bodydigest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bodylength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bodylength(&has_bits);
          bodylength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_HTTPRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine firstline = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::firstline(this),
        _Internal::firstline(this).GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body(), target);
  }

  // optional bytes bodydigest = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bodydigest(), target);
  }

  // optional int32 bodylength = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_bodylength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
  return target;
}

size_t ClientSafeBrowsingReportRequest_HTTPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes body = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional bytes bodydigest = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bodydigest());
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest.FirstLine firstline = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *firstline_);
    }

    // optional int32 bodylength = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bodylength());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_HTTPRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_HTTPRequest*>(
      &from));
}

void ClientSafeBrowsingReportRequest_HTTPRequest::MergeFrom(const ClientSafeBrowsingReportRequest_HTTPRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bodydigest(from._internal_bodydigest());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_firstline()->::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine::MergeFrom(from._internal_firstline());
    }
    if (cached_has_bits & 0x00000008u) {
      bodylength_ = from.bodylength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_HTTPRequest::CopyFrom(const ClientSafeBrowsingReportRequest_HTTPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_HTTPRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(headers_))
    return false;
  return true;
}

void ClientSafeBrowsingReportRequest_HTTPRequest::InternalSwap(ClientSafeBrowsingReportRequest_HTTPRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bodydigest_, lhs_arena,
      &other->bodydigest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_HTTPRequest, bodylength_)
      + sizeof(ClientSafeBrowsingReportRequest_HTTPRequest::bodylength_)
      - PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_HTTPRequest, firstline_)>(
          reinterpret_cast<char*>(&firstline_),
          reinterpret_cast<char*>(&other->firstline_));
}

std::string ClientSafeBrowsingReportRequest_HTTPRequest::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
}
ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
}

inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0;
}

ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::~ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
  version_.Destroy();
}

void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // optional bytes message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional bytes version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
  return target;
}

size_t ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional bytes version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

    // optional int32 code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine*>(
      &from));
}

void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::MergeFrom(const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::CopyFrom(const ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::IsInitialized() const {
  return true;
}

void ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::InternalSwap(ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  swap(code_, other->code_);
}

std::string ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_HTTPResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_HTTPResponse>()._has_bits_);
  static const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine& firstline(const ClientSafeBrowsingReportRequest_HTTPResponse* msg);
  static void set_has_firstline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bodydigest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bodylength(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_remote_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine&
ClientSafeBrowsingReportRequest_HTTPResponse::_Internal::firstline(const ClientSafeBrowsingReportRequest_HTTPResponse* msg) {
  return *msg->firstline_;
}
ClientSafeBrowsingReportRequest_HTTPResponse::ClientSafeBrowsingReportRequest_HTTPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
}
ClientSafeBrowsingReportRequest_HTTPResponse::ClientSafeBrowsingReportRequest_HTTPResponse(const ClientSafeBrowsingReportRequest_HTTPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    body_.Set(from._internal_body(), 
      GetArenaForAllocation());
  }
  bodydigest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bodydigest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bodydigest()) {
    bodydigest_.Set(from._internal_bodydigest(), 
      GetArenaForAllocation());
  }
  remote_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remote_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_ip()) {
    remote_ip_.Set(from._internal_remote_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_firstline()) {
    firstline_ = new ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine(*from.firstline_);
  } else {
    firstline_ = nullptr;
  }
  bodylength_ = from.bodylength_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
}

inline void ClientSafeBrowsingReportRequest_HTTPResponse::SharedCtor() {
body_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bodydigest_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bodydigest_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remote_ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remote_ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&firstline_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bodylength_) -
    reinterpret_cast<char*>(&firstline_)) + sizeof(bodylength_));
}

ClientSafeBrowsingReportRequest_HTTPResponse::~ClientSafeBrowsingReportRequest_HTTPResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_HTTPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  body_.Destroy();
  bodydigest_.Destroy();
  remote_ip_.Destroy();
  if (this != internal_default_instance()) delete firstline_;
}

void ClientSafeBrowsingReportRequest_HTTPResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_HTTPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bodydigest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      remote_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(firstline_ != nullptr);
      firstline_->Clear();
    }
  }
  bodylength_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_HTTPResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine firstline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_firstline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bodydigest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bodydigest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bodylength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bodylength(&has_bits);
          bodylength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes remote_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_remote_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_HTTPResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine firstline = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::firstline(this),
        _Internal::firstline(this).GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body(), target);
  }

  // optional bytes bodydigest = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bodydigest(), target);
  }

  // optional int32 bodylength = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_bodylength(), target);
  }

  // optional bytes remote_ip = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_remote_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
  return target;
}

size_t ClientSafeBrowsingReportRequest_HTTPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.HTTPHeader headers = 2;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes body = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional bytes bodydigest = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bodydigest());
    }

    // optional bytes remote_ip = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_remote_ip());
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse.FirstLine firstline = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *firstline_);
    }

    // optional int32 bodylength = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bodylength());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_HTTPResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_HTTPResponse*>(
      &from));
}

void ClientSafeBrowsingReportRequest_HTTPResponse::MergeFrom(const ClientSafeBrowsingReportRequest_HTTPResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bodydigest(from._internal_bodydigest());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_remote_ip(from._internal_remote_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_firstline()->::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine::MergeFrom(from._internal_firstline());
    }
    if (cached_has_bits & 0x00000010u) {
      bodylength_ = from.bodylength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_HTTPResponse::CopyFrom(const ClientSafeBrowsingReportRequest_HTTPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_HTTPResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(headers_))
    return false;
  return true;
}

void ClientSafeBrowsingReportRequest_HTTPResponse::InternalSwap(ClientSafeBrowsingReportRequest_HTTPResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bodydigest_, lhs_arena,
      &other->bodydigest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &remote_ip_, lhs_arena,
      &other->remote_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_HTTPResponse, bodylength_)
      + sizeof(ClientSafeBrowsingReportRequest_HTTPResponse::bodylength_)
      - PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_HTTPResponse, firstline_)>(
          reinterpret_cast<char*>(&firstline_),
          reinterpret_cast<char*>(&other->firstline_));
}

std::string ClientSafeBrowsingReportRequest_HTTPResponse::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_Resource::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_Resource>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest& request(const ClientSafeBrowsingReportRequest_Resource* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse& response(const ClientSafeBrowsingReportRequest_Resource* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tag_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest&
ClientSafeBrowsingReportRequest_Resource::_Internal::request(const ClientSafeBrowsingReportRequest_Resource* msg) {
  return *msg->request_;
}
const ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse&
ClientSafeBrowsingReportRequest_Resource::_Internal::response(const ClientSafeBrowsingReportRequest_Resource* msg) {
  return *msg->response_;
}
ClientSafeBrowsingReportRequest_Resource::ClientSafeBrowsingReportRequest_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  child_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
}
ClientSafeBrowsingReportRequest_Resource::ClientSafeBrowsingReportRequest_Resource(const ClientSafeBrowsingReportRequest_Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      child_ids_(from.child_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  tag_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag_name()) {
    tag_name_.Set(from._internal_tag_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    request_ = new ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse(*from.response_);
  } else {
    response_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parent_id_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
}

inline void ClientSafeBrowsingReportRequest_Resource::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tag_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&request_)) + sizeof(parent_id_));
}

ClientSafeBrowsingReportRequest_Resource::~ClientSafeBrowsingReportRequest_Resource() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  tag_name_.Destroy();
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void ClientSafeBrowsingReportRequest_Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(response_ != nullptr);
      response_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(parent_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 parent_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_parent_id(&has_bits);
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 child_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_child_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_child_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tag_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_tag_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest request = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse response = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // optional int32 parent_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_parent_id(), target);
  }

  // repeated int32 child_ids = 6;
  for (int i = 0, n = this->_internal_child_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_child_ids(i), target);
  }

  // optional string tag_name = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_tag_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
  return target;
}

size_t ClientSafeBrowsingReportRequest_Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
  size_t total_size = 0;

  // required int32 id = 1;
  if (_internal_has_id()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 child_ids = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->child_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_child_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string tag_name = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag_name());
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPRequest request = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_);
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.HTTPResponse response = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_);
    }

  }
  // optional int32 parent_id = 5;
  if (cached_has_bits & 0x00000020u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_Resource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_Resource*>(
      &from));
}

void ClientSafeBrowsingReportRequest_Resource::MergeFrom(const ClientSafeBrowsingReportRequest_Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  child_ids_.MergeFrom(from.child_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag_name(from._internal_tag_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_request()->::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_response()->::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse::MergeFrom(from._internal_response());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      parent_id_ = from.parent_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_Resource::CopyFrom(const ClientSafeBrowsingReportRequest_Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_Resource::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_request()) {
    if (!request_->IsInitialized()) return false;
  }
  if (_internal_has_response()) {
    if (!response_->IsInitialized()) return false;
  }
  return true;
}

void ClientSafeBrowsingReportRequest_Resource::InternalSwap(ClientSafeBrowsingReportRequest_Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_ids_.InternalSwap(&other->child_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tag_name_, lhs_arena,
      &other->tag_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_Resource, parent_id_)
      + sizeof(ClientSafeBrowsingReportRequest_Resource::parent_id_)
      - PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_Resource, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

std::string ClientSafeBrowsingReportRequest_Resource::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.Resource";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_google_play_services_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_instant_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url_api_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
}
ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  client_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_version()) {
    client_version_.Set(from._internal_client_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&google_play_services_version_, &from.google_play_services_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&url_api_type_) -
    reinterpret_cast<char*>(&google_play_services_version_)) + sizeof(url_api_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
}

inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::SharedCtor() {
client_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&google_play_services_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&url_api_type_) -
    reinterpret_cast<char*>(&google_play_services_version_)) + sizeof(url_api_type_));
}

ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::~ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_version_.Destroy();
}

void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_version_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&google_play_services_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&url_api_type_) -
        reinterpret_cast<char*>(&google_play_services_version_)) + sizeof(url_api_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 google_play_services_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_google_play_services_version(&has_bits);
          google_play_services_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_instant_apps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_instant_apps(&has_bits);
          is_instant_apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingUrlApiType url_api_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType_IsValid(val))) {
            _internal_set_url_api_type(static_cast<::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingUrlApiType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_version(), target);
  }

  // optional int64 google_play_services_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_google_play_services_version(), target);
  }

  // optional bool is_instant_apps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_instant_apps(), target);
  }

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingUrlApiType url_api_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_url_api_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
  return target;
}

size_t ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string client_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_version());
    }

    // optional int64 google_play_services_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_google_play_services_version());
    }

    // optional bool is_instant_apps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingUrlApiType url_api_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_url_api_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties*>(
      &from));
}

void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::MergeFrom(const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_version(from._internal_client_version());
    }
    if (cached_has_bits & 0x00000002u) {
      google_play_services_version_ = from.google_play_services_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_instant_apps_ = from.is_instant_apps_;
    }
    if (cached_has_bits & 0x00000008u) {
      url_api_type_ = from.url_api_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::CopyFrom(const ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::IsInitialized() const {
  return true;
}

void ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::InternalSwap(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_version_, lhs_arena,
      &other->client_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties, url_api_type_)
      + sizeof(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::url_api_type_)
      - PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties, google_play_services_version_)>(
          reinterpret_cast<char*>(&google_play_services_version_),
          reinterpret_cast<char*>(&other->google_play_services_version_));
}

std::string ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests>()._has_bits_);
  static void set_has_sha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
}
ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha256()) {
    sha256_.Set(from._internal_sha256(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
}

inline void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::SharedCtor() {
sha256_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha256_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::~ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha256_.Destroy();
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha256_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sha256 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha256 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sha256(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
  return target;
}

size_t ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes sha256 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sha256());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests*>(
      &from));
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::MergeFrom(const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sha256()) {
    _internal_set_sha256(from._internal_sha256());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::CopyFrom(const ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::IsInitialized() const {
  return true;
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::InternalSwap(ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sha256_, lhs_arena,
      &other->sha256_, rhs_arena
  );
}

std::string ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests";
}


// ===================================================================

class ClientSafeBrowsingReportRequest_DownloadItemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest_DownloadItemInfo>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests& digests(const ClientSafeBrowsingReportRequest_DownloadItemInfo* msg);
  static void set_has_digests(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_basename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests&
ClientSafeBrowsingReportRequest_DownloadItemInfo::_Internal::digests(const ClientSafeBrowsingReportRequest_DownloadItemInfo* msg) {
  return *msg->digests_;
}
ClientSafeBrowsingReportRequest_DownloadItemInfo::ClientSafeBrowsingReportRequest_DownloadItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
}
ClientSafeBrowsingReportRequest_DownloadItemInfo::ClientSafeBrowsingReportRequest_DownloadItemInfo(const ClientSafeBrowsingReportRequest_DownloadItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  file_basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_basename()) {
    file_basename_.Set(from._internal_file_basename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_digests()) {
    digests_ = new ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests(*from.digests_);
  } else {
    digests_ = nullptr;
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
}

inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_basename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_basename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&digests_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&digests_)) + sizeof(length_));
}

ClientSafeBrowsingReportRequest_DownloadItemInfo::~ClientSafeBrowsingReportRequest_DownloadItemInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest_DownloadItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  file_basename_.Destroy();
  if (this != internal_default_instance()) delete digests_;
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_basename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(digests_ != nullptr);
      digests_->Clear();
    }
  }
  length_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest_DownloadItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests digests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_digests(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_basename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_basename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest_DownloadItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests digests = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::digests(this),
        _Internal::digests(this).GetCachedSize(), target, stream);
  }

  // optional int64 length = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_length(), target);
  }

  // optional string file_basename = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_basename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
  return target;
}

size_t ClientSafeBrowsingReportRequest_DownloadItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string file_basename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_basename());
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo.Digests digests = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *digests_);
    }

    // optional int64 length = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest_DownloadItemInfo*>(
      &from));
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo::MergeFrom(const ClientSafeBrowsingReportRequest_DownloadItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_basename(from._internal_file_basename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_digests()->::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests::MergeFrom(from._internal_digests());
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo::CopyFrom(const ClientSafeBrowsingReportRequest_DownloadItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest_DownloadItemInfo::IsInitialized() const {
  return true;
}

void ClientSafeBrowsingReportRequest_DownloadItemInfo::InternalSwap(ClientSafeBrowsingReportRequest_DownloadItemInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_basename_, lhs_arena,
      &other->file_basename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_DownloadItemInfo, length_)
      + sizeof(ClientSafeBrowsingReportRequest_DownloadItemInfo::length_)
      - PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest_DownloadItemInfo, digests_)>(
          reinterpret_cast<char*>(&digests_),
          reinterpret_cast<char*>(&other->digests_));
}

std::string ClientSafeBrowsingReportRequest_DownloadItemInfo::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo";
}


// ===================================================================

class ClientSafeBrowsingReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientSafeBrowsingReportRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_download_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_referrer_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_client_country(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_did_proceed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_repeat_visit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties& client_properties(const ClientSafeBrowsingReportRequest* msg);
  static void set_has_client_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_show_download_in_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo& download_item_info(const ClientSafeBrowsingReportRequest* msg);
  static void set_has_download_item_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_safety_net_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::safe_browsing::ChromeUserPopulation& population(const ClientSafeBrowsingReportRequest* msg);
  static void set_has_population(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties&
ClientSafeBrowsingReportRequest::_Internal::client_properties(const ClientSafeBrowsingReportRequest* msg) {
  return *msg->client_properties_;
}
const ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo&
ClientSafeBrowsingReportRequest::_Internal::download_item_info(const ClientSafeBrowsingReportRequest* msg) {
  return *msg->download_item_info_;
}
const ::safe_browsing::ChromeUserPopulation&
ClientSafeBrowsingReportRequest::_Internal::population(const ClientSafeBrowsingReportRequest* msg) {
  return *msg->population_;
}
ClientSafeBrowsingReportRequest::ClientSafeBrowsingReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  resources_(arena),
  client_asn_(arena),
  dom_(arena),
  referrer_chain_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ClientSafeBrowsingReportRequest)
}
ClientSafeBrowsingReportRequest::ClientSafeBrowsingReportRequest(const ClientSafeBrowsingReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      resources_(from.resources_),
      client_asn_(from.client_asn_),
      dom_(from.dom_),
      referrer_chain_(from.referrer_chain_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  page_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_page_url()) {
    page_url_.Set(from._internal_page_url(), 
      GetArenaForAllocation());
  }
  referrer_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_url()) {
    referrer_url_.Set(from._internal_referrer_url(), 
      GetArenaForAllocation());
  }
  client_country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_country()) {
    client_country_.Set(from._internal_client_country(), 
      GetArenaForAllocation());
  }
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  safety_net_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    safety_net_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_safety_net_id()) {
    safety_net_id_.Set(from._internal_safety_net_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client_properties()) {
    client_properties_ = new ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties(*from.client_properties_);
  } else {
    client_properties_ = nullptr;
  }
  if (from._internal_has_download_item_info()) {
    download_item_info_ = new ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo(*from.download_item_info_);
  } else {
    download_item_info_ = nullptr;
  }
  if (from._internal_has_population()) {
    population_ = new ::safe_browsing::ChromeUserPopulation(*from.population_);
  } else {
    population_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_verdict_) -
    reinterpret_cast<char*>(&type_)) + sizeof(download_verdict_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ClientSafeBrowsingReportRequest)
}

inline void ClientSafeBrowsingReportRequest::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
referrer_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_country_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_country_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
safety_net_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  safety_net_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_properties_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&download_verdict_) -
    reinterpret_cast<char*>(&client_properties_)) + sizeof(download_verdict_));
}

ClientSafeBrowsingReportRequest::~ClientSafeBrowsingReportRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.ClientSafeBrowsingReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSafeBrowsingReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  page_url_.Destroy();
  referrer_url_.Destroy();
  client_country_.Destroy();
  token_.Destroy();
  safety_net_id_.Destroy();
  if (this != internal_default_instance()) delete client_properties_;
  if (this != internal_default_instance()) delete download_item_info_;
  if (this != internal_default_instance()) delete population_;
}

void ClientSafeBrowsingReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientSafeBrowsingReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ClientSafeBrowsingReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_.Clear();
  client_asn_.Clear();
  dom_.Clear();
  referrer_chain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      page_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      referrer_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      client_country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      safety_net_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(client_properties_ != nullptr);
      client_properties_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(download_item_info_ != nullptr);
      download_item_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(population_ != nullptr);
    population_->Clear();
  }
  if (cached_has_bits & 0x00007e00u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_verdict_) -
        reinterpret_cast<char*>(&type_)) + sizeof(download_verdict_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientSafeBrowsingReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string page_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_referrer_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ClientSafeBrowsingReportRequest.Resource resources = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool complete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_complete(&has_bits);
          complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string client_asn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_client_asn();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string client_country = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_client_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_proceed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_did_proceed(&has_bits);
          did_proceed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool repeat_visit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_repeat_visit(&has_bits);
          repeat_visit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.ReportType type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientSafeBrowsingReportRequest_ReportType_IsValid(val))) {
            _internal_set_type(static_cast<::safe_browsing::ClientSafeBrowsingReportRequest_ReportType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadResponse.Verdict download_verdict = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ClientDownloadResponse_Verdict_IsValid(val))) {
            _internal_set_download_verdict(static_cast<::safe_browsing::ClientDownloadResponse_Verdict>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes token = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.HTMLElement dom = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties client_properties = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_download_in_folder = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_show_download_in_folder(&has_bits);
          show_download_in_folder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_referrer_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo download_item_info = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_download_item_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string safety_net_id = 25 [deprecated = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_safety_net_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ChromeUserPopulation population = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_population(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSafeBrowsingReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ClientSafeBrowsingReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string page_url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_url(), target);
  }

  // optional string referrer_url = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_referrer_url(), target);
  }

  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.Resource resources = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resources_size()); i < n; i++) {
    const auto& repfield = this->_internal_resources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool complete = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_complete(), target);
  }

  // repeated string client_asn = 6;
  for (int i = 0, n = this->_internal_client_asn_size(); i < n; i++) {
    const auto& s = this->_internal_client_asn(i);
    target = stream->WriteString(6, s, target);
  }

  // optional string client_country = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_client_country(), target);
  }

  // optional bool did_proceed = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_did_proceed(), target);
  }

  // optional bool repeat_visit = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_repeat_visit(), target);
  }

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.ReportType type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // optional .safe_browsing.ClientDownloadResponse.Verdict download_verdict = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_download_verdict(), target);
  }

  // optional bytes token = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_token(), target);
  }

  // repeated .safe_browsing.HTMLElement dom = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dom_size()); i < n; i++) {
    const auto& repfield = this->_internal_dom(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties client_properties = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::client_properties(this),
        _Internal::client_properties(this).GetCachedSize(), target, stream);
  }

  // optional bool show_download_in_folder = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_show_download_in_folder(), target);
  }

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referrer_chain_size()); i < n; i++) {
    const auto& repfield = this->_internal_referrer_chain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo download_item_info = 24;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::download_item_info(this),
        _Internal::download_item_info(this).GetCachedSize(), target, stream);
  }

  // optional string safety_net_id = 25 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_safety_net_id(), target);
  }

  // optional .safe_browsing.ChromeUserPopulation population = 26;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::population(this),
        _Internal::population(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ClientSafeBrowsingReportRequest)
  return target;
}

size_t ClientSafeBrowsingReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ClientSafeBrowsingReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ClientSafeBrowsingReportRequest.Resource resources = 4;
  total_size += 1UL * this->_internal_resources_size();
  for (const auto& msg : this->resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string client_asn = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(client_asn_.size());
  for (int i = 0, n = client_asn_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      client_asn_.Get(i));
  }

  // repeated .safe_browsing.HTMLElement dom = 16;
  total_size += 2UL * this->_internal_dom_size();
  for (const auto& msg : this->dom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 23;
  total_size += 2UL * this->_internal_referrer_chain_size();
  for (const auto& msg : this->referrer_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string page_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_url());
    }

    // optional string referrer_url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_url());
    }

    // optional string client_country = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_country());
    }

    // optional bytes token = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional string safety_net_id = 25 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_safety_net_id());
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.SafeBrowsingClientProperties client_properties = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_properties_);
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.DownloadItemInfo download_item_info = 24;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *download_item_info_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .safe_browsing.ChromeUserPopulation population = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *population_);
    }

    // optional .safe_browsing.ClientSafeBrowsingReportRequest.ReportType type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool complete = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool did_proceed = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool repeat_visit = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool show_download_in_folder = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional .safe_browsing.ClientDownloadResponse.Verdict download_verdict = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_download_verdict());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSafeBrowsingReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientSafeBrowsingReportRequest*>(
      &from));
}

void ClientSafeBrowsingReportRequest::MergeFrom(const ClientSafeBrowsingReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ClientSafeBrowsingReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  resources_.MergeFrom(from.resources_);
  client_asn_.MergeFrom(from.client_asn_);
  dom_.MergeFrom(from.dom_);
  referrer_chain_.MergeFrom(from.referrer_chain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_page_url(from._internal_page_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_referrer_url(from._internal_referrer_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_client_country(from._internal_client_country());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_safety_net_id(from._internal_safety_net_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_client_properties()->::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties::MergeFrom(from._internal_client_properties());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_download_item_info()->::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo::MergeFrom(from._internal_download_item_info());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_population()->::safe_browsing::ChromeUserPopulation::MergeFrom(from._internal_population());
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      complete_ = from.complete_;
    }
    if (cached_has_bits & 0x00000800u) {
      did_proceed_ = from.did_proceed_;
    }
    if (cached_has_bits & 0x00001000u) {
      repeat_visit_ = from.repeat_visit_;
    }
    if (cached_has_bits & 0x00002000u) {
      show_download_in_folder_ = from.show_download_in_folder_;
    }
    if (cached_has_bits & 0x00004000u) {
      download_verdict_ = from.download_verdict_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientSafeBrowsingReportRequest::CopyFrom(const ClientSafeBrowsingReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ClientSafeBrowsingReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSafeBrowsingReportRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(resources_))
    return false;
  return true;
}

void ClientSafeBrowsingReportRequest::InternalSwap(ClientSafeBrowsingReportRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  resources_.InternalSwap(&other->resources_);
  client_asn_.InternalSwap(&other->client_asn_);
  dom_.InternalSwap(&other->dom_);
  referrer_chain_.InternalSwap(&other->referrer_chain_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_url_, lhs_arena,
      &other->page_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &referrer_url_, lhs_arena,
      &other->referrer_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_country_, lhs_arena,
      &other->client_country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &safety_net_id_, lhs_arena,
      &other->safety_net_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest, download_verdict_)
      + sizeof(ClientSafeBrowsingReportRequest::download_verdict_)
      - PROTOBUF_FIELD_OFFSET(ClientSafeBrowsingReportRequest, client_properties_)>(
          reinterpret_cast<char*>(&client_properties_),
          reinterpret_cast<char*>(&other->client_properties_));
}

std::string ClientSafeBrowsingReportRequest::GetTypeName() const {
  return "safe_browsing.ClientSafeBrowsingReportRequest";
}


// ===================================================================

class HTMLElement_Attribute::_Internal {
 public:
  using HasBits = decltype(std::declval<HTMLElement_Attribute>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HTMLElement_Attribute::HTMLElement_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.HTMLElement.Attribute)
}
HTMLElement_Attribute::HTMLElement_Attribute(const HTMLElement_Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.HTMLElement.Attribute)
}

inline void HTMLElement_Attribute::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HTMLElement_Attribute::~HTMLElement_Attribute() {
  // @@protoc_insertion_point(destructor:safe_browsing.HTMLElement.Attribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HTMLElement_Attribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  value_.Destroy();
}

void HTMLElement_Attribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HTMLElement_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.HTMLElement.Attribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HTMLElement_Attribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HTMLElement_Attribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.HTMLElement.Attribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.HTMLElement.Attribute)
  return target;
}

size_t HTMLElement_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.HTMLElement.Attribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTMLElement_Attribute::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HTMLElement_Attribute*>(
      &from));
}

void HTMLElement_Attribute::MergeFrom(const HTMLElement_Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.HTMLElement.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HTMLElement_Attribute::CopyFrom(const HTMLElement_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.HTMLElement.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTMLElement_Attribute::IsInitialized() const {
  return true;
}

void HTMLElement_Attribute::InternalSwap(HTMLElement_Attribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string HTMLElement_Attribute::GetTypeName() const {
  return "safe_browsing.HTMLElement.Attribute";
}


// ===================================================================

class HTMLElement::_Internal {
 public:
  using HasBits = decltype(std::declval<HTMLElement>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inner_html(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HTMLElement::HTMLElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  child_ids_(arena),
  attribute_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.HTMLElement)
}
HTMLElement::HTMLElement(const HTMLElement& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      child_ids_(from.child_ids_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    tag_.Set(from._internal_tag(), 
      GetArenaForAllocation());
  }
  inner_html_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    inner_html_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_inner_html()) {
    inner_html_.Set(from._internal_inner_html(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(resource_id_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.HTMLElement)
}

inline void HTMLElement::SharedCtor() {
tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
inner_html_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  inner_html_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resource_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(resource_id_));
}

HTMLElement::~HTMLElement() {
  // @@protoc_insertion_point(destructor:safe_browsing.HTMLElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HTMLElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.Destroy();
  inner_html_.Destroy();
}

void HTMLElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HTMLElement::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.HTMLElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_ids_.Clear();
  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      inner_html_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resource_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(resource_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HTMLElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 child_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_child_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_child_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resource_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_resource_id(&has_bits);
          resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.HTMLElement.Attribute attribute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes inner_html = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_inner_html();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HTMLElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.HTMLElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // repeated int32 child_ids = 3;
  for (int i = 0, n = this->_internal_child_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_child_ids(i), target);
  }

  // optional int32 resource_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_resource_id(), target);
  }

  // repeated .safe_browsing.HTMLElement.Attribute attribute = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes inner_html = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_inner_html(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.HTMLElement)
  return target;
}

size_t HTMLElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.HTMLElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 child_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->child_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_child_ids_size());
    total_size += data_size;
  }

  // repeated .safe_browsing.HTMLElement.Attribute attribute = 6;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional bytes inner_html = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_inner_html());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional int32 resource_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resource_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTMLElement::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HTMLElement*>(
      &from));
}

void HTMLElement::MergeFrom(const HTMLElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.HTMLElement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  child_ids_.MergeFrom(from.child_ids_);
  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_inner_html(from._internal_inner_html());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      resource_id_ = from.resource_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HTMLElement::CopyFrom(const HTMLElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.HTMLElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTMLElement::IsInitialized() const {
  return true;
}

void HTMLElement::InternalSwap(HTMLElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_ids_.InternalSwap(&other->child_ids_);
  attribute_.InternalSwap(&other->attribute_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &inner_html_, lhs_arena,
      &other->inner_html_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HTMLElement, resource_id_)
      + sizeof(HTMLElement::resource_id_)
      - PROTOBUF_FIELD_OFFSET(HTMLElement, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string HTMLElement::GetTypeName() const {
  return "safe_browsing.HTMLElement";
}


// ===================================================================

class ExtensionWebStoreInstallRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionWebStoreInstallRequest>()._has_bits_);
  static const ::safe_browsing::ReferrerChainOptions& referrer_chain_options(const ExtensionWebStoreInstallRequest* msg);
  static void set_has_referrer_chain_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::ReferrerChainOptions&
ExtensionWebStoreInstallRequest::_Internal::referrer_chain_options(const ExtensionWebStoreInstallRequest* msg) {
  return *msg->referrer_chain_options_;
}
ExtensionWebStoreInstallRequest::ExtensionWebStoreInstallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  referrer_chain_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionWebStoreInstallRequest)
}
ExtensionWebStoreInstallRequest::ExtensionWebStoreInstallRequest(const ExtensionWebStoreInstallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      referrer_chain_(from.referrer_chain_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_referrer_chain_options()) {
    referrer_chain_options_ = new ::safe_browsing::ReferrerChainOptions(*from.referrer_chain_options_);
  } else {
    referrer_chain_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionWebStoreInstallRequest)
}

inline void ExtensionWebStoreInstallRequest::SharedCtor() {
referrer_chain_options_ = nullptr;
}

ExtensionWebStoreInstallRequest::~ExtensionWebStoreInstallRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionWebStoreInstallRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionWebStoreInstallRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete referrer_chain_options_;
}

void ExtensionWebStoreInstallRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionWebStoreInstallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionWebStoreInstallRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  referrer_chain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(referrer_chain_options_ != nullptr);
    referrer_chain_options_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionWebStoreInstallRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referrer_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_referrer_chain_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionWebStoreInstallRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionWebStoreInstallRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referrer_chain_size()); i < n; i++) {
    const auto& repfield = this->_internal_referrer_chain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::referrer_chain_options(this),
        _Internal::referrer_chain_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionWebStoreInstallRequest)
  return target;
}

size_t ExtensionWebStoreInstallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionWebStoreInstallRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 1;
  total_size += 1UL * this->_internal_referrer_chain_size();
  for (const auto& msg : this->referrer_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .safe_browsing.ReferrerChainOptions referrer_chain_options = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *referrer_chain_options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionWebStoreInstallRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionWebStoreInstallRequest*>(
      &from));
}

void ExtensionWebStoreInstallRequest::MergeFrom(const ExtensionWebStoreInstallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionWebStoreInstallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  referrer_chain_.MergeFrom(from.referrer_chain_);
  if (from._internal_has_referrer_chain_options()) {
    _internal_mutable_referrer_chain_options()->::safe_browsing::ReferrerChainOptions::MergeFrom(from._internal_referrer_chain_options());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionWebStoreInstallRequest::CopyFrom(const ExtensionWebStoreInstallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionWebStoreInstallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionWebStoreInstallRequest::IsInitialized() const {
  return true;
}

void ExtensionWebStoreInstallRequest::InternalSwap(ExtensionWebStoreInstallRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  referrer_chain_.InternalSwap(&other->referrer_chain_);
  swap(referrer_chain_options_, other->referrer_chain_options_);
}

std::string ExtensionWebStoreInstallRequest::GetTypeName() const {
  return "safe_browsing.ExtensionWebStoreInstallRequest";
}


// ===================================================================

class ExtensionTelemetryReportRequest_ExtensionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionTelemetryReportRequest_ExtensionInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_install_timestamp_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_default_installed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_oem_installed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_from_store(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_updates_from_store(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_converted_from_user_script(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_install_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_blocklist_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_disable_reasons(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

ExtensionTelemetryReportRequest_ExtensionInfo::ExtensionTelemetryReportRequest_ExtensionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
}
ExtensionTelemetryReportRequest_ExtensionInfo::ExtensionTelemetryReportRequest_ExtensionInfo(const ExtensionTelemetryReportRequest_ExtensionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&install_timestamp_msec_, &from.install_timestamp_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_reasons_) -
    reinterpret_cast<char*>(&install_timestamp_msec_)) + sizeof(disable_reasons_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
}

inline void ExtensionTelemetryReportRequest_ExtensionInfo::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&install_timestamp_msec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_reasons_) -
    reinterpret_cast<char*>(&install_timestamp_msec_)) + sizeof(disable_reasons_));
}

ExtensionTelemetryReportRequest_ExtensionInfo::~ExtensionTelemetryReportRequest_ExtensionInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryReportRequest_ExtensionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  version_.Destroy();
  name_.Destroy();
}

void ExtensionTelemetryReportRequest_ExtensionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryReportRequest_ExtensionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&install_timestamp_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&updates_from_store_) -
        reinterpret_cast<char*>(&install_timestamp_msec_)) + sizeof(updates_from_store_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&is_converted_from_user_script_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_reasons_) -
        reinterpret_cast<char*>(&is_converted_from_user_script_)) + sizeof(disable_reasons_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryReportRequest_ExtensionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 install_timestamp_msec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_install_timestamp_msec(&has_bits);
          install_timestamp_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_default_installed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_default_installed(&has_bits);
          is_default_installed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_oem_installed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_oem_installed(&has_bits);
          is_oem_installed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_from_store = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_from_store(&has_bits);
          is_from_store_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool updates_from_store = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_updates_from_store(&has_bits);
          updates_from_store_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_converted_from_user_script = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_converted_from_user_script(&has_bits);
          is_converted_from_user_script_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.Type type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type_IsValid(val))) {
            _internal_set_type(static_cast<::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.InstallLocation install_location = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation_IsValid(val))) {
            _internal_set_install_location(static_cast<::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_InstallLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.BlocklistState blocklist_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState_IsValid(val))) {
            _internal_set_blocklist_state(static_cast<::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo_BlocklistState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 disable_reasons = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_disable_reasons(&has_bits);
          disable_reasons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryReportRequest_ExtensionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional int64 install_timestamp_msec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_install_timestamp_msec(), target);
  }

  // optional bool is_default_installed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_default_installed(), target);
  }

  // optional bool is_oem_installed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_oem_installed(), target);
  }

  // optional bool is_from_store = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_from_store(), target);
  }

  // optional bool updates_from_store = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_updates_from_store(), target);
  }

  // optional bool is_converted_from_user_script = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_converted_from_user_script(), target);
  }

  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.Type type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.InstallLocation install_location = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_install_location(), target);
  }

  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.BlocklistState blocklist_state = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_blocklist_state(), target);
  }

  // optional uint32 disable_reasons = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_disable_reasons(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
  return target;
}

size_t ExtensionTelemetryReportRequest_ExtensionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int64 install_timestamp_msec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_install_timestamp_msec());
    }

    // optional bool is_default_installed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_oem_installed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_from_store = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool updates_from_store = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool is_converted_from_user_script = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.Type type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.InstallLocation install_location = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_install_location());
    }

    // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo.BlocklistState blocklist_state = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_blocklist_state());
    }

    // optional uint32 disable_reasons = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disable_reasons());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryReportRequest_ExtensionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryReportRequest_ExtensionInfo*>(
      &from));
}

void ExtensionTelemetryReportRequest_ExtensionInfo::MergeFrom(const ExtensionTelemetryReportRequest_ExtensionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      install_timestamp_msec_ = from.install_timestamp_msec_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_default_installed_ = from.is_default_installed_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_oem_installed_ = from.is_oem_installed_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_from_store_ = from.is_from_store_;
    }
    if (cached_has_bits & 0x00000080u) {
      updates_from_store_ = from.updates_from_store_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_converted_from_user_script_ = from.is_converted_from_user_script_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      install_location_ = from.install_location_;
    }
    if (cached_has_bits & 0x00000800u) {
      blocklist_state_ = from.blocklist_state_;
    }
    if (cached_has_bits & 0x00001000u) {
      disable_reasons_ = from.disable_reasons_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryReportRequest_ExtensionInfo::CopyFrom(const ExtensionTelemetryReportRequest_ExtensionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryReportRequest_ExtensionInfo::IsInitialized() const {
  return true;
}

void ExtensionTelemetryReportRequest_ExtensionInfo::InternalSwap(ExtensionTelemetryReportRequest_ExtensionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionTelemetryReportRequest_ExtensionInfo, disable_reasons_)
      + sizeof(ExtensionTelemetryReportRequest_ExtensionInfo::disable_reasons_)
      - PROTOBUF_FIELD_OFFSET(ExtensionTelemetryReportRequest_ExtensionInfo, install_timestamp_msec_)>(
          reinterpret_cast<char*>(&install_timestamp_msec_),
          reinterpret_cast<char*>(&other->install_timestamp_msec_));
}

std::string ExtensionTelemetryReportRequest_ExtensionInfo::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo";
}


// ===================================================================

class ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_execution_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
}
ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hash()) {
    hash_.Set(from._internal_hash(), 
      GetArenaForAllocation());
  }
  execution_count_ = from.execution_count_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
}

inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::SharedCtor() {
hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
execution_count_ = 0u;
}

ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::~ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.Destroy();
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hash_.ClearNonDefaultToEmpty();
  }
  execution_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 execution_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_execution_count(&has_bits);
          execution_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // optional uint32 execution_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_execution_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
  return target;
}

size_t ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
    }

    // optional uint32 execution_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_execution_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo*>(
      &from));
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      execution_count_ = from.execution_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::IsInitialized() const {
  return true;
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::InternalSwap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  swap(execution_count_, other->execution_count_);
}

std::string ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo";
}


// ===================================================================

class ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo>()._has_bits_);
  static void set_has_max_exceeded_script_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  scripts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
}
ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      scripts_(from.scripts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  max_exceeded_script_count_ = from.max_exceeded_script_count_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
}

inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::SharedCtor() {
max_exceeded_script_count_ = 0u;
}

ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::~ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scripts_.Clear();
  max_exceeded_script_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo scripts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scripts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_exceeded_script_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_exceeded_script_count(&has_bits);
          max_exceeded_script_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo scripts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scripts_size()); i < n; i++) {
    const auto& repfield = this->_internal_scripts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_exceeded_script_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_exceeded_script_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
  return target;
}

size_t ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo.ScriptInfo scripts = 1;
  total_size += 1UL * this->_internal_scripts_size();
  for (const auto& msg : this->scripts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 max_exceeded_script_count = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_exceeded_script_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo*>(
      &from));
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scripts_.MergeFrom(from.scripts_);
  if (from._internal_has_max_exceeded_script_count()) {
    _internal_set_max_exceeded_script_count(from._internal_max_exceeded_script_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::IsInitialized() const {
  return true;
}

void ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::InternalSwap(ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scripts_.InternalSwap(&other->scripts_);
  swap(max_exceeded_script_count_, other->max_exceeded_script_count_);
}

std::string ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo";
}


// ===================================================================

class ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contact_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
}
ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  contact_count_ = from.contact_count_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
}

inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contact_count_ = 0u;
}

ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::~ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  contact_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contact_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_contact_count(&has_bits);
          contact_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional uint32 contact_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_contact_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
  return target;
}

size_t ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 contact_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contact_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo*>(
      &from));
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      contact_count_ = from.contact_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::IsInitialized() const {
  return true;
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::InternalSwap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(contact_count_, other->contact_count_);
}

std::string ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo";
}


// ===================================================================

class ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::_Internal {
 public:
};

ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  remote_host_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
}
ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      remote_host_(from.remote_host_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
}

inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::SharedCtor() {
}

ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::~ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_host_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo remote_host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_host(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo remote_host = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_host_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_host(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
  return target;
}

size_t ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo.RemoteHostInfo remote_host = 1;
  total_size += 1UL * this->_internal_remote_host_size();
  for (const auto& msg : this->remote_host_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo*>(
      &from));
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  remote_host_.MergeFrom(from.remote_host_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::IsInitialized() const {
  return true;
}

void ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::InternalSwap(ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  remote_host_.InternalSwap(&other->remote_host_);
}

std::string ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo";
}


// ===================================================================

class ExtensionTelemetryReportRequest_SignalInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionTelemetryReportRequest_SignalInfo>()._has_bits_);
  static const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo& tabs_execute_script_info(const ExtensionTelemetryReportRequest_SignalInfo* msg);
  static void set_has_tabs_execute_script_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo& remote_host_contacted_info(const ExtensionTelemetryReportRequest_SignalInfo* msg);
  static void set_has_remote_host_contacted_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo&
ExtensionTelemetryReportRequest_SignalInfo::_Internal::tabs_execute_script_info(const ExtensionTelemetryReportRequest_SignalInfo* msg) {
  return *msg->tabs_execute_script_info_;
}
const ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo&
ExtensionTelemetryReportRequest_SignalInfo::_Internal::remote_host_contacted_info(const ExtensionTelemetryReportRequest_SignalInfo* msg) {
  return *msg->remote_host_contacted_info_;
}
ExtensionTelemetryReportRequest_SignalInfo::ExtensionTelemetryReportRequest_SignalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
}
ExtensionTelemetryReportRequest_SignalInfo::ExtensionTelemetryReportRequest_SignalInfo(const ExtensionTelemetryReportRequest_SignalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_tabs_execute_script_info()) {
    tabs_execute_script_info_ = new ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo(*from.tabs_execute_script_info_);
  } else {
    tabs_execute_script_info_ = nullptr;
  }
  if (from._internal_has_remote_host_contacted_info()) {
    remote_host_contacted_info_ = new ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo(*from.remote_host_contacted_info_);
  } else {
    remote_host_contacted_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
}

inline void ExtensionTelemetryReportRequest_SignalInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tabs_execute_script_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remote_host_contacted_info_) -
    reinterpret_cast<char*>(&tabs_execute_script_info_)) + sizeof(remote_host_contacted_info_));
}

ExtensionTelemetryReportRequest_SignalInfo::~ExtensionTelemetryReportRequest_SignalInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryReportRequest_SignalInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tabs_execute_script_info_;
  if (this != internal_default_instance()) delete remote_host_contacted_info_;
}

void ExtensionTelemetryReportRequest_SignalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryReportRequest_SignalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tabs_execute_script_info_ != nullptr);
      tabs_execute_script_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(remote_host_contacted_info_ != nullptr);
      remote_host_contacted_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryReportRequest_SignalInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo tabs_execute_script_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tabs_execute_script_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo remote_host_contacted_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_host_contacted_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryReportRequest_SignalInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo tabs_execute_script_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tabs_execute_script_info(this),
        _Internal::tabs_execute_script_info(this).GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo remote_host_contacted_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::remote_host_contacted_info(this),
        _Internal::remote_host_contacted_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
  return target;
}

size_t ExtensionTelemetryReportRequest_SignalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.TabsExecuteScriptInfo tabs_execute_script_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tabs_execute_script_info_);
    }

    // optional .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo.RemoteHostContactedInfo remote_host_contacted_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remote_host_contacted_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryReportRequest_SignalInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryReportRequest_SignalInfo*>(
      &from));
}

void ExtensionTelemetryReportRequest_SignalInfo::MergeFrom(const ExtensionTelemetryReportRequest_SignalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tabs_execute_script_info()->::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo::MergeFrom(from._internal_tabs_execute_script_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_remote_host_contacted_info()->::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo::MergeFrom(from._internal_remote_host_contacted_info());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryReportRequest_SignalInfo::CopyFrom(const ExtensionTelemetryReportRequest_SignalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryReportRequest.SignalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryReportRequest_SignalInfo::IsInitialized() const {
  return true;
}

void ExtensionTelemetryReportRequest_SignalInfo::InternalSwap(ExtensionTelemetryReportRequest_SignalInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionTelemetryReportRequest_SignalInfo, remote_host_contacted_info_)
      + sizeof(ExtensionTelemetryReportRequest_SignalInfo::remote_host_contacted_info_)
      - PROTOBUF_FIELD_OFFSET(ExtensionTelemetryReportRequest_SignalInfo, tabs_execute_script_info_)>(
          reinterpret_cast<char*>(&tabs_execute_script_info_),
          reinterpret_cast<char*>(&other->tabs_execute_script_info_));
}

std::string ExtensionTelemetryReportRequest_SignalInfo::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryReportRequest.SignalInfo";
}


// ===================================================================

class ExtensionTelemetryReportRequest_Report::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionTelemetryReportRequest_Report>()._has_bits_);
  static const ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo& extension(const ExtensionTelemetryReportRequest_Report* msg);
  static void set_has_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo&
ExtensionTelemetryReportRequest_Report::_Internal::extension(const ExtensionTelemetryReportRequest_Report* msg) {
  return *msg->extension_;
}
ExtensionTelemetryReportRequest_Report::ExtensionTelemetryReportRequest_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  signals_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryReportRequest.Report)
}
ExtensionTelemetryReportRequest_Report::ExtensionTelemetryReportRequest_Report(const ExtensionTelemetryReportRequest_Report& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      signals_(from.signals_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_extension()) {
    extension_ = new ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo(*from.extension_);
  } else {
    extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryReportRequest.Report)
}

inline void ExtensionTelemetryReportRequest_Report::SharedCtor() {
extension_ = nullptr;
}

ExtensionTelemetryReportRequest_Report::~ExtensionTelemetryReportRequest_Report() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryReportRequest.Report)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryReportRequest_Report::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete extension_;
}

void ExtensionTelemetryReportRequest_Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryReportRequest_Report::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryReportRequest.Report)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(extension_ != nullptr);
    extension_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryReportRequest_Report::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo extension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo signals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryReportRequest_Report::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryReportRequest.Report)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo extension = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::extension(this),
        _Internal::extension(this).GetCachedSize(), target, stream);
  }

  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo signals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryReportRequest.Report)
  return target;
}

size_t ExtensionTelemetryReportRequest_Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryReportRequest.Report)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ExtensionTelemetryReportRequest.SignalInfo signals = 2;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .safe_browsing.ExtensionTelemetryReportRequest.ExtensionInfo extension = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryReportRequest_Report::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryReportRequest_Report*>(
      &from));
}

void ExtensionTelemetryReportRequest_Report::MergeFrom(const ExtensionTelemetryReportRequest_Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryReportRequest.Report)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  if (from._internal_has_extension()) {
    _internal_mutable_extension()->::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo::MergeFrom(from._internal_extension());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryReportRequest_Report::CopyFrom(const ExtensionTelemetryReportRequest_Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryReportRequest.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryReportRequest_Report::IsInitialized() const {
  return true;
}

void ExtensionTelemetryReportRequest_Report::InternalSwap(ExtensionTelemetryReportRequest_Report* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signals_.InternalSwap(&other->signals_);
  swap(extension_, other->extension_);
}

std::string ExtensionTelemetryReportRequest_Report::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryReportRequest.Report";
}


// ===================================================================

class ExtensionTelemetryReportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionTelemetryReportRequest>()._has_bits_);
  static void set_has_creation_timestamp_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExtensionTelemetryReportRequest::ExtensionTelemetryReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  reports_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryReportRequest)
}
ExtensionTelemetryReportRequest::ExtensionTelemetryReportRequest(const ExtensionTelemetryReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  creation_timestamp_msec_ = from.creation_timestamp_msec_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryReportRequest)
}

inline void ExtensionTelemetryReportRequest::SharedCtor() {
creation_timestamp_msec_ = int64_t{0};
}

ExtensionTelemetryReportRequest::~ExtensionTelemetryReportRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtensionTelemetryReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  creation_timestamp_msec_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 creation_timestamp_msec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_creation_timestamp_msec(&has_bits);
          creation_timestamp_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ExtensionTelemetryReportRequest.Report reports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 creation_timestamp_msec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_creation_timestamp_msec(), target);
  }

  // repeated .safe_browsing.ExtensionTelemetryReportRequest.Report reports = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reports_size()); i < n; i++) {
    const auto& repfield = this->_internal_reports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryReportRequest)
  return target;
}

size_t ExtensionTelemetryReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ExtensionTelemetryReportRequest.Report reports = 2;
  total_size += 1UL * this->_internal_reports_size();
  for (const auto& msg : this->reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 creation_timestamp_msec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_timestamp_msec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryReportRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryReportRequest*>(
      &from));
}

void ExtensionTelemetryReportRequest::MergeFrom(const ExtensionTelemetryReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
  if (from._internal_has_creation_timestamp_msec()) {
    _internal_set_creation_timestamp_msec(from._internal_creation_timestamp_msec());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryReportRequest::CopyFrom(const ExtensionTelemetryReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryReportRequest::IsInitialized() const {
  return true;
}

void ExtensionTelemetryReportRequest::InternalSwap(ExtensionTelemetryReportRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reports_.InternalSwap(&other->reports_);
  swap(creation_timestamp_msec_, other->creation_timestamp_msec_);
}

std::string ExtensionTelemetryReportRequest::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryReportRequest";
}


// ===================================================================

class ExtensionTelemetryResponse::_Internal {
 public:
};

ExtensionTelemetryResponse::ExtensionTelemetryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.ExtensionTelemetryResponse)
}
ExtensionTelemetryResponse::ExtensionTelemetryResponse(const ExtensionTelemetryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safe_browsing.ExtensionTelemetryResponse)
}

inline void ExtensionTelemetryResponse::SharedCtor() {
}

ExtensionTelemetryResponse::~ExtensionTelemetryResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.ExtensionTelemetryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionTelemetryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtensionTelemetryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionTelemetryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.ExtensionTelemetryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionTelemetryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionTelemetryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.ExtensionTelemetryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.ExtensionTelemetryResponse)
  return target;
}

size_t ExtensionTelemetryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.ExtensionTelemetryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionTelemetryResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionTelemetryResponse*>(
      &from));
}

void ExtensionTelemetryResponse::MergeFrom(const ExtensionTelemetryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.ExtensionTelemetryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionTelemetryResponse::CopyFrom(const ExtensionTelemetryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.ExtensionTelemetryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionTelemetryResponse::IsInitialized() const {
  return true;
}

void ExtensionTelemetryResponse::InternalSwap(ExtensionTelemetryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string ExtensionTelemetryResponse::GetTypeName() const {
  return "safe_browsing.ExtensionTelemetryResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::ChromeUserPopulation_PageLoadToken*
Arena::CreateMaybeMessage< ::safe_browsing::ChromeUserPopulation_PageLoadToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ChromeUserPopulation_PageLoadToken >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ChromeUserPopulation*
Arena::CreateMaybeMessage< ::safe_browsing::ChromeUserPopulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ChromeUserPopulation >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientPhishingRequest_Feature*
Arena::CreateMaybeMessage< ::safe_browsing::ClientPhishingRequest_Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientPhishingRequest_Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientPhishingRequest_CategoryScore*
Arena::CreateMaybeMessage< ::safe_browsing::ClientPhishingRequest_CategoryScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientPhishingRequest_CategoryScore >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientPhishingRequest*
Arena::CreateMaybeMessage< ::safe_browsing::ClientPhishingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientPhishingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientPhishingResponse*
Arena::CreateMaybeMessage< ::safe_browsing::ClientPhishingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientPhishingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::LoginReputationClientRequest_Frame_Form*
Arena::CreateMaybeMessage< ::safe_browsing::LoginReputationClientRequest_Frame_Form >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::LoginReputationClientRequest_Frame_Form >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::LoginReputationClientRequest_Frame*
Arena::CreateMaybeMessage< ::safe_browsing::LoginReputationClientRequest_Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::LoginReputationClientRequest_Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType*
Arena::CreateMaybeMessage< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent_ReusedPasswordAccountType >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent*
Arena::CreateMaybeMessage< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::LoginReputationClientRequest_PasswordReuseEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment*
Arena::CreateMaybeMessage< ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::LoginReputationClientRequest_UrlDisplayExperiment >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo*
Arena::CreateMaybeMessage< ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::LoginReputationClientRequest_ReferringAppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::LoginReputationClientRequest*
Arena::CreateMaybeMessage< ::safe_browsing::LoginReputationClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::LoginReputationClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::LoginReputationClientResponse*
Arena::CreateMaybeMessage< ::safe_browsing::LoginReputationClientResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::LoginReputationClientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::VisualFeatures_BlurredImage*
Arena::CreateMaybeMessage< ::safe_browsing::VisualFeatures_BlurredImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::VisualFeatures_BlurredImage >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::VisualFeatures*
Arena::CreateMaybeMessage< ::safe_browsing::VisualFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::VisualFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DomFeatures_Feature*
Arena::CreateMaybeMessage< ::safe_browsing::DomFeatures_Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::DomFeatures_Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DomFeatures*
Arena::CreateMaybeMessage< ::safe_browsing::DomFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::DomFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_Digests*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_Digests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_Digests >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_Resource*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_CertificateChain_Element*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_CertificateChain_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_CertificateChain_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_CertificateChain*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_CertificateChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_CertificateChain >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_ExtendedAttr*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_ExtendedAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_ExtendedAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_SignatureInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_SignatureInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_SignatureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_PEImageHeaders_DebugData >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_PEImageHeaders*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_PEImageHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_PEImageHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_MachOHeaders_LoadCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_MachOHeaders*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_MachOHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_MachOHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_ImageHeaders*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_ImageHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_ImageHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_ArchivedBinary*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_ArchivedBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_ArchivedBinary >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_DetachedCodeSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_DocumentInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_DocumentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_DocumentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_DocumentProcessingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_DocumentSummary*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_DocumentSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_DocumentSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest_ArchiveSummary*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest_ArchiveSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest_ArchiveSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadRequest*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ReferrerChainOptions*
Arena::CreateMaybeMessage< ::safe_browsing::ReferrerChainOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ReferrerChainOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ReferrerChainEntry_ServerRedirect*
Arena::CreateMaybeMessage< ::safe_browsing::ReferrerChainEntry_ServerRedirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ReferrerChainEntry_ServerRedirect >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ReferrerChainEntry*
Arena::CreateMaybeMessage< ::safe_browsing::ReferrerChainEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ReferrerChainEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadResponse_MoreInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadResponse_MoreInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadResponse_MoreInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadResponse*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadReport_UserInformation*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadReport_UserInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadReport_UserInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientDownloadReport*
Arena::CreateMaybeMessage< ::safe_browsing::ClientDownloadReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientDownloadReport >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientUploadResponse*
Arena::CreateMaybeMessage< ::safe_browsing::ClientUploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_IncidentData_TrackedPreferenceIncident >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident_ContainedFile >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_IncidentData_BinaryIntegrityIncident >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_IncidentData_ResourceRequestIncident >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_IncidentData*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_IncidentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_IncidentData >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_DownloadDetails*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_DownloadDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_DownloadDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryValue >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS_RegistryKey >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_OS*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_OS >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_Machine >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Patch >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_NetworkProvider >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_Dll >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState_Modification >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process_ModuleState >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData_Process*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData_Process >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_EnvironmentData*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_EnvironmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_EnvironmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_ExtensionData_ExtensionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_ExtensionData*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_ExtensionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_ExtensionData >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport_NonBinaryDownloadDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentReport*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentReport >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentResponse_EnvironmentRequest*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentResponse_EnvironmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentResponse_EnvironmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientIncidentResponse*
Arena::CreateMaybeMessage< ::safe_browsing::ClientIncidentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientIncidentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DownloadMetadata*
Arena::CreateMaybeMessage< ::safe_browsing::DownloadMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::DownloadMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest_FirstLine >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse_FirstLine >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_HTTPResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_Resource*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_SafeBrowsingClientProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo_Digests >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest_DownloadItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ClientSafeBrowsingReportRequest*
Arena::CreateMaybeMessage< ::safe_browsing::ClientSafeBrowsingReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ClientSafeBrowsingReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::HTMLElement_Attribute*
Arena::CreateMaybeMessage< ::safe_browsing::HTMLElement_Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::HTMLElement_Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::HTMLElement*
Arena::CreateMaybeMessage< ::safe_browsing::HTMLElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::HTMLElement >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionWebStoreInstallRequest*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionWebStoreInstallRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionWebStoreInstallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryReportRequest_ExtensionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo_ScriptInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_TabsExecuteScriptInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo_RemoteHostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo_RemoteHostContactedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryReportRequest_SignalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryReportRequest_Report*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryReportRequest_Report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryReportRequest_Report >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryReportRequest*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::ExtensionTelemetryResponse*
Arena::CreateMaybeMessage< ::safe_browsing::ExtensionTelemetryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::ExtensionTelemetryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
