// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v4_store.proto

#include "v4_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safe_browsing {
PROTOBUF_CONSTEXPR V4StoreFileFormat::V4StoreFileFormat(
    ::_pbi::ConstantInitialized)
  : list_update_response_(nullptr)
  , magic_number_(0u)
  , version_number_(0u){}
struct V4StoreFileFormatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V4StoreFileFormatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V4StoreFileFormatDefaultTypeInternal() {}
  union {
    V4StoreFileFormat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V4StoreFileFormatDefaultTypeInternal _V4StoreFileFormat_default_instance_;
}  // namespace safe_browsing
namespace safe_browsing {

// ===================================================================

class V4StoreFileFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<V4StoreFileFormat>()._has_bits_);
  static void set_has_magic_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse& list_update_response(const V4StoreFileFormat* msg);
  static void set_has_list_update_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse&
V4StoreFileFormat::_Internal::list_update_response(const V4StoreFileFormat* msg) {
  return *msg->list_update_response_;
}
void V4StoreFileFormat::clear_list_update_response() {
  if (list_update_response_ != nullptr) list_update_response_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
V4StoreFileFormat::V4StoreFileFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.V4StoreFileFormat)
}
V4StoreFileFormat::V4StoreFileFormat(const V4StoreFileFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_list_update_response()) {
    list_update_response_ = new ::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse(*from.list_update_response_);
  } else {
    list_update_response_ = nullptr;
  }
  ::memcpy(&magic_number_, &from.magic_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_number_) -
    reinterpret_cast<char*>(&magic_number_)) + sizeof(version_number_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.V4StoreFileFormat)
}

inline void V4StoreFileFormat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&list_update_response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_number_) -
    reinterpret_cast<char*>(&list_update_response_)) + sizeof(version_number_));
}

V4StoreFileFormat::~V4StoreFileFormat() {
  // @@protoc_insertion_point(destructor:safe_browsing.V4StoreFileFormat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V4StoreFileFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete list_update_response_;
}

void V4StoreFileFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void V4StoreFileFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.V4StoreFileFormat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(list_update_response_ != nullptr);
    list_update_response_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&magic_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_number_) -
        reinterpret_cast<char*>(&magic_number_)) + sizeof(version_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* V4StoreFileFormat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 magic_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_magic_number(&has_bits);
          magic_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version_number(&has_bits);
          version_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.FetchThreatListUpdatesResponse.ListUpdateResponse list_update_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_update_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V4StoreFileFormat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.V4StoreFileFormat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 magic_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_magic_number(), target);
  }

  // optional uint32 version_number = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version_number(), target);
  }

  // optional .safe_browsing.FetchThreatListUpdatesResponse.ListUpdateResponse list_update_response = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::list_update_response(this),
        _Internal::list_update_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.V4StoreFileFormat)
  return target;
}

size_t V4StoreFileFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.V4StoreFileFormat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .safe_browsing.FetchThreatListUpdatesResponse.ListUpdateResponse list_update_response = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_update_response_);
    }

    // optional uint32 magic_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_magic_number());
    }

    // optional uint32 version_number = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V4StoreFileFormat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const V4StoreFileFormat*>(
      &from));
}

void V4StoreFileFormat::MergeFrom(const V4StoreFileFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.V4StoreFileFormat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_list_update_response()->::safe_browsing::FetchThreatListUpdatesResponse_ListUpdateResponse::MergeFrom(from._internal_list_update_response());
    }
    if (cached_has_bits & 0x00000002u) {
      magic_number_ = from.magic_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_number_ = from.version_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void V4StoreFileFormat::CopyFrom(const V4StoreFileFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.V4StoreFileFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4StoreFileFormat::IsInitialized() const {
  return true;
}

void V4StoreFileFormat::InternalSwap(V4StoreFileFormat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V4StoreFileFormat, version_number_)
      + sizeof(V4StoreFileFormat::version_number_)
      - PROTOBUF_FIELD_OFFSET(V4StoreFileFormat, list_update_response_)>(
          reinterpret_cast<char*>(&list_update_response_),
          reinterpret_cast<char*>(&other->list_update_response_));
}

std::string V4StoreFileFormat::GetTypeName() const {
  return "safe_browsing.V4StoreFileFormat";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::V4StoreFileFormat*
Arena::CreateMaybeMessage< ::safe_browsing::V4StoreFileFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::V4StoreFileFormat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
