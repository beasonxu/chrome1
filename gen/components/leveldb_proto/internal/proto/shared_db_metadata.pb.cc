// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared_db_metadata.proto

#include "shared_db_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace leveldb_proto {
PROTOBUF_CONSTEXPR SharedDBMetadataProto::SharedDBMetadataProto(
    ::_pbi::ConstantInitialized)
  : corruptions_(uint64_t{0u})
  , migration_status_(0)

  , failure_count_(0u){}
struct SharedDBMetadataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharedDBMetadataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharedDBMetadataProtoDefaultTypeInternal() {}
  union {
    SharedDBMetadataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharedDBMetadataProtoDefaultTypeInternal _SharedDBMetadataProto_default_instance_;
}  // namespace leveldb_proto
namespace leveldb_proto {
bool SharedDBMetadataProto_MigrationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SharedDBMetadataProto_MigrationStatus_strings[5] = {};

static const char SharedDBMetadataProto_MigrationStatus_names[] =
  "MIGRATE_TO_SHARED_SUCCESSFUL"
  "MIGRATE_TO_SHARED_UNIQUE_TO_BE_DELETED"
  "MIGRATE_TO_UNIQUE_SHARED_TO_BE_DELETED"
  "MIGRATE_TO_UNIQUE_SUCCESSFUL"
  "MIGRATION_NOT_ATTEMPTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SharedDBMetadataProto_MigrationStatus_entries[] = {
  { {SharedDBMetadataProto_MigrationStatus_names + 0, 28}, 1 },
  { {SharedDBMetadataProto_MigrationStatus_names + 28, 38}, 2 },
  { {SharedDBMetadataProto_MigrationStatus_names + 66, 38}, 4 },
  { {SharedDBMetadataProto_MigrationStatus_names + 104, 28}, 3 },
  { {SharedDBMetadataProto_MigrationStatus_names + 132, 23}, 0 },
};

static const int SharedDBMetadataProto_MigrationStatus_entries_by_number[] = {
  4, // 0 -> MIGRATION_NOT_ATTEMPTED
  0, // 1 -> MIGRATE_TO_SHARED_SUCCESSFUL
  1, // 2 -> MIGRATE_TO_SHARED_UNIQUE_TO_BE_DELETED
  3, // 3 -> MIGRATE_TO_UNIQUE_SUCCESSFUL
  2, // 4 -> MIGRATE_TO_UNIQUE_SHARED_TO_BE_DELETED
};

const std::string& SharedDBMetadataProto_MigrationStatus_Name(
    SharedDBMetadataProto_MigrationStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SharedDBMetadataProto_MigrationStatus_entries,
          SharedDBMetadataProto_MigrationStatus_entries_by_number,
          5, SharedDBMetadataProto_MigrationStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SharedDBMetadataProto_MigrationStatus_entries,
      SharedDBMetadataProto_MigrationStatus_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SharedDBMetadataProto_MigrationStatus_strings[idx].get();
}
bool SharedDBMetadataProto_MigrationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharedDBMetadataProto_MigrationStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SharedDBMetadataProto_MigrationStatus_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SharedDBMetadataProto_MigrationStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::MIGRATION_NOT_ATTEMPTED;
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::MIGRATE_TO_SHARED_SUCCESSFUL;
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::MIGRATE_TO_SHARED_UNIQUE_TO_BE_DELETED;
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::MIGRATE_TO_UNIQUE_SUCCESSFUL;
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::MIGRATE_TO_UNIQUE_SHARED_TO_BE_DELETED;
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::MigrationStatus_MIN;
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::MigrationStatus_MAX;
constexpr int SharedDBMetadataProto::MigrationStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SharedDBMetadataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SharedDBMetadataProto>()._has_bits_);
  static void set_has_corruptions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_migration_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_failure_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharedDBMetadataProto::SharedDBMetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:leveldb_proto.SharedDBMetadataProto)
}
SharedDBMetadataProto::SharedDBMetadataProto(const SharedDBMetadataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&corruptions_, &from.corruptions_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_count_) -
    reinterpret_cast<char*>(&corruptions_)) + sizeof(failure_count_));
  // @@protoc_insertion_point(copy_constructor:leveldb_proto.SharedDBMetadataProto)
}

inline void SharedDBMetadataProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&corruptions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failure_count_) -
    reinterpret_cast<char*>(&corruptions_)) + sizeof(failure_count_));
}

SharedDBMetadataProto::~SharedDBMetadataProto() {
  // @@protoc_insertion_point(destructor:leveldb_proto.SharedDBMetadataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharedDBMetadataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharedDBMetadataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharedDBMetadataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:leveldb_proto.SharedDBMetadataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&corruptions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failure_count_) -
        reinterpret_cast<char*>(&corruptions_)) + sizeof(failure_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharedDBMetadataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 corruptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_corruptions(&has_bits);
          corruptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .leveldb_proto.SharedDBMetadataProto.MigrationStatus migration_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::leveldb_proto::SharedDBMetadataProto_MigrationStatus_IsValid(val))) {
            _internal_set_migration_status(static_cast<::leveldb_proto::SharedDBMetadataProto_MigrationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 failure_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_failure_count(&has_bits);
          failure_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharedDBMetadataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:leveldb_proto.SharedDBMetadataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 corruptions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_corruptions(), target);
  }

  // optional .leveldb_proto.SharedDBMetadataProto.MigrationStatus migration_status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_migration_status(), target);
  }

  // optional uint32 failure_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_failure_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:leveldb_proto.SharedDBMetadataProto)
  return target;
}

size_t SharedDBMetadataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:leveldb_proto.SharedDBMetadataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 corruptions = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_corruptions());
    }

    // optional .leveldb_proto.SharedDBMetadataProto.MigrationStatus migration_status = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_migration_status());
    }

    // optional uint32 failure_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_failure_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedDBMetadataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharedDBMetadataProto*>(
      &from));
}

void SharedDBMetadataProto::MergeFrom(const SharedDBMetadataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:leveldb_proto.SharedDBMetadataProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      corruptions_ = from.corruptions_;
    }
    if (cached_has_bits & 0x00000002u) {
      migration_status_ = from.migration_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      failure_count_ = from.failure_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharedDBMetadataProto::CopyFrom(const SharedDBMetadataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leveldb_proto.SharedDBMetadataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedDBMetadataProto::IsInitialized() const {
  return true;
}

void SharedDBMetadataProto::InternalSwap(SharedDBMetadataProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharedDBMetadataProto, failure_count_)
      + sizeof(SharedDBMetadataProto::failure_count_)
      - PROTOBUF_FIELD_OFFSET(SharedDBMetadataProto, corruptions_)>(
          reinterpret_cast<char*>(&corruptions_),
          reinterpret_cast<char*>(&other->corruptions_));
}

std::string SharedDBMetadataProto::GetTypeName() const {
  return "leveldb_proto.SharedDBMetadataProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace leveldb_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::leveldb_proto::SharedDBMetadataProto*
Arena::CreateMaybeMessage< ::leveldb_proto::SharedDBMetadataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::leveldb_proto::SharedDBMetadataProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
