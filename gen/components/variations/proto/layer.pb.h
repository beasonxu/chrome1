// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_layer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_layer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_layer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_layer_2eproto {
  static const uint32_t offsets[];
};
namespace variations {
class Layer;
struct LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class LayerMemberReference;
struct LayerMemberReferenceDefaultTypeInternal;
extern LayerMemberReferenceDefaultTypeInternal _LayerMemberReference_default_instance_;
class Layer_LayerMember;
struct Layer_LayerMemberDefaultTypeInternal;
extern Layer_LayerMemberDefaultTypeInternal _Layer_LayerMember_default_instance_;
class Layer_LayerMember_SlotRange;
struct Layer_LayerMember_SlotRangeDefaultTypeInternal;
extern Layer_LayerMember_SlotRangeDefaultTypeInternal _Layer_LayerMember_SlotRange_default_instance_;
}  // namespace variations
PROTOBUF_NAMESPACE_OPEN
template<> ::variations::Layer* Arena::CreateMaybeMessage<::variations::Layer>(Arena*);
template<> ::variations::LayerMemberReference* Arena::CreateMaybeMessage<::variations::LayerMemberReference>(Arena*);
template<> ::variations::Layer_LayerMember* Arena::CreateMaybeMessage<::variations::Layer_LayerMember>(Arena*);
template<> ::variations::Layer_LayerMember_SlotRange* Arena::CreateMaybeMessage<::variations::Layer_LayerMember_SlotRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace variations {

enum Layer_EntropyMode : int {
  Layer_EntropyMode_DEFAULT = 0,
  Layer_EntropyMode_LOW = 1
};
bool Layer_EntropyMode_IsValid(int value);
constexpr Layer_EntropyMode Layer_EntropyMode_EntropyMode_MIN = Layer_EntropyMode_DEFAULT;
constexpr Layer_EntropyMode Layer_EntropyMode_EntropyMode_MAX = Layer_EntropyMode_LOW;
constexpr int Layer_EntropyMode_EntropyMode_ARRAYSIZE = Layer_EntropyMode_EntropyMode_MAX + 1;

const std::string& Layer_EntropyMode_Name(Layer_EntropyMode value);
template<typename T>
inline const std::string& Layer_EntropyMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Layer_EntropyMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Layer_EntropyMode_Name.");
  return Layer_EntropyMode_Name(static_cast<Layer_EntropyMode>(enum_t_value));
}
bool Layer_EntropyMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Layer_EntropyMode* value);
// ===================================================================

class Layer_LayerMember_SlotRange final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:variations.Layer.LayerMember.SlotRange) */ {
 public:
  inline Layer_LayerMember_SlotRange() : Layer_LayerMember_SlotRange(nullptr) {}
  ~Layer_LayerMember_SlotRange() override;
  explicit PROTOBUF_CONSTEXPR Layer_LayerMember_SlotRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Layer_LayerMember_SlotRange(const Layer_LayerMember_SlotRange& from);
  Layer_LayerMember_SlotRange(Layer_LayerMember_SlotRange&& from) noexcept
    : Layer_LayerMember_SlotRange() {
    *this = ::std::move(from);
  }

  inline Layer_LayerMember_SlotRange& operator=(const Layer_LayerMember_SlotRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer_LayerMember_SlotRange& operator=(Layer_LayerMember_SlotRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Layer_LayerMember_SlotRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const Layer_LayerMember_SlotRange* internal_default_instance() {
    return reinterpret_cast<const Layer_LayerMember_SlotRange*>(
               &_Layer_LayerMember_SlotRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Layer_LayerMember_SlotRange& a, Layer_LayerMember_SlotRange& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Layer_LayerMember_SlotRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Layer_LayerMember_SlotRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Layer_LayerMember_SlotRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Layer_LayerMember_SlotRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Layer_LayerMember_SlotRange& from);
  void MergeFrom(const Layer_LayerMember_SlotRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Layer_LayerMember_SlotRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "variations.Layer.LayerMember.SlotRange";
  }
  protected:
  explicit Layer_LayerMember_SlotRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional uint32 start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  uint32_t start() const;
  void set_start(uint32_t value);
  private:
  uint32_t _internal_start() const;
  void _internal_set_start(uint32_t value);
  public:

  // optional uint32 end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  uint32_t end() const;
  void set_end(uint32_t value);
  private:
  uint32_t _internal_end() const;
  void _internal_set_end(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:variations.Layer.LayerMember.SlotRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t start_;
  uint32_t end_;
  friend struct ::TableStruct_layer_2eproto;
};
// -------------------------------------------------------------------

class Layer_LayerMember final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:variations.Layer.LayerMember) */ {
 public:
  inline Layer_LayerMember() : Layer_LayerMember(nullptr) {}
  ~Layer_LayerMember() override;
  explicit PROTOBUF_CONSTEXPR Layer_LayerMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Layer_LayerMember(const Layer_LayerMember& from);
  Layer_LayerMember(Layer_LayerMember&& from) noexcept
    : Layer_LayerMember() {
    *this = ::std::move(from);
  }

  inline Layer_LayerMember& operator=(const Layer_LayerMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer_LayerMember& operator=(Layer_LayerMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Layer_LayerMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const Layer_LayerMember* internal_default_instance() {
    return reinterpret_cast<const Layer_LayerMember*>(
               &_Layer_LayerMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Layer_LayerMember& a, Layer_LayerMember& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Layer_LayerMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Layer_LayerMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Layer_LayerMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Layer_LayerMember>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Layer_LayerMember& from);
  void MergeFrom(const Layer_LayerMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Layer_LayerMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "variations.Layer.LayerMember";
  }
  protected:
  explicit Layer_LayerMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Layer_LayerMember_SlotRange SlotRange;

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .variations.Layer.LayerMember.SlotRange slots = 2;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::variations::Layer_LayerMember_SlotRange* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember_SlotRange >*
      mutable_slots();
  private:
  const ::variations::Layer_LayerMember_SlotRange& _internal_slots(int index) const;
  ::variations::Layer_LayerMember_SlotRange* _internal_add_slots();
  public:
  const ::variations::Layer_LayerMember_SlotRange& slots(int index) const;
  ::variations::Layer_LayerMember_SlotRange* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember_SlotRange >&
      slots() const;

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:variations.Layer.LayerMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember_SlotRange > slots_;
  uint32_t id_;
  friend struct ::TableStruct_layer_2eproto;
};
// -------------------------------------------------------------------

class Layer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:variations.Layer) */ {
 public:
  inline Layer() : Layer(nullptr) {}
  ~Layer() override;
  explicit PROTOBUF_CONSTEXPR Layer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Layer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Layer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "variations.Layer";
  }
  protected:
  explicit Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Layer_LayerMember LayerMember;

  typedef Layer_EntropyMode EntropyMode;
  static constexpr EntropyMode DEFAULT =
    Layer_EntropyMode_DEFAULT;
  static constexpr EntropyMode LOW =
    Layer_EntropyMode_LOW;
  static inline bool EntropyMode_IsValid(int value) {
    return Layer_EntropyMode_IsValid(value);
  }
  static constexpr EntropyMode EntropyMode_MIN =
    Layer_EntropyMode_EntropyMode_MIN;
  static constexpr EntropyMode EntropyMode_MAX =
    Layer_EntropyMode_EntropyMode_MAX;
  static constexpr int EntropyMode_ARRAYSIZE =
    Layer_EntropyMode_EntropyMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EntropyMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EntropyMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EntropyMode_Name.");
    return Layer_EntropyMode_Name(enum_t_value);
  }
  static inline bool EntropyMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EntropyMode* value) {
    return Layer_EntropyMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kIdFieldNumber = 1,
    kNumSlotsFieldNumber = 2,
    kSaltFieldNumber = 4,
    kEntropyModeFieldNumber = 5,
  };
  // repeated .variations.Layer.LayerMember members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::variations::Layer_LayerMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember >*
      mutable_members();
  private:
  const ::variations::Layer_LayerMember& _internal_members(int index) const;
  ::variations::Layer_LayerMember* _internal_add_members();
  public:
  const ::variations::Layer_LayerMember& members(int index) const;
  ::variations::Layer_LayerMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember >&
      members() const;

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 num_slots = 2;
  bool has_num_slots() const;
  private:
  bool _internal_has_num_slots() const;
  public:
  void clear_num_slots();
  uint32_t num_slots() const;
  void set_num_slots(uint32_t value);
  private:
  uint32_t _internal_num_slots() const;
  void _internal_set_num_slots(uint32_t value);
  public:

  // optional uint32 salt = 4;
  bool has_salt() const;
  private:
  bool _internal_has_salt() const;
  public:
  void clear_salt();
  uint32_t salt() const;
  void set_salt(uint32_t value);
  private:
  uint32_t _internal_salt() const;
  void _internal_set_salt(uint32_t value);
  public:

  // optional .variations.Layer.EntropyMode entropy_mode = 5;
  bool has_entropy_mode() const;
  private:
  bool _internal_has_entropy_mode() const;
  public:
  void clear_entropy_mode();
  ::variations::Layer_EntropyMode entropy_mode() const;
  void set_entropy_mode(::variations::Layer_EntropyMode value);
  private:
  ::variations::Layer_EntropyMode _internal_entropy_mode() const;
  void _internal_set_entropy_mode(::variations::Layer_EntropyMode value);
  public:

  // @@protoc_insertion_point(class_scope:variations.Layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember > members_;
  uint32_t id_;
  uint32_t num_slots_;
  uint32_t salt_;
  int entropy_mode_;
  friend struct ::TableStruct_layer_2eproto;
};
// -------------------------------------------------------------------

class LayerMemberReference final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:variations.LayerMemberReference) */ {
 public:
  inline LayerMemberReference() : LayerMemberReference(nullptr) {}
  ~LayerMemberReference() override;
  explicit PROTOBUF_CONSTEXPR LayerMemberReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerMemberReference(const LayerMemberReference& from);
  LayerMemberReference(LayerMemberReference&& from) noexcept
    : LayerMemberReference() {
    *this = ::std::move(from);
  }

  inline LayerMemberReference& operator=(const LayerMemberReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerMemberReference& operator=(LayerMemberReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayerMemberReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerMemberReference* internal_default_instance() {
    return reinterpret_cast<const LayerMemberReference*>(
               &_LayerMemberReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LayerMemberReference& a, LayerMemberReference& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayerMemberReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerMemberReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerMemberReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerMemberReference>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayerMemberReference& from);
  void MergeFrom(const LayerMemberReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerMemberReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "variations.LayerMemberReference";
  }
  protected:
  explicit LayerMemberReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerIdFieldNumber = 1,
    kLayerMemberIdFieldNumber = 2,
  };
  // optional uint32 layer_id = 1;
  bool has_layer_id() const;
  private:
  bool _internal_has_layer_id() const;
  public:
  void clear_layer_id();
  uint32_t layer_id() const;
  void set_layer_id(uint32_t value);
  private:
  uint32_t _internal_layer_id() const;
  void _internal_set_layer_id(uint32_t value);
  public:

  // optional uint32 layer_member_id = 2;
  bool has_layer_member_id() const;
  private:
  bool _internal_has_layer_member_id() const;
  public:
  void clear_layer_member_id();
  uint32_t layer_member_id() const;
  void set_layer_member_id(uint32_t value);
  private:
  uint32_t _internal_layer_member_id() const;
  void _internal_set_layer_member_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:variations.LayerMemberReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t layer_id_;
  uint32_t layer_member_id_;
  friend struct ::TableStruct_layer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Layer_LayerMember_SlotRange

// optional uint32 start = 1;
inline bool Layer_LayerMember_SlotRange::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Layer_LayerMember_SlotRange::has_start() const {
  return _internal_has_start();
}
inline void Layer_LayerMember_SlotRange::clear_start() {
  start_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Layer_LayerMember_SlotRange::_internal_start() const {
  return start_;
}
inline uint32_t Layer_LayerMember_SlotRange::start() const {
  // @@protoc_insertion_point(field_get:variations.Layer.LayerMember.SlotRange.start)
  return _internal_start();
}
inline void Layer_LayerMember_SlotRange::_internal_set_start(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  start_ = value;
}
inline void Layer_LayerMember_SlotRange::set_start(uint32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:variations.Layer.LayerMember.SlotRange.start)
}

// optional uint32 end = 2;
inline bool Layer_LayerMember_SlotRange::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Layer_LayerMember_SlotRange::has_end() const {
  return _internal_has_end();
}
inline void Layer_LayerMember_SlotRange::clear_end() {
  end_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Layer_LayerMember_SlotRange::_internal_end() const {
  return end_;
}
inline uint32_t Layer_LayerMember_SlotRange::end() const {
  // @@protoc_insertion_point(field_get:variations.Layer.LayerMember.SlotRange.end)
  return _internal_end();
}
inline void Layer_LayerMember_SlotRange::_internal_set_end(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  end_ = value;
}
inline void Layer_LayerMember_SlotRange::set_end(uint32_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:variations.Layer.LayerMember.SlotRange.end)
}

// -------------------------------------------------------------------

// Layer_LayerMember

// optional uint32 id = 1;
inline bool Layer_LayerMember::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Layer_LayerMember::has_id() const {
  return _internal_has_id();
}
inline void Layer_LayerMember::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Layer_LayerMember::_internal_id() const {
  return id_;
}
inline uint32_t Layer_LayerMember::id() const {
  // @@protoc_insertion_point(field_get:variations.Layer.LayerMember.id)
  return _internal_id();
}
inline void Layer_LayerMember::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Layer_LayerMember::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:variations.Layer.LayerMember.id)
}

// repeated .variations.Layer.LayerMember.SlotRange slots = 2;
inline int Layer_LayerMember::_internal_slots_size() const {
  return slots_.size();
}
inline int Layer_LayerMember::slots_size() const {
  return _internal_slots_size();
}
inline void Layer_LayerMember::clear_slots() {
  slots_.Clear();
}
inline ::variations::Layer_LayerMember_SlotRange* Layer_LayerMember::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:variations.Layer.LayerMember.slots)
  return slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember_SlotRange >*
Layer_LayerMember::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:variations.Layer.LayerMember.slots)
  return &slots_;
}
inline const ::variations::Layer_LayerMember_SlotRange& Layer_LayerMember::_internal_slots(int index) const {
  return slots_.Get(index);
}
inline const ::variations::Layer_LayerMember_SlotRange& Layer_LayerMember::slots(int index) const {
  // @@protoc_insertion_point(field_get:variations.Layer.LayerMember.slots)
  return _internal_slots(index);
}
inline ::variations::Layer_LayerMember_SlotRange* Layer_LayerMember::_internal_add_slots() {
  return slots_.Add();
}
inline ::variations::Layer_LayerMember_SlotRange* Layer_LayerMember::add_slots() {
  ::variations::Layer_LayerMember_SlotRange* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:variations.Layer.LayerMember.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember_SlotRange >&
Layer_LayerMember::slots() const {
  // @@protoc_insertion_point(field_list:variations.Layer.LayerMember.slots)
  return slots_;
}

// -------------------------------------------------------------------

// Layer

// optional uint32 id = 1;
inline bool Layer::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Layer::has_id() const {
  return _internal_has_id();
}
inline void Layer::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Layer::_internal_id() const {
  return id_;
}
inline uint32_t Layer::id() const {
  // @@protoc_insertion_point(field_get:variations.Layer.id)
  return _internal_id();
}
inline void Layer::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Layer::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:variations.Layer.id)
}

// optional uint32 num_slots = 2;
inline bool Layer::_internal_has_num_slots() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Layer::has_num_slots() const {
  return _internal_has_num_slots();
}
inline void Layer::clear_num_slots() {
  num_slots_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Layer::_internal_num_slots() const {
  return num_slots_;
}
inline uint32_t Layer::num_slots() const {
  // @@protoc_insertion_point(field_get:variations.Layer.num_slots)
  return _internal_num_slots();
}
inline void Layer::_internal_set_num_slots(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_slots_ = value;
}
inline void Layer::set_num_slots(uint32_t value) {
  _internal_set_num_slots(value);
  // @@protoc_insertion_point(field_set:variations.Layer.num_slots)
}

// repeated .variations.Layer.LayerMember members = 3;
inline int Layer::_internal_members_size() const {
  return members_.size();
}
inline int Layer::members_size() const {
  return _internal_members_size();
}
inline void Layer::clear_members() {
  members_.Clear();
}
inline ::variations::Layer_LayerMember* Layer::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:variations.Layer.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember >*
Layer::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:variations.Layer.members)
  return &members_;
}
inline const ::variations::Layer_LayerMember& Layer::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::variations::Layer_LayerMember& Layer::members(int index) const {
  // @@protoc_insertion_point(field_get:variations.Layer.members)
  return _internal_members(index);
}
inline ::variations::Layer_LayerMember* Layer::_internal_add_members() {
  return members_.Add();
}
inline ::variations::Layer_LayerMember* Layer::add_members() {
  ::variations::Layer_LayerMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:variations.Layer.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variations::Layer_LayerMember >&
Layer::members() const {
  // @@protoc_insertion_point(field_list:variations.Layer.members)
  return members_;
}

// optional uint32 salt = 4;
inline bool Layer::_internal_has_salt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Layer::has_salt() const {
  return _internal_has_salt();
}
inline void Layer::clear_salt() {
  salt_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Layer::_internal_salt() const {
  return salt_;
}
inline uint32_t Layer::salt() const {
  // @@protoc_insertion_point(field_get:variations.Layer.salt)
  return _internal_salt();
}
inline void Layer::_internal_set_salt(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  salt_ = value;
}
inline void Layer::set_salt(uint32_t value) {
  _internal_set_salt(value);
  // @@protoc_insertion_point(field_set:variations.Layer.salt)
}

// optional .variations.Layer.EntropyMode entropy_mode = 5;
inline bool Layer::_internal_has_entropy_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Layer::has_entropy_mode() const {
  return _internal_has_entropy_mode();
}
inline void Layer::clear_entropy_mode() {
  entropy_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::variations::Layer_EntropyMode Layer::_internal_entropy_mode() const {
  return static_cast< ::variations::Layer_EntropyMode >(entropy_mode_);
}
inline ::variations::Layer_EntropyMode Layer::entropy_mode() const {
  // @@protoc_insertion_point(field_get:variations.Layer.entropy_mode)
  return _internal_entropy_mode();
}
inline void Layer::_internal_set_entropy_mode(::variations::Layer_EntropyMode value) {
  assert(::variations::Layer_EntropyMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  entropy_mode_ = value;
}
inline void Layer::set_entropy_mode(::variations::Layer_EntropyMode value) {
  _internal_set_entropy_mode(value);
  // @@protoc_insertion_point(field_set:variations.Layer.entropy_mode)
}

// -------------------------------------------------------------------

// LayerMemberReference

// optional uint32 layer_id = 1;
inline bool LayerMemberReference::_internal_has_layer_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerMemberReference::has_layer_id() const {
  return _internal_has_layer_id();
}
inline void LayerMemberReference::clear_layer_id() {
  layer_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t LayerMemberReference::_internal_layer_id() const {
  return layer_id_;
}
inline uint32_t LayerMemberReference::layer_id() const {
  // @@protoc_insertion_point(field_get:variations.LayerMemberReference.layer_id)
  return _internal_layer_id();
}
inline void LayerMemberReference::_internal_set_layer_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  layer_id_ = value;
}
inline void LayerMemberReference::set_layer_id(uint32_t value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:variations.LayerMemberReference.layer_id)
}

// optional uint32 layer_member_id = 2;
inline bool LayerMemberReference::_internal_has_layer_member_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerMemberReference::has_layer_member_id() const {
  return _internal_has_layer_member_id();
}
inline void LayerMemberReference::clear_layer_member_id() {
  layer_member_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LayerMemberReference::_internal_layer_member_id() const {
  return layer_member_id_;
}
inline uint32_t LayerMemberReference::layer_member_id() const {
  // @@protoc_insertion_point(field_get:variations.LayerMemberReference.layer_member_id)
  return _internal_layer_member_id();
}
inline void LayerMemberReference::_internal_set_layer_member_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  layer_member_id_ = value;
}
inline void LayerMemberReference::set_layer_member_id(uint32_t value) {
  _internal_set_layer_member_id(value);
  // @@protoc_insertion_point(field_set:variations.LayerMemberReference.layer_member_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace variations

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::variations::Layer_EntropyMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_layer_2eproto
