// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/webxr/ArCoreJavaUtils

#ifndef org_chromium_components_webxr_ArCoreJavaUtils_JNI
#define org_chromium_components_webxr_ArCoreJavaUtils_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_webxr_ArCoreJavaUtils[];
const char kClassPath_org_chromium_components_webxr_ArCoreJavaUtils[] =
    "org/chromium/components/webxr/ArCoreJavaUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_webxr_ArCoreJavaUtils_clazz(nullptr);
#ifndef org_chromium_components_webxr_ArCoreJavaUtils_clazz_defined
#define org_chromium_components_webxr_ArCoreJavaUtils_clazz_defined
inline jclass org_chromium_components_webxr_ArCoreJavaUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_components_webxr_ArCoreJavaUtils,
      &g_org_chromium_components_webxr_ArCoreJavaUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace webxr {

JNI_GENERATOR_EXPORT void Java_J_N_Mb69SmHW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeArCoreJavaUtils,
    jobject caller,
    jobject surface,
    jobject rootWindow,
    jint rotation,
    jint width,
    jint height) {
  ArCoreJavaUtils* native = reinterpret_cast<ArCoreJavaUtils*>(nativeArCoreJavaUtils);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDrawingSurfaceReady");
  return native->OnDrawingSurfaceReady(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, surface), base::android::JavaParamRef<jobject>(env,
      rootWindow), rotation, width, height);
}

JNI_GENERATOR_EXPORT void Java_J_N_MDIQ8Jlb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeArCoreJavaUtils,
    jobject caller,
    jboolean primary,
    jboolean touching,
    jint pointerId,
    jfloat x,
    jfloat y) {
  ArCoreJavaUtils* native = reinterpret_cast<ArCoreJavaUtils*>(nativeArCoreJavaUtils);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDrawingSurfaceTouch");
  return native->OnDrawingSurfaceTouch(env, base::android::JavaParamRef<jobject>(env, caller),
      primary, touching, pointerId, x, y);
}

JNI_GENERATOR_EXPORT void Java_J_N_MQMjvNKC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeArCoreJavaUtils,
    jobject caller) {
  ArCoreJavaUtils* native = reinterpret_cast<ArCoreJavaUtils*>(nativeArCoreJavaUtils);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDrawingSurfaceDestroyed");
  return native->OnDrawingSurfaceDestroyed(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID> g_org_chromium_components_webxr_ArCoreJavaUtils_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ArCoreJavaUtils_create(JNIEnv* env, jlong
    nativeArCoreJavaUtils) {
  jclass clazz = org_chromium_components_webxr_ArCoreJavaUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webxr_ArCoreJavaUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/components/webxr/ArCoreJavaUtils;",
          &g_org_chromium_components_webxr_ArCoreJavaUtils_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeArCoreJavaUtils);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webxr_ArCoreJavaUtils_getArCoreShimLibraryPath(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_ArCoreJavaUtils_getArCoreShimLibraryPath(JNIEnv* env) {
  jclass clazz = org_chromium_components_webxr_ArCoreJavaUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webxr_ArCoreJavaUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getArCoreShimLibraryPath",
          "()Ljava/lang/String;",
          &g_org_chromium_components_webxr_ArCoreJavaUtils_getArCoreShimLibraryPath);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webxr_ArCoreJavaUtils_getApplicationContext(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ArCoreJavaUtils_getApplicationContext(JNIEnv*
    env) {
  jclass clazz = org_chromium_components_webxr_ArCoreJavaUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webxr_ArCoreJavaUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getApplicationContext",
          "()Landroid/content/Context;",
          &g_org_chromium_components_webxr_ArCoreJavaUtils_getApplicationContext);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_components_webxr_ArCoreJavaUtils_startSession(nullptr);
static void Java_ArCoreJavaUtils_startSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& compositorDelegateProvider,
    const base::android::JavaRef<jobject>& webContents,
    jboolean useOverlay,
    jboolean canRenderDomContent) {
  jclass clazz = org_chromium_components_webxr_ArCoreJavaUtils_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_webxr_ArCoreJavaUtils_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "startSession",
"(Lorg/chromium/components/webxr/ArCompositorDelegateProvider;Lorg/chromium/content_public/browser/WebContents;ZZ)V",
          &g_org_chromium_components_webxr_ArCoreJavaUtils_startSession);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, compositorDelegateProvider.obj(), webContents.obj(),
              useOverlay, canRenderDomContent);
}

static std::atomic<jmethodID> g_org_chromium_components_webxr_ArCoreJavaUtils_endSession(nullptr);
static void Java_ArCoreJavaUtils_endSession(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_components_webxr_ArCoreJavaUtils_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_webxr_ArCoreJavaUtils_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "endSession",
          "()V",
          &g_org_chromium_components_webxr_ArCoreJavaUtils_endSession);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webxr_ArCoreJavaUtils_onNativeDestroy(nullptr);
static void Java_ArCoreJavaUtils_onNativeDestroy(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_components_webxr_ArCoreJavaUtils_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_webxr_ArCoreJavaUtils_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroy",
          "()V",
          &g_org_chromium_components_webxr_ArCoreJavaUtils_onNativeDestroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace webxr

#endif  // org_chromium_components_webxr_ArCoreJavaUtils_JNI
