// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leak_detection_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_leak_5fdetection_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_leak_5fdetection_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_leak_5fdetection_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_leak_5fdetection_5fapi_2eproto {
  static const uint32_t offsets[];
};
namespace google {
namespace internal {
namespace identity {
namespace passwords {
namespace leak {
namespace check {
namespace v1 {
class LookupSingleLeakRequest;
struct LookupSingleLeakRequestDefaultTypeInternal;
extern LookupSingleLeakRequestDefaultTypeInternal _LookupSingleLeakRequest_default_instance_;
class LookupSingleLeakResponse;
struct LookupSingleLeakResponseDefaultTypeInternal;
extern LookupSingleLeakResponseDefaultTypeInternal _LookupSingleLeakResponse_default_instance_;
}  // namespace v1
}  // namespace check
}  // namespace leak
}  // namespace passwords
}  // namespace identity
}  // namespace internal
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest* Arena::CreateMaybeMessage<::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest>(Arena*);
template<> ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse* Arena::CreateMaybeMessage<::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace internal {
namespace identity {
namespace passwords {
namespace leak {
namespace check {
namespace v1 {

// ===================================================================

class LookupSingleLeakRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest) */ {
 public:
  inline LookupSingleLeakRequest() : LookupSingleLeakRequest(nullptr) {}
  ~LookupSingleLeakRequest() override;
  explicit PROTOBUF_CONSTEXPR LookupSingleLeakRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupSingleLeakRequest(const LookupSingleLeakRequest& from);
  LookupSingleLeakRequest(LookupSingleLeakRequest&& from) noexcept
    : LookupSingleLeakRequest() {
    *this = ::std::move(from);
  }

  inline LookupSingleLeakRequest& operator=(const LookupSingleLeakRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupSingleLeakRequest& operator=(LookupSingleLeakRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupSingleLeakRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupSingleLeakRequest* internal_default_instance() {
    return reinterpret_cast<const LookupSingleLeakRequest*>(
               &_LookupSingleLeakRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LookupSingleLeakRequest& a, LookupSingleLeakRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LookupSingleLeakRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupSingleLeakRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupSingleLeakRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupSingleLeakRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LookupSingleLeakRequest& from);
  void MergeFrom(const LookupSingleLeakRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupSingleLeakRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest";
  }
  protected:
  explicit LookupSingleLeakRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameHashPrefixFieldNumber = 1,
    kEncryptedLookupHashFieldNumber = 3,
    kUsernameHashPrefixLengthFieldNumber = 2,
  };
  // bytes username_hash_prefix = 1;
  void clear_username_hash_prefix();
  const std::string& username_hash_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username_hash_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username_hash_prefix();
  PROTOBUF_NODISCARD std::string* release_username_hash_prefix();
  void set_allocated_username_hash_prefix(std::string* username_hash_prefix);
  private:
  const std::string& _internal_username_hash_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username_hash_prefix(const std::string& value);
  std::string* _internal_mutable_username_hash_prefix();
  public:

  // bytes encrypted_lookup_hash = 3;
  void clear_encrypted_lookup_hash();
  const std::string& encrypted_lookup_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_lookup_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_lookup_hash();
  PROTOBUF_NODISCARD std::string* release_encrypted_lookup_hash();
  void set_allocated_encrypted_lookup_hash(std::string* encrypted_lookup_hash);
  private:
  const std::string& _internal_encrypted_lookup_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_lookup_hash(const std::string& value);
  std::string* _internal_mutable_encrypted_lookup_hash();
  public:

  // uint32 username_hash_prefix_length = 2;
  void clear_username_hash_prefix_length();
  uint32_t username_hash_prefix_length() const;
  void set_username_hash_prefix_length(uint32_t value);
  private:
  uint32_t _internal_username_hash_prefix_length() const;
  void _internal_set_username_hash_prefix_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_hash_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_lookup_hash_;
  uint32_t username_hash_prefix_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_leak_5fdetection_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupSingleLeakResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse) */ {
 public:
  inline LookupSingleLeakResponse() : LookupSingleLeakResponse(nullptr) {}
  ~LookupSingleLeakResponse() override;
  explicit PROTOBUF_CONSTEXPR LookupSingleLeakResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupSingleLeakResponse(const LookupSingleLeakResponse& from);
  LookupSingleLeakResponse(LookupSingleLeakResponse&& from) noexcept
    : LookupSingleLeakResponse() {
    *this = ::std::move(from);
  }

  inline LookupSingleLeakResponse& operator=(const LookupSingleLeakResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupSingleLeakResponse& operator=(LookupSingleLeakResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupSingleLeakResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupSingleLeakResponse* internal_default_instance() {
    return reinterpret_cast<const LookupSingleLeakResponse*>(
               &_LookupSingleLeakResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LookupSingleLeakResponse& a, LookupSingleLeakResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LookupSingleLeakResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupSingleLeakResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupSingleLeakResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupSingleLeakResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LookupSingleLeakResponse& from);
  void MergeFrom(const LookupSingleLeakResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupSingleLeakResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse";
  }
  protected:
  explicit LookupSingleLeakResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedLeakMatchPrefixFieldNumber = 1,
    kReencryptedLookupHashFieldNumber = 2,
  };
  // repeated bytes encrypted_leak_match_prefix = 1;
  int encrypted_leak_match_prefix_size() const;
  private:
  int _internal_encrypted_leak_match_prefix_size() const;
  public:
  void clear_encrypted_leak_match_prefix();
  const std::string& encrypted_leak_match_prefix(int index) const;
  std::string* mutable_encrypted_leak_match_prefix(int index);
  void set_encrypted_leak_match_prefix(int index, const std::string& value);
  void set_encrypted_leak_match_prefix(int index, std::string&& value);
  void set_encrypted_leak_match_prefix(int index, const char* value);
  void set_encrypted_leak_match_prefix(int index, const void* value, size_t size);
  std::string* add_encrypted_leak_match_prefix();
  void add_encrypted_leak_match_prefix(const std::string& value);
  void add_encrypted_leak_match_prefix(std::string&& value);
  void add_encrypted_leak_match_prefix(const char* value);
  void add_encrypted_leak_match_prefix(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& encrypted_leak_match_prefix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_encrypted_leak_match_prefix();
  private:
  const std::string& _internal_encrypted_leak_match_prefix(int index) const;
  std::string* _internal_add_encrypted_leak_match_prefix();
  public:

  // bytes reencrypted_lookup_hash = 2;
  void clear_reencrypted_lookup_hash();
  const std::string& reencrypted_lookup_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reencrypted_lookup_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reencrypted_lookup_hash();
  PROTOBUF_NODISCARD std::string* release_reencrypted_lookup_hash();
  void set_allocated_reencrypted_lookup_hash(std::string* reencrypted_lookup_hash);
  private:
  const std::string& _internal_reencrypted_lookup_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reencrypted_lookup_hash(const std::string& value);
  std::string* _internal_mutable_reencrypted_lookup_hash();
  public:

  // @@protoc_insertion_point(class_scope:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> encrypted_leak_match_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reencrypted_lookup_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_leak_5fdetection_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LookupSingleLeakRequest

// bytes username_hash_prefix = 1;
inline void LookupSingleLeakRequest::clear_username_hash_prefix() {
  username_hash_prefix_.ClearToEmpty();
}
inline const std::string& LookupSingleLeakRequest::username_hash_prefix() const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
  return _internal_username_hash_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LookupSingleLeakRequest::set_username_hash_prefix(ArgT0&& arg0, ArgT... args) {
 
 username_hash_prefix_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
}
inline std::string* LookupSingleLeakRequest::mutable_username_hash_prefix() {
  std::string* _s = _internal_mutable_username_hash_prefix();
  // @@protoc_insertion_point(field_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
  return _s;
}
inline const std::string& LookupSingleLeakRequest::_internal_username_hash_prefix() const {
  return username_hash_prefix_.Get();
}
inline void LookupSingleLeakRequest::_internal_set_username_hash_prefix(const std::string& value) {
  
  username_hash_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* LookupSingleLeakRequest::_internal_mutable_username_hash_prefix() {
  
  return username_hash_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* LookupSingleLeakRequest::release_username_hash_prefix() {
  // @@protoc_insertion_point(field_release:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
  return username_hash_prefix_.Release();
}
inline void LookupSingleLeakRequest::set_allocated_username_hash_prefix(std::string* username_hash_prefix) {
  if (username_hash_prefix != nullptr) {
    
  } else {
    
  }
  username_hash_prefix_.SetAllocated(username_hash_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_hash_prefix_.IsDefault()) {
    username_hash_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix)
}

// uint32 username_hash_prefix_length = 2;
inline void LookupSingleLeakRequest::clear_username_hash_prefix_length() {
  username_hash_prefix_length_ = 0u;
}
inline uint32_t LookupSingleLeakRequest::_internal_username_hash_prefix_length() const {
  return username_hash_prefix_length_;
}
inline uint32_t LookupSingleLeakRequest::username_hash_prefix_length() const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix_length)
  return _internal_username_hash_prefix_length();
}
inline void LookupSingleLeakRequest::_internal_set_username_hash_prefix_length(uint32_t value) {
  
  username_hash_prefix_length_ = value;
}
inline void LookupSingleLeakRequest::set_username_hash_prefix_length(uint32_t value) {
  _internal_set_username_hash_prefix_length(value);
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.username_hash_prefix_length)
}

// bytes encrypted_lookup_hash = 3;
inline void LookupSingleLeakRequest::clear_encrypted_lookup_hash() {
  encrypted_lookup_hash_.ClearToEmpty();
}
inline const std::string& LookupSingleLeakRequest::encrypted_lookup_hash() const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
  return _internal_encrypted_lookup_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LookupSingleLeakRequest::set_encrypted_lookup_hash(ArgT0&& arg0, ArgT... args) {
 
 encrypted_lookup_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
}
inline std::string* LookupSingleLeakRequest::mutable_encrypted_lookup_hash() {
  std::string* _s = _internal_mutable_encrypted_lookup_hash();
  // @@protoc_insertion_point(field_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
  return _s;
}
inline const std::string& LookupSingleLeakRequest::_internal_encrypted_lookup_hash() const {
  return encrypted_lookup_hash_.Get();
}
inline void LookupSingleLeakRequest::_internal_set_encrypted_lookup_hash(const std::string& value) {
  
  encrypted_lookup_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* LookupSingleLeakRequest::_internal_mutable_encrypted_lookup_hash() {
  
  return encrypted_lookup_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* LookupSingleLeakRequest::release_encrypted_lookup_hash() {
  // @@protoc_insertion_point(field_release:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
  return encrypted_lookup_hash_.Release();
}
inline void LookupSingleLeakRequest::set_allocated_encrypted_lookup_hash(std::string* encrypted_lookup_hash) {
  if (encrypted_lookup_hash != nullptr) {
    
  } else {
    
  }
  encrypted_lookup_hash_.SetAllocated(encrypted_lookup_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_lookup_hash_.IsDefault()) {
    encrypted_lookup_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest.encrypted_lookup_hash)
}

// -------------------------------------------------------------------

// LookupSingleLeakResponse

// repeated bytes encrypted_leak_match_prefix = 1;
inline int LookupSingleLeakResponse::_internal_encrypted_leak_match_prefix_size() const {
  return encrypted_leak_match_prefix_.size();
}
inline int LookupSingleLeakResponse::encrypted_leak_match_prefix_size() const {
  return _internal_encrypted_leak_match_prefix_size();
}
inline void LookupSingleLeakResponse::clear_encrypted_leak_match_prefix() {
  encrypted_leak_match_prefix_.Clear();
}
inline std::string* LookupSingleLeakResponse::add_encrypted_leak_match_prefix() {
  std::string* _s = _internal_add_encrypted_leak_match_prefix();
  // @@protoc_insertion_point(field_add_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return _s;
}
inline const std::string& LookupSingleLeakResponse::_internal_encrypted_leak_match_prefix(int index) const {
  return encrypted_leak_match_prefix_.Get(index);
}
inline const std::string& LookupSingleLeakResponse::encrypted_leak_match_prefix(int index) const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return _internal_encrypted_leak_match_prefix(index);
}
inline std::string* LookupSingleLeakResponse::mutable_encrypted_leak_match_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return encrypted_leak_match_prefix_.Mutable(index);
}
inline void LookupSingleLeakResponse::set_encrypted_leak_match_prefix(int index, const std::string& value) {
  encrypted_leak_match_prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::set_encrypted_leak_match_prefix(int index, std::string&& value) {
  encrypted_leak_match_prefix_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::set_encrypted_leak_match_prefix(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  encrypted_leak_match_prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::set_encrypted_leak_match_prefix(int index, const void* value, size_t size) {
  encrypted_leak_match_prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline std::string* LookupSingleLeakResponse::_internal_add_encrypted_leak_match_prefix() {
  return encrypted_leak_match_prefix_.Add();
}
inline void LookupSingleLeakResponse::add_encrypted_leak_match_prefix(const std::string& value) {
  encrypted_leak_match_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::add_encrypted_leak_match_prefix(std::string&& value) {
  encrypted_leak_match_prefix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::add_encrypted_leak_match_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  encrypted_leak_match_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline void LookupSingleLeakResponse::add_encrypted_leak_match_prefix(const void* value, size_t size) {
  encrypted_leak_match_prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LookupSingleLeakResponse::encrypted_leak_match_prefix() const {
  // @@protoc_insertion_point(field_list:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return encrypted_leak_match_prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LookupSingleLeakResponse::mutable_encrypted_leak_match_prefix() {
  // @@protoc_insertion_point(field_mutable_list:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.encrypted_leak_match_prefix)
  return &encrypted_leak_match_prefix_;
}

// bytes reencrypted_lookup_hash = 2;
inline void LookupSingleLeakResponse::clear_reencrypted_lookup_hash() {
  reencrypted_lookup_hash_.ClearToEmpty();
}
inline const std::string& LookupSingleLeakResponse::reencrypted_lookup_hash() const {
  // @@protoc_insertion_point(field_get:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
  return _internal_reencrypted_lookup_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LookupSingleLeakResponse::set_reencrypted_lookup_hash(ArgT0&& arg0, ArgT... args) {
 
 reencrypted_lookup_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
}
inline std::string* LookupSingleLeakResponse::mutable_reencrypted_lookup_hash() {
  std::string* _s = _internal_mutable_reencrypted_lookup_hash();
  // @@protoc_insertion_point(field_mutable:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
  return _s;
}
inline const std::string& LookupSingleLeakResponse::_internal_reencrypted_lookup_hash() const {
  return reencrypted_lookup_hash_.Get();
}
inline void LookupSingleLeakResponse::_internal_set_reencrypted_lookup_hash(const std::string& value) {
  
  reencrypted_lookup_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* LookupSingleLeakResponse::_internal_mutable_reencrypted_lookup_hash() {
  
  return reencrypted_lookup_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* LookupSingleLeakResponse::release_reencrypted_lookup_hash() {
  // @@protoc_insertion_point(field_release:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
  return reencrypted_lookup_hash_.Release();
}
inline void LookupSingleLeakResponse::set_allocated_reencrypted_lookup_hash(std::string* reencrypted_lookup_hash) {
  if (reencrypted_lookup_hash != nullptr) {
    
  } else {
    
  }
  reencrypted_lookup_hash_.SetAllocated(reencrypted_lookup_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reencrypted_lookup_hash_.IsDefault()) {
    reencrypted_lookup_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse.reencrypted_lookup_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace check
}  // namespace leak
}  // namespace passwords
}  // namespace identity
}  // namespace internal
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_leak_5fdetection_5fapi_2eproto
