// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leak_detection_api.proto

#include "leak_detection_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace internal {
namespace identity {
namespace passwords {
namespace leak {
namespace check {
namespace v1 {
PROTOBUF_CONSTEXPR LookupSingleLeakRequest::LookupSingleLeakRequest(
    ::_pbi::ConstantInitialized)
  : username_hash_prefix_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , encrypted_lookup_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , username_hash_prefix_length_(0u){}
struct LookupSingleLeakRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupSingleLeakRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupSingleLeakRequestDefaultTypeInternal() {}
  union {
    LookupSingleLeakRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupSingleLeakRequestDefaultTypeInternal _LookupSingleLeakRequest_default_instance_;
PROTOBUF_CONSTEXPR LookupSingleLeakResponse::LookupSingleLeakResponse(
    ::_pbi::ConstantInitialized)
  : encrypted_leak_match_prefix_()
  , reencrypted_lookup_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LookupSingleLeakResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupSingleLeakResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupSingleLeakResponseDefaultTypeInternal() {}
  union {
    LookupSingleLeakResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupSingleLeakResponseDefaultTypeInternal _LookupSingleLeakResponse_default_instance_;
}  // namespace v1
}  // namespace check
}  // namespace leak
}  // namespace passwords
}  // namespace identity
}  // namespace internal
}  // namespace google
namespace google {
namespace internal {
namespace identity {
namespace passwords {
namespace leak {
namespace check {
namespace v1 {

// ===================================================================

class LookupSingleLeakRequest::_Internal {
 public:
};

LookupSingleLeakRequest::LookupSingleLeakRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
}
LookupSingleLeakRequest::LookupSingleLeakRequest(const LookupSingleLeakRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  username_hash_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_hash_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username_hash_prefix().empty()) {
    username_hash_prefix_.Set(from._internal_username_hash_prefix(), 
      GetArenaForAllocation());
  }
  encrypted_lookup_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encrypted_lookup_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_lookup_hash().empty()) {
    encrypted_lookup_hash_.Set(from._internal_encrypted_lookup_hash(), 
      GetArenaForAllocation());
  }
  username_hash_prefix_length_ = from.username_hash_prefix_length_;
  // @@protoc_insertion_point(copy_constructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
}

inline void LookupSingleLeakRequest::SharedCtor() {
username_hash_prefix_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_hash_prefix_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encrypted_lookup_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encrypted_lookup_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_hash_prefix_length_ = 0u;
}

LookupSingleLeakRequest::~LookupSingleLeakRequest() {
  // @@protoc_insertion_point(destructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupSingleLeakRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_hash_prefix_.Destroy();
  encrypted_lookup_hash_.Destroy();
}

void LookupSingleLeakRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupSingleLeakRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_hash_prefix_.ClearToEmpty();
  encrypted_lookup_hash_.ClearToEmpty();
  username_hash_prefix_length_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* LookupSingleLeakRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes username_hash_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username_hash_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 username_hash_prefix_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          username_hash_prefix_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encrypted_lookup_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_lookup_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupSingleLeakRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes username_hash_prefix = 1;
  if (!this->_internal_username_hash_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username_hash_prefix(), target);
  }

  // uint32 username_hash_prefix_length = 2;
  if (this->_internal_username_hash_prefix_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_username_hash_prefix_length(), target);
  }

  // bytes encrypted_lookup_hash = 3;
  if (!this->_internal_encrypted_lookup_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_encrypted_lookup_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  return target;
}

size_t LookupSingleLeakRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes username_hash_prefix = 1;
  if (!this->_internal_username_hash_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username_hash_prefix());
  }

  // bytes encrypted_lookup_hash = 3;
  if (!this->_internal_encrypted_lookup_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_lookup_hash());
  }

  // uint32 username_hash_prefix_length = 2;
  if (this->_internal_username_hash_prefix_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_username_hash_prefix_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupSingleLeakRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LookupSingleLeakRequest*>(
      &from));
}

void LookupSingleLeakRequest::MergeFrom(const LookupSingleLeakRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username_hash_prefix().empty()) {
    _internal_set_username_hash_prefix(from._internal_username_hash_prefix());
  }
  if (!from._internal_encrypted_lookup_hash().empty()) {
    _internal_set_encrypted_lookup_hash(from._internal_encrypted_lookup_hash());
  }
  if (from._internal_username_hash_prefix_length() != 0) {
    _internal_set_username_hash_prefix_length(from._internal_username_hash_prefix_length());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LookupSingleLeakRequest::CopyFrom(const LookupSingleLeakRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupSingleLeakRequest::IsInitialized() const {
  return true;
}

void LookupSingleLeakRequest::InternalSwap(LookupSingleLeakRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &username_hash_prefix_, lhs_arena,
      &other->username_hash_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &encrypted_lookup_hash_, lhs_arena,
      &other->encrypted_lookup_hash_, rhs_arena
  );
  swap(username_hash_prefix_length_, other->username_hash_prefix_length_);
}

std::string LookupSingleLeakRequest::GetTypeName() const {
  return "google.internal.identity.passwords.leak.check.v1.LookupSingleLeakRequest";
}


// ===================================================================

class LookupSingleLeakResponse::_Internal {
 public:
};

LookupSingleLeakResponse::LookupSingleLeakResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  encrypted_leak_match_prefix_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
}
LookupSingleLeakResponse::LookupSingleLeakResponse(const LookupSingleLeakResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      encrypted_leak_match_prefix_(from.encrypted_leak_match_prefix_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  reencrypted_lookup_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reencrypted_lookup_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reencrypted_lookup_hash().empty()) {
    reencrypted_lookup_hash_.Set(from._internal_reencrypted_lookup_hash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
}

inline void LookupSingleLeakResponse::SharedCtor() {
reencrypted_lookup_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reencrypted_lookup_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LookupSingleLeakResponse::~LookupSingleLeakResponse() {
  // @@protoc_insertion_point(destructor:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupSingleLeakResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reencrypted_lookup_hash_.Destroy();
}

void LookupSingleLeakResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupSingleLeakResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_leak_match_prefix_.Clear();
  reencrypted_lookup_hash_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LookupSingleLeakResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes encrypted_leak_match_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_encrypted_leak_match_prefix();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes reencrypted_lookup_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reencrypted_lookup_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupSingleLeakResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes encrypted_leak_match_prefix = 1;
  for (int i = 0, n = this->_internal_encrypted_leak_match_prefix_size(); i < n; i++) {
    const auto& s = this->_internal_encrypted_leak_match_prefix(i);
    target = stream->WriteBytes(1, s, target);
  }

  // bytes reencrypted_lookup_hash = 2;
  if (!this->_internal_reencrypted_lookup_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_reencrypted_lookup_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  return target;
}

size_t LookupSingleLeakResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes encrypted_leak_match_prefix = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(encrypted_leak_match_prefix_.size());
  for (int i = 0, n = encrypted_leak_match_prefix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      encrypted_leak_match_prefix_.Get(i));
  }

  // bytes reencrypted_lookup_hash = 2;
  if (!this->_internal_reencrypted_lookup_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reencrypted_lookup_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupSingleLeakResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LookupSingleLeakResponse*>(
      &from));
}

void LookupSingleLeakResponse::MergeFrom(const LookupSingleLeakResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  encrypted_leak_match_prefix_.MergeFrom(from.encrypted_leak_match_prefix_);
  if (!from._internal_reencrypted_lookup_hash().empty()) {
    _internal_set_reencrypted_lookup_hash(from._internal_reencrypted_lookup_hash());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LookupSingleLeakResponse::CopyFrom(const LookupSingleLeakResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupSingleLeakResponse::IsInitialized() const {
  return true;
}

void LookupSingleLeakResponse::InternalSwap(LookupSingleLeakResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  encrypted_leak_match_prefix_.InternalSwap(&other->encrypted_leak_match_prefix_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reencrypted_lookup_hash_, lhs_arena,
      &other->reencrypted_lookup_hash_, rhs_arena
  );
}

std::string LookupSingleLeakResponse::GetTypeName() const {
  return "google.internal.identity.passwords.leak.check.v1.LookupSingleLeakResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace check
}  // namespace leak
}  // namespace passwords
}  // namespace identity
}  // namespace internal
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest*
Arena::CreateMaybeMessage< ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse*
Arena::CreateMaybeMessage< ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::internal::identity::passwords::leak::check::v1::LookupSingleLeakResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
