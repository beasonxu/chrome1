// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/password_manager/core/browser/protos/password_with_local_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fpassword_5fmanager_2fcore_2fbrowser_2fprotos_2fpassword_5fwith_5flocal_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fpassword_5fmanager_2fcore_2fbrowser_2fprotos_2fpassword_5fwith_5flocal_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/sync/protocol/password_specifics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fpassword_5fmanager_2fcore_2fbrowser_2fprotos_2fpassword_5fwith_5flocal_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fpassword_5fmanager_2fcore_2fbrowser_2fprotos_2fpassword_5fwith_5flocal_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace password_manager {
class PasswordWithLocalData;
struct PasswordWithLocalDataDefaultTypeInternal;
extern PasswordWithLocalDataDefaultTypeInternal _PasswordWithLocalData_default_instance_;
class PasswordWithLocalData_LocalData;
struct PasswordWithLocalData_LocalDataDefaultTypeInternal;
extern PasswordWithLocalData_LocalDataDefaultTypeInternal _PasswordWithLocalData_LocalData_default_instance_;
}  // namespace password_manager
PROTOBUF_NAMESPACE_OPEN
template<> ::password_manager::PasswordWithLocalData* Arena::CreateMaybeMessage<::password_manager::PasswordWithLocalData>(Arena*);
template<> ::password_manager::PasswordWithLocalData_LocalData* Arena::CreateMaybeMessage<::password_manager::PasswordWithLocalData_LocalData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace password_manager {

// ===================================================================

class PasswordWithLocalData_LocalData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:password_manager.PasswordWithLocalData.LocalData) */ {
 public:
  inline PasswordWithLocalData_LocalData() : PasswordWithLocalData_LocalData(nullptr) {}
  ~PasswordWithLocalData_LocalData() override;
  explicit PROTOBUF_CONSTEXPR PasswordWithLocalData_LocalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordWithLocalData_LocalData(const PasswordWithLocalData_LocalData& from);
  PasswordWithLocalData_LocalData(PasswordWithLocalData_LocalData&& from) noexcept
    : PasswordWithLocalData_LocalData() {
    *this = ::std::move(from);
  }

  inline PasswordWithLocalData_LocalData& operator=(const PasswordWithLocalData_LocalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordWithLocalData_LocalData& operator=(PasswordWithLocalData_LocalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordWithLocalData_LocalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordWithLocalData_LocalData* internal_default_instance() {
    return reinterpret_cast<const PasswordWithLocalData_LocalData*>(
               &_PasswordWithLocalData_LocalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PasswordWithLocalData_LocalData& a, PasswordWithLocalData_LocalData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordWithLocalData_LocalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordWithLocalData_LocalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordWithLocalData_LocalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordWithLocalData_LocalData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordWithLocalData_LocalData& from);
  void MergeFrom(const PasswordWithLocalData_LocalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordWithLocalData_LocalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "password_manager.PasswordWithLocalData.LocalData";
  }
  protected:
  explicit PasswordWithLocalData_LocalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueMetadataFieldNumber = 1,
    kPreviouslyAssociatedSyncAccountEmailFieldNumber = 2,
  };
  // optional bytes opaque_metadata = 1;
  bool has_opaque_metadata() const;
  private:
  bool _internal_has_opaque_metadata() const;
  public:
  void clear_opaque_metadata();
  const std::string& opaque_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opaque_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opaque_metadata();
  PROTOBUF_NODISCARD std::string* release_opaque_metadata();
  void set_allocated_opaque_metadata(std::string* opaque_metadata);
  private:
  const std::string& _internal_opaque_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opaque_metadata(const std::string& value);
  std::string* _internal_mutable_opaque_metadata();
  public:

  // optional string previously_associated_sync_account_email = 2;
  bool has_previously_associated_sync_account_email() const;
  private:
  bool _internal_has_previously_associated_sync_account_email() const;
  public:
  void clear_previously_associated_sync_account_email();
  const std::string& previously_associated_sync_account_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previously_associated_sync_account_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previously_associated_sync_account_email();
  PROTOBUF_NODISCARD std::string* release_previously_associated_sync_account_email();
  void set_allocated_previously_associated_sync_account_email(std::string* previously_associated_sync_account_email);
  private:
  const std::string& _internal_previously_associated_sync_account_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previously_associated_sync_account_email(const std::string& value);
  std::string* _internal_mutable_previously_associated_sync_account_email();
  public:

  // @@protoc_insertion_point(class_scope:password_manager.PasswordWithLocalData.LocalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previously_associated_sync_account_email_;
  friend struct ::TableStruct_components_2fpassword_5fmanager_2fcore_2fbrowser_2fprotos_2fpassword_5fwith_5flocal_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PasswordWithLocalData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:password_manager.PasswordWithLocalData) */ {
 public:
  inline PasswordWithLocalData() : PasswordWithLocalData(nullptr) {}
  ~PasswordWithLocalData() override;
  explicit PROTOBUF_CONSTEXPR PasswordWithLocalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordWithLocalData(const PasswordWithLocalData& from);
  PasswordWithLocalData(PasswordWithLocalData&& from) noexcept
    : PasswordWithLocalData() {
    *this = ::std::move(from);
  }

  inline PasswordWithLocalData& operator=(const PasswordWithLocalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordWithLocalData& operator=(PasswordWithLocalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordWithLocalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordWithLocalData* internal_default_instance() {
    return reinterpret_cast<const PasswordWithLocalData*>(
               &_PasswordWithLocalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PasswordWithLocalData& a, PasswordWithLocalData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordWithLocalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordWithLocalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordWithLocalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordWithLocalData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordWithLocalData& from);
  void MergeFrom(const PasswordWithLocalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordWithLocalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "password_manager.PasswordWithLocalData";
  }
  protected:
  explicit PasswordWithLocalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PasswordWithLocalData_LocalData LocalData;

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordSpecificsDataFieldNumber = 1,
    kLocalDataFieldNumber = 3,
  };
  // optional .sync_pb.PasswordSpecificsData password_specifics_data = 1;
  bool has_password_specifics_data() const;
  private:
  bool _internal_has_password_specifics_data() const;
  public:
  void clear_password_specifics_data();
  const ::sync_pb::PasswordSpecificsData& password_specifics_data() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsData* release_password_specifics_data();
  ::sync_pb::PasswordSpecificsData* mutable_password_specifics_data();
  void set_allocated_password_specifics_data(::sync_pb::PasswordSpecificsData* password_specifics_data);
  private:
  const ::sync_pb::PasswordSpecificsData& _internal_password_specifics_data() const;
  ::sync_pb::PasswordSpecificsData* _internal_mutable_password_specifics_data();
  public:
  void unsafe_arena_set_allocated_password_specifics_data(
      ::sync_pb::PasswordSpecificsData* password_specifics_data);
  ::sync_pb::PasswordSpecificsData* unsafe_arena_release_password_specifics_data();

  // optional .password_manager.PasswordWithLocalData.LocalData local_data = 3;
  bool has_local_data() const;
  private:
  bool _internal_has_local_data() const;
  public:
  void clear_local_data();
  const ::password_manager::PasswordWithLocalData_LocalData& local_data() const;
  PROTOBUF_NODISCARD ::password_manager::PasswordWithLocalData_LocalData* release_local_data();
  ::password_manager::PasswordWithLocalData_LocalData* mutable_local_data();
  void set_allocated_local_data(::password_manager::PasswordWithLocalData_LocalData* local_data);
  private:
  const ::password_manager::PasswordWithLocalData_LocalData& _internal_local_data() const;
  ::password_manager::PasswordWithLocalData_LocalData* _internal_mutable_local_data();
  public:
  void unsafe_arena_set_allocated_local_data(
      ::password_manager::PasswordWithLocalData_LocalData* local_data);
  ::password_manager::PasswordWithLocalData_LocalData* unsafe_arena_release_local_data();

  // @@protoc_insertion_point(class_scope:password_manager.PasswordWithLocalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::PasswordSpecificsData* password_specifics_data_;
  ::password_manager::PasswordWithLocalData_LocalData* local_data_;
  friend struct ::TableStruct_components_2fpassword_5fmanager_2fcore_2fbrowser_2fprotos_2fpassword_5fwith_5flocal_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PasswordWithLocalData_LocalData

// optional bytes opaque_metadata = 1;
inline bool PasswordWithLocalData_LocalData::_internal_has_opaque_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasswordWithLocalData_LocalData::has_opaque_metadata() const {
  return _internal_has_opaque_metadata();
}
inline void PasswordWithLocalData_LocalData::clear_opaque_metadata() {
  opaque_metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordWithLocalData_LocalData::opaque_metadata() const {
  // @@protoc_insertion_point(field_get:password_manager.PasswordWithLocalData.LocalData.opaque_metadata)
  return _internal_opaque_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordWithLocalData_LocalData::set_opaque_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 opaque_metadata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:password_manager.PasswordWithLocalData.LocalData.opaque_metadata)
}
inline std::string* PasswordWithLocalData_LocalData::mutable_opaque_metadata() {
  std::string* _s = _internal_mutable_opaque_metadata();
  // @@protoc_insertion_point(field_mutable:password_manager.PasswordWithLocalData.LocalData.opaque_metadata)
  return _s;
}
inline const std::string& PasswordWithLocalData_LocalData::_internal_opaque_metadata() const {
  return opaque_metadata_.Get();
}
inline void PasswordWithLocalData_LocalData::_internal_set_opaque_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opaque_metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordWithLocalData_LocalData::_internal_mutable_opaque_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return opaque_metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordWithLocalData_LocalData::release_opaque_metadata() {
  // @@protoc_insertion_point(field_release:password_manager.PasswordWithLocalData.LocalData.opaque_metadata)
  if (!_internal_has_opaque_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = opaque_metadata_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opaque_metadata_.IsDefault()) {
    opaque_metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordWithLocalData_LocalData::set_allocated_opaque_metadata(std::string* opaque_metadata) {
  if (opaque_metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opaque_metadata_.SetAllocated(opaque_metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opaque_metadata_.IsDefault()) {
    opaque_metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:password_manager.PasswordWithLocalData.LocalData.opaque_metadata)
}

// optional string previously_associated_sync_account_email = 2;
inline bool PasswordWithLocalData_LocalData::_internal_has_previously_associated_sync_account_email() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PasswordWithLocalData_LocalData::has_previously_associated_sync_account_email() const {
  return _internal_has_previously_associated_sync_account_email();
}
inline void PasswordWithLocalData_LocalData::clear_previously_associated_sync_account_email() {
  previously_associated_sync_account_email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PasswordWithLocalData_LocalData::previously_associated_sync_account_email() const {
  // @@protoc_insertion_point(field_get:password_manager.PasswordWithLocalData.LocalData.previously_associated_sync_account_email)
  return _internal_previously_associated_sync_account_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordWithLocalData_LocalData::set_previously_associated_sync_account_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 previously_associated_sync_account_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:password_manager.PasswordWithLocalData.LocalData.previously_associated_sync_account_email)
}
inline std::string* PasswordWithLocalData_LocalData::mutable_previously_associated_sync_account_email() {
  std::string* _s = _internal_mutable_previously_associated_sync_account_email();
  // @@protoc_insertion_point(field_mutable:password_manager.PasswordWithLocalData.LocalData.previously_associated_sync_account_email)
  return _s;
}
inline const std::string& PasswordWithLocalData_LocalData::_internal_previously_associated_sync_account_email() const {
  return previously_associated_sync_account_email_.Get();
}
inline void PasswordWithLocalData_LocalData::_internal_set_previously_associated_sync_account_email(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  previously_associated_sync_account_email_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordWithLocalData_LocalData::_internal_mutable_previously_associated_sync_account_email() {
  _has_bits_[0] |= 0x00000002u;
  return previously_associated_sync_account_email_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordWithLocalData_LocalData::release_previously_associated_sync_account_email() {
  // @@protoc_insertion_point(field_release:password_manager.PasswordWithLocalData.LocalData.previously_associated_sync_account_email)
  if (!_internal_has_previously_associated_sync_account_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = previously_associated_sync_account_email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (previously_associated_sync_account_email_.IsDefault()) {
    previously_associated_sync_account_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordWithLocalData_LocalData::set_allocated_previously_associated_sync_account_email(std::string* previously_associated_sync_account_email) {
  if (previously_associated_sync_account_email != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  previously_associated_sync_account_email_.SetAllocated(previously_associated_sync_account_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (previously_associated_sync_account_email_.IsDefault()) {
    previously_associated_sync_account_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:password_manager.PasswordWithLocalData.LocalData.previously_associated_sync_account_email)
}

// -------------------------------------------------------------------

// PasswordWithLocalData

// optional .sync_pb.PasswordSpecificsData password_specifics_data = 1;
inline bool PasswordWithLocalData::_internal_has_password_specifics_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || password_specifics_data_ != nullptr);
  return value;
}
inline bool PasswordWithLocalData::has_password_specifics_data() const {
  return _internal_has_password_specifics_data();
}
inline const ::sync_pb::PasswordSpecificsData& PasswordWithLocalData::_internal_password_specifics_data() const {
  const ::sync_pb::PasswordSpecificsData* p = password_specifics_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsData&>(
      ::sync_pb::_PasswordSpecificsData_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsData& PasswordWithLocalData::password_specifics_data() const {
  // @@protoc_insertion_point(field_get:password_manager.PasswordWithLocalData.password_specifics_data)
  return _internal_password_specifics_data();
}
inline void PasswordWithLocalData::unsafe_arena_set_allocated_password_specifics_data(
    ::sync_pb::PasswordSpecificsData* password_specifics_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_specifics_data_);
  }
  password_specifics_data_ = password_specifics_data;
  if (password_specifics_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:password_manager.PasswordWithLocalData.password_specifics_data)
}
inline ::sync_pb::PasswordSpecificsData* PasswordWithLocalData::release_password_specifics_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::PasswordSpecificsData* temp = password_specifics_data_;
  password_specifics_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsData* PasswordWithLocalData::unsafe_arena_release_password_specifics_data() {
  // @@protoc_insertion_point(field_release:password_manager.PasswordWithLocalData.password_specifics_data)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::PasswordSpecificsData* temp = password_specifics_data_;
  password_specifics_data_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData* PasswordWithLocalData::_internal_mutable_password_specifics_data() {
  _has_bits_[0] |= 0x00000001u;
  if (password_specifics_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData>(GetArenaForAllocation());
    password_specifics_data_ = p;
  }
  return password_specifics_data_;
}
inline ::sync_pb::PasswordSpecificsData* PasswordWithLocalData::mutable_password_specifics_data() {
  ::sync_pb::PasswordSpecificsData* _msg = _internal_mutable_password_specifics_data();
  // @@protoc_insertion_point(field_mutable:password_manager.PasswordWithLocalData.password_specifics_data)
  return _msg;
}
inline void PasswordWithLocalData::set_allocated_password_specifics_data(::sync_pb::PasswordSpecificsData* password_specifics_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_specifics_data_);
  }
  if (password_specifics_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_specifics_data));
    if (message_arena != submessage_arena) {
      password_specifics_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password_specifics_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_specifics_data_ = password_specifics_data;
  // @@protoc_insertion_point(field_set_allocated:password_manager.PasswordWithLocalData.password_specifics_data)
}

// optional .password_manager.PasswordWithLocalData.LocalData local_data = 3;
inline bool PasswordWithLocalData::_internal_has_local_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || local_data_ != nullptr);
  return value;
}
inline bool PasswordWithLocalData::has_local_data() const {
  return _internal_has_local_data();
}
inline void PasswordWithLocalData::clear_local_data() {
  if (local_data_ != nullptr) local_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::password_manager::PasswordWithLocalData_LocalData& PasswordWithLocalData::_internal_local_data() const {
  const ::password_manager::PasswordWithLocalData_LocalData* p = local_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::password_manager::PasswordWithLocalData_LocalData&>(
      ::password_manager::_PasswordWithLocalData_LocalData_default_instance_);
}
inline const ::password_manager::PasswordWithLocalData_LocalData& PasswordWithLocalData::local_data() const {
  // @@protoc_insertion_point(field_get:password_manager.PasswordWithLocalData.local_data)
  return _internal_local_data();
}
inline void PasswordWithLocalData::unsafe_arena_set_allocated_local_data(
    ::password_manager::PasswordWithLocalData_LocalData* local_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_data_);
  }
  local_data_ = local_data;
  if (local_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:password_manager.PasswordWithLocalData.local_data)
}
inline ::password_manager::PasswordWithLocalData_LocalData* PasswordWithLocalData::release_local_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::password_manager::PasswordWithLocalData_LocalData* temp = local_data_;
  local_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::password_manager::PasswordWithLocalData_LocalData* PasswordWithLocalData::unsafe_arena_release_local_data() {
  // @@protoc_insertion_point(field_release:password_manager.PasswordWithLocalData.local_data)
  _has_bits_[0] &= ~0x00000002u;
  ::password_manager::PasswordWithLocalData_LocalData* temp = local_data_;
  local_data_ = nullptr;
  return temp;
}
inline ::password_manager::PasswordWithLocalData_LocalData* PasswordWithLocalData::_internal_mutable_local_data() {
  _has_bits_[0] |= 0x00000002u;
  if (local_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::password_manager::PasswordWithLocalData_LocalData>(GetArenaForAllocation());
    local_data_ = p;
  }
  return local_data_;
}
inline ::password_manager::PasswordWithLocalData_LocalData* PasswordWithLocalData::mutable_local_data() {
  ::password_manager::PasswordWithLocalData_LocalData* _msg = _internal_mutable_local_data();
  // @@protoc_insertion_point(field_mutable:password_manager.PasswordWithLocalData.local_data)
  return _msg;
}
inline void PasswordWithLocalData::set_allocated_local_data(::password_manager::PasswordWithLocalData_LocalData* local_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_data_;
  }
  if (local_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_data);
    if (message_arena != submessage_arena) {
      local_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  local_data_ = local_data;
  // @@protoc_insertion_point(field_set_allocated:password_manager.PasswordWithLocalData.local_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace password_manager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fpassword_5fmanager_2fcore_2fbrowser_2fprotos_2fpassword_5fwith_5flocal_5fdata_2eproto
