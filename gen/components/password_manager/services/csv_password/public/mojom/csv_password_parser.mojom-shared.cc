// components/password_manager/services/csv_password/public/mojom/csv_password_parser.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/password_manager/services/csv_password/public/mojom/csv_password_parser.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/password_manager/services/csv_password/public/mojom/csv_password_parser.mojom-params-data.h"
namespace password_manager {
namespace mojom {

namespace internal {


// static
bool CSVPasswordSequence_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CSVPasswordSequence_Data* object =
      static_cast<const CSVPasswordSequence_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->csv_passwords, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams csv_passwords_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->csv_passwords, validation_context,
                                         &csv_passwords_validate_params)) {
    return false;
  }

  return true;
}

CSVPasswordSequence_Data::CSVPasswordSequence_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CSVPassword_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CSVPassword_Data* object =
      static_cast<const CSVPassword_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->username, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams username_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->username, validation_context,
                                         &username_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->password, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams password_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->password, validation_context,
                                         &password_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  return true;
}

CSVPassword_Data::CSVPassword_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CSVPasswordParser_ParseCSV_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CSVPasswordParser_ParseCSV_Params_Data* object =
      static_cast<const CSVPasswordParser_ParseCSV_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->raw_csv, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams raw_csv_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->raw_csv, validation_context,
                                         &raw_csv_validate_params)) {
    return false;
  }

  return true;
}

CSVPasswordParser_ParseCSV_Params_Data::CSVPasswordParser_ParseCSV_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CSVPasswordParser_ParseCSV_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CSVPasswordParser_ParseCSV_ResponseParams_Data* object =
      static_cast<const CSVPasswordParser_ParseCSV_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->sequence, validation_context))
    return false;

  return true;
}

CSVPasswordParser_ParseCSV_ResponseParams_Data::CSVPasswordParser_ParseCSV_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace password_manager