// components/password_manager/services/csv_password/public/mojom/csv_password_parser.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PASSWORD_MANAGER_SERVICES_CSV_PASSWORD_PUBLIC_MOJOM_CSV_PASSWORD_PARSER_MOJOM_SHARED_H_
#define COMPONENTS_PASSWORD_MANAGER_SERVICES_CSV_PASSWORD_PUBLIC_MOJOM_CSV_PASSWORD_PARSER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/password_manager/services/csv_password/public/mojom/csv_password_parser.mojom-shared-internal.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace password_manager {
namespace mojom {
class CSVPasswordSequenceDataView;

class CSVPasswordDataView;



}  // namespace mojom
}  // namespace password_manager

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::password_manager::mojom::CSVPasswordSequenceDataView> {
  using Data = ::password_manager::mojom::internal::CSVPasswordSequence_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::password_manager::mojom::CSVPasswordDataView> {
  using Data = ::password_manager::mojom::internal::CSVPassword_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace password_manager {
namespace mojom {
// Interface base classes. They are used for type safety check.
class CSVPasswordParserInterfaceBase {};

using CSVPasswordParserPtrDataView =
    mojo::InterfacePtrDataView<CSVPasswordParserInterfaceBase>;
using CSVPasswordParserRequestDataView =
    mojo::InterfaceRequestDataView<CSVPasswordParserInterfaceBase>;
using CSVPasswordParserAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CSVPasswordParserInterfaceBase>;
using CSVPasswordParserAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CSVPasswordParserInterfaceBase>;


class CSVPasswordSequenceDataView {
 public:
  CSVPasswordSequenceDataView() = default;

  CSVPasswordSequenceDataView(
      internal::CSVPasswordSequence_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCsvPasswordsDataView(
      mojo::ArrayDataView<CSVPasswordDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCsvPasswords(UserType* output) {
    
    auto* pointer = data_->csv_passwords.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::password_manager::mojom::CSVPasswordDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CSVPasswordSequence_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CSVPasswordDataView {
 public:
  CSVPasswordDataView() = default;

  CSVPasswordDataView(
      internal::CSVPassword_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUsernameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsername(UserType* output) {
    
    auto* pointer = data_->username.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPasswordDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPassword(UserType* output) {
    
    auto* pointer = data_->password.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::CSVPassword_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace password_manager

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::password_manager::mojom::CSVPasswordSequenceDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::password_manager::mojom::CSVPasswordSequenceDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::password_manager::mojom::internal::CSVPasswordSequence_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::csv_passwords(input)) in_csv_passwords = Traits::csv_passwords(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->csv_passwords)::BaseType>
        csv_passwords_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams csv_passwords_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::password_manager::mojom::CSVPasswordDataView>>(
        in_csv_passwords, csv_passwords_fragment, &csv_passwords_validate_params);
    fragment->csv_passwords.Set(
        csv_passwords_fragment.is_null() ? nullptr : csv_passwords_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->csv_passwords.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null csv_passwords in CSVPasswordSequence struct");
  }

  static bool Deserialize(::password_manager::mojom::internal::CSVPasswordSequence_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::password_manager::mojom::CSVPasswordSequenceDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::password_manager::mojom::CSVPasswordDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::password_manager::mojom::CSVPasswordDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::password_manager::mojom::internal::CSVPassword_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::username(input)) in_username = Traits::username(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->username)::BaseType> username_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_username, username_fragment);
    fragment->username.Set(
        username_fragment.is_null() ? nullptr : username_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->username.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null username in CSVPassword struct");
    decltype(Traits::password(input)) in_password = Traits::password(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->password)::BaseType> password_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_password, password_fragment);
    fragment->password.Set(
        password_fragment.is_null() ? nullptr : password_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->password.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null password in CSVPassword struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in CSVPassword struct");
  }

  static bool Deserialize(::password_manager::mojom::internal::CSVPassword_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::password_manager::mojom::CSVPasswordDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace password_manager {
namespace mojom {

inline void CSVPasswordSequenceDataView::GetCsvPasswordsDataView(
    mojo::ArrayDataView<CSVPasswordDataView>* output) {
  auto pointer = data_->csv_passwords.Get();
  *output = mojo::ArrayDataView<CSVPasswordDataView>(pointer, message_);
}


inline void CSVPasswordDataView::GetUsernameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->username.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void CSVPasswordDataView::GetPasswordDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->password.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void CSVPasswordDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace password_manager

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // COMPONENTS_PASSWORD_MANAGER_SERVICES_CSV_PASSWORD_PUBLIC_MOJOM_CSV_PASSWORD_PARSER_MOJOM_SHARED_H_