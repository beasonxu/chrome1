// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/background_task_scheduler/internal/TaskInfoBridge

#ifndef org_chromium_components_background_task_scheduler_internal_TaskInfoBridge_JNI
#define org_chromium_components_background_task_scheduler_internal_TaskInfoBridge_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge[];
const char kClassPath_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge[]
    = "org/chromium/components/background_task_scheduler/internal/TaskInfoBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(nullptr);
#ifndef org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz_defined
#define org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz_defined
inline jclass
    org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge,
      &g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_createPeriodicInfo(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TaskInfoBridge_createPeriodicInfo(JNIEnv*
    env, jlong intervalMs,
    jlong flexMs,
    jboolean expiresAfterWindowEndTime) {
  jclass clazz =
      org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createPeriodicInfo",
          "(JJZ)Lorg/chromium/components/background_task_scheduler/TaskInfo$TimingInfo;",
&g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_createPeriodicInfo);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, intervalMs, flexMs, expiresAfterWindowEndTime);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_createOneOffInfo(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TaskInfoBridge_createOneOffInfo(JNIEnv* env,
    jlong windowStartTimeMs,
    jlong windowEndTimeMs,
    jboolean expiresAfterWindowEndTime) {
  jclass clazz =
      org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createOneOffInfo",
          "(JJZ)Lorg/chromium/components/background_task_scheduler/TaskInfo$TimingInfo;",
&g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_createOneOffInfo);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, windowStartTimeMs, windowEndTimeMs,
              expiresAfterWindowEndTime);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_createExactInfo(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TaskInfoBridge_createExactInfo(JNIEnv* env,
    jlong triggerAtMs) {
  jclass clazz =
      org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createExactInfo",
          "(J)Lorg/chromium/components/background_task_scheduler/TaskInfo$TimingInfo;",
&g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_createExactInfo);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, triggerAtMs);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_createTaskInfo(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TaskInfoBridge_createTaskInfo(JNIEnv* env,
    JniIntWrapper taskId,
    const base::android::JavaRef<jobject>& timingInfo,
    const base::android::JavaRef<jstring>& extras) {
  jclass clazz =
      org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createTaskInfo",
"(ILorg/chromium/components/background_task_scheduler/TaskInfo$TimingInfo;Ljava/lang/String;)Lorg/chromium/components/background_task_scheduler/TaskInfo;",
&g_org_chromium_components_background_1task_1scheduler_internal_TaskInfoBridge_createTaskInfo);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(taskId), timingInfo.obj(), extras.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_chromium_components_background_task_scheduler_internal_TaskInfoBridge_JNI
