// components/subresource_filter/content/mojom/subresource_filter.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SUBRESOURCE_FILTER_CONTENT_MOJOM_SUBRESOURCE_FILTER_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SUBRESOURCE_FILTER_CONTENT_MOJOM_SUBRESOURCE_FILTER_MOJOM_TEST_UTILS_H_

#include "components/subresource_filter/content/mojom/subresource_filter.mojom.h"


namespace subresource_filter {
namespace mojom {


class  SubresourceFilterAgentInterceptorForTesting : public SubresourceFilterAgent {
  virtual SubresourceFilterAgent* GetForwardingInterface() = 0;
  void ActivateForNextCommittedLoad(::subresource_filter::mojom::ActivationStatePtr activation_state, const absl::optional<::blink::FrameAdEvidence>& ad_evidence) override;
};
class  SubresourceFilterAgentAsyncWaiter {
 public:
  explicit SubresourceFilterAgentAsyncWaiter(SubresourceFilterAgent* proxy);

  SubresourceFilterAgentAsyncWaiter(const SubresourceFilterAgentAsyncWaiter&) = delete;
  SubresourceFilterAgentAsyncWaiter& operator=(const SubresourceFilterAgentAsyncWaiter&) = delete;

  ~SubresourceFilterAgentAsyncWaiter();

 private:
  SubresourceFilterAgent* const proxy_;
};


class  SubresourceFilterHostInterceptorForTesting : public SubresourceFilterHost {
  virtual SubresourceFilterHost* GetForwardingInterface() = 0;
  void DidDisallowFirstSubresource() override;
  void FrameIsAd() override;
  void FrameWasCreatedByAdScript() override;
  void AdScriptDidCreateFencedFrame(const ::blink::RemoteFrameToken& fenced_frame_root_placeholder_token) override;
  void SetDocumentLoadStatistics(::subresource_filter::mojom::DocumentLoadStatisticsPtr statistics) override;
  void OnAdsViolationTriggered(::subresource_filter::mojom::AdsViolation violation) override;
};
class  SubresourceFilterHostAsyncWaiter {
 public:
  explicit SubresourceFilterHostAsyncWaiter(SubresourceFilterHost* proxy);

  SubresourceFilterHostAsyncWaiter(const SubresourceFilterHostAsyncWaiter&) = delete;
  SubresourceFilterHostAsyncWaiter& operator=(const SubresourceFilterHostAsyncWaiter&) = delete;

  ~SubresourceFilterHostAsyncWaiter();

 private:
  SubresourceFilterHost* const proxy_;
};




}  // namespace mojom
}  // namespace subresource_filter

#endif  // COMPONENTS_SUBRESOURCE_FILTER_CONTENT_MOJOM_SUBRESOURCE_FILTER_MOJOM_TEST_UTILS_H_