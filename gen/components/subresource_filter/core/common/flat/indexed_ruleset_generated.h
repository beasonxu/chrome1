// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INDEXEDRULESET_SUBRESOURCE_FILTER_FLAT_H_
#define FLATBUFFERS_GENERATED_INDEXEDRULESET_SUBRESOURCE_FILTER_FLAT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

#include "components/url_pattern_index/flat/url_pattern_index_generated.h"

namespace subresource_filter {
namespace flat {

struct IndexedRuleset;
struct IndexedRulesetBuilder;

struct IndexedRuleset FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef IndexedRulesetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLOCKLIST_INDEX = 4,
    VT_ALLOWLIST_INDEX = 6,
    VT_DEACTIVATION_INDEX = 8
  };
  const url_pattern_index::flat::UrlPatternIndex *blocklist_index() const {
    return GetPointer<const url_pattern_index::flat::UrlPatternIndex *>(VT_BLOCKLIST_INDEX);
  }
  const url_pattern_index::flat::UrlPatternIndex *allowlist_index() const {
    return GetPointer<const url_pattern_index::flat::UrlPatternIndex *>(VT_ALLOWLIST_INDEX);
  }
  const url_pattern_index::flat::UrlPatternIndex *deactivation_index() const {
    return GetPointer<const url_pattern_index::flat::UrlPatternIndex *>(VT_DEACTIVATION_INDEX);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BLOCKLIST_INDEX) &&
           verifier.VerifyTable(blocklist_index()) &&
           VerifyOffset(verifier, VT_ALLOWLIST_INDEX) &&
           verifier.VerifyTable(allowlist_index()) &&
           VerifyOffset(verifier, VT_DEACTIVATION_INDEX) &&
           verifier.VerifyTable(deactivation_index()) &&
           verifier.EndTable();
  }
};

struct IndexedRulesetBuilder {
  typedef IndexedRuleset Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_blocklist_index(flatbuffers::Offset<url_pattern_index::flat::UrlPatternIndex> blocklist_index) {
    fbb_.AddOffset(IndexedRuleset::VT_BLOCKLIST_INDEX, blocklist_index);
  }
  void add_allowlist_index(flatbuffers::Offset<url_pattern_index::flat::UrlPatternIndex> allowlist_index) {
    fbb_.AddOffset(IndexedRuleset::VT_ALLOWLIST_INDEX, allowlist_index);
  }
  void add_deactivation_index(flatbuffers::Offset<url_pattern_index::flat::UrlPatternIndex> deactivation_index) {
    fbb_.AddOffset(IndexedRuleset::VT_DEACTIVATION_INDEX, deactivation_index);
  }
  explicit IndexedRulesetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<IndexedRuleset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IndexedRuleset>(end);
    return o;
  }
};

inline flatbuffers::Offset<IndexedRuleset> CreateIndexedRuleset(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<url_pattern_index::flat::UrlPatternIndex> blocklist_index = 0,
    flatbuffers::Offset<url_pattern_index::flat::UrlPatternIndex> allowlist_index = 0,
    flatbuffers::Offset<url_pattern_index::flat::UrlPatternIndex> deactivation_index = 0) {
  IndexedRulesetBuilder builder_(_fbb);
  builder_.add_deactivation_index(deactivation_index);
  builder_.add_allowlist_index(allowlist_index);
  builder_.add_blocklist_index(blocklist_index);
  return builder_.Finish();
}

inline const subresource_filter::flat::IndexedRuleset *GetIndexedRuleset(const void *buf) {
  return flatbuffers::GetRoot<subresource_filter::flat::IndexedRuleset>(buf);
}

inline const subresource_filter::flat::IndexedRuleset *GetSizePrefixedIndexedRuleset(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<subresource_filter::flat::IndexedRuleset>(buf);
}

inline bool VerifyIndexedRulesetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<subresource_filter::flat::IndexedRuleset>(nullptr);
}

inline bool VerifySizePrefixedIndexedRulesetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<subresource_filter::flat::IndexedRuleset>(nullptr);
}

inline void FinishIndexedRulesetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<subresource_filter::flat::IndexedRuleset> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIndexedRulesetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<subresource_filter::flat::IndexedRuleset> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat
}  // namespace subresource_filter

#endif  // FLATBUFFERS_GENERATED_INDEXEDRULESET_SUBRESOURCE_FILTER_FLAT_H_
