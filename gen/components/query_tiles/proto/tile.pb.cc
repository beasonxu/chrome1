// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile.proto

#include "tile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace query_tiles {
namespace proto {
PROTOBUF_CONSTEXPR Tile_ImageMetadata::Tile_ImageMetadata(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Tile_ImageMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Tile_ImageMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Tile_ImageMetadataDefaultTypeInternal() {}
  union {
    Tile_ImageMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Tile_ImageMetadataDefaultTypeInternal _Tile_ImageMetadata_default_instance_;
PROTOBUF_CONSTEXPR Tile::Tile(
    ::_pbi::ConstantInitialized)
  : image_metadatas_()
  , sub_tiles_()
  , search_params_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , query_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , display_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , accessibility_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileDefaultTypeInternal() {}
  union {
    Tile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileDefaultTypeInternal _Tile_default_instance_;
PROTOBUF_CONSTEXPR TileStats::TileStats(
    ::_pbi::ConstantInitialized)
  : last_clicked_time_ms_(int64_t{0})
  , score_(0){}
struct TileStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileStatsDefaultTypeInternal() {}
  union {
    TileStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileStatsDefaultTypeInternal _TileStats_default_instance_;
PROTOBUF_CONSTEXPR TileGroup_TileStatsEntry_DoNotUse::TileGroup_TileStatsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TileGroup_TileStatsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileGroup_TileStatsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileGroup_TileStatsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TileGroup_TileStatsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileGroup_TileStatsEntry_DoNotUseDefaultTypeInternal _TileGroup_TileStatsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TileGroup::TileGroup(
    ::_pbi::ConstantInitialized)
  : tiles_()
  , tile_stats_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_updated_time_ms_(int64_t{0}){}
struct TileGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileGroupDefaultTypeInternal() {}
  union {
    TileGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileGroupDefaultTypeInternal _TileGroup_default_instance_;
}  // namespace proto
}  // namespace query_tiles
namespace query_tiles {
namespace proto {

// ===================================================================

class Tile_ImageMetadata::_Internal {
 public:
};

Tile_ImageMetadata::Tile_ImageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:query_tiles.proto.Tile.ImageMetadata)
}
Tile_ImageMetadata::Tile_ImageMetadata(const Tile_ImageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:query_tiles.proto.Tile.ImageMetadata)
}

inline void Tile_ImageMetadata::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tile_ImageMetadata::~Tile_ImageMetadata() {
  // @@protoc_insertion_point(destructor:query_tiles.proto.Tile.ImageMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tile_ImageMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void Tile_ImageMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tile_ImageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:query_tiles.proto.Tile.ImageMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Tile_ImageMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tile_ImageMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:query_tiles.proto.Tile.ImageMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.Tile.ImageMetadata.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query_tiles.proto.Tile.ImageMetadata)
  return target;
}

size_t Tile_ImageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query_tiles.proto.Tile.ImageMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tile_ImageMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Tile_ImageMetadata*>(
      &from));
}

void Tile_ImageMetadata::MergeFrom(const Tile_ImageMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query_tiles.proto.Tile.ImageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tile_ImageMetadata::CopyFrom(const Tile_ImageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query_tiles.proto.Tile.ImageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile_ImageMetadata::IsInitialized() const {
  return true;
}

void Tile_ImageMetadata::InternalSwap(Tile_ImageMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string Tile_ImageMetadata::GetTypeName() const {
  return "query_tiles.proto.Tile.ImageMetadata";
}


// ===================================================================

class Tile::_Internal {
 public:
};

Tile::Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  image_metadatas_(arena),
  sub_tiles_(arena),
  search_params_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:query_tiles.proto.Tile)
}
Tile::Tile(const Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      image_metadatas_(from.image_metadatas_),
      sub_tiles_(from.sub_tiles_),
      search_params_(from.search_params_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  query_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_text().empty()) {
    query_text_.Set(from._internal_query_text(), 
      GetArenaForAllocation());
  }
  display_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_text().empty()) {
    display_text_.Set(from._internal_display_text(), 
      GetArenaForAllocation());
  }
  accessibility_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    accessibility_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accessibility_text().empty()) {
    accessibility_text_.Set(from._internal_accessibility_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:query_tiles.proto.Tile)
}

inline void Tile::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
query_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
accessibility_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  accessibility_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:query_tiles.proto.Tile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  query_text_.Destroy();
  display_text_.Destroy();
  accessibility_text_.Destroy();
}

void Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:query_tiles.proto.Tile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_metadatas_.Clear();
  sub_tiles_.Clear();
  search_params_.Clear();
  id_.ClearToEmpty();
  query_text_.ClearToEmpty();
  display_text_.ClearToEmpty();
  accessibility_text_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Tile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string query_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_query_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string display_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_display_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string accessibility_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_accessibility_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .query_tiles.proto.Tile.ImageMetadata image_metadatas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_metadatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .query_tiles.proto.Tile sub_tiles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string search_params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_search_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:query_tiles.proto.Tile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.Tile.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string query_text = 2;
  if (!this->_internal_query_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_text().data(), static_cast<int>(this->_internal_query_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.Tile.query_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_query_text(), target);
  }

  // string display_text = 3;
  if (!this->_internal_display_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_text().data(), static_cast<int>(this->_internal_display_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.Tile.display_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display_text(), target);
  }

  // string accessibility_text = 4;
  if (!this->_internal_accessibility_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accessibility_text().data(), static_cast<int>(this->_internal_accessibility_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.Tile.accessibility_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_accessibility_text(), target);
  }

  // repeated .query_tiles.proto.Tile.ImageMetadata image_metadatas = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_metadatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_metadatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .query_tiles.proto.Tile sub_tiles = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sub_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_sub_tiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string search_params = 7;
  for (int i = 0, n = this->_internal_search_params_size(); i < n; i++) {
    const auto& s = this->_internal_search_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.Tile.search_params");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query_tiles.proto.Tile)
  return target;
}

size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query_tiles.proto.Tile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .query_tiles.proto.Tile.ImageMetadata image_metadatas = 5;
  total_size += 1UL * this->_internal_image_metadatas_size();
  for (const auto& msg : this->image_metadatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .query_tiles.proto.Tile sub_tiles = 6;
  total_size += 1UL * this->_internal_sub_tiles_size();
  for (const auto& msg : this->sub_tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string search_params = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(search_params_.size());
  for (int i = 0, n = search_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      search_params_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string query_text = 2;
  if (!this->_internal_query_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_text());
  }

  // string display_text = 3;
  if (!this->_internal_display_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_text());
  }

  // string accessibility_text = 4;
  if (!this->_internal_accessibility_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accessibility_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Tile*>(
      &from));
}

void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query_tiles.proto.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  image_metadatas_.MergeFrom(from.image_metadatas_);
  sub_tiles_.MergeFrom(from.sub_tiles_);
  search_params_.MergeFrom(from.search_params_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_query_text().empty()) {
    _internal_set_query_text(from._internal_query_text());
  }
  if (!from._internal_display_text().empty()) {
    _internal_set_display_text(from._internal_display_text());
  }
  if (!from._internal_accessibility_text().empty()) {
    _internal_set_accessibility_text(from._internal_accessibility_text());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query_tiles.proto.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  return true;
}

void Tile::InternalSwap(Tile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  image_metadatas_.InternalSwap(&other->image_metadatas_);
  sub_tiles_.InternalSwap(&other->sub_tiles_);
  search_params_.InternalSwap(&other->search_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &query_text_, lhs_arena,
      &other->query_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &display_text_, lhs_arena,
      &other->display_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &accessibility_text_, lhs_arena,
      &other->accessibility_text_, rhs_arena
  );
}

std::string Tile::GetTypeName() const {
  return "query_tiles.proto.Tile";
}


// ===================================================================

class TileStats::_Internal {
 public:
};

TileStats::TileStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:query_tiles.proto.TileStats)
}
TileStats::TileStats(const TileStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&last_clicked_time_ms_, &from.last_clicked_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&last_clicked_time_ms_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:query_tiles.proto.TileStats)
}

inline void TileStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_clicked_time_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&last_clicked_time_ms_)) + sizeof(score_));
}

TileStats::~TileStats() {
  // @@protoc_insertion_point(destructor:query_tiles.proto.TileStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TileStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileStats::Clear() {
// @@protoc_insertion_point(message_clear_start:query_tiles.proto.TileStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&last_clicked_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&last_clicked_time_ms_)) + sizeof(score_));
  _internal_metadata_.Clear<std::string>();
}

const char* TileStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_clicked_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          last_clicked_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:query_tiles.proto.TileStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_clicked_time_ms = 1;
  if (this->_internal_last_clicked_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_clicked_time_ms(), target);
  }

  // double score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query_tiles.proto.TileStats)
  return target;
}

size_t TileStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query_tiles.proto.TileStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 last_clicked_time_ms = 1;
  if (this->_internal_last_clicked_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_clicked_time_ms());
  }

  // double score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TileStats*>(
      &from));
}

void TileStats::MergeFrom(const TileStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query_tiles.proto.TileStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_last_clicked_time_ms() != 0) {
    _internal_set_last_clicked_time_ms(from._internal_last_clicked_time_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = from._internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TileStats::CopyFrom(const TileStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query_tiles.proto.TileStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileStats::IsInitialized() const {
  return true;
}

void TileStats::InternalSwap(TileStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileStats, score_)
      + sizeof(TileStats::score_)
      - PROTOBUF_FIELD_OFFSET(TileStats, last_clicked_time_ms_)>(
          reinterpret_cast<char*>(&last_clicked_time_ms_),
          reinterpret_cast<char*>(&other->last_clicked_time_ms_));
}

std::string TileStats::GetTypeName() const {
  return "query_tiles.proto.TileStats";
}


// ===================================================================

TileGroup_TileStatsEntry_DoNotUse::TileGroup_TileStatsEntry_DoNotUse() {}
TileGroup_TileStatsEntry_DoNotUse::TileGroup_TileStatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TileGroup_TileStatsEntry_DoNotUse::MergeFrom(const TileGroup_TileStatsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class TileGroup::_Internal {
 public:
};

TileGroup::TileGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tiles_(arena),
  tile_stats_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:query_tiles.proto.TileGroup)
}
TileGroup::TileGroup(const TileGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  tile_stats_.MergeFrom(from.tile_stats_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locale().empty()) {
    locale_.Set(from._internal_locale(), 
      GetArenaForAllocation());
  }
  last_updated_time_ms_ = from.last_updated_time_ms_;
  // @@protoc_insertion_point(copy_constructor:query_tiles.proto.TileGroup)
}

inline void TileGroup::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_updated_time_ms_ = int64_t{0};
}

TileGroup::~TileGroup() {
  // @@protoc_insertion_point(destructor:query_tiles.proto.TileGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tile_stats_.Destruct();
  id_.Destroy();
  locale_.Destroy();
}

void TileGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:query_tiles.proto.TileGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  tile_stats_.Clear();
  id_.ClearToEmpty();
  locale_.ClearToEmpty();
  last_updated_time_ms_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* TileGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string locale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_updated_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          last_updated_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .query_tiles.proto.Tile tiles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .query_tiles.proto.TileStats> tile_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tile_stats_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:query_tiles.proto.TileGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileGroup.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string locale = 2;
  if (!this->_internal_locale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileGroup.locale");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_locale(), target);
  }

  // int64 last_updated_time_ms = 3;
  if (this->_internal_last_updated_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_updated_time_ms(), target);
  }

  // repeated .query_tiles.proto.Tile tiles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_tiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .query_tiles.proto.TileStats> tile_stats = 5;
  if (!this->_internal_tile_stats().empty()) {
    using MapType = ::_pb::Map<std::string, ::query_tiles::proto::TileStats>;
    using WireHelper = TileGroup_TileStatsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tile_stats();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "query_tiles.proto.TileGroup.TileStatsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query_tiles.proto.TileGroup)
  return target;
}

size_t TileGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query_tiles.proto.TileGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .query_tiles.proto.Tile tiles = 4;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .query_tiles.proto.TileStats> tile_stats = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tile_stats_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::query_tiles::proto::TileStats >::const_iterator
      it = this->_internal_tile_stats().begin();
      it != this->_internal_tile_stats().end(); ++it) {
    total_size += TileGroup_TileStatsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string locale = 2;
  if (!this->_internal_locale().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // int64 last_updated_time_ms = 3;
  if (this->_internal_last_updated_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_updated_time_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TileGroup*>(
      &from));
}

void TileGroup::MergeFrom(const TileGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query_tiles.proto.TileGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  tile_stats_.MergeFrom(from.tile_stats_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_locale().empty()) {
    _internal_set_locale(from._internal_locale());
  }
  if (from._internal_last_updated_time_ms() != 0) {
    _internal_set_last_updated_time_ms(from._internal_last_updated_time_ms());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TileGroup::CopyFrom(const TileGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query_tiles.proto.TileGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileGroup::IsInitialized() const {
  return true;
}

void TileGroup::InternalSwap(TileGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
  tile_stats_.InternalSwap(&other->tile_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
  swap(last_updated_time_ms_, other->last_updated_time_ms_);
}

std::string TileGroup::GetTypeName() const {
  return "query_tiles.proto.TileGroup";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace query_tiles
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::query_tiles::proto::Tile_ImageMetadata*
Arena::CreateMaybeMessage< ::query_tiles::proto::Tile_ImageMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::Tile_ImageMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::query_tiles::proto::Tile*
Arena::CreateMaybeMessage< ::query_tiles::proto::Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::query_tiles::proto::TileStats*
Arena::CreateMaybeMessage< ::query_tiles::proto::TileStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::TileStats >(arena);
}
template<> PROTOBUF_NOINLINE ::query_tiles::proto::TileGroup_TileStatsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::query_tiles::proto::TileGroup_TileStatsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::TileGroup_TileStatsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::query_tiles::proto::TileGroup*
Arena::CreateMaybeMessage< ::query_tiles::proto::TileGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::TileGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
