// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_response.proto

#include "tile_response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace query_tiles {
namespace proto {
PROTOBUF_CONSTEXPR TileImage::TileImage(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TileImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileImageDefaultTypeInternal() {}
  union {
    TileImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileImageDefaultTypeInternal _TileImage_default_instance_;
PROTOBUF_CONSTEXPR TileInfo::TileInfo(
    ::_pbi::ConstantInitialized)
  : tile_images_()
  , sub_tile_ids_()
  , search_params_()
  , tile_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , query_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , display_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , accessibility_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , is_top_level_(false){}
struct TileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileInfoDefaultTypeInternal() {}
  union {
    TileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileInfoDefaultTypeInternal _TileInfo_default_instance_;
PROTOBUF_CONSTEXPR TileInfoGroup::TileInfoGroup(
    ::_pbi::ConstantInitialized)
  : tiles_()
  , locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TileInfoGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileInfoGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileInfoGroupDefaultTypeInternal() {}
  union {
    TileInfoGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileInfoGroupDefaultTypeInternal _TileInfoGroup_default_instance_;
PROTOBUF_CONSTEXPR ServerResponse::ServerResponse(
    ::_pbi::ConstantInitialized)
  : tile_group_(nullptr){}
struct ServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerResponseDefaultTypeInternal() {}
  union {
    ServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace proto
}  // namespace query_tiles
namespace query_tiles {
namespace proto {

// ===================================================================

class TileImage::_Internal {
 public:
};

TileImage::TileImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:query_tiles.proto.TileImage)
}
TileImage::TileImage(const TileImage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:query_tiles.proto.TileImage)
}

inline void TileImage::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TileImage::~TileImage() {
  // @@protoc_insertion_point(destructor:query_tiles.proto.TileImage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void TileImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileImage::Clear() {
// @@protoc_insertion_point(message_clear_start:query_tiles.proto.TileImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* TileImage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:query_tiles.proto.TileImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileImage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query_tiles.proto.TileImage)
  return target;
}

size_t TileImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query_tiles.proto.TileImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileImage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TileImage*>(
      &from));
}

void TileImage::MergeFrom(const TileImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query_tiles.proto.TileImage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TileImage::CopyFrom(const TileImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query_tiles.proto.TileImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileImage::IsInitialized() const {
  return true;
}

void TileImage::InternalSwap(TileImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string TileImage::GetTypeName() const {
  return "query_tiles.proto.TileImage";
}


// ===================================================================

class TileInfo::_Internal {
 public:
};

TileInfo::TileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tile_images_(arena),
  sub_tile_ids_(arena),
  search_params_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:query_tiles.proto.TileInfo)
}
TileInfo::TileInfo(const TileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tile_images_(from.tile_images_),
      sub_tile_ids_(from.sub_tile_ids_),
      search_params_(from.search_params_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  tile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tile_id().empty()) {
    tile_id_.Set(from._internal_tile_id(), 
      GetArenaForAllocation());
  }
  query_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_string().empty()) {
    query_string_.Set(from._internal_query_string(), 
      GetArenaForAllocation());
  }
  display_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_text().empty()) {
    display_text_.Set(from._internal_display_text(), 
      GetArenaForAllocation());
  }
  accessibility_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    accessibility_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accessibility_text().empty()) {
    accessibility_text_.Set(from._internal_accessibility_text(), 
      GetArenaForAllocation());
  }
  is_top_level_ = from.is_top_level_;
  // @@protoc_insertion_point(copy_constructor:query_tiles.proto.TileInfo)
}

inline void TileInfo::SharedCtor() {
tile_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tile_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
query_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
accessibility_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  accessibility_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
is_top_level_ = false;
}

TileInfo::~TileInfo() {
  // @@protoc_insertion_point(destructor:query_tiles.proto.TileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tile_id_.Destroy();
  query_string_.Destroy();
  display_text_.Destroy();
  accessibility_text_.Destroy();
}

void TileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:query_tiles.proto.TileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_images_.Clear();
  sub_tile_ids_.Clear();
  search_params_.Clear();
  tile_id_.ClearToEmpty();
  query_string_.ClearToEmpty();
  display_text_.ClearToEmpty();
  accessibility_text_.ClearToEmpty();
  is_top_level_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* TileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string query_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_query_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .query_tiles.proto.TileImage tile_images = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tile_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string display_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string accessibility_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_accessibility_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_top_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          is_top_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string sub_tile_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sub_tile_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string search_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_search_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:query_tiles.proto.TileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tile_id = 1;
  if (!this->_internal_tile_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tile_id().data(), static_cast<int>(this->_internal_tile_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileInfo.tile_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tile_id(), target);
  }

  // string query_string = 2;
  if (!this->_internal_query_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_string().data(), static_cast<int>(this->_internal_query_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileInfo.query_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_query_string(), target);
  }

  // repeated .query_tiles.proto.TileImage tile_images = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tile_images_size()); i < n; i++) {
    const auto& repfield = this->_internal_tile_images(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string display_text = 4;
  if (!this->_internal_display_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_text().data(), static_cast<int>(this->_internal_display_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileInfo.display_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_display_text(), target);
  }

  // string accessibility_text = 5;
  if (!this->_internal_accessibility_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accessibility_text().data(), static_cast<int>(this->_internal_accessibility_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileInfo.accessibility_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_accessibility_text(), target);
  }

  // bool is_top_level = 6;
  if (this->_internal_is_top_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_top_level(), target);
  }

  // repeated string sub_tile_ids = 7;
  for (int i = 0, n = this->_internal_sub_tile_ids_size(); i < n; i++) {
    const auto& s = this->_internal_sub_tile_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileInfo.sub_tile_ids");
    target = stream->WriteString(7, s, target);
  }

  // repeated string search_params = 8;
  for (int i = 0, n = this->_internal_search_params_size(); i < n; i++) {
    const auto& s = this->_internal_search_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileInfo.search_params");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query_tiles.proto.TileInfo)
  return target;
}

size_t TileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query_tiles.proto.TileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .query_tiles.proto.TileImage tile_images = 3;
  total_size += 1UL * this->_internal_tile_images_size();
  for (const auto& msg : this->tile_images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string sub_tile_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sub_tile_ids_.size());
  for (int i = 0, n = sub_tile_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sub_tile_ids_.Get(i));
  }

  // repeated string search_params = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(search_params_.size());
  for (int i = 0, n = search_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      search_params_.Get(i));
  }

  // string tile_id = 1;
  if (!this->_internal_tile_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tile_id());
  }

  // string query_string = 2;
  if (!this->_internal_query_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_string());
  }

  // string display_text = 4;
  if (!this->_internal_display_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_text());
  }

  // string accessibility_text = 5;
  if (!this->_internal_accessibility_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accessibility_text());
  }

  // bool is_top_level = 6;
  if (this->_internal_is_top_level() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TileInfo*>(
      &from));
}

void TileInfo::MergeFrom(const TileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query_tiles.proto.TileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tile_images_.MergeFrom(from.tile_images_);
  sub_tile_ids_.MergeFrom(from.sub_tile_ids_);
  search_params_.MergeFrom(from.search_params_);
  if (!from._internal_tile_id().empty()) {
    _internal_set_tile_id(from._internal_tile_id());
  }
  if (!from._internal_query_string().empty()) {
    _internal_set_query_string(from._internal_query_string());
  }
  if (!from._internal_display_text().empty()) {
    _internal_set_display_text(from._internal_display_text());
  }
  if (!from._internal_accessibility_text().empty()) {
    _internal_set_accessibility_text(from._internal_accessibility_text());
  }
  if (from._internal_is_top_level() != 0) {
    _internal_set_is_top_level(from._internal_is_top_level());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TileInfo::CopyFrom(const TileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query_tiles.proto.TileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileInfo::IsInitialized() const {
  return true;
}

void TileInfo::InternalSwap(TileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tile_images_.InternalSwap(&other->tile_images_);
  sub_tile_ids_.InternalSwap(&other->sub_tile_ids_);
  search_params_.InternalSwap(&other->search_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tile_id_, lhs_arena,
      &other->tile_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &query_string_, lhs_arena,
      &other->query_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &display_text_, lhs_arena,
      &other->display_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &accessibility_text_, lhs_arena,
      &other->accessibility_text_, rhs_arena
  );
  swap(is_top_level_, other->is_top_level_);
}

std::string TileInfo::GetTypeName() const {
  return "query_tiles.proto.TileInfo";
}


// ===================================================================

class TileInfoGroup::_Internal {
 public:
};

TileInfoGroup::TileInfoGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tiles_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:query_tiles.proto.TileInfoGroup)
}
TileInfoGroup::TileInfoGroup(const TileInfoGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locale().empty()) {
    locale_.Set(from._internal_locale(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:query_tiles.proto.TileInfoGroup)
}

inline void TileInfoGroup::SharedCtor() {
locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TileInfoGroup::~TileInfoGroup() {
  // @@protoc_insertion_point(destructor:query_tiles.proto.TileInfoGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileInfoGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  locale_.Destroy();
}

void TileInfoGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileInfoGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:query_tiles.proto.TileInfoGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  locale_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* TileInfoGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .query_tiles.proto.TileInfo tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string locale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileInfoGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:query_tiles.proto.TileInfoGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .query_tiles.proto.TileInfo tiles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_tiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string locale = 2;
  if (!this->_internal_locale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "query_tiles.proto.TileInfoGroup.locale");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query_tiles.proto.TileInfoGroup)
  return target;
}

size_t TileInfoGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query_tiles.proto.TileInfoGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .query_tiles.proto.TileInfo tiles = 1;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string locale = 2;
  if (!this->_internal_locale().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileInfoGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TileInfoGroup*>(
      &from));
}

void TileInfoGroup::MergeFrom(const TileInfoGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query_tiles.proto.TileInfoGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  if (!from._internal_locale().empty()) {
    _internal_set_locale(from._internal_locale());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TileInfoGroup::CopyFrom(const TileInfoGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query_tiles.proto.TileInfoGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileInfoGroup::IsInitialized() const {
  return true;
}

void TileInfoGroup::InternalSwap(TileInfoGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
}

std::string TileInfoGroup::GetTypeName() const {
  return "query_tiles.proto.TileInfoGroup";
}


// ===================================================================

class ServerResponse::_Internal {
 public:
  static const ::query_tiles::proto::TileInfoGroup& tile_group(const ServerResponse* msg);
};

const ::query_tiles::proto::TileInfoGroup&
ServerResponse::_Internal::tile_group(const ServerResponse* msg) {
  return *msg->tile_group_;
}
ServerResponse::ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:query_tiles.proto.ServerResponse)
}
ServerResponse::ServerResponse(const ServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_tile_group()) {
    tile_group_ = new ::query_tiles::proto::TileInfoGroup(*from.tile_group_);
  } else {
    tile_group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:query_tiles.proto.ServerResponse)
}

inline void ServerResponse::SharedCtor() {
tile_group_ = nullptr;
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:query_tiles.proto.ServerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tile_group_;
}

void ServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:query_tiles.proto.ServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tile_group_ != nullptr) {
    delete tile_group_;
  }
  tile_group_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .query_tiles.proto.TileInfoGroup tile_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:query_tiles.proto.ServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .query_tiles.proto.TileInfoGroup tile_group = 1;
  if (this->_internal_has_tile_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tile_group(this),
        _Internal::tile_group(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:query_tiles.proto.ServerResponse)
  return target;
}

size_t ServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:query_tiles.proto.ServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .query_tiles.proto.TileInfoGroup tile_group = 1;
  if (this->_internal_has_tile_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tile_group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerResponse*>(
      &from));
}

void ServerResponse::MergeFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:query_tiles.proto.ServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tile_group()) {
    _internal_mutable_tile_group()->::query_tiles::proto::TileInfoGroup::MergeFrom(from._internal_tile_group());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:query_tiles.proto.ServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {
  return true;
}

void ServerResponse::InternalSwap(ServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tile_group_, other->tile_group_);
}

std::string ServerResponse::GetTypeName() const {
  return "query_tiles.proto.ServerResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace query_tiles
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::query_tiles::proto::TileImage*
Arena::CreateMaybeMessage< ::query_tiles::proto::TileImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::TileImage >(arena);
}
template<> PROTOBUF_NOINLINE ::query_tiles::proto::TileInfo*
Arena::CreateMaybeMessage< ::query_tiles::proto::TileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::TileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::query_tiles::proto::TileInfoGroup*
Arena::CreateMaybeMessage< ::query_tiles::proto::TileInfoGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::TileInfoGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::query_tiles::proto::ServerResponse*
Arena::CreateMaybeMessage< ::query_tiles::proto::ServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::query_tiles::proto::ServerResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
