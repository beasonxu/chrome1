// components/ml/mojom/web_platform_model.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_ML_MOJOM_WEB_PLATFORM_MODEL_MOJOM_SHARED_H_
#define COMPONENTS_ML_MOJOM_WEB_PLATFORM_MODEL_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/ml/mojom/web_platform_model.mojom-shared-internal.h"
#include "mojo/public/mojom/base/big_buffer.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace ml {
namespace model_loader {
namespace mojom {
class CreateModelLoaderOptionsDataView;

class TensorInfoDataView;

class ModelInfoDataView;



}  // namespace mojom
}  // namespace model_loader
}  // namespace ml

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::ml::model_loader::mojom::CreateModelLoaderOptionsDataView> {
  using Data = ::ml::model_loader::mojom::internal::CreateModelLoaderOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::ml::model_loader::mojom::TensorInfoDataView> {
  using Data = ::ml::model_loader::mojom::internal::TensorInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::ml::model_loader::mojom::ModelInfoDataView> {
  using Data = ::ml::model_loader::mojom::internal::ModelInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace ml {
namespace model_loader {
namespace mojom {


enum class ModelFormat : int32_t {
  
  kAuto = 0,
  
  kTfLite = 1,
  kMinValue = 0,
  kMaxValue = 1,
  kDefaultValue = 0
};

 std::ostream& operator<<(std::ostream& os, ModelFormat value);
inline bool IsKnownEnumValue(ModelFormat value) {
  return internal::ModelFormat_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
inline ModelFormat ToKnownEnumValue(ModelFormat value) {
  if (IsKnownEnumValue(value)) {
    return value;
  }
  return ModelFormat::kDefaultValue;
}


enum class DevicePreference : int32_t {
  
  kAuto = 0,
  
  kCpu = 1,
  
  kGpu = 2,
  kMinValue = 0,
  kMaxValue = 2,
  kDefaultValue = 0
};

 std::ostream& operator<<(std::ostream& os, DevicePreference value);
inline bool IsKnownEnumValue(DevicePreference value) {
  return internal::DevicePreference_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
inline DevicePreference ToKnownEnumValue(DevicePreference value) {
  if (IsKnownEnumValue(value)) {
    return value;
  }
  return DevicePreference::kDefaultValue;
}


enum class DataType : int32_t {
  
  kUnknown = 0,
  
  kInt64 = 1,
  
  kUint64 = 2,
  
  kFloat64 = 3,
  
  kInt32 = 4,
  
  kUint32 = 5,
  
  kFloat32 = 6,
  
  kInt16 = 7,
  
  kUint16 = 8,
  
  kFloat16 = 9,
  
  kInt8 = 10,
  
  kUint8 = 11,
  
  kBool = 12,
  kMinValue = 0,
  kMaxValue = 12,
  kDefaultValue = 0
};

 std::ostream& operator<<(std::ostream& os, DataType value);
inline bool IsKnownEnumValue(DataType value) {
  return internal::DataType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
inline DataType ToKnownEnumValue(DataType value) {
  if (IsKnownEnumValue(value)) {
    return value;
  }
  return DataType::kDefaultValue;
}


enum class LoadModelResult : int32_t {
  
  kOk = 0,
  
  kUnknownError = 1,
  
  kInvalidModel = 2,
  
  kNotSupported = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, LoadModelResult value);
inline bool IsKnownEnumValue(LoadModelResult value) {
  return internal::LoadModelResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class CreateModelLoaderResult : int32_t {
  
  kOk = 0,
  
  kUnknownError = 1,
  
  kNotSupported = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, CreateModelLoaderResult value);
inline bool IsKnownEnumValue(CreateModelLoaderResult value) {
  return internal::CreateModelLoaderResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ComputeResult : int32_t {
  
  kOk = 0,
  
  kUnknownError = 1,
  
  kModelNotLoaded = 2,
  
  kIncorrectNumberOfInputs = 3,
  
  kMissingInput = 4,
  
  kInvalidInputBufferSize = 5,
  kMinValue = 0,
  kMaxValue = 5,
};

 std::ostream& operator<<(std::ostream& os, ComputeResult value);
inline bool IsKnownEnumValue(ComputeResult value) {
  return internal::ComputeResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class ModelLoaderInterfaceBase {};

using ModelLoaderPtrDataView =
    mojo::InterfacePtrDataView<ModelLoaderInterfaceBase>;
using ModelLoaderRequestDataView =
    mojo::InterfaceRequestDataView<ModelLoaderInterfaceBase>;
using ModelLoaderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ModelLoaderInterfaceBase>;
using ModelLoaderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ModelLoaderInterfaceBase>;
class ModelInterfaceBase {};

using ModelPtrDataView =
    mojo::InterfacePtrDataView<ModelInterfaceBase>;
using ModelRequestDataView =
    mojo::InterfaceRequestDataView<ModelInterfaceBase>;
using ModelAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ModelInterfaceBase>;
using ModelAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ModelInterfaceBase>;


class CreateModelLoaderOptionsDataView {
 public:
  CreateModelLoaderOptionsDataView() = default;

  CreateModelLoaderOptionsDataView(
      internal::CreateModelLoaderOptions_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t num_threads() const {
    return data_->num_threads;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadModelFormat(UserType* output) const {
    auto data_value = data_->model_format;
    return mojo::internal::Deserialize<::ml::model_loader::mojom::ModelFormat>(
        data_value, output);
  }
  ModelFormat model_format() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ml::model_loader::mojom::ModelFormat>(data_->model_format));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDevicePreference(UserType* output) const {
    auto data_value = data_->device_preference;
    return mojo::internal::Deserialize<::ml::model_loader::mojom::DevicePreference>(
        data_value, output);
  }
  DevicePreference device_preference() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ml::model_loader::mojom::DevicePreference>(data_->device_preference));
  }
 private:
  internal::CreateModelLoaderOptions_Data* data_ = nullptr;
};



class TensorInfoDataView {
 public:
  TensorInfoDataView() = default;

  TensorInfoDataView(
      internal::TensorInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t byte_size() const {
    return data_->byte_size;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDataType(UserType* output) const {
    auto data_value = data_->data_type;
    return mojo::internal::Deserialize<::ml::model_loader::mojom::DataType>(
        data_value, output);
  }
  DataType data_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ml::model_loader::mojom::DataType>(data_->data_type));
  }
  inline void GetDimensionsDataView(
      mojo::ArrayDataView<uint32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDimensions(UserType* output) {
    
    auto* pointer = data_->dimensions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint32_t>>(
        pointer, output, message_);
  }
 private:
  internal::TensorInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ModelInfoDataView {
 public:
  ModelInfoDataView() = default;

  ModelInfoDataView(
      internal::ModelInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInputTensorInfoDataView(
      mojo::MapDataView<mojo::StringDataView, TensorInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInputTensorInfo(UserType* output) {
    
    auto* pointer = data_->input_tensor_info.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, ::ml::model_loader::mojom::TensorInfoDataView>>(
        pointer, output, message_);
  }
  inline void GetOutputTensorInfoDataView(
      mojo::MapDataView<mojo::StringDataView, TensorInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutputTensorInfo(UserType* output) {
    
    auto* pointer = data_->output_tensor_info.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, ::ml::model_loader::mojom::TensorInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ModelInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace model_loader
}  // namespace ml

namespace std {

template <>
struct hash<::ml::model_loader::mojom::ModelFormat>
    : public mojo::internal::EnumHashImpl<::ml::model_loader::mojom::ModelFormat> {};

template <>
struct hash<::ml::model_loader::mojom::DevicePreference>
    : public mojo::internal::EnumHashImpl<::ml::model_loader::mojom::DevicePreference> {};

template <>
struct hash<::ml::model_loader::mojom::DataType>
    : public mojo::internal::EnumHashImpl<::ml::model_loader::mojom::DataType> {};

template <>
struct hash<::ml::model_loader::mojom::LoadModelResult>
    : public mojo::internal::EnumHashImpl<::ml::model_loader::mojom::LoadModelResult> {};

template <>
struct hash<::ml::model_loader::mojom::CreateModelLoaderResult>
    : public mojo::internal::EnumHashImpl<::ml::model_loader::mojom::CreateModelLoaderResult> {};

template <>
struct hash<::ml::model_loader::mojom::ComputeResult>
    : public mojo::internal::EnumHashImpl<::ml::model_loader::mojom::ComputeResult> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::ModelFormat, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ml::model_loader::mojom::ModelFormat, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ml::model_loader::mojom::ModelFormat>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::DevicePreference, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ml::model_loader::mojom::DevicePreference, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ml::model_loader::mojom::DevicePreference>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::DataType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ml::model_loader::mojom::DataType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ml::model_loader::mojom::DataType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::LoadModelResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ml::model_loader::mojom::LoadModelResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ml::model_loader::mojom::LoadModelResult>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::CreateModelLoaderResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ml::model_loader::mojom::CreateModelLoaderResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ml::model_loader::mojom::CreateModelLoaderResult>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::ComputeResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ml::model_loader::mojom::ComputeResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ml::model_loader::mojom::ComputeResult>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::CreateModelLoaderOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::ml::model_loader::mojom::CreateModelLoaderOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::ml::model_loader::mojom::internal::CreateModelLoaderOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->num_threads = Traits::num_threads(input);
    mojo::internal::Serialize<::ml::model_loader::mojom::ModelFormat>(
        Traits::model_format(input), &fragment->model_format);
    mojo::internal::Serialize<::ml::model_loader::mojom::DevicePreference>(
        Traits::device_preference(input), &fragment->device_preference);
  }

  static bool Deserialize(::ml::model_loader::mojom::internal::CreateModelLoaderOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::ml::model_loader::mojom::CreateModelLoaderOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::TensorInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::ml::model_loader::mojom::TensorInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::ml::model_loader::mojom::internal::TensorInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->byte_size = Traits::byte_size(input);
    mojo::internal::Serialize<::ml::model_loader::mojom::DataType>(
        Traits::data_type(input), &fragment->data_type);
    decltype(Traits::dimensions(input)) in_dimensions = Traits::dimensions(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->dimensions)::BaseType>
        dimensions_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams dimensions_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint32_t>>(
        in_dimensions, dimensions_fragment, &dimensions_validate_params);
    fragment->dimensions.Set(
        dimensions_fragment.is_null() ? nullptr : dimensions_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->dimensions.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null dimensions in TensorInfo struct");
  }

  static bool Deserialize(::ml::model_loader::mojom::internal::TensorInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::ml::model_loader::mojom::TensorInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ml::model_loader::mojom::ModelInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::ml::model_loader::mojom::ModelInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::ml::model_loader::mojom::internal::ModelInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::input_tensor_info(input)) in_input_tensor_info = Traits::input_tensor_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->input_tensor_info)::BaseType>
        input_tensor_info_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams input_tensor_info_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, ::ml::model_loader::mojom::TensorInfoDataView>>(
        in_input_tensor_info, input_tensor_info_fragment, &input_tensor_info_validate_params);
    fragment->input_tensor_info.Set(
        input_tensor_info_fragment.is_null() ? nullptr : input_tensor_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->input_tensor_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null input_tensor_info in ModelInfo struct");
    decltype(Traits::output_tensor_info(input)) in_output_tensor_info = Traits::output_tensor_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->output_tensor_info)::BaseType>
        output_tensor_info_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams output_tensor_info_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, ::ml::model_loader::mojom::TensorInfoDataView>>(
        in_output_tensor_info, output_tensor_info_fragment, &output_tensor_info_validate_params);
    fragment->output_tensor_info.Set(
        output_tensor_info_fragment.is_null() ? nullptr : output_tensor_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->output_tensor_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null output_tensor_info in ModelInfo struct");
  }

  static bool Deserialize(::ml::model_loader::mojom::internal::ModelInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::ml::model_loader::mojom::ModelInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace ml {
namespace model_loader {
namespace mojom {



inline void TensorInfoDataView::GetDimensionsDataView(
    mojo::ArrayDataView<uint32_t>* output) {
  auto pointer = data_->dimensions.Get();
  *output = mojo::ArrayDataView<uint32_t>(pointer, message_);
}


inline void ModelInfoDataView::GetInputTensorInfoDataView(
    mojo::MapDataView<mojo::StringDataView, TensorInfoDataView>* output) {
  auto pointer = data_->input_tensor_info.Get();
  *output = mojo::MapDataView<mojo::StringDataView, TensorInfoDataView>(pointer, message_);
}
inline void ModelInfoDataView::GetOutputTensorInfoDataView(
    mojo::MapDataView<mojo::StringDataView, TensorInfoDataView>* output) {
  auto pointer = data_->output_tensor_info.Get();
  *output = mojo::MapDataView<mojo::StringDataView, TensorInfoDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace model_loader
}  // namespace ml

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::ml::model_loader::mojom::ModelFormat> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ml::model_loader::mojom::ModelFormat value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::ml::model_loader::mojom::DevicePreference> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ml::model_loader::mojom::DevicePreference value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::ml::model_loader::mojom::DataType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ml::model_loader::mojom::DataType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::ml::model_loader::mojom::LoadModelResult> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ml::model_loader::mojom::LoadModelResult value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::ml::model_loader::mojom::CreateModelLoaderResult> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ml::model_loader::mojom::CreateModelLoaderResult value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::ml::model_loader::mojom::ComputeResult> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ml::model_loader::mojom::ComputeResult value);
};

} // namespace perfetto

#endif  // COMPONENTS_ML_MOJOM_WEB_PLATFORM_MODEL_MOJOM_SHARED_H_