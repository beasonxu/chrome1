// components/ml/mojom/web_platform_model.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_ML_MOJOM_WEB_PLATFORM_MODEL_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_ML_MOJOM_WEB_PLATFORM_MODEL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace ml {
namespace model_loader {
namespace mojom {
namespace internal {

class ValidationContext;
class  ModelLoader_Load_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data model_content;

 private:
  friend class mojo::internal::MessageFragment<ModelLoader_Load_Params_Data>;

  ModelLoader_Load_Params_Data();
  ~ModelLoader_Load_Params_Data() = delete;
};
static_assert(sizeof(ModelLoader_Load_Params_Data) == 24,
              "Bad sizeof(ModelLoader_Load_Params_Data)");
class  ModelLoader_Load_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  mojo::internal::Interface_Data remote;
  uint8_t pad1_[4];
  mojo::internal::Pointer<internal::ModelInfo_Data> model_info;

 private:
  friend class mojo::internal::MessageFragment<ModelLoader_Load_ResponseParams_Data>;

  ModelLoader_Load_ResponseParams_Data();
  ~ModelLoader_Load_ResponseParams_Data() = delete;
};
static_assert(sizeof(ModelLoader_Load_ResponseParams_Data) == 32,
              "Bad sizeof(ModelLoader_Load_ResponseParams_Data)");
class  Model_Compute_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>>>> input_tensors;

 private:
  friend class mojo::internal::MessageFragment<Model_Compute_Params_Data>;

  Model_Compute_Params_Data();
  ~Model_Compute_Params_Data() = delete;
};
static_assert(sizeof(Model_Compute_Params_Data) == 16,
              "Bad sizeof(Model_Compute_Params_Data)");
class  Model_Compute_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>>>> output_tensors;

 private:
  friend class mojo::internal::MessageFragment<Model_Compute_ResponseParams_Data>;

  Model_Compute_ResponseParams_Data();
  ~Model_Compute_ResponseParams_Data() = delete;
};
static_assert(sizeof(Model_Compute_ResponseParams_Data) == 24,
              "Bad sizeof(Model_Compute_ResponseParams_Data)");

}  // namespace internal


class ModelLoader_Load_ParamsDataView {
 public:
  ModelLoader_Load_ParamsDataView() = default;

  ModelLoader_Load_ParamsDataView(
      internal::ModelLoader_Load_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetModelContentDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadModelContent(UserType* output) {
    
    auto* pointer = !data_->model_content.is_null() ? &data_->model_content : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::ModelLoader_Load_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ModelLoader_Load_ResponseParamsDataView {
 public:
  ModelLoader_Load_ResponseParamsDataView() = default;

  ModelLoader_Load_ResponseParamsDataView(
      internal::ModelLoader_Load_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::ml::model_loader::mojom::LoadModelResult>(
        data_value, output);
  }
  LoadModelResult result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ml::model_loader::mojom::LoadModelResult>(data_->result));
  }
  template <typename UserType>
  UserType TakeRemote() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::ml::model_loader::mojom::ModelInterfaceBase>>(
            &data_->remote, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetModelInfoDataView(
      ModelInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadModelInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::ml::model_loader::mojom::ModelInfoDataView, UserType>(),
    "Attempting to read the optional `model_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadModelInfo` instead "
    "of `ReadModelInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->model_info.Get();
    return mojo::internal::Deserialize<::ml::model_loader::mojom::ModelInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ModelLoader_Load_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Model_Compute_ParamsDataView {
 public:
  Model_Compute_ParamsDataView() = default;

  Model_Compute_ParamsDataView(
      internal::Model_Compute_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInputTensorsDataView(
      mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInputTensors(UserType* output) {
    
    auto* pointer = data_->input_tensors.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>>(
        pointer, output, message_);
  }
 private:
  internal::Model_Compute_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Model_Compute_ResponseParamsDataView {
 public:
  Model_Compute_ResponseParamsDataView() = default;

  Model_Compute_ResponseParamsDataView(
      internal::Model_Compute_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::ml::model_loader::mojom::ComputeResult>(
        data_value, output);
  }
  ComputeResult result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ml::model_loader::mojom::ComputeResult>(data_->result));
  }
  inline void GetOutputTensorsDataView(
      mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutputTensors(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>, UserType>(),
    "Attempting to read the optional `output_tensors` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOutputTensors` instead "
    "of `ReadOutputTensors if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->output_tensors.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>>(
        pointer, output, message_);
  }
 private:
  internal::Model_Compute_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void ModelLoader_Load_ParamsDataView::GetModelContentDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->model_content;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void ModelLoader_Load_ResponseParamsDataView::GetModelInfoDataView(
    ModelInfoDataView* output) {
  auto pointer = data_->model_info.Get();
  *output = ModelInfoDataView(pointer, message_);
}


inline void Model_Compute_ParamsDataView::GetInputTensorsDataView(
    mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>* output) {
  auto pointer = data_->input_tensors.Get();
  *output = mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>(pointer, message_);
}


inline void Model_Compute_ResponseParamsDataView::GetOutputTensorsDataView(
    mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>* output) {
  auto pointer = data_->output_tensors.Get();
  *output = mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<uint8_t>>(pointer, message_);
}

}  // namespace mojom
}  // namespace model_loader
}  // namespace ml

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_ML_MOJOM_WEB_PLATFORM_MODEL_MOJOM_PARAMS_DATA_H_