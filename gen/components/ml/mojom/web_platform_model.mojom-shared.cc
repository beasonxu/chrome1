// components/ml/mojom/web_platform_model.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/ml/mojom/web_platform_model.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/ml/mojom/web_platform_model.mojom-params-data.h"
namespace ml {
namespace model_loader {
namespace mojom {

static NOINLINE const char* ModelFormatToStringHelper(ModelFormat value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ModelFormat::kAuto:
      return "kAuto";
    case ModelFormat::kTfLite:
      return "kTfLite";
    default:
      return nullptr;
  }
}

std::string ModelFormatToString(ModelFormat value) {
  const char *str = ModelFormatToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ModelFormat value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ModelFormat value) {
  return os << ModelFormatToString(value);
}

static NOINLINE const char* DevicePreferenceToStringHelper(DevicePreference value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case DevicePreference::kAuto:
      return "kAuto";
    case DevicePreference::kCpu:
      return "kCpu";
    case DevicePreference::kGpu:
      return "kGpu";
    default:
      return nullptr;
  }
}

std::string DevicePreferenceToString(DevicePreference value) {
  const char *str = DevicePreferenceToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown DevicePreference value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, DevicePreference value) {
  return os << DevicePreferenceToString(value);
}

static NOINLINE const char* DataTypeToStringHelper(DataType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case DataType::kUnknown:
      return "kUnknown";
    case DataType::kInt64:
      return "kInt64";
    case DataType::kUint64:
      return "kUint64";
    case DataType::kFloat64:
      return "kFloat64";
    case DataType::kInt32:
      return "kInt32";
    case DataType::kUint32:
      return "kUint32";
    case DataType::kFloat32:
      return "kFloat32";
    case DataType::kInt16:
      return "kInt16";
    case DataType::kUint16:
      return "kUint16";
    case DataType::kFloat16:
      return "kFloat16";
    case DataType::kInt8:
      return "kInt8";
    case DataType::kUint8:
      return "kUint8";
    case DataType::kBool:
      return "kBool";
    default:
      return nullptr;
  }
}

std::string DataTypeToString(DataType value) {
  const char *str = DataTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown DataType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, DataType value) {
  return os << DataTypeToString(value);
}

static NOINLINE const char* LoadModelResultToStringHelper(LoadModelResult value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case LoadModelResult::kOk:
      return "kOk";
    case LoadModelResult::kUnknownError:
      return "kUnknownError";
    case LoadModelResult::kInvalidModel:
      return "kInvalidModel";
    case LoadModelResult::kNotSupported:
      return "kNotSupported";
    default:
      return nullptr;
  }
}

std::string LoadModelResultToString(LoadModelResult value) {
  const char *str = LoadModelResultToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown LoadModelResult value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, LoadModelResult value) {
  return os << LoadModelResultToString(value);
}

static NOINLINE const char* CreateModelLoaderResultToStringHelper(CreateModelLoaderResult value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case CreateModelLoaderResult::kOk:
      return "kOk";
    case CreateModelLoaderResult::kUnknownError:
      return "kUnknownError";
    case CreateModelLoaderResult::kNotSupported:
      return "kNotSupported";
    default:
      return nullptr;
  }
}

std::string CreateModelLoaderResultToString(CreateModelLoaderResult value) {
  const char *str = CreateModelLoaderResultToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown CreateModelLoaderResult value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, CreateModelLoaderResult value) {
  return os << CreateModelLoaderResultToString(value);
}

static NOINLINE const char* ComputeResultToStringHelper(ComputeResult value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ComputeResult::kOk:
      return "kOk";
    case ComputeResult::kUnknownError:
      return "kUnknownError";
    case ComputeResult::kModelNotLoaded:
      return "kModelNotLoaded";
    case ComputeResult::kIncorrectNumberOfInputs:
      return "kIncorrectNumberOfInputs";
    case ComputeResult::kMissingInput:
      return "kMissingInput";
    case ComputeResult::kInvalidInputBufferSize:
      return "kInvalidInputBufferSize";
    default:
      return nullptr;
  }
}

std::string ComputeResultToString(ComputeResult value) {
  const char *str = ComputeResultToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ComputeResult value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ComputeResult value) {
  return os << ComputeResultToString(value);
}

namespace internal {


// static
bool CreateModelLoaderOptions_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const CreateModelLoaderOptions_Data* object =
      static_cast<const CreateModelLoaderOptions_Data*>(data);


  if (!::ml::model_loader::mojom::internal::ModelFormat_Data
        ::Validate(object->model_format, validation_context))
    return false;


  if (!::ml::model_loader::mojom::internal::DevicePreference_Data
        ::Validate(object->device_preference, validation_context))
    return false;

  return true;
}

CreateModelLoaderOptions_Data::CreateModelLoaderOptions_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TensorInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const TensorInfo_Data* object =
      static_cast<const TensorInfo_Data*>(data);


  if (!::ml::model_loader::mojom::internal::DataType_Data
        ::Validate(object->data_type, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->dimensions, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams dimensions_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->dimensions, validation_context,
                                         &dimensions_validate_params)) {
    return false;
  }

  return true;
}

TensorInfo_Data::TensorInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ModelInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ModelInfo_Data* object =
      static_cast<const ModelInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->input_tensor_info, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams input_tensor_info_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->input_tensor_info, validation_context,
                                         &input_tensor_info_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->output_tensor_info, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams output_tensor_info_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->output_tensor_info, validation_context,
                                         &output_tensor_info_validate_params)) {
    return false;
  }

  return true;
}

ModelInfo_Data::ModelInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ModelLoader_Load_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ModelLoader_Load_Params_Data* object =
      static_cast<const ModelLoader_Load_Params_Data*>(data);

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->model_content, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->model_content, validation_context))
    return false;

  return true;
}

ModelLoader_Load_Params_Data::ModelLoader_Load_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ModelLoader_Load_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ModelLoader_Load_ResponseParams_Data* object =
      static_cast<const ModelLoader_Load_ResponseParams_Data*>(data);


  if (!::ml::model_loader::mojom::internal::LoadModelResult_Data
        ::Validate(object->result, validation_context))
    return false;

  if (!mojo::internal::ValidateHandleOrInterface(object->remote,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->model_info, validation_context))
    return false;

  return true;
}

ModelLoader_Load_ResponseParams_Data::ModelLoader_Load_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Model_Compute_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Model_Compute_Params_Data* object =
      static_cast<const Model_Compute_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->input_tensors, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams input_tensors_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  if (!mojo::internal::ValidateContainer(object->input_tensors, validation_context,
                                         &input_tensors_validate_params)) {
    return false;
  }

  return true;
}

Model_Compute_Params_Data::Model_Compute_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Model_Compute_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Model_Compute_ResponseParams_Data* object =
      static_cast<const Model_Compute_ResponseParams_Data*>(data);


  if (!::ml::model_loader::mojom::internal::ComputeResult_Data
        ::Validate(object->result, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams output_tensors_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  if (!mojo::internal::ValidateContainer(object->output_tensors, validation_context,
                                         &output_tensors_validate_params)) {
    return false;
  }

  return true;
}

Model_Compute_ResponseParams_Data::Model_Compute_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace model_loader
}  // namespace ml

namespace perfetto {

// static
void TraceFormatTraits<::ml::model_loader::mojom::ModelFormat>::WriteIntoTrace(
   perfetto::TracedValue context, ::ml::model_loader::mojom::ModelFormat value) {
  return std::move(context).WriteString(::ml::model_loader::mojom::ModelFormatToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::ml::model_loader::mojom::DevicePreference>::WriteIntoTrace(
   perfetto::TracedValue context, ::ml::model_loader::mojom::DevicePreference value) {
  return std::move(context).WriteString(::ml::model_loader::mojom::DevicePreferenceToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::ml::model_loader::mojom::DataType>::WriteIntoTrace(
   perfetto::TracedValue context, ::ml::model_loader::mojom::DataType value) {
  return std::move(context).WriteString(::ml::model_loader::mojom::DataTypeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::ml::model_loader::mojom::LoadModelResult>::WriteIntoTrace(
   perfetto::TracedValue context, ::ml::model_loader::mojom::LoadModelResult value) {
  return std::move(context).WriteString(::ml::model_loader::mojom::LoadModelResultToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::ml::model_loader::mojom::CreateModelLoaderResult>::WriteIntoTrace(
   perfetto::TracedValue context, ::ml::model_loader::mojom::CreateModelLoaderResult value) {
  return std::move(context).WriteString(::ml::model_loader::mojom::CreateModelLoaderResultToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::ml::model_loader::mojom::ComputeResult>::WriteIntoTrace(
   perfetto::TracedValue context, ::ml::model_loader::mojom::ComputeResult value) {
  return std::move(context).WriteString(::ml::model_loader::mojom::ComputeResultToString(value));
}

} // namespace perfetto