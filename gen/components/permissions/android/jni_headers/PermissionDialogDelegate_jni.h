// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/permissions/PermissionDialogDelegate

#ifndef org_chromium_components_permissions_PermissionDialogDelegate_JNI
#define org_chromium_components_permissions_PermissionDialogDelegate_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_permissions_PermissionDialogDelegate[];
const char kClassPath_org_chromium_components_permissions_PermissionDialogDelegate[] =
    "org/chromium/components/permissions/PermissionDialogDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_permissions_PermissionDialogDelegate_clazz(nullptr);
#ifndef org_chromium_components_permissions_PermissionDialogDelegate_clazz_defined
#define org_chromium_components_permissions_PermissionDialogDelegate_clazz_defined
inline jclass org_chromium_components_permissions_PermissionDialogDelegate_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_permissions_PermissionDialogDelegate,
      &g_org_chromium_components_permissions_PermissionDialogDelegate_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace permissions {

JNI_GENERATOR_EXPORT void Java_J_N_MoC5mife(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePermissionDialogDelegate,
    jobject caller) {
  PermissionDialogDelegate* native =
      reinterpret_cast<PermissionDialogDelegate*>(nativePermissionDialogDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "Accept");
  return native->Accept(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MG2fhXvZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePermissionDialogDelegate,
    jobject caller) {
  PermissionDialogDelegate* native =
      reinterpret_cast<PermissionDialogDelegate*>(nativePermissionDialogDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "Cancel");
  return native->Cancel(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_My1ZBTOK(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePermissionDialogDelegate,
    jobject caller) {
  PermissionDialogDelegate* native =
      reinterpret_cast<PermissionDialogDelegate*>(nativePermissionDialogDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "Dismissed");
  return native->Dismissed(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MLMIuACo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePermissionDialogDelegate,
    jobject caller) {
  PermissionDialogDelegate* native =
      reinterpret_cast<PermissionDialogDelegate*>(nativePermissionDialogDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

static jint JNI_PermissionDialogDelegate_GetRequestTypeEnumSize(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_MS2qn6y8(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PermissionDialogDelegate_GetRequestTypeEnumSize(env);
}


static std::atomic<jmethodID>
    g_org_chromium_components_permissions_PermissionDialogDelegate_dismissFromNative(nullptr);
static void Java_PermissionDialogDelegate_dismissFromNative(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_permissions_PermissionDialogDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_permissions_PermissionDialogDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "dismissFromNative",
          "()V",
          &g_org_chromium_components_permissions_PermissionDialogDelegate_dismissFromNative);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_permissions_PermissionDialogDelegate_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PermissionDialogDelegate_create(JNIEnv* env,
    jlong nativeDelegatePtr,
    const base::android::JavaRef<jobject>& window,
    const base::android::JavaRef<jintArray>& contentSettingsTypes,
    JniIntWrapper iconId,
    const base::android::JavaRef<jstring>& message,
    const base::android::JavaRef<jstring>& primaryButtonText,
    const base::android::JavaRef<jstring>& secondaryButtonText) {
  jclass clazz = org_chromium_components_permissions_PermissionDialogDelegate_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_permissions_PermissionDialogDelegate_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/ui/base/WindowAndroid;[IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/components/permissions/PermissionDialogDelegate;",
          &g_org_chromium_components_permissions_PermissionDialogDelegate_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeDelegatePtr, window.obj(), contentSettingsTypes.obj(),
              as_jint(iconId), message.obj(), primaryButtonText.obj(), secondaryButtonText.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace permissions

#endif  // org_chromium_components_permissions_PermissionDialogDelegate_JNI
