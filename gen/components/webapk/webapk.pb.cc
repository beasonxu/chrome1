// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webapk.proto

#include "webapk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace webapk {
PROTOBUF_CONSTEXPR WebApkResponse::WebApkResponse(
    ::_pbi::ConstantInitialized)
  : package_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , relax_updates_(false){}
struct WebApkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebApkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebApkResponseDefaultTypeInternal() {}
  union {
    WebApkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebApkResponseDefaultTypeInternal _WebApkResponse_default_instance_;
PROTOBUF_CONSTEXPR WebApk::WebApk(
    ::_pbi::ConstantInitialized)
  : update_reasons_()
  , package_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , manifest_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , requester_application_package_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , requester_application_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , android_abi_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , android_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , app_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , manifest_(nullptr)
  , stale_manifest_(false)
  , app_identity_update_supported_(false){}
struct WebApkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebApkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebApkDefaultTypeInternal() {}
  union {
    WebApk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebApkDefaultTypeInternal _WebApk_default_instance_;
PROTOBUF_CONSTEXPR WebAppManifest::WebAppManifest(
    ::_pbi::ConstantInitialized)
  : scopes_()
  , icons_()
  , share_targets_()
  , shortcuts_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , short_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , start_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , orientation_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , display_mode_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , theme_color_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , background_color_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WebAppManifestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebAppManifestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebAppManifestDefaultTypeInternal() {}
  union {
    WebAppManifest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebAppManifestDefaultTypeInternal _WebAppManifest_default_instance_;
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized)
  : purposes_()
  , usages_()
  , src_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR ShareTargetParamsFile::ShareTargetParamsFile(
    ::_pbi::ConstantInitialized)
  : accept_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ShareTargetParamsFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareTargetParamsFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareTargetParamsFileDefaultTypeInternal() {}
  union {
    ShareTargetParamsFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareTargetParamsFileDefaultTypeInternal _ShareTargetParamsFile_default_instance_;
PROTOBUF_CONSTEXPR ShareTargetParams::ShareTargetParams(
    ::_pbi::ConstantInitialized)
  : files_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ShareTargetParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareTargetParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareTargetParamsDefaultTypeInternal() {}
  union {
    ShareTargetParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareTargetParamsDefaultTypeInternal _ShareTargetParams_default_instance_;
PROTOBUF_CONSTEXPR ShareTarget::ShareTarget(
    ::_pbi::ConstantInitialized)
  : action_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , method_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , enctype_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , params_(nullptr){}
struct ShareTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareTargetDefaultTypeInternal() {}
  union {
    ShareTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareTargetDefaultTypeInternal _ShareTarget_default_instance_;
PROTOBUF_CONSTEXPR ShortcutItem::ShortcutItem(
    ::_pbi::ConstantInitialized)
  : icons_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , short_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ShortcutItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShortcutItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShortcutItemDefaultTypeInternal() {}
  union {
    ShortcutItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShortcutItemDefaultTypeInternal _ShortcutItem_default_instance_;
}  // namespace webapk
namespace webapk {
bool WebApk_UpdateReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WebApk_UpdateReason_strings[16] = {};

static const char WebApk_UpdateReason_names[] =
  "BACKGROUND_COLOR_DIFFERS"
  "DISPLAY_MODE_DIFFERS"
  "MANUALLY_TRIGGERED"
  "NAME_DIFFERS"
  "NONE"
  "OLD_SHELL_APK"
  "ORIENTATION_DIFFERS"
  "PRIMARY_ICON_HASH_DIFFERS"
  "PRIMARY_ICON_MASKABLE_DIFFERS"
  "SCOPE_DIFFERS"
  "SHORTCUTS_DIFFER"
  "SHORT_NAME_DIFFERS"
  "SPLASH_ICON_HASH_DIFFERS"
  "START_URL_DIFFERS"
  "THEME_COLOR_DIFFERS"
  "WEB_SHARE_TARGET_DIFFERS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WebApk_UpdateReason_entries[] = {
  { {WebApk_UpdateReason_names + 0, 24}, 9 },
  { {WebApk_UpdateReason_names + 24, 20}, 12 },
  { {WebApk_UpdateReason_names + 44, 18}, 14 },
  { {WebApk_UpdateReason_names + 62, 12}, 8 },
  { {WebApk_UpdateReason_names + 74, 4}, 1 },
  { {WebApk_UpdateReason_names + 78, 13}, 2 },
  { {WebApk_UpdateReason_names + 91, 19}, 11 },
  { {WebApk_UpdateReason_names + 110, 25}, 3 },
  { {WebApk_UpdateReason_names + 135, 29}, 15 },
  { {WebApk_UpdateReason_names + 164, 13}, 5 },
  { {WebApk_UpdateReason_names + 177, 16}, 16 },
  { {WebApk_UpdateReason_names + 193, 18}, 7 },
  { {WebApk_UpdateReason_names + 211, 24}, 17 },
  { {WebApk_UpdateReason_names + 235, 17}, 6 },
  { {WebApk_UpdateReason_names + 252, 19}, 10 },
  { {WebApk_UpdateReason_names + 271, 24}, 13 },
};

static const int WebApk_UpdateReason_entries_by_number[] = {
  4, // 1 -> NONE
  5, // 2 -> OLD_SHELL_APK
  7, // 3 -> PRIMARY_ICON_HASH_DIFFERS
  9, // 5 -> SCOPE_DIFFERS
  13, // 6 -> START_URL_DIFFERS
  11, // 7 -> SHORT_NAME_DIFFERS
  3, // 8 -> NAME_DIFFERS
  0, // 9 -> BACKGROUND_COLOR_DIFFERS
  14, // 10 -> THEME_COLOR_DIFFERS
  6, // 11 -> ORIENTATION_DIFFERS
  1, // 12 -> DISPLAY_MODE_DIFFERS
  15, // 13 -> WEB_SHARE_TARGET_DIFFERS
  2, // 14 -> MANUALLY_TRIGGERED
  8, // 15 -> PRIMARY_ICON_MASKABLE_DIFFERS
  10, // 16 -> SHORTCUTS_DIFFER
  12, // 17 -> SPLASH_ICON_HASH_DIFFERS
};

const std::string& WebApk_UpdateReason_Name(
    WebApk_UpdateReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WebApk_UpdateReason_entries,
          WebApk_UpdateReason_entries_by_number,
          16, WebApk_UpdateReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WebApk_UpdateReason_entries,
      WebApk_UpdateReason_entries_by_number,
      16, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WebApk_UpdateReason_strings[idx].get();
}
bool WebApk_UpdateReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebApk_UpdateReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WebApk_UpdateReason_entries, 16, name, &int_value);
  if (success) {
    *value = static_cast<WebApk_UpdateReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebApk_UpdateReason WebApk::NONE;
constexpr WebApk_UpdateReason WebApk::OLD_SHELL_APK;
constexpr WebApk_UpdateReason WebApk::PRIMARY_ICON_HASH_DIFFERS;
constexpr WebApk_UpdateReason WebApk::SCOPE_DIFFERS;
constexpr WebApk_UpdateReason WebApk::START_URL_DIFFERS;
constexpr WebApk_UpdateReason WebApk::SHORT_NAME_DIFFERS;
constexpr WebApk_UpdateReason WebApk::NAME_DIFFERS;
constexpr WebApk_UpdateReason WebApk::BACKGROUND_COLOR_DIFFERS;
constexpr WebApk_UpdateReason WebApk::THEME_COLOR_DIFFERS;
constexpr WebApk_UpdateReason WebApk::ORIENTATION_DIFFERS;
constexpr WebApk_UpdateReason WebApk::DISPLAY_MODE_DIFFERS;
constexpr WebApk_UpdateReason WebApk::WEB_SHARE_TARGET_DIFFERS;
constexpr WebApk_UpdateReason WebApk::MANUALLY_TRIGGERED;
constexpr WebApk_UpdateReason WebApk::PRIMARY_ICON_MASKABLE_DIFFERS;
constexpr WebApk_UpdateReason WebApk::SHORTCUTS_DIFFER;
constexpr WebApk_UpdateReason WebApk::SPLASH_ICON_HASH_DIFFERS;
constexpr WebApk_UpdateReason WebApk::UpdateReason_MIN;
constexpr WebApk_UpdateReason WebApk::UpdateReason_MAX;
constexpr int WebApk::UpdateReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Image_Usage_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Image_Usage_strings[3] = {};

static const char Image_Usage_names[] =
  "BADGE_ICON"
  "PRIMARY_ICON"
  "SPLASH_ICON";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Image_Usage_entries[] = {
  { {Image_Usage_names + 0, 10}, 2 },
  { {Image_Usage_names + 10, 12}, 1 },
  { {Image_Usage_names + 22, 11}, 3 },
};

static const int Image_Usage_entries_by_number[] = {
  1, // 1 -> PRIMARY_ICON
  0, // 2 -> BADGE_ICON
  2, // 3 -> SPLASH_ICON
};

const std::string& Image_Usage_Name(
    Image_Usage value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Image_Usage_entries,
          Image_Usage_entries_by_number,
          3, Image_Usage_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Image_Usage_entries,
      Image_Usage_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Image_Usage_strings[idx].get();
}
bool Image_Usage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Image_Usage* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Image_Usage_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Image_Usage>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Image_Usage Image::PRIMARY_ICON;
constexpr Image_Usage Image::BADGE_ICON;
constexpr Image_Usage Image::SPLASH_ICON;
constexpr Image_Usage Image::Usage_MIN;
constexpr Image_Usage Image::Usage_MAX;
constexpr int Image::Usage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Image_Purpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Image_Purpose_strings[3] = {};

static const char Image_Purpose_names[] =
  "ANY"
  "MASKABLE"
  "PURPOSE_UNDEFINED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Image_Purpose_entries[] = {
  { {Image_Purpose_names + 0, 3}, 1 },
  { {Image_Purpose_names + 3, 8}, 3 },
  { {Image_Purpose_names + 11, 17}, 0 },
};

static const int Image_Purpose_entries_by_number[] = {
  2, // 0 -> PURPOSE_UNDEFINED
  0, // 1 -> ANY
  1, // 3 -> MASKABLE
};

const std::string& Image_Purpose_Name(
    Image_Purpose value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Image_Purpose_entries,
          Image_Purpose_entries_by_number,
          3, Image_Purpose_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Image_Purpose_entries,
      Image_Purpose_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Image_Purpose_strings[idx].get();
}
bool Image_Purpose_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Image_Purpose* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Image_Purpose_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Image_Purpose>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Image_Purpose Image::PURPOSE_UNDEFINED;
constexpr Image_Purpose Image::ANY;
constexpr Image_Purpose Image::MASKABLE;
constexpr Image_Purpose Image::Purpose_MIN;
constexpr Image_Purpose Image::Purpose_MAX;
constexpr int Image::Purpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WebApkResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<WebApkResponse>()._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relax_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WebApkResponse::WebApkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:webapk.WebApkResponse)
}
WebApkResponse::WebApkResponse(const WebApkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    package_name_.Set(from._internal_package_name(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  relax_updates_ = from.relax_updates_;
  // @@protoc_insertion_point(copy_constructor:webapk.WebApkResponse)
}

inline void WebApkResponse::SharedCtor() {
package_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
relax_updates_ = false;
}

WebApkResponse::~WebApkResponse() {
  // @@protoc_insertion_point(destructor:webapk.WebApkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebApkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  package_name_.Destroy();
  version_.Destroy();
  token_.Destroy();
}

void WebApkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebApkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:webapk.WebApkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      package_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      token_.ClearNonDefaultToEmpty();
    }
  }
  relax_updates_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebApkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool relax_updates = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_relax_updates(&has_bits);
          relax_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebApkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webapk.WebApkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional string token = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  // optional bool relax_updates = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_relax_updates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webapk.WebApkResponse)
  return target;
}

size_t WebApkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webapk.WebApkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string package_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package_name());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string token = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional bool relax_updates = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebApkResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebApkResponse*>(
      &from));
}

void WebApkResponse::MergeFrom(const WebApkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webapk.WebApkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000008u) {
      relax_updates_ = from.relax_updates_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebApkResponse::CopyFrom(const WebApkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webapk.WebApkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebApkResponse::IsInitialized() const {
  return true;
}

void WebApkResponse::InternalSwap(WebApkResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &package_name_, lhs_arena,
      &other->package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  swap(relax_updates_, other->relax_updates_);
}

std::string WebApkResponse::GetTypeName() const {
  return "webapk.WebApkResponse";
}


// ===================================================================

class WebApk::_Internal {
 public:
  using HasBits = decltype(std::declval<WebApk>()._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manifest_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requester_application_package(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_requester_application_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::webapk::WebAppManifest& manifest(const WebApk* msg);
  static void set_has_manifest(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_android_abi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stale_manifest(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_android_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_app_identity_update_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_app_key(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::webapk::WebAppManifest&
WebApk::_Internal::manifest(const WebApk* msg) {
  return *msg->manifest_;
}
WebApk::WebApk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  update_reasons_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:webapk.WebApk)
}
WebApk::WebApk(const WebApk& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      update_reasons_(from.update_reasons_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    package_name_.Set(from._internal_package_name(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  manifest_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manifest_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manifest_url()) {
    manifest_url_.Set(from._internal_manifest_url(), 
      GetArenaForAllocation());
  }
  requester_application_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    requester_application_package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_requester_application_package()) {
    requester_application_package_.Set(from._internal_requester_application_package(), 
      GetArenaForAllocation());
  }
  requester_application_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    requester_application_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_requester_application_version()) {
    requester_application_version_.Set(from._internal_requester_application_version(), 
      GetArenaForAllocation());
  }
  android_abi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    android_abi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_android_abi()) {
    android_abi_.Set(from._internal_android_abi(), 
      GetArenaForAllocation());
  }
  android_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    android_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_android_version()) {
    android_version_.Set(from._internal_android_version(), 
      GetArenaForAllocation());
  }
  app_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_key()) {
    app_key_.Set(from._internal_app_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_manifest()) {
    manifest_ = new ::webapk::WebAppManifest(*from.manifest_);
  } else {
    manifest_ = nullptr;
  }
  ::memcpy(&stale_manifest_, &from.stale_manifest_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_identity_update_supported_) -
    reinterpret_cast<char*>(&stale_manifest_)) + sizeof(app_identity_update_supported_));
  // @@protoc_insertion_point(copy_constructor:webapk.WebApk)
}

inline void WebApk::SharedCtor() {
package_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manifest_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manifest_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
requester_application_package_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  requester_application_package_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
requester_application_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  requester_application_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
android_abi_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  android_abi_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
android_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  android_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&manifest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_identity_update_supported_) -
    reinterpret_cast<char*>(&manifest_)) + sizeof(app_identity_update_supported_));
}

WebApk::~WebApk() {
  // @@protoc_insertion_point(destructor:webapk.WebApk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebApk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  package_name_.Destroy();
  version_.Destroy();
  manifest_url_.Destroy();
  requester_application_package_.Destroy();
  requester_application_version_.Destroy();
  android_abi_.Destroy();
  android_version_.Destroy();
  app_key_.Destroy();
  if (this != internal_default_instance()) delete manifest_;
}

void WebApk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebApk::Clear() {
// @@protoc_insertion_point(message_clear_start:webapk.WebApk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_reasons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      package_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      manifest_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      requester_application_package_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      requester_application_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      android_abi_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      android_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      app_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(manifest_ != nullptr);
    manifest_->Clear();
  }
  ::memset(&stale_manifest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_identity_update_supported_) -
      reinterpret_cast<char*>(&stale_manifest_)) + sizeof(app_identity_update_supported_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebApk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string manifest_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_manifest_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string requester_application_package = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_requester_application_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string requester_application_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_requester_application_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .webapk.WebAppManifest manifest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_manifest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string android_abi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_android_abi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stale_manifest = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_stale_manifest(&has_bits);
          stale_manifest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .webapk.WebApk.UpdateReason update_reasons = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::webapk::WebApk_UpdateReason_IsValid(val))) {
              _internal_add_update_reasons(static_cast<::webapk::WebApk_UpdateReason>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_update_reasons(), ptr, ctx, ::webapk::WebApk_UpdateReason_IsValid, &_internal_metadata_, 11);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string android_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_android_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool app_identity_update_supported = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_app_identity_update_supported(&has_bits);
          app_identity_update_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_key = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_app_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebApk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webapk.WebApk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional string manifest_url = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_manifest_url(), target);
  }

  // optional string requester_application_package = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_requester_application_package(), target);
  }

  // optional string requester_application_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_requester_application_version(), target);
  }

  // optional .webapk.WebAppManifest manifest = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::manifest(this),
        _Internal::manifest(this).GetCachedSize(), target, stream);
  }

  // optional string android_abi = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_android_abi(), target);
  }

  // optional bool stale_manifest = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_stale_manifest(), target);
  }

  // repeated .webapk.WebApk.UpdateReason update_reasons = 11;
  for (int i = 0, n = this->_internal_update_reasons_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_update_reasons(i), target);
  }

  // optional string android_version = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_android_version(), target);
  }

  // optional bool app_identity_update_supported = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_app_identity_update_supported(), target);
  }

  // optional string app_key = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_app_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webapk.WebApk)
  return target;
}

size_t WebApk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webapk.WebApk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webapk.WebApk.UpdateReason update_reasons = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_update_reasons_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_update_reasons(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string package_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package_name());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string manifest_url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manifest_url());
    }

    // optional string requester_application_package = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requester_application_package());
    }

    // optional string requester_application_version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requester_application_version());
    }

    // optional string android_abi = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_android_abi());
    }

    // optional string android_version = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_android_version());
    }

    // optional string app_key = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_key());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .webapk.WebAppManifest manifest = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *manifest_);
    }

    // optional bool stale_manifest = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool app_identity_update_supported = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebApk::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebApk*>(
      &from));
}

void WebApk::MergeFrom(const WebApk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webapk.WebApk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  update_reasons_.MergeFrom(from.update_reasons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_manifest_url(from._internal_manifest_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_requester_application_package(from._internal_requester_application_package());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_requester_application_version(from._internal_requester_application_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_android_abi(from._internal_android_abi());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_android_version(from._internal_android_version());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_app_key(from._internal_app_key());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_manifest()->::webapk::WebAppManifest::MergeFrom(from._internal_manifest());
    }
    if (cached_has_bits & 0x00000200u) {
      stale_manifest_ = from.stale_manifest_;
    }
    if (cached_has_bits & 0x00000400u) {
      app_identity_update_supported_ = from.app_identity_update_supported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebApk::CopyFrom(const WebApk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webapk.WebApk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebApk::IsInitialized() const {
  return true;
}

void WebApk::InternalSwap(WebApk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  update_reasons_.InternalSwap(&other->update_reasons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &package_name_, lhs_arena,
      &other->package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &manifest_url_, lhs_arena,
      &other->manifest_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &requester_application_package_, lhs_arena,
      &other->requester_application_package_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &requester_application_version_, lhs_arena,
      &other->requester_application_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &android_abi_, lhs_arena,
      &other->android_abi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &android_version_, lhs_arena,
      &other->android_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_key_, lhs_arena,
      &other->app_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebApk, app_identity_update_supported_)
      + sizeof(WebApk::app_identity_update_supported_)
      - PROTOBUF_FIELD_OFFSET(WebApk, manifest_)>(
          reinterpret_cast<char*>(&manifest_),
          reinterpret_cast<char*>(&other->manifest_));
}

std::string WebApk::GetTypeName() const {
  return "webapk.WebApk";
}


// ===================================================================

class WebAppManifest::_Internal {
 public:
  using HasBits = decltype(std::declval<WebAppManifest>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_display_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_theme_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

WebAppManifest::WebAppManifest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  scopes_(arena),
  icons_(arena),
  share_targets_(arena),
  shortcuts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:webapk.WebAppManifest)
}
WebAppManifest::WebAppManifest(const WebAppManifest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      scopes_(from.scopes_),
      icons_(from.icons_),
      share_targets_(from.share_targets_),
      shortcuts_(from.shortcuts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_short_name()) {
    short_name_.Set(from._internal_short_name(), 
      GetArenaForAllocation());
  }
  start_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_url()) {
    start_url_.Set(from._internal_start_url(), 
      GetArenaForAllocation());
  }
  orientation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    orientation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_orientation()) {
    orientation_.Set(from._internal_orientation(), 
      GetArenaForAllocation());
  }
  display_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_mode()) {
    display_mode_.Set(from._internal_display_mode(), 
      GetArenaForAllocation());
  }
  theme_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    theme_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_theme_color()) {
    theme_color_.Set(from._internal_theme_color(), 
      GetArenaForAllocation());
  }
  background_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    background_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_background_color()) {
    background_color_.Set(from._internal_background_color(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:webapk.WebAppManifest)
}

inline void WebAppManifest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
short_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  short_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
orientation_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  orientation_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_mode_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_mode_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
theme_color_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  theme_color_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
background_color_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  background_color_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WebAppManifest::~WebAppManifest() {
  // @@protoc_insertion_point(destructor:webapk.WebAppManifest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebAppManifest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  short_name_.Destroy();
  start_url_.Destroy();
  orientation_.Destroy();
  display_mode_.Destroy();
  theme_color_.Destroy();
  background_color_.Destroy();
  id_.Destroy();
}

void WebAppManifest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebAppManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:webapk.WebAppManifest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  icons_.Clear();
  share_targets_.Clear();
  shortcuts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      short_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      start_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      display_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      theme_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      background_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebAppManifest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string short_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_short_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string start_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_start_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .webapk.Image icons = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_icons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string orientation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_orientation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_display_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string theme_color = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_theme_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string background_color = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_background_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .webapk.ShareTarget share_targets = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_share_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .webapk.ShortcutItem shortcuts = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_shortcuts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebAppManifest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webapk.WebAppManifest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string short_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_short_name(), target);
  }

  // optional string start_url = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_start_url(), target);
  }

  // repeated string scopes = 5;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    target = stream->WriteString(5, s, target);
  }

  // repeated .webapk.Image icons = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_icons_size()); i < n; i++) {
    const auto& repfield = this->_internal_icons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string orientation = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_orientation(), target);
  }

  // optional string display_mode = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_display_mode(), target);
  }

  // optional string theme_color = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_theme_color(), target);
  }

  // optional string background_color = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_background_color(), target);
  }

  // repeated .webapk.ShareTarget share_targets = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_share_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_share_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .webapk.ShortcutItem shortcuts = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shortcuts_size()); i < n; i++) {
    const auto& repfield = this->_internal_shortcuts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string id = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webapk.WebAppManifest)
  return target;
}

size_t WebAppManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webapk.WebAppManifest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated .webapk.Image icons = 6;
  total_size += 1UL * this->_internal_icons_size();
  for (const auto& msg : this->icons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webapk.ShareTarget share_targets = 17;
  total_size += 2UL * this->_internal_share_targets_size();
  for (const auto& msg : this->share_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webapk.ShortcutItem shortcuts = 18;
  total_size += 2UL * this->_internal_shortcuts_size();
  for (const auto& msg : this->shortcuts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string short_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional string start_url = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_url());
    }

    // optional string orientation = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_orientation());
    }

    // optional string display_mode = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_mode());
    }

    // optional string theme_color = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_theme_color());
    }

    // optional string background_color = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_background_color());
    }

    // optional string id = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebAppManifest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebAppManifest*>(
      &from));
}

void WebAppManifest::MergeFrom(const WebAppManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webapk.WebAppManifest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  icons_.MergeFrom(from.icons_);
  share_targets_.MergeFrom(from.share_targets_);
  shortcuts_.MergeFrom(from.shortcuts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_short_name(from._internal_short_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_start_url(from._internal_start_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_orientation(from._internal_orientation());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_display_mode(from._internal_display_mode());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_theme_color(from._internal_theme_color());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_background_color(from._internal_background_color());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_id(from._internal_id());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebAppManifest::CopyFrom(const WebAppManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webapk.WebAppManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebAppManifest::IsInitialized() const {
  return true;
}

void WebAppManifest::InternalSwap(WebAppManifest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scopes_.InternalSwap(&other->scopes_);
  icons_.InternalSwap(&other->icons_);
  share_targets_.InternalSwap(&other->share_targets_);
  shortcuts_.InternalSwap(&other->shortcuts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &short_name_, lhs_arena,
      &other->short_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &start_url_, lhs_arena,
      &other->start_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &orientation_, lhs_arena,
      &other->orientation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &display_mode_, lhs_arena,
      &other->display_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &theme_color_, lhs_arena,
      &other->theme_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &background_color_, lhs_arena,
      &other->background_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

std::string WebAppManifest::GetTypeName() const {
  return "webapk.WebAppManifest";
}


// ===================================================================

class Image::_Internal {
 public:
  using HasBits = decltype(std::declval<Image>()._has_bits_);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  purposes_(arena),
  usages_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:webapk.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      purposes_(from.purposes_),
      usages_(from.usages_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_src()) {
    src_.Set(from._internal_src(), 
      GetArenaForAllocation());
  }
  hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hash()) {
    hash_.Set(from._internal_hash(), 
      GetArenaForAllocation());
  }
  image_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_data()) {
    image_data_.Set(from._internal_image_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:webapk.Image)
}

inline void Image::SharedCtor() {
src_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  src_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:webapk.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  src_.Destroy();
  hash_.Destroy();
  image_data_.Destroy();
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:webapk.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purposes_.Clear();
  usages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      image_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes image_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_image_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .webapk.Image.Purpose purposes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::webapk::Image_Purpose_IsValid(val))) {
              _internal_add_purposes(static_cast<::webapk::Image_Purpose>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_purposes(), ptr, ctx, ::webapk::Image_Purpose_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .webapk.Image.Usage usages = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::webapk::Image_Usage_IsValid(val))) {
              _internal_add_usages(static_cast<::webapk::Image_Usage>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_usages(), ptr, ctx, ::webapk::Image_Usage_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webapk.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // optional string hash = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hash(), target);
  }

  // optional bytes image_data = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_image_data(), target);
  }

  // repeated .webapk.Image.Purpose purposes = 7;
  for (int i = 0, n = this->_internal_purposes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_purposes(i), target);
  }

  // repeated .webapk.Image.Usage usages = 8;
  for (int i = 0, n = this->_internal_usages_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_usages(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webapk.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webapk.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webapk.Image.Purpose purposes = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_purposes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_purposes(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .webapk.Image.Usage usages = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_usages_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_usages(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string src = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src());
    }

    // optional string hash = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash());
    }

    // optional bytes image_data = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Image*>(
      &from));
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webapk.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  purposes_.MergeFrom(from.purposes_);
  usages_.MergeFrom(from.usages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_src(from._internal_src());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_image_data(from._internal_image_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webapk.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  purposes_.InternalSwap(&other->purposes_);
  usages_.InternalSwap(&other->usages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &src_, lhs_arena,
      &other->src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_data_, lhs_arena,
      &other->image_data_, rhs_arena
  );
}

std::string Image::GetTypeName() const {
  return "webapk.Image";
}


// ===================================================================

class ShareTargetParamsFile::_Internal {
 public:
  using HasBits = decltype(std::declval<ShareTargetParamsFile>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShareTargetParamsFile::ShareTargetParamsFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  accept_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:webapk.ShareTargetParamsFile)
}
ShareTargetParamsFile::ShareTargetParamsFile(const ShareTargetParamsFile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      accept_(from.accept_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:webapk.ShareTargetParamsFile)
}

inline void ShareTargetParamsFile::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShareTargetParamsFile::~ShareTargetParamsFile() {
  // @@protoc_insertion_point(destructor:webapk.ShareTargetParamsFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareTargetParamsFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ShareTargetParamsFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShareTargetParamsFile::Clear() {
// @@protoc_insertion_point(message_clear_start:webapk.ShareTargetParamsFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accept_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShareTargetParamsFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accept();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShareTargetParamsFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webapk.ShareTargetParamsFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string accept = 2;
  for (int i = 0, n = this->_internal_accept_size(); i < n; i++) {
    const auto& s = this->_internal_accept(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webapk.ShareTargetParamsFile)
  return target;
}

size_t ShareTargetParamsFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webapk.ShareTargetParamsFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string accept = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(accept_.size());
  for (int i = 0, n = accept_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      accept_.Get(i));
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareTargetParamsFile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShareTargetParamsFile*>(
      &from));
}

void ShareTargetParamsFile::MergeFrom(const ShareTargetParamsFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webapk.ShareTargetParamsFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  accept_.MergeFrom(from.accept_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShareTargetParamsFile::CopyFrom(const ShareTargetParamsFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webapk.ShareTargetParamsFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareTargetParamsFile::IsInitialized() const {
  return true;
}

void ShareTargetParamsFile::InternalSwap(ShareTargetParamsFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accept_.InternalSwap(&other->accept_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

std::string ShareTargetParamsFile::GetTypeName() const {
  return "webapk.ShareTargetParamsFile";
}


// ===================================================================

class ShareTargetParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ShareTargetParams>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ShareTargetParams::ShareTargetParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  files_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:webapk.ShareTargetParams)
}
ShareTargetParams::ShareTargetParams(const ShareTargetParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:webapk.ShareTargetParams)
}

inline void ShareTargetParams::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShareTargetParams::~ShareTargetParams() {
  // @@protoc_insertion_point(destructor:webapk.ShareTargetParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareTargetParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  text_.Destroy();
  url_.Destroy();
}

void ShareTargetParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShareTargetParams::Clear() {
// @@protoc_insertion_point(message_clear_start:webapk.ShareTargetParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShareTargetParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .webapk.ShareTargetParamsFile files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShareTargetParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webapk.ShareTargetParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // repeated .webapk.ShareTargetParamsFile files = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webapk.ShareTargetParams)
  return target;
}

size_t ShareTargetParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webapk.ShareTargetParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webapk.ShareTargetParamsFile files = 4;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareTargetParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShareTargetParams*>(
      &from));
}

void ShareTargetParams::MergeFrom(const ShareTargetParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webapk.ShareTargetParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_url(from._internal_url());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShareTargetParams::CopyFrom(const ShareTargetParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webapk.ShareTargetParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareTargetParams::IsInitialized() const {
  return true;
}

void ShareTargetParams::InternalSwap(ShareTargetParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string ShareTargetParams::GetTypeName() const {
  return "webapk.ShareTargetParams";
}


// ===================================================================

class ShareTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<ShareTarget>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webapk::ShareTargetParams& params(const ShareTarget* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enctype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::webapk::ShareTargetParams&
ShareTarget::_Internal::params(const ShareTarget* msg) {
  return *msg->params_;
}
ShareTarget::ShareTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:webapk.ShareTarget)
}
ShareTarget::ShareTarget(const ShareTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action()) {
    action_.Set(from._internal_action(), 
      GetArenaForAllocation());
  }
  method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    method_.Set(from._internal_method(), 
      GetArenaForAllocation());
  }
  enctype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    enctype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enctype()) {
    enctype_.Set(from._internal_enctype(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    params_ = new ::webapk::ShareTargetParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:webapk.ShareTarget)
}

inline void ShareTarget::SharedCtor() {
action_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enctype_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  enctype_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
params_ = nullptr;
}

ShareTarget::~ShareTarget() {
  // @@protoc_insertion_point(destructor:webapk.ShareTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.Destroy();
  method_.Destroy();
  enctype_.Destroy();
  if (this != internal_default_instance()) delete params_;
}

void ShareTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShareTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:webapk.ShareTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      enctype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(params_ != nullptr);
      params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShareTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .webapk.ShareTargetParams params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string enctype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_enctype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShareTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webapk.ShareTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string action = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // optional .webapk.ShareTargetParams params = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // optional string method = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method(), target);
  }

  // optional string enctype = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_enctype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webapk.ShareTarget)
  return target;
}

size_t ShareTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webapk.ShareTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string action = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // optional string method = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method());
    }

    // optional string enctype = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enctype());
    }

    // optional .webapk.ShareTargetParams params = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareTarget::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShareTarget*>(
      &from));
}

void ShareTarget::MergeFrom(const ShareTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webapk.ShareTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_enctype(from._internal_enctype());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_params()->::webapk::ShareTargetParams::MergeFrom(from._internal_params());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShareTarget::CopyFrom(const ShareTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webapk.ShareTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareTarget::IsInitialized() const {
  return true;
}

void ShareTarget::InternalSwap(ShareTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &method_, lhs_arena,
      &other->method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &enctype_, lhs_arena,
      &other->enctype_, rhs_arena
  );
  swap(params_, other->params_);
}

std::string ShareTarget::GetTypeName() const {
  return "webapk.ShareTarget";
}


// ===================================================================

class ShortcutItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ShortcutItem>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ShortcutItem::ShortcutItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  icons_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:webapk.ShortcutItem)
}
ShortcutItem::ShortcutItem(const ShortcutItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      icons_(from.icons_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_short_name()) {
    short_name_.Set(from._internal_short_name(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:webapk.ShortcutItem)
}

inline void ShortcutItem::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
short_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  short_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShortcutItem::~ShortcutItem() {
  // @@protoc_insertion_point(destructor:webapk.ShortcutItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShortcutItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  short_name_.Destroy();
  url_.Destroy();
}

void ShortcutItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShortcutItem::Clear() {
// @@protoc_insertion_point(message_clear_start:webapk.ShortcutItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      short_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShortcutItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string short_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_short_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .webapk.Image icons = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_icons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShortcutItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webapk.ShortcutItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string short_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_short_name(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // repeated .webapk.Image icons = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_icons_size()); i < n; i++) {
    const auto& repfield = this->_internal_icons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webapk.ShortcutItem)
  return target;
}

size_t ShortcutItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webapk.ShortcutItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webapk.Image icons = 4;
  total_size += 1UL * this->_internal_icons_size();
  for (const auto& msg : this->icons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string short_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShortcutItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShortcutItem*>(
      &from));
}

void ShortcutItem::MergeFrom(const ShortcutItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webapk.ShortcutItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  icons_.MergeFrom(from.icons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_short_name(from._internal_short_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_url(from._internal_url());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShortcutItem::CopyFrom(const ShortcutItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webapk.ShortcutItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortcutItem::IsInitialized() const {
  return true;
}

void ShortcutItem::InternalSwap(ShortcutItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  icons_.InternalSwap(&other->icons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &short_name_, lhs_arena,
      &other->short_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string ShortcutItem::GetTypeName() const {
  return "webapk.ShortcutItem";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace webapk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::webapk::WebApkResponse*
Arena::CreateMaybeMessage< ::webapk::WebApkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webapk::WebApkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::webapk::WebApk*
Arena::CreateMaybeMessage< ::webapk::WebApk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webapk::WebApk >(arena);
}
template<> PROTOBUF_NOINLINE ::webapk::WebAppManifest*
Arena::CreateMaybeMessage< ::webapk::WebAppManifest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webapk::WebAppManifest >(arena);
}
template<> PROTOBUF_NOINLINE ::webapk::Image*
Arena::CreateMaybeMessage< ::webapk::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webapk::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::webapk::ShareTargetParamsFile*
Arena::CreateMaybeMessage< ::webapk::ShareTargetParamsFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webapk::ShareTargetParamsFile >(arena);
}
template<> PROTOBUF_NOINLINE ::webapk::ShareTargetParams*
Arena::CreateMaybeMessage< ::webapk::ShareTargetParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webapk::ShareTargetParams >(arena);
}
template<> PROTOBUF_NOINLINE ::webapk::ShareTarget*
Arena::CreateMaybeMessage< ::webapk::ShareTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webapk::ShareTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::webapk::ShortcutItem*
Arena::CreateMaybeMessage< ::webapk::ShortcutItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webapk::ShortcutItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
