// components/translate/content/common/translate.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_TRANSLATE_CONTENT_COMMON_TRANSLATE_MOJOM_TEST_UTILS_H_
#define COMPONENTS_TRANSLATE_CONTENT_COMMON_TRANSLATE_MOJOM_TEST_UTILS_H_

#include "components/translate/content/common/translate.mojom.h"


namespace translate {
namespace mojom {


class  TranslateAgentInterceptorForTesting : public TranslateAgent {
  virtual TranslateAgent* GetForwardingInterface() = 0;
  void GetWebLanguageDetectionDetails(GetWebLanguageDetectionDetailsCallback callback) override;
  void TranslateFrame(const std::string& translate_script, const std::string& source_lang, const std::string& target_lang, TranslateFrameCallback callback) override;
  void RevertTranslation() override;
};
class  TranslateAgentAsyncWaiter {
 public:
  explicit TranslateAgentAsyncWaiter(TranslateAgent* proxy);

  TranslateAgentAsyncWaiter(const TranslateAgentAsyncWaiter&) = delete;
  TranslateAgentAsyncWaiter& operator=(const TranslateAgentAsyncWaiter&) = delete;

  ~TranslateAgentAsyncWaiter();
  void GetWebLanguageDetectionDetails(
      std::string* out_content_meta_language, std::string* out_html_root_lang, ::GURL* out_url, bool* out_has_notranslate_meta);
  void TranslateFrame(
      const std::string& translate_script, const std::string& source_lang, const std::string& target_lang, bool* out_cancelled, std::string* out_original_lang, std::string* out_translated_lang, ::translate::TranslateErrors::Type* out_error);

 private:
  TranslateAgent* const proxy_;
};


class  ContentTranslateDriverInterceptorForTesting : public ContentTranslateDriver {
  virtual ContentTranslateDriver* GetForwardingInterface() = 0;
  void RegisterPage(::mojo::PendingRemote<TranslateAgent> translate_agent, const ::translate::LanguageDetectionDetails& details, bool translation_critiera_met) override;
  void GetLanguageDetectionModel(GetLanguageDetectionModelCallback callback) override;
};
class  ContentTranslateDriverAsyncWaiter {
 public:
  explicit ContentTranslateDriverAsyncWaiter(ContentTranslateDriver* proxy);

  ContentTranslateDriverAsyncWaiter(const ContentTranslateDriverAsyncWaiter&) = delete;
  ContentTranslateDriverAsyncWaiter& operator=(const ContentTranslateDriverAsyncWaiter&) = delete;

  ~ContentTranslateDriverAsyncWaiter();
  void GetLanguageDetectionModel(
      ::base::File* out_model_file);

 private:
  ContentTranslateDriver* const proxy_;
};




}  // namespace mojom
}  // namespace translate

#endif  // COMPONENTS_TRANSLATE_CONTENT_COMMON_TRANSLATE_MOJOM_TEST_UTILS_H_