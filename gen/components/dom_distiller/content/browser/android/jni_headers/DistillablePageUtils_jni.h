// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/dom_distiller/content/DistillablePageUtils

#ifndef org_chromium_components_dom_distiller_content_DistillablePageUtils_JNI
#define org_chromium_components_dom_distiller_content_DistillablePageUtils_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_dom_1distiller_content_DistillablePageUtils[];
const char kClassPath_org_chromium_components_dom_1distiller_content_DistillablePageUtils[] =
    "org/chromium/components/dom_distiller/content/DistillablePageUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_dom_1distiller_content_DistillablePageUtils_clazz(nullptr);
#ifndef org_chromium_components_dom_1distiller_content_DistillablePageUtils_clazz_defined
#define org_chromium_components_dom_1distiller_content_DistillablePageUtils_clazz_defined
inline jclass org_chromium_components_dom_1distiller_content_DistillablePageUtils_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_dom_1distiller_content_DistillablePageUtils,
      &g_org_chromium_components_dom_1distiller_content_DistillablePageUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace dom_distiller {
namespace android {

static void JNI_DistillablePageUtils_SetDelegate(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents,
    const base::android::JavaParamRef<jobject>& delegate);

JNI_GENERATOR_EXPORT void Java_J_N_MFtP575Y(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents,
    jobject delegate) {
  return JNI_DistillablePageUtils_SetDelegate(env, base::android::JavaParamRef<jobject>(env,
      webContents), base::android::JavaParamRef<jobject>(env, delegate));
}


static std::atomic<jmethodID>
    g_org_chromium_components_dom_1distiller_content_DistillablePageUtils_callOnIsPageDistillableUpdate(nullptr);
static void Java_DistillablePageUtils_callOnIsPageDistillableUpdate(JNIEnv* env, const
    base::android::JavaRef<jobject>& delegate,
    jboolean isDistillable,
    jboolean isLast,
    jboolean isMobileOptimized) {
  jclass clazz = org_chromium_components_dom_1distiller_content_DistillablePageUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_dom_1distiller_content_DistillablePageUtils_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "callOnIsPageDistillableUpdate",
"(Lorg/chromium/components/dom_distiller/content/DistillablePageUtils$PageDistillableDelegate;ZZZ)V",
&g_org_chromium_components_dom_1distiller_content_DistillablePageUtils_callOnIsPageDistillableUpdate);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, delegate.obj(), isDistillable, isLast, isMobileOptimized);
}

}  // namespace android
}  // namespace dom_distiller

#endif  // org_chromium_components_dom_distiller_content_DistillablePageUtils_JNI
