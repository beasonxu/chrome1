// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distilled_article.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_distilled_5farticle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_distilled_5farticle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "distilled_page.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_distilled_5farticle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_distilled_5farticle_2eproto {
  static const uint32_t offsets[];
};
namespace dom_distiller {
class DistilledArticleProto;
struct DistilledArticleProtoDefaultTypeInternal;
extern DistilledArticleProtoDefaultTypeInternal _DistilledArticleProto_default_instance_;
}  // namespace dom_distiller
PROTOBUF_NAMESPACE_OPEN
template<> ::dom_distiller::DistilledArticleProto* Arena::CreateMaybeMessage<::dom_distiller::DistilledArticleProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dom_distiller {

// ===================================================================

class DistilledArticleProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledArticleProto) */ {
 public:
  inline DistilledArticleProto() : DistilledArticleProto(nullptr) {}
  ~DistilledArticleProto() override;
  explicit PROTOBUF_CONSTEXPR DistilledArticleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistilledArticleProto(const DistilledArticleProto& from);
  DistilledArticleProto(DistilledArticleProto&& from) noexcept
    : DistilledArticleProto() {
    *this = ::std::move(from);
  }

  inline DistilledArticleProto& operator=(const DistilledArticleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledArticleProto& operator=(DistilledArticleProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DistilledArticleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistilledArticleProto* internal_default_instance() {
    return reinterpret_cast<const DistilledArticleProto*>(
               &_DistilledArticleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DistilledArticleProto& a, DistilledArticleProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DistilledArticleProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistilledArticleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistilledArticleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistilledArticleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DistilledArticleProto& from);
  void MergeFrom(const DistilledArticleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledArticleProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledArticleProto";
  }
  protected:
  explicit DistilledArticleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 2,
    kTitleFieldNumber = 1,
  };
  // repeated .dom_distiller.DistilledPageProto pages = 2;
  int pages_size() const;
  private:
  int _internal_pages_size() const;
  public:
  void clear_pages();
  ::dom_distiller::DistilledPageProto* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto >*
      mutable_pages();
  private:
  const ::dom_distiller::DistilledPageProto& _internal_pages(int index) const;
  ::dom_distiller::DistilledPageProto* _internal_add_pages();
  public:
  const ::dom_distiller::DistilledPageProto& pages(int index) const;
  ::dom_distiller::DistilledPageProto* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto >&
      pages() const;

  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledArticleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto > pages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  friend struct ::TableStruct_distilled_5farticle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DistilledArticleProto

// optional string title = 1;
inline bool DistilledArticleProto::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DistilledArticleProto::has_title() const {
  return _internal_has_title();
}
inline void DistilledArticleProto::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledArticleProto::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledArticleProto.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledArticleProto::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledArticleProto.title)
}
inline std::string* DistilledArticleProto::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledArticleProto.title)
  return _s;
}
inline const std::string& DistilledArticleProto::_internal_title() const {
  return title_.Get();
}
inline void DistilledArticleProto::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledArticleProto::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledArticleProto::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledArticleProto.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledArticleProto::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledArticleProto.title)
}

// repeated .dom_distiller.DistilledPageProto pages = 2;
inline int DistilledArticleProto::_internal_pages_size() const {
  return pages_.size();
}
inline int DistilledArticleProto::pages_size() const {
  return _internal_pages_size();
}
inline ::dom_distiller::DistilledPageProto* DistilledArticleProto::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledArticleProto.pages)
  return pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto >*
DistilledArticleProto::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledArticleProto.pages)
  return &pages_;
}
inline const ::dom_distiller::DistilledPageProto& DistilledArticleProto::_internal_pages(int index) const {
  return pages_.Get(index);
}
inline const ::dom_distiller::DistilledPageProto& DistilledArticleProto::pages(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledArticleProto.pages)
  return _internal_pages(index);
}
inline ::dom_distiller::DistilledPageProto* DistilledArticleProto::_internal_add_pages() {
  return pages_.Add();
}
inline ::dom_distiller::DistilledPageProto* DistilledArticleProto::add_pages() {
  ::dom_distiller::DistilledPageProto* _add = _internal_add_pages();
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledArticleProto.pages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto >&
DistilledArticleProto::pages() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledArticleProto.pages)
  return pages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_distilled_5farticle_2eproto
