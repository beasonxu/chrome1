// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distilled_page.proto

#include "distilled_page.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dom_distiller {
PROTOBUF_CONSTEXPR DistilledPageProto_Image::DistilledPageProto_Image(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DistilledPageProto_ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistilledPageProto_ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistilledPageProto_ImageDefaultTypeInternal() {}
  union {
    DistilledPageProto_Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistilledPageProto_ImageDefaultTypeInternal _DistilledPageProto_Image_default_instance_;
PROTOBUF_CONSTEXPR DistilledPageProto_DebugInfo::DistilledPageProto_DebugInfo(
    ::_pbi::ConstantInitialized)
  : log_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DistilledPageProto_DebugInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistilledPageProto_DebugInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistilledPageProto_DebugInfoDefaultTypeInternal() {}
  union {
    DistilledPageProto_DebugInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistilledPageProto_DebugInfoDefaultTypeInternal _DistilledPageProto_DebugInfo_default_instance_;
PROTOBUF_CONSTEXPR DistilledPageProto_PaginationInfo::DistilledPageProto_PaginationInfo(
    ::_pbi::ConstantInitialized)
  : next_page_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , prev_page_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , canonical_page_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DistilledPageProto_PaginationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistilledPageProto_PaginationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistilledPageProto_PaginationInfoDefaultTypeInternal() {}
  union {
    DistilledPageProto_PaginationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistilledPageProto_PaginationInfoDefaultTypeInternal _DistilledPageProto_PaginationInfo_default_instance_;
PROTOBUF_CONSTEXPR DistilledPageProto_TimingInfo::DistilledPageProto_TimingInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_(0){}
struct DistilledPageProto_TimingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistilledPageProto_TimingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistilledPageProto_TimingInfoDefaultTypeInternal() {}
  union {
    DistilledPageProto_TimingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistilledPageProto_TimingInfoDefaultTypeInternal _DistilledPageProto_TimingInfo_default_instance_;
PROTOBUF_CONSTEXPR DistilledPageProto::DistilledPageProto(
    ::_pbi::ConstantInitialized)
  : image_()
  , timing_info_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , html_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_direction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , debug_info_(nullptr)
  , pagination_info_(nullptr){}
struct DistilledPageProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistilledPageProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistilledPageProtoDefaultTypeInternal() {}
  union {
    DistilledPageProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistilledPageProtoDefaultTypeInternal _DistilledPageProto_default_instance_;
}  // namespace dom_distiller
namespace dom_distiller {

// ===================================================================

class DistilledPageProto_Image::_Internal {
 public:
  using HasBits = decltype(std::declval<DistilledPageProto_Image>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DistilledPageProto_Image::DistilledPageProto_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.DistilledPageProto.Image)
}
DistilledPageProto_Image::DistilledPageProto_Image(const DistilledPageProto_Image& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.Image)
}

inline void DistilledPageProto_Image::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DistilledPageProto_Image::~DistilledPageProto_Image() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistilledPageProto_Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  data_.Destroy();
  url_.Destroy();
}

void DistilledPageProto_Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistilledPageProto_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DistilledPageProto_Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistilledPageProto_Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.DistilledPageProto.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.DistilledPageProto.Image)
  return target;
}

size_t DistilledPageProto_Image::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.DistilledPageProto.Image)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return total_size;
}
size_t DistilledPageProto_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.Image)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistilledPageProto_Image::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DistilledPageProto_Image*>(
      &from));
}

void DistilledPageProto_Image::MergeFrom(const DistilledPageProto_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_url(from._internal_url());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DistilledPageProto_Image::CopyFrom(const DistilledPageProto_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_Image::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DistilledPageProto_Image::InternalSwap(DistilledPageProto_Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string DistilledPageProto_Image::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.Image";
}


// ===================================================================

class DistilledPageProto_DebugInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DistilledPageProto_DebugInfo>()._has_bits_);
  static void set_has_log(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DistilledPageProto_DebugInfo::DistilledPageProto_DebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.DistilledPageProto.DebugInfo)
}
DistilledPageProto_DebugInfo::DistilledPageProto_DebugInfo(const DistilledPageProto_DebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_log()) {
    log_.Set(from._internal_log(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.DebugInfo)
}

inline void DistilledPageProto_DebugInfo::SharedCtor() {
log_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  log_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DistilledPageProto_DebugInfo::~DistilledPageProto_DebugInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.DebugInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistilledPageProto_DebugInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  log_.Destroy();
}

void DistilledPageProto_DebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistilledPageProto_DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.DebugInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    log_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DistilledPageProto_DebugInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistilledPageProto_DebugInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.DistilledPageProto.DebugInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string log = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.DistilledPageProto.DebugInfo)
  return target;
}

size_t DistilledPageProto_DebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.DebugInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string log = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistilledPageProto_DebugInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DistilledPageProto_DebugInfo*>(
      &from));
}

void DistilledPageProto_DebugInfo::MergeFrom(const DistilledPageProto_DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_log()) {
    _internal_set_log(from._internal_log());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DistilledPageProto_DebugInfo::CopyFrom(const DistilledPageProto_DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_DebugInfo::IsInitialized() const {
  return true;
}

void DistilledPageProto_DebugInfo::InternalSwap(DistilledPageProto_DebugInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &log_, lhs_arena,
      &other->log_, rhs_arena
  );
}

std::string DistilledPageProto_DebugInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.DebugInfo";
}


// ===================================================================

class DistilledPageProto_PaginationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DistilledPageProto_PaginationInfo>()._has_bits_);
  static void set_has_next_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev_page(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_canonical_page(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DistilledPageProto_PaginationInfo::DistilledPageProto_PaginationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.DistilledPageProto.PaginationInfo)
}
DistilledPageProto_PaginationInfo::DistilledPageProto_PaginationInfo(const DistilledPageProto_PaginationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  next_page_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_next_page()) {
    next_page_.Set(from._internal_next_page(), 
      GetArenaForAllocation());
  }
  prev_page_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prev_page_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prev_page()) {
    prev_page_.Set(from._internal_prev_page(), 
      GetArenaForAllocation());
  }
  canonical_page_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    canonical_page_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_canonical_page()) {
    canonical_page_.Set(from._internal_canonical_page(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.PaginationInfo)
}

inline void DistilledPageProto_PaginationInfo::SharedCtor() {
next_page_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prev_page_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prev_page_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
canonical_page_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  canonical_page_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DistilledPageProto_PaginationInfo::~DistilledPageProto_PaginationInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.PaginationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistilledPageProto_PaginationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_.Destroy();
  prev_page_.Destroy();
  canonical_page_.Destroy();
}

void DistilledPageProto_PaginationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistilledPageProto_PaginationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.PaginationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      next_page_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      prev_page_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      canonical_page_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DistilledPageProto_PaginationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string next_page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_next_page();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string prev_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prev_page();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string canonical_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_canonical_page();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistilledPageProto_PaginationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.DistilledPageProto.PaginationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string next_page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_next_page(), target);
  }

  // optional string prev_page = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prev_page(), target);
  }

  // optional string canonical_page = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_canonical_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.DistilledPageProto.PaginationInfo)
  return target;
}

size_t DistilledPageProto_PaginationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.PaginationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string next_page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_next_page());
    }

    // optional string prev_page = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prev_page());
    }

    // optional string canonical_page = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_canonical_page());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistilledPageProto_PaginationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DistilledPageProto_PaginationInfo*>(
      &from));
}

void DistilledPageProto_PaginationInfo::MergeFrom(const DistilledPageProto_PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.PaginationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_next_page(from._internal_next_page());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_prev_page(from._internal_prev_page());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_canonical_page(from._internal_canonical_page());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DistilledPageProto_PaginationInfo::CopyFrom(const DistilledPageProto_PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.PaginationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_PaginationInfo::IsInitialized() const {
  return true;
}

void DistilledPageProto_PaginationInfo::InternalSwap(DistilledPageProto_PaginationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &next_page_, lhs_arena,
      &other->next_page_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &prev_page_, lhs_arena,
      &other->prev_page_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &canonical_page_, lhs_arena,
      &other->canonical_page_, rhs_arena
  );
}

std::string DistilledPageProto_PaginationInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.PaginationInfo";
}


// ===================================================================

class DistilledPageProto_TimingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DistilledPageProto_TimingInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DistilledPageProto_TimingInfo::DistilledPageProto_TimingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.DistilledPageProto.TimingInfo)
}
DistilledPageProto_TimingInfo::DistilledPageProto_TimingInfo(const DistilledPageProto_TimingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto.TimingInfo)
}

inline void DistilledPageProto_TimingInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_ = 0;
}

DistilledPageProto_TimingInfo::~DistilledPageProto_TimingInfo() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto.TimingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistilledPageProto_TimingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void DistilledPageProto_TimingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistilledPageProto_TimingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto.TimingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DistilledPageProto_TimingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistilledPageProto_TimingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.DistilledPageProto.TimingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.DistilledPageProto.TimingInfo)
  return target;
}

size_t DistilledPageProto_TimingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto.TimingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistilledPageProto_TimingInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DistilledPageProto_TimingInfo*>(
      &from));
}

void DistilledPageProto_TimingInfo::MergeFrom(const DistilledPageProto_TimingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto.TimingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DistilledPageProto_TimingInfo::CopyFrom(const DistilledPageProto_TimingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto.TimingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto_TimingInfo::IsInitialized() const {
  return true;
}

void DistilledPageProto_TimingInfo::InternalSwap(DistilledPageProto_TimingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(time_, other->time_);
}

std::string DistilledPageProto_TimingInfo::GetTypeName() const {
  return "dom_distiller.DistilledPageProto.TimingInfo";
}


// ===================================================================

class DistilledPageProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DistilledPageProto>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_html(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::dom_distiller::DistilledPageProto_DebugInfo& debug_info(const DistilledPageProto* msg);
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_text_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::dom_distiller::DistilledPageProto_PaginationInfo& pagination_info(const DistilledPageProto* msg);
  static void set_has_pagination_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::dom_distiller::DistilledPageProto_DebugInfo&
DistilledPageProto::_Internal::debug_info(const DistilledPageProto* msg) {
  return *msg->debug_info_;
}
const ::dom_distiller::DistilledPageProto_PaginationInfo&
DistilledPageProto::_Internal::pagination_info(const DistilledPageProto* msg) {
  return *msg->pagination_info_;
}
DistilledPageProto::DistilledPageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  image_(arena),
  timing_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.DistilledPageProto)
}
DistilledPageProto::DistilledPageProto(const DistilledPageProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      image_(from.image_),
      timing_info_(from.timing_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  html_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    html_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_html()) {
    html_.Set(from._internal_html(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  text_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text_direction()) {
    text_direction_.Set(from._internal_text_direction(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_debug_info()) {
    debug_info_ = new ::dom_distiller::DistilledPageProto_DebugInfo(*from.debug_info_);
  } else {
    debug_info_ = nullptr;
  }
  if (from._internal_has_pagination_info()) {
    pagination_info_ = new ::dom_distiller::DistilledPageProto_PaginationInfo(*from.pagination_info_);
  } else {
    pagination_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dom_distiller.DistilledPageProto)
}

inline void DistilledPageProto::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
html_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  html_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_direction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_direction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&debug_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_info_) -
    reinterpret_cast<char*>(&debug_info_)) + sizeof(pagination_info_));
}

DistilledPageProto::~DistilledPageProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.DistilledPageProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistilledPageProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  html_.Destroy();
  title_.Destroy();
  text_direction_.Destroy();
  if (this != internal_default_instance()) delete debug_info_;
  if (this != internal_default_instance()) delete pagination_info_;
}

void DistilledPageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistilledPageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.DistilledPageProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.Clear();
  timing_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      html_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      text_direction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(debug_info_ != nullptr);
      debug_info_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(pagination_info_ != nullptr);
      pagination_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DistilledPageProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string html = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_html();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dom_distiller.DistilledPageProto.Image image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text_direction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_text_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timing_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistilledPageProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.DistilledPageProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // required string html = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_html(), target);
  }

  // repeated .dom_distiller.DistilledPageProto.Image image = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_size()); i < n; i++) {
    const auto& repfield = this->_internal_image(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::debug_info(this),
        _Internal::debug_info(this).GetCachedSize(), target, stream);
  }

  // optional string text_direction = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_text_direction(), target);
  }

  // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::pagination_info(this),
        _Internal::pagination_info(this).GetCachedSize(), target, stream);
  }

  // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timing_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_timing_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.DistilledPageProto)
  return target;
}

size_t DistilledPageProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.DistilledPageProto)
  size_t total_size = 0;

  if (_internal_has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_html()) {
    // required string html = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_html());
  }

  return total_size;
}
size_t DistilledPageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.DistilledPageProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required string html = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_html());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dom_distiller.DistilledPageProto.Image image = 4;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
  total_size += 1UL * this->_internal_timing_info_size();
  for (const auto& msg : this->timing_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional string title = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string text_direction = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_direction());
    }

    // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_info_);
    }

    // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pagination_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistilledPageProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DistilledPageProto*>(
      &from));
}

void DistilledPageProto::MergeFrom(const DistilledPageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.DistilledPageProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  image_.MergeFrom(from.image_);
  timing_info_.MergeFrom(from.timing_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_html(from._internal_html());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_text_direction(from._internal_text_direction());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_debug_info()->::dom_distiller::DistilledPageProto_DebugInfo::MergeFrom(from._internal_debug_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_pagination_info()->::dom_distiller::DistilledPageProto_PaginationInfo::MergeFrom(from._internal_pagination_info());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DistilledPageProto::CopyFrom(const DistilledPageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.DistilledPageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistilledPageProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(image_))
    return false;
  return true;
}

void DistilledPageProto::InternalSwap(DistilledPageProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_.InternalSwap(&other->image_);
  timing_info_.InternalSwap(&other->timing_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &html_, lhs_arena,
      &other->html_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_direction_, lhs_arena,
      &other->text_direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistilledPageProto, pagination_info_)
      + sizeof(DistilledPageProto::pagination_info_)
      - PROTOBUF_FIELD_OFFSET(DistilledPageProto, debug_info_)>(
          reinterpret_cast<char*>(&debug_info_),
          reinterpret_cast<char*>(&other->debug_info_));
}

std::string DistilledPageProto::GetTypeName() const {
  return "dom_distiller.DistilledPageProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dom_distiller
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dom_distiller::DistilledPageProto_Image*
Arena::CreateMaybeMessage< ::dom_distiller::DistilledPageProto_Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::DistilledPageProto_Image >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::DistilledPageProto_DebugInfo*
Arena::CreateMaybeMessage< ::dom_distiller::DistilledPageProto_DebugInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::DistilledPageProto_DebugInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::DistilledPageProto_PaginationInfo*
Arena::CreateMaybeMessage< ::dom_distiller::DistilledPageProto_PaginationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::DistilledPageProto_PaginationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::DistilledPageProto_TimingInfo*
Arena::CreateMaybeMessage< ::dom_distiller::DistilledPageProto_TimingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::DistilledPageProto_TimingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::DistilledPageProto*
Arena::CreateMaybeMessage< ::dom_distiller::DistilledPageProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::DistilledPageProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
