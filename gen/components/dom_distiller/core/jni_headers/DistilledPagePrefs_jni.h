// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/dom_distiller/core/DistilledPagePrefs

#ifndef org_chromium_components_dom_distiller_core_DistilledPagePrefs_JNI
#define org_chromium_components_dom_distiller_core_DistilledPagePrefs_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_dom_1distiller_core_DistilledPagePrefs[];
const char kClassPath_org_chromium_components_dom_1distiller_core_DistilledPagePrefs[] =
    "org/chromium/components/dom_distiller/core/DistilledPagePrefs";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper[];
const char
    kClassPath_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper[]
    =
    "org/chromium/components/dom_distiller/core/DistilledPagePrefs$DistilledPagePrefsObserverWrapper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_clazz(nullptr);
#ifndef org_chromium_components_dom_1distiller_core_DistilledPagePrefs_clazz_defined
#define org_chromium_components_dom_1distiller_core_DistilledPagePrefs_clazz_defined
inline jclass org_chromium_components_dom_1distiller_core_DistilledPagePrefs_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_dom_1distiller_core_DistilledPagePrefs,
      &g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz(nullptr);
#ifndef org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz_defined
#define org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz_defined
inline jclass
    org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper,
      &g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace dom_distiller {
namespace android {

static jlong JNI_DistilledPagePrefs_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    jlong distilledPagePrefPtr);

JNI_GENERATOR_EXPORT jlong Java_J_N_MazIrxOm(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong distilledPagePrefPtr) {
  return JNI_DistilledPagePrefs_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      distilledPagePrefPtr);
}

JNI_GENERATOR_EXPORT void Java_J_N_MfkxLC88(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jobject caller,
    jint fontFamily) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFontFamily");
  return native->SetFontFamily(env, base::android::JavaParamRef<jobject>(env, caller), fontFamily);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MSGVGQGo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jobject caller) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFontFamily", 0);
  return native->GetFontFamily(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MJBehZGI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jobject caller,
    jint theme) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTheme");
  return native->SetTheme(env, base::android::JavaParamRef<jobject>(env, caller), theme);
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mi1cN_00024gk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jobject caller) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTheme", 0);
  return native->GetTheme(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MaB_00024bTgz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jobject caller,
    jfloat scaling) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFontScaling");
  return native->SetFontScaling(env, base::android::JavaParamRef<jobject>(env, caller), scaling);
}

JNI_GENERATOR_EXPORT jfloat Java_J_N_MGNXZIUg(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jobject caller) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFontScaling", 0);
  return native->GetFontScaling(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MznRD745(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jobject caller,
    jlong nativeObserverPtr) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddObserver");
  return native->AddObserver(env, base::android::JavaParamRef<jobject>(env, caller),
      nativeObserverPtr);
}

JNI_GENERATOR_EXPORT void Java_J_N_M_1HmEv0F(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsAndroid,
    jobject caller,
    jlong nativeObserverPtr) {
  DistilledPagePrefsAndroid* native =
      reinterpret_cast<DistilledPagePrefsAndroid*>(nativeDistilledPagePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveObserver");
  return native->RemoveObserver(env, base::android::JavaParamRef<jobject>(env, caller),
      nativeObserverPtr);
}

static jlong JNI_DistilledPagePrefs_InitObserverAndroid(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MxAdC41V(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_DistilledPagePrefs_InitObserverAndroid(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MGXAfNxO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDistilledPagePrefsObserverAndroid) {
  DistilledPagePrefsObserverAndroid* native =
      reinterpret_cast<DistilledPagePrefsObserverAndroid*>(nativeDistilledPagePrefsObserverAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DestroyObserverAndroid");
  return native->DestroyObserverAndroid(env);
}


static std::atomic<jmethodID>
    g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_onChangeFontFamily(nullptr);
static void Java_DistilledPagePrefsObserverWrapper_onChangeFontFamily(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper fontFamily) {
  jclass clazz =
      org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onChangeFontFamily",
          "(I)V",
&g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_onChangeFontFamily);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(fontFamily));
}

static std::atomic<jmethodID>
    g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_onChangeTheme(nullptr);
static void Java_DistilledPagePrefsObserverWrapper_onChangeTheme(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper theme) {
  jclass clazz =
      org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onChangeTheme",
          "(I)V",
&g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_onChangeTheme);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(theme));
}

static std::atomic<jmethodID>
    g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_onChangeFontScaling(nullptr);
static void Java_DistilledPagePrefsObserverWrapper_onChangeFontScaling(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jfloat scaling) {
  jclass clazz =
      org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onChangeFontScaling",
          "(F)V",
&g_org_chromium_components_dom_1distiller_core_DistilledPagePrefs_00024DistilledPagePrefsObserverWrapper_onChangeFontScaling);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, scaling);
}

}  // namespace android
}  // namespace dom_distiller

#endif  // org_chromium_components_dom_distiller_core_DistilledPagePrefs_JNI
