// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/download/database/proto/download_entry.proto

#include "components/download/database/proto/download_entry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace download_pb {
PROTOBUF_CONSTEXPR HttpRequestHeader::HttpRequestHeader(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct HttpRequestHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HttpRequestHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HttpRequestHeaderDefaultTypeInternal() {}
  union {
    HttpRequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HttpRequestHeaderDefaultTypeInternal _HttpRequestHeader_default_instance_;
PROTOBUF_CONSTEXPR ReceivedSlice::ReceivedSlice(
    ::_pbi::ConstantInitialized)
  : offset_(int64_t{0})
  , received_bytes_(int64_t{0})
  , finished_(false){}
struct ReceivedSliceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceivedSliceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceivedSliceDefaultTypeInternal() {}
  union {
    ReceivedSlice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceivedSliceDefaultTypeInternal _ReceivedSlice_default_instance_;
PROTOBUF_CONSTEXPR DownloadEntry::DownloadEntry(
    ::_pbi::ConstantInitialized)
  : request_headers_()
  , guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ukm_download_id_(int64_t{0})
  , download_source_(0)

  , fetch_error_body_(false)
  , bytes_wasted_(int64_t{0}){}
struct DownloadEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadEntryDefaultTypeInternal() {}
  union {
    DownloadEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadEntryDefaultTypeInternal _DownloadEntry_default_instance_;
PROTOBUF_CONSTEXPR DownloadEntries::DownloadEntries(
    ::_pbi::ConstantInitialized)
  : entries_(){}
struct DownloadEntriesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadEntriesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadEntriesDefaultTypeInternal() {}
  union {
    DownloadEntries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadEntriesDefaultTypeInternal _DownloadEntries_default_instance_;
PROTOBUF_CONSTEXPR UkmInfo::UkmInfo(
    ::_pbi::ConstantInitialized)
  : ukm_download_id_(int64_t{0})
  , download_source_(0)
{}
struct UkmInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UkmInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UkmInfoDefaultTypeInternal() {}
  union {
    UkmInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UkmInfoDefaultTypeInternal _UkmInfo_default_instance_;
PROTOBUF_CONSTEXPR DownloadSchedule::DownloadSchedule(
    ::_pbi::ConstantInitialized)
  : start_time_(int64_t{0}){}
struct DownloadScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadScheduleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadScheduleDefaultTypeInternal() {}
  union {
    DownloadSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadScheduleDefaultTypeInternal _DownloadSchedule_default_instance_;
PROTOBUF_CONSTEXPR InProgressInfo::InProgressInfo(
    ::_pbi::ConstantInitialized)
  : url_chain_()
  , request_headers_()
  , received_slices_()
  , referrer_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , site_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tab_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tab_referrer_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , etag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_modified_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , original_mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , current_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , target_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , serialized_embedder_download_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , download_schedule_(nullptr)
  , reroute_info_(nullptr)
  , total_bytes_(int64_t{0})
  , received_bytes_(int64_t{0})
  , start_time_(int64_t{0})
  , end_time_(int64_t{0})
  , fetch_error_body_(false)
  , transient_(false)
  , paused_(false)
  , metered_(false)
  , state_(0)
  , danger_type_(0)
  , interrupt_reason_(0)
  , bytes_wasted_(int64_t{0})
  , auto_resume_count_(0)
  , credentials_mode_(0)
  , range_request_from_(int64_t{0})
  , range_request_to_(int64_t{0}){}
struct InProgressInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InProgressInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InProgressInfoDefaultTypeInternal() {}
  union {
    InProgressInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InProgressInfoDefaultTypeInternal _InProgressInfo_default_instance_;
PROTOBUF_CONSTEXPR DownloadInfo::DownloadInfo(
    ::_pbi::ConstantInitialized)
  : guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ukm_info_(nullptr)
  , in_progress_info_(nullptr)
  , id_(0){}
struct DownloadInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadInfoDefaultTypeInternal() {}
  union {
    DownloadInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadInfoDefaultTypeInternal _DownloadInfo_default_instance_;
PROTOBUF_CONSTEXPR DownloadDBEntry::DownloadDBEntry(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct DownloadDBEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadDBEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadDBEntryDefaultTypeInternal() {}
  union {
    DownloadDBEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadDBEntryDefaultTypeInternal _DownloadDBEntry_default_instance_;
}  // namespace download_pb
namespace download_pb {

// ===================================================================

class HttpRequestHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<HttpRequestHeader>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HttpRequestHeader::HttpRequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.HttpRequestHeader)
}
HttpRequestHeader::HttpRequestHeader(const HttpRequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:download_pb.HttpRequestHeader)
}

inline void HttpRequestHeader::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HttpRequestHeader::~HttpRequestHeader() {
  // @@protoc_insertion_point(destructor:download_pb.HttpRequestHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HttpRequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  value_.Destroy();
}

void HttpRequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HttpRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.HttpRequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HttpRequestHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HttpRequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.HttpRequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.HttpRequestHeader)
  return target;
}

size_t HttpRequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.HttpRequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpRequestHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HttpRequestHeader*>(
      &from));
}

void HttpRequestHeader::MergeFrom(const HttpRequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.HttpRequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HttpRequestHeader::CopyFrom(const HttpRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.HttpRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequestHeader::IsInitialized() const {
  return true;
}

void HttpRequestHeader::InternalSwap(HttpRequestHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string HttpRequestHeader::GetTypeName() const {
  return "download_pb.HttpRequestHeader";
}


// ===================================================================

class ReceivedSlice::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceivedSlice>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_received_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_finished(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ReceivedSlice::ReceivedSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.ReceivedSlice)
}
ReceivedSlice::ReceivedSlice(const ReceivedSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:download_pb.ReceivedSlice)
}

inline void ReceivedSlice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(finished_));
}

ReceivedSlice::~ReceivedSlice() {
  // @@protoc_insertion_point(destructor:download_pb.ReceivedSlice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceivedSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReceivedSlice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReceivedSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.ReceivedSlice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finished_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(finished_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReceivedSlice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 received_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_received_bytes(&has_bits);
          received_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool finished = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_finished(&has_bits);
          finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReceivedSlice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.ReceivedSlice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  // optional int64 received_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_received_bytes(), target);
  }

  // optional bool finished = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.ReceivedSlice)
  return target;
}

size_t ReceivedSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.ReceivedSlice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 offset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
    }

    // optional int64 received_bytes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_received_bytes());
    }

    // optional bool finished = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedSlice::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ReceivedSlice*>(
      &from));
}

void ReceivedSlice::MergeFrom(const ReceivedSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.ReceivedSlice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      received_bytes_ = from.received_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      finished_ = from.finished_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ReceivedSlice::CopyFrom(const ReceivedSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.ReceivedSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedSlice::IsInitialized() const {
  return true;
}

void ReceivedSlice::InternalSwap(ReceivedSlice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceivedSlice, finished_)
      + sizeof(ReceivedSlice::finished_)
      - PROTOBUF_FIELD_OFFSET(ReceivedSlice, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

std::string ReceivedSlice::GetTypeName() const {
  return "download_pb.ReceivedSlice";
}


// ===================================================================

class DownloadEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadEntry>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_download_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ukm_download_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bytes_wasted(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fetch_error_body(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DownloadEntry::DownloadEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  request_headers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.DownloadEntry)
}
DownloadEntry::DownloadEntry(const DownloadEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  request_origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_origin()) {
    request_origin_.Set(from._internal_request_origin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ukm_download_id_, &from.ukm_download_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_wasted_) -
    reinterpret_cast<char*>(&ukm_download_id_)) + sizeof(bytes_wasted_));
  // @@protoc_insertion_point(copy_constructor:download_pb.DownloadEntry)
}

inline void DownloadEntry::SharedCtor() {
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
request_origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ukm_download_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_wasted_) -
    reinterpret_cast<char*>(&ukm_download_id_)) + sizeof(bytes_wasted_));
}

DownloadEntry::~DownloadEntry() {
  // @@protoc_insertion_point(destructor:download_pb.DownloadEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.Destroy();
  request_origin_.Destroy();
}

void DownloadEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.DownloadEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      request_origin_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&ukm_download_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_wasted_) -
        reinterpret_cast<char*>(&ukm_download_id_)) + sizeof(bytes_wasted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DownloadEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string request_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_request_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .download_pb.DownloadSource download_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::download_pb::DownloadSource_IsValid(val))) {
            _internal_set_download_source(static_cast<::download_pb::DownloadSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 ukm_download_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ukm_download_id(&has_bits);
          ukm_download_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 bytes_wasted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bytes_wasted(&has_bits);
          bytes_wasted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fetch_error_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_fetch_error_body(&has_bits);
          fetch_error_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .download_pb.HttpRequestHeader request_headers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.DownloadEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  // optional string request_origin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_origin(), target);
  }

  // optional .download_pb.DownloadSource download_source = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_download_source(), target);
  }

  // optional int64 ukm_download_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_ukm_download_id(), target);
  }

  // optional int64 bytes_wasted = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_bytes_wasted(), target);
  }

  // optional bool fetch_error_body = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_fetch_error_body(), target);
  }

  // repeated .download_pb.HttpRequestHeader request_headers = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_request_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_request_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.DownloadEntry)
  return target;
}

size_t DownloadEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.DownloadEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .download_pb.HttpRequestHeader request_headers = 7;
  total_size += 1UL * this->_internal_request_headers_size();
  for (const auto& msg : this->request_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string guid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional string request_origin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_origin());
    }

    // optional int64 ukm_download_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ukm_download_id());
    }

    // optional .download_pb.DownloadSource download_source = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_download_source());
    }

    // optional bool fetch_error_body = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int64 bytes_wasted = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_wasted());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DownloadEntry*>(
      &from));
}

void DownloadEntry::MergeFrom(const DownloadEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.DownloadEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_request_origin(from._internal_request_origin());
    }
    if (cached_has_bits & 0x00000004u) {
      ukm_download_id_ = from.ukm_download_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      download_source_ = from.download_source_;
    }
    if (cached_has_bits & 0x00000010u) {
      fetch_error_body_ = from.fetch_error_body_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_wasted_ = from.bytes_wasted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DownloadEntry::CopyFrom(const DownloadEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.DownloadEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadEntry::IsInitialized() const {
  return true;
}

void DownloadEntry::InternalSwap(DownloadEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_headers_.InternalSwap(&other->request_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_origin_, lhs_arena,
      &other->request_origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadEntry, bytes_wasted_)
      + sizeof(DownloadEntry::bytes_wasted_)
      - PROTOBUF_FIELD_OFFSET(DownloadEntry, ukm_download_id_)>(
          reinterpret_cast<char*>(&ukm_download_id_),
          reinterpret_cast<char*>(&other->ukm_download_id_));
}

std::string DownloadEntry::GetTypeName() const {
  return "download_pb.DownloadEntry";
}


// ===================================================================

class DownloadEntries::_Internal {
 public:
};

DownloadEntries::DownloadEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.DownloadEntries)
}
DownloadEntries::DownloadEntries(const DownloadEntries& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:download_pb.DownloadEntries)
}

inline void DownloadEntries::SharedCtor() {
}

DownloadEntries::~DownloadEntries() {
  // @@protoc_insertion_point(destructor:download_pb.DownloadEntries)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadEntries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DownloadEntries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.DownloadEntries)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DownloadEntries::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .download_pb.DownloadEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadEntries::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.DownloadEntries)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .download_pb.DownloadEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.DownloadEntries)
  return target;
}

size_t DownloadEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.DownloadEntries)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .download_pb.DownloadEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadEntries::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DownloadEntries*>(
      &from));
}

void DownloadEntries::MergeFrom(const DownloadEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.DownloadEntries)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DownloadEntries::CopyFrom(const DownloadEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.DownloadEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadEntries::IsInitialized() const {
  return true;
}

void DownloadEntries::InternalSwap(DownloadEntries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

std::string DownloadEntries::GetTypeName() const {
  return "download_pb.DownloadEntries";
}


// ===================================================================

class UkmInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UkmInfo>()._has_bits_);
  static void set_has_download_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ukm_download_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UkmInfo::UkmInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.UkmInfo)
}
UkmInfo::UkmInfo(const UkmInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&ukm_download_id_, &from.ukm_download_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_source_) -
    reinterpret_cast<char*>(&ukm_download_id_)) + sizeof(download_source_));
  // @@protoc_insertion_point(copy_constructor:download_pb.UkmInfo)
}

inline void UkmInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ukm_download_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&download_source_) -
    reinterpret_cast<char*>(&ukm_download_id_)) + sizeof(download_source_));
}

UkmInfo::~UkmInfo() {
  // @@protoc_insertion_point(destructor:download_pb.UkmInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UkmInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UkmInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UkmInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.UkmInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ukm_download_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_source_) -
        reinterpret_cast<char*>(&ukm_download_id_)) + sizeof(download_source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UkmInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .download_pb.DownloadSource download_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::download_pb::DownloadSource_IsValid(val))) {
            _internal_set_download_source(static_cast<::download_pb::DownloadSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 ukm_download_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ukm_download_id(&has_bits);
          ukm_download_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UkmInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.UkmInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .download_pb.DownloadSource download_source = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_download_source(), target);
  }

  // optional int64 ukm_download_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ukm_download_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.UkmInfo)
  return target;
}

size_t UkmInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.UkmInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 ukm_download_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ukm_download_id());
    }

    // optional .download_pb.DownloadSource download_source = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_download_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UkmInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UkmInfo*>(
      &from));
}

void UkmInfo::MergeFrom(const UkmInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.UkmInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ukm_download_id_ = from.ukm_download_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      download_source_ = from.download_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UkmInfo::CopyFrom(const UkmInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.UkmInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UkmInfo::IsInitialized() const {
  return true;
}

void UkmInfo::InternalSwap(UkmInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UkmInfo, download_source_)
      + sizeof(UkmInfo::download_source_)
      - PROTOBUF_FIELD_OFFSET(UkmInfo, ukm_download_id_)>(
          reinterpret_cast<char*>(&ukm_download_id_),
          reinterpret_cast<char*>(&other->ukm_download_id_));
}

std::string UkmInfo::GetTypeName() const {
  return "download_pb.UkmInfo";
}


// ===================================================================

class DownloadSchedule::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadSchedule>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DownloadSchedule::DownloadSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.DownloadSchedule)
}
DownloadSchedule::DownloadSchedule(const DownloadSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  start_time_ = from.start_time_;
  // @@protoc_insertion_point(copy_constructor:download_pb.DownloadSchedule)
}

inline void DownloadSchedule::SharedCtor() {
start_time_ = int64_t{0};
}

DownloadSchedule::~DownloadSchedule() {
  // @@protoc_insertion_point(destructor:download_pb.DownloadSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DownloadSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.DownloadSchedule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_time_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DownloadSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadSchedule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.DownloadSchedule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.DownloadSchedule)
  return target;
}

size_t DownloadSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.DownloadSchedule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 start_time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadSchedule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DownloadSchedule*>(
      &from));
}

void DownloadSchedule::MergeFrom(const DownloadSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.DownloadSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_time()) {
    _internal_set_start_time(from._internal_start_time());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DownloadSchedule::CopyFrom(const DownloadSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.DownloadSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadSchedule::IsInitialized() const {
  return true;
}

void DownloadSchedule::InternalSwap(DownloadSchedule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_time_, other->start_time_);
}

std::string DownloadSchedule::GetTypeName() const {
  return "download_pb.DownloadSchedule";
}


// ===================================================================

class InProgressInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<InProgressInfo>()._has_bits_);
  static void set_has_referrer_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_site_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tab_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tab_referrer_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fetch_error_body(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_etag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_original_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_current_path(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_target_path(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_received_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_transient(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_danger_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_interrupt_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_metered(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_bytes_wasted(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_auto_resume_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::download_pb::DownloadSchedule& download_schedule(const InProgressInfo* msg);
  static void set_has_download_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::enterprise_connectors::DownloadItemRerouteInfo& reroute_info(const InProgressInfo* msg);
  static void set_has_reroute_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_credentials_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_range_request_from(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_range_request_to(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_serialized_embedder_download_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::download_pb::DownloadSchedule&
InProgressInfo::_Internal::download_schedule(const InProgressInfo* msg) {
  return *msg->download_schedule_;
}
const ::enterprise_connectors::DownloadItemRerouteInfo&
InProgressInfo::_Internal::reroute_info(const InProgressInfo* msg) {
  return *msg->reroute_info_;
}
void InProgressInfo::clear_reroute_info() {
  if (reroute_info_ != nullptr) reroute_info_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
InProgressInfo::InProgressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  url_chain_(arena),
  request_headers_(arena),
  received_slices_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.InProgressInfo)
}
InProgressInfo::InProgressInfo(const InProgressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      url_chain_(from.url_chain_),
      request_headers_(from.request_headers_),
      received_slices_(from.received_slices_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  referrer_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer_url()) {
    referrer_url_.Set(from._internal_referrer_url(), 
      GetArenaForAllocation());
  }
  site_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_url()) {
    site_url_.Set(from._internal_site_url(), 
      GetArenaForAllocation());
  }
  tab_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tab_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tab_url()) {
    tab_url_.Set(from._internal_tab_url(), 
      GetArenaForAllocation());
  }
  tab_referrer_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tab_referrer_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tab_referrer_url()) {
    tab_referrer_url_.Set(from._internal_tab_referrer_url(), 
      GetArenaForAllocation());
  }
  etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_etag()) {
    etag_.Set(from._internal_etag(), 
      GetArenaForAllocation());
  }
  last_modified_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_modified_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_modified()) {
    last_modified_.Set(from._internal_last_modified(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  original_mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    original_mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_original_mime_type()) {
    original_mime_type_.Set(from._internal_original_mime_type(), 
      GetArenaForAllocation());
  }
  current_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    current_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_path()) {
    current_path_.Set(from._internal_current_path(), 
      GetArenaForAllocation());
  }
  target_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_path()) {
    target_path_.Set(from._internal_target_path(), 
      GetArenaForAllocation());
  }
  hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hash()) {
    hash_.Set(from._internal_hash(), 
      GetArenaForAllocation());
  }
  serialized_embedder_download_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_embedder_download_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_embedder_download_data()) {
    serialized_embedder_download_data_.Set(from._internal_serialized_embedder_download_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_download_schedule()) {
    download_schedule_ = new ::download_pb::DownloadSchedule(*from.download_schedule_);
  } else {
    download_schedule_ = nullptr;
  }
  if (from._internal_has_reroute_info()) {
    reroute_info_ = new ::enterprise_connectors::DownloadItemRerouteInfo(*from.reroute_info_);
  } else {
    reroute_info_ = nullptr;
  }
  ::memcpy(&total_bytes_, &from.total_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_request_to_) -
    reinterpret_cast<char*>(&total_bytes_)) + sizeof(range_request_to_));
  // @@protoc_insertion_point(copy_constructor:download_pb.InProgressInfo)
}

inline void InProgressInfo::SharedCtor() {
referrer_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
site_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tab_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tab_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tab_referrer_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tab_referrer_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
etag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  etag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_modified_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_modified_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
original_mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  original_mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
current_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  current_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serialized_embedder_download_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_embedder_download_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&download_schedule_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_request_to_) -
    reinterpret_cast<char*>(&download_schedule_)) + sizeof(range_request_to_));
}

InProgressInfo::~InProgressInfo() {
  // @@protoc_insertion_point(destructor:download_pb.InProgressInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InProgressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  referrer_url_.Destroy();
  site_url_.Destroy();
  tab_url_.Destroy();
  tab_referrer_url_.Destroy();
  etag_.Destroy();
  last_modified_.Destroy();
  mime_type_.Destroy();
  original_mime_type_.Destroy();
  current_path_.Destroy();
  target_path_.Destroy();
  hash_.Destroy();
  serialized_embedder_download_data_.Destroy();
  if (this != internal_default_instance()) delete download_schedule_;
  if (this != internal_default_instance()) delete reroute_info_;
}

void InProgressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InProgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.InProgressInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_chain_.Clear();
  request_headers_.Clear();
  received_slices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      referrer_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      site_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      tab_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      tab_referrer_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      etag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      last_modified_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      mime_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      original_mime_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      current_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      target_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      serialized_embedder_download_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(download_schedule_ != nullptr);
      download_schedule_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(reroute_info_ != nullptr);
      reroute_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&total_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&received_bytes_) -
        reinterpret_cast<char*>(&total_bytes_)) + sizeof(received_bytes_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&danger_type_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(danger_type_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&interrupt_reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_request_to_) -
        reinterpret_cast<char*>(&interrupt_reason_)) + sizeof(range_request_to_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InProgressInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string url_chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_url_chain();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string referrer_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_referrer_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string site_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_site_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tab_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tab_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tab_referrer_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tab_referrer_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fetch_error_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_fetch_error_body(&has_bits);
          fetch_error_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .download_pb.HttpRequestHeader request_headers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string etag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_etag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_modified = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_last_modified();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 total_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_total_bytes(&has_bits);
          total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mime_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string original_mime_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_original_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes current_path = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_current_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes target_path = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_target_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 received_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_received_bytes(&has_bits);
          received_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .download_pb.ReceivedSlice received_slices = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_received_slices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string hash = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool transient = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_transient(&has_bits);
          transient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 state = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 danger_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_danger_type(&has_bits);
          danger_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 interrupt_reason = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_interrupt_reason(&has_bits);
          interrupt_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool paused = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_paused(&has_bits);
          paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool metered = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_metered(&has_bits);
          metered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 bytes_wasted = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_bytes_wasted(&has_bits);
          bytes_wasted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_resume_count = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_auto_resume_count(&has_bits);
          auto_resume_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .download_pb.DownloadSchedule download_schedule = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_download_schedule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .enterprise_connectors.DownloadItemRerouteInfo reroute_info = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_reroute_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 credentials_mode = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_credentials_mode(&has_bits);
          credentials_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 range_request_from = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_range_request_from(&has_bits);
          range_request_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 range_request_to = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_range_request_to(&has_bits);
          range_request_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string serialized_embedder_download_data = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serialized_embedder_download_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InProgressInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.InProgressInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string url_chain = 1;
  for (int i = 0, n = this->_internal_url_chain_size(); i < n; i++) {
    const auto& s = this->_internal_url_chain(i);
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string referrer_url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_referrer_url(), target);
  }

  // optional string site_url = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_site_url(), target);
  }

  // optional string tab_url = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tab_url(), target);
  }

  // optional string tab_referrer_url = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tab_referrer_url(), target);
  }

  // optional bool fetch_error_body = 6;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_fetch_error_body(), target);
  }

  // repeated .download_pb.HttpRequestHeader request_headers = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_request_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_request_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string etag = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_etag(), target);
  }

  // optional string last_modified = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_last_modified(), target);
  }

  // optional int64 total_bytes = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_total_bytes(), target);
  }

  // optional string mime_type = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mime_type(), target);
  }

  // optional string original_mime_type = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_original_mime_type(), target);
  }

  // optional bytes current_path = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_current_path(), target);
  }

  // optional bytes target_path = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_target_path(), target);
  }

  // optional int64 received_bytes = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_received_bytes(), target);
  }

  // optional int64 start_time = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_start_time(), target);
  }

  // optional int64 end_time = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_end_time(), target);
  }

  // repeated .download_pb.ReceivedSlice received_slices = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_received_slices_size()); i < n; i++) {
    const auto& repfield = this->_internal_received_slices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string hash = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_hash(), target);
  }

  // optional bool transient = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_transient(), target);
  }

  // optional int32 state = 21;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_state(), target);
  }

  // optional int32 danger_type = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_danger_type(), target);
  }

  // optional int32 interrupt_reason = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_interrupt_reason(), target);
  }

  // optional bool paused = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_paused(), target);
  }

  // optional bool metered = 25;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_metered(), target);
  }

  // optional int64 bytes_wasted = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_bytes_wasted(), target);
  }

  // optional int32 auto_resume_count = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_auto_resume_count(), target);
  }

  // optional .download_pb.DownloadSchedule download_schedule = 28;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::download_schedule(this),
        _Internal::download_schedule(this).GetCachedSize(), target, stream);
  }

  // optional .enterprise_connectors.DownloadItemRerouteInfo reroute_info = 29;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::reroute_info(this),
        _Internal::reroute_info(this).GetCachedSize(), target, stream);
  }

  // optional int32 credentials_mode = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_credentials_mode(), target);
  }

  // optional int64 range_request_from = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_range_request_from(), target);
  }

  // optional int64 range_request_to = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_range_request_to(), target);
  }

  // optional string serialized_embedder_download_data = 33;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_serialized_embedder_download_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.InProgressInfo)
  return target;
}

size_t InProgressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.InProgressInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string url_chain = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(url_chain_.size());
  for (int i = 0, n = url_chain_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      url_chain_.Get(i));
  }

  // repeated .download_pb.HttpRequestHeader request_headers = 7;
  total_size += 1UL * this->_internal_request_headers_size();
  for (const auto& msg : this->request_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .download_pb.ReceivedSlice received_slices = 18;
  total_size += 2UL * this->_internal_received_slices_size();
  for (const auto& msg : this->received_slices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string referrer_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer_url());
    }

    // optional string site_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_url());
    }

    // optional string tab_url = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tab_url());
    }

    // optional string tab_referrer_url = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tab_referrer_url());
    }

    // optional string etag = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_etag());
    }

    // optional string last_modified = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_modified());
    }

    // optional string mime_type = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mime_type());
    }

    // optional string original_mime_type = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_mime_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes current_path = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_current_path());
    }

    // optional bytes target_path = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_target_path());
    }

    // optional string hash = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash());
    }

    // optional string serialized_embedder_download_data = 33;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serialized_embedder_download_data());
    }

    // optional .download_pb.DownloadSchedule download_schedule = 28;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *download_schedule_);
    }

    // optional .enterprise_connectors.DownloadItemRerouteInfo reroute_info = 29;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reroute_info_);
    }

    // optional int64 total_bytes = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_bytes());
    }

    // optional int64 received_bytes = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_received_bytes());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 start_time = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_start_time());
    }

    // optional int64 end_time = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_end_time());
    }

    // optional bool fetch_error_body = 6;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool transient = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool paused = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool metered = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int32 state = 21;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_state());
    }

    // optional int32 danger_type = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_danger_type());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional int32 interrupt_reason = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_interrupt_reason());
    }

    // optional int64 bytes_wasted = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_bytes_wasted());
    }

    // optional int32 auto_resume_count = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_auto_resume_count());
    }

    // optional int32 credentials_mode = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_credentials_mode());
    }

    // optional int64 range_request_from = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_range_request_from());
    }

    // optional int64 range_request_to = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_range_request_to());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InProgressInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InProgressInfo*>(
      &from));
}

void InProgressInfo::MergeFrom(const InProgressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.InProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  url_chain_.MergeFrom(from.url_chain_);
  request_headers_.MergeFrom(from.request_headers_);
  received_slices_.MergeFrom(from.received_slices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_referrer_url(from._internal_referrer_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_site_url(from._internal_site_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_tab_url(from._internal_tab_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_tab_referrer_url(from._internal_tab_referrer_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_etag(from._internal_etag());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_last_modified(from._internal_last_modified());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_mime_type(from._internal_mime_type());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_original_mime_type(from._internal_original_mime_type());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_current_path(from._internal_current_path());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_target_path(from._internal_target_path());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_serialized_embedder_download_data(from._internal_serialized_embedder_download_data());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_download_schedule()->::download_pb::DownloadSchedule::MergeFrom(from._internal_download_schedule());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_reroute_info()->::enterprise_connectors::DownloadItemRerouteInfo::MergeFrom(from._internal_reroute_info());
    }
    if (cached_has_bits & 0x00004000u) {
      total_bytes_ = from.total_bytes_;
    }
    if (cached_has_bits & 0x00008000u) {
      received_bytes_ = from.received_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      fetch_error_body_ = from.fetch_error_body_;
    }
    if (cached_has_bits & 0x00080000u) {
      transient_ = from.transient_;
    }
    if (cached_has_bits & 0x00100000u) {
      paused_ = from.paused_;
    }
    if (cached_has_bits & 0x00200000u) {
      metered_ = from.metered_;
    }
    if (cached_has_bits & 0x00400000u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00800000u) {
      danger_type_ = from.danger_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      interrupt_reason_ = from.interrupt_reason_;
    }
    if (cached_has_bits & 0x02000000u) {
      bytes_wasted_ = from.bytes_wasted_;
    }
    if (cached_has_bits & 0x04000000u) {
      auto_resume_count_ = from.auto_resume_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      credentials_mode_ = from.credentials_mode_;
    }
    if (cached_has_bits & 0x10000000u) {
      range_request_from_ = from.range_request_from_;
    }
    if (cached_has_bits & 0x20000000u) {
      range_request_to_ = from.range_request_to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InProgressInfo::CopyFrom(const InProgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.InProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InProgressInfo::IsInitialized() const {
  if (_internal_has_reroute_info()) {
    if (!reroute_info_->IsInitialized()) return false;
  }
  return true;
}

void InProgressInfo::InternalSwap(InProgressInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_chain_.InternalSwap(&other->url_chain_);
  request_headers_.InternalSwap(&other->request_headers_);
  received_slices_.InternalSwap(&other->received_slices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &referrer_url_, lhs_arena,
      &other->referrer_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &site_url_, lhs_arena,
      &other->site_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tab_url_, lhs_arena,
      &other->tab_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tab_referrer_url_, lhs_arena,
      &other->tab_referrer_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &etag_, lhs_arena,
      &other->etag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_modified_, lhs_arena,
      &other->last_modified_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &original_mime_type_, lhs_arena,
      &other->original_mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &current_path_, lhs_arena,
      &other->current_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &target_path_, lhs_arena,
      &other->target_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &serialized_embedder_download_data_, lhs_arena,
      &other->serialized_embedder_download_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InProgressInfo, range_request_to_)
      + sizeof(InProgressInfo::range_request_to_)
      - PROTOBUF_FIELD_OFFSET(InProgressInfo, download_schedule_)>(
          reinterpret_cast<char*>(&download_schedule_),
          reinterpret_cast<char*>(&other->download_schedule_));
}

std::string InProgressInfo::GetTypeName() const {
  return "download_pb.InProgressInfo";
}


// ===================================================================

class DownloadInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadInfo>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::download_pb::UkmInfo& ukm_info(const DownloadInfo* msg);
  static void set_has_ukm_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::download_pb::InProgressInfo& in_progress_info(const DownloadInfo* msg);
  static void set_has_in_progress_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::download_pb::UkmInfo&
DownloadInfo::_Internal::ukm_info(const DownloadInfo* msg) {
  return *msg->ukm_info_;
}
const ::download_pb::InProgressInfo&
DownloadInfo::_Internal::in_progress_info(const DownloadInfo* msg) {
  return *msg->in_progress_info_;
}
DownloadInfo::DownloadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.DownloadInfo)
}
DownloadInfo::DownloadInfo(const DownloadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ukm_info()) {
    ukm_info_ = new ::download_pb::UkmInfo(*from.ukm_info_);
  } else {
    ukm_info_ = nullptr;
  }
  if (from._internal_has_in_progress_info()) {
    in_progress_info_ = new ::download_pb::InProgressInfo(*from.in_progress_info_);
  } else {
    in_progress_info_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:download_pb.DownloadInfo)
}

inline void DownloadInfo::SharedCtor() {
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ukm_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ukm_info_)) + sizeof(id_));
}

DownloadInfo::~DownloadInfo() {
  // @@protoc_insertion_point(destructor:download_pb.DownloadInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.Destroy();
  if (this != internal_default_instance()) delete ukm_info_;
  if (this != internal_default_instance()) delete in_progress_info_;
}

void DownloadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.DownloadInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ukm_info_ != nullptr);
      ukm_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(in_progress_info_ != nullptr);
      in_progress_info_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DownloadInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .download_pb.UkmInfo ukm_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ukm_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .download_pb.InProgressInfo in_progress_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_progress_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.DownloadInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional .download_pb.UkmInfo ukm_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ukm_info(this),
        _Internal::ukm_info(this).GetCachedSize(), target, stream);
  }

  // optional .download_pb.InProgressInfo in_progress_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::in_progress_info(this),
        _Internal::in_progress_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.DownloadInfo)
  return target;
}

size_t DownloadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.DownloadInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string guid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional .download_pb.UkmInfo ukm_info = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ukm_info_);
    }

    // optional .download_pb.InProgressInfo in_progress_info = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *in_progress_info_);
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DownloadInfo*>(
      &from));
}

void DownloadInfo::MergeFrom(const DownloadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.DownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ukm_info()->::download_pb::UkmInfo::MergeFrom(from._internal_ukm_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_in_progress_info()->::download_pb::InProgressInfo::MergeFrom(from._internal_in_progress_info());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DownloadInfo::CopyFrom(const DownloadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.DownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadInfo::IsInitialized() const {
  if (_internal_has_in_progress_info()) {
    if (!in_progress_info_->IsInitialized()) return false;
  }
  return true;
}

void DownloadInfo::InternalSwap(DownloadInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadInfo, id_)
      + sizeof(DownloadInfo::id_)
      - PROTOBUF_FIELD_OFFSET(DownloadInfo, ukm_info_)>(
          reinterpret_cast<char*>(&ukm_info_),
          reinterpret_cast<char*>(&other->ukm_info_));
}

std::string DownloadInfo::GetTypeName() const {
  return "download_pb.DownloadInfo";
}


// ===================================================================

class DownloadDBEntry::_Internal {
 public:
  static const ::download_pb::DownloadInfo& download_info(const DownloadDBEntry* msg);
};

const ::download_pb::DownloadInfo&
DownloadDBEntry::_Internal::download_info(const DownloadDBEntry* msg) {
  return *msg->entry_.download_info_;
}
void DownloadDBEntry::set_allocated_download_info(::download_pb::DownloadInfo* download_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entry();
  if (download_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(download_info);
    if (message_arena != submessage_arena) {
      download_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download_info, submessage_arena);
    }
    set_has_download_info();
    entry_.download_info_ = download_info;
  }
  // @@protoc_insertion_point(field_set_allocated:download_pb.DownloadDBEntry.download_info)
}
DownloadDBEntry::DownloadDBEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:download_pb.DownloadDBEntry)
}
DownloadDBEntry::DownloadDBEntry(const DownloadDBEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kDownloadInfo: {
      _internal_mutable_download_info()->::download_pb::DownloadInfo::MergeFrom(from._internal_download_info());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:download_pb.DownloadDBEntry)
}

inline void DownloadDBEntry::SharedCtor() {
clear_has_entry();
}

DownloadDBEntry::~DownloadDBEntry() {
  // @@protoc_insertion_point(destructor:download_pb.DownloadDBEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadDBEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void DownloadDBEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadDBEntry::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:download_pb.DownloadDBEntry)
  switch (entry_case()) {
    case kDownloadInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete entry_.download_info_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void DownloadDBEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:download_pb.DownloadDBEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<std::string>();
}

const char* DownloadDBEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .download_pb.DownloadInfo download_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_download_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadDBEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:download_pb.DownloadDBEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .download_pb.DownloadInfo download_info = 1;
  if (_internal_has_download_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::download_info(this),
        _Internal::download_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:download_pb.DownloadDBEntry)
  return target;
}

size_t DownloadDBEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:download_pb.DownloadDBEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // .download_pb.DownloadInfo download_info = 1;
    case kDownloadInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.download_info_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadDBEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DownloadDBEntry*>(
      &from));
}

void DownloadDBEntry::MergeFrom(const DownloadDBEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:download_pb.DownloadDBEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kDownloadInfo: {
      _internal_mutable_download_info()->::download_pb::DownloadInfo::MergeFrom(from._internal_download_info());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DownloadDBEntry::CopyFrom(const DownloadDBEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:download_pb.DownloadDBEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDBEntry::IsInitialized() const {
  switch (entry_case()) {
    case kDownloadInfo: {
      if (_internal_has_download_info()) {
        if (!entry_.download_info_->IsInitialized()) return false;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  return true;
}

void DownloadDBEntry::InternalSwap(DownloadDBEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string DownloadDBEntry::GetTypeName() const {
  return "download_pb.DownloadDBEntry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace download_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::download_pb::HttpRequestHeader*
Arena::CreateMaybeMessage< ::download_pb::HttpRequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::HttpRequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::download_pb::ReceivedSlice*
Arena::CreateMaybeMessage< ::download_pb::ReceivedSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::ReceivedSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::download_pb::DownloadEntry*
Arena::CreateMaybeMessage< ::download_pb::DownloadEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::DownloadEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::download_pb::DownloadEntries*
Arena::CreateMaybeMessage< ::download_pb::DownloadEntries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::DownloadEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::download_pb::UkmInfo*
Arena::CreateMaybeMessage< ::download_pb::UkmInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::UkmInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::download_pb::DownloadSchedule*
Arena::CreateMaybeMessage< ::download_pb::DownloadSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::DownloadSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::download_pb::InProgressInfo*
Arena::CreateMaybeMessage< ::download_pb::InProgressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::InProgressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::download_pb::DownloadInfo*
Arena::CreateMaybeMessage< ::download_pb::DownloadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::DownloadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::download_pb::DownloadDBEntry*
Arena::CreateMaybeMessage< ::download_pb::DownloadDBEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::download_pb::DownloadDBEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
