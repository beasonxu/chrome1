// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/page_info/core/proto/about_this_site_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace page_info {
namespace proto {
class AboutThisSiteMetadata;
struct AboutThisSiteMetadataDefaultTypeInternal;
extern AboutThisSiteMetadataDefaultTypeInternal _AboutThisSiteMetadata_default_instance_;
class BannerInfo;
struct BannerInfoDefaultTypeInternal;
extern BannerInfoDefaultTypeInternal _BannerInfo_default_instance_;
class Hyperlink;
struct HyperlinkDefaultTypeInternal;
extern HyperlinkDefaultTypeInternal _Hyperlink_default_instance_;
class MoreAbout;
struct MoreAboutDefaultTypeInternal;
extern MoreAboutDefaultTypeInternal _MoreAbout_default_instance_;
class SiteDescription;
struct SiteDescriptionDefaultTypeInternal;
extern SiteDescriptionDefaultTypeInternal _SiteDescription_default_instance_;
class SiteFirstSeen;
struct SiteFirstSeenDefaultTypeInternal;
extern SiteFirstSeenDefaultTypeInternal _SiteFirstSeen_default_instance_;
class SiteInfo;
struct SiteInfoDefaultTypeInternal;
extern SiteInfoDefaultTypeInternal _SiteInfo_default_instance_;
}  // namespace proto
}  // namespace page_info
PROTOBUF_NAMESPACE_OPEN
template<> ::page_info::proto::AboutThisSiteMetadata* Arena::CreateMaybeMessage<::page_info::proto::AboutThisSiteMetadata>(Arena*);
template<> ::page_info::proto::BannerInfo* Arena::CreateMaybeMessage<::page_info::proto::BannerInfo>(Arena*);
template<> ::page_info::proto::Hyperlink* Arena::CreateMaybeMessage<::page_info::proto::Hyperlink>(Arena*);
template<> ::page_info::proto::MoreAbout* Arena::CreateMaybeMessage<::page_info::proto::MoreAbout>(Arena*);
template<> ::page_info::proto::SiteDescription* Arena::CreateMaybeMessage<::page_info::proto::SiteDescription>(Arena*);
template<> ::page_info::proto::SiteFirstSeen* Arena::CreateMaybeMessage<::page_info::proto::SiteFirstSeen>(Arena*);
template<> ::page_info::proto::SiteInfo* Arena::CreateMaybeMessage<::page_info::proto::SiteInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace page_info {
namespace proto {

enum DurationUnit : int {
  UNIT_UNSPECIFIED = 0,
  UNIT_DAYS = 1,
  UNIT_WEEKS = 2,
  UNIT_MONTHS = 3,
  UNIT_YEARS = 4
};
bool DurationUnit_IsValid(int value);
constexpr DurationUnit DurationUnit_MIN = UNIT_UNSPECIFIED;
constexpr DurationUnit DurationUnit_MAX = UNIT_YEARS;
constexpr int DurationUnit_ARRAYSIZE = DurationUnit_MAX + 1;

const std::string& DurationUnit_Name(DurationUnit value);
template<typename T>
inline const std::string& DurationUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DurationUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DurationUnit_Name.");
  return DurationUnit_Name(static_cast<DurationUnit>(enum_t_value));
}
bool DurationUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DurationUnit* value);
enum DurationPrecision : int {
  PRECISION_UNSPECIFIED = 0,
  PRECISION_ABOUT = 1,
  PRECISION_LESS_THAN = 2,
  PRECISION_MORE_THAN = 3
};
bool DurationPrecision_IsValid(int value);
constexpr DurationPrecision DurationPrecision_MIN = PRECISION_UNSPECIFIED;
constexpr DurationPrecision DurationPrecision_MAX = PRECISION_MORE_THAN;
constexpr int DurationPrecision_ARRAYSIZE = DurationPrecision_MAX + 1;

const std::string& DurationPrecision_Name(DurationPrecision value);
template<typename T>
inline const std::string& DurationPrecision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DurationPrecision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DurationPrecision_Name.");
  return DurationPrecision_Name(static_cast<DurationPrecision>(enum_t_value));
}
bool DurationPrecision_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DurationPrecision* value);
// ===================================================================

class SiteFirstSeen final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:page_info.proto.SiteFirstSeen) */ {
 public:
  inline SiteFirstSeen() : SiteFirstSeen(nullptr) {}
  ~SiteFirstSeen() override;
  explicit PROTOBUF_CONSTEXPR SiteFirstSeen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteFirstSeen(const SiteFirstSeen& from);
  SiteFirstSeen(SiteFirstSeen&& from) noexcept
    : SiteFirstSeen() {
    *this = ::std::move(from);
  }

  inline SiteFirstSeen& operator=(const SiteFirstSeen& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteFirstSeen& operator=(SiteFirstSeen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SiteFirstSeen& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteFirstSeen* internal_default_instance() {
    return reinterpret_cast<const SiteFirstSeen*>(
               &_SiteFirstSeen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteFirstSeen& a, SiteFirstSeen& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SiteFirstSeen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteFirstSeen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteFirstSeen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteFirstSeen>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SiteFirstSeen& from);
  void MergeFrom(const SiteFirstSeen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SiteFirstSeen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "page_info.proto.SiteFirstSeen";
  }
  protected:
  explicit SiteFirstSeen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kUnitFieldNumber = 2,
    kPrecisionFieldNumber = 3,
  };
  // optional int32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // optional .page_info.proto.DurationUnit unit = 2;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  ::page_info::proto::DurationUnit unit() const;
  void set_unit(::page_info::proto::DurationUnit value);
  private:
  ::page_info::proto::DurationUnit _internal_unit() const;
  void _internal_set_unit(::page_info::proto::DurationUnit value);
  public:

  // optional .page_info.proto.DurationPrecision precision = 3;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::page_info::proto::DurationPrecision precision() const;
  void set_precision(::page_info::proto::DurationPrecision value);
  private:
  ::page_info::proto::DurationPrecision _internal_precision() const;
  void _internal_set_precision(::page_info::proto::DurationPrecision value);
  public:

  // @@protoc_insertion_point(class_scope:page_info.proto.SiteFirstSeen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t count_;
  int unit_;
  int precision_;
  friend struct ::TableStruct_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class SiteDescription final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:page_info.proto.SiteDescription) */ {
 public:
  inline SiteDescription() : SiteDescription(nullptr) {}
  ~SiteDescription() override;
  explicit PROTOBUF_CONSTEXPR SiteDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteDescription(const SiteDescription& from);
  SiteDescription(SiteDescription&& from) noexcept
    : SiteDescription() {
    *this = ::std::move(from);
  }

  inline SiteDescription& operator=(const SiteDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteDescription& operator=(SiteDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SiteDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteDescription* internal_default_instance() {
    return reinterpret_cast<const SiteDescription*>(
               &_SiteDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SiteDescription& a, SiteDescription& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SiteDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteDescription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SiteDescription& from);
  void MergeFrom(const SiteDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SiteDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "page_info.proto.SiteDescription";
  }
  protected:
  explicit SiteDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kLangFieldNumber = 4,
    kSubtitleFieldNumber = 5,
    kSourceFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string lang = 4;
  bool has_lang() const;
  private:
  bool _internal_has_lang() const;
  public:
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // optional string subtitle = 5;
  bool has_subtitle() const;
  private:
  bool _internal_has_subtitle() const;
  public:
  void clear_subtitle();
  const std::string& subtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle();
  PROTOBUF_NODISCARD std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // optional .page_info.proto.Hyperlink source = 3;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::page_info::proto::Hyperlink& source() const;
  PROTOBUF_NODISCARD ::page_info::proto::Hyperlink* release_source();
  ::page_info::proto::Hyperlink* mutable_source();
  void set_allocated_source(::page_info::proto::Hyperlink* source);
  private:
  const ::page_info::proto::Hyperlink& _internal_source() const;
  ::page_info::proto::Hyperlink* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::page_info::proto::Hyperlink* source);
  ::page_info::proto::Hyperlink* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:page_info.proto.SiteDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
  ::page_info::proto::Hyperlink* source_;
  friend struct ::TableStruct_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class Hyperlink final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:page_info.proto.Hyperlink) */ {
 public:
  inline Hyperlink() : Hyperlink(nullptr) {}
  ~Hyperlink() override;
  explicit PROTOBUF_CONSTEXPR Hyperlink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hyperlink(const Hyperlink& from);
  Hyperlink(Hyperlink&& from) noexcept
    : Hyperlink() {
    *this = ::std::move(from);
  }

  inline Hyperlink& operator=(const Hyperlink& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hyperlink& operator=(Hyperlink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Hyperlink& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hyperlink* internal_default_instance() {
    return reinterpret_cast<const Hyperlink*>(
               &_Hyperlink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Hyperlink& a, Hyperlink& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Hyperlink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hyperlink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hyperlink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hyperlink>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Hyperlink& from);
  void MergeFrom(const Hyperlink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Hyperlink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "page_info.proto.Hyperlink";
  }
  protected:
  explicit Hyperlink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // optional string label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:page_info.proto.Hyperlink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class MoreAbout final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:page_info.proto.MoreAbout) */ {
 public:
  inline MoreAbout() : MoreAbout(nullptr) {}
  ~MoreAbout() override;
  explicit PROTOBUF_CONSTEXPR MoreAbout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoreAbout(const MoreAbout& from);
  MoreAbout(MoreAbout&& from) noexcept
    : MoreAbout() {
    *this = ::std::move(from);
  }

  inline MoreAbout& operator=(const MoreAbout& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoreAbout& operator=(MoreAbout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MoreAbout& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoreAbout* internal_default_instance() {
    return reinterpret_cast<const MoreAbout*>(
               &_MoreAbout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MoreAbout& a, MoreAbout& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MoreAbout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoreAbout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoreAbout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoreAbout>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MoreAbout& from);
  void MergeFrom(const MoreAbout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MoreAbout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "page_info.proto.MoreAbout";
  }
  protected:
  explicit MoreAbout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:page_info.proto.MoreAbout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class SiteInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:page_info.proto.SiteInfo) */ {
 public:
  inline SiteInfo() : SiteInfo(nullptr) {}
  ~SiteInfo() override;
  explicit PROTOBUF_CONSTEXPR SiteInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteInfo(const SiteInfo& from);
  SiteInfo(SiteInfo&& from) noexcept
    : SiteInfo() {
    *this = ::std::move(from);
  }

  inline SiteInfo& operator=(const SiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteInfo& operator=(SiteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SiteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteInfo* internal_default_instance() {
    return reinterpret_cast<const SiteInfo*>(
               &_SiteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SiteInfo& a, SiteInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SiteInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SiteInfo& from);
  void MergeFrom(const SiteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SiteInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "page_info.proto.SiteInfo";
  }
  protected:
  explicit SiteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstSeenFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kMoreAboutFieldNumber = 3,
  };
  // optional .page_info.proto.SiteFirstSeen first_seen = 1;
  bool has_first_seen() const;
  private:
  bool _internal_has_first_seen() const;
  public:
  void clear_first_seen();
  const ::page_info::proto::SiteFirstSeen& first_seen() const;
  PROTOBUF_NODISCARD ::page_info::proto::SiteFirstSeen* release_first_seen();
  ::page_info::proto::SiteFirstSeen* mutable_first_seen();
  void set_allocated_first_seen(::page_info::proto::SiteFirstSeen* first_seen);
  private:
  const ::page_info::proto::SiteFirstSeen& _internal_first_seen() const;
  ::page_info::proto::SiteFirstSeen* _internal_mutable_first_seen();
  public:
  void unsafe_arena_set_allocated_first_seen(
      ::page_info::proto::SiteFirstSeen* first_seen);
  ::page_info::proto::SiteFirstSeen* unsafe_arena_release_first_seen();

  // optional .page_info.proto.SiteDescription description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::page_info::proto::SiteDescription& description() const;
  PROTOBUF_NODISCARD ::page_info::proto::SiteDescription* release_description();
  ::page_info::proto::SiteDescription* mutable_description();
  void set_allocated_description(::page_info::proto::SiteDescription* description);
  private:
  const ::page_info::proto::SiteDescription& _internal_description() const;
  ::page_info::proto::SiteDescription* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::page_info::proto::SiteDescription* description);
  ::page_info::proto::SiteDescription* unsafe_arena_release_description();

  // optional .page_info.proto.MoreAbout more_about = 3;
  bool has_more_about() const;
  private:
  bool _internal_has_more_about() const;
  public:
  void clear_more_about();
  const ::page_info::proto::MoreAbout& more_about() const;
  PROTOBUF_NODISCARD ::page_info::proto::MoreAbout* release_more_about();
  ::page_info::proto::MoreAbout* mutable_more_about();
  void set_allocated_more_about(::page_info::proto::MoreAbout* more_about);
  private:
  const ::page_info::proto::MoreAbout& _internal_more_about() const;
  ::page_info::proto::MoreAbout* _internal_mutable_more_about();
  public:
  void unsafe_arena_set_allocated_more_about(
      ::page_info::proto::MoreAbout* more_about);
  ::page_info::proto::MoreAbout* unsafe_arena_release_more_about();

  // @@protoc_insertion_point(class_scope:page_info.proto.SiteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::page_info::proto::SiteFirstSeen* first_seen_;
  ::page_info::proto::SiteDescription* description_;
  ::page_info::proto::MoreAbout* more_about_;
  friend struct ::TableStruct_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BannerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:page_info.proto.BannerInfo) */ {
 public:
  inline BannerInfo() : BannerInfo(nullptr) {}
  ~BannerInfo() override;
  explicit PROTOBUF_CONSTEXPR BannerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BannerInfo(const BannerInfo& from);
  BannerInfo(BannerInfo&& from) noexcept
    : BannerInfo() {
    *this = ::std::move(from);
  }

  inline BannerInfo& operator=(const BannerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BannerInfo& operator=(BannerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BannerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BannerInfo* internal_default_instance() {
    return reinterpret_cast<const BannerInfo*>(
               &_BannerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BannerInfo& a, BannerInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BannerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BannerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BannerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BannerInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BannerInfo& from);
  void MergeFrom(const BannerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BannerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "page_info.proto.BannerInfo";
  }
  protected:
  explicit BannerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kLabelFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional .page_info.proto.Hyperlink url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const ::page_info::proto::Hyperlink& url() const;
  PROTOBUF_NODISCARD ::page_info::proto::Hyperlink* release_url();
  ::page_info::proto::Hyperlink* mutable_url();
  void set_allocated_url(::page_info::proto::Hyperlink* url);
  private:
  const ::page_info::proto::Hyperlink& _internal_url() const;
  ::page_info::proto::Hyperlink* _internal_mutable_url();
  public:
  void unsafe_arena_set_allocated_url(
      ::page_info::proto::Hyperlink* url);
  ::page_info::proto::Hyperlink* unsafe_arena_release_url();

  // @@protoc_insertion_point(class_scope:page_info.proto.BannerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::page_info::proto::Hyperlink* url_;
  friend struct ::TableStruct_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class AboutThisSiteMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:page_info.proto.AboutThisSiteMetadata) */ {
 public:
  inline AboutThisSiteMetadata() : AboutThisSiteMetadata(nullptr) {}
  ~AboutThisSiteMetadata() override;
  explicit PROTOBUF_CONSTEXPR AboutThisSiteMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AboutThisSiteMetadata(const AboutThisSiteMetadata& from);
  AboutThisSiteMetadata(AboutThisSiteMetadata&& from) noexcept
    : AboutThisSiteMetadata() {
    *this = ::std::move(from);
  }

  inline AboutThisSiteMetadata& operator=(const AboutThisSiteMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline AboutThisSiteMetadata& operator=(AboutThisSiteMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AboutThisSiteMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const AboutThisSiteMetadata* internal_default_instance() {
    return reinterpret_cast<const AboutThisSiteMetadata*>(
               &_AboutThisSiteMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AboutThisSiteMetadata& a, AboutThisSiteMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AboutThisSiteMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AboutThisSiteMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AboutThisSiteMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AboutThisSiteMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AboutThisSiteMetadata& from);
  void MergeFrom(const AboutThisSiteMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AboutThisSiteMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "page_info.proto.AboutThisSiteMetadata";
  }
  protected:
  explicit AboutThisSiteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteInfoFieldNumber = 1,
    kBannerInfoFieldNumber = 2,
  };
  // optional .page_info.proto.SiteInfo site_info = 1;
  bool has_site_info() const;
  private:
  bool _internal_has_site_info() const;
  public:
  void clear_site_info();
  const ::page_info::proto::SiteInfo& site_info() const;
  PROTOBUF_NODISCARD ::page_info::proto::SiteInfo* release_site_info();
  ::page_info::proto::SiteInfo* mutable_site_info();
  void set_allocated_site_info(::page_info::proto::SiteInfo* site_info);
  private:
  const ::page_info::proto::SiteInfo& _internal_site_info() const;
  ::page_info::proto::SiteInfo* _internal_mutable_site_info();
  public:
  void unsafe_arena_set_allocated_site_info(
      ::page_info::proto::SiteInfo* site_info);
  ::page_info::proto::SiteInfo* unsafe_arena_release_site_info();

  // optional .page_info.proto.BannerInfo banner_info = 2;
  bool has_banner_info() const;
  private:
  bool _internal_has_banner_info() const;
  public:
  void clear_banner_info();
  const ::page_info::proto::BannerInfo& banner_info() const;
  PROTOBUF_NODISCARD ::page_info::proto::BannerInfo* release_banner_info();
  ::page_info::proto::BannerInfo* mutable_banner_info();
  void set_allocated_banner_info(::page_info::proto::BannerInfo* banner_info);
  private:
  const ::page_info::proto::BannerInfo& _internal_banner_info() const;
  ::page_info::proto::BannerInfo* _internal_mutable_banner_info();
  public:
  void unsafe_arena_set_allocated_banner_info(
      ::page_info::proto::BannerInfo* banner_info);
  ::page_info::proto::BannerInfo* unsafe_arena_release_banner_info();

  // @@protoc_insertion_point(class_scope:page_info.proto.AboutThisSiteMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::page_info::proto::SiteInfo* site_info_;
  ::page_info::proto::BannerInfo* banner_info_;
  friend struct ::TableStruct_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteFirstSeen

// optional int32 count = 1;
inline bool SiteFirstSeen::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteFirstSeen::has_count() const {
  return _internal_has_count();
}
inline void SiteFirstSeen::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SiteFirstSeen::_internal_count() const {
  return count_;
}
inline int32_t SiteFirstSeen::count() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteFirstSeen.count)
  return _internal_count();
}
inline void SiteFirstSeen::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void SiteFirstSeen::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:page_info.proto.SiteFirstSeen.count)
}

// optional .page_info.proto.DurationUnit unit = 2;
inline bool SiteFirstSeen::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteFirstSeen::has_unit() const {
  return _internal_has_unit();
}
inline void SiteFirstSeen::clear_unit() {
  unit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::page_info::proto::DurationUnit SiteFirstSeen::_internal_unit() const {
  return static_cast< ::page_info::proto::DurationUnit >(unit_);
}
inline ::page_info::proto::DurationUnit SiteFirstSeen::unit() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteFirstSeen.unit)
  return _internal_unit();
}
inline void SiteFirstSeen::_internal_set_unit(::page_info::proto::DurationUnit value) {
  assert(::page_info::proto::DurationUnit_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  unit_ = value;
}
inline void SiteFirstSeen::set_unit(::page_info::proto::DurationUnit value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:page_info.proto.SiteFirstSeen.unit)
}

// optional .page_info.proto.DurationPrecision precision = 3;
inline bool SiteFirstSeen::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteFirstSeen::has_precision() const {
  return _internal_has_precision();
}
inline void SiteFirstSeen::clear_precision() {
  precision_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::page_info::proto::DurationPrecision SiteFirstSeen::_internal_precision() const {
  return static_cast< ::page_info::proto::DurationPrecision >(precision_);
}
inline ::page_info::proto::DurationPrecision SiteFirstSeen::precision() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteFirstSeen.precision)
  return _internal_precision();
}
inline void SiteFirstSeen::_internal_set_precision(::page_info::proto::DurationPrecision value) {
  assert(::page_info::proto::DurationPrecision_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  precision_ = value;
}
inline void SiteFirstSeen::set_precision(::page_info::proto::DurationPrecision value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:page_info.proto.SiteFirstSeen.precision)
}

// -------------------------------------------------------------------

// SiteDescription

// optional string name = 1;
inline bool SiteDescription::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteDescription::has_name() const {
  return _internal_has_name();
}
inline void SiteDescription::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteDescription::name() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteDescription.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteDescription::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.SiteDescription.name)
}
inline std::string* SiteDescription::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:page_info.proto.SiteDescription.name)
  return _s;
}
inline const std::string& SiteDescription::_internal_name() const {
  return name_.Get();
}
inline void SiteDescription::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteDescription::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteDescription::release_name() {
  // @@protoc_insertion_point(field_release:page_info.proto.SiteDescription.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.SiteDescription.name)
}

// optional string subtitle = 5;
inline bool SiteDescription::_internal_has_subtitle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteDescription::has_subtitle() const {
  return _internal_has_subtitle();
}
inline void SiteDescription::clear_subtitle() {
  subtitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SiteDescription::subtitle() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteDescription.subtitle)
  return _internal_subtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteDescription::set_subtitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 subtitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.SiteDescription.subtitle)
}
inline std::string* SiteDescription::mutable_subtitle() {
  std::string* _s = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:page_info.proto.SiteDescription.subtitle)
  return _s;
}
inline const std::string& SiteDescription::_internal_subtitle() const {
  return subtitle_.Get();
}
inline void SiteDescription::_internal_set_subtitle(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  subtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteDescription::_internal_mutable_subtitle() {
  _has_bits_[0] |= 0x00000008u;
  return subtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteDescription::release_subtitle() {
  // @@protoc_insertion_point(field_release:page_info.proto.SiteDescription.subtitle)
  if (!_internal_has_subtitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = subtitle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subtitle_.IsDefault()) {
    subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteDescription::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  subtitle_.SetAllocated(subtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subtitle_.IsDefault()) {
    subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.SiteDescription.subtitle)
}

// optional string description = 2;
inline bool SiteDescription::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteDescription::has_description() const {
  return _internal_has_description();
}
inline void SiteDescription::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SiteDescription::description() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteDescription.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteDescription::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.SiteDescription.description)
}
inline std::string* SiteDescription::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:page_info.proto.SiteDescription.description)
  return _s;
}
inline const std::string& SiteDescription::_internal_description() const {
  return description_.Get();
}
inline void SiteDescription::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteDescription::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteDescription::release_description() {
  // @@protoc_insertion_point(field_release:page_info.proto.SiteDescription.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteDescription::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.SiteDescription.description)
}

// optional .page_info.proto.Hyperlink source = 3;
inline bool SiteDescription::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || source_ != nullptr);
  return value;
}
inline bool SiteDescription::has_source() const {
  return _internal_has_source();
}
inline void SiteDescription::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::page_info::proto::Hyperlink& SiteDescription::_internal_source() const {
  const ::page_info::proto::Hyperlink* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::page_info::proto::Hyperlink&>(
      ::page_info::proto::_Hyperlink_default_instance_);
}
inline const ::page_info::proto::Hyperlink& SiteDescription::source() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteDescription.source)
  return _internal_source();
}
inline void SiteDescription::unsafe_arena_set_allocated_source(
    ::page_info::proto::Hyperlink* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:page_info.proto.SiteDescription.source)
}
inline ::page_info::proto::Hyperlink* SiteDescription::release_source() {
  _has_bits_[0] &= ~0x00000010u;
  ::page_info::proto::Hyperlink* temp = source_;
  source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::page_info::proto::Hyperlink* SiteDescription::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:page_info.proto.SiteDescription.source)
  _has_bits_[0] &= ~0x00000010u;
  ::page_info::proto::Hyperlink* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::page_info::proto::Hyperlink* SiteDescription::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000010u;
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::page_info::proto::Hyperlink>(GetArenaForAllocation());
    source_ = p;
  }
  return source_;
}
inline ::page_info::proto::Hyperlink* SiteDescription::mutable_source() {
  ::page_info::proto::Hyperlink* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:page_info.proto.SiteDescription.source)
  return _msg;
}
inline void SiteDescription::set_allocated_source(::page_info::proto::Hyperlink* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.SiteDescription.source)
}

// optional string lang = 4;
inline bool SiteDescription::_internal_has_lang() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteDescription::has_lang() const {
  return _internal_has_lang();
}
inline void SiteDescription::clear_lang() {
  lang_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SiteDescription::lang() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteDescription.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteDescription::set_lang(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 lang_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.SiteDescription.lang)
}
inline std::string* SiteDescription::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:page_info.proto.SiteDescription.lang)
  return _s;
}
inline const std::string& SiteDescription::_internal_lang() const {
  return lang_.Get();
}
inline void SiteDescription::_internal_set_lang(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  lang_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteDescription::_internal_mutable_lang() {
  _has_bits_[0] |= 0x00000004u;
  return lang_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteDescription::release_lang() {
  // @@protoc_insertion_point(field_release:page_info.proto.SiteDescription.lang)
  if (!_internal_has_lang()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = lang_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault()) {
    lang_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteDescription::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lang_.SetAllocated(lang, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault()) {
    lang_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.SiteDescription.lang)
}

// -------------------------------------------------------------------

// Hyperlink

// optional string label = 1;
inline bool Hyperlink::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Hyperlink::has_label() const {
  return _internal_has_label();
}
inline void Hyperlink::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Hyperlink::label() const {
  // @@protoc_insertion_point(field_get:page_info.proto.Hyperlink.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Hyperlink::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.Hyperlink.label)
}
inline std::string* Hyperlink::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:page_info.proto.Hyperlink.label)
  return _s;
}
inline const std::string& Hyperlink::_internal_label() const {
  return label_.Get();
}
inline void Hyperlink::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(value, GetArenaForAllocation());
}
inline std::string* Hyperlink::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(GetArenaForAllocation());
}
inline std::string* Hyperlink::release_label() {
  // @@protoc_insertion_point(field_release:page_info.proto.Hyperlink.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Hyperlink::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.Hyperlink.label)
}

// optional string url = 2;
inline bool Hyperlink::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Hyperlink::has_url() const {
  return _internal_has_url();
}
inline void Hyperlink::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Hyperlink::url() const {
  // @@protoc_insertion_point(field_get:page_info.proto.Hyperlink.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Hyperlink::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.Hyperlink.url)
}
inline std::string* Hyperlink::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:page_info.proto.Hyperlink.url)
  return _s;
}
inline const std::string& Hyperlink::_internal_url() const {
  return url_.Get();
}
inline void Hyperlink::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* Hyperlink::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* Hyperlink::release_url() {
  // @@protoc_insertion_point(field_release:page_info.proto.Hyperlink.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Hyperlink::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.Hyperlink.url)
}

// -------------------------------------------------------------------

// MoreAbout

// optional string url = 1;
inline bool MoreAbout::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MoreAbout::has_url() const {
  return _internal_has_url();
}
inline void MoreAbout::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MoreAbout::url() const {
  // @@protoc_insertion_point(field_get:page_info.proto.MoreAbout.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoreAbout::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.MoreAbout.url)
}
inline std::string* MoreAbout::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:page_info.proto.MoreAbout.url)
  return _s;
}
inline const std::string& MoreAbout::_internal_url() const {
  return url_.Get();
}
inline void MoreAbout::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* MoreAbout::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* MoreAbout::release_url() {
  // @@protoc_insertion_point(field_release:page_info.proto.MoreAbout.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MoreAbout::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.MoreAbout.url)
}

// -------------------------------------------------------------------

// SiteInfo

// optional .page_info.proto.SiteFirstSeen first_seen = 1;
inline bool SiteInfo::_internal_has_first_seen() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || first_seen_ != nullptr);
  return value;
}
inline bool SiteInfo::has_first_seen() const {
  return _internal_has_first_seen();
}
inline void SiteInfo::clear_first_seen() {
  if (first_seen_ != nullptr) first_seen_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::page_info::proto::SiteFirstSeen& SiteInfo::_internal_first_seen() const {
  const ::page_info::proto::SiteFirstSeen* p = first_seen_;
  return p != nullptr ? *p : reinterpret_cast<const ::page_info::proto::SiteFirstSeen&>(
      ::page_info::proto::_SiteFirstSeen_default_instance_);
}
inline const ::page_info::proto::SiteFirstSeen& SiteInfo::first_seen() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteInfo.first_seen)
  return _internal_first_seen();
}
inline void SiteInfo::unsafe_arena_set_allocated_first_seen(
    ::page_info::proto::SiteFirstSeen* first_seen) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_seen_);
  }
  first_seen_ = first_seen;
  if (first_seen) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:page_info.proto.SiteInfo.first_seen)
}
inline ::page_info::proto::SiteFirstSeen* SiteInfo::release_first_seen() {
  _has_bits_[0] &= ~0x00000001u;
  ::page_info::proto::SiteFirstSeen* temp = first_seen_;
  first_seen_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::page_info::proto::SiteFirstSeen* SiteInfo::unsafe_arena_release_first_seen() {
  // @@protoc_insertion_point(field_release:page_info.proto.SiteInfo.first_seen)
  _has_bits_[0] &= ~0x00000001u;
  ::page_info::proto::SiteFirstSeen* temp = first_seen_;
  first_seen_ = nullptr;
  return temp;
}
inline ::page_info::proto::SiteFirstSeen* SiteInfo::_internal_mutable_first_seen() {
  _has_bits_[0] |= 0x00000001u;
  if (first_seen_ == nullptr) {
    auto* p = CreateMaybeMessage<::page_info::proto::SiteFirstSeen>(GetArenaForAllocation());
    first_seen_ = p;
  }
  return first_seen_;
}
inline ::page_info::proto::SiteFirstSeen* SiteInfo::mutable_first_seen() {
  ::page_info::proto::SiteFirstSeen* _msg = _internal_mutable_first_seen();
  // @@protoc_insertion_point(field_mutable:page_info.proto.SiteInfo.first_seen)
  return _msg;
}
inline void SiteInfo::set_allocated_first_seen(::page_info::proto::SiteFirstSeen* first_seen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete first_seen_;
  }
  if (first_seen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(first_seen);
    if (message_arena != submessage_arena) {
      first_seen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_seen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_seen_ = first_seen;
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.SiteInfo.first_seen)
}

// optional .page_info.proto.SiteDescription description = 2;
inline bool SiteInfo::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || description_ != nullptr);
  return value;
}
inline bool SiteInfo::has_description() const {
  return _internal_has_description();
}
inline void SiteInfo::clear_description() {
  if (description_ != nullptr) description_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::page_info::proto::SiteDescription& SiteInfo::_internal_description() const {
  const ::page_info::proto::SiteDescription* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const ::page_info::proto::SiteDescription&>(
      ::page_info::proto::_SiteDescription_default_instance_);
}
inline const ::page_info::proto::SiteDescription& SiteInfo::description() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteInfo.description)
  return _internal_description();
}
inline void SiteInfo::unsafe_arena_set_allocated_description(
    ::page_info::proto::SiteDescription* description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:page_info.proto.SiteInfo.description)
}
inline ::page_info::proto::SiteDescription* SiteInfo::release_description() {
  _has_bits_[0] &= ~0x00000002u;
  ::page_info::proto::SiteDescription* temp = description_;
  description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::page_info::proto::SiteDescription* SiteInfo::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:page_info.proto.SiteInfo.description)
  _has_bits_[0] &= ~0x00000002u;
  ::page_info::proto::SiteDescription* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::page_info::proto::SiteDescription* SiteInfo::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::page_info::proto::SiteDescription>(GetArenaForAllocation());
    description_ = p;
  }
  return description_;
}
inline ::page_info::proto::SiteDescription* SiteInfo::mutable_description() {
  ::page_info::proto::SiteDescription* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:page_info.proto.SiteInfo.description)
  return _msg;
}
inline void SiteInfo::set_allocated_description(::page_info::proto::SiteDescription* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(description);
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.SiteInfo.description)
}

// optional .page_info.proto.MoreAbout more_about = 3;
inline bool SiteInfo::_internal_has_more_about() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || more_about_ != nullptr);
  return value;
}
inline bool SiteInfo::has_more_about() const {
  return _internal_has_more_about();
}
inline void SiteInfo::clear_more_about() {
  if (more_about_ != nullptr) more_about_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::page_info::proto::MoreAbout& SiteInfo::_internal_more_about() const {
  const ::page_info::proto::MoreAbout* p = more_about_;
  return p != nullptr ? *p : reinterpret_cast<const ::page_info::proto::MoreAbout&>(
      ::page_info::proto::_MoreAbout_default_instance_);
}
inline const ::page_info::proto::MoreAbout& SiteInfo::more_about() const {
  // @@protoc_insertion_point(field_get:page_info.proto.SiteInfo.more_about)
  return _internal_more_about();
}
inline void SiteInfo::unsafe_arena_set_allocated_more_about(
    ::page_info::proto::MoreAbout* more_about) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(more_about_);
  }
  more_about_ = more_about;
  if (more_about) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:page_info.proto.SiteInfo.more_about)
}
inline ::page_info::proto::MoreAbout* SiteInfo::release_more_about() {
  _has_bits_[0] &= ~0x00000004u;
  ::page_info::proto::MoreAbout* temp = more_about_;
  more_about_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::page_info::proto::MoreAbout* SiteInfo::unsafe_arena_release_more_about() {
  // @@protoc_insertion_point(field_release:page_info.proto.SiteInfo.more_about)
  _has_bits_[0] &= ~0x00000004u;
  ::page_info::proto::MoreAbout* temp = more_about_;
  more_about_ = nullptr;
  return temp;
}
inline ::page_info::proto::MoreAbout* SiteInfo::_internal_mutable_more_about() {
  _has_bits_[0] |= 0x00000004u;
  if (more_about_ == nullptr) {
    auto* p = CreateMaybeMessage<::page_info::proto::MoreAbout>(GetArenaForAllocation());
    more_about_ = p;
  }
  return more_about_;
}
inline ::page_info::proto::MoreAbout* SiteInfo::mutable_more_about() {
  ::page_info::proto::MoreAbout* _msg = _internal_mutable_more_about();
  // @@protoc_insertion_point(field_mutable:page_info.proto.SiteInfo.more_about)
  return _msg;
}
inline void SiteInfo::set_allocated_more_about(::page_info::proto::MoreAbout* more_about) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete more_about_;
  }
  if (more_about) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(more_about);
    if (message_arena != submessage_arena) {
      more_about = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, more_about, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  more_about_ = more_about;
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.SiteInfo.more_about)
}

// -------------------------------------------------------------------

// BannerInfo

// optional string title = 1;
inline bool BannerInfo::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BannerInfo::has_title() const {
  return _internal_has_title();
}
inline void BannerInfo::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BannerInfo::title() const {
  // @@protoc_insertion_point(field_get:page_info.proto.BannerInfo.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BannerInfo::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.BannerInfo.title)
}
inline std::string* BannerInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:page_info.proto.BannerInfo.title)
  return _s;
}
inline const std::string& BannerInfo::_internal_title() const {
  return title_.Get();
}
inline void BannerInfo::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* BannerInfo::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* BannerInfo::release_title() {
  // @@protoc_insertion_point(field_release:page_info.proto.BannerInfo.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BannerInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.BannerInfo.title)
}

// optional string label = 2;
inline bool BannerInfo::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BannerInfo::has_label() const {
  return _internal_has_label();
}
inline void BannerInfo::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BannerInfo::label() const {
  // @@protoc_insertion_point(field_get:page_info.proto.BannerInfo.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BannerInfo::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:page_info.proto.BannerInfo.label)
}
inline std::string* BannerInfo::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:page_info.proto.BannerInfo.label)
  return _s;
}
inline const std::string& BannerInfo::_internal_label() const {
  return label_.Get();
}
inline void BannerInfo::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(value, GetArenaForAllocation());
}
inline std::string* BannerInfo::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(GetArenaForAllocation());
}
inline std::string* BannerInfo::release_label() {
  // @@protoc_insertion_point(field_release:page_info.proto.BannerInfo.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BannerInfo::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.BannerInfo.label)
}

// optional .page_info.proto.Hyperlink url = 3;
inline bool BannerInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || url_ != nullptr);
  return value;
}
inline bool BannerInfo::has_url() const {
  return _internal_has_url();
}
inline void BannerInfo::clear_url() {
  if (url_ != nullptr) url_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::page_info::proto::Hyperlink& BannerInfo::_internal_url() const {
  const ::page_info::proto::Hyperlink* p = url_;
  return p != nullptr ? *p : reinterpret_cast<const ::page_info::proto::Hyperlink&>(
      ::page_info::proto::_Hyperlink_default_instance_);
}
inline const ::page_info::proto::Hyperlink& BannerInfo::url() const {
  // @@protoc_insertion_point(field_get:page_info.proto.BannerInfo.url)
  return _internal_url();
}
inline void BannerInfo::unsafe_arena_set_allocated_url(
    ::page_info::proto::Hyperlink* url) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(url_);
  }
  url_ = url;
  if (url) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:page_info.proto.BannerInfo.url)
}
inline ::page_info::proto::Hyperlink* BannerInfo::release_url() {
  _has_bits_[0] &= ~0x00000004u;
  ::page_info::proto::Hyperlink* temp = url_;
  url_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::page_info::proto::Hyperlink* BannerInfo::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_release:page_info.proto.BannerInfo.url)
  _has_bits_[0] &= ~0x00000004u;
  ::page_info::proto::Hyperlink* temp = url_;
  url_ = nullptr;
  return temp;
}
inline ::page_info::proto::Hyperlink* BannerInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  if (url_ == nullptr) {
    auto* p = CreateMaybeMessage<::page_info::proto::Hyperlink>(GetArenaForAllocation());
    url_ = p;
  }
  return url_;
}
inline ::page_info::proto::Hyperlink* BannerInfo::mutable_url() {
  ::page_info::proto::Hyperlink* _msg = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:page_info.proto.BannerInfo.url)
  return _msg;
}
inline void BannerInfo::set_allocated_url(::page_info::proto::Hyperlink* url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete url_;
  }
  if (url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(url);
    if (message_arena != submessage_arena) {
      url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_ = url;
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.BannerInfo.url)
}

// -------------------------------------------------------------------

// AboutThisSiteMetadata

// optional .page_info.proto.SiteInfo site_info = 1;
inline bool AboutThisSiteMetadata::_internal_has_site_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || site_info_ != nullptr);
  return value;
}
inline bool AboutThisSiteMetadata::has_site_info() const {
  return _internal_has_site_info();
}
inline void AboutThisSiteMetadata::clear_site_info() {
  if (site_info_ != nullptr) site_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::page_info::proto::SiteInfo& AboutThisSiteMetadata::_internal_site_info() const {
  const ::page_info::proto::SiteInfo* p = site_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::page_info::proto::SiteInfo&>(
      ::page_info::proto::_SiteInfo_default_instance_);
}
inline const ::page_info::proto::SiteInfo& AboutThisSiteMetadata::site_info() const {
  // @@protoc_insertion_point(field_get:page_info.proto.AboutThisSiteMetadata.site_info)
  return _internal_site_info();
}
inline void AboutThisSiteMetadata::unsafe_arena_set_allocated_site_info(
    ::page_info::proto::SiteInfo* site_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_info_);
  }
  site_info_ = site_info;
  if (site_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:page_info.proto.AboutThisSiteMetadata.site_info)
}
inline ::page_info::proto::SiteInfo* AboutThisSiteMetadata::release_site_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::page_info::proto::SiteInfo* temp = site_info_;
  site_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::page_info::proto::SiteInfo* AboutThisSiteMetadata::unsafe_arena_release_site_info() {
  // @@protoc_insertion_point(field_release:page_info.proto.AboutThisSiteMetadata.site_info)
  _has_bits_[0] &= ~0x00000001u;
  ::page_info::proto::SiteInfo* temp = site_info_;
  site_info_ = nullptr;
  return temp;
}
inline ::page_info::proto::SiteInfo* AboutThisSiteMetadata::_internal_mutable_site_info() {
  _has_bits_[0] |= 0x00000001u;
  if (site_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::page_info::proto::SiteInfo>(GetArenaForAllocation());
    site_info_ = p;
  }
  return site_info_;
}
inline ::page_info::proto::SiteInfo* AboutThisSiteMetadata::mutable_site_info() {
  ::page_info::proto::SiteInfo* _msg = _internal_mutable_site_info();
  // @@protoc_insertion_point(field_mutable:page_info.proto.AboutThisSiteMetadata.site_info)
  return _msg;
}
inline void AboutThisSiteMetadata::set_allocated_site_info(::page_info::proto::SiteInfo* site_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete site_info_;
  }
  if (site_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(site_info);
    if (message_arena != submessage_arena) {
      site_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  site_info_ = site_info;
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.AboutThisSiteMetadata.site_info)
}

// optional .page_info.proto.BannerInfo banner_info = 2;
inline bool AboutThisSiteMetadata::_internal_has_banner_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || banner_info_ != nullptr);
  return value;
}
inline bool AboutThisSiteMetadata::has_banner_info() const {
  return _internal_has_banner_info();
}
inline void AboutThisSiteMetadata::clear_banner_info() {
  if (banner_info_ != nullptr) banner_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::page_info::proto::BannerInfo& AboutThisSiteMetadata::_internal_banner_info() const {
  const ::page_info::proto::BannerInfo* p = banner_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::page_info::proto::BannerInfo&>(
      ::page_info::proto::_BannerInfo_default_instance_);
}
inline const ::page_info::proto::BannerInfo& AboutThisSiteMetadata::banner_info() const {
  // @@protoc_insertion_point(field_get:page_info.proto.AboutThisSiteMetadata.banner_info)
  return _internal_banner_info();
}
inline void AboutThisSiteMetadata::unsafe_arena_set_allocated_banner_info(
    ::page_info::proto::BannerInfo* banner_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(banner_info_);
  }
  banner_info_ = banner_info;
  if (banner_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:page_info.proto.AboutThisSiteMetadata.banner_info)
}
inline ::page_info::proto::BannerInfo* AboutThisSiteMetadata::release_banner_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::page_info::proto::BannerInfo* temp = banner_info_;
  banner_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::page_info::proto::BannerInfo* AboutThisSiteMetadata::unsafe_arena_release_banner_info() {
  // @@protoc_insertion_point(field_release:page_info.proto.AboutThisSiteMetadata.banner_info)
  _has_bits_[0] &= ~0x00000002u;
  ::page_info::proto::BannerInfo* temp = banner_info_;
  banner_info_ = nullptr;
  return temp;
}
inline ::page_info::proto::BannerInfo* AboutThisSiteMetadata::_internal_mutable_banner_info() {
  _has_bits_[0] |= 0x00000002u;
  if (banner_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::page_info::proto::BannerInfo>(GetArenaForAllocation());
    banner_info_ = p;
  }
  return banner_info_;
}
inline ::page_info::proto::BannerInfo* AboutThisSiteMetadata::mutable_banner_info() {
  ::page_info::proto::BannerInfo* _msg = _internal_mutable_banner_info();
  // @@protoc_insertion_point(field_mutable:page_info.proto.AboutThisSiteMetadata.banner_info)
  return _msg;
}
inline void AboutThisSiteMetadata::set_allocated_banner_info(::page_info::proto::BannerInfo* banner_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete banner_info_;
  }
  if (banner_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(banner_info);
    if (message_arena != submessage_arena) {
      banner_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, banner_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  banner_info_ = banner_info;
  // @@protoc_insertion_point(field_set_allocated:page_info.proto.AboutThisSiteMetadata.banner_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace page_info

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::page_info::proto::DurationUnit> : ::std::true_type {};
template <> struct is_proto_enum< ::page_info::proto::DurationPrecision> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fpage_5finfo_2fcore_2fproto_2fabout_5fthis_5fsite_5fmetadata_2eproto
