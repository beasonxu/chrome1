// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/page_info/core/proto/about_this_site_metadata.proto

#include "components/page_info/core/proto/about_this_site_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace page_info {
namespace proto {
PROTOBUF_CONSTEXPR SiteFirstSeen::SiteFirstSeen(
    ::_pbi::ConstantInitialized)
  : count_(0)
  , unit_(0)

  , precision_(0)
{}
struct SiteFirstSeenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteFirstSeenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteFirstSeenDefaultTypeInternal() {}
  union {
    SiteFirstSeen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteFirstSeenDefaultTypeInternal _SiteFirstSeen_default_instance_;
PROTOBUF_CONSTEXPR SiteDescription::SiteDescription(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , lang_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , subtitle_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_(nullptr){}
struct SiteDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteDescriptionDefaultTypeInternal() {}
  union {
    SiteDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteDescriptionDefaultTypeInternal _SiteDescription_default_instance_;
PROTOBUF_CONSTEXPR Hyperlink::Hyperlink(
    ::_pbi::ConstantInitialized)
  : label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct HyperlinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HyperlinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HyperlinkDefaultTypeInternal() {}
  union {
    Hyperlink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HyperlinkDefaultTypeInternal _Hyperlink_default_instance_;
PROTOBUF_CONSTEXPR MoreAbout::MoreAbout(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MoreAboutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoreAboutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoreAboutDefaultTypeInternal() {}
  union {
    MoreAbout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoreAboutDefaultTypeInternal _MoreAbout_default_instance_;
PROTOBUF_CONSTEXPR SiteInfo::SiteInfo(
    ::_pbi::ConstantInitialized)
  : first_seen_(nullptr)
  , description_(nullptr)
  , more_about_(nullptr){}
struct SiteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteInfoDefaultTypeInternal() {}
  union {
    SiteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteInfoDefaultTypeInternal _SiteInfo_default_instance_;
PROTOBUF_CONSTEXPR BannerInfo::BannerInfo(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(nullptr){}
struct BannerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BannerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BannerInfoDefaultTypeInternal() {}
  union {
    BannerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BannerInfoDefaultTypeInternal _BannerInfo_default_instance_;
PROTOBUF_CONSTEXPR AboutThisSiteMetadata::AboutThisSiteMetadata(
    ::_pbi::ConstantInitialized)
  : site_info_(nullptr)
  , banner_info_(nullptr){}
struct AboutThisSiteMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AboutThisSiteMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AboutThisSiteMetadataDefaultTypeInternal() {}
  union {
    AboutThisSiteMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AboutThisSiteMetadataDefaultTypeInternal _AboutThisSiteMetadata_default_instance_;
}  // namespace proto
}  // namespace page_info
namespace page_info {
namespace proto {
bool DurationUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DurationUnit_strings[5] = {};

static const char DurationUnit_names[] =
  "UNIT_DAYS"
  "UNIT_MONTHS"
  "UNIT_UNSPECIFIED"
  "UNIT_WEEKS"
  "UNIT_YEARS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DurationUnit_entries[] = {
  { {DurationUnit_names + 0, 9}, 1 },
  { {DurationUnit_names + 9, 11}, 3 },
  { {DurationUnit_names + 20, 16}, 0 },
  { {DurationUnit_names + 36, 10}, 2 },
  { {DurationUnit_names + 46, 10}, 4 },
};

static const int DurationUnit_entries_by_number[] = {
  2, // 0 -> UNIT_UNSPECIFIED
  0, // 1 -> UNIT_DAYS
  3, // 2 -> UNIT_WEEKS
  1, // 3 -> UNIT_MONTHS
  4, // 4 -> UNIT_YEARS
};

const std::string& DurationUnit_Name(
    DurationUnit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DurationUnit_entries,
          DurationUnit_entries_by_number,
          5, DurationUnit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DurationUnit_entries,
      DurationUnit_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DurationUnit_strings[idx].get();
}
bool DurationUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DurationUnit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DurationUnit_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DurationUnit>(int_value);
  }
  return success;
}
bool DurationPrecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DurationPrecision_strings[4] = {};

static const char DurationPrecision_names[] =
  "PRECISION_ABOUT"
  "PRECISION_LESS_THAN"
  "PRECISION_MORE_THAN"
  "PRECISION_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DurationPrecision_entries[] = {
  { {DurationPrecision_names + 0, 15}, 1 },
  { {DurationPrecision_names + 15, 19}, 2 },
  { {DurationPrecision_names + 34, 19}, 3 },
  { {DurationPrecision_names + 53, 21}, 0 },
};

static const int DurationPrecision_entries_by_number[] = {
  3, // 0 -> PRECISION_UNSPECIFIED
  0, // 1 -> PRECISION_ABOUT
  1, // 2 -> PRECISION_LESS_THAN
  2, // 3 -> PRECISION_MORE_THAN
};

const std::string& DurationPrecision_Name(
    DurationPrecision value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DurationPrecision_entries,
          DurationPrecision_entries_by_number,
          4, DurationPrecision_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DurationPrecision_entries,
      DurationPrecision_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DurationPrecision_strings[idx].get();
}
bool DurationPrecision_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DurationPrecision* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DurationPrecision_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DurationPrecision>(int_value);
  }
  return success;
}

// ===================================================================

class SiteFirstSeen::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteFirstSeen>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SiteFirstSeen::SiteFirstSeen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:page_info.proto.SiteFirstSeen)
}
SiteFirstSeen::SiteFirstSeen(const SiteFirstSeen& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&count_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:page_info.proto.SiteFirstSeen)
}

inline void SiteFirstSeen::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&count_)) + sizeof(precision_));
}

SiteFirstSeen::~SiteFirstSeen() {
  // @@protoc_insertion_point(destructor:page_info.proto.SiteFirstSeen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteFirstSeen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteFirstSeen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteFirstSeen::Clear() {
// @@protoc_insertion_point(message_clear_start:page_info.proto.SiteFirstSeen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&precision_) -
        reinterpret_cast<char*>(&count_)) + sizeof(precision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SiteFirstSeen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .page_info.proto.DurationUnit unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::page_info::proto::DurationUnit_IsValid(val))) {
            _internal_set_unit(static_cast<::page_info::proto::DurationUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .page_info.proto.DurationPrecision precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::page_info::proto::DurationPrecision_IsValid(val))) {
            _internal_set_precision(static_cast<::page_info::proto::DurationPrecision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteFirstSeen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:page_info.proto.SiteFirstSeen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // optional .page_info.proto.DurationUnit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_unit(), target);
  }

  // optional .page_info.proto.DurationPrecision precision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:page_info.proto.SiteFirstSeen)
  return target;
}

size_t SiteFirstSeen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:page_info.proto.SiteFirstSeen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional .page_info.proto.DurationUnit unit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_unit());
    }

    // optional .page_info.proto.DurationPrecision precision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_precision());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteFirstSeen::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SiteFirstSeen*>(
      &from));
}

void SiteFirstSeen::MergeFrom(const SiteFirstSeen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:page_info.proto.SiteFirstSeen)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00000004u) {
      precision_ = from.precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SiteFirstSeen::CopyFrom(const SiteFirstSeen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:page_info.proto.SiteFirstSeen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteFirstSeen::IsInitialized() const {
  return true;
}

void SiteFirstSeen::InternalSwap(SiteFirstSeen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteFirstSeen, precision_)
      + sizeof(SiteFirstSeen::precision_)
      - PROTOBUF_FIELD_OFFSET(SiteFirstSeen, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

std::string SiteFirstSeen::GetTypeName() const {
  return "page_info.proto.SiteFirstSeen";
}


// ===================================================================

class SiteDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteDescription>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::page_info::proto::Hyperlink& source(const SiteDescription* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lang(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::page_info::proto::Hyperlink&
SiteDescription::_Internal::source(const SiteDescription* msg) {
  return *msg->source_;
}
SiteDescription::SiteDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:page_info.proto.SiteDescription)
}
SiteDescription::SiteDescription(const SiteDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lang()) {
    lang_.Set(from._internal_lang(), 
      GetArenaForAllocation());
  }
  subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subtitle()) {
    subtitle_.Set(from._internal_subtitle(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_source()) {
    source_ = new ::page_info::proto::Hyperlink(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:page_info.proto.SiteDescription)
}

inline void SiteDescription::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
lang_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  lang_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subtitle_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subtitle_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_ = nullptr;
}

SiteDescription::~SiteDescription() {
  // @@protoc_insertion_point(destructor:page_info.proto.SiteDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  description_.Destroy();
  lang_.Destroy();
  subtitle_.Destroy();
  if (this != internal_default_instance()) delete source_;
}

void SiteDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:page_info.proto.SiteDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      lang_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      subtitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(source_ != nullptr);
      source_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SiteDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .page_info.proto.Hyperlink source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lang = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string subtitle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:page_info.proto.SiteDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional .page_info.proto.Hyperlink source = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // optional string lang = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lang(), target);
  }

  // optional string subtitle = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subtitle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:page_info.proto.SiteDescription)
  return target;
}

size_t SiteDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:page_info.proto.SiteDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string lang = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lang());
    }

    // optional string subtitle = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subtitle());
    }

    // optional .page_info.proto.Hyperlink source = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteDescription::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SiteDescription*>(
      &from));
}

void SiteDescription::MergeFrom(const SiteDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:page_info.proto.SiteDescription)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_lang(from._internal_lang());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_subtitle(from._internal_subtitle());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_source()->::page_info::proto::Hyperlink::MergeFrom(from._internal_source());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SiteDescription::CopyFrom(const SiteDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:page_info.proto.SiteDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteDescription::IsInitialized() const {
  return true;
}

void SiteDescription::InternalSwap(SiteDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &subtitle_, lhs_arena,
      &other->subtitle_, rhs_arena
  );
  swap(source_, other->source_);
}

std::string SiteDescription::GetTypeName() const {
  return "page_info.proto.SiteDescription";
}


// ===================================================================

class Hyperlink::_Internal {
 public:
  using HasBits = decltype(std::declval<Hyperlink>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Hyperlink::Hyperlink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:page_info.proto.Hyperlink)
}
Hyperlink::Hyperlink(const Hyperlink& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:page_info.proto.Hyperlink)
}

inline void Hyperlink::SharedCtor() {
label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Hyperlink::~Hyperlink() {
  // @@protoc_insertion_point(destructor:page_info.proto.Hyperlink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hyperlink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.Destroy();
  url_.Destroy();
}

void Hyperlink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hyperlink::Clear() {
// @@protoc_insertion_point(message_clear_start:page_info.proto.Hyperlink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Hyperlink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hyperlink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:page_info.proto.Hyperlink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:page_info.proto.Hyperlink)
  return target;
}

size_t Hyperlink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:page_info.proto.Hyperlink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hyperlink::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Hyperlink*>(
      &from));
}

void Hyperlink::MergeFrom(const Hyperlink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:page_info.proto.Hyperlink)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Hyperlink::CopyFrom(const Hyperlink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:page_info.proto.Hyperlink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hyperlink::IsInitialized() const {
  return true;
}

void Hyperlink::InternalSwap(Hyperlink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string Hyperlink::GetTypeName() const {
  return "page_info.proto.Hyperlink";
}


// ===================================================================

class MoreAbout::_Internal {
 public:
  using HasBits = decltype(std::declval<MoreAbout>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MoreAbout::MoreAbout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:page_info.proto.MoreAbout)
}
MoreAbout::MoreAbout(const MoreAbout& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:page_info.proto.MoreAbout)
}

inline void MoreAbout::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoreAbout::~MoreAbout() {
  // @@protoc_insertion_point(destructor:page_info.proto.MoreAbout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoreAbout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void MoreAbout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoreAbout::Clear() {
// @@protoc_insertion_point(message_clear_start:page_info.proto.MoreAbout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MoreAbout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoreAbout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:page_info.proto.MoreAbout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:page_info.proto.MoreAbout)
  return target;
}

size_t MoreAbout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:page_info.proto.MoreAbout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoreAbout::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MoreAbout*>(
      &from));
}

void MoreAbout::MergeFrom(const MoreAbout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:page_info.proto.MoreAbout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MoreAbout::CopyFrom(const MoreAbout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:page_info.proto.MoreAbout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoreAbout::IsInitialized() const {
  return true;
}

void MoreAbout::InternalSwap(MoreAbout* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string MoreAbout::GetTypeName() const {
  return "page_info.proto.MoreAbout";
}


// ===================================================================

class SiteInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteInfo>()._has_bits_);
  static const ::page_info::proto::SiteFirstSeen& first_seen(const SiteInfo* msg);
  static void set_has_first_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::page_info::proto::SiteDescription& description(const SiteInfo* msg);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::page_info::proto::MoreAbout& more_about(const SiteInfo* msg);
  static void set_has_more_about(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::page_info::proto::SiteFirstSeen&
SiteInfo::_Internal::first_seen(const SiteInfo* msg) {
  return *msg->first_seen_;
}
const ::page_info::proto::SiteDescription&
SiteInfo::_Internal::description(const SiteInfo* msg) {
  return *msg->description_;
}
const ::page_info::proto::MoreAbout&
SiteInfo::_Internal::more_about(const SiteInfo* msg) {
  return *msg->more_about_;
}
SiteInfo::SiteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:page_info.proto.SiteInfo)
}
SiteInfo::SiteInfo(const SiteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_first_seen()) {
    first_seen_ = new ::page_info::proto::SiteFirstSeen(*from.first_seen_);
  } else {
    first_seen_ = nullptr;
  }
  if (from._internal_has_description()) {
    description_ = new ::page_info::proto::SiteDescription(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from._internal_has_more_about()) {
    more_about_ = new ::page_info::proto::MoreAbout(*from.more_about_);
  } else {
    more_about_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:page_info.proto.SiteInfo)
}

inline void SiteInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_seen_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&more_about_) -
    reinterpret_cast<char*>(&first_seen_)) + sizeof(more_about_));
}

SiteInfo::~SiteInfo() {
  // @@protoc_insertion_point(destructor:page_info.proto.SiteInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete first_seen_;
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete more_about_;
}

void SiteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:page_info.proto.SiteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(first_seen_ != nullptr);
      first_seen_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(description_ != nullptr);
      description_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(more_about_ != nullptr);
      more_about_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SiteInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .page_info.proto.SiteFirstSeen first_seen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_seen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .page_info.proto.SiteDescription description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .page_info.proto.MoreAbout more_about = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_more_about(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:page_info.proto.SiteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .page_info.proto.SiteFirstSeen first_seen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::first_seen(this),
        _Internal::first_seen(this).GetCachedSize(), target, stream);
  }

  // optional .page_info.proto.SiteDescription description = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::description(this),
        _Internal::description(this).GetCachedSize(), target, stream);
  }

  // optional .page_info.proto.MoreAbout more_about = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::more_about(this),
        _Internal::more_about(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:page_info.proto.SiteInfo)
  return target;
}

size_t SiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:page_info.proto.SiteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .page_info.proto.SiteFirstSeen first_seen = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *first_seen_);
    }

    // optional .page_info.proto.SiteDescription description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *description_);
    }

    // optional .page_info.proto.MoreAbout more_about = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *more_about_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SiteInfo*>(
      &from));
}

void SiteInfo::MergeFrom(const SiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:page_info.proto.SiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_first_seen()->::page_info::proto::SiteFirstSeen::MergeFrom(from._internal_first_seen());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_description()->::page_info::proto::SiteDescription::MergeFrom(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_more_about()->::page_info::proto::MoreAbout::MergeFrom(from._internal_more_about());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SiteInfo::CopyFrom(const SiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:page_info.proto.SiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteInfo::IsInitialized() const {
  return true;
}

void SiteInfo::InternalSwap(SiteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteInfo, more_about_)
      + sizeof(SiteInfo::more_about_)
      - PROTOBUF_FIELD_OFFSET(SiteInfo, first_seen_)>(
          reinterpret_cast<char*>(&first_seen_),
          reinterpret_cast<char*>(&other->first_seen_));
}

std::string SiteInfo::GetTypeName() const {
  return "page_info.proto.SiteInfo";
}


// ===================================================================

class BannerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BannerInfo>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::page_info::proto::Hyperlink& url(const BannerInfo* msg);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::page_info::proto::Hyperlink&
BannerInfo::_Internal::url(const BannerInfo* msg) {
  return *msg->url_;
}
BannerInfo::BannerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:page_info.proto.BannerInfo)
}
BannerInfo::BannerInfo(const BannerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_url()) {
    url_ = new ::page_info::proto::Hyperlink(*from.url_);
  } else {
    url_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:page_info.proto.BannerInfo)
}

inline void BannerInfo::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_ = nullptr;
}

BannerInfo::~BannerInfo() {
  // @@protoc_insertion_point(destructor:page_info.proto.BannerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BannerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  label_.Destroy();
  if (this != internal_default_instance()) delete url_;
}

void BannerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BannerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:page_info.proto.BannerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(url_ != nullptr);
      url_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BannerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .page_info.proto.Hyperlink url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BannerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:page_info.proto.BannerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional .page_info.proto.Hyperlink url = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::url(this),
        _Internal::url(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:page_info.proto.BannerInfo)
  return target;
}

size_t BannerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:page_info.proto.BannerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional .page_info.proto.Hyperlink url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *url_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BannerInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BannerInfo*>(
      &from));
}

void BannerInfo::MergeFrom(const BannerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:page_info.proto.BannerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_url()->::page_info::proto::Hyperlink::MergeFrom(from._internal_url());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BannerInfo::CopyFrom(const BannerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:page_info.proto.BannerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BannerInfo::IsInitialized() const {
  return true;
}

void BannerInfo::InternalSwap(BannerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  swap(url_, other->url_);
}

std::string BannerInfo::GetTypeName() const {
  return "page_info.proto.BannerInfo";
}


// ===================================================================

class AboutThisSiteMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<AboutThisSiteMetadata>()._has_bits_);
  static const ::page_info::proto::SiteInfo& site_info(const AboutThisSiteMetadata* msg);
  static void set_has_site_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::page_info::proto::BannerInfo& banner_info(const AboutThisSiteMetadata* msg);
  static void set_has_banner_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::page_info::proto::SiteInfo&
AboutThisSiteMetadata::_Internal::site_info(const AboutThisSiteMetadata* msg) {
  return *msg->site_info_;
}
const ::page_info::proto::BannerInfo&
AboutThisSiteMetadata::_Internal::banner_info(const AboutThisSiteMetadata* msg) {
  return *msg->banner_info_;
}
AboutThisSiteMetadata::AboutThisSiteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:page_info.proto.AboutThisSiteMetadata)
}
AboutThisSiteMetadata::AboutThisSiteMetadata(const AboutThisSiteMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_site_info()) {
    site_info_ = new ::page_info::proto::SiteInfo(*from.site_info_);
  } else {
    site_info_ = nullptr;
  }
  if (from._internal_has_banner_info()) {
    banner_info_ = new ::page_info::proto::BannerInfo(*from.banner_info_);
  } else {
    banner_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:page_info.proto.AboutThisSiteMetadata)
}

inline void AboutThisSiteMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&site_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&banner_info_) -
    reinterpret_cast<char*>(&site_info_)) + sizeof(banner_info_));
}

AboutThisSiteMetadata::~AboutThisSiteMetadata() {
  // @@protoc_insertion_point(destructor:page_info.proto.AboutThisSiteMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AboutThisSiteMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete site_info_;
  if (this != internal_default_instance()) delete banner_info_;
}

void AboutThisSiteMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AboutThisSiteMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:page_info.proto.AboutThisSiteMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(site_info_ != nullptr);
      site_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(banner_info_ != nullptr);
      banner_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AboutThisSiteMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .page_info.proto.SiteInfo site_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .page_info.proto.BannerInfo banner_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_banner_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AboutThisSiteMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:page_info.proto.AboutThisSiteMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .page_info.proto.SiteInfo site_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::site_info(this),
        _Internal::site_info(this).GetCachedSize(), target, stream);
  }

  // optional .page_info.proto.BannerInfo banner_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::banner_info(this),
        _Internal::banner_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:page_info.proto.AboutThisSiteMetadata)
  return target;
}

size_t AboutThisSiteMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:page_info.proto.AboutThisSiteMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .page_info.proto.SiteInfo site_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *site_info_);
    }

    // optional .page_info.proto.BannerInfo banner_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *banner_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AboutThisSiteMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AboutThisSiteMetadata*>(
      &from));
}

void AboutThisSiteMetadata::MergeFrom(const AboutThisSiteMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:page_info.proto.AboutThisSiteMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_site_info()->::page_info::proto::SiteInfo::MergeFrom(from._internal_site_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_banner_info()->::page_info::proto::BannerInfo::MergeFrom(from._internal_banner_info());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AboutThisSiteMetadata::CopyFrom(const AboutThisSiteMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:page_info.proto.AboutThisSiteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AboutThisSiteMetadata::IsInitialized() const {
  return true;
}

void AboutThisSiteMetadata::InternalSwap(AboutThisSiteMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AboutThisSiteMetadata, banner_info_)
      + sizeof(AboutThisSiteMetadata::banner_info_)
      - PROTOBUF_FIELD_OFFSET(AboutThisSiteMetadata, site_info_)>(
          reinterpret_cast<char*>(&site_info_),
          reinterpret_cast<char*>(&other->site_info_));
}

std::string AboutThisSiteMetadata::GetTypeName() const {
  return "page_info.proto.AboutThisSiteMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace page_info
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::page_info::proto::SiteFirstSeen*
Arena::CreateMaybeMessage< ::page_info::proto::SiteFirstSeen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::page_info::proto::SiteFirstSeen >(arena);
}
template<> PROTOBUF_NOINLINE ::page_info::proto::SiteDescription*
Arena::CreateMaybeMessage< ::page_info::proto::SiteDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::page_info::proto::SiteDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::page_info::proto::Hyperlink*
Arena::CreateMaybeMessage< ::page_info::proto::Hyperlink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::page_info::proto::Hyperlink >(arena);
}
template<> PROTOBUF_NOINLINE ::page_info::proto::MoreAbout*
Arena::CreateMaybeMessage< ::page_info::proto::MoreAbout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::page_info::proto::MoreAbout >(arena);
}
template<> PROTOBUF_NOINLINE ::page_info::proto::SiteInfo*
Arena::CreateMaybeMessage< ::page_info::proto::SiteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::page_info::proto::SiteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::page_info::proto::BannerInfo*
Arena::CreateMaybeMessage< ::page_info::proto::BannerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::page_info::proto::BannerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::page_info::proto::AboutThisSiteMetadata*
Arena::CreateMaybeMessage< ::page_info::proto::AboutThisSiteMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::page_info::proto::AboutThisSiteMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
