// components/web_package/mojom/web_bundle_parser.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/web_package/mojom/web_bundle_parser.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/web_package/mojom/web_bundle_parser.mojom-params-data.h"
#include "components/web_package/mojom/web_bundle_parser.mojom-shared-message-ids.h"

#include "components/web_package/mojom/web_bundle_parser.mojom-import-headers.h"
#include "components/web_package/mojom/web_bundle_parser.mojom-test-utils.h"


#ifndef COMPONENTS_WEB_PACKAGE_MOJOM_WEB_BUNDLE_PARSER_MOJOM_JUMBO_H_
#define COMPONENTS_WEB_PACKAGE_MOJOM_WEB_BUNDLE_PARSER_MOJOM_JUMBO_H_
#endif



namespace web_package {
namespace mojom {
BundleIntegrityBlockParseError::BundleIntegrityBlockParseError()
    : type(),
      message() {}

BundleIntegrityBlockParseError::BundleIntegrityBlockParseError(
    BundleParseErrorType type_in,
    const std::string& message_in)
    : type(std::move(type_in)),
      message(std::move(message_in)) {}

BundleIntegrityBlockParseError::~BundleIntegrityBlockParseError() = default;
size_t BundleIntegrityBlockParseError::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->type);
  seed = mojo::internal::Hash(seed, this->message);
  return seed;
}

void BundleIntegrityBlockParseError::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BundleParseErrorType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "message"), this->message,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BundleIntegrityBlockParseError::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleMetadataParseError::BundleMetadataParseError()
    : type(),
      message() {}

BundleMetadataParseError::BundleMetadataParseError(
    BundleParseErrorType type_in,
    const std::string& message_in)
    : type(std::move(type_in)),
      message(std::move(message_in)) {}

BundleMetadataParseError::~BundleMetadataParseError() = default;
size_t BundleMetadataParseError::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->type);
  seed = mojo::internal::Hash(seed, this->message);
  return seed;
}

void BundleMetadataParseError::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BundleParseErrorType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "message"), this->message,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BundleMetadataParseError::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleResponseParseError::BundleResponseParseError()
    : type(),
      message() {}

BundleResponseParseError::BundleResponseParseError(
    BundleParseErrorType type_in,
    const std::string& message_in)
    : type(std::move(type_in)),
      message(std::move(message_in)) {}

BundleResponseParseError::~BundleResponseParseError() = default;
size_t BundleResponseParseError::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->type);
  seed = mojo::internal::Hash(seed, this->message);
  return seed;
}

void BundleResponseParseError::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BundleParseErrorType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "message"), this->message,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BundleResponseParseError::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleIntegrityBlock::BundleIntegrityBlock()
    : size(),
      signature_stack() {}

BundleIntegrityBlock::BundleIntegrityBlock(
    uint64_t size_in,
    std::vector<BundleIntegrityBlockSignatureStackEntryPtr> signature_stack_in)
    : size(std::move(size_in)),
      signature_stack(std::move(signature_stack_in)) {}

BundleIntegrityBlock::~BundleIntegrityBlock() = default;

void BundleIntegrityBlock::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "size"), this->size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "signature_stack"), this->signature_stack,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<BundleIntegrityBlockSignatureStackEntryPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BundleIntegrityBlock::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleIntegrityBlockSignatureStackEntry::BundleIntegrityBlockSignatureStackEntry()
    : complete_entry_cbor(),
      attributes_cbor(),
      public_key(),
      signature() {}

BundleIntegrityBlockSignatureStackEntry::BundleIntegrityBlockSignatureStackEntry(
    std::vector<uint8_t> complete_entry_cbor_in,
    std::vector<uint8_t> attributes_cbor_in,
    std::vector<uint8_t> public_key_in,
    std::vector<uint8_t> signature_in)
    : complete_entry_cbor(std::move(complete_entry_cbor_in)),
      attributes_cbor(std::move(attributes_cbor_in)),
      public_key(std::move(public_key_in)),
      signature(std::move(signature_in)) {}

BundleIntegrityBlockSignatureStackEntry::~BundleIntegrityBlockSignatureStackEntry() = default;

void BundleIntegrityBlockSignatureStackEntry::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "complete_entry_cbor"), this->complete_entry_cbor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "attributes_cbor"), this->attributes_cbor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "public_key"), this->public_key,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "signature"), this->signature,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BundleIntegrityBlockSignatureStackEntry::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleMetadata::BundleMetadata()
    : version(),
      primary_url(),
      requests(),
      authorities(),
      vouched_subsets() {}

BundleMetadata::BundleMetadata(
    BundleFormatVersion version_in,
    const ::GURL& primary_url_in,
    base::flat_map<::GURL, BundleResponseLocationPtr> requests_in,
    std::vector<AugmentedCertificatePtr> authorities_in,
    std::vector<VouchedSubsetPtr> vouched_subsets_in)
    : version(std::move(version_in)),
      primary_url(std::move(primary_url_in)),
      requests(std::move(requests_in)),
      authorities(std::move(authorities_in)),
      vouched_subsets(std::move(vouched_subsets_in)) {}

BundleMetadata::~BundleMetadata() = default;

void BundleMetadata::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "version"), this->version,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BundleFormatVersion>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "primary_url"), this->primary_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "requests"), this->requests,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type base::flat_map<::GURL, BundleResponseLocationPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "authorities"), this->authorities,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<AugmentedCertificatePtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "vouched_subsets"), this->vouched_subsets,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<VouchedSubsetPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BundleMetadata::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleResponseLocation::BundleResponseLocation()
    : offset(),
      length() {}

BundleResponseLocation::BundleResponseLocation(
    uint64_t offset_in,
    uint64_t length_in)
    : offset(std::move(offset_in)),
      length(std::move(length_in)) {}

BundleResponseLocation::~BundleResponseLocation() = default;
size_t BundleResponseLocation::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->offset);
  seed = mojo::internal::Hash(seed, this->length);
  return seed;
}

void BundleResponseLocation::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "offset"), this->offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "length"), this->length,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BundleResponseLocation::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AugmentedCertificate::AugmentedCertificate()
    : cert(),
      ocsp(),
      sct() {}

AugmentedCertificate::AugmentedCertificate(
    std::vector<uint8_t> cert_in,
    absl::optional<std::vector<uint8_t>> ocsp_in,
    absl::optional<std::vector<uint8_t>> sct_in)
    : cert(std::move(cert_in)),
      ocsp(std::move(ocsp_in)),
      sct(std::move(sct_in)) {}

AugmentedCertificate::~AugmentedCertificate() = default;

void AugmentedCertificate::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cert"), this->cert,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ocsp"), this->ocsp,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<uint8_t>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sct"), this->sct,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<uint8_t>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AugmentedCertificate::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
VouchedSubset::VouchedSubset()
    : authority(),
      sig(),
      raw_signed(),
      parsed_signed() {}

VouchedSubset::VouchedSubset(
    uint64_t authority_in,
    std::vector<uint8_t> sig_in,
    std::vector<uint8_t> raw_signed_in,
    SignedSubsetPtr parsed_signed_in)
    : authority(std::move(authority_in)),
      sig(std::move(sig_in)),
      raw_signed(std::move(raw_signed_in)),
      parsed_signed(std::move(parsed_signed_in)) {}

VouchedSubset::~VouchedSubset() = default;

void VouchedSubset::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "authority"), this->authority,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sig"), this->sig,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "raw_signed"), this->raw_signed,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "parsed_signed"), this->parsed_signed,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SignedSubsetPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool VouchedSubset::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SignedSubset::SignedSubset()
    : validity_url(),
      auth_sha256(),
      date(),
      expires(),
      subset_hashes() {}

SignedSubset::SignedSubset(
    const ::GURL& validity_url_in,
    std::vector<uint8_t> auth_sha256_in,
    uint64_t date_in,
    uint64_t expires_in,
    base::flat_map<::GURL, SubsetHashesValuePtr> subset_hashes_in)
    : validity_url(std::move(validity_url_in)),
      auth_sha256(std::move(auth_sha256_in)),
      date(std::move(date_in)),
      expires(std::move(expires_in)),
      subset_hashes(std::move(subset_hashes_in)) {}

SignedSubset::~SignedSubset() = default;

void SignedSubset::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "validity_url"), this->validity_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::GURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "auth_sha256"), this->auth_sha256,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "date"), this->date,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "expires"), this->expires,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "subset_hashes"), this->subset_hashes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type base::flat_map<::GURL, SubsetHashesValuePtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SignedSubset::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SubsetHashesValue::SubsetHashesValue()
    : variants_value(),
      resource_integrities() {}

SubsetHashesValue::SubsetHashesValue(
    const std::string& variants_value_in,
    std::vector<ResourceIntegrityPtr> resource_integrities_in)
    : variants_value(std::move(variants_value_in)),
      resource_integrities(std::move(resource_integrities_in)) {}

SubsetHashesValue::~SubsetHashesValue() = default;

void SubsetHashesValue::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "variants_value"), this->variants_value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "resource_integrities"), this->resource_integrities,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<ResourceIntegrityPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SubsetHashesValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ResourceIntegrity::ResourceIntegrity()
    : header_sha256(),
      payload_integrity_header() {}

ResourceIntegrity::ResourceIntegrity(
    std::vector<uint8_t> header_sha256_in,
    const std::string& payload_integrity_header_in)
    : header_sha256(std::move(header_sha256_in)),
      payload_integrity_header(std::move(payload_integrity_header_in)) {}

ResourceIntegrity::~ResourceIntegrity() = default;

void ResourceIntegrity::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "header_sha256"), this->header_sha256,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "payload_integrity_header"), this->payload_integrity_header,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ResourceIntegrity::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleResponse::BundleResponse()
    : response_code(),
      response_headers(),
      payload_offset(),
      payload_length() {}

BundleResponse::BundleResponse(
    int32_t response_code_in,
    const base::flat_map<std::string, std::string>& response_headers_in,
    uint64_t payload_offset_in,
    uint64_t payload_length_in)
    : response_code(std::move(response_code_in)),
      response_headers(std::move(response_headers_in)),
      payload_offset(std::move(payload_offset_in)),
      payload_length(std::move(payload_length_in)) {}

BundleResponse::~BundleResponse() = default;

void BundleResponse::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "response_code"), this->response_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "response_headers"), this->response_headers,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::flat_map<std::string, std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "payload_offset"), this->payload_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "payload_length"), this->payload_length,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BundleResponse::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char WebBundleParserFactory::Name_[] = "web_package.mojom.WebBundleParserFactory";

WebBundleParserFactory::IPCStableHashFunction WebBundleParserFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kWebBundleParserFactory_GetParserForFile_Name: {
      return &WebBundleParserFactory::GetParserForFile_Sym::IPCStableHash;
    }
    case internal::kWebBundleParserFactory_GetParserForDataSource_Name: {
      return &WebBundleParserFactory::GetParserForDataSource_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* WebBundleParserFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kWebBundleParserFactory_GetParserForFile_Name:
            return "Receive web_package::mojom::WebBundleParserFactory::GetParserForFile";
      case internal::kWebBundleParserFactory_GetParserForDataSource_Name:
            return "Receive web_package::mojom::WebBundleParserFactory::GetParserForDataSource";
    }
  } else {
    switch (message.name()) {
      case internal::kWebBundleParserFactory_GetParserForFile_Name:
            return "Receive reply web_package::mojom::WebBundleParserFactory::GetParserForFile";
      case internal::kWebBundleParserFactory_GetParserForDataSource_Name:
            return "Receive reply web_package::mojom::WebBundleParserFactory::GetParserForDataSource";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t WebBundleParserFactory::GetParserForFile_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_package::mojom::WebBundleParserFactory::GetParserForFile");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebBundleParserFactory::GetParserForDataSource_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_package::mojom::WebBundleParserFactory::GetParserForDataSource");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

WebBundleParserFactoryProxy::WebBundleParserFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WebBundleParserFactoryProxy::GetParserForFile(
    ::mojo::PendingReceiver<WebBundleParser> in_receiver, ::base::File in_file) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send web_package::mojom::WebBundleParserFactory::GetParserForFile", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<WebBundleParser>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("file"), in_file,
                        "<value of type ::base::File>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebBundleParserFactory_GetParserForFile_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::WebBundleParserFactory_GetParserForFile_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::web_package::mojom::WebBundleParserInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in WebBundleParserFactory.GetParserForFile request");
  mojo::internal::MessageFragment<
      typename decltype(params->file)::BaseType> file_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::ReadOnlyFileDataView>(
      in_file, file_fragment);
  params->file.Set(
      file_fragment.is_null() ? nullptr : file_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->file.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null file in WebBundleParserFactory.GetParserForFile request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParserFactory::Name_);
  message.set_method_name("GetParserForFile");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void WebBundleParserFactoryProxy::GetParserForDataSource(
    ::mojo::PendingReceiver<WebBundleParser> in_receiver, ::mojo::PendingRemote<BundleDataSource> in_data_source) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send web_package::mojom::WebBundleParserFactory::GetParserForDataSource", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<WebBundleParser>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data_source"), in_data_source,
                        "<value of type ::mojo::PendingRemote<BundleDataSource>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebBundleParserFactory_GetParserForDataSource_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::WebBundleParserFactory_GetParserForDataSource_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::web_package::mojom::WebBundleParserInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in WebBundleParserFactory.GetParserForDataSource request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::web_package::mojom::BundleDataSourceInterfaceBase>>(
      in_data_source, &params->data_source, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->data_source),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid data_source in WebBundleParserFactory.GetParserForDataSource request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParserFactory::Name_);
  message.set_method_name("GetParserForDataSource");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool WebBundleParserFactoryStubDispatch::Accept(
    WebBundleParserFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebBundleParserFactory_GetParserForFile_Name: {

      DCHECK(message->is_serialized());
      internal::WebBundleParserFactory_GetParserForFile_Params_Data* params =
          reinterpret_cast<internal::WebBundleParserFactory_GetParserForFile_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<WebBundleParser> p_receiver{};
      ::base::File p_file{};
      WebBundleParserFactory_GetParserForFile_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success && !input_data_view.ReadFile(&p_file))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParserFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetParserForFile(
std::move(p_receiver), 
std::move(p_file));
      return true;
    }
    case internal::kWebBundleParserFactory_GetParserForDataSource_Name: {

      DCHECK(message->is_serialized());
      internal::WebBundleParserFactory_GetParserForDataSource_Params_Data* params =
          reinterpret_cast<internal::WebBundleParserFactory_GetParserForDataSource_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<WebBundleParser> p_receiver{};
      ::mojo::PendingRemote<BundleDataSource> p_data_source{};
      WebBundleParserFactory_GetParserForDataSource_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success) {
        p_data_source =
            input_data_view.TakeDataSource<decltype(p_data_source)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParserFactory::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetParserForDataSource(
std::move(p_receiver), 
std::move(p_data_source));
      return true;
    }
  }
  return false;
}

// static
bool WebBundleParserFactoryStubDispatch::AcceptWithResponder(
    WebBundleParserFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kWebBundleParserFactory_GetParserForFile_Name: {
      break;
    }
    case internal::kWebBundleParserFactory_GetParserForDataSource_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebBundleParserFactoryValidationInfo[] = {
    {&internal::WebBundleParserFactory_GetParserForFile_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebBundleParserFactory_GetParserForDataSource_Params_Data::Validate,
     nullptr /* no response */},
};

bool WebBundleParserFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::web_package::mojom::WebBundleParserFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebBundleParserFactoryValidationInfo);
}

const char WebBundleParser::Name_[] = "web_package.mojom.WebBundleParser";

WebBundleParser::IPCStableHashFunction WebBundleParser::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kWebBundleParser_ParseIntegrityBlock_Name: {
      return &WebBundleParser::ParseIntegrityBlock_Sym::IPCStableHash;
    }
    case internal::kWebBundleParser_ParseMetadata_Name: {
      return &WebBundleParser::ParseMetadata_Sym::IPCStableHash;
    }
    case internal::kWebBundleParser_ParseResponse_Name: {
      return &WebBundleParser::ParseResponse_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* WebBundleParser::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kWebBundleParser_ParseIntegrityBlock_Name:
            return "Receive web_package::mojom::WebBundleParser::ParseIntegrityBlock";
      case internal::kWebBundleParser_ParseMetadata_Name:
            return "Receive web_package::mojom::WebBundleParser::ParseMetadata";
      case internal::kWebBundleParser_ParseResponse_Name:
            return "Receive web_package::mojom::WebBundleParser::ParseResponse";
    }
  } else {
    switch (message.name()) {
      case internal::kWebBundleParser_ParseIntegrityBlock_Name:
            return "Receive reply web_package::mojom::WebBundleParser::ParseIntegrityBlock";
      case internal::kWebBundleParser_ParseMetadata_Name:
            return "Receive reply web_package::mojom::WebBundleParser::ParseMetadata";
      case internal::kWebBundleParser_ParseResponse_Name:
            return "Receive reply web_package::mojom::WebBundleParser::ParseResponse";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t WebBundleParser::ParseIntegrityBlock_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_package::mojom::WebBundleParser::ParseIntegrityBlock");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebBundleParser::ParseMetadata_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_package::mojom::WebBundleParser::ParseMetadata");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebBundleParser::ParseResponse_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_package::mojom::WebBundleParser::ParseResponse");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class WebBundleParser_ParseIntegrityBlock_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebBundleParser_ParseIntegrityBlock_ForwardToCallback(
      WebBundleParser::ParseIntegrityBlockCallback callback
      ) : callback_(std::move(callback)) {
  }

  WebBundleParser_ParseIntegrityBlock_ForwardToCallback(const WebBundleParser_ParseIntegrityBlock_ForwardToCallback&) = delete;
  WebBundleParser_ParseIntegrityBlock_ForwardToCallback& operator=(const WebBundleParser_ParseIntegrityBlock_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WebBundleParser::ParseIntegrityBlockCallback callback_;
};

class WebBundleParser_ParseMetadata_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebBundleParser_ParseMetadata_ForwardToCallback(
      WebBundleParser::ParseMetadataCallback callback
      ) : callback_(std::move(callback)) {
  }

  WebBundleParser_ParseMetadata_ForwardToCallback(const WebBundleParser_ParseMetadata_ForwardToCallback&) = delete;
  WebBundleParser_ParseMetadata_ForwardToCallback& operator=(const WebBundleParser_ParseMetadata_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WebBundleParser::ParseMetadataCallback callback_;
};

class WebBundleParser_ParseResponse_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebBundleParser_ParseResponse_ForwardToCallback(
      WebBundleParser::ParseResponseCallback callback
      ) : callback_(std::move(callback)) {
  }

  WebBundleParser_ParseResponse_ForwardToCallback(const WebBundleParser_ParseResponse_ForwardToCallback&) = delete;
  WebBundleParser_ParseResponse_ForwardToCallback& operator=(const WebBundleParser_ParseResponse_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WebBundleParser::ParseResponseCallback callback_;
};

WebBundleParserProxy::WebBundleParserProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WebBundleParserProxy::ParseIntegrityBlock(
    ParseIntegrityBlockCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send web_package::mojom::WebBundleParser::ParseIntegrityBlock");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseIntegrityBlock_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::WebBundleParser_ParseIntegrityBlock_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseIntegrityBlock");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebBundleParser_ParseIntegrityBlock_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void WebBundleParserProxy::ParseMetadata(
    int64_t in_offset, ParseMetadataCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send web_package::mojom::WebBundleParser::ParseMetadata", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("offset"), in_offset,
                        "<value of type int64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseMetadata_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::WebBundleParser_ParseMetadata_Params_Data> params(
          message);
  params.Allocate();
  params->offset = in_offset;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseMetadata");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebBundleParser_ParseMetadata_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void WebBundleParserProxy::ParseResponse(
    uint64_t in_response_offset, uint64_t in_response_length, ParseResponseCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send web_package::mojom::WebBundleParser::ParseResponse", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("response_offset"), in_response_offset,
                        "<value of type uint64_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("response_length"), in_response_length,
                        "<value of type uint64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseResponse_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::WebBundleParser_ParseResponse_Params_Data> params(
          message);
  params.Allocate();
  params->response_offset = in_response_offset;
  params->response_length = in_response_length;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseResponse");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebBundleParser_ParseResponse_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class WebBundleParser_ParseIntegrityBlock_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WebBundleParser::ParseIntegrityBlockCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebBundleParser_ParseIntegrityBlock_ProxyToResponder> proxy(
        new WebBundleParser_ParseIntegrityBlock_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WebBundleParser_ParseIntegrityBlock_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebBundleParser_ParseIntegrityBlock_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WebBundleParser_ParseIntegrityBlock_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebBundleParser::ParseIntegrityBlockCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BundleIntegrityBlockPtr in_Result, BundleIntegrityBlockParseErrorPtr in_error);
};

bool WebBundleParser_ParseIntegrityBlock_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebBundleParser_ParseIntegrityBlock_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebBundleParser_ParseIntegrityBlock_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  BundleIntegrityBlockPtr p_Result{};
  BundleIntegrityBlockParseErrorPtr p_error{};
  WebBundleParser_ParseIntegrityBlock_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_Result))
    success = false;
  if (success && !input_data_view.ReadError(&p_error))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebBundleParser::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_Result), 
std::move(p_error));
  return true;
}

void WebBundleParser_ParseIntegrityBlock_ProxyToResponder::Run(
    BundleIntegrityBlockPtr in_Result, BundleIntegrityBlockParseErrorPtr in_error) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply web_package::mojom::WebBundleParser::ParseIntegrityBlock", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("Result"), in_Result,
                        "<value of type BundleIntegrityBlockPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error"), in_error,
                        "<value of type BundleIntegrityBlockParseErrorPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseIntegrityBlock_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::WebBundleParser_ParseIntegrityBlock_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->Result)::BaseType> Result_fragment(
          params.message());
  mojo::internal::Serialize<::web_package::mojom::BundleIntegrityBlockDataView>(
      in_Result, Result_fragment);
  params->Result.Set(
      Result_fragment.is_null() ? nullptr : Result_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->error)::BaseType> error_fragment(
          params.message());
  mojo::internal::Serialize<::web_package::mojom::BundleIntegrityBlockParseErrorDataView>(
      in_error, error_fragment);
  params->error.Set(
      error_fragment.is_null() ? nullptr : error_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseIntegrityBlock");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class WebBundleParser_ParseMetadata_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WebBundleParser::ParseMetadataCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebBundleParser_ParseMetadata_ProxyToResponder> proxy(
        new WebBundleParser_ParseMetadata_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WebBundleParser_ParseMetadata_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebBundleParser_ParseMetadata_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WebBundleParser_ParseMetadata_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebBundleParser::ParseMetadataCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BundleMetadataPtr in_Result, BundleMetadataParseErrorPtr in_error);
};

bool WebBundleParser_ParseMetadata_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebBundleParser_ParseMetadata_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebBundleParser_ParseMetadata_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  BundleMetadataPtr p_Result{};
  BundleMetadataParseErrorPtr p_error{};
  WebBundleParser_ParseMetadata_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_Result))
    success = false;
  if (success && !input_data_view.ReadError(&p_error))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebBundleParser::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_Result), 
std::move(p_error));
  return true;
}

void WebBundleParser_ParseMetadata_ProxyToResponder::Run(
    BundleMetadataPtr in_Result, BundleMetadataParseErrorPtr in_error) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply web_package::mojom::WebBundleParser::ParseMetadata", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("Result"), in_Result,
                        "<value of type BundleMetadataPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error"), in_error,
                        "<value of type BundleMetadataParseErrorPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseMetadata_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::WebBundleParser_ParseMetadata_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->Result)::BaseType> Result_fragment(
          params.message());
  mojo::internal::Serialize<::web_package::mojom::BundleMetadataDataView>(
      in_Result, Result_fragment);
  params->Result.Set(
      Result_fragment.is_null() ? nullptr : Result_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->error)::BaseType> error_fragment(
          params.message());
  mojo::internal::Serialize<::web_package::mojom::BundleMetadataParseErrorDataView>(
      in_error, error_fragment);
  params->error.Set(
      error_fragment.is_null() ? nullptr : error_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseMetadata");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class WebBundleParser_ParseResponse_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WebBundleParser::ParseResponseCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebBundleParser_ParseResponse_ProxyToResponder> proxy(
        new WebBundleParser_ParseResponse_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WebBundleParser_ParseResponse_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebBundleParser_ParseResponse_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WebBundleParser_ParseResponse_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebBundleParser::ParseResponseCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BundleResponsePtr in_Result, BundleResponseParseErrorPtr in_error);
};

bool WebBundleParser_ParseResponse_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebBundleParser_ParseResponse_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebBundleParser_ParseResponse_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  BundleResponsePtr p_Result{};
  BundleResponseParseErrorPtr p_error{};
  WebBundleParser_ParseResponse_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_Result))
    success = false;
  if (success && !input_data_view.ReadError(&p_error))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebBundleParser::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_Result), 
std::move(p_error));
  return true;
}

void WebBundleParser_ParseResponse_ProxyToResponder::Run(
    BundleResponsePtr in_Result, BundleResponseParseErrorPtr in_error) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply web_package::mojom::WebBundleParser::ParseResponse", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("Result"), in_Result,
                        "<value of type BundleResponsePtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error"), in_error,
                        "<value of type BundleResponseParseErrorPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseResponse_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::WebBundleParser_ParseResponse_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->Result)::BaseType> Result_fragment(
          params.message());
  mojo::internal::Serialize<::web_package::mojom::BundleResponseDataView>(
      in_Result, Result_fragment);
  params->Result.Set(
      Result_fragment.is_null() ? nullptr : Result_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->error)::BaseType> error_fragment(
          params.message());
  mojo::internal::Serialize<::web_package::mojom::BundleResponseParseErrorDataView>(
      in_error, error_fragment);
  params->error.Set(
      error_fragment.is_null() ? nullptr : error_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseResponse");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool WebBundleParserStubDispatch::Accept(
    WebBundleParser* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebBundleParser_ParseIntegrityBlock_Name: {
      break;
    }
    case internal::kWebBundleParser_ParseMetadata_Name: {
      break;
    }
    case internal::kWebBundleParser_ParseResponse_Name: {
      break;
    }
  }
  return false;
}

// static
bool WebBundleParserStubDispatch::AcceptWithResponder(
    WebBundleParser* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kWebBundleParser_ParseIntegrityBlock_Name: {

      internal::WebBundleParser_ParseIntegrityBlock_Params_Data* params =
          reinterpret_cast<
              internal::WebBundleParser_ParseIntegrityBlock_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WebBundleParser_ParseIntegrityBlock_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParser::Name_, 0, false);
        return false;
      }
      WebBundleParser::ParseIntegrityBlockCallback callback =
          WebBundleParser_ParseIntegrityBlock_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ParseIntegrityBlock(std::move(callback));
      return true;
    }
    case internal::kWebBundleParser_ParseMetadata_Name: {

      internal::WebBundleParser_ParseMetadata_Params_Data* params =
          reinterpret_cast<
              internal::WebBundleParser_ParseMetadata_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int64_t p_offset{};
      WebBundleParser_ParseMetadata_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_offset = input_data_view.offset();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParser::Name_, 1, false);
        return false;
      }
      WebBundleParser::ParseMetadataCallback callback =
          WebBundleParser_ParseMetadata_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ParseMetadata(
std::move(p_offset), std::move(callback));
      return true;
    }
    case internal::kWebBundleParser_ParseResponse_Name: {

      internal::WebBundleParser_ParseResponse_Params_Data* params =
          reinterpret_cast<
              internal::WebBundleParser_ParseResponse_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      uint64_t p_response_offset{};
      uint64_t p_response_length{};
      WebBundleParser_ParseResponse_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_response_offset = input_data_view.response_offset();
      if (success)
        p_response_length = input_data_view.response_length();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParser::Name_, 2, false);
        return false;
      }
      WebBundleParser::ParseResponseCallback callback =
          WebBundleParser_ParseResponse_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ParseResponse(
std::move(p_response_offset), 
std::move(p_response_length), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebBundleParserValidationInfo[] = {
    {&internal::WebBundleParser_ParseIntegrityBlock_Params_Data::Validate,
     &internal::WebBundleParser_ParseIntegrityBlock_ResponseParams_Data::Validate},
    {&internal::WebBundleParser_ParseMetadata_Params_Data::Validate,
     &internal::WebBundleParser_ParseMetadata_ResponseParams_Data::Validate},
    {&internal::WebBundleParser_ParseResponse_Params_Data::Validate,
     &internal::WebBundleParser_ParseResponse_ResponseParams_Data::Validate},
};

bool WebBundleParserRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::web_package::mojom::WebBundleParser::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebBundleParserValidationInfo);
}

bool WebBundleParserResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::web_package::mojom::WebBundleParser::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kWebBundleParserValidationInfo);
}
const char BundleDataSource::Name_[] = "web_package.mojom.BundleDataSource";

BundleDataSource::IPCStableHashFunction BundleDataSource::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kBundleDataSource_Read_Name: {
      return &BundleDataSource::Read_Sym::IPCStableHash;
    }
    case internal::kBundleDataSource_Length_Name: {
      return &BundleDataSource::Length_Sym::IPCStableHash;
    }
    case internal::kBundleDataSource_IsRandomAccessContext_Name: {
      return &BundleDataSource::IsRandomAccessContext_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* BundleDataSource::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kBundleDataSource_Read_Name:
            return "Receive web_package::mojom::BundleDataSource::Read";
      case internal::kBundleDataSource_Length_Name:
            return "Receive web_package::mojom::BundleDataSource::Length";
      case internal::kBundleDataSource_IsRandomAccessContext_Name:
            return "Receive web_package::mojom::BundleDataSource::IsRandomAccessContext";
    }
  } else {
    switch (message.name()) {
      case internal::kBundleDataSource_Read_Name:
            return "Receive reply web_package::mojom::BundleDataSource::Read";
      case internal::kBundleDataSource_Length_Name:
            return "Receive reply web_package::mojom::BundleDataSource::Length";
      case internal::kBundleDataSource_IsRandomAccessContext_Name:
            return "Receive reply web_package::mojom::BundleDataSource::IsRandomAccessContext";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t BundleDataSource::Read_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_package::mojom::BundleDataSource::Read");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t BundleDataSource::Length_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_package::mojom::BundleDataSource::Length");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t BundleDataSource::IsRandomAccessContext_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)web_package::mojom::BundleDataSource::IsRandomAccessContext");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class BundleDataSource_Read_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BundleDataSource_Read_ForwardToCallback(
      BundleDataSource::ReadCallback callback
      ) : callback_(std::move(callback)) {
  }

  BundleDataSource_Read_ForwardToCallback(const BundleDataSource_Read_ForwardToCallback&) = delete;
  BundleDataSource_Read_ForwardToCallback& operator=(const BundleDataSource_Read_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BundleDataSource::ReadCallback callback_;
};

class BundleDataSource_Length_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BundleDataSource_Length_ForwardToCallback(
      BundleDataSource::LengthCallback callback
      ) : callback_(std::move(callback)) {
  }

  BundleDataSource_Length_ForwardToCallback(const BundleDataSource_Length_ForwardToCallback&) = delete;
  BundleDataSource_Length_ForwardToCallback& operator=(const BundleDataSource_Length_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BundleDataSource::LengthCallback callback_;
};

class BundleDataSource_IsRandomAccessContext_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BundleDataSource_IsRandomAccessContext_ForwardToCallback(
      BundleDataSource::IsRandomAccessContextCallback callback
      ) : callback_(std::move(callback)) {
  }

  BundleDataSource_IsRandomAccessContext_ForwardToCallback(const BundleDataSource_IsRandomAccessContext_ForwardToCallback&) = delete;
  BundleDataSource_IsRandomAccessContext_ForwardToCallback& operator=(const BundleDataSource_IsRandomAccessContext_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  BundleDataSource::IsRandomAccessContextCallback callback_;
};

BundleDataSourceProxy::BundleDataSourceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void BundleDataSourceProxy::Read(
    uint64_t in_offset, uint64_t in_length, ReadCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send web_package::mojom::BundleDataSource::Read", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("offset"), in_offset,
                        "<value of type uint64_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("length"), in_length,
                        "<value of type uint64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBundleDataSource_Read_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::BundleDataSource_Read_Params_Data> params(
          message);
  params.Allocate();
  params->offset = in_offset;
  params->length = in_length;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BundleDataSource::Name_);
  message.set_method_name("Read");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BundleDataSource_Read_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void BundleDataSourceProxy::Length(
    LengthCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send web_package::mojom::BundleDataSource::Length");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBundleDataSource_Length_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::BundleDataSource_Length_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BundleDataSource::Name_);
  message.set_method_name("Length");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BundleDataSource_Length_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void BundleDataSourceProxy::IsRandomAccessContext(
    IsRandomAccessContextCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send web_package::mojom::BundleDataSource::IsRandomAccessContext");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBundleDataSource_IsRandomAccessContext_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::BundleDataSource_IsRandomAccessContext_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BundleDataSource::Name_);
  message.set_method_name("IsRandomAccessContext");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BundleDataSource_IsRandomAccessContext_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class BundleDataSource_Read_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BundleDataSource::ReadCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BundleDataSource_Read_ProxyToResponder> proxy(
        new BundleDataSource_Read_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BundleDataSource_Read_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BundleDataSource_Read_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BundleDataSource_Read_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BundleDataSource::ReadCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<std::vector<uint8_t>>& in_buffer);
};

bool BundleDataSource_Read_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BundleDataSource_Read_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BundleDataSource_Read_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<std::vector<uint8_t>> p_buffer{};
  BundleDataSource_Read_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadBuffer(&p_buffer))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BundleDataSource::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_buffer));
  return true;
}

void BundleDataSource_Read_ProxyToResponder::Run(
    const absl::optional<std::vector<uint8_t>>& in_buffer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply web_package::mojom::BundleDataSource::Read", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("buffer"), in_buffer,
                        "<value of type const absl::optional<std::vector<uint8_t>>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBundleDataSource_Read_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::BundleDataSource_Read_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->buffer)::BaseType>
      buffer_fragment(params.message());
  const mojo::internal::ContainerValidateParams buffer_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      in_buffer, buffer_fragment, &buffer_validate_params);
  params->buffer.Set(
      buffer_fragment.is_null() ? nullptr : buffer_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BundleDataSource::Name_);
  message.set_method_name("Read");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class BundleDataSource_Length_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BundleDataSource::LengthCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BundleDataSource_Length_ProxyToResponder> proxy(
        new BundleDataSource_Length_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BundleDataSource_Length_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BundleDataSource_Length_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BundleDataSource_Length_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BundleDataSource::LengthCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      int64_t in_length);
};

bool BundleDataSource_Length_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BundleDataSource_Length_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BundleDataSource_Length_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  int64_t p_length{};
  BundleDataSource_Length_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_length = input_data_view.length();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BundleDataSource::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_length));
  return true;
}

void BundleDataSource_Length_ProxyToResponder::Run(
    int64_t in_length) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply web_package::mojom::BundleDataSource::Length", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("length"), in_length,
                        "<value of type int64_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBundleDataSource_Length_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::BundleDataSource_Length_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->length = in_length;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BundleDataSource::Name_);
  message.set_method_name("Length");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class BundleDataSource_IsRandomAccessContext_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static BundleDataSource::IsRandomAccessContextCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BundleDataSource_IsRandomAccessContext_ProxyToResponder> proxy(
        new BundleDataSource_IsRandomAccessContext_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&BundleDataSource_IsRandomAccessContext_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BundleDataSource_IsRandomAccessContext_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  BundleDataSource_IsRandomAccessContext_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BundleDataSource::IsRandomAccessContextCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_is_random_access);
};

bool BundleDataSource_IsRandomAccessContext_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::BundleDataSource_IsRandomAccessContext_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BundleDataSource_IsRandomAccessContext_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_is_random_access{};
  BundleDataSource_IsRandomAccessContext_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_is_random_access = input_data_view.is_random_access();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BundleDataSource::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_is_random_access));
  return true;
}

void BundleDataSource_IsRandomAccessContext_ProxyToResponder::Run(
    bool in_is_random_access) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply web_package::mojom::BundleDataSource::IsRandomAccessContext", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_random_access"), in_is_random_access,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kBundleDataSource_IsRandomAccessContext_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::web_package::mojom::internal::BundleDataSource_IsRandomAccessContext_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->is_random_access = in_is_random_access;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BundleDataSource::Name_);
  message.set_method_name("IsRandomAccessContext");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool BundleDataSourceStubDispatch::Accept(
    BundleDataSource* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kBundleDataSource_Read_Name: {
      break;
    }
    case internal::kBundleDataSource_Length_Name: {
      break;
    }
    case internal::kBundleDataSource_IsRandomAccessContext_Name: {
      break;
    }
  }
  return false;
}

// static
bool BundleDataSourceStubDispatch::AcceptWithResponder(
    BundleDataSource* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kBundleDataSource_Read_Name: {

      internal::BundleDataSource_Read_Params_Data* params =
          reinterpret_cast<
              internal::BundleDataSource_Read_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      uint64_t p_offset{};
      uint64_t p_length{};
      BundleDataSource_Read_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_offset = input_data_view.offset();
      if (success)
        p_length = input_data_view.length();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BundleDataSource::Name_, 0, false);
        return false;
      }
      BundleDataSource::ReadCallback callback =
          BundleDataSource_Read_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Read(
std::move(p_offset), 
std::move(p_length), std::move(callback));
      return true;
    }
    case internal::kBundleDataSource_Length_Name: {

      internal::BundleDataSource_Length_Params_Data* params =
          reinterpret_cast<
              internal::BundleDataSource_Length_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BundleDataSource_Length_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BundleDataSource::Name_, 1, false);
        return false;
      }
      BundleDataSource::LengthCallback callback =
          BundleDataSource_Length_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Length(std::move(callback));
      return true;
    }
    case internal::kBundleDataSource_IsRandomAccessContext_Name: {

      internal::BundleDataSource_IsRandomAccessContext_Params_Data* params =
          reinterpret_cast<
              internal::BundleDataSource_IsRandomAccessContext_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BundleDataSource_IsRandomAccessContext_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BundleDataSource::Name_, 2, false);
        return false;
      }
      BundleDataSource::IsRandomAccessContextCallback callback =
          BundleDataSource_IsRandomAccessContext_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->IsRandomAccessContext(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kBundleDataSourceValidationInfo[] = {
    {&internal::BundleDataSource_Read_Params_Data::Validate,
     &internal::BundleDataSource_Read_ResponseParams_Data::Validate},
    {&internal::BundleDataSource_Length_Params_Data::Validate,
     &internal::BundleDataSource_Length_ResponseParams_Data::Validate},
    {&internal::BundleDataSource_IsRandomAccessContext_Params_Data::Validate,
     &internal::BundleDataSource_IsRandomAccessContext_ResponseParams_Data::Validate},
};

bool BundleDataSourceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::web_package::mojom::BundleDataSource::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kBundleDataSourceValidationInfo);
}

bool BundleDataSourceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::web_package::mojom::BundleDataSource::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kBundleDataSourceValidationInfo);
}


}  // namespace mojom
}  // namespace web_package


namespace mojo {


// static
bool StructTraits<::web_package::mojom::BundleIntegrityBlockParseError::DataView, ::web_package::mojom::BundleIntegrityBlockParseErrorPtr>::Read(
    ::web_package::mojom::BundleIntegrityBlockParseError::DataView input,
    ::web_package::mojom::BundleIntegrityBlockParseErrorPtr* output) {
  bool success = true;
  ::web_package::mojom::BundleIntegrityBlockParseErrorPtr result(::web_package::mojom::BundleIntegrityBlockParseError::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadMessage(&result->message))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::BundleMetadataParseError::DataView, ::web_package::mojom::BundleMetadataParseErrorPtr>::Read(
    ::web_package::mojom::BundleMetadataParseError::DataView input,
    ::web_package::mojom::BundleMetadataParseErrorPtr* output) {
  bool success = true;
  ::web_package::mojom::BundleMetadataParseErrorPtr result(::web_package::mojom::BundleMetadataParseError::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadMessage(&result->message))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::BundleResponseParseError::DataView, ::web_package::mojom::BundleResponseParseErrorPtr>::Read(
    ::web_package::mojom::BundleResponseParseError::DataView input,
    ::web_package::mojom::BundleResponseParseErrorPtr* output) {
  bool success = true;
  ::web_package::mojom::BundleResponseParseErrorPtr result(::web_package::mojom::BundleResponseParseError::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadMessage(&result->message))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::BundleIntegrityBlock::DataView, ::web_package::mojom::BundleIntegrityBlockPtr>::Read(
    ::web_package::mojom::BundleIntegrityBlock::DataView input,
    ::web_package::mojom::BundleIntegrityBlockPtr* output) {
  bool success = true;
  ::web_package::mojom::BundleIntegrityBlockPtr result(::web_package::mojom::BundleIntegrityBlock::New());
  
      if (success)
        result->size = input.size();
      if (success && !input.ReadSignatureStack(&result->signature_stack))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::BundleIntegrityBlockSignatureStackEntry::DataView, ::web_package::mojom::BundleIntegrityBlockSignatureStackEntryPtr>::Read(
    ::web_package::mojom::BundleIntegrityBlockSignatureStackEntry::DataView input,
    ::web_package::mojom::BundleIntegrityBlockSignatureStackEntryPtr* output) {
  bool success = true;
  ::web_package::mojom::BundleIntegrityBlockSignatureStackEntryPtr result(::web_package::mojom::BundleIntegrityBlockSignatureStackEntry::New());
  
      if (success && !input.ReadCompleteEntryCbor(&result->complete_entry_cbor))
        success = false;
      if (success && !input.ReadAttributesCbor(&result->attributes_cbor))
        success = false;
      if (success && !input.ReadPublicKey(&result->public_key))
        success = false;
      if (success && !input.ReadSignature(&result->signature))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::BundleMetadata::DataView, ::web_package::mojom::BundleMetadataPtr>::Read(
    ::web_package::mojom::BundleMetadata::DataView input,
    ::web_package::mojom::BundleMetadataPtr* output) {
  bool success = true;
  ::web_package::mojom::BundleMetadataPtr result(::web_package::mojom::BundleMetadata::New());
  
      if (success && !input.ReadVersion(&result->version))
        success = false;
      if (success && !input.ReadPrimaryUrl(&result->primary_url))
        success = false;
      if (success && !input.ReadRequests(&result->requests))
        success = false;
      if (success && !input.ReadAuthorities(&result->authorities))
        success = false;
      if (success && !input.ReadVouchedSubsets(&result->vouched_subsets))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::BundleResponseLocation::DataView, ::web_package::mojom::BundleResponseLocationPtr>::Read(
    ::web_package::mojom::BundleResponseLocation::DataView input,
    ::web_package::mojom::BundleResponseLocationPtr* output) {
  bool success = true;
  ::web_package::mojom::BundleResponseLocationPtr result(::web_package::mojom::BundleResponseLocation::New());
  
      if (success)
        result->offset = input.offset();
      if (success)
        result->length = input.length();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::AugmentedCertificate::DataView, ::web_package::mojom::AugmentedCertificatePtr>::Read(
    ::web_package::mojom::AugmentedCertificate::DataView input,
    ::web_package::mojom::AugmentedCertificatePtr* output) {
  bool success = true;
  ::web_package::mojom::AugmentedCertificatePtr result(::web_package::mojom::AugmentedCertificate::New());
  
      if (success && !input.ReadCert(&result->cert))
        success = false;
      if (success && !input.ReadOcsp(&result->ocsp))
        success = false;
      if (success && !input.ReadSct(&result->sct))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::VouchedSubset::DataView, ::web_package::mojom::VouchedSubsetPtr>::Read(
    ::web_package::mojom::VouchedSubset::DataView input,
    ::web_package::mojom::VouchedSubsetPtr* output) {
  bool success = true;
  ::web_package::mojom::VouchedSubsetPtr result(::web_package::mojom::VouchedSubset::New());
  
      if (success)
        result->authority = input.authority();
      if (success && !input.ReadSig(&result->sig))
        success = false;
      if (success && !input.ReadRawSigned(&result->raw_signed))
        success = false;
      if (success && !input.ReadParsedSigned(&result->parsed_signed))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::SignedSubset::DataView, ::web_package::mojom::SignedSubsetPtr>::Read(
    ::web_package::mojom::SignedSubset::DataView input,
    ::web_package::mojom::SignedSubsetPtr* output) {
  bool success = true;
  ::web_package::mojom::SignedSubsetPtr result(::web_package::mojom::SignedSubset::New());
  
      if (success && !input.ReadValidityUrl(&result->validity_url))
        success = false;
      if (success && !input.ReadAuthSha256(&result->auth_sha256))
        success = false;
      if (success)
        result->date = input.date();
      if (success)
        result->expires = input.expires();
      if (success && !input.ReadSubsetHashes(&result->subset_hashes))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::SubsetHashesValue::DataView, ::web_package::mojom::SubsetHashesValuePtr>::Read(
    ::web_package::mojom::SubsetHashesValue::DataView input,
    ::web_package::mojom::SubsetHashesValuePtr* output) {
  bool success = true;
  ::web_package::mojom::SubsetHashesValuePtr result(::web_package::mojom::SubsetHashesValue::New());
  
      if (success && !input.ReadVariantsValue(&result->variants_value))
        success = false;
      if (success && !input.ReadResourceIntegrities(&result->resource_integrities))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::ResourceIntegrity::DataView, ::web_package::mojom::ResourceIntegrityPtr>::Read(
    ::web_package::mojom::ResourceIntegrity::DataView input,
    ::web_package::mojom::ResourceIntegrityPtr* output) {
  bool success = true;
  ::web_package::mojom::ResourceIntegrityPtr result(::web_package::mojom::ResourceIntegrity::New());
  
      if (success && !input.ReadHeaderSha256(&result->header_sha256))
        success = false;
      if (success && !input.ReadPayloadIntegrityHeader(&result->payload_integrity_header))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::web_package::mojom::BundleResponse::DataView, ::web_package::mojom::BundleResponsePtr>::Read(
    ::web_package::mojom::BundleResponse::DataView input,
    ::web_package::mojom::BundleResponsePtr* output) {
  bool success = true;
  ::web_package::mojom::BundleResponsePtr result(::web_package::mojom::BundleResponse::New());
  
      if (success)
        result->response_code = input.response_code();
      if (success && !input.ReadResponseHeaders(&result->response_headers))
        success = false;
      if (success)
        result->payload_offset = input.payload_offset();
      if (success)
        result->payload_length = input.payload_length();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace web_package {
namespace mojom {


void WebBundleParserFactoryInterceptorForTesting::GetParserForFile(::mojo::PendingReceiver<WebBundleParser> receiver, ::base::File file) {
  GetForwardingInterface()->GetParserForFile(std::move(receiver), std::move(file));
}
void WebBundleParserFactoryInterceptorForTesting::GetParserForDataSource(::mojo::PendingReceiver<WebBundleParser> receiver, ::mojo::PendingRemote<BundleDataSource> data_source) {
  GetForwardingInterface()->GetParserForDataSource(std::move(receiver), std::move(data_source));
}
WebBundleParserFactoryAsyncWaiter::WebBundleParserFactoryAsyncWaiter(
    WebBundleParserFactory* proxy) : proxy_(proxy) {}

WebBundleParserFactoryAsyncWaiter::~WebBundleParserFactoryAsyncWaiter() = default;




void WebBundleParserInterceptorForTesting::ParseIntegrityBlock(ParseIntegrityBlockCallback callback) {
  GetForwardingInterface()->ParseIntegrityBlock(std::move(callback));
}
void WebBundleParserInterceptorForTesting::ParseMetadata(int64_t offset, ParseMetadataCallback callback) {
  GetForwardingInterface()->ParseMetadata(std::move(offset), std::move(callback));
}
void WebBundleParserInterceptorForTesting::ParseResponse(uint64_t response_offset, uint64_t response_length, ParseResponseCallback callback) {
  GetForwardingInterface()->ParseResponse(std::move(response_offset), std::move(response_length), std::move(callback));
}
WebBundleParserAsyncWaiter::WebBundleParserAsyncWaiter(
    WebBundleParser* proxy) : proxy_(proxy) {}

WebBundleParserAsyncWaiter::~WebBundleParserAsyncWaiter() = default;

void WebBundleParserAsyncWaiter::ParseIntegrityBlock(
    BundleIntegrityBlockPtr* out_Result, BundleIntegrityBlockParseErrorPtr* out_error) {
  base::RunLoop loop;
  proxy_->ParseIntegrityBlock(
      base::BindOnce(
          [](base::RunLoop* loop,
             BundleIntegrityBlockPtr* out_Result
,
             BundleIntegrityBlockParseErrorPtr* out_error
,
             BundleIntegrityBlockPtr Result,
             BundleIntegrityBlockParseErrorPtr error) {*out_Result = std::move(Result);*out_error = std::move(error);
            loop->Quit();
          },
          &loop,
          out_Result,
          out_error));
  loop.Run();
}
void WebBundleParserAsyncWaiter::ParseMetadata(
    int64_t offset, BundleMetadataPtr* out_Result, BundleMetadataParseErrorPtr* out_error) {
  base::RunLoop loop;
  proxy_->ParseMetadata(std::move(offset),
      base::BindOnce(
          [](base::RunLoop* loop,
             BundleMetadataPtr* out_Result
,
             BundleMetadataParseErrorPtr* out_error
,
             BundleMetadataPtr Result,
             BundleMetadataParseErrorPtr error) {*out_Result = std::move(Result);*out_error = std::move(error);
            loop->Quit();
          },
          &loop,
          out_Result,
          out_error));
  loop.Run();
}
void WebBundleParserAsyncWaiter::ParseResponse(
    uint64_t response_offset, uint64_t response_length, BundleResponsePtr* out_Result, BundleResponseParseErrorPtr* out_error) {
  base::RunLoop loop;
  proxy_->ParseResponse(std::move(response_offset),std::move(response_length),
      base::BindOnce(
          [](base::RunLoop* loop,
             BundleResponsePtr* out_Result
,
             BundleResponseParseErrorPtr* out_error
,
             BundleResponsePtr Result,
             BundleResponseParseErrorPtr error) {*out_Result = std::move(Result);*out_error = std::move(error);
            loop->Quit();
          },
          &loop,
          out_Result,
          out_error));
  loop.Run();
}



void BundleDataSourceInterceptorForTesting::Read(uint64_t offset, uint64_t length, ReadCallback callback) {
  GetForwardingInterface()->Read(std::move(offset), std::move(length), std::move(callback));
}
void BundleDataSourceInterceptorForTesting::Length(LengthCallback callback) {
  GetForwardingInterface()->Length(std::move(callback));
}
void BundleDataSourceInterceptorForTesting::IsRandomAccessContext(IsRandomAccessContextCallback callback) {
  GetForwardingInterface()->IsRandomAccessContext(std::move(callback));
}
BundleDataSourceAsyncWaiter::BundleDataSourceAsyncWaiter(
    BundleDataSource* proxy) : proxy_(proxy) {}

BundleDataSourceAsyncWaiter::~BundleDataSourceAsyncWaiter() = default;

void BundleDataSourceAsyncWaiter::Read(
    uint64_t offset, uint64_t length, absl::optional<std::vector<uint8_t>>* out_buffer) {
  base::RunLoop loop;
  proxy_->Read(std::move(offset),std::move(length),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<std::vector<uint8_t>>* out_buffer
,
             const absl::optional<std::vector<uint8_t>>& buffer) {*out_buffer = std::move(buffer);
            loop->Quit();
          },
          &loop,
          out_buffer));
  loop.Run();
}
void BundleDataSourceAsyncWaiter::Length(
    int64_t* out_length) {
  base::RunLoop loop;
  proxy_->Length(
      base::BindOnce(
          [](base::RunLoop* loop,
             int64_t* out_length
,
             int64_t length) {*out_length = std::move(length);
            loop->Quit();
          },
          &loop,
          out_length));
  loop.Run();
}
void BundleDataSourceAsyncWaiter::IsRandomAccessContext(
    bool* out_is_random_access) {
  base::RunLoop loop;
  proxy_->IsRandomAccessContext(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_is_random_access
,
             bool is_random_access) {*out_is_random_access = std::move(is_random_access);
            loop->Quit();
          },
          &loop,
          out_is_random_access));
  loop.Run();
}





}  // namespace mojom
}  // namespace web_package


#if defined(__clang__)
#pragma clang diagnostic pop
#endif