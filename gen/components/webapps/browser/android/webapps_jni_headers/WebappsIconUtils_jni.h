// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/webapps/WebappsIconUtils

#ifndef org_chromium_components_webapps_WebappsIconUtils_JNI
#define org_chromium_components_webapps_WebappsIconUtils_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_webapps_WebappsIconUtils[];
const char kClassPath_org_chromium_components_webapps_WebappsIconUtils[] =
    "org/chromium/components/webapps/WebappsIconUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_webapps_WebappsIconUtils_clazz(nullptr);
#ifndef org_chromium_components_webapps_WebappsIconUtils_clazz_defined
#define org_chromium_components_webapps_WebappsIconUtils_clazz_defined
inline jclass org_chromium_components_webapps_WebappsIconUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_webapps_WebappsIconUtils,
      &g_org_chromium_components_webapps_WebappsIconUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_WebappsIconUtils_generateAdaptiveIconBitmap(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_WebappsIconUtils_generateAdaptiveIconBitmap(JNIEnv* env, const
    base::android::JavaRef<jobject>& bitmap) {
  jclass clazz = org_chromium_components_webapps_WebappsIconUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_WebappsIconUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "generateAdaptiveIconBitmap",
          "(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;",
          &g_org_chromium_components_webapps_WebappsIconUtils_generateAdaptiveIconBitmap);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, bitmap.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_WebappsIconUtils_createHomeScreenIconFromWebIcon(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_WebappsIconUtils_createHomeScreenIconFromWebIcon(JNIEnv* env, const
    base::android::JavaRef<jobject>& webIcon,
    jboolean maskable) {
  jclass clazz = org_chromium_components_webapps_WebappsIconUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_WebappsIconUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createHomeScreenIconFromWebIcon",
          "(Landroid/graphics/Bitmap;Z)Landroid/graphics/Bitmap;",
          &g_org_chromium_components_webapps_WebappsIconUtils_createHomeScreenIconFromWebIcon);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, webIcon.obj(), maskable);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_WebappsIconUtils_getIdealIconCornerRadiusPxForPromptUI(nullptr);
static jint Java_WebappsIconUtils_getIdealIconCornerRadiusPxForPromptUI(JNIEnv* env) {
  jclass clazz = org_chromium_components_webapps_WebappsIconUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_WebappsIconUtils_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getIdealIconCornerRadiusPxForPromptUI",
          "()I",
&g_org_chromium_components_webapps_WebappsIconUtils_getIdealIconCornerRadiusPxForPromptUI);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_WebappsIconUtils_isIconLargeEnoughForLauncher(nullptr);
static jboolean Java_WebappsIconUtils_isIconLargeEnoughForLauncher(JNIEnv* env, JniIntWrapper width,
    JniIntWrapper height) {
  jclass clazz = org_chromium_components_webapps_WebappsIconUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_WebappsIconUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isIconLargeEnoughForLauncher",
          "(II)Z",
          &g_org_chromium_components_webapps_WebappsIconUtils_isIconLargeEnoughForLauncher);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(width), as_jint(height));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_WebappsIconUtils_generateHomeScreenIcon(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_WebappsIconUtils_generateHomeScreenIcon(JNIEnv* env, const base::android::JavaRef<jobject>&
    url,
    JniIntWrapper red,
    JniIntWrapper green,
    JniIntWrapper blue) {
  jclass clazz = org_chromium_components_webapps_WebappsIconUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_WebappsIconUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "generateHomeScreenIcon",
          "(Lorg/chromium/url/GURL;III)Landroid/graphics/Bitmap;",
          &g_org_chromium_components_webapps_WebappsIconUtils_generateHomeScreenIcon);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, url.obj(), as_jint(red), as_jint(green), as_jint(blue));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_webapps_WebappsIconUtils_getIconSizes(nullptr);
static base::android::ScopedJavaLocalRef<jintArray> Java_WebappsIconUtils_getIconSizes(JNIEnv* env)
    {
  jclass clazz = org_chromium_components_webapps_WebappsIconUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_WebappsIconUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getIconSizes",
          "()[I",
          &g_org_chromium_components_webapps_WebappsIconUtils_getIconSizes);

  jintArray ret =
      static_cast<jintArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

#endif  // org_chromium_components_webapps_WebappsIconUtils_JNI
