// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/webapps/installable/InstallableAmbientBadgeInfoBar

#ifndef org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_JNI
#define org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar[];
const char kClassPath_org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar[] =
    "org/chromium/components/webapps/installable/InstallableAmbientBadgeInfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_clazz(nullptr);
#ifndef org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_clazz_defined
#define org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_clazz_defined
inline jclass
    org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar,
      &g_org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace webapps {

JNI_GENERATOR_EXPORT void Java_J_N_MzHO1MxZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInstallableAmbientBadgeInfoBar,
    jobject caller) {
  InstallableAmbientBadgeInfoBar* native =
      reinterpret_cast<InstallableAmbientBadgeInfoBar*>(nativeInstallableAmbientBadgeInfoBar);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddToHomescreen");
  return native->AddToHomescreen(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_show(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_InstallableAmbientBadgeInfoBar_show(JNIEnv*
    env, JniIntWrapper iconId,
    const base::android::JavaRef<jobject>& iconBitmap,
    const base::android::JavaRef<jstring>& messageText,
    const base::android::JavaRef<jstring>& url,
    jboolean isIconAdaptive) {
  jclass clazz =
      org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "show",
"(ILandroid/graphics/Bitmap;Ljava/lang/String;Ljava/lang/String;Z)Lorg/chromium/components/infobars/InfoBar;",
          &g_org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_show);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(iconId), iconBitmap.obj(), messageText.obj(),
              url.obj(), isIconAdaptive);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace webapps

#endif  // org_chromium_components_webapps_installable_InstallableAmbientBadgeInfoBar_JNI
