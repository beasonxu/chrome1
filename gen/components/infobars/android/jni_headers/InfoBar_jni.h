// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/infobars/InfoBar

#ifndef org_chromium_components_infobars_InfoBar_JNI
#define org_chromium_components_infobars_InfoBar_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_components_infobars_InfoBar[];
const char kClassPath_org_chromium_components_infobars_InfoBar[] =
    "org/chromium/components/infobars/InfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_infobars_InfoBar_clazz(nullptr);
#ifndef org_chromium_components_infobars_InfoBar_clazz_defined
#define org_chromium_components_infobars_InfoBar_clazz_defined
inline jclass org_chromium_components_infobars_InfoBar_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_components_infobars_InfoBar,
      &g_org_chromium_components_infobars_InfoBar_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace infobars {

JNI_GENERATOR_EXPORT jint Java_J_N_MIZvQmze(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInfoBarAndroid,
    jobject caller) {
  InfoBarAndroid* native = reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetInfoBarIdentifier", 0);
  return native->GetInfoBarIdentifier(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2s4r3u7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInfoBarAndroid,
    jobject caller) {
  InfoBarAndroid* native = reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnLinkClicked");
  return native->OnLinkClicked(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQGsrOhB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInfoBarAndroid,
    jobject caller,
    jint action) {
  InfoBarAndroid* native = reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnButtonClicked");
  return native->OnButtonClicked(env, base::android::JavaParamRef<jobject>(env, caller), action);
}

JNI_GENERATOR_EXPORT void Java_J_N_MKozrBH2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInfoBarAndroid,
    jobject caller) {
  InfoBarAndroid* native = reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnCloseButtonClicked");
  return native->OnCloseButtonClicked(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID> g_org_chromium_components_infobars_InfoBar_setNativeInfoBar(nullptr);
static void Java_InfoBar_setNativeInfoBar(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    jlong nativeInfoBarPtr) {
  jclass clazz = org_chromium_components_infobars_InfoBar_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_infobars_InfoBar_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setNativeInfoBar",
          "(J)V",
          &g_org_chromium_components_infobars_InfoBar_setNativeInfoBar);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeInfoBarPtr);
}

static std::atomic<jmethodID>
    g_org_chromium_components_infobars_InfoBar_resetNativeInfoBar(nullptr);
static void Java_InfoBar_resetNativeInfoBar(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_components_infobars_InfoBar_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_infobars_InfoBar_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "resetNativeInfoBar",
          "()V",
          &g_org_chromium_components_infobars_InfoBar_resetNativeInfoBar);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_components_infobars_InfoBar_closeInfoBar(nullptr);
static jboolean Java_InfoBar_closeInfoBar(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_infobars_InfoBar_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_infobars_InfoBar_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "closeInfoBar",
          "()Z",
          &g_org_chromium_components_infobars_InfoBar_closeInfoBar);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace infobars

#endif  // org_chromium_components_infobars_InfoBar_JNI
