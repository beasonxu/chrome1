// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: note.proto

#include "note.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace web_notes {
PROTOBUF_CONSTEXPR Webnote::Webnote(
    ::_pbi::ConstantInitialized)
  : note_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quote_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , web_page_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , highlight_directive_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WebnoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebnoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebnoteDefaultTypeInternal() {}
  union {
    Webnote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebnoteDefaultTypeInternal _Webnote_default_instance_;
PROTOBUF_CONSTEXPR WebnoteContentId::WebnoteContentId(
    ::_pbi::ConstantInitialized)
  : account_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , webnote_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WebnoteContentIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebnoteContentIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebnoteContentIdDefaultTypeInternal() {}
  union {
    WebnoteContentId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebnoteContentIdDefaultTypeInternal _WebnoteContentId_default_instance_;
PROTOBUF_CONSTEXPR PutWebnoteRequest::PutWebnoteRequest(
    ::_pbi::ConstantInitialized)
  : webnote_(nullptr){}
struct PutWebnoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutWebnoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutWebnoteRequestDefaultTypeInternal() {}
  union {
    PutWebnoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutWebnoteRequestDefaultTypeInternal _PutWebnoteRequest_default_instance_;
PROTOBUF_CONSTEXPR PutWebnoteResponse::PutWebnoteResponse(
    ::_pbi::ConstantInitialized)
  : webnote_content_id_(nullptr){}
struct PutWebnoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutWebnoteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutWebnoteResponseDefaultTypeInternal() {}
  union {
    PutWebnoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutWebnoteResponseDefaultTypeInternal _PutWebnoteResponse_default_instance_;
}  // namespace web_notes
namespace web_notes {

// ===================================================================

class Webnote::_Internal {
 public:
};

Webnote::Webnote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:web_notes.Webnote)
}
Webnote::Webnote(const Webnote& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_note().empty()) {
    note_.Set(from._internal_note(), 
      GetArenaForAllocation());
  }
  quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    quote_.Set(from._internal_quote(), 
      GetArenaForAllocation());
  }
  web_page_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    web_page_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_web_page_url().empty()) {
    web_page_url_.Set(from._internal_web_page_url(), 
      GetArenaForAllocation());
  }
  highlight_directive_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    highlight_directive_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_highlight_directive().empty()) {
    highlight_directive_.Set(from._internal_highlight_directive(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:web_notes.Webnote)
}

inline void Webnote::SharedCtor() {
note_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  note_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quote_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quote_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
web_page_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  web_page_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
highlight_directive_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  highlight_directive_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Webnote::~Webnote() {
  // @@protoc_insertion_point(destructor:web_notes.Webnote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Webnote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  note_.Destroy();
  quote_.Destroy();
  web_page_url_.Destroy();
  highlight_directive_.Destroy();
}

void Webnote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Webnote::Clear() {
// @@protoc_insertion_point(message_clear_start:web_notes.Webnote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  note_.ClearToEmpty();
  quote_.ClearToEmpty();
  web_page_url_.ClearToEmpty();
  highlight_directive_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Webnote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string quote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string web_page_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_web_page_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string highlight_directive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_highlight_directive();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Webnote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:web_notes.Webnote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string note = 1;
  if (!this->_internal_note().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "web_notes.Webnote.note");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_note(), target);
  }

  // string quote = 2;
  if (!this->_internal_quote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote().data(), static_cast<int>(this->_internal_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "web_notes.Webnote.quote");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_quote(), target);
  }

  // string web_page_url = 3;
  if (!this->_internal_web_page_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_web_page_url().data(), static_cast<int>(this->_internal_web_page_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "web_notes.Webnote.web_page_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_web_page_url(), target);
  }

  // string highlight_directive = 4;
  if (!this->_internal_highlight_directive().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_highlight_directive().data(), static_cast<int>(this->_internal_highlight_directive().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "web_notes.Webnote.highlight_directive");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_highlight_directive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:web_notes.Webnote)
  return target;
}

size_t Webnote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_notes.Webnote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string note = 1;
  if (!this->_internal_note().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note());
  }

  // string quote = 2;
  if (!this->_internal_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote());
  }

  // string web_page_url = 3;
  if (!this->_internal_web_page_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_web_page_url());
  }

  // string highlight_directive = 4;
  if (!this->_internal_highlight_directive().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_highlight_directive());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Webnote::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Webnote*>(
      &from));
}

void Webnote::MergeFrom(const Webnote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_notes.Webnote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_note().empty()) {
    _internal_set_note(from._internal_note());
  }
  if (!from._internal_quote().empty()) {
    _internal_set_quote(from._internal_quote());
  }
  if (!from._internal_web_page_url().empty()) {
    _internal_set_web_page_url(from._internal_web_page_url());
  }
  if (!from._internal_highlight_directive().empty()) {
    _internal_set_highlight_directive(from._internal_highlight_directive());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Webnote::CopyFrom(const Webnote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_notes.Webnote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Webnote::IsInitialized() const {
  return true;
}

void Webnote::InternalSwap(Webnote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &note_, lhs_arena,
      &other->note_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quote_, lhs_arena,
      &other->quote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &web_page_url_, lhs_arena,
      &other->web_page_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &highlight_directive_, lhs_arena,
      &other->highlight_directive_, rhs_arena
  );
}

std::string Webnote::GetTypeName() const {
  return "web_notes.Webnote";
}


// ===================================================================

class WebnoteContentId::_Internal {
 public:
};

WebnoteContentId::WebnoteContentId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:web_notes.WebnoteContentId)
}
WebnoteContentId::WebnoteContentId(const WebnoteContentId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    account_id_.Set(from._internal_account_id(), 
      GetArenaForAllocation());
  }
  webnote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    webnote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_webnote_id().empty()) {
    webnote_id_.Set(from._internal_webnote_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:web_notes.WebnoteContentId)
}

inline void WebnoteContentId::SharedCtor() {
account_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
webnote_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  webnote_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WebnoteContentId::~WebnoteContentId() {
  // @@protoc_insertion_point(destructor:web_notes.WebnoteContentId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebnoteContentId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_id_.Destroy();
  webnote_id_.Destroy();
}

void WebnoteContentId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebnoteContentId::Clear() {
// @@protoc_insertion_point(message_clear_start:web_notes.WebnoteContentId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  webnote_id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* WebnoteContentId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string webnote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_webnote_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebnoteContentId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:web_notes.WebnoteContentId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "web_notes.WebnoteContentId.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string webnote_id = 2;
  if (!this->_internal_webnote_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webnote_id().data(), static_cast<int>(this->_internal_webnote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "web_notes.WebnoteContentId.webnote_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_webnote_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:web_notes.WebnoteContentId)
  return target;
}

size_t WebnoteContentId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_notes.WebnoteContentId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string webnote_id = 2;
  if (!this->_internal_webnote_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webnote_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebnoteContentId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebnoteContentId*>(
      &from));
}

void WebnoteContentId::MergeFrom(const WebnoteContentId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_notes.WebnoteContentId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_webnote_id().empty()) {
    _internal_set_webnote_id(from._internal_webnote_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebnoteContentId::CopyFrom(const WebnoteContentId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_notes.WebnoteContentId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebnoteContentId::IsInitialized() const {
  return true;
}

void WebnoteContentId::InternalSwap(WebnoteContentId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_id_, lhs_arena,
      &other->account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &webnote_id_, lhs_arena,
      &other->webnote_id_, rhs_arena
  );
}

std::string WebnoteContentId::GetTypeName() const {
  return "web_notes.WebnoteContentId";
}


// ===================================================================

class PutWebnoteRequest::_Internal {
 public:
  static const ::web_notes::Webnote& webnote(const PutWebnoteRequest* msg);
};

const ::web_notes::Webnote&
PutWebnoteRequest::_Internal::webnote(const PutWebnoteRequest* msg) {
  return *msg->webnote_;
}
PutWebnoteRequest::PutWebnoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:web_notes.PutWebnoteRequest)
}
PutWebnoteRequest::PutWebnoteRequest(const PutWebnoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_webnote()) {
    webnote_ = new ::web_notes::Webnote(*from.webnote_);
  } else {
    webnote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:web_notes.PutWebnoteRequest)
}

inline void PutWebnoteRequest::SharedCtor() {
webnote_ = nullptr;
}

PutWebnoteRequest::~PutWebnoteRequest() {
  // @@protoc_insertion_point(destructor:web_notes.PutWebnoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutWebnoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete webnote_;
}

void PutWebnoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PutWebnoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:web_notes.PutWebnoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && webnote_ != nullptr) {
    delete webnote_;
  }
  webnote_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* PutWebnoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .web_notes.Webnote webnote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_webnote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutWebnoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:web_notes.PutWebnoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .web_notes.Webnote webnote = 1;
  if (this->_internal_has_webnote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::webnote(this),
        _Internal::webnote(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:web_notes.PutWebnoteRequest)
  return target;
}

size_t PutWebnoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_notes.PutWebnoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .web_notes.Webnote webnote = 1;
  if (this->_internal_has_webnote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *webnote_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutWebnoteRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PutWebnoteRequest*>(
      &from));
}

void PutWebnoteRequest::MergeFrom(const PutWebnoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_notes.PutWebnoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_webnote()) {
    _internal_mutable_webnote()->::web_notes::Webnote::MergeFrom(from._internal_webnote());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PutWebnoteRequest::CopyFrom(const PutWebnoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_notes.PutWebnoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutWebnoteRequest::IsInitialized() const {
  return true;
}

void PutWebnoteRequest::InternalSwap(PutWebnoteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(webnote_, other->webnote_);
}

std::string PutWebnoteRequest::GetTypeName() const {
  return "web_notes.PutWebnoteRequest";
}


// ===================================================================

class PutWebnoteResponse::_Internal {
 public:
  static const ::web_notes::WebnoteContentId& webnote_content_id(const PutWebnoteResponse* msg);
};

const ::web_notes::WebnoteContentId&
PutWebnoteResponse::_Internal::webnote_content_id(const PutWebnoteResponse* msg) {
  return *msg->webnote_content_id_;
}
PutWebnoteResponse::PutWebnoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:web_notes.PutWebnoteResponse)
}
PutWebnoteResponse::PutWebnoteResponse(const PutWebnoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_webnote_content_id()) {
    webnote_content_id_ = new ::web_notes::WebnoteContentId(*from.webnote_content_id_);
  } else {
    webnote_content_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:web_notes.PutWebnoteResponse)
}

inline void PutWebnoteResponse::SharedCtor() {
webnote_content_id_ = nullptr;
}

PutWebnoteResponse::~PutWebnoteResponse() {
  // @@protoc_insertion_point(destructor:web_notes.PutWebnoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutWebnoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete webnote_content_id_;
}

void PutWebnoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PutWebnoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:web_notes.PutWebnoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && webnote_content_id_ != nullptr) {
    delete webnote_content_id_;
  }
  webnote_content_id_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* PutWebnoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .web_notes.WebnoteContentId webnote_content_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_webnote_content_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutWebnoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:web_notes.PutWebnoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .web_notes.WebnoteContentId webnote_content_id = 1;
  if (this->_internal_has_webnote_content_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::webnote_content_id(this),
        _Internal::webnote_content_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:web_notes.PutWebnoteResponse)
  return target;
}

size_t PutWebnoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_notes.PutWebnoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .web_notes.WebnoteContentId webnote_content_id = 1;
  if (this->_internal_has_webnote_content_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *webnote_content_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutWebnoteResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PutWebnoteResponse*>(
      &from));
}

void PutWebnoteResponse::MergeFrom(const PutWebnoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_notes.PutWebnoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_webnote_content_id()) {
    _internal_mutable_webnote_content_id()->::web_notes::WebnoteContentId::MergeFrom(from._internal_webnote_content_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PutWebnoteResponse::CopyFrom(const PutWebnoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_notes.PutWebnoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutWebnoteResponse::IsInitialized() const {
  return true;
}

void PutWebnoteResponse::InternalSwap(PutWebnoteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(webnote_content_id_, other->webnote_content_id_);
}

std::string PutWebnoteResponse::GetTypeName() const {
  return "web_notes.PutWebnoteResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace web_notes
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::web_notes::Webnote*
Arena::CreateMaybeMessage< ::web_notes::Webnote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::web_notes::Webnote >(arena);
}
template<> PROTOBUF_NOINLINE ::web_notes::WebnoteContentId*
Arena::CreateMaybeMessage< ::web_notes::WebnoteContentId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::web_notes::WebnoteContentId >(arena);
}
template<> PROTOBUF_NOINLINE ::web_notes::PutWebnoteRequest*
Arena::CreateMaybeMessage< ::web_notes::PutWebnoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::web_notes::PutWebnoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::web_notes::PutWebnoteResponse*
Arena::CreateMaybeMessage< ::web_notes::PutWebnoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::web_notes::PutWebnoteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
