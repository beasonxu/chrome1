// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: template_storage.proto

#include "template_storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content_creation {
namespace proto {
PROTOBUF_CONSTEXPR Gradient::Gradient(
    ::_pbi::ConstantInitialized)
  : colors_()
  , _colors_cached_byte_size_(0)
  , orientation_(0){}
struct GradientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GradientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GradientDefaultTypeInternal() {}
  union {
    Gradient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GradientDefaultTypeInternal _Gradient_default_instance_;
PROTOBUF_CONSTEXPR Background::Background(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct BackgroundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundDefaultTypeInternal() {}
  union {
    Background _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundDefaultTypeInternal _Background_default_instance_;
PROTOBUF_CONSTEXPR TextStyle::TextStyle(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , color_(0u)
  , weight_(0u)
  , allcaps_(false)
  , alignment_(0)
  , mintextsize_(0)
  , maxtextsize_(0)
  , highlightcolor_(0u)
  , highlightstyle_(0){}
struct TextStyleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextStyleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextStyleDefaultTypeInternal() {}
  union {
    TextStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextStyleDefaultTypeInternal _TextStyle_default_instance_;
PROTOBUF_CONSTEXPR FooterStyle::FooterStyle(
    ::_pbi::ConstantInitialized)
  : textcolor_(0u)
  , logocolor_(0u){}
struct FooterStyleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FooterStyleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FooterStyleDefaultTypeInternal() {}
  union {
    FooterStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FooterStyleDefaultTypeInternal _FooterStyle_default_instance_;
PROTOBUF_CONSTEXPR Date::Date(
    ::_pbi::ConstantInitialized)
  : month_(0)
  , day_(0)
  , year_(0){}
struct DateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateDefaultTypeInternal() {}
  union {
    Date _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateDefaultTypeInternal _Date_default_instance_;
PROTOBUF_CONSTEXPR Collection::Collection(
    ::_pbi::ConstantInitialized)
  : collectionitems_()
  , max_template_number_(0){}
struct CollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionDefaultTypeInternal() {}
  union {
    Collection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionDefaultTypeInternal _Collection_default_instance_;
PROTOBUF_CONSTEXPR CollectionItem::CollectionItem(
    ::_pbi::ConstantInitialized)
  : geo_()
  , notetemplate_(nullptr)
  , activation_(nullptr)
  , expiration_(nullptr){}
struct CollectionItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionItemDefaultTypeInternal() {}
  union {
    CollectionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionItemDefaultTypeInternal _CollectionItem_default_instance_;
PROTOBUF_CONSTEXPR NoteTemplate::NoteTemplate(
    ::_pbi::ConstantInitialized)
  : mainbackground_(nullptr)
  , contentbackground_(nullptr)
  , textstyle_(nullptr)
  , footerstyle_(nullptr)
  , id_(0){}
struct NoteTemplateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteTemplateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteTemplateDefaultTypeInternal() {}
  union {
    NoteTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteTemplateDefaultTypeInternal _NoteTemplate_default_instance_;
}  // namespace proto
}  // namespace content_creation
namespace content_creation {
namespace proto {

// ===================================================================

class Gradient::_Internal {
 public:
};

Gradient::Gradient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  colors_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content_creation.proto.Gradient)
}
Gradient::Gradient(const Gradient& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      colors_(from.colors_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  orientation_ = from.orientation_;
  // @@protoc_insertion_point(copy_constructor:content_creation.proto.Gradient)
}

inline void Gradient::SharedCtor() {
orientation_ = 0;
}

Gradient::~Gradient() {
  // @@protoc_insertion_point(destructor:content_creation.proto.Gradient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gradient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gradient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Gradient::Clear() {
// @@protoc_insertion_point(message_clear_start:content_creation.proto.Gradient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  colors_.Clear();
  orientation_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Gradient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 orientation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 colors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_colors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_colors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gradient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content_creation.proto.Gradient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orientation = 1;
  if (this->_internal_orientation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_orientation(), target);
  }

  // repeated uint32 colors = 2;
  {
    int byte_size = _colors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_colors(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content_creation.proto.Gradient)
  return target;
}

size_t Gradient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content_creation.proto.Gradient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 colors = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->colors_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _colors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 orientation = 1;
  if (this->_internal_orientation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_orientation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gradient::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Gradient*>(
      &from));
}

void Gradient::MergeFrom(const Gradient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content_creation.proto.Gradient)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  colors_.MergeFrom(from.colors_);
  if (from._internal_orientation() != 0) {
    _internal_set_orientation(from._internal_orientation());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Gradient::CopyFrom(const Gradient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content_creation.proto.Gradient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gradient::IsInitialized() const {
  return true;
}

void Gradient::InternalSwap(Gradient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  colors_.InternalSwap(&other->colors_);
  swap(orientation_, other->orientation_);
}

std::string Gradient::GetTypeName() const {
  return "content_creation.proto.Gradient";
}


// ===================================================================

class Background::_Internal {
 public:
  static const ::content_creation::proto::Gradient& gradient(const Background* msg);
};

const ::content_creation::proto::Gradient&
Background::_Internal::gradient(const Background* msg) {
  return *msg->constructor_options_.gradient_;
}
void Background::set_allocated_gradient(::content_creation::proto::Gradient* gradient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_constructor_options();
  if (gradient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gradient);
    if (message_arena != submessage_arena) {
      gradient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gradient, submessage_arena);
    }
    set_has_gradient();
    constructor_options_.gradient_ = gradient;
  }
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.Background.gradient)
}
Background::Background(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content_creation.proto.Background)
}
Background::Background(const Background& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_constructor_options();
  switch (from.constructor_options_case()) {
    case kColor: {
      _internal_set_color(from._internal_color());
      break;
    }
    case kGradient: {
      _internal_mutable_gradient()->::content_creation::proto::Gradient::MergeFrom(from._internal_gradient());
      break;
    }
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case CONSTRUCTOR_OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:content_creation.proto.Background)
}

inline void Background::SharedCtor() {
clear_has_constructor_options();
}

Background::~Background() {
  // @@protoc_insertion_point(destructor:content_creation.proto.Background)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Background::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_constructor_options()) {
    clear_constructor_options();
  }
}

void Background::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Background::clear_constructor_options() {
// @@protoc_insertion_point(one_of_clear_start:content_creation.proto.Background)
  switch (constructor_options_case()) {
    case kColor: {
      // No need to clear
      break;
    }
    case kGradient: {
      if (GetArenaForAllocation() == nullptr) {
        delete constructor_options_.gradient_;
      }
      break;
    }
    case kUrl: {
      constructor_options_.url_.Destroy();
      break;
    }
    case CONSTRUCTOR_OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRUCTOR_OPTIONS_NOT_SET;
}


void Background::Clear() {
// @@protoc_insertion_point(message_clear_start:content_creation.proto.Background)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_constructor_options();
  _internal_metadata_.Clear<std::string>();
}

const char* Background::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content_creation.proto.Gradient gradient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gradient(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Background::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content_creation.proto.Background)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  // .content_creation.proto.Gradient gradient = 2;
  if (_internal_has_gradient()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gradient(this),
        _Internal::gradient(this).GetCachedSize(), target, stream);
  }

  // string url = 3;
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content_creation.proto.Background.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content_creation.proto.Background)
  return target;
}

size_t Background::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content_creation.proto.Background)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (constructor_options_case()) {
    // uint32 color = 1;
    case kColor: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
      break;
    }
    // .content_creation.proto.Gradient gradient = 2;
    case kGradient: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constructor_options_.gradient_);
      break;
    }
    // string url = 3;
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
      break;
    }
    case CONSTRUCTOR_OPTIONS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Background::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Background*>(
      &from));
}

void Background::MergeFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content_creation.proto.Background)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.constructor_options_case()) {
    case kColor: {
      _internal_set_color(from._internal_color());
      break;
    }
    case kGradient: {
      _internal_mutable_gradient()->::content_creation::proto::Gradient::MergeFrom(from._internal_gradient());
      break;
    }
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case CONSTRUCTOR_OPTIONS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Background::CopyFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content_creation.proto.Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Background::IsInitialized() const {
  return true;
}

void Background::InternalSwap(Background* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(constructor_options_, other->constructor_options_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Background::GetTypeName() const {
  return "content_creation.proto.Background";
}


// ===================================================================

class TextStyle::_Internal {
 public:
};

TextStyle::TextStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content_creation.proto.TextStyle)
}
TextStyle::TextStyle(const TextStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&highlightstyle_) -
    reinterpret_cast<char*>(&color_)) + sizeof(highlightstyle_));
  // @@protoc_insertion_point(copy_constructor:content_creation.proto.TextStyle)
}

inline void TextStyle::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&highlightstyle_) -
    reinterpret_cast<char*>(&color_)) + sizeof(highlightstyle_));
}

TextStyle::~TextStyle() {
  // @@protoc_insertion_point(destructor:content_creation.proto.TextStyle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void TextStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:content_creation.proto.TextStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlightstyle_) -
      reinterpret_cast<char*>(&color_)) + sizeof(highlightstyle_));
  _internal_metadata_.Clear<std::string>();
}

const char* TextStyle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allCaps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          allcaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 alignment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minTextSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          mintextsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxTextSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          maxtextsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 highlightColor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          highlightcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 highlightStyle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          highlightstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content_creation.proto.TextStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content_creation.proto.TextStyle.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color(), target);
  }

  // uint32 weight = 3;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_weight(), target);
  }

  // bool allCaps = 4;
  if (this->_internal_allcaps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allcaps(), target);
  }

  // int32 alignment = 5;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_alignment(), target);
  }

  // int32 minTextSize = 6;
  if (this->_internal_mintextsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mintextsize(), target);
  }

  // int32 maxTextSize = 7;
  if (this->_internal_maxtextsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_maxtextsize(), target);
  }

  // uint32 highlightColor = 8;
  if (this->_internal_highlightcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_highlightcolor(), target);
  }

  // int32 highlightStyle = 9;
  if (this->_internal_highlightstyle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_highlightstyle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content_creation.proto.TextStyle)
  return target;
}

size_t TextStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content_creation.proto.TextStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  // uint32 weight = 3;
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  // bool allCaps = 4;
  if (this->_internal_allcaps() != 0) {
    total_size += 1 + 1;
  }

  // int32 alignment = 5;
  if (this->_internal_alignment() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_alignment());
  }

  // int32 minTextSize = 6;
  if (this->_internal_mintextsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mintextsize());
  }

  // int32 maxTextSize = 7;
  if (this->_internal_maxtextsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxtextsize());
  }

  // uint32 highlightColor = 8;
  if (this->_internal_highlightcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_highlightcolor());
  }

  // int32 highlightStyle = 9;
  if (this->_internal_highlightstyle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_highlightstyle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextStyle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TextStyle*>(
      &from));
}

void TextStyle::MergeFrom(const TextStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content_creation.proto.TextStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_allcaps() != 0) {
    _internal_set_allcaps(from._internal_allcaps());
  }
  if (from._internal_alignment() != 0) {
    _internal_set_alignment(from._internal_alignment());
  }
  if (from._internal_mintextsize() != 0) {
    _internal_set_mintextsize(from._internal_mintextsize());
  }
  if (from._internal_maxtextsize() != 0) {
    _internal_set_maxtextsize(from._internal_maxtextsize());
  }
  if (from._internal_highlightcolor() != 0) {
    _internal_set_highlightcolor(from._internal_highlightcolor());
  }
  if (from._internal_highlightstyle() != 0) {
    _internal_set_highlightstyle(from._internal_highlightstyle());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TextStyle::CopyFrom(const TextStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content_creation.proto.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextStyle::IsInitialized() const {
  return true;
}

void TextStyle::InternalSwap(TextStyle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextStyle, highlightstyle_)
      + sizeof(TextStyle::highlightstyle_)
      - PROTOBUF_FIELD_OFFSET(TextStyle, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

std::string TextStyle::GetTypeName() const {
  return "content_creation.proto.TextStyle";
}


// ===================================================================

class FooterStyle::_Internal {
 public:
};

FooterStyle::FooterStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content_creation.proto.FooterStyle)
}
FooterStyle::FooterStyle(const FooterStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&textcolor_, &from.textcolor_,
    static_cast<size_t>(reinterpret_cast<char*>(&logocolor_) -
    reinterpret_cast<char*>(&textcolor_)) + sizeof(logocolor_));
  // @@protoc_insertion_point(copy_constructor:content_creation.proto.FooterStyle)
}

inline void FooterStyle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&textcolor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logocolor_) -
    reinterpret_cast<char*>(&textcolor_)) + sizeof(logocolor_));
}

FooterStyle::~FooterStyle() {
  // @@protoc_insertion_point(destructor:content_creation.proto.FooterStyle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FooterStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FooterStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FooterStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:content_creation.proto.FooterStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&textcolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logocolor_) -
      reinterpret_cast<char*>(&textcolor_)) + sizeof(logocolor_));
  _internal_metadata_.Clear<std::string>();
}

const char* FooterStyle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 textColor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          textcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 logoColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          logocolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FooterStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content_creation.proto.FooterStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 textColor = 1;
  if (this->_internal_textcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_textcolor(), target);
  }

  // uint32 logoColor = 2;
  if (this->_internal_logocolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_logocolor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content_creation.proto.FooterStyle)
  return target;
}

size_t FooterStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content_creation.proto.FooterStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 textColor = 1;
  if (this->_internal_textcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_textcolor());
  }

  // uint32 logoColor = 2;
  if (this->_internal_logocolor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logocolor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FooterStyle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FooterStyle*>(
      &from));
}

void FooterStyle::MergeFrom(const FooterStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content_creation.proto.FooterStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_textcolor() != 0) {
    _internal_set_textcolor(from._internal_textcolor());
  }
  if (from._internal_logocolor() != 0) {
    _internal_set_logocolor(from._internal_logocolor());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FooterStyle::CopyFrom(const FooterStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content_creation.proto.FooterStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooterStyle::IsInitialized() const {
  return true;
}

void FooterStyle::InternalSwap(FooterStyle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FooterStyle, logocolor_)
      + sizeof(FooterStyle::logocolor_)
      - PROTOBUF_FIELD_OFFSET(FooterStyle, textcolor_)>(
          reinterpret_cast<char*>(&textcolor_),
          reinterpret_cast<char*>(&other->textcolor_));
}

std::string FooterStyle::GetTypeName() const {
  return "content_creation.proto.FooterStyle";
}


// ===================================================================

class Date::_Internal {
 public:
};

Date::Date(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content_creation.proto.Date)
}
Date::Date(const Date& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&month_, &from.month_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&month_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:content_creation.proto.Date)
}

inline void Date::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&month_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&month_)) + sizeof(year_));
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:content_creation.proto.Date)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Date::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:content_creation.proto.Date)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&month_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&month_)) + sizeof(year_));
  _internal_metadata_.Clear<std::string>();
}

const char* Date::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 month = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 year = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Date::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content_creation.proto.Date)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 month = 1;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_month(), target);
  }

  // int32 day = 2;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_day(), target);
  }

  // int32 year = 3;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content_creation.proto.Date)
  return target;
}

size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content_creation.proto.Date)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 month = 1;
  if (this->_internal_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_month());
  }

  // int32 day = 2;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day());
  }

  // int32 year = 3;
  if (this->_internal_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_year());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Date*>(
      &from));
}

void Date::MergeFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content_creation.proto.Date)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from._internal_day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from._internal_year() != 0) {
    _internal_set_year(from._internal_year());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content_creation.proto.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  return true;
}

void Date::InternalSwap(Date* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Date, year_)
      + sizeof(Date::year_)
      - PROTOBUF_FIELD_OFFSET(Date, month_)>(
          reinterpret_cast<char*>(&month_),
          reinterpret_cast<char*>(&other->month_));
}

std::string Date::GetTypeName() const {
  return "content_creation.proto.Date";
}


// ===================================================================

class Collection::_Internal {
 public:
};

Collection::Collection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  collectionitems_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content_creation.proto.Collection)
}
Collection::Collection(const Collection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      collectionitems_(from.collectionitems_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  max_template_number_ = from.max_template_number_;
  // @@protoc_insertion_point(copy_constructor:content_creation.proto.Collection)
}

inline void Collection::SharedCtor() {
max_template_number_ = 0;
}

Collection::~Collection() {
  // @@protoc_insertion_point(destructor:content_creation.proto.Collection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Collection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Collection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Collection::Clear() {
// @@protoc_insertion_point(message_clear_start:content_creation.proto.Collection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectionitems_.Clear();
  max_template_number_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Collection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .content_creation.proto.CollectionItem collectionItems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectionitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 max_template_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_template_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content_creation.proto.Collection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content_creation.proto.CollectionItem collectionItems = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collectionitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_collectionitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 max_template_number = 2;
  if (this->_internal_max_template_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_template_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content_creation.proto.Collection)
  return target;
}

size_t Collection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content_creation.proto.Collection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content_creation.proto.CollectionItem collectionItems = 1;
  total_size += 1UL * this->_internal_collectionitems_size();
  for (const auto& msg : this->collectionitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 max_template_number = 2;
  if (this->_internal_max_template_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_template_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Collection*>(
      &from));
}

void Collection::MergeFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content_creation.proto.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collectionitems_.MergeFrom(from.collectionitems_);
  if (from._internal_max_template_number() != 0) {
    _internal_set_max_template_number(from._internal_max_template_number());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Collection::CopyFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content_creation.proto.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collection::IsInitialized() const {
  return true;
}

void Collection::InternalSwap(Collection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collectionitems_.InternalSwap(&other->collectionitems_);
  swap(max_template_number_, other->max_template_number_);
}

std::string Collection::GetTypeName() const {
  return "content_creation.proto.Collection";
}


// ===================================================================

class CollectionItem::_Internal {
 public:
  static const ::content_creation::proto::NoteTemplate& notetemplate(const CollectionItem* msg);
  static const ::content_creation::proto::Date& activation(const CollectionItem* msg);
  static const ::content_creation::proto::Date& expiration(const CollectionItem* msg);
};

const ::content_creation::proto::NoteTemplate&
CollectionItem::_Internal::notetemplate(const CollectionItem* msg) {
  return *msg->notetemplate_;
}
const ::content_creation::proto::Date&
CollectionItem::_Internal::activation(const CollectionItem* msg) {
  return *msg->activation_;
}
const ::content_creation::proto::Date&
CollectionItem::_Internal::expiration(const CollectionItem* msg) {
  return *msg->expiration_;
}
CollectionItem::CollectionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  geo_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content_creation.proto.CollectionItem)
}
CollectionItem::CollectionItem(const CollectionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      geo_(from.geo_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_notetemplate()) {
    notetemplate_ = new ::content_creation::proto::NoteTemplate(*from.notetemplate_);
  } else {
    notetemplate_ = nullptr;
  }
  if (from._internal_has_activation()) {
    activation_ = new ::content_creation::proto::Date(*from.activation_);
  } else {
    activation_ = nullptr;
  }
  if (from._internal_has_expiration()) {
    expiration_ = new ::content_creation::proto::Date(*from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:content_creation.proto.CollectionItem)
}

inline void CollectionItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notetemplate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&notetemplate_)) + sizeof(expiration_));
}

CollectionItem::~CollectionItem() {
  // @@protoc_insertion_point(destructor:content_creation.proto.CollectionItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete notetemplate_;
  if (this != internal_default_instance()) delete activation_;
  if (this != internal_default_instance()) delete expiration_;
}

void CollectionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollectionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:content_creation.proto.CollectionItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_.Clear();
  if (GetArenaForAllocation() == nullptr && notetemplate_ != nullptr) {
    delete notetemplate_;
  }
  notetemplate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && activation_ != nullptr) {
    delete activation_;
  }
  activation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* CollectionItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .content_creation.proto.NoteTemplate noteTemplate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_notetemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content_creation.proto.Date activation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content_creation.proto.Date expiration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string geo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_geo();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content_creation.proto.CollectionItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .content_creation.proto.NoteTemplate noteTemplate = 1;
  if (this->_internal_has_notetemplate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::notetemplate(this),
        _Internal::notetemplate(this).GetCachedSize(), target, stream);
  }

  // .content_creation.proto.Date activation = 2;
  if (this->_internal_has_activation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::activation(this),
        _Internal::activation(this).GetCachedSize(), target, stream);
  }

  // .content_creation.proto.Date expiration = 3;
  if (this->_internal_has_expiration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expiration(this),
        _Internal::expiration(this).GetCachedSize(), target, stream);
  }

  // repeated string geo = 4;
  for (int i = 0, n = this->_internal_geo_size(); i < n; i++) {
    const auto& s = this->_internal_geo(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "content_creation.proto.CollectionItem.geo");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content_creation.proto.CollectionItem)
  return target;
}

size_t CollectionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content_creation.proto.CollectionItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string geo = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(geo_.size());
  for (int i = 0, n = geo_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      geo_.Get(i));
  }

  // .content_creation.proto.NoteTemplate noteTemplate = 1;
  if (this->_internal_has_notetemplate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notetemplate_);
  }

  // .content_creation.proto.Date activation = 2;
  if (this->_internal_has_activation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activation_);
  }

  // .content_creation.proto.Date expiration = 3;
  if (this->_internal_has_expiration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CollectionItem*>(
      &from));
}

void CollectionItem::MergeFrom(const CollectionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content_creation.proto.CollectionItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  geo_.MergeFrom(from.geo_);
  if (from._internal_has_notetemplate()) {
    _internal_mutable_notetemplate()->::content_creation::proto::NoteTemplate::MergeFrom(from._internal_notetemplate());
  }
  if (from._internal_has_activation()) {
    _internal_mutable_activation()->::content_creation::proto::Date::MergeFrom(from._internal_activation());
  }
  if (from._internal_has_expiration()) {
    _internal_mutable_expiration()->::content_creation::proto::Date::MergeFrom(from._internal_expiration());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CollectionItem::CopyFrom(const CollectionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content_creation.proto.CollectionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionItem::IsInitialized() const {
  return true;
}

void CollectionItem::InternalSwap(CollectionItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  geo_.InternalSwap(&other->geo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionItem, expiration_)
      + sizeof(CollectionItem::expiration_)
      - PROTOBUF_FIELD_OFFSET(CollectionItem, notetemplate_)>(
          reinterpret_cast<char*>(&notetemplate_),
          reinterpret_cast<char*>(&other->notetemplate_));
}

std::string CollectionItem::GetTypeName() const {
  return "content_creation.proto.CollectionItem";
}


// ===================================================================

class NoteTemplate::_Internal {
 public:
  static const ::content_creation::proto::Background& mainbackground(const NoteTemplate* msg);
  static const ::content_creation::proto::Background& contentbackground(const NoteTemplate* msg);
  static const ::content_creation::proto::TextStyle& textstyle(const NoteTemplate* msg);
  static const ::content_creation::proto::FooterStyle& footerstyle(const NoteTemplate* msg);
};

const ::content_creation::proto::Background&
NoteTemplate::_Internal::mainbackground(const NoteTemplate* msg) {
  return *msg->mainbackground_;
}
const ::content_creation::proto::Background&
NoteTemplate::_Internal::contentbackground(const NoteTemplate* msg) {
  return *msg->contentbackground_;
}
const ::content_creation::proto::TextStyle&
NoteTemplate::_Internal::textstyle(const NoteTemplate* msg) {
  return *msg->textstyle_;
}
const ::content_creation::proto::FooterStyle&
NoteTemplate::_Internal::footerstyle(const NoteTemplate* msg) {
  return *msg->footerstyle_;
}
NoteTemplate::NoteTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content_creation.proto.NoteTemplate)
}
NoteTemplate::NoteTemplate(const NoteTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mainbackground()) {
    mainbackground_ = new ::content_creation::proto::Background(*from.mainbackground_);
  } else {
    mainbackground_ = nullptr;
  }
  if (from._internal_has_contentbackground()) {
    contentbackground_ = new ::content_creation::proto::Background(*from.contentbackground_);
  } else {
    contentbackground_ = nullptr;
  }
  if (from._internal_has_textstyle()) {
    textstyle_ = new ::content_creation::proto::TextStyle(*from.textstyle_);
  } else {
    textstyle_ = nullptr;
  }
  if (from._internal_has_footerstyle()) {
    footerstyle_ = new ::content_creation::proto::FooterStyle(*from.footerstyle_);
  } else {
    footerstyle_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:content_creation.proto.NoteTemplate)
}

inline void NoteTemplate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mainbackground_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&mainbackground_)) + sizeof(id_));
}

NoteTemplate::~NoteTemplate() {
  // @@protoc_insertion_point(destructor:content_creation.proto.NoteTemplate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mainbackground_;
  if (this != internal_default_instance()) delete contentbackground_;
  if (this != internal_default_instance()) delete textstyle_;
  if (this != internal_default_instance()) delete footerstyle_;
}

void NoteTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NoteTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:content_creation.proto.NoteTemplate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mainbackground_ != nullptr) {
    delete mainbackground_;
  }
  mainbackground_ = nullptr;
  if (GetArenaForAllocation() == nullptr && contentbackground_ != nullptr) {
    delete contentbackground_;
  }
  contentbackground_ = nullptr;
  if (GetArenaForAllocation() == nullptr && textstyle_ != nullptr) {
    delete textstyle_;
  }
  textstyle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && footerstyle_ != nullptr) {
    delete footerstyle_;
  }
  footerstyle_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* NoteTemplate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content_creation.proto.Background mainBackground = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mainbackground(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content_creation.proto.Background contentBackground = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contentbackground(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content_creation.proto.TextStyle textStyle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_textstyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content_creation.proto.FooterStyle footerStyle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_footerstyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteTemplate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content_creation.proto.NoteTemplate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .content_creation.proto.Background mainBackground = 2;
  if (this->_internal_has_mainbackground()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mainbackground(this),
        _Internal::mainbackground(this).GetCachedSize(), target, stream);
  }

  // .content_creation.proto.Background contentBackground = 3;
  if (this->_internal_has_contentbackground()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contentbackground(this),
        _Internal::contentbackground(this).GetCachedSize(), target, stream);
  }

  // .content_creation.proto.TextStyle textStyle = 4;
  if (this->_internal_has_textstyle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::textstyle(this),
        _Internal::textstyle(this).GetCachedSize(), target, stream);
  }

  // .content_creation.proto.FooterStyle footerStyle = 5;
  if (this->_internal_has_footerstyle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::footerstyle(this),
        _Internal::footerstyle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content_creation.proto.NoteTemplate)
  return target;
}

size_t NoteTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content_creation.proto.NoteTemplate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .content_creation.proto.Background mainBackground = 2;
  if (this->_internal_has_mainbackground()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mainbackground_);
  }

  // .content_creation.proto.Background contentBackground = 3;
  if (this->_internal_has_contentbackground()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contentbackground_);
  }

  // .content_creation.proto.TextStyle textStyle = 4;
  if (this->_internal_has_textstyle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *textstyle_);
  }

  // .content_creation.proto.FooterStyle footerStyle = 5;
  if (this->_internal_has_footerstyle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footerstyle_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoteTemplate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NoteTemplate*>(
      &from));
}

void NoteTemplate::MergeFrom(const NoteTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content_creation.proto.NoteTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mainbackground()) {
    _internal_mutable_mainbackground()->::content_creation::proto::Background::MergeFrom(from._internal_mainbackground());
  }
  if (from._internal_has_contentbackground()) {
    _internal_mutable_contentbackground()->::content_creation::proto::Background::MergeFrom(from._internal_contentbackground());
  }
  if (from._internal_has_textstyle()) {
    _internal_mutable_textstyle()->::content_creation::proto::TextStyle::MergeFrom(from._internal_textstyle());
  }
  if (from._internal_has_footerstyle()) {
    _internal_mutable_footerstyle()->::content_creation::proto::FooterStyle::MergeFrom(from._internal_footerstyle());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NoteTemplate::CopyFrom(const NoteTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content_creation.proto.NoteTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteTemplate::IsInitialized() const {
  return true;
}

void NoteTemplate::InternalSwap(NoteTemplate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoteTemplate, id_)
      + sizeof(NoteTemplate::id_)
      - PROTOBUF_FIELD_OFFSET(NoteTemplate, mainbackground_)>(
          reinterpret_cast<char*>(&mainbackground_),
          reinterpret_cast<char*>(&other->mainbackground_));
}

std::string NoteTemplate::GetTypeName() const {
  return "content_creation.proto.NoteTemplate";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content_creation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content_creation::proto::Gradient*
Arena::CreateMaybeMessage< ::content_creation::proto::Gradient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content_creation::proto::Gradient >(arena);
}
template<> PROTOBUF_NOINLINE ::content_creation::proto::Background*
Arena::CreateMaybeMessage< ::content_creation::proto::Background >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content_creation::proto::Background >(arena);
}
template<> PROTOBUF_NOINLINE ::content_creation::proto::TextStyle*
Arena::CreateMaybeMessage< ::content_creation::proto::TextStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content_creation::proto::TextStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::content_creation::proto::FooterStyle*
Arena::CreateMaybeMessage< ::content_creation::proto::FooterStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content_creation::proto::FooterStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::content_creation::proto::Date*
Arena::CreateMaybeMessage< ::content_creation::proto::Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content_creation::proto::Date >(arena);
}
template<> PROTOBUF_NOINLINE ::content_creation::proto::Collection*
Arena::CreateMaybeMessage< ::content_creation::proto::Collection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content_creation::proto::Collection >(arena);
}
template<> PROTOBUF_NOINLINE ::content_creation::proto::CollectionItem*
Arena::CreateMaybeMessage< ::content_creation::proto::CollectionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content_creation::proto::CollectionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::content_creation::proto::NoteTemplate*
Arena::CreateMaybeMessage< ::content_creation::proto::NoteTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content_creation::proto::NoteTemplate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
