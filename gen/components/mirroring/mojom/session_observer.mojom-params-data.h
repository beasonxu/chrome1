// components/mirroring/mojom/session_observer.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_MIRRORING_MOJOM_SESSION_OBSERVER_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_MIRRORING_MOJOM_SESSION_OBSERVER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mirroring {
namespace mojom {
namespace internal {

class ValidationContext;
class  SessionObserver_OnError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SessionObserver_OnError_Params_Data>;

  SessionObserver_OnError_Params_Data();
  ~SessionObserver_OnError_Params_Data() = delete;
};
static_assert(sizeof(SessionObserver_OnError_Params_Data) == 16,
              "Bad sizeof(SessionObserver_OnError_Params_Data)");
class  SessionObserver_DidStart_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionObserver_DidStart_Params_Data>;

  SessionObserver_DidStart_Params_Data();
  ~SessionObserver_DidStart_Params_Data() = delete;
};
static_assert(sizeof(SessionObserver_DidStart_Params_Data) == 8,
              "Bad sizeof(SessionObserver_DidStart_Params_Data)");
class  SessionObserver_DidStop_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionObserver_DidStop_Params_Data>;

  SessionObserver_DidStop_Params_Data();
  ~SessionObserver_DidStop_Params_Data() = delete;
};
static_assert(sizeof(SessionObserver_DidStop_Params_Data) == 8,
              "Bad sizeof(SessionObserver_DidStop_Params_Data)");
class  SessionObserver_LogInfoMessage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<SessionObserver_LogInfoMessage_Params_Data>;

  SessionObserver_LogInfoMessage_Params_Data();
  ~SessionObserver_LogInfoMessage_Params_Data() = delete;
};
static_assert(sizeof(SessionObserver_LogInfoMessage_Params_Data) == 16,
              "Bad sizeof(SessionObserver_LogInfoMessage_Params_Data)");
class  SessionObserver_LogErrorMessage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<SessionObserver_LogErrorMessage_Params_Data>;

  SessionObserver_LogErrorMessage_Params_Data();
  ~SessionObserver_LogErrorMessage_Params_Data() = delete;
};
static_assert(sizeof(SessionObserver_LogErrorMessage_Params_Data) == 16,
              "Bad sizeof(SessionObserver_LogErrorMessage_Params_Data)");

}  // namespace internal


class SessionObserver_OnError_ParamsDataView {
 public:
  SessionObserver_OnError_ParamsDataView() = default;

  SessionObserver_OnError_ParamsDataView(
      internal::SessionObserver_OnError_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::mirroring::mojom::SessionError>(
        data_value, output);
  }
  SessionError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mirroring::mojom::SessionError>(data_->error));
  }
 private:
  internal::SessionObserver_OnError_Params_Data* data_ = nullptr;
};



class SessionObserver_DidStart_ParamsDataView {
 public:
  SessionObserver_DidStart_ParamsDataView() = default;

  SessionObserver_DidStart_ParamsDataView(
      internal::SessionObserver_DidStart_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionObserver_DidStart_Params_Data* data_ = nullptr;
};



class SessionObserver_DidStop_ParamsDataView {
 public:
  SessionObserver_DidStop_ParamsDataView() = default;

  SessionObserver_DidStop_ParamsDataView(
      internal::SessionObserver_DidStop_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionObserver_DidStop_Params_Data* data_ = nullptr;
};



class SessionObserver_LogInfoMessage_ParamsDataView {
 public:
  SessionObserver_LogInfoMessage_ParamsDataView() = default;

  SessionObserver_LogInfoMessage_ParamsDataView(
      internal::SessionObserver_LogInfoMessage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SessionObserver_LogInfoMessage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SessionObserver_LogErrorMessage_ParamsDataView {
 public:
  SessionObserver_LogErrorMessage_ParamsDataView() = default;

  SessionObserver_LogErrorMessage_ParamsDataView(
      internal::SessionObserver_LogErrorMessage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SessionObserver_LogErrorMessage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};








inline void SessionObserver_LogInfoMessage_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void SessionObserver_LogErrorMessage_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace mirroring

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_MIRRORING_MOJOM_SESSION_OBSERVER_MOJOM_PARAMS_DATA_H_