// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/action_value.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * A value expression.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ValueExpression}
 */
public  final class ValueExpression extends
    com.google.protobuf.GeneratedMessageLite<
        ValueExpression, ValueExpression.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ValueExpression)
    ValueExpressionOrBuilder {
  private ValueExpression() {
    chunk_ = emptyProtobufList();
  }
  public interface RegexpReplacementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ValueExpression.RegexpReplacement)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * If the text filter matches ...
     * </pre>
     *
     * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
     * @return Whether the textFilter field is set.
     */
    boolean hasTextFilter();
    /**
     * <pre>
     * If the text filter matches ...
     * </pre>
     *
     * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
     * @return The textFilter.
     */
    org.chromium.chrome.browser.autofill_assistant.proto.TextFilter getTextFilter();

    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     * @return Whether the replacement field is set.
     */
    boolean hasReplacement();
    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     * @return The replacement.
     */
    java.lang.String getReplacement();
    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     * @return The bytes for replacement.
     */
    com.google.protobuf.ByteString
        getReplacementBytes();

    /**
     * <pre>
     * If true, replaces all occurrences, otherwise the first one only.
     * </pre>
     *
     * <code>optional bool global = 3;</code>
     * @return Whether the global field is set.
     */
    boolean hasGlobal();
    /**
     * <pre>
     * If true, replaces all occurrences, otherwise the first one only.
     * </pre>
     *
     * <code>optional bool global = 3;</code>
     * @return The global.
     */
    boolean getGlobal();
  }
  /**
   * <pre>
   * Used to perform regexp-based replacements.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ValueExpression.RegexpReplacement}
   */
  public  static final class RegexpReplacement extends
      com.google.protobuf.GeneratedMessageLite<
          RegexpReplacement, RegexpReplacement.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ValueExpression.RegexpReplacement)
      RegexpReplacementOrBuilder {
    private RegexpReplacement() {
      replacement_ = "";
    }
    private int bitField0_;
    public static final int TEXT_FILTER_FIELD_NUMBER = 1;
    private org.chromium.chrome.browser.autofill_assistant.proto.TextFilter textFilter_;
    /**
     * <pre>
     * If the text filter matches ...
     * </pre>
     *
     * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
     */
    @java.lang.Override
    public boolean hasTextFilter() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * If the text filter matches ...
     * </pre>
     *
     * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.TextFilter getTextFilter() {
      return textFilter_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.TextFilter.getDefaultInstance() : textFilter_;
    }
    /**
     * <pre>
     * If the text filter matches ...
     * </pre>
     *
     * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
     */
    private void setTextFilter(org.chromium.chrome.browser.autofill_assistant.proto.TextFilter value) {
      value.getClass();
  textFilter_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * If the text filter matches ...
     * </pre>
     *
     * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeTextFilter(org.chromium.chrome.browser.autofill_assistant.proto.TextFilter value) {
      value.getClass();
  if (textFilter_ != null &&
          textFilter_ != org.chromium.chrome.browser.autofill_assistant.proto.TextFilter.getDefaultInstance()) {
        textFilter_ =
          org.chromium.chrome.browser.autofill_assistant.proto.TextFilter.newBuilder(textFilter_).mergeFrom(value).buildPartial();
      } else {
        textFilter_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * If the text filter matches ...
     * </pre>
     *
     * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
     */
    private void clearTextFilter() {  textFilter_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int REPLACEMENT_FIELD_NUMBER = 2;
    private java.lang.String replacement_;
    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     * @return Whether the replacement field is set.
     */
    @java.lang.Override
    public boolean hasReplacement() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     * @return The replacement.
     */
    @java.lang.Override
    public java.lang.String getReplacement() {
      return replacement_;
    }
    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     * @return The bytes for replacement.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getReplacementBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(replacement_);
    }
    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     * @param value The replacement to set.
     */
    private void setReplacement(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000002;
      replacement_ = value;
    }
    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     */
    private void clearReplacement() {
      bitField0_ = (bitField0_ & ~0x00000002);
      replacement_ = getDefaultInstance().getReplacement();
    }
    /**
     * <pre>
     * ... replace by this value.
     * </pre>
     *
     * <code>optional string replacement = 2;</code>
     * @param value The bytes for replacement to set.
     */
    private void setReplacementBytes(
        com.google.protobuf.ByteString value) {
      replacement_ = value.toStringUtf8();
      bitField0_ |= 0x00000002;
    }

    public static final int GLOBAL_FIELD_NUMBER = 3;
    private boolean global_;
    /**
     * <pre>
     * If true, replaces all occurrences, otherwise the first one only.
     * </pre>
     *
     * <code>optional bool global = 3;</code>
     * @return Whether the global field is set.
     */
    @java.lang.Override
    public boolean hasGlobal() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * If true, replaces all occurrences, otherwise the first one only.
     * </pre>
     *
     * <code>optional bool global = 3;</code>
     * @return The global.
     */
    @java.lang.Override
    public boolean getGlobal() {
      return global_;
    }
    /**
     * <pre>
     * If true, replaces all occurrences, otherwise the first one only.
     * </pre>
     *
     * <code>optional bool global = 3;</code>
     * @param value The global to set.
     */
    private void setGlobal(boolean value) {
      bitField0_ |= 0x00000004;
      global_ = value;
    }
    /**
     * <pre>
     * If true, replaces all occurrences, otherwise the first one only.
     * </pre>
     *
     * <code>optional bool global = 3;</code>
     */
    private void clearGlobal() {
      bitField0_ = (bitField0_ & ~0x00000004);
      global_ = false;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Used to perform regexp-based replacements.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.ValueExpression.RegexpReplacement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ValueExpression.RegexpReplacement)
        org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacementOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * If the text filter matches ...
       * </pre>
       *
       * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
       */
      @java.lang.Override
      public boolean hasTextFilter() {
        return instance.hasTextFilter();
      }
      /**
       * <pre>
       * If the text filter matches ...
       * </pre>
       *
       * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.TextFilter getTextFilter() {
        return instance.getTextFilter();
      }
      /**
       * <pre>
       * If the text filter matches ...
       * </pre>
       *
       * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
       */
      public Builder setTextFilter(org.chromium.chrome.browser.autofill_assistant.proto.TextFilter value) {
        copyOnWrite();
        instance.setTextFilter(value);
        return this;
        }
      /**
       * <pre>
       * If the text filter matches ...
       * </pre>
       *
       * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
       */
      public Builder setTextFilter(
          org.chromium.chrome.browser.autofill_assistant.proto.TextFilter.Builder builderForValue) {
        copyOnWrite();
        instance.setTextFilter(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * If the text filter matches ...
       * </pre>
       *
       * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
       */
      public Builder mergeTextFilter(org.chromium.chrome.browser.autofill_assistant.proto.TextFilter value) {
        copyOnWrite();
        instance.mergeTextFilter(value);
        return this;
      }
      /**
       * <pre>
       * If the text filter matches ...
       * </pre>
       *
       * <code>optional .autofill_assistant.TextFilter text_filter = 1;</code>
       */
      public Builder clearTextFilter() {  copyOnWrite();
        instance.clearTextFilter();
        return this;
      }

      /**
       * <pre>
       * ... replace by this value.
       * </pre>
       *
       * <code>optional string replacement = 2;</code>
       * @return Whether the replacement field is set.
       */
      @java.lang.Override
      public boolean hasReplacement() {
        return instance.hasReplacement();
      }
      /**
       * <pre>
       * ... replace by this value.
       * </pre>
       *
       * <code>optional string replacement = 2;</code>
       * @return The replacement.
       */
      @java.lang.Override
      public java.lang.String getReplacement() {
        return instance.getReplacement();
      }
      /**
       * <pre>
       * ... replace by this value.
       * </pre>
       *
       * <code>optional string replacement = 2;</code>
       * @return The bytes for replacement.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getReplacementBytes() {
        return instance.getReplacementBytes();
      }
      /**
       * <pre>
       * ... replace by this value.
       * </pre>
       *
       * <code>optional string replacement = 2;</code>
       * @param value The replacement to set.
       * @return This builder for chaining.
       */
      public Builder setReplacement(
          java.lang.String value) {
        copyOnWrite();
        instance.setReplacement(value);
        return this;
      }
      /**
       * <pre>
       * ... replace by this value.
       * </pre>
       *
       * <code>optional string replacement = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearReplacement() {
        copyOnWrite();
        instance.clearReplacement();
        return this;
      }
      /**
       * <pre>
       * ... replace by this value.
       * </pre>
       *
       * <code>optional string replacement = 2;</code>
       * @param value The bytes for replacement to set.
       * @return This builder for chaining.
       */
      public Builder setReplacementBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setReplacementBytes(value);
        return this;
      }

      /**
       * <pre>
       * If true, replaces all occurrences, otherwise the first one only.
       * </pre>
       *
       * <code>optional bool global = 3;</code>
       * @return Whether the global field is set.
       */
      @java.lang.Override
      public boolean hasGlobal() {
        return instance.hasGlobal();
      }
      /**
       * <pre>
       * If true, replaces all occurrences, otherwise the first one only.
       * </pre>
       *
       * <code>optional bool global = 3;</code>
       * @return The global.
       */
      @java.lang.Override
      public boolean getGlobal() {
        return instance.getGlobal();
      }
      /**
       * <pre>
       * If true, replaces all occurrences, otherwise the first one only.
       * </pre>
       *
       * <code>optional bool global = 3;</code>
       * @param value The global to set.
       * @return This builder for chaining.
       */
      public Builder setGlobal(boolean value) {
        copyOnWrite();
        instance.setGlobal(value);
        return this;
      }
      /**
       * <pre>
       * If true, replaces all occurrences, otherwise the first one only.
       * </pre>
       *
       * <code>optional bool global = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearGlobal() {
        copyOnWrite();
        instance.clearGlobal();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ValueExpression.RegexpReplacement)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "textFilter_",
              "replacement_",
              "global_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
                "\u1008\u0001\u0003\u1007\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ValueExpression.RegexpReplacement)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement DEFAULT_INSTANCE;
    static {
      RegexpReplacement defaultInstance = new RegexpReplacement();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        RegexpReplacement.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<RegexpReplacement> PARSER;

    public static com.google.protobuf.Parser<RegexpReplacement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChunkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ValueExpression.Chunk)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * An integer representation to resolve a piece of Autofill information.
     * The key is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically from the selected profile or
     * credit card. In case of a credit card, the full card number as well as
     * the CVC are not available.
     * </pre>
     *
     * <code>int32 key = 1;</code>
     * @return Whether the key field is set.
     */
    boolean hasKey();
    /**
     * <pre>
     * An integer representation to resolve a piece of Autofill information.
     * The key is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically from the selected profile or
     * credit card. In case of a credit card, the full card number as well as
     * the CVC are not available.
     * </pre>
     *
     * <code>int32 key = 1;</code>
     * @return The key.
     */
    int getKey();

    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     * @return Whether the text field is set.
     */
    boolean hasText();
    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     * @return The text.
     */
    java.lang.String getText();
    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     * @return The bytes for text.
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     * @return Whether the memoryKey field is set.
     */
    boolean hasMemoryKey();
    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     * @return The memoryKey.
     */
    java.lang.String getMemoryKey();
    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     * @return The bytes for memoryKey.
     */
    com.google.protobuf.ByteString
        getMemoryKeyBytes();

    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */
    int getReplacementsCount();
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */
    boolean containsReplacements(
        java.lang.String key);
    /**
     * Use {@link #getReplacementsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getReplacements();
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getReplacementsMap();
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */

    java.lang.String getReplacementsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */

    java.lang.String getReplacementsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement> 
        getRegexpReplacementsList();
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement getRegexpReplacements(int index);
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    int getRegexpReplacementsCount();

    public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk.ChunkCase getChunkCase();
  }
  /**
   * Protobuf type {@code autofill_assistant.ValueExpression.Chunk}
   */
  public  static final class Chunk extends
      com.google.protobuf.GeneratedMessageLite<
          Chunk, Chunk.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ValueExpression.Chunk)
      ChunkOrBuilder {
    private Chunk() {
      regexpReplacements_ = emptyProtobufList();
    }
    private int bitField0_;
    private int chunkCase_ = 0;
    private java.lang.Object chunk_;
    public enum ChunkCase {
      KEY(1),
      TEXT(2),
      MEMORY_KEY(4),
      CHUNK_NOT_SET(0);
      private final int value;
      private ChunkCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ChunkCase valueOf(int value) {
        return forNumber(value);
      }

      public static ChunkCase forNumber(int value) {
        switch (value) {
          case 1: return KEY;
          case 2: return TEXT;
          case 4: return MEMORY_KEY;
          case 0: return CHUNK_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public ChunkCase
    getChunkCase() {
      return ChunkCase.forNumber(
          chunkCase_);
    }

    private void clearChunk() {
      chunkCase_ = 0;
      chunk_ = null;
    }

    public static final int KEY_FIELD_NUMBER = 1;
    /**
     * <pre>
     * An integer representation to resolve a piece of Autofill information.
     * The key is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically from the selected profile or
     * credit card. In case of a credit card, the full card number as well as
     * the CVC are not available.
     * </pre>
     *
     * <code>int32 key = 1;</code>
     * @return Whether the key field is set.
     */
    @java.lang.Override
    public boolean hasKey() {
      return chunkCase_ == 1;
    }
    /**
     * <pre>
     * An integer representation to resolve a piece of Autofill information.
     * The key is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically from the selected profile or
     * credit card. In case of a credit card, the full card number as well as
     * the CVC are not available.
     * </pre>
     *
     * <code>int32 key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public int getKey() {
      if (chunkCase_ == 1) {
        return (java.lang.Integer) chunk_;
      }
      return 0;
    }
    /**
     * <pre>
     * An integer representation to resolve a piece of Autofill information.
     * The key is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically from the selected profile or
     * credit card. In case of a credit card, the full card number as well as
     * the CVC are not available.
     * </pre>
     *
     * <code>int32 key = 1;</code>
     * @param value The key to set.
     */
    private void setKey(int value) {
      chunkCase_ = 1;
      chunk_ = value;
    }
    /**
     * <pre>
     * An integer representation to resolve a piece of Autofill information.
     * The key is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically from the selected profile or
     * credit card. In case of a credit card, the full card number as well as
     * the CVC are not available.
     * </pre>
     *
     * <code>int32 key = 1;</code>
     */
    private void clearKey() {
      if (chunkCase_ == 1) {
        chunkCase_ = 0;
        chunk_ = null;
      }
    }

    public static final int TEXT_FIELD_NUMBER = 2;
    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     * @return Whether the text field is set.
     */
    @java.lang.Override
    public boolean hasText() {
      return chunkCase_ == 2;
    }
    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     * @return The text.
     */
    @java.lang.Override
    public java.lang.String getText() {
      java.lang.String ref = "";
      if (chunkCase_ == 2) {
        ref = (java.lang.String) chunk_;
      }
      return ref;
    }
    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     * @return The bytes for text.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.String ref = "";
      if (chunkCase_ == 2) {
        ref = (java.lang.String) chunk_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     * @param value The text to set.
     */
    private void setText(
        java.lang.String value) {
      value.getClass();
  chunkCase_ = 2;
      chunk_ = value;
    }
    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     */
    private void clearText() {
      if (chunkCase_ == 2) {
        chunkCase_ = 0;
        chunk_ = null;
      }
    }
    /**
     * <pre>
     * A plain text.
     * </pre>
     *
     * <code>string text = 2;</code>
     * @param value The bytes for text to set.
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      chunk_ = value.toStringUtf8();
      chunkCase_ = 2;
    }

    public static final int MEMORY_KEY_FIELD_NUMBER = 4;
    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     * @return Whether the memoryKey field is set.
     */
    @java.lang.Override
    public boolean hasMemoryKey() {
      return chunkCase_ == 4;
    }
    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     * @return The memoryKey.
     */
    @java.lang.Override
    public java.lang.String getMemoryKey() {
      java.lang.String ref = "";
      if (chunkCase_ == 4) {
        ref = (java.lang.String) chunk_;
      }
      return ref;
    }
    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     * @return The bytes for memoryKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMemoryKeyBytes() {
      java.lang.String ref = "";
      if (chunkCase_ == 4) {
        ref = (java.lang.String) chunk_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     * @param value The memoryKey to set.
     */
    private void setMemoryKey(
        java.lang.String value) {
      value.getClass();
  chunkCase_ = 4;
      chunk_ = value;
    }
    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     */
    private void clearMemoryKey() {
      if (chunkCase_ == 4) {
        chunkCase_ = 0;
        chunk_ = null;
      }
    }
    /**
     * <pre>
     * A client memory key. This looks up an entry in the previously stored
     * values on the client.
     * </pre>
     *
     * <code>string memory_key = 4;</code>
     * @param value The bytes for memoryKey to set.
     */
    private void setMemoryKeyBytes(
        com.google.protobuf.ByteString value) {
      chunk_ = value.toStringUtf8();
      chunkCase_ = 4;
    }

    public static final int REPLACEMENTS_FIELD_NUMBER = 3;
    private static final class ReplacementsDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.String> replacements_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetReplacements() {
      return replacements_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMutableReplacements() {
      if (!replacements_.isMutable()) {
        replacements_ = replacements_.mutableCopy();
      }
      return replacements_;
    }
    @java.lang.Override

    public int getReplacementsCount() {
      return internalGetReplacements().size();
    }
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */
    @java.lang.Override

    public boolean containsReplacements(
        java.lang.String key) {
      key.getClass();
      return internalGetReplacements().containsKey(key);
    }
    /**
     * Use {@link #getReplacementsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getReplacements() {
      return getReplacementsMap();
    }
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getReplacementsMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetReplacements());
    }
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */
    @java.lang.Override

    public java.lang.String getReplacementsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetReplacements();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */
    @java.lang.Override

    public java.lang.String getReplacementsOrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetReplacements();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * If the chunk fully matches the given case-sensitive key, it will be
     * replaced with the specified value.
     * When used in a regular expression context, no escaping is applied to
     * either the key or value. As a result, both fields must be explicitly
     * escaped in the message.
     * Examples:
     * - key: GB, value: (UK|GB)
     * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
     * </pre>
     *
     * <code>map&lt;string, string&gt; replacements = 3;</code>
     */
    private java.util.Map<java.lang.String, java.lang.String>
    getMutableReplacementsMap() {
      return internalGetMutableReplacements();
    }

    public static final int REGEXP_REPLACEMENTS_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement> regexpReplacements_;
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement> getRegexpReplacementsList() {
      return regexpReplacements_;
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacementOrBuilder> 
        getRegexpReplacementsOrBuilderList() {
      return regexpReplacements_;
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    @java.lang.Override
    public int getRegexpReplacementsCount() {
      return regexpReplacements_.size();
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement getRegexpReplacements(int index) {
      return regexpReplacements_.get(index);
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacementOrBuilder getRegexpReplacementsOrBuilder(
        int index) {
      return regexpReplacements_.get(index);
    }
    private void ensureRegexpReplacementsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement> tmp = regexpReplacements_;
      if (!tmp.isModifiable()) {
        regexpReplacements_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    private void setRegexpReplacements(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement value) {
      value.getClass();
  ensureRegexpReplacementsIsMutable();
      regexpReplacements_.set(index, value);
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    private void addRegexpReplacements(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement value) {
      value.getClass();
  ensureRegexpReplacementsIsMutable();
      regexpReplacements_.add(value);
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    private void addRegexpReplacements(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement value) {
      value.getClass();
  ensureRegexpReplacementsIsMutable();
      regexpReplacements_.add(index, value);
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    private void addAllRegexpReplacements(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement> values) {
      ensureRegexpReplacementsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, regexpReplacements_);
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    private void clearRegexpReplacements() {
      regexpReplacements_ = emptyProtobufList();
    }
    /**
     * <pre>
     * If any of the replacements match, apply them. While not explicitly
     * forbidden it should not be required to use this in combination with
     * the key/value replacements. In case they are chained, the key/value
     * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
     * be used to insert text matching the corresponding parenthesized group
     * from the pattern. &#92;0 refers to the entire matching text.
     * Examples:
     * - text_filter: ^0, replacement: "", is_global: false
     *   Replaces a leading 0 in the chunk
     * - text_filter: &#92;s+, replacement: "", is_global: true
     *   Removes all whitespace in the chunk
     * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
     *   Flips two words
     * </pre>
     *
     * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
     */
    private void removeRegexpReplacements(int index) {
      ensureRegexpReplacementsIsMutable();
      regexpReplacements_.remove(index);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.ValueExpression.Chunk}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ValueExpression.Chunk)
        org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.ChunkOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public ChunkCase
          getChunkCase() {
        return instance.getChunkCase();
      }

      public Builder clearChunk() {
        copyOnWrite();
        instance.clearChunk();
        return this;
      }


      /**
       * <pre>
       * An integer representation to resolve a piece of Autofill information.
       * The key is an integer corresponding to entries from field_types.h or
       * |AutofillFormatProto::AutofillAssistantCustomField|.
       * Note that the set of actually available fields are outside of our
       * control and are retrieved automatically from the selected profile or
       * credit card. In case of a credit card, the full card number as well as
       * the CVC are not available.
       * </pre>
       *
       * <code>int32 key = 1;</code>
       * @return Whether the key field is set.
       */
      @java.lang.Override
      public boolean hasKey() {
        return instance.hasKey();
      }
      /**
       * <pre>
       * An integer representation to resolve a piece of Autofill information.
       * The key is an integer corresponding to entries from field_types.h or
       * |AutofillFormatProto::AutofillAssistantCustomField|.
       * Note that the set of actually available fields are outside of our
       * control and are retrieved automatically from the selected profile or
       * credit card. In case of a credit card, the full card number as well as
       * the CVC are not available.
       * </pre>
       *
       * <code>int32 key = 1;</code>
       * @return The key.
       */
      @java.lang.Override
      public int getKey() {
        return instance.getKey();
      }
      /**
       * <pre>
       * An integer representation to resolve a piece of Autofill information.
       * The key is an integer corresponding to entries from field_types.h or
       * |AutofillFormatProto::AutofillAssistantCustomField|.
       * Note that the set of actually available fields are outside of our
       * control and are retrieved automatically from the selected profile or
       * credit card. In case of a credit card, the full card number as well as
       * the CVC are not available.
       * </pre>
       *
       * <code>int32 key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(int value) {
        copyOnWrite();
        instance.setKey(value);
        return this;
      }
      /**
       * <pre>
       * An integer representation to resolve a piece of Autofill information.
       * The key is an integer corresponding to entries from field_types.h or
       * |AutofillFormatProto::AutofillAssistantCustomField|.
       * Note that the set of actually available fields are outside of our
       * control and are retrieved automatically from the selected profile or
       * credit card. In case of a credit card, the full card number as well as
       * the CVC are not available.
       * </pre>
       *
       * <code>int32 key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        copyOnWrite();
        instance.clearKey();
        return this;
      }

      /**
       * <pre>
       * A plain text.
       * </pre>
       *
       * <code>string text = 2;</code>
       * @return Whether the text field is set.
       */
      @java.lang.Override
      public boolean hasText() {
        return instance.hasText();
      }
      /**
       * <pre>
       * A plain text.
       * </pre>
       *
       * <code>string text = 2;</code>
       * @return The text.
       */
      @java.lang.Override
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       * A plain text.
       * </pre>
       *
       * <code>string text = 2;</code>
       * @return The bytes for text.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       * A plain text.
       * </pre>
       *
       * <code>string text = 2;</code>
       * @param value The text to set.
       * @return This builder for chaining.
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       * A plain text.
       * </pre>
       *
       * <code>string text = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       * A plain text.
       * </pre>
       *
       * <code>string text = 2;</code>
       * @param value The bytes for text to set.
       * @return This builder for chaining.
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <pre>
       * A client memory key. This looks up an entry in the previously stored
       * values on the client.
       * </pre>
       *
       * <code>string memory_key = 4;</code>
       * @return Whether the memoryKey field is set.
       */
      @java.lang.Override
      public boolean hasMemoryKey() {
        return instance.hasMemoryKey();
      }
      /**
       * <pre>
       * A client memory key. This looks up an entry in the previously stored
       * values on the client.
       * </pre>
       *
       * <code>string memory_key = 4;</code>
       * @return The memoryKey.
       */
      @java.lang.Override
      public java.lang.String getMemoryKey() {
        return instance.getMemoryKey();
      }
      /**
       * <pre>
       * A client memory key. This looks up an entry in the previously stored
       * values on the client.
       * </pre>
       *
       * <code>string memory_key = 4;</code>
       * @return The bytes for memoryKey.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getMemoryKeyBytes() {
        return instance.getMemoryKeyBytes();
      }
      /**
       * <pre>
       * A client memory key. This looks up an entry in the previously stored
       * values on the client.
       * </pre>
       *
       * <code>string memory_key = 4;</code>
       * @param value The memoryKey to set.
       * @return This builder for chaining.
       */
      public Builder setMemoryKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setMemoryKey(value);
        return this;
      }
      /**
       * <pre>
       * A client memory key. This looks up an entry in the previously stored
       * values on the client.
       * </pre>
       *
       * <code>string memory_key = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMemoryKey() {
        copyOnWrite();
        instance.clearMemoryKey();
        return this;
      }
      /**
       * <pre>
       * A client memory key. This looks up an entry in the previously stored
       * values on the client.
       * </pre>
       *
       * <code>string memory_key = 4;</code>
       * @param value The bytes for memoryKey to set.
       * @return This builder for chaining.
       */
      public Builder setMemoryKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMemoryKeyBytes(value);
        return this;
      }

      @java.lang.Override

      public int getReplacementsCount() {
        return instance.getReplacementsMap().size();
      }
      /**
       * <pre>
       * If the chunk fully matches the given case-sensitive key, it will be
       * replaced with the specified value.
       * When used in a regular expression context, no escaping is applied to
       * either the key or value. As a result, both fields must be explicitly
       * escaped in the message.
       * Examples:
       * - key: GB, value: (UK|GB)
       * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
       * </pre>
       *
       * <code>map&lt;string, string&gt; replacements = 3;</code>
       */
      @java.lang.Override

      public boolean containsReplacements(
          java.lang.String key) {
        key.getClass();
        return instance.getReplacementsMap().containsKey(key);
      }

      public Builder clearReplacements() {
        copyOnWrite();
        instance.getMutableReplacementsMap().clear();
        return this;
      }
      /**
       * <pre>
       * If the chunk fully matches the given case-sensitive key, it will be
       * replaced with the specified value.
       * When used in a regular expression context, no escaping is applied to
       * either the key or value. As a result, both fields must be explicitly
       * escaped in the message.
       * Examples:
       * - key: GB, value: (UK|GB)
       * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
       * </pre>
       *
       * <code>map&lt;string, string&gt; replacements = 3;</code>
       */

      public Builder removeReplacements(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableReplacementsMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getReplacementsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getReplacements() {
        return getReplacementsMap();
      }
      /**
       * <pre>
       * If the chunk fully matches the given case-sensitive key, it will be
       * replaced with the specified value.
       * When used in a regular expression context, no escaping is applied to
       * either the key or value. As a result, both fields must be explicitly
       * escaped in the message.
       * Examples:
       * - key: GB, value: (UK|GB)
       * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
       * </pre>
       *
       * <code>map&lt;string, string&gt; replacements = 3;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getReplacementsMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getReplacementsMap());
      }
      /**
       * <pre>
       * If the chunk fully matches the given case-sensitive key, it will be
       * replaced with the specified value.
       * When used in a regular expression context, no escaping is applied to
       * either the key or value. As a result, both fields must be explicitly
       * escaped in the message.
       * Examples:
       * - key: GB, value: (UK|GB)
       * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
       * </pre>
       *
       * <code>map&lt;string, string&gt; replacements = 3;</code>
       */
      @java.lang.Override

      public java.lang.String getReplacementsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getReplacementsMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * If the chunk fully matches the given case-sensitive key, it will be
       * replaced with the specified value.
       * When used in a regular expression context, no escaping is applied to
       * either the key or value. As a result, both fields must be explicitly
       * escaped in the message.
       * Examples:
       * - key: GB, value: (UK|GB)
       * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
       * </pre>
       *
       * <code>map&lt;string, string&gt; replacements = 3;</code>
       */
      @java.lang.Override

      public java.lang.String getReplacementsOrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getReplacementsMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * If the chunk fully matches the given case-sensitive key, it will be
       * replaced with the specified value.
       * When used in a regular expression context, no escaping is applied to
       * either the key or value. As a result, both fields must be explicitly
       * escaped in the message.
       * Examples:
       * - key: GB, value: (UK|GB)
       * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
       * </pre>
       *
       * <code>map&lt;string, string&gt; replacements = 3;</code>
       */
      public Builder putReplacements(
          java.lang.String key,
          java.lang.String value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableReplacementsMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * If the chunk fully matches the given case-sensitive key, it will be
       * replaced with the specified value.
       * When used in a regular expression context, no escaping is applied to
       * either the key or value. As a result, both fields must be explicitly
       * escaped in the message.
       * Examples:
       * - key: GB, value: (UK|GB)
       * - key: United&#92; States, value: (United States|USA|U&#92;.S&#92;.A&#92;.?)
       * </pre>
       *
       * <code>map&lt;string, string&gt; replacements = 3;</code>
       */
      public Builder putAllReplacements(
          java.util.Map<java.lang.String, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableReplacementsMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement> getRegexpReplacementsList() {
        return java.util.Collections.unmodifiableList(
            instance.getRegexpReplacementsList());
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      @java.lang.Override
      public int getRegexpReplacementsCount() {
        return instance.getRegexpReplacementsCount();
      }/**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement getRegexpReplacements(int index) {
        return instance.getRegexpReplacements(index);
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder setRegexpReplacements(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement value) {
        copyOnWrite();
        instance.setRegexpReplacements(index, value);
        return this;
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder setRegexpReplacements(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement.Builder builderForValue) {
        copyOnWrite();
        instance.setRegexpReplacements(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder addRegexpReplacements(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement value) {
        copyOnWrite();
        instance.addRegexpReplacements(value);
        return this;
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder addRegexpReplacements(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement value) {
        copyOnWrite();
        instance.addRegexpReplacements(index, value);
        return this;
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder addRegexpReplacements(
          org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement.Builder builderForValue) {
        copyOnWrite();
        instance.addRegexpReplacements(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder addRegexpReplacements(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement.Builder builderForValue) {
        copyOnWrite();
        instance.addRegexpReplacements(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder addAllRegexpReplacements(
          java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement> values) {
        copyOnWrite();
        instance.addAllRegexpReplacements(values);
        return this;
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder clearRegexpReplacements() {
        copyOnWrite();
        instance.clearRegexpReplacements();
        return this;
      }
      /**
       * <pre>
       * If any of the replacements match, apply them. While not explicitly
       * forbidden it should not be required to use this in combination with
       * the key/value replacements. In case they are chained, the key/value
       * replacements are applied first. Backslash-escaped digits (&#92;1 to &#92;9) can
       * be used to insert text matching the corresponding parenthesized group
       * from the pattern. &#92;0 refers to the entire matching text.
       * Examples:
       * - text_filter: ^0, replacement: "", is_global: false
       *   Replaces a leading 0 in the chunk
       * - text_filter: &#92;s+, replacement: "", is_global: true
       *   Removes all whitespace in the chunk
       * - text_filter: (&#92;w+)&#92;s(&#92;w+), replacement: &#92;2 &#92;1
       *   Flips two words
       * </pre>
       *
       * <code>repeated .autofill_assistant.ValueExpression.RegexpReplacement regexp_replacements = 5;</code>
       */
      public Builder removeRegexpReplacements(int index) {
        copyOnWrite();
        instance.removeRegexpReplacements(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ValueExpression.Chunk)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "chunk_",
              "chunkCase_",
              "bitField0_",
              "replacements_",
              ReplacementsDefaultEntryHolder.defaultEntry,
              "regexpReplacements_",
              org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.RegexpReplacement.class,
            };
            java.lang.String info =
                "\u0001\u0005\u0001\u0001\u0001\u0005\u0005\u0001\u0001\u0000\u0001\u1037\u0000\u0002" +
                "\u103b\u0000\u00032\u0004\u103b\u0000\u0005\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ValueExpression.Chunk)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk DEFAULT_INSTANCE;
    static {
      Chunk defaultInstance = new Chunk();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Chunk.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Chunk> PARSER;

    public static com.google.protobuf.Parser<Chunk> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int CHUNK_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk> chunk_;
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  @java.lang.Override
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk> getChunkList() {
    return chunk_;
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.ChunkOrBuilder> 
      getChunkOrBuilderList() {
    return chunk_;
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  @java.lang.Override
  public int getChunkCount() {
    return chunk_.size();
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk getChunk(int index) {
    return chunk_.get(index);
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.ChunkOrBuilder getChunkOrBuilder(
      int index) {
    return chunk_.get(index);
  }
  private void ensureChunkIsMutable() {
    com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk> tmp = chunk_;
    if (!tmp.isModifiable()) {
      chunk_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  private void setChunk(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk value) {
    value.getClass();
  ensureChunkIsMutable();
    chunk_.set(index, value);
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  private void addChunk(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk value) {
    value.getClass();
  ensureChunkIsMutable();
    chunk_.add(value);
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  private void addChunk(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk value) {
    value.getClass();
  ensureChunkIsMutable();
    chunk_.add(index, value);
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  private void addAllChunk(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk> values) {
    ensureChunkIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, chunk_);
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  private void clearChunk() {
    chunk_ = emptyProtobufList();
  }
  /**
   * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
   */
  private void removeChunk(int index) {
    ensureChunkIsMutable();
    chunk_.remove(index);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A value expression.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ValueExpression}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ValueExpression)
      org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk> getChunkList() {
      return java.util.Collections.unmodifiableList(
          instance.getChunkList());
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    @java.lang.Override
    public int getChunkCount() {
      return instance.getChunkCount();
    }/**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk getChunk(int index) {
      return instance.getChunk(index);
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder setChunk(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk value) {
      copyOnWrite();
      instance.setChunk(index, value);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder setChunk(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk.Builder builderForValue) {
      copyOnWrite();
      instance.setChunk(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder addChunk(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk value) {
      copyOnWrite();
      instance.addChunk(value);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder addChunk(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk value) {
      copyOnWrite();
      instance.addChunk(index, value);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder addChunk(
        org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk.Builder builderForValue) {
      copyOnWrite();
      instance.addChunk(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder addChunk(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk.Builder builderForValue) {
      copyOnWrite();
      instance.addChunk(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder addAllChunk(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk> values) {
      copyOnWrite();
      instance.addAllChunk(values);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder clearChunk() {
      copyOnWrite();
      instance.clearChunk();
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.ValueExpression.Chunk chunk = 1;</code>
     */
    public Builder removeChunk(int index) {
      copyOnWrite();
      instance.removeChunk(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ValueExpression)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "chunk_",
            org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Chunk.class,
          };
          java.lang.String info =
              "\u0001\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ValueExpression)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression DEFAULT_INSTANCE;
  static {
    ValueExpression defaultInstance = new ValueExpression();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ValueExpression.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ValueExpression> PARSER;

  public static com.google.protobuf.Parser<ValueExpression> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

