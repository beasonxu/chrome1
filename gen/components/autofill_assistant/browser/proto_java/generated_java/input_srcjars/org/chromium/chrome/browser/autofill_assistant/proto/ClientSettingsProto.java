// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Next ID: 26
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ClientSettingsProto}
 */
public  final class ClientSettingsProto extends
    com.google.protobuf.GeneratedMessageLite<
        ClientSettingsProto, ClientSettingsProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ClientSettingsProto)
    ClientSettingsProtoOrBuilder {
  private ClientSettingsProto() {
    displayStrings_ = emptyProtobufList();
    displayStringsLocale_ = "";
  }
  /**
   * <pre>
   * Strings that are needed for Chrome Client UI.
   * </pre>
   *
   * Protobuf enum {@code autofill_assistant.ClientSettingsProto.DisplayStringId}
   */
  public enum DisplayStringId
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Unspecified value
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    UNSPECIFIED(0),
    /**
     * <pre>
     * Text label that is shown when autofill assistant cannot help anymore,
     * because of a user action.
     * </pre>
     *
     * <code>GIVE_UP = 1;</code>
     */
    GIVE_UP(1),
    /**
     * <pre>
     * Text label shown next to an UNDO button when user action indicate they
     * want to continue on their own.
     * </pre>
     *
     * <code>MAYBE_GIVE_UP = 2;</code>
     */
    MAYBE_GIVE_UP(2),
    /**
     * <pre>
     * Text label that is shown when autofill assistant cannot help anymore,
     * because something went wrong.
     * </pre>
     *
     * <code>DEFAULT_ERROR = 3;</code>
     */
    DEFAULT_ERROR(3),
    /**
     * <pre>
     * Text on the payment request primary button to confirm payment information
     * </pre>
     *
     * <code>PAYMENT_INFO_CONFIRM = 4;</code>
     */
    PAYMENT_INFO_CONFIRM(4),
    /**
     * <pre>
     * Generic label for a button to continue to the next screen.
     * </pre>
     *
     * <code>CONTINUE_BUTTON = 5;</code>
     */
    CONTINUE_BUTTON(5),
    /**
     * <pre>
     * Text label that is shown when stopping the Autofill Assistant.
     * </pre>
     *
     * <code>STOPPED = 6;</code>
     */
    STOPPED(6),
    /**
     * <pre>
     * Option shown in the menu when clicking the Autofill Assistant profile
     * icon. Clicking this option will open a feedback sharing dialog.
     * </pre>
     *
     * <code>SEND_FEEDBACK = 7;</code>
     */
    SEND_FEEDBACK(7),
    /**
     * <pre>
     * A generic term for Close on buttons and menus.
     * </pre>
     *
     * <code>CLOSE = 8;</code>
     */
    CLOSE(8),
    /**
     * <pre>
     * Title for Chrome's Settings.
     * </pre>
     *
     * <code>SETTINGS = 9;</code>
     */
    SETTINGS(9),
    /**
     * <pre>
     * Undo message for snackbar.
     * </pre>
     *
     * <code>UNDO = 10;</code>
     */
    UNDO(10),
    ;

    /**
     * <pre>
     * Unspecified value
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    public static final int UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Text label that is shown when autofill assistant cannot help anymore,
     * because of a user action.
     * </pre>
     *
     * <code>GIVE_UP = 1;</code>
     */
    public static final int GIVE_UP_VALUE = 1;
    /**
     * <pre>
     * Text label shown next to an UNDO button when user action indicate they
     * want to continue on their own.
     * </pre>
     *
     * <code>MAYBE_GIVE_UP = 2;</code>
     */
    public static final int MAYBE_GIVE_UP_VALUE = 2;
    /**
     * <pre>
     * Text label that is shown when autofill assistant cannot help anymore,
     * because something went wrong.
     * </pre>
     *
     * <code>DEFAULT_ERROR = 3;</code>
     */
    public static final int DEFAULT_ERROR_VALUE = 3;
    /**
     * <pre>
     * Text on the payment request primary button to confirm payment information
     * </pre>
     *
     * <code>PAYMENT_INFO_CONFIRM = 4;</code>
     */
    public static final int PAYMENT_INFO_CONFIRM_VALUE = 4;
    /**
     * <pre>
     * Generic label for a button to continue to the next screen.
     * </pre>
     *
     * <code>CONTINUE_BUTTON = 5;</code>
     */
    public static final int CONTINUE_BUTTON_VALUE = 5;
    /**
     * <pre>
     * Text label that is shown when stopping the Autofill Assistant.
     * </pre>
     *
     * <code>STOPPED = 6;</code>
     */
    public static final int STOPPED_VALUE = 6;
    /**
     * <pre>
     * Option shown in the menu when clicking the Autofill Assistant profile
     * icon. Clicking this option will open a feedback sharing dialog.
     * </pre>
     *
     * <code>SEND_FEEDBACK = 7;</code>
     */
    public static final int SEND_FEEDBACK_VALUE = 7;
    /**
     * <pre>
     * A generic term for Close on buttons and menus.
     * </pre>
     *
     * <code>CLOSE = 8;</code>
     */
    public static final int CLOSE_VALUE = 8;
    /**
     * <pre>
     * Title for Chrome's Settings.
     * </pre>
     *
     * <code>SETTINGS = 9;</code>
     */
    public static final int SETTINGS_VALUE = 9;
    /**
     * <pre>
     * Undo message for snackbar.
     * </pre>
     *
     * <code>UNDO = 10;</code>
     */
    public static final int UNDO_VALUE = 10;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DisplayStringId valueOf(int value) {
      return forNumber(value);
    }

    public static DisplayStringId forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED;
        case 1: return GIVE_UP;
        case 2: return MAYBE_GIVE_UP;
        case 3: return DEFAULT_ERROR;
        case 4: return PAYMENT_INFO_CONFIRM;
        case 5: return CONTINUE_BUTTON;
        case 6: return STOPPED;
        case 7: return SEND_FEEDBACK;
        case 8: return CLOSE;
        case 9: return SETTINGS;
        case 10: return UNDO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DisplayStringId>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DisplayStringId> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DisplayStringId>() {
            @java.lang.Override
            public DisplayStringId findValueByNumber(int number) {
              return DisplayStringId.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return DisplayStringIdVerifier.INSTANCE;
    }

    private static final class DisplayStringIdVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new DisplayStringIdVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return DisplayStringId.forNumber(number) != null;
            }
          };

    private final int value;

    private DisplayStringId(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:autofill_assistant.ClientSettingsProto.DisplayStringId)
  }

  public interface IntegrationTestSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ClientSettingsProto.IntegrationTestSettings)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Disables animations for the poodle and the progress bar.
     * </pre>
     *
     * <code>optional bool disable_header_animations = 1;</code>
     * @return Whether the disableHeaderAnimations field is set.
     */
    boolean hasDisableHeaderAnimations();
    /**
     * <pre>
     * Disables animations for the poodle and the progress bar.
     * </pre>
     *
     * <code>optional bool disable_header_animations = 1;</code>
     * @return The disableHeaderAnimations.
     */
    boolean getDisableHeaderAnimations();

    /**
     * <pre>
     * Disables change animations in the actions carousel.
     * </pre>
     *
     * <code>optional bool disable_carousel_change_animations = 2;</code>
     * @return Whether the disableCarouselChangeAnimations field is set.
     */
    boolean hasDisableCarouselChangeAnimations();
    /**
     * <pre>
     * Disables change animations in the actions carousel.
     * </pre>
     *
     * <code>optional bool disable_carousel_change_animations = 2;</code>
     * @return The disableCarouselChangeAnimations.
     */
    boolean getDisableCarouselChangeAnimations();
  }
  /**
   * Protobuf type {@code autofill_assistant.ClientSettingsProto.IntegrationTestSettings}
   */
  public  static final class IntegrationTestSettings extends
      com.google.protobuf.GeneratedMessageLite<
          IntegrationTestSettings, IntegrationTestSettings.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ClientSettingsProto.IntegrationTestSettings)
      IntegrationTestSettingsOrBuilder {
    private IntegrationTestSettings() {
    }
    private int bitField0_;
    public static final int DISABLE_HEADER_ANIMATIONS_FIELD_NUMBER = 1;
    private boolean disableHeaderAnimations_;
    /**
     * <pre>
     * Disables animations for the poodle and the progress bar.
     * </pre>
     *
     * <code>optional bool disable_header_animations = 1;</code>
     * @return Whether the disableHeaderAnimations field is set.
     */
    @java.lang.Override
    public boolean hasDisableHeaderAnimations() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Disables animations for the poodle and the progress bar.
     * </pre>
     *
     * <code>optional bool disable_header_animations = 1;</code>
     * @return The disableHeaderAnimations.
     */
    @java.lang.Override
    public boolean getDisableHeaderAnimations() {
      return disableHeaderAnimations_;
    }
    /**
     * <pre>
     * Disables animations for the poodle and the progress bar.
     * </pre>
     *
     * <code>optional bool disable_header_animations = 1;</code>
     * @param value The disableHeaderAnimations to set.
     */
    private void setDisableHeaderAnimations(boolean value) {
      bitField0_ |= 0x00000001;
      disableHeaderAnimations_ = value;
    }
    /**
     * <pre>
     * Disables animations for the poodle and the progress bar.
     * </pre>
     *
     * <code>optional bool disable_header_animations = 1;</code>
     */
    private void clearDisableHeaderAnimations() {
      bitField0_ = (bitField0_ & ~0x00000001);
      disableHeaderAnimations_ = false;
    }

    public static final int DISABLE_CAROUSEL_CHANGE_ANIMATIONS_FIELD_NUMBER = 2;
    private boolean disableCarouselChangeAnimations_;
    /**
     * <pre>
     * Disables change animations in the actions carousel.
     * </pre>
     *
     * <code>optional bool disable_carousel_change_animations = 2;</code>
     * @return Whether the disableCarouselChangeAnimations field is set.
     */
    @java.lang.Override
    public boolean hasDisableCarouselChangeAnimations() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Disables change animations in the actions carousel.
     * </pre>
     *
     * <code>optional bool disable_carousel_change_animations = 2;</code>
     * @return The disableCarouselChangeAnimations.
     */
    @java.lang.Override
    public boolean getDisableCarouselChangeAnimations() {
      return disableCarouselChangeAnimations_;
    }
    /**
     * <pre>
     * Disables change animations in the actions carousel.
     * </pre>
     *
     * <code>optional bool disable_carousel_change_animations = 2;</code>
     * @param value The disableCarouselChangeAnimations to set.
     */
    private void setDisableCarouselChangeAnimations(boolean value) {
      bitField0_ |= 0x00000002;
      disableCarouselChangeAnimations_ = value;
    }
    /**
     * <pre>
     * Disables change animations in the actions carousel.
     * </pre>
     *
     * <code>optional bool disable_carousel_change_animations = 2;</code>
     */
    private void clearDisableCarouselChangeAnimations() {
      bitField0_ = (bitField0_ & ~0x00000002);
      disableCarouselChangeAnimations_ = false;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.ClientSettingsProto.IntegrationTestSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ClientSettingsProto.IntegrationTestSettings)
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettingsOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Disables animations for the poodle and the progress bar.
       * </pre>
       *
       * <code>optional bool disable_header_animations = 1;</code>
       * @return Whether the disableHeaderAnimations field is set.
       */
      @java.lang.Override
      public boolean hasDisableHeaderAnimations() {
        return instance.hasDisableHeaderAnimations();
      }
      /**
       * <pre>
       * Disables animations for the poodle and the progress bar.
       * </pre>
       *
       * <code>optional bool disable_header_animations = 1;</code>
       * @return The disableHeaderAnimations.
       */
      @java.lang.Override
      public boolean getDisableHeaderAnimations() {
        return instance.getDisableHeaderAnimations();
      }
      /**
       * <pre>
       * Disables animations for the poodle and the progress bar.
       * </pre>
       *
       * <code>optional bool disable_header_animations = 1;</code>
       * @param value The disableHeaderAnimations to set.
       * @return This builder for chaining.
       */
      public Builder setDisableHeaderAnimations(boolean value) {
        copyOnWrite();
        instance.setDisableHeaderAnimations(value);
        return this;
      }
      /**
       * <pre>
       * Disables animations for the poodle and the progress bar.
       * </pre>
       *
       * <code>optional bool disable_header_animations = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisableHeaderAnimations() {
        copyOnWrite();
        instance.clearDisableHeaderAnimations();
        return this;
      }

      /**
       * <pre>
       * Disables change animations in the actions carousel.
       * </pre>
       *
       * <code>optional bool disable_carousel_change_animations = 2;</code>
       * @return Whether the disableCarouselChangeAnimations field is set.
       */
      @java.lang.Override
      public boolean hasDisableCarouselChangeAnimations() {
        return instance.hasDisableCarouselChangeAnimations();
      }
      /**
       * <pre>
       * Disables change animations in the actions carousel.
       * </pre>
       *
       * <code>optional bool disable_carousel_change_animations = 2;</code>
       * @return The disableCarouselChangeAnimations.
       */
      @java.lang.Override
      public boolean getDisableCarouselChangeAnimations() {
        return instance.getDisableCarouselChangeAnimations();
      }
      /**
       * <pre>
       * Disables change animations in the actions carousel.
       * </pre>
       *
       * <code>optional bool disable_carousel_change_animations = 2;</code>
       * @param value The disableCarouselChangeAnimations to set.
       * @return This builder for chaining.
       */
      public Builder setDisableCarouselChangeAnimations(boolean value) {
        copyOnWrite();
        instance.setDisableCarouselChangeAnimations(value);
        return this;
      }
      /**
       * <pre>
       * Disables change animations in the actions carousel.
       * </pre>
       *
       * <code>optional bool disable_carousel_change_animations = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisableCarouselChangeAnimations() {
        copyOnWrite();
        instance.clearDisableCarouselChangeAnimations();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ClientSettingsProto.IntegrationTestSettings)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "disableHeaderAnimations_",
              "disableCarouselChangeAnimations_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1007\u0000\u0002" +
                "\u1007\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ClientSettingsProto.IntegrationTestSettings)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings DEFAULT_INSTANCE;
    static {
      IntegrationTestSettings defaultInstance = new IntegrationTestSettings();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        IntegrationTestSettings.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<IntegrationTestSettings> PARSER;

    public static com.google.protobuf.Parser<IntegrationTestSettings> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BackButtonSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ClientSettingsProto.BackButtonSettings)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     * @return Whether the undoLabel field is set.
     */
    boolean hasUndoLabel();
    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     * @return The undoLabel.
     */
    java.lang.String getUndoLabel();
    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     * @return The bytes for undoLabel.
     */
    com.google.protobuf.ByteString
        getUndoLabelBytes();
  }
  /**
   * <pre>
   * Deprecated, should be moved into |display_strings|.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ClientSettingsProto.BackButtonSettings}
   */
  public  static final class BackButtonSettings extends
      com.google.protobuf.GeneratedMessageLite<
          BackButtonSettings, BackButtonSettings.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ClientSettingsProto.BackButtonSettings)
      BackButtonSettingsOrBuilder {
    private BackButtonSettings() {
      undoLabel_ = "";
    }
    private int bitField0_;
    public static final int UNDO_LABEL_FIELD_NUMBER = 2;
    private java.lang.String undoLabel_;
    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     * @return Whether the undoLabel field is set.
     */
    @java.lang.Override
    public boolean hasUndoLabel() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     * @return The undoLabel.
     */
    @java.lang.Override
    public java.lang.String getUndoLabel() {
      return undoLabel_;
    }
    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     * @return The bytes for undoLabel.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUndoLabelBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(undoLabel_);
    }
    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     * @param value The undoLabel to set.
     */
    private void setUndoLabel(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000001;
      undoLabel_ = value;
    }
    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     */
    private void clearUndoLabel() {
      bitField0_ = (bitField0_ & ~0x00000001);
      undoLabel_ = getDefaultInstance().getUndoLabel();
    }
    /**
     * <pre>
     * The label of the highlighted "Undo" action.
     * </pre>
     *
     * <code>optional string undo_label = 2;</code>
     * @param value The bytes for undoLabel to set.
     */
    private void setUndoLabelBytes(
        com.google.protobuf.ByteString value) {
      undoLabel_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Deprecated, should be moved into |display_strings|.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.ClientSettingsProto.BackButtonSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ClientSettingsProto.BackButtonSettings)
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettingsOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The label of the highlighted "Undo" action.
       * </pre>
       *
       * <code>optional string undo_label = 2;</code>
       * @return Whether the undoLabel field is set.
       */
      @java.lang.Override
      public boolean hasUndoLabel() {
        return instance.hasUndoLabel();
      }
      /**
       * <pre>
       * The label of the highlighted "Undo" action.
       * </pre>
       *
       * <code>optional string undo_label = 2;</code>
       * @return The undoLabel.
       */
      @java.lang.Override
      public java.lang.String getUndoLabel() {
        return instance.getUndoLabel();
      }
      /**
       * <pre>
       * The label of the highlighted "Undo" action.
       * </pre>
       *
       * <code>optional string undo_label = 2;</code>
       * @return The bytes for undoLabel.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getUndoLabelBytes() {
        return instance.getUndoLabelBytes();
      }
      /**
       * <pre>
       * The label of the highlighted "Undo" action.
       * </pre>
       *
       * <code>optional string undo_label = 2;</code>
       * @param value The undoLabel to set.
       * @return This builder for chaining.
       */
      public Builder setUndoLabel(
          java.lang.String value) {
        copyOnWrite();
        instance.setUndoLabel(value);
        return this;
      }
      /**
       * <pre>
       * The label of the highlighted "Undo" action.
       * </pre>
       *
       * <code>optional string undo_label = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUndoLabel() {
        copyOnWrite();
        instance.clearUndoLabel();
        return this;
      }
      /**
       * <pre>
       * The label of the highlighted "Undo" action.
       * </pre>
       *
       * <code>optional string undo_label = 2;</code>
       * @param value The bytes for undoLabel to set.
       * @return This builder for chaining.
       */
      public Builder setUndoLabelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setUndoLabelBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ClientSettingsProto.BackButtonSettings)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "undoLabel_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0002\u0002\u0001\u0000\u0000\u0000\u0002\u1008\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ClientSettingsProto.BackButtonSettings)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings DEFAULT_INSTANCE;
    static {
      BackButtonSettings defaultInstance = new BackButtonSettings();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        BackButtonSettings.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<BackButtonSettings> PARSER;

    public static com.google.protobuf.Parser<BackButtonSettings> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SlowWarningSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ClientSettingsProto.SlowWarningSettings)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Whether to show warnings related to a slow connection to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_connection_warnings = 1;</code>
     * @return Whether the enableSlowConnectionWarnings field is set.
     */
    boolean hasEnableSlowConnectionWarnings();
    /**
     * <pre>
     * Whether to show warnings related to a slow connection to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_connection_warnings = 1;</code>
     * @return The enableSlowConnectionWarnings.
     */
    boolean getEnableSlowConnectionWarnings();

    /**
     * <pre>
     * Whether to show warnings related to a slow website to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_website_warnings = 2;</code>
     * @return Whether the enableSlowWebsiteWarnings field is set.
     */
    boolean hasEnableSlowWebsiteWarnings();
    /**
     * <pre>
     * Whether to show warnings related to a slow website to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_website_warnings = 2;</code>
     * @return The enableSlowWebsiteWarnings.
     */
    boolean getEnableSlowWebsiteWarnings();

    /**
     * <pre>
     * If true, only one warning will be shown to the user, i.e. either the slow
     * connection or website, depending on which one triggers first.
     * </pre>
     *
     * <code>optional bool only_show_warning_once = 3;</code>
     * @return Whether the onlyShowWarningOnce field is set.
     */
    boolean hasOnlyShowWarningOnce();
    /**
     * <pre>
     * If true, only one warning will be shown to the user, i.e. either the slow
     * connection or website, depending on which one triggers first.
     * </pre>
     *
     * <code>optional bool only_show_warning_once = 3;</code>
     * @return The onlyShowWarningOnce.
     */
    boolean getOnlyShowWarningOnce();

    /**
     * <pre>
     * If true, the slow connection warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_connection_warning_once = 4;</code>
     * @return Whether the onlyShowConnectionWarningOnce field is set.
     */
    boolean hasOnlyShowConnectionWarningOnce();
    /**
     * <pre>
     * If true, the slow connection warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_connection_warning_once = 4;</code>
     * @return The onlyShowConnectionWarningOnce.
     */
    boolean getOnlyShowConnectionWarningOnce();

    /**
     * <pre>
     * If true, the website warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_website_warning_once = 5;</code>
     * @return Whether the onlyShowWebsiteWarningOnce field is set.
     */
    boolean hasOnlyShowWebsiteWarningOnce();
    /**
     * <pre>
     * If true, the website warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_website_warning_once = 5;</code>
     * @return The onlyShowWebsiteWarningOnce.
     */
    boolean getOnlyShowWebsiteWarningOnce();

    /**
     * <pre>
     * Defines the maximum wait on a dom find element operation before showing
     * the slow website warning.
     * </pre>
     *
     * <code>optional int32 warning_delay_ms = 6;</code>
     * @return Whether the warningDelayMs field is set.
     */
    boolean hasWarningDelayMs();
    /**
     * <pre>
     * Defines the maximum wait on a dom find element operation before showing
     * the slow website warning.
     * </pre>
     *
     * <code>optional int32 warning_delay_ms = 6;</code>
     * @return The warningDelayMs.
     */
    int getWarningDelayMs();

    /**
     * <pre>
     * Defines the threshold above which a roundtrip is considered too slow.
     * </pre>
     *
     * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
     * @return Whether the slowRoundtripThresholdMs field is set.
     */
    boolean hasSlowRoundtripThresholdMs();
    /**
     * <pre>
     * Defines the threshold above which a roundtrip is considered too slow.
     * </pre>
     *
     * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
     * @return The slowRoundtripThresholdMs.
     */
    int getSlowRoundtripThresholdMs();

    /**
     * <pre>
     * Defines the number of consecutive slow roundtrips allowed before showing
     * the slow connection warning.
     * </pre>
     *
     * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
     * @return Whether the maxConsecutiveSlowRoundtrips field is set.
     */
    boolean hasMaxConsecutiveSlowRoundtrips();
    /**
     * <pre>
     * Defines the number of consecutive slow roundtrips allowed before showing
     * the slow connection warning.
     * </pre>
     *
     * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
     * @return The maxConsecutiveSlowRoundtrips.
     */
    int getMaxConsecutiveSlowRoundtrips();

    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     * @return Whether the slowConnectionMessage field is set.
     */
    boolean hasSlowConnectionMessage();
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     * @return The slowConnectionMessage.
     */
    java.lang.String getSlowConnectionMessage();
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     * @return The bytes for slowConnectionMessage.
     */
    com.google.protobuf.ByteString
        getSlowConnectionMessageBytes();

    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     * @return Whether the slowWebsiteMessage field is set.
     */
    boolean hasSlowWebsiteMessage();
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     * @return The slowWebsiteMessage.
     */
    java.lang.String getSlowWebsiteMessage();
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     * @return The bytes for slowWebsiteMessage.
     */
    com.google.protobuf.ByteString
        getSlowWebsiteMessageBytes();

    /**
     * <pre>
     * The minimum duration that the message will be shown for (only applies to
     * the slow connection messages).
     * </pre>
     *
     * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
     * @return Whether the minimumWarningMessageDurationMs field is set.
     */
    boolean hasMinimumWarningMessageDurationMs();
    /**
     * <pre>
     * The minimum duration that the message will be shown for (only applies to
     * the slow connection messages).
     * </pre>
     *
     * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
     * @return The minimumWarningMessageDurationMs.
     */
    int getMinimumWarningMessageDurationMs();

    /**
     * <pre>
     * Whether the warning message should replace the current status message or
     * should be concatenated.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
     * @return Whether the messageMode field is set.
     */
    boolean hasMessageMode();
    /**
     * <pre>
     * Whether the warning message should replace the current status message or
     * should be concatenated.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
     * @return The messageMode.
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode getMessageMode();
  }
  /**
   * <pre>
   * Settings to define the behavior for showing warnings about slow connection
   * and/or websites to users.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ClientSettingsProto.SlowWarningSettings}
   */
  public  static final class SlowWarningSettings extends
      com.google.protobuf.GeneratedMessageLite<
          SlowWarningSettings, SlowWarningSettings.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ClientSettingsProto.SlowWarningSettings)
      SlowWarningSettingsOrBuilder {
    private SlowWarningSettings() {
      slowConnectionMessage_ = "";
      slowWebsiteMessage_ = "";
    }
    /**
     * Protobuf enum {@code autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode}
     */
    public enum MessageMode
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <pre>
       * The warning message will be appended to the existing status message.
       * </pre>
       *
       * <code>CONCATENATE = 1;</code>
       */
      CONCATENATE(1),
      /**
       * <pre>
       * The warning message will replace the current status message.
       * </pre>
       *
       * <code>REPLACE = 2;</code>
       */
      REPLACE(2),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <pre>
       * The warning message will be appended to the existing status message.
       * </pre>
       *
       * <code>CONCATENATE = 1;</code>
       */
      public static final int CONCATENATE_VALUE = 1;
      /**
       * <pre>
       * The warning message will replace the current status message.
       * </pre>
       *
       * <code>REPLACE = 2;</code>
       */
      public static final int REPLACE_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MessageMode valueOf(int value) {
        return forNumber(value);
      }

      public static MessageMode forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return CONCATENATE;
          case 2: return REPLACE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MessageMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          MessageMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MessageMode>() {
              @java.lang.Override
              public MessageMode findValueByNumber(int number) {
                return MessageMode.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return MessageModeVerifier.INSTANCE;
      }

      private static final class MessageModeVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new MessageModeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return MessageMode.forNumber(number) != null;
              }
            };

      private final int value;

      private MessageMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode)
    }

    private int bitField0_;
    public static final int ENABLE_SLOW_CONNECTION_WARNINGS_FIELD_NUMBER = 1;
    private boolean enableSlowConnectionWarnings_;
    /**
     * <pre>
     * Whether to show warnings related to a slow connection to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_connection_warnings = 1;</code>
     * @return Whether the enableSlowConnectionWarnings field is set.
     */
    @java.lang.Override
    public boolean hasEnableSlowConnectionWarnings() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Whether to show warnings related to a slow connection to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_connection_warnings = 1;</code>
     * @return The enableSlowConnectionWarnings.
     */
    @java.lang.Override
    public boolean getEnableSlowConnectionWarnings() {
      return enableSlowConnectionWarnings_;
    }
    /**
     * <pre>
     * Whether to show warnings related to a slow connection to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_connection_warnings = 1;</code>
     * @param value The enableSlowConnectionWarnings to set.
     */
    private void setEnableSlowConnectionWarnings(boolean value) {
      bitField0_ |= 0x00000001;
      enableSlowConnectionWarnings_ = value;
    }
    /**
     * <pre>
     * Whether to show warnings related to a slow connection to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_connection_warnings = 1;</code>
     */
    private void clearEnableSlowConnectionWarnings() {
      bitField0_ = (bitField0_ & ~0x00000001);
      enableSlowConnectionWarnings_ = false;
    }

    public static final int ENABLE_SLOW_WEBSITE_WARNINGS_FIELD_NUMBER = 2;
    private boolean enableSlowWebsiteWarnings_;
    /**
     * <pre>
     * Whether to show warnings related to a slow website to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_website_warnings = 2;</code>
     * @return Whether the enableSlowWebsiteWarnings field is set.
     */
    @java.lang.Override
    public boolean hasEnableSlowWebsiteWarnings() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Whether to show warnings related to a slow website to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_website_warnings = 2;</code>
     * @return The enableSlowWebsiteWarnings.
     */
    @java.lang.Override
    public boolean getEnableSlowWebsiteWarnings() {
      return enableSlowWebsiteWarnings_;
    }
    /**
     * <pre>
     * Whether to show warnings related to a slow website to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_website_warnings = 2;</code>
     * @param value The enableSlowWebsiteWarnings to set.
     */
    private void setEnableSlowWebsiteWarnings(boolean value) {
      bitField0_ |= 0x00000002;
      enableSlowWebsiteWarnings_ = value;
    }
    /**
     * <pre>
     * Whether to show warnings related to a slow website to the user.
     * </pre>
     *
     * <code>optional bool enable_slow_website_warnings = 2;</code>
     */
    private void clearEnableSlowWebsiteWarnings() {
      bitField0_ = (bitField0_ & ~0x00000002);
      enableSlowWebsiteWarnings_ = false;
    }

    public static final int ONLY_SHOW_WARNING_ONCE_FIELD_NUMBER = 3;
    private boolean onlyShowWarningOnce_;
    /**
     * <pre>
     * If true, only one warning will be shown to the user, i.e. either the slow
     * connection or website, depending on which one triggers first.
     * </pre>
     *
     * <code>optional bool only_show_warning_once = 3;</code>
     * @return Whether the onlyShowWarningOnce field is set.
     */
    @java.lang.Override
    public boolean hasOnlyShowWarningOnce() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * If true, only one warning will be shown to the user, i.e. either the slow
     * connection or website, depending on which one triggers first.
     * </pre>
     *
     * <code>optional bool only_show_warning_once = 3;</code>
     * @return The onlyShowWarningOnce.
     */
    @java.lang.Override
    public boolean getOnlyShowWarningOnce() {
      return onlyShowWarningOnce_;
    }
    /**
     * <pre>
     * If true, only one warning will be shown to the user, i.e. either the slow
     * connection or website, depending on which one triggers first.
     * </pre>
     *
     * <code>optional bool only_show_warning_once = 3;</code>
     * @param value The onlyShowWarningOnce to set.
     */
    private void setOnlyShowWarningOnce(boolean value) {
      bitField0_ |= 0x00000004;
      onlyShowWarningOnce_ = value;
    }
    /**
     * <pre>
     * If true, only one warning will be shown to the user, i.e. either the slow
     * connection or website, depending on which one triggers first.
     * </pre>
     *
     * <code>optional bool only_show_warning_once = 3;</code>
     */
    private void clearOnlyShowWarningOnce() {
      bitField0_ = (bitField0_ & ~0x00000004);
      onlyShowWarningOnce_ = false;
    }

    public static final int ONLY_SHOW_CONNECTION_WARNING_ONCE_FIELD_NUMBER = 4;
    private boolean onlyShowConnectionWarningOnce_;
    /**
     * <pre>
     * If true, the slow connection warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_connection_warning_once = 4;</code>
     * @return Whether the onlyShowConnectionWarningOnce field is set.
     */
    @java.lang.Override
    public boolean hasOnlyShowConnectionWarningOnce() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * If true, the slow connection warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_connection_warning_once = 4;</code>
     * @return The onlyShowConnectionWarningOnce.
     */
    @java.lang.Override
    public boolean getOnlyShowConnectionWarningOnce() {
      return onlyShowConnectionWarningOnce_;
    }
    /**
     * <pre>
     * If true, the slow connection warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_connection_warning_once = 4;</code>
     * @param value The onlyShowConnectionWarningOnce to set.
     */
    private void setOnlyShowConnectionWarningOnce(boolean value) {
      bitField0_ |= 0x00000008;
      onlyShowConnectionWarningOnce_ = value;
    }
    /**
     * <pre>
     * If true, the slow connection warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_connection_warning_once = 4;</code>
     */
    private void clearOnlyShowConnectionWarningOnce() {
      bitField0_ = (bitField0_ & ~0x00000008);
      onlyShowConnectionWarningOnce_ = false;
    }

    public static final int ONLY_SHOW_WEBSITE_WARNING_ONCE_FIELD_NUMBER = 5;
    private boolean onlyShowWebsiteWarningOnce_;
    /**
     * <pre>
     * If true, the website warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_website_warning_once = 5;</code>
     * @return Whether the onlyShowWebsiteWarningOnce field is set.
     */
    @java.lang.Override
    public boolean hasOnlyShowWebsiteWarningOnce() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * If true, the website warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_website_warning_once = 5;</code>
     * @return The onlyShowWebsiteWarningOnce.
     */
    @java.lang.Override
    public boolean getOnlyShowWebsiteWarningOnce() {
      return onlyShowWebsiteWarningOnce_;
    }
    /**
     * <pre>
     * If true, the website warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_website_warning_once = 5;</code>
     * @param value The onlyShowWebsiteWarningOnce to set.
     */
    private void setOnlyShowWebsiteWarningOnce(boolean value) {
      bitField0_ |= 0x00000010;
      onlyShowWebsiteWarningOnce_ = value;
    }
    /**
     * <pre>
     * If true, the website warning will be shown only once.
     * </pre>
     *
     * <code>optional bool only_show_website_warning_once = 5;</code>
     */
    private void clearOnlyShowWebsiteWarningOnce() {
      bitField0_ = (bitField0_ & ~0x00000010);
      onlyShowWebsiteWarningOnce_ = false;
    }

    public static final int WARNING_DELAY_MS_FIELD_NUMBER = 6;
    private int warningDelayMs_;
    /**
     * <pre>
     * Defines the maximum wait on a dom find element operation before showing
     * the slow website warning.
     * </pre>
     *
     * <code>optional int32 warning_delay_ms = 6;</code>
     * @return Whether the warningDelayMs field is set.
     */
    @java.lang.Override
    public boolean hasWarningDelayMs() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Defines the maximum wait on a dom find element operation before showing
     * the slow website warning.
     * </pre>
     *
     * <code>optional int32 warning_delay_ms = 6;</code>
     * @return The warningDelayMs.
     */
    @java.lang.Override
    public int getWarningDelayMs() {
      return warningDelayMs_;
    }
    /**
     * <pre>
     * Defines the maximum wait on a dom find element operation before showing
     * the slow website warning.
     * </pre>
     *
     * <code>optional int32 warning_delay_ms = 6;</code>
     * @param value The warningDelayMs to set.
     */
    private void setWarningDelayMs(int value) {
      bitField0_ |= 0x00000020;
      warningDelayMs_ = value;
    }
    /**
     * <pre>
     * Defines the maximum wait on a dom find element operation before showing
     * the slow website warning.
     * </pre>
     *
     * <code>optional int32 warning_delay_ms = 6;</code>
     */
    private void clearWarningDelayMs() {
      bitField0_ = (bitField0_ & ~0x00000020);
      warningDelayMs_ = 0;
    }

    public static final int SLOW_ROUNDTRIP_THRESHOLD_MS_FIELD_NUMBER = 7;
    private int slowRoundtripThresholdMs_;
    /**
     * <pre>
     * Defines the threshold above which a roundtrip is considered too slow.
     * </pre>
     *
     * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
     * @return Whether the slowRoundtripThresholdMs field is set.
     */
    @java.lang.Override
    public boolean hasSlowRoundtripThresholdMs() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Defines the threshold above which a roundtrip is considered too slow.
     * </pre>
     *
     * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
     * @return The slowRoundtripThresholdMs.
     */
    @java.lang.Override
    public int getSlowRoundtripThresholdMs() {
      return slowRoundtripThresholdMs_;
    }
    /**
     * <pre>
     * Defines the threshold above which a roundtrip is considered too slow.
     * </pre>
     *
     * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
     * @param value The slowRoundtripThresholdMs to set.
     */
    private void setSlowRoundtripThresholdMs(int value) {
      bitField0_ |= 0x00000040;
      slowRoundtripThresholdMs_ = value;
    }
    /**
     * <pre>
     * Defines the threshold above which a roundtrip is considered too slow.
     * </pre>
     *
     * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
     */
    private void clearSlowRoundtripThresholdMs() {
      bitField0_ = (bitField0_ & ~0x00000040);
      slowRoundtripThresholdMs_ = 0;
    }

    public static final int MAX_CONSECUTIVE_SLOW_ROUNDTRIPS_FIELD_NUMBER = 8;
    private int maxConsecutiveSlowRoundtrips_;
    /**
     * <pre>
     * Defines the number of consecutive slow roundtrips allowed before showing
     * the slow connection warning.
     * </pre>
     *
     * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
     * @return Whether the maxConsecutiveSlowRoundtrips field is set.
     */
    @java.lang.Override
    public boolean hasMaxConsecutiveSlowRoundtrips() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Defines the number of consecutive slow roundtrips allowed before showing
     * the slow connection warning.
     * </pre>
     *
     * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
     * @return The maxConsecutiveSlowRoundtrips.
     */
    @java.lang.Override
    public int getMaxConsecutiveSlowRoundtrips() {
      return maxConsecutiveSlowRoundtrips_;
    }
    /**
     * <pre>
     * Defines the number of consecutive slow roundtrips allowed before showing
     * the slow connection warning.
     * </pre>
     *
     * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
     * @param value The maxConsecutiveSlowRoundtrips to set.
     */
    private void setMaxConsecutiveSlowRoundtrips(int value) {
      bitField0_ |= 0x00000080;
      maxConsecutiveSlowRoundtrips_ = value;
    }
    /**
     * <pre>
     * Defines the number of consecutive slow roundtrips allowed before showing
     * the slow connection warning.
     * </pre>
     *
     * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
     */
    private void clearMaxConsecutiveSlowRoundtrips() {
      bitField0_ = (bitField0_ & ~0x00000080);
      maxConsecutiveSlowRoundtrips_ = 0;
    }

    public static final int SLOW_CONNECTION_MESSAGE_FIELD_NUMBER = 9;
    private java.lang.String slowConnectionMessage_;
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     * @return Whether the slowConnectionMessage field is set.
     */
    @java.lang.Override
    public boolean hasSlowConnectionMessage() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     * @return The slowConnectionMessage.
     */
    @java.lang.Override
    public java.lang.String getSlowConnectionMessage() {
      return slowConnectionMessage_;
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     * @return The bytes for slowConnectionMessage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSlowConnectionMessageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(slowConnectionMessage_);
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     * @param value The slowConnectionMessage to set.
     */
    private void setSlowConnectionMessage(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000100;
      slowConnectionMessage_ = value;
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     */
    private void clearSlowConnectionMessage() {
      bitField0_ = (bitField0_ & ~0x00000100);
      slowConnectionMessage_ = getDefaultInstance().getSlowConnectionMessage();
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow connection.
     * If this is not set, no warning will be shown in case of slow connection.
     * </pre>
     *
     * <code>optional string slow_connection_message = 9;</code>
     * @param value The bytes for slowConnectionMessage to set.
     */
    private void setSlowConnectionMessageBytes(
        com.google.protobuf.ByteString value) {
      slowConnectionMessage_ = value.toStringUtf8();
      bitField0_ |= 0x00000100;
    }

    public static final int SLOW_WEBSITE_MESSAGE_FIELD_NUMBER = 10;
    private java.lang.String slowWebsiteMessage_;
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     * @return Whether the slowWebsiteMessage field is set.
     */
    @java.lang.Override
    public boolean hasSlowWebsiteMessage() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     * @return The slowWebsiteMessage.
     */
    @java.lang.Override
    public java.lang.String getSlowWebsiteMessage() {
      return slowWebsiteMessage_;
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     * @return The bytes for slowWebsiteMessage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSlowWebsiteMessageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(slowWebsiteMessage_);
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     * @param value The slowWebsiteMessage to set.
     */
    private void setSlowWebsiteMessage(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000200;
      slowWebsiteMessage_ = value;
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     */
    private void clearSlowWebsiteMessage() {
      bitField0_ = (bitField0_ & ~0x00000200);
      slowWebsiteMessage_ = getDefaultInstance().getSlowWebsiteMessage();
    }
    /**
     * <pre>
     * The message to show as a warning to inform the user of a slow website.
     * If this is not set, no warning will be shown in case of a slow website.
     * </pre>
     *
     * <code>optional string slow_website_message = 10;</code>
     * @param value The bytes for slowWebsiteMessage to set.
     */
    private void setSlowWebsiteMessageBytes(
        com.google.protobuf.ByteString value) {
      slowWebsiteMessage_ = value.toStringUtf8();
      bitField0_ |= 0x00000200;
    }

    public static final int MINIMUM_WARNING_MESSAGE_DURATION_MS_FIELD_NUMBER = 11;
    private int minimumWarningMessageDurationMs_;
    /**
     * <pre>
     * The minimum duration that the message will be shown for (only applies to
     * the slow connection messages).
     * </pre>
     *
     * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
     * @return Whether the minimumWarningMessageDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasMinimumWarningMessageDurationMs() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * The minimum duration that the message will be shown for (only applies to
     * the slow connection messages).
     * </pre>
     *
     * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
     * @return The minimumWarningMessageDurationMs.
     */
    @java.lang.Override
    public int getMinimumWarningMessageDurationMs() {
      return minimumWarningMessageDurationMs_;
    }
    /**
     * <pre>
     * The minimum duration that the message will be shown for (only applies to
     * the slow connection messages).
     * </pre>
     *
     * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
     * @param value The minimumWarningMessageDurationMs to set.
     */
    private void setMinimumWarningMessageDurationMs(int value) {
      bitField0_ |= 0x00000400;
      minimumWarningMessageDurationMs_ = value;
    }
    /**
     * <pre>
     * The minimum duration that the message will be shown for (only applies to
     * the slow connection messages).
     * </pre>
     *
     * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
     */
    private void clearMinimumWarningMessageDurationMs() {
      bitField0_ = (bitField0_ & ~0x00000400);
      minimumWarningMessageDurationMs_ = 0;
    }

    public static final int MESSAGE_MODE_FIELD_NUMBER = 12;
    private int messageMode_;
    /**
     * <pre>
     * Whether the warning message should replace the current status message or
     * should be concatenated.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
     * @return Whether the messageMode field is set.
     */
    @java.lang.Override
    public boolean hasMessageMode() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Whether the warning message should replace the current status message or
     * should be concatenated.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
     * @return The messageMode.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode getMessageMode() {
      org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode result = org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode.forNumber(messageMode_);
      return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode.UNKNOWN : result;
    }
    /**
     * <pre>
     * Whether the warning message should replace the current status message or
     * should be concatenated.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
     * @param value The messageMode to set.
     */
    private void setMessageMode(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode value) {
      messageMode_ = value.getNumber();
      bitField0_ |= 0x00000800;
    }
    /**
     * <pre>
     * Whether the warning message should replace the current status message or
     * should be concatenated.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
     */
    private void clearMessageMode() {
      bitField0_ = (bitField0_ & ~0x00000800);
      messageMode_ = 0;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Settings to define the behavior for showing warnings about slow connection
     * and/or websites to users.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.ClientSettingsProto.SlowWarningSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ClientSettingsProto.SlowWarningSettings)
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettingsOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Whether to show warnings related to a slow connection to the user.
       * </pre>
       *
       * <code>optional bool enable_slow_connection_warnings = 1;</code>
       * @return Whether the enableSlowConnectionWarnings field is set.
       */
      @java.lang.Override
      public boolean hasEnableSlowConnectionWarnings() {
        return instance.hasEnableSlowConnectionWarnings();
      }
      /**
       * <pre>
       * Whether to show warnings related to a slow connection to the user.
       * </pre>
       *
       * <code>optional bool enable_slow_connection_warnings = 1;</code>
       * @return The enableSlowConnectionWarnings.
       */
      @java.lang.Override
      public boolean getEnableSlowConnectionWarnings() {
        return instance.getEnableSlowConnectionWarnings();
      }
      /**
       * <pre>
       * Whether to show warnings related to a slow connection to the user.
       * </pre>
       *
       * <code>optional bool enable_slow_connection_warnings = 1;</code>
       * @param value The enableSlowConnectionWarnings to set.
       * @return This builder for chaining.
       */
      public Builder setEnableSlowConnectionWarnings(boolean value) {
        copyOnWrite();
        instance.setEnableSlowConnectionWarnings(value);
        return this;
      }
      /**
       * <pre>
       * Whether to show warnings related to a slow connection to the user.
       * </pre>
       *
       * <code>optional bool enable_slow_connection_warnings = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableSlowConnectionWarnings() {
        copyOnWrite();
        instance.clearEnableSlowConnectionWarnings();
        return this;
      }

      /**
       * <pre>
       * Whether to show warnings related to a slow website to the user.
       * </pre>
       *
       * <code>optional bool enable_slow_website_warnings = 2;</code>
       * @return Whether the enableSlowWebsiteWarnings field is set.
       */
      @java.lang.Override
      public boolean hasEnableSlowWebsiteWarnings() {
        return instance.hasEnableSlowWebsiteWarnings();
      }
      /**
       * <pre>
       * Whether to show warnings related to a slow website to the user.
       * </pre>
       *
       * <code>optional bool enable_slow_website_warnings = 2;</code>
       * @return The enableSlowWebsiteWarnings.
       */
      @java.lang.Override
      public boolean getEnableSlowWebsiteWarnings() {
        return instance.getEnableSlowWebsiteWarnings();
      }
      /**
       * <pre>
       * Whether to show warnings related to a slow website to the user.
       * </pre>
       *
       * <code>optional bool enable_slow_website_warnings = 2;</code>
       * @param value The enableSlowWebsiteWarnings to set.
       * @return This builder for chaining.
       */
      public Builder setEnableSlowWebsiteWarnings(boolean value) {
        copyOnWrite();
        instance.setEnableSlowWebsiteWarnings(value);
        return this;
      }
      /**
       * <pre>
       * Whether to show warnings related to a slow website to the user.
       * </pre>
       *
       * <code>optional bool enable_slow_website_warnings = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableSlowWebsiteWarnings() {
        copyOnWrite();
        instance.clearEnableSlowWebsiteWarnings();
        return this;
      }

      /**
       * <pre>
       * If true, only one warning will be shown to the user, i.e. either the slow
       * connection or website, depending on which one triggers first.
       * </pre>
       *
       * <code>optional bool only_show_warning_once = 3;</code>
       * @return Whether the onlyShowWarningOnce field is set.
       */
      @java.lang.Override
      public boolean hasOnlyShowWarningOnce() {
        return instance.hasOnlyShowWarningOnce();
      }
      /**
       * <pre>
       * If true, only one warning will be shown to the user, i.e. either the slow
       * connection or website, depending on which one triggers first.
       * </pre>
       *
       * <code>optional bool only_show_warning_once = 3;</code>
       * @return The onlyShowWarningOnce.
       */
      @java.lang.Override
      public boolean getOnlyShowWarningOnce() {
        return instance.getOnlyShowWarningOnce();
      }
      /**
       * <pre>
       * If true, only one warning will be shown to the user, i.e. either the slow
       * connection or website, depending on which one triggers first.
       * </pre>
       *
       * <code>optional bool only_show_warning_once = 3;</code>
       * @param value The onlyShowWarningOnce to set.
       * @return This builder for chaining.
       */
      public Builder setOnlyShowWarningOnce(boolean value) {
        copyOnWrite();
        instance.setOnlyShowWarningOnce(value);
        return this;
      }
      /**
       * <pre>
       * If true, only one warning will be shown to the user, i.e. either the slow
       * connection or website, depending on which one triggers first.
       * </pre>
       *
       * <code>optional bool only_show_warning_once = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearOnlyShowWarningOnce() {
        copyOnWrite();
        instance.clearOnlyShowWarningOnce();
        return this;
      }

      /**
       * <pre>
       * If true, the slow connection warning will be shown only once.
       * </pre>
       *
       * <code>optional bool only_show_connection_warning_once = 4;</code>
       * @return Whether the onlyShowConnectionWarningOnce field is set.
       */
      @java.lang.Override
      public boolean hasOnlyShowConnectionWarningOnce() {
        return instance.hasOnlyShowConnectionWarningOnce();
      }
      /**
       * <pre>
       * If true, the slow connection warning will be shown only once.
       * </pre>
       *
       * <code>optional bool only_show_connection_warning_once = 4;</code>
       * @return The onlyShowConnectionWarningOnce.
       */
      @java.lang.Override
      public boolean getOnlyShowConnectionWarningOnce() {
        return instance.getOnlyShowConnectionWarningOnce();
      }
      /**
       * <pre>
       * If true, the slow connection warning will be shown only once.
       * </pre>
       *
       * <code>optional bool only_show_connection_warning_once = 4;</code>
       * @param value The onlyShowConnectionWarningOnce to set.
       * @return This builder for chaining.
       */
      public Builder setOnlyShowConnectionWarningOnce(boolean value) {
        copyOnWrite();
        instance.setOnlyShowConnectionWarningOnce(value);
        return this;
      }
      /**
       * <pre>
       * If true, the slow connection warning will be shown only once.
       * </pre>
       *
       * <code>optional bool only_show_connection_warning_once = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearOnlyShowConnectionWarningOnce() {
        copyOnWrite();
        instance.clearOnlyShowConnectionWarningOnce();
        return this;
      }

      /**
       * <pre>
       * If true, the website warning will be shown only once.
       * </pre>
       *
       * <code>optional bool only_show_website_warning_once = 5;</code>
       * @return Whether the onlyShowWebsiteWarningOnce field is set.
       */
      @java.lang.Override
      public boolean hasOnlyShowWebsiteWarningOnce() {
        return instance.hasOnlyShowWebsiteWarningOnce();
      }
      /**
       * <pre>
       * If true, the website warning will be shown only once.
       * </pre>
       *
       * <code>optional bool only_show_website_warning_once = 5;</code>
       * @return The onlyShowWebsiteWarningOnce.
       */
      @java.lang.Override
      public boolean getOnlyShowWebsiteWarningOnce() {
        return instance.getOnlyShowWebsiteWarningOnce();
      }
      /**
       * <pre>
       * If true, the website warning will be shown only once.
       * </pre>
       *
       * <code>optional bool only_show_website_warning_once = 5;</code>
       * @param value The onlyShowWebsiteWarningOnce to set.
       * @return This builder for chaining.
       */
      public Builder setOnlyShowWebsiteWarningOnce(boolean value) {
        copyOnWrite();
        instance.setOnlyShowWebsiteWarningOnce(value);
        return this;
      }
      /**
       * <pre>
       * If true, the website warning will be shown only once.
       * </pre>
       *
       * <code>optional bool only_show_website_warning_once = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearOnlyShowWebsiteWarningOnce() {
        copyOnWrite();
        instance.clearOnlyShowWebsiteWarningOnce();
        return this;
      }

      /**
       * <pre>
       * Defines the maximum wait on a dom find element operation before showing
       * the slow website warning.
       * </pre>
       *
       * <code>optional int32 warning_delay_ms = 6;</code>
       * @return Whether the warningDelayMs field is set.
       */
      @java.lang.Override
      public boolean hasWarningDelayMs() {
        return instance.hasWarningDelayMs();
      }
      /**
       * <pre>
       * Defines the maximum wait on a dom find element operation before showing
       * the slow website warning.
       * </pre>
       *
       * <code>optional int32 warning_delay_ms = 6;</code>
       * @return The warningDelayMs.
       */
      @java.lang.Override
      public int getWarningDelayMs() {
        return instance.getWarningDelayMs();
      }
      /**
       * <pre>
       * Defines the maximum wait on a dom find element operation before showing
       * the slow website warning.
       * </pre>
       *
       * <code>optional int32 warning_delay_ms = 6;</code>
       * @param value The warningDelayMs to set.
       * @return This builder for chaining.
       */
      public Builder setWarningDelayMs(int value) {
        copyOnWrite();
        instance.setWarningDelayMs(value);
        return this;
      }
      /**
       * <pre>
       * Defines the maximum wait on a dom find element operation before showing
       * the slow website warning.
       * </pre>
       *
       * <code>optional int32 warning_delay_ms = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearWarningDelayMs() {
        copyOnWrite();
        instance.clearWarningDelayMs();
        return this;
      }

      /**
       * <pre>
       * Defines the threshold above which a roundtrip is considered too slow.
       * </pre>
       *
       * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
       * @return Whether the slowRoundtripThresholdMs field is set.
       */
      @java.lang.Override
      public boolean hasSlowRoundtripThresholdMs() {
        return instance.hasSlowRoundtripThresholdMs();
      }
      /**
       * <pre>
       * Defines the threshold above which a roundtrip is considered too slow.
       * </pre>
       *
       * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
       * @return The slowRoundtripThresholdMs.
       */
      @java.lang.Override
      public int getSlowRoundtripThresholdMs() {
        return instance.getSlowRoundtripThresholdMs();
      }
      /**
       * <pre>
       * Defines the threshold above which a roundtrip is considered too slow.
       * </pre>
       *
       * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
       * @param value The slowRoundtripThresholdMs to set.
       * @return This builder for chaining.
       */
      public Builder setSlowRoundtripThresholdMs(int value) {
        copyOnWrite();
        instance.setSlowRoundtripThresholdMs(value);
        return this;
      }
      /**
       * <pre>
       * Defines the threshold above which a roundtrip is considered too slow.
       * </pre>
       *
       * <code>optional int32 slow_roundtrip_threshold_ms = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearSlowRoundtripThresholdMs() {
        copyOnWrite();
        instance.clearSlowRoundtripThresholdMs();
        return this;
      }

      /**
       * <pre>
       * Defines the number of consecutive slow roundtrips allowed before showing
       * the slow connection warning.
       * </pre>
       *
       * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
       * @return Whether the maxConsecutiveSlowRoundtrips field is set.
       */
      @java.lang.Override
      public boolean hasMaxConsecutiveSlowRoundtrips() {
        return instance.hasMaxConsecutiveSlowRoundtrips();
      }
      /**
       * <pre>
       * Defines the number of consecutive slow roundtrips allowed before showing
       * the slow connection warning.
       * </pre>
       *
       * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
       * @return The maxConsecutiveSlowRoundtrips.
       */
      @java.lang.Override
      public int getMaxConsecutiveSlowRoundtrips() {
        return instance.getMaxConsecutiveSlowRoundtrips();
      }
      /**
       * <pre>
       * Defines the number of consecutive slow roundtrips allowed before showing
       * the slow connection warning.
       * </pre>
       *
       * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
       * @param value The maxConsecutiveSlowRoundtrips to set.
       * @return This builder for chaining.
       */
      public Builder setMaxConsecutiveSlowRoundtrips(int value) {
        copyOnWrite();
        instance.setMaxConsecutiveSlowRoundtrips(value);
        return this;
      }
      /**
       * <pre>
       * Defines the number of consecutive slow roundtrips allowed before showing
       * the slow connection warning.
       * </pre>
       *
       * <code>optional int32 max_consecutive_slow_roundtrips = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxConsecutiveSlowRoundtrips() {
        copyOnWrite();
        instance.clearMaxConsecutiveSlowRoundtrips();
        return this;
      }

      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow connection.
       * If this is not set, no warning will be shown in case of slow connection.
       * </pre>
       *
       * <code>optional string slow_connection_message = 9;</code>
       * @return Whether the slowConnectionMessage field is set.
       */
      @java.lang.Override
      public boolean hasSlowConnectionMessage() {
        return instance.hasSlowConnectionMessage();
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow connection.
       * If this is not set, no warning will be shown in case of slow connection.
       * </pre>
       *
       * <code>optional string slow_connection_message = 9;</code>
       * @return The slowConnectionMessage.
       */
      @java.lang.Override
      public java.lang.String getSlowConnectionMessage() {
        return instance.getSlowConnectionMessage();
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow connection.
       * If this is not set, no warning will be shown in case of slow connection.
       * </pre>
       *
       * <code>optional string slow_connection_message = 9;</code>
       * @return The bytes for slowConnectionMessage.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSlowConnectionMessageBytes() {
        return instance.getSlowConnectionMessageBytes();
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow connection.
       * If this is not set, no warning will be shown in case of slow connection.
       * </pre>
       *
       * <code>optional string slow_connection_message = 9;</code>
       * @param value The slowConnectionMessage to set.
       * @return This builder for chaining.
       */
      public Builder setSlowConnectionMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setSlowConnectionMessage(value);
        return this;
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow connection.
       * If this is not set, no warning will be shown in case of slow connection.
       * </pre>
       *
       * <code>optional string slow_connection_message = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearSlowConnectionMessage() {
        copyOnWrite();
        instance.clearSlowConnectionMessage();
        return this;
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow connection.
       * If this is not set, no warning will be shown in case of slow connection.
       * </pre>
       *
       * <code>optional string slow_connection_message = 9;</code>
       * @param value The bytes for slowConnectionMessage to set.
       * @return This builder for chaining.
       */
      public Builder setSlowConnectionMessageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSlowConnectionMessageBytes(value);
        return this;
      }

      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow website.
       * If this is not set, no warning will be shown in case of a slow website.
       * </pre>
       *
       * <code>optional string slow_website_message = 10;</code>
       * @return Whether the slowWebsiteMessage field is set.
       */
      @java.lang.Override
      public boolean hasSlowWebsiteMessage() {
        return instance.hasSlowWebsiteMessage();
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow website.
       * If this is not set, no warning will be shown in case of a slow website.
       * </pre>
       *
       * <code>optional string slow_website_message = 10;</code>
       * @return The slowWebsiteMessage.
       */
      @java.lang.Override
      public java.lang.String getSlowWebsiteMessage() {
        return instance.getSlowWebsiteMessage();
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow website.
       * If this is not set, no warning will be shown in case of a slow website.
       * </pre>
       *
       * <code>optional string slow_website_message = 10;</code>
       * @return The bytes for slowWebsiteMessage.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSlowWebsiteMessageBytes() {
        return instance.getSlowWebsiteMessageBytes();
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow website.
       * If this is not set, no warning will be shown in case of a slow website.
       * </pre>
       *
       * <code>optional string slow_website_message = 10;</code>
       * @param value The slowWebsiteMessage to set.
       * @return This builder for chaining.
       */
      public Builder setSlowWebsiteMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setSlowWebsiteMessage(value);
        return this;
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow website.
       * If this is not set, no warning will be shown in case of a slow website.
       * </pre>
       *
       * <code>optional string slow_website_message = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearSlowWebsiteMessage() {
        copyOnWrite();
        instance.clearSlowWebsiteMessage();
        return this;
      }
      /**
       * <pre>
       * The message to show as a warning to inform the user of a slow website.
       * If this is not set, no warning will be shown in case of a slow website.
       * </pre>
       *
       * <code>optional string slow_website_message = 10;</code>
       * @param value The bytes for slowWebsiteMessage to set.
       * @return This builder for chaining.
       */
      public Builder setSlowWebsiteMessageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSlowWebsiteMessageBytes(value);
        return this;
      }

      /**
       * <pre>
       * The minimum duration that the message will be shown for (only applies to
       * the slow connection messages).
       * </pre>
       *
       * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
       * @return Whether the minimumWarningMessageDurationMs field is set.
       */
      @java.lang.Override
      public boolean hasMinimumWarningMessageDurationMs() {
        return instance.hasMinimumWarningMessageDurationMs();
      }
      /**
       * <pre>
       * The minimum duration that the message will be shown for (only applies to
       * the slow connection messages).
       * </pre>
       *
       * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
       * @return The minimumWarningMessageDurationMs.
       */
      @java.lang.Override
      public int getMinimumWarningMessageDurationMs() {
        return instance.getMinimumWarningMessageDurationMs();
      }
      /**
       * <pre>
       * The minimum duration that the message will be shown for (only applies to
       * the slow connection messages).
       * </pre>
       *
       * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
       * @param value The minimumWarningMessageDurationMs to set.
       * @return This builder for chaining.
       */
      public Builder setMinimumWarningMessageDurationMs(int value) {
        copyOnWrite();
        instance.setMinimumWarningMessageDurationMs(value);
        return this;
      }
      /**
       * <pre>
       * The minimum duration that the message will be shown for (only applies to
       * the slow connection messages).
       * </pre>
       *
       * <code>optional int32 minimum_warning_message_duration_ms = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinimumWarningMessageDurationMs() {
        copyOnWrite();
        instance.clearMinimumWarningMessageDurationMs();
        return this;
      }

      /**
       * <pre>
       * Whether the warning message should replace the current status message or
       * should be concatenated.
       * </pre>
       *
       * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
       * @return Whether the messageMode field is set.
       */
      @java.lang.Override
      public boolean hasMessageMode() {
        return instance.hasMessageMode();
      }
      /**
       * <pre>
       * Whether the warning message should replace the current status message or
       * should be concatenated.
       * </pre>
       *
       * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
       * @return The messageMode.
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode getMessageMode() {
        return instance.getMessageMode();
      }
      /**
       * <pre>
       * Whether the warning message should replace the current status message or
       * should be concatenated.
       * </pre>
       *
       * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
       * @param value The enum numeric value on the wire for messageMode to set.
       * @return This builder for chaining.
       */
      public Builder setMessageMode(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode value) {
        copyOnWrite();
        instance.setMessageMode(value);
        return this;
      }
      /**
       * <pre>
       * Whether the warning message should replace the current status message or
       * should be concatenated.
       * </pre>
       *
       * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings.MessageMode message_mode = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessageMode() {
        copyOnWrite();
        instance.clearMessageMode();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ClientSettingsProto.SlowWarningSettings)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "enableSlowConnectionWarnings_",
              "enableSlowWebsiteWarnings_",
              "onlyShowWarningOnce_",
              "onlyShowConnectionWarningOnce_",
              "onlyShowWebsiteWarningOnce_",
              "warningDelayMs_",
              "slowRoundtripThresholdMs_",
              "maxConsecutiveSlowRoundtrips_",
              "slowConnectionMessage_",
              "slowWebsiteMessage_",
              "minimumWarningMessageDurationMs_",
              "messageMode_",
              org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.MessageMode.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\f\u0000\u0001\u0001\f\f\u0000\u0000\u0000\u0001\u1007\u0000\u0002\u1007\u0001" +
                "\u0003\u1007\u0002\u0004\u1007\u0003\u0005\u1007\u0004\u0006\u1004\u0005\u0007\u1004" +
                "\u0006\b\u1004\u0007\t\u1008\b\n\u1008\t\u000b\u1004\n\f\u100c\u000b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ClientSettingsProto.SlowWarningSettings)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings DEFAULT_INSTANCE;
    static {
      SlowWarningSettings defaultInstance = new SlowWarningSettings();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SlowWarningSettings.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SlowWarningSettings> PARSER;

    public static com.google.protobuf.Parser<SlowWarningSettings> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DisplayStringOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ClientSettingsProto.DisplayString)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
     * @return The id.
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId getId();

    /**
     * <code>optional string value = 2;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <code>optional string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <code>optional string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * A Chrome display string along with its ID. This is used to create a map of
   * display strings below.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ClientSettingsProto.DisplayString}
   */
  public  static final class DisplayString extends
      com.google.protobuf.GeneratedMessageLite<
          DisplayString, DisplayString.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ClientSettingsProto.DisplayString)
      DisplayStringOrBuilder {
    private DisplayString() {
      value_ = "";
    }
    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId getId() {
      org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId result = org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId.forNumber(id_);
      return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId.UNSPECIFIED : result;
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
     * @param value The id to set.
     */
    private void setId(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId value) {
      id_ = value.getNumber();
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
     */
    private void clearId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      id_ = 0;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private java.lang.String value_;
    /**
     * <code>optional string value = 2;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      return value_;
    }
    /**
     * <code>optional string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(value_);
    }
    /**
     * <code>optional string value = 2;</code>
     * @param value The value to set.
     */
    private void setValue(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000002;
      value_ = value;
    }
    /**
     * <code>optional string value = 2;</code>
     */
    private void clearValue() {
      bitField0_ = (bitField0_ & ~0x00000002);
      value_ = getDefaultInstance().getValue();
    }
    /**
     * <code>optional string value = 2;</code>
     * @param value The bytes for value to set.
     */
    private void setValueBytes(
        com.google.protobuf.ByteString value) {
      value_ = value.toStringUtf8();
      bitField0_ |= 0x00000002;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A Chrome display string along with its ID. This is used to create a map of
     * display strings below.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.ClientSettingsProto.DisplayString}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ClientSettingsProto.DisplayString)
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return instance.hasId();
      }
      /**
       * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId getId() {
        return instance.getId();
      }
      /**
       * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
       * @param value The enum numeric value on the wire for id to set.
       * @return This builder for chaining.
       */
      public Builder setId(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.ClientSettingsProto.DisplayStringId id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }

      /**
       * <code>optional string value = 2;</code>
       * @return Whether the value field is set.
       */
      @java.lang.Override
      public boolean hasValue() {
        return instance.hasValue();
      }
      /**
       * <code>optional string value = 2;</code>
       * @return The value.
       */
      @java.lang.Override
      public java.lang.String getValue() {
        return instance.getValue();
      }
      /**
       * <code>optional string value = 2;</code>
       * @return The bytes for value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getValueBytes() {
        return instance.getValueBytes();
      }
      /**
       * <code>optional string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        copyOnWrite();
        instance.setValue(value);
        return this;
      }
      /**
       * <code>optional string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        copyOnWrite();
        instance.clearValue();
        return this;
      }
      /**
       * <code>optional string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setValueBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ClientSettingsProto.DisplayString)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "id_",
              org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringId.internalGetVerifier(),
              "value_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u100c\u0000\u0002" +
                "\u1008\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ClientSettingsProto.DisplayString)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString DEFAULT_INSTANCE;
    static {
      DisplayString defaultInstance = new DisplayString();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DisplayString.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DisplayString> PARSER;

    public static com.google.protobuf.Parser<DisplayString> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int PERIODIC_SCRIPT_CHECK_INTERVAL_MS_FIELD_NUMBER = 1;
  private int periodicScriptCheckIntervalMs_;
  /**
   * <pre>
   * Time between two periodic script precondition checks.
   * </pre>
   *
   * <code>optional int32 periodic_script_check_interval_ms = 1;</code>
   * @return Whether the periodicScriptCheckIntervalMs field is set.
   */
  @java.lang.Override
  public boolean hasPeriodicScriptCheckIntervalMs() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Time between two periodic script precondition checks.
   * </pre>
   *
   * <code>optional int32 periodic_script_check_interval_ms = 1;</code>
   * @return The periodicScriptCheckIntervalMs.
   */
  @java.lang.Override
  public int getPeriodicScriptCheckIntervalMs() {
    return periodicScriptCheckIntervalMs_;
  }
  /**
   * <pre>
   * Time between two periodic script precondition checks.
   * </pre>
   *
   * <code>optional int32 periodic_script_check_interval_ms = 1;</code>
   * @param value The periodicScriptCheckIntervalMs to set.
   */
  private void setPeriodicScriptCheckIntervalMs(int value) {
    bitField0_ |= 0x00000001;
    periodicScriptCheckIntervalMs_ = value;
  }
  /**
   * <pre>
   * Time between two periodic script precondition checks.
   * </pre>
   *
   * <code>optional int32 periodic_script_check_interval_ms = 1;</code>
   */
  private void clearPeriodicScriptCheckIntervalMs() {
    bitField0_ = (bitField0_ & ~0x00000001);
    periodicScriptCheckIntervalMs_ = 0;
  }

  public static final int PERIODIC_ELEMENT_CHECK_INTERVAL_MS_FIELD_NUMBER = 2;
  private int periodicElementCheckIntervalMs_;
  /**
   * <pre>
   * Time between two element checks in the script executor.
   * </pre>
   *
   * <code>optional int32 periodic_element_check_interval_ms = 2;</code>
   * @return Whether the periodicElementCheckIntervalMs field is set.
   */
  @java.lang.Override
  public boolean hasPeriodicElementCheckIntervalMs() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Time between two element checks in the script executor.
   * </pre>
   *
   * <code>optional int32 periodic_element_check_interval_ms = 2;</code>
   * @return The periodicElementCheckIntervalMs.
   */
  @java.lang.Override
  public int getPeriodicElementCheckIntervalMs() {
    return periodicElementCheckIntervalMs_;
  }
  /**
   * <pre>
   * Time between two element checks in the script executor.
   * </pre>
   *
   * <code>optional int32 periodic_element_check_interval_ms = 2;</code>
   * @param value The periodicElementCheckIntervalMs to set.
   */
  private void setPeriodicElementCheckIntervalMs(int value) {
    bitField0_ |= 0x00000002;
    periodicElementCheckIntervalMs_ = value;
  }
  /**
   * <pre>
   * Time between two element checks in the script executor.
   * </pre>
   *
   * <code>optional int32 periodic_element_check_interval_ms = 2;</code>
   */
  private void clearPeriodicElementCheckIntervalMs() {
    bitField0_ = (bitField0_ & ~0x00000002);
    periodicElementCheckIntervalMs_ = 0;
  }

  public static final int PERIODIC_SCRIPT_CHECK_COUNT_FIELD_NUMBER = 3;
  private int periodicScriptCheckCount_;
  /**
   * <pre>
   * Run that many periodic checks before giving up unless something happens to
   * wake it up, such as the user touching the screen.
   * </pre>
   *
   * <code>optional int32 periodic_script_check_count = 3;</code>
   * @return Whether the periodicScriptCheckCount field is set.
   */
  @java.lang.Override
  public boolean hasPeriodicScriptCheckCount() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Run that many periodic checks before giving up unless something happens to
   * wake it up, such as the user touching the screen.
   * </pre>
   *
   * <code>optional int32 periodic_script_check_count = 3;</code>
   * @return The periodicScriptCheckCount.
   */
  @java.lang.Override
  public int getPeriodicScriptCheckCount() {
    return periodicScriptCheckCount_;
  }
  /**
   * <pre>
   * Run that many periodic checks before giving up unless something happens to
   * wake it up, such as the user touching the screen.
   * </pre>
   *
   * <code>optional int32 periodic_script_check_count = 3;</code>
   * @param value The periodicScriptCheckCount to set.
   */
  private void setPeriodicScriptCheckCount(int value) {
    bitField0_ |= 0x00000004;
    periodicScriptCheckCount_ = value;
  }
  /**
   * <pre>
   * Run that many periodic checks before giving up unless something happens to
   * wake it up, such as the user touching the screen.
   * </pre>
   *
   * <code>optional int32 periodic_script_check_count = 3;</code>
   */
  private void clearPeriodicScriptCheckCount() {
    bitField0_ = (bitField0_ & ~0x00000004);
    periodicScriptCheckCount_ = 0;
  }

  public static final int ELEMENT_POSITION_UPDATE_INTERVAL_MS_FIELD_NUMBER = 4;
  private int elementPositionUpdateIntervalMs_;
  /**
   * <pre>
   * Time between two element position refreshes, when displaying highlighted
   * areas in prompt state.
   * </pre>
   *
   * <code>optional int32 element_position_update_interval_ms = 4;</code>
   * @return Whether the elementPositionUpdateIntervalMs field is set.
   */
  @java.lang.Override
  public boolean hasElementPositionUpdateIntervalMs() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Time between two element position refreshes, when displaying highlighted
   * areas in prompt state.
   * </pre>
   *
   * <code>optional int32 element_position_update_interval_ms = 4;</code>
   * @return The elementPositionUpdateIntervalMs.
   */
  @java.lang.Override
  public int getElementPositionUpdateIntervalMs() {
    return elementPositionUpdateIntervalMs_;
  }
  /**
   * <pre>
   * Time between two element position refreshes, when displaying highlighted
   * areas in prompt state.
   * </pre>
   *
   * <code>optional int32 element_position_update_interval_ms = 4;</code>
   * @param value The elementPositionUpdateIntervalMs to set.
   */
  private void setElementPositionUpdateIntervalMs(int value) {
    bitField0_ |= 0x00000008;
    elementPositionUpdateIntervalMs_ = value;
  }
  /**
   * <pre>
   * Time between two element position refreshes, when displaying highlighted
   * areas in prompt state.
   * </pre>
   *
   * <code>optional int32 element_position_update_interval_ms = 4;</code>
   */
  private void clearElementPositionUpdateIntervalMs() {
    bitField0_ = (bitField0_ & ~0x00000008);
    elementPositionUpdateIntervalMs_ = 0;
  }

  public static final int SHORT_WAIT_FOR_ELEMENT_DEADLINE_MS_FIELD_NUMBER = 5;
  private int shortWaitForElementDeadlineMs_;
  /**
   * <pre>
   * Maximum amount of time normal actions should implicitly wait for a selector
   * to show up.
   * </pre>
   *
   * <code>optional int32 short_wait_for_element_deadline_ms = 5;</code>
   * @return Whether the shortWaitForElementDeadlineMs field is set.
   */
  @java.lang.Override
  public boolean hasShortWaitForElementDeadlineMs() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Maximum amount of time normal actions should implicitly wait for a selector
   * to show up.
   * </pre>
   *
   * <code>optional int32 short_wait_for_element_deadline_ms = 5;</code>
   * @return The shortWaitForElementDeadlineMs.
   */
  @java.lang.Override
  public int getShortWaitForElementDeadlineMs() {
    return shortWaitForElementDeadlineMs_;
  }
  /**
   * <pre>
   * Maximum amount of time normal actions should implicitly wait for a selector
   * to show up.
   * </pre>
   *
   * <code>optional int32 short_wait_for_element_deadline_ms = 5;</code>
   * @param value The shortWaitForElementDeadlineMs to set.
   */
  private void setShortWaitForElementDeadlineMs(int value) {
    bitField0_ |= 0x00000010;
    shortWaitForElementDeadlineMs_ = value;
  }
  /**
   * <pre>
   * Maximum amount of time normal actions should implicitly wait for a selector
   * to show up.
   * </pre>
   *
   * <code>optional int32 short_wait_for_element_deadline_ms = 5;</code>
   */
  private void clearShortWaitForElementDeadlineMs() {
    bitField0_ = (bitField0_ & ~0x00000010);
    shortWaitForElementDeadlineMs_ = 0;
  }

  public static final int BOX_MODEL_CHECK_INTERVAL_MS_FIELD_NUMBER = 6;
  private int boxModelCheckIntervalMs_;
  /**
   * <pre>
   * Time to wait between two checks of the box model, when waiting for an
   * element to become stable, such as before clicking.
   * </pre>
   *
   * <code>optional int32 box_model_check_interval_ms = 6;</code>
   * @return Whether the boxModelCheckIntervalMs field is set.
   */
  @java.lang.Override
  public boolean hasBoxModelCheckIntervalMs() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Time to wait between two checks of the box model, when waiting for an
   * element to become stable, such as before clicking.
   * </pre>
   *
   * <code>optional int32 box_model_check_interval_ms = 6;</code>
   * @return The boxModelCheckIntervalMs.
   */
  @java.lang.Override
  public int getBoxModelCheckIntervalMs() {
    return boxModelCheckIntervalMs_;
  }
  /**
   * <pre>
   * Time to wait between two checks of the box model, when waiting for an
   * element to become stable, such as before clicking.
   * </pre>
   *
   * <code>optional int32 box_model_check_interval_ms = 6;</code>
   * @param value The boxModelCheckIntervalMs to set.
   */
  private void setBoxModelCheckIntervalMs(int value) {
    bitField0_ |= 0x00000020;
    boxModelCheckIntervalMs_ = value;
  }
  /**
   * <pre>
   * Time to wait between two checks of the box model, when waiting for an
   * element to become stable, such as before clicking.
   * </pre>
   *
   * <code>optional int32 box_model_check_interval_ms = 6;</code>
   */
  private void clearBoxModelCheckIntervalMs() {
    bitField0_ = (bitField0_ & ~0x00000020);
    boxModelCheckIntervalMs_ = 0;
  }

  public static final int BOX_MODEL_CHECK_COUNT_FIELD_NUMBER = 7;
  private int boxModelCheckCount_;
  /**
   * <pre>
   * Maximum number of checks to run while waiting for the element position to
   * become stable.
   * </pre>
   *
   * <code>optional int32 box_model_check_count = 7;</code>
   * @return Whether the boxModelCheckCount field is set.
   */
  @java.lang.Override
  public boolean hasBoxModelCheckCount() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Maximum number of checks to run while waiting for the element position to
   * become stable.
   * </pre>
   *
   * <code>optional int32 box_model_check_count = 7;</code>
   * @return The boxModelCheckCount.
   */
  @java.lang.Override
  public int getBoxModelCheckCount() {
    return boxModelCheckCount_;
  }
  /**
   * <pre>
   * Maximum number of checks to run while waiting for the element position to
   * become stable.
   * </pre>
   *
   * <code>optional int32 box_model_check_count = 7;</code>
   * @param value The boxModelCheckCount to set.
   */
  private void setBoxModelCheckCount(int value) {
    bitField0_ |= 0x00000040;
    boxModelCheckCount_ = value;
  }
  /**
   * <pre>
   * Maximum number of checks to run while waiting for the element position to
   * become stable.
   * </pre>
   *
   * <code>optional int32 box_model_check_count = 7;</code>
   */
  private void clearBoxModelCheckCount() {
    bitField0_ = (bitField0_ & ~0x00000040);
    boxModelCheckCount_ = 0;
  }

  public static final int DOCUMENT_READY_CHECK_TIMEOUT_MS_FIELD_NUMBER = 20;
  private int documentReadyCheckTimeoutMs_;
  /**
   * <pre>
   * Maximum time to wait until document has reached "ready" state.
   * </pre>
   *
   * <code>optional int32 document_ready_check_timeout_ms = 20;</code>
   * @return Whether the documentReadyCheckTimeoutMs field is set.
   */
  @java.lang.Override
  public boolean hasDocumentReadyCheckTimeoutMs() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Maximum time to wait until document has reached "ready" state.
   * </pre>
   *
   * <code>optional int32 document_ready_check_timeout_ms = 20;</code>
   * @return The documentReadyCheckTimeoutMs.
   */
  @java.lang.Override
  public int getDocumentReadyCheckTimeoutMs() {
    return documentReadyCheckTimeoutMs_;
  }
  /**
   * <pre>
   * Maximum time to wait until document has reached "ready" state.
   * </pre>
   *
   * <code>optional int32 document_ready_check_timeout_ms = 20;</code>
   * @param value The documentReadyCheckTimeoutMs to set.
   */
  private void setDocumentReadyCheckTimeoutMs(int value) {
    bitField0_ |= 0x00000080;
    documentReadyCheckTimeoutMs_ = value;
  }
  /**
   * <pre>
   * Maximum time to wait until document has reached "ready" state.
   * </pre>
   *
   * <code>optional int32 document_ready_check_timeout_ms = 20;</code>
   */
  private void clearDocumentReadyCheckTimeoutMs() {
    bitField0_ = (bitField0_ & ~0x00000080);
    documentReadyCheckTimeoutMs_ = 0;
  }

  public static final int CANCEL_DELAY_MS_FIELD_NUMBER = 12;
  private int cancelDelayMs_;
  /**
   * <pre>
   * How much time to give users to tap undo when they tap a cancel button.
   * </pre>
   *
   * <code>optional int32 cancel_delay_ms = 12;</code>
   * @return Whether the cancelDelayMs field is set.
   */
  @java.lang.Override
  public boolean hasCancelDelayMs() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * How much time to give users to tap undo when they tap a cancel button.
   * </pre>
   *
   * <code>optional int32 cancel_delay_ms = 12;</code>
   * @return The cancelDelayMs.
   */
  @java.lang.Override
  public int getCancelDelayMs() {
    return cancelDelayMs_;
  }
  /**
   * <pre>
   * How much time to give users to tap undo when they tap a cancel button.
   * </pre>
   *
   * <code>optional int32 cancel_delay_ms = 12;</code>
   * @param value The cancelDelayMs to set.
   */
  private void setCancelDelayMs(int value) {
    bitField0_ |= 0x00000100;
    cancelDelayMs_ = value;
  }
  /**
   * <pre>
   * How much time to give users to tap undo when they tap a cancel button.
   * </pre>
   *
   * <code>optional int32 cancel_delay_ms = 12;</code>
   */
  private void clearCancelDelayMs() {
    bitField0_ = (bitField0_ & ~0x00000100);
    cancelDelayMs_ = 0;
  }

  public static final int TAP_COUNT_FIELD_NUMBER = 13;
  private int tapCount_;
  /**
   * <pre>
   * If the user taps the overlay that many time within |tap_duration| turn the
   * UI off and give them |tap_shutdown_delay| to undo. If 0, unexpected taps
   * are ignored.
   * </pre>
   *
   * <code>optional int32 tap_count = 13;</code>
   * @return Whether the tapCount field is set.
   */
  @java.lang.Override
  public boolean hasTapCount() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * If the user taps the overlay that many time within |tap_duration| turn the
   * UI off and give them |tap_shutdown_delay| to undo. If 0, unexpected taps
   * are ignored.
   * </pre>
   *
   * <code>optional int32 tap_count = 13;</code>
   * @return The tapCount.
   */
  @java.lang.Override
  public int getTapCount() {
    return tapCount_;
  }
  /**
   * <pre>
   * If the user taps the overlay that many time within |tap_duration| turn the
   * UI off and give them |tap_shutdown_delay| to undo. If 0, unexpected taps
   * are ignored.
   * </pre>
   *
   * <code>optional int32 tap_count = 13;</code>
   * @param value The tapCount to set.
   */
  private void setTapCount(int value) {
    bitField0_ |= 0x00000200;
    tapCount_ = value;
  }
  /**
   * <pre>
   * If the user taps the overlay that many time within |tap_duration| turn the
   * UI off and give them |tap_shutdown_delay| to undo. If 0, unexpected taps
   * are ignored.
   * </pre>
   *
   * <code>optional int32 tap_count = 13;</code>
   */
  private void clearTapCount() {
    bitField0_ = (bitField0_ & ~0x00000200);
    tapCount_ = 0;
  }

  public static final int TAP_TRACKING_DURATION_MS_FIELD_NUMBER = 14;
  private int tapTrackingDurationMs_;
  /**
   * <pre>
   * Reset the unexpected tap counter after that time.
   * </pre>
   *
   * <code>optional int32 tap_tracking_duration_ms = 14;</code>
   * @return Whether the tapTrackingDurationMs field is set.
   */
  @java.lang.Override
  public boolean hasTapTrackingDurationMs() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <pre>
   * Reset the unexpected tap counter after that time.
   * </pre>
   *
   * <code>optional int32 tap_tracking_duration_ms = 14;</code>
   * @return The tapTrackingDurationMs.
   */
  @java.lang.Override
  public int getTapTrackingDurationMs() {
    return tapTrackingDurationMs_;
  }
  /**
   * <pre>
   * Reset the unexpected tap counter after that time.
   * </pre>
   *
   * <code>optional int32 tap_tracking_duration_ms = 14;</code>
   * @param value The tapTrackingDurationMs to set.
   */
  private void setTapTrackingDurationMs(int value) {
    bitField0_ |= 0x00000400;
    tapTrackingDurationMs_ = value;
  }
  /**
   * <pre>
   * Reset the unexpected tap counter after that time.
   * </pre>
   *
   * <code>optional int32 tap_tracking_duration_ms = 14;</code>
   */
  private void clearTapTrackingDurationMs() {
    bitField0_ = (bitField0_ & ~0x00000400);
    tapTrackingDurationMs_ = 0;
  }

  public static final int TAP_SHUTDOWN_DELAY_MS_FIELD_NUMBER = 15;
  private int tapShutdownDelayMs_;
  /**
   * <pre>
   * How much time to give users to tap undo when after |tap_count| unexpected
   * taps where
   * </pre>
   *
   * <code>optional int32 tap_shutdown_delay_ms = 15;</code>
   * @return Whether the tapShutdownDelayMs field is set.
   */
  @java.lang.Override
  public boolean hasTapShutdownDelayMs() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * How much time to give users to tap undo when after |tap_count| unexpected
   * taps where
   * </pre>
   *
   * <code>optional int32 tap_shutdown_delay_ms = 15;</code>
   * @return The tapShutdownDelayMs.
   */
  @java.lang.Override
  public int getTapShutdownDelayMs() {
    return tapShutdownDelayMs_;
  }
  /**
   * <pre>
   * How much time to give users to tap undo when after |tap_count| unexpected
   * taps where
   * </pre>
   *
   * <code>optional int32 tap_shutdown_delay_ms = 15;</code>
   * @param value The tapShutdownDelayMs to set.
   */
  private void setTapShutdownDelayMs(int value) {
    bitField0_ |= 0x00000800;
    tapShutdownDelayMs_ = value;
  }
  /**
   * <pre>
   * How much time to give users to tap undo when after |tap_count| unexpected
   * taps where
   * </pre>
   *
   * <code>optional int32 tap_shutdown_delay_ms = 15;</code>
   */
  private void clearTapShutdownDelayMs() {
    bitField0_ = (bitField0_ & ~0x00000800);
    tapShutdownDelayMs_ = 0;
  }

  public static final int OVERLAY_IMAGE_FIELD_NUMBER = 16;
  private org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto overlayImage_;
  /**
   * <pre>
   * Optional image drawn on top of overlays.
   * </pre>
   *
   * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
   */
  @java.lang.Override
  public boolean hasOverlayImage() {
    return ((bitField0_ & 0x00001000) != 0);
  }
  /**
   * <pre>
   * Optional image drawn on top of overlays.
   * </pre>
   *
   * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto getOverlayImage() {
    return overlayImage_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto.getDefaultInstance() : overlayImage_;
  }
  /**
   * <pre>
   * Optional image drawn on top of overlays.
   * </pre>
   *
   * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
   */
  private void setOverlayImage(org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto value) {
    value.getClass();
  overlayImage_ = value;
    bitField0_ |= 0x00001000;
    }
  /**
   * <pre>
   * Optional image drawn on top of overlays.
   * </pre>
   *
   * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeOverlayImage(org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto value) {
    value.getClass();
  if (overlayImage_ != null &&
        overlayImage_ != org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto.getDefaultInstance()) {
      overlayImage_ =
        org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto.newBuilder(overlayImage_).mergeFrom(value).buildPartial();
    } else {
      overlayImage_ = value;
    }
    bitField0_ |= 0x00001000;
  }
  /**
   * <pre>
   * Optional image drawn on top of overlays.
   * </pre>
   *
   * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
   */
  private void clearOverlayImage() {  overlayImage_ = null;
    bitField0_ = (bitField0_ & ~0x00001000);
  }

  public static final int INTEGRATION_TEST_SETTINGS_FIELD_NUMBER = 17;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings integrationTestSettings_;
  /**
   * <pre>
   * Optional settings intended for integration tests.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
   */
  @java.lang.Override
  public boolean hasIntegrationTestSettings() {
    return ((bitField0_ & 0x00002000) != 0);
  }
  /**
   * <pre>
   * Optional settings intended for integration tests.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings getIntegrationTestSettings() {
    return integrationTestSettings_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings.getDefaultInstance() : integrationTestSettings_;
  }
  /**
   * <pre>
   * Optional settings intended for integration tests.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
   */
  private void setIntegrationTestSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings value) {
    value.getClass();
  integrationTestSettings_ = value;
    bitField0_ |= 0x00002000;
    }
  /**
   * <pre>
   * Optional settings intended for integration tests.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeIntegrationTestSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings value) {
    value.getClass();
  if (integrationTestSettings_ != null &&
        integrationTestSettings_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings.getDefaultInstance()) {
      integrationTestSettings_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings.newBuilder(integrationTestSettings_).mergeFrom(value).buildPartial();
    } else {
      integrationTestSettings_ = value;
    }
    bitField0_ |= 0x00002000;
  }
  /**
   * <pre>
   * Optional settings intended for integration tests.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
   */
  private void clearIntegrationTestSettings() {  integrationTestSettings_ = null;
    bitField0_ = (bitField0_ & ~0x00002000);
  }

  public static final int TALKBACK_SHEET_SIZE_FRACTION_FIELD_NUMBER = 18;
  private float talkbackSheetSizeFraction_;
  /**
   * <pre>
   * Optional setting defining the size of the bottom sheet when Talkback is
   * enabled as a fraction of the available height. When set, the bottomsheet
   * will stop resizing automatically in talkback mode. It will always have the
   * specified size instead.
   * </pre>
   *
   * <code>optional float talkback_sheet_size_fraction = 18;</code>
   * @return Whether the talkbackSheetSizeFraction field is set.
   */
  @java.lang.Override
  public boolean hasTalkbackSheetSizeFraction() {
    return ((bitField0_ & 0x00004000) != 0);
  }
  /**
   * <pre>
   * Optional setting defining the size of the bottom sheet when Talkback is
   * enabled as a fraction of the available height. When set, the bottomsheet
   * will stop resizing automatically in talkback mode. It will always have the
   * specified size instead.
   * </pre>
   *
   * <code>optional float talkback_sheet_size_fraction = 18;</code>
   * @return The talkbackSheetSizeFraction.
   */
  @java.lang.Override
  public float getTalkbackSheetSizeFraction() {
    return talkbackSheetSizeFraction_;
  }
  /**
   * <pre>
   * Optional setting defining the size of the bottom sheet when Talkback is
   * enabled as a fraction of the available height. When set, the bottomsheet
   * will stop resizing automatically in talkback mode. It will always have the
   * specified size instead.
   * </pre>
   *
   * <code>optional float talkback_sheet_size_fraction = 18;</code>
   * @param value The talkbackSheetSizeFraction to set.
   */
  private void setTalkbackSheetSizeFraction(float value) {
    bitField0_ |= 0x00004000;
    talkbackSheetSizeFraction_ = value;
  }
  /**
   * <pre>
   * Optional setting defining the size of the bottom sheet when Talkback is
   * enabled as a fraction of the available height. When set, the bottomsheet
   * will stop resizing automatically in talkback mode. It will always have the
   * specified size instead.
   * </pre>
   *
   * <code>optional float talkback_sheet_size_fraction = 18;</code>
   */
  private void clearTalkbackSheetSizeFraction() {
    bitField0_ = (bitField0_ & ~0x00004000);
    talkbackSheetSizeFraction_ = 0F;
  }

  public static final int BACK_BUTTON_SETTINGS_FIELD_NUMBER = 19;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings backButtonSettings_;
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
   */
  @java.lang.Override
  public boolean hasBackButtonSettings() {
    return ((bitField0_ & 0x00008000) != 0);
  }
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings getBackButtonSettings() {
    return backButtonSettings_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings.getDefaultInstance() : backButtonSettings_;
  }
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
   */
  private void setBackButtonSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings value) {
    value.getClass();
  backButtonSettings_ = value;
    bitField0_ |= 0x00008000;
    }
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeBackButtonSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings value) {
    value.getClass();
  if (backButtonSettings_ != null &&
        backButtonSettings_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings.getDefaultInstance()) {
      backButtonSettings_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings.newBuilder(backButtonSettings_).mergeFrom(value).buildPartial();
    } else {
      backButtonSettings_ = value;
    }
    bitField0_ |= 0x00008000;
  }
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
   */
  private void clearBackButtonSettings() {  backButtonSettings_ = null;
    bitField0_ = (bitField0_ & ~0x00008000);
  }

  public static final int SLOW_WARNING_SETTINGS_FIELD_NUMBER = 21;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings slowWarningSettings_;
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
   */
  @java.lang.Override
  public boolean hasSlowWarningSettings() {
    return ((bitField0_ & 0x00010000) != 0);
  }
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings getSlowWarningSettings() {
    return slowWarningSettings_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.getDefaultInstance() : slowWarningSettings_;
  }
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
   */
  private void setSlowWarningSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings value) {
    value.getClass();
  slowWarningSettings_ = value;
    bitField0_ |= 0x00010000;
    }
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeSlowWarningSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings value) {
    value.getClass();
  if (slowWarningSettings_ != null &&
        slowWarningSettings_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.getDefaultInstance()) {
      slowWarningSettings_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.newBuilder(slowWarningSettings_).mergeFrom(value).buildPartial();
    } else {
      slowWarningSettings_ = value;
    }
    bitField0_ |= 0x00010000;
  }
  /**
   * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
   */
  private void clearSlowWarningSettings() {  slowWarningSettings_ = null;
    bitField0_ = (bitField0_ & ~0x00010000);
  }

  public static final int DISPLAY_STRINGS_FIELD_NUMBER = 22;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString> displayStrings_;
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  @java.lang.Override
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString> getDisplayStringsList() {
    return displayStrings_;
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringOrBuilder> 
      getDisplayStringsOrBuilderList() {
    return displayStrings_;
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  @java.lang.Override
  public int getDisplayStringsCount() {
    return displayStrings_.size();
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString getDisplayStrings(int index) {
    return displayStrings_.get(index);
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayStringOrBuilder getDisplayStringsOrBuilder(
      int index) {
    return displayStrings_.get(index);
  }
  private void ensureDisplayStringsIsMutable() {
    com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString> tmp = displayStrings_;
    if (!tmp.isModifiable()) {
      displayStrings_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  private void setDisplayStrings(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString value) {
    value.getClass();
  ensureDisplayStringsIsMutable();
    displayStrings_.set(index, value);
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  private void addDisplayStrings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString value) {
    value.getClass();
  ensureDisplayStringsIsMutable();
    displayStrings_.add(value);
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  private void addDisplayStrings(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString value) {
    value.getClass();
  ensureDisplayStringsIsMutable();
    displayStrings_.add(index, value);
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  private void addAllDisplayStrings(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString> values) {
    ensureDisplayStringsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, displayStrings_);
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  private void clearDisplayStrings() {
    displayStrings_ = emptyProtobufList();
  }
  /**
   * <pre>
   * A map of display strings keyed by the ID. Note that the locale of these
   * strings must be provided in |display_strings_locale|. These strings are
   * ignored if locale is not provided.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
   */
  private void removeDisplayStrings(int index) {
    ensureDisplayStringsIsMutable();
    displayStrings_.remove(index);
  }

  public static final int DISPLAY_STRINGS_LOCALE_FIELD_NUMBER = 23;
  private java.lang.String displayStringsLocale_;
  /**
   * <pre>
   * The locale of |display_strings|. If |display_strings_locale| is not
   * provided, we ignore |display_strings|. When locale
   * is updated/switched to a new locale, we replace the set of
   * |display_strings|, even if empty. The provided locale should be in BCP 47
   * format, e.g. "en-US".
   * </pre>
   *
   * <code>optional string display_strings_locale = 23;</code>
   * @return Whether the displayStringsLocale field is set.
   */
  @java.lang.Override
  public boolean hasDisplayStringsLocale() {
    return ((bitField0_ & 0x00020000) != 0);
  }
  /**
   * <pre>
   * The locale of |display_strings|. If |display_strings_locale| is not
   * provided, we ignore |display_strings|. When locale
   * is updated/switched to a new locale, we replace the set of
   * |display_strings|, even if empty. The provided locale should be in BCP 47
   * format, e.g. "en-US".
   * </pre>
   *
   * <code>optional string display_strings_locale = 23;</code>
   * @return The displayStringsLocale.
   */
  @java.lang.Override
  public java.lang.String getDisplayStringsLocale() {
    return displayStringsLocale_;
  }
  /**
   * <pre>
   * The locale of |display_strings|. If |display_strings_locale| is not
   * provided, we ignore |display_strings|. When locale
   * is updated/switched to a new locale, we replace the set of
   * |display_strings|, even if empty. The provided locale should be in BCP 47
   * format, e.g. "en-US".
   * </pre>
   *
   * <code>optional string display_strings_locale = 23;</code>
   * @return The bytes for displayStringsLocale.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDisplayStringsLocaleBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(displayStringsLocale_);
  }
  /**
   * <pre>
   * The locale of |display_strings|. If |display_strings_locale| is not
   * provided, we ignore |display_strings|. When locale
   * is updated/switched to a new locale, we replace the set of
   * |display_strings|, even if empty. The provided locale should be in BCP 47
   * format, e.g. "en-US".
   * </pre>
   *
   * <code>optional string display_strings_locale = 23;</code>
   * @param value The displayStringsLocale to set.
   */
  private void setDisplayStringsLocale(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00020000;
    displayStringsLocale_ = value;
  }
  /**
   * <pre>
   * The locale of |display_strings|. If |display_strings_locale| is not
   * provided, we ignore |display_strings|. When locale
   * is updated/switched to a new locale, we replace the set of
   * |display_strings|, even if empty. The provided locale should be in BCP 47
   * format, e.g. "en-US".
   * </pre>
   *
   * <code>optional string display_strings_locale = 23;</code>
   */
  private void clearDisplayStringsLocale() {
    bitField0_ = (bitField0_ & ~0x00020000);
    displayStringsLocale_ = getDefaultInstance().getDisplayStringsLocale();
  }
  /**
   * <pre>
   * The locale of |display_strings|. If |display_strings_locale| is not
   * provided, we ignore |display_strings|. When locale
   * is updated/switched to a new locale, we replace the set of
   * |display_strings|, even if empty. The provided locale should be in BCP 47
   * format, e.g. "en-US".
   * </pre>
   *
   * <code>optional string display_strings_locale = 23;</code>
   * @param value The bytes for displayStringsLocale to set.
   */
  private void setDisplayStringsLocaleBytes(
      com.google.protobuf.ByteString value) {
    displayStringsLocale_ = value.toStringUtf8();
    bitField0_ |= 0x00020000;
  }

  public static final int SELECTOR_OBSERVER_EXTRA_TIMEOUT_MS_FIELD_NUMBER = 24;
  private int selectorObserverExtraTimeoutMs_;
  /**
   * <pre>
   * Extra time SelectorObserver has to finish. If it takes longer than
   * max_wait_time + extra_timeout (this value) it assumes something went
   * wrong and fails with a |TIMED_OUT| error.
   * </pre>
   *
   * <code>optional int32 selector_observer_extra_timeout_ms = 24;</code>
   * @return Whether the selectorObserverExtraTimeoutMs field is set.
   */
  @java.lang.Override
  public boolean hasSelectorObserverExtraTimeoutMs() {
    return ((bitField0_ & 0x00040000) != 0);
  }
  /**
   * <pre>
   * Extra time SelectorObserver has to finish. If it takes longer than
   * max_wait_time + extra_timeout (this value) it assumes something went
   * wrong and fails with a |TIMED_OUT| error.
   * </pre>
   *
   * <code>optional int32 selector_observer_extra_timeout_ms = 24;</code>
   * @return The selectorObserverExtraTimeoutMs.
   */
  @java.lang.Override
  public int getSelectorObserverExtraTimeoutMs() {
    return selectorObserverExtraTimeoutMs_;
  }
  /**
   * <pre>
   * Extra time SelectorObserver has to finish. If it takes longer than
   * max_wait_time + extra_timeout (this value) it assumes something went
   * wrong and fails with a |TIMED_OUT| error.
   * </pre>
   *
   * <code>optional int32 selector_observer_extra_timeout_ms = 24;</code>
   * @param value The selectorObserverExtraTimeoutMs to set.
   */
  private void setSelectorObserverExtraTimeoutMs(int value) {
    bitField0_ |= 0x00040000;
    selectorObserverExtraTimeoutMs_ = value;
  }
  /**
   * <pre>
   * Extra time SelectorObserver has to finish. If it takes longer than
   * max_wait_time + extra_timeout (this value) it assumes something went
   * wrong and fails with a |TIMED_OUT| error.
   * </pre>
   *
   * <code>optional int32 selector_observer_extra_timeout_ms = 24;</code>
   */
  private void clearSelectorObserverExtraTimeoutMs() {
    bitField0_ = (bitField0_ & ~0x00040000);
    selectorObserverExtraTimeoutMs_ = 0;
  }

  public static final int SELECTOR_OBSERVER_DEBOUNCE_INTERVAL_MS_FIELD_NUMBER = 25;
  private int selectorObserverDebounceIntervalMs_;
  /**
   * <pre>
   * SelectorObserver will wait until no DOM mutation notifications are received
   * for this amount of time to check the selectors.
   * </pre>
   *
   * <code>optional int32 selector_observer_debounce_interval_ms = 25;</code>
   * @return Whether the selectorObserverDebounceIntervalMs field is set.
   */
  @java.lang.Override
  public boolean hasSelectorObserverDebounceIntervalMs() {
    return ((bitField0_ & 0x00080000) != 0);
  }
  /**
   * <pre>
   * SelectorObserver will wait until no DOM mutation notifications are received
   * for this amount of time to check the selectors.
   * </pre>
   *
   * <code>optional int32 selector_observer_debounce_interval_ms = 25;</code>
   * @return The selectorObserverDebounceIntervalMs.
   */
  @java.lang.Override
  public int getSelectorObserverDebounceIntervalMs() {
    return selectorObserverDebounceIntervalMs_;
  }
  /**
   * <pre>
   * SelectorObserver will wait until no DOM mutation notifications are received
   * for this amount of time to check the selectors.
   * </pre>
   *
   * <code>optional int32 selector_observer_debounce_interval_ms = 25;</code>
   * @param value The selectorObserverDebounceIntervalMs to set.
   */
  private void setSelectorObserverDebounceIntervalMs(int value) {
    bitField0_ |= 0x00080000;
    selectorObserverDebounceIntervalMs_ = value;
  }
  /**
   * <pre>
   * SelectorObserver will wait until no DOM mutation notifications are received
   * for this amount of time to check the selectors.
   * </pre>
   *
   * <code>optional int32 selector_observer_debounce_interval_ms = 25;</code>
   */
  private void clearSelectorObserverDebounceIntervalMs() {
    bitField0_ = (bitField0_ & ~0x00080000);
    selectorObserverDebounceIntervalMs_ = 0;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Next ID: 26
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ClientSettingsProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ClientSettingsProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Time between two periodic script precondition checks.
     * </pre>
     *
     * <code>optional int32 periodic_script_check_interval_ms = 1;</code>
     * @return Whether the periodicScriptCheckIntervalMs field is set.
     */
    @java.lang.Override
    public boolean hasPeriodicScriptCheckIntervalMs() {
      return instance.hasPeriodicScriptCheckIntervalMs();
    }
    /**
     * <pre>
     * Time between two periodic script precondition checks.
     * </pre>
     *
     * <code>optional int32 periodic_script_check_interval_ms = 1;</code>
     * @return The periodicScriptCheckIntervalMs.
     */
    @java.lang.Override
    public int getPeriodicScriptCheckIntervalMs() {
      return instance.getPeriodicScriptCheckIntervalMs();
    }
    /**
     * <pre>
     * Time between two periodic script precondition checks.
     * </pre>
     *
     * <code>optional int32 periodic_script_check_interval_ms = 1;</code>
     * @param value The periodicScriptCheckIntervalMs to set.
     * @return This builder for chaining.
     */
    public Builder setPeriodicScriptCheckIntervalMs(int value) {
      copyOnWrite();
      instance.setPeriodicScriptCheckIntervalMs(value);
      return this;
    }
    /**
     * <pre>
     * Time between two periodic script precondition checks.
     * </pre>
     *
     * <code>optional int32 periodic_script_check_interval_ms = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPeriodicScriptCheckIntervalMs() {
      copyOnWrite();
      instance.clearPeriodicScriptCheckIntervalMs();
      return this;
    }

    /**
     * <pre>
     * Time between two element checks in the script executor.
     * </pre>
     *
     * <code>optional int32 periodic_element_check_interval_ms = 2;</code>
     * @return Whether the periodicElementCheckIntervalMs field is set.
     */
    @java.lang.Override
    public boolean hasPeriodicElementCheckIntervalMs() {
      return instance.hasPeriodicElementCheckIntervalMs();
    }
    /**
     * <pre>
     * Time between two element checks in the script executor.
     * </pre>
     *
     * <code>optional int32 periodic_element_check_interval_ms = 2;</code>
     * @return The periodicElementCheckIntervalMs.
     */
    @java.lang.Override
    public int getPeriodicElementCheckIntervalMs() {
      return instance.getPeriodicElementCheckIntervalMs();
    }
    /**
     * <pre>
     * Time between two element checks in the script executor.
     * </pre>
     *
     * <code>optional int32 periodic_element_check_interval_ms = 2;</code>
     * @param value The periodicElementCheckIntervalMs to set.
     * @return This builder for chaining.
     */
    public Builder setPeriodicElementCheckIntervalMs(int value) {
      copyOnWrite();
      instance.setPeriodicElementCheckIntervalMs(value);
      return this;
    }
    /**
     * <pre>
     * Time between two element checks in the script executor.
     * </pre>
     *
     * <code>optional int32 periodic_element_check_interval_ms = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPeriodicElementCheckIntervalMs() {
      copyOnWrite();
      instance.clearPeriodicElementCheckIntervalMs();
      return this;
    }

    /**
     * <pre>
     * Run that many periodic checks before giving up unless something happens to
     * wake it up, such as the user touching the screen.
     * </pre>
     *
     * <code>optional int32 periodic_script_check_count = 3;</code>
     * @return Whether the periodicScriptCheckCount field is set.
     */
    @java.lang.Override
    public boolean hasPeriodicScriptCheckCount() {
      return instance.hasPeriodicScriptCheckCount();
    }
    /**
     * <pre>
     * Run that many periodic checks before giving up unless something happens to
     * wake it up, such as the user touching the screen.
     * </pre>
     *
     * <code>optional int32 periodic_script_check_count = 3;</code>
     * @return The periodicScriptCheckCount.
     */
    @java.lang.Override
    public int getPeriodicScriptCheckCount() {
      return instance.getPeriodicScriptCheckCount();
    }
    /**
     * <pre>
     * Run that many periodic checks before giving up unless something happens to
     * wake it up, such as the user touching the screen.
     * </pre>
     *
     * <code>optional int32 periodic_script_check_count = 3;</code>
     * @param value The periodicScriptCheckCount to set.
     * @return This builder for chaining.
     */
    public Builder setPeriodicScriptCheckCount(int value) {
      copyOnWrite();
      instance.setPeriodicScriptCheckCount(value);
      return this;
    }
    /**
     * <pre>
     * Run that many periodic checks before giving up unless something happens to
     * wake it up, such as the user touching the screen.
     * </pre>
     *
     * <code>optional int32 periodic_script_check_count = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearPeriodicScriptCheckCount() {
      copyOnWrite();
      instance.clearPeriodicScriptCheckCount();
      return this;
    }

    /**
     * <pre>
     * Time between two element position refreshes, when displaying highlighted
     * areas in prompt state.
     * </pre>
     *
     * <code>optional int32 element_position_update_interval_ms = 4;</code>
     * @return Whether the elementPositionUpdateIntervalMs field is set.
     */
    @java.lang.Override
    public boolean hasElementPositionUpdateIntervalMs() {
      return instance.hasElementPositionUpdateIntervalMs();
    }
    /**
     * <pre>
     * Time between two element position refreshes, when displaying highlighted
     * areas in prompt state.
     * </pre>
     *
     * <code>optional int32 element_position_update_interval_ms = 4;</code>
     * @return The elementPositionUpdateIntervalMs.
     */
    @java.lang.Override
    public int getElementPositionUpdateIntervalMs() {
      return instance.getElementPositionUpdateIntervalMs();
    }
    /**
     * <pre>
     * Time between two element position refreshes, when displaying highlighted
     * areas in prompt state.
     * </pre>
     *
     * <code>optional int32 element_position_update_interval_ms = 4;</code>
     * @param value The elementPositionUpdateIntervalMs to set.
     * @return This builder for chaining.
     */
    public Builder setElementPositionUpdateIntervalMs(int value) {
      copyOnWrite();
      instance.setElementPositionUpdateIntervalMs(value);
      return this;
    }
    /**
     * <pre>
     * Time between two element position refreshes, when displaying highlighted
     * areas in prompt state.
     * </pre>
     *
     * <code>optional int32 element_position_update_interval_ms = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearElementPositionUpdateIntervalMs() {
      copyOnWrite();
      instance.clearElementPositionUpdateIntervalMs();
      return this;
    }

    /**
     * <pre>
     * Maximum amount of time normal actions should implicitly wait for a selector
     * to show up.
     * </pre>
     *
     * <code>optional int32 short_wait_for_element_deadline_ms = 5;</code>
     * @return Whether the shortWaitForElementDeadlineMs field is set.
     */
    @java.lang.Override
    public boolean hasShortWaitForElementDeadlineMs() {
      return instance.hasShortWaitForElementDeadlineMs();
    }
    /**
     * <pre>
     * Maximum amount of time normal actions should implicitly wait for a selector
     * to show up.
     * </pre>
     *
     * <code>optional int32 short_wait_for_element_deadline_ms = 5;</code>
     * @return The shortWaitForElementDeadlineMs.
     */
    @java.lang.Override
    public int getShortWaitForElementDeadlineMs() {
      return instance.getShortWaitForElementDeadlineMs();
    }
    /**
     * <pre>
     * Maximum amount of time normal actions should implicitly wait for a selector
     * to show up.
     * </pre>
     *
     * <code>optional int32 short_wait_for_element_deadline_ms = 5;</code>
     * @param value The shortWaitForElementDeadlineMs to set.
     * @return This builder for chaining.
     */
    public Builder setShortWaitForElementDeadlineMs(int value) {
      copyOnWrite();
      instance.setShortWaitForElementDeadlineMs(value);
      return this;
    }
    /**
     * <pre>
     * Maximum amount of time normal actions should implicitly wait for a selector
     * to show up.
     * </pre>
     *
     * <code>optional int32 short_wait_for_element_deadline_ms = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearShortWaitForElementDeadlineMs() {
      copyOnWrite();
      instance.clearShortWaitForElementDeadlineMs();
      return this;
    }

    /**
     * <pre>
     * Time to wait between two checks of the box model, when waiting for an
     * element to become stable, such as before clicking.
     * </pre>
     *
     * <code>optional int32 box_model_check_interval_ms = 6;</code>
     * @return Whether the boxModelCheckIntervalMs field is set.
     */
    @java.lang.Override
    public boolean hasBoxModelCheckIntervalMs() {
      return instance.hasBoxModelCheckIntervalMs();
    }
    /**
     * <pre>
     * Time to wait between two checks of the box model, when waiting for an
     * element to become stable, such as before clicking.
     * </pre>
     *
     * <code>optional int32 box_model_check_interval_ms = 6;</code>
     * @return The boxModelCheckIntervalMs.
     */
    @java.lang.Override
    public int getBoxModelCheckIntervalMs() {
      return instance.getBoxModelCheckIntervalMs();
    }
    /**
     * <pre>
     * Time to wait between two checks of the box model, when waiting for an
     * element to become stable, such as before clicking.
     * </pre>
     *
     * <code>optional int32 box_model_check_interval_ms = 6;</code>
     * @param value The boxModelCheckIntervalMs to set.
     * @return This builder for chaining.
     */
    public Builder setBoxModelCheckIntervalMs(int value) {
      copyOnWrite();
      instance.setBoxModelCheckIntervalMs(value);
      return this;
    }
    /**
     * <pre>
     * Time to wait between two checks of the box model, when waiting for an
     * element to become stable, such as before clicking.
     * </pre>
     *
     * <code>optional int32 box_model_check_interval_ms = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearBoxModelCheckIntervalMs() {
      copyOnWrite();
      instance.clearBoxModelCheckIntervalMs();
      return this;
    }

    /**
     * <pre>
     * Maximum number of checks to run while waiting for the element position to
     * become stable.
     * </pre>
     *
     * <code>optional int32 box_model_check_count = 7;</code>
     * @return Whether the boxModelCheckCount field is set.
     */
    @java.lang.Override
    public boolean hasBoxModelCheckCount() {
      return instance.hasBoxModelCheckCount();
    }
    /**
     * <pre>
     * Maximum number of checks to run while waiting for the element position to
     * become stable.
     * </pre>
     *
     * <code>optional int32 box_model_check_count = 7;</code>
     * @return The boxModelCheckCount.
     */
    @java.lang.Override
    public int getBoxModelCheckCount() {
      return instance.getBoxModelCheckCount();
    }
    /**
     * <pre>
     * Maximum number of checks to run while waiting for the element position to
     * become stable.
     * </pre>
     *
     * <code>optional int32 box_model_check_count = 7;</code>
     * @param value The boxModelCheckCount to set.
     * @return This builder for chaining.
     */
    public Builder setBoxModelCheckCount(int value) {
      copyOnWrite();
      instance.setBoxModelCheckCount(value);
      return this;
    }
    /**
     * <pre>
     * Maximum number of checks to run while waiting for the element position to
     * become stable.
     * </pre>
     *
     * <code>optional int32 box_model_check_count = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearBoxModelCheckCount() {
      copyOnWrite();
      instance.clearBoxModelCheckCount();
      return this;
    }

    /**
     * <pre>
     * Maximum time to wait until document has reached "ready" state.
     * </pre>
     *
     * <code>optional int32 document_ready_check_timeout_ms = 20;</code>
     * @return Whether the documentReadyCheckTimeoutMs field is set.
     */
    @java.lang.Override
    public boolean hasDocumentReadyCheckTimeoutMs() {
      return instance.hasDocumentReadyCheckTimeoutMs();
    }
    /**
     * <pre>
     * Maximum time to wait until document has reached "ready" state.
     * </pre>
     *
     * <code>optional int32 document_ready_check_timeout_ms = 20;</code>
     * @return The documentReadyCheckTimeoutMs.
     */
    @java.lang.Override
    public int getDocumentReadyCheckTimeoutMs() {
      return instance.getDocumentReadyCheckTimeoutMs();
    }
    /**
     * <pre>
     * Maximum time to wait until document has reached "ready" state.
     * </pre>
     *
     * <code>optional int32 document_ready_check_timeout_ms = 20;</code>
     * @param value The documentReadyCheckTimeoutMs to set.
     * @return This builder for chaining.
     */
    public Builder setDocumentReadyCheckTimeoutMs(int value) {
      copyOnWrite();
      instance.setDocumentReadyCheckTimeoutMs(value);
      return this;
    }
    /**
     * <pre>
     * Maximum time to wait until document has reached "ready" state.
     * </pre>
     *
     * <code>optional int32 document_ready_check_timeout_ms = 20;</code>
     * @return This builder for chaining.
     */
    public Builder clearDocumentReadyCheckTimeoutMs() {
      copyOnWrite();
      instance.clearDocumentReadyCheckTimeoutMs();
      return this;
    }

    /**
     * <pre>
     * How much time to give users to tap undo when they tap a cancel button.
     * </pre>
     *
     * <code>optional int32 cancel_delay_ms = 12;</code>
     * @return Whether the cancelDelayMs field is set.
     */
    @java.lang.Override
    public boolean hasCancelDelayMs() {
      return instance.hasCancelDelayMs();
    }
    /**
     * <pre>
     * How much time to give users to tap undo when they tap a cancel button.
     * </pre>
     *
     * <code>optional int32 cancel_delay_ms = 12;</code>
     * @return The cancelDelayMs.
     */
    @java.lang.Override
    public int getCancelDelayMs() {
      return instance.getCancelDelayMs();
    }
    /**
     * <pre>
     * How much time to give users to tap undo when they tap a cancel button.
     * </pre>
     *
     * <code>optional int32 cancel_delay_ms = 12;</code>
     * @param value The cancelDelayMs to set.
     * @return This builder for chaining.
     */
    public Builder setCancelDelayMs(int value) {
      copyOnWrite();
      instance.setCancelDelayMs(value);
      return this;
    }
    /**
     * <pre>
     * How much time to give users to tap undo when they tap a cancel button.
     * </pre>
     *
     * <code>optional int32 cancel_delay_ms = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearCancelDelayMs() {
      copyOnWrite();
      instance.clearCancelDelayMs();
      return this;
    }

    /**
     * <pre>
     * If the user taps the overlay that many time within |tap_duration| turn the
     * UI off and give them |tap_shutdown_delay| to undo. If 0, unexpected taps
     * are ignored.
     * </pre>
     *
     * <code>optional int32 tap_count = 13;</code>
     * @return Whether the tapCount field is set.
     */
    @java.lang.Override
    public boolean hasTapCount() {
      return instance.hasTapCount();
    }
    /**
     * <pre>
     * If the user taps the overlay that many time within |tap_duration| turn the
     * UI off and give them |tap_shutdown_delay| to undo. If 0, unexpected taps
     * are ignored.
     * </pre>
     *
     * <code>optional int32 tap_count = 13;</code>
     * @return The tapCount.
     */
    @java.lang.Override
    public int getTapCount() {
      return instance.getTapCount();
    }
    /**
     * <pre>
     * If the user taps the overlay that many time within |tap_duration| turn the
     * UI off and give them |tap_shutdown_delay| to undo. If 0, unexpected taps
     * are ignored.
     * </pre>
     *
     * <code>optional int32 tap_count = 13;</code>
     * @param value The tapCount to set.
     * @return This builder for chaining.
     */
    public Builder setTapCount(int value) {
      copyOnWrite();
      instance.setTapCount(value);
      return this;
    }
    /**
     * <pre>
     * If the user taps the overlay that many time within |tap_duration| turn the
     * UI off and give them |tap_shutdown_delay| to undo. If 0, unexpected taps
     * are ignored.
     * </pre>
     *
     * <code>optional int32 tap_count = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearTapCount() {
      copyOnWrite();
      instance.clearTapCount();
      return this;
    }

    /**
     * <pre>
     * Reset the unexpected tap counter after that time.
     * </pre>
     *
     * <code>optional int32 tap_tracking_duration_ms = 14;</code>
     * @return Whether the tapTrackingDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasTapTrackingDurationMs() {
      return instance.hasTapTrackingDurationMs();
    }
    /**
     * <pre>
     * Reset the unexpected tap counter after that time.
     * </pre>
     *
     * <code>optional int32 tap_tracking_duration_ms = 14;</code>
     * @return The tapTrackingDurationMs.
     */
    @java.lang.Override
    public int getTapTrackingDurationMs() {
      return instance.getTapTrackingDurationMs();
    }
    /**
     * <pre>
     * Reset the unexpected tap counter after that time.
     * </pre>
     *
     * <code>optional int32 tap_tracking_duration_ms = 14;</code>
     * @param value The tapTrackingDurationMs to set.
     * @return This builder for chaining.
     */
    public Builder setTapTrackingDurationMs(int value) {
      copyOnWrite();
      instance.setTapTrackingDurationMs(value);
      return this;
    }
    /**
     * <pre>
     * Reset the unexpected tap counter after that time.
     * </pre>
     *
     * <code>optional int32 tap_tracking_duration_ms = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearTapTrackingDurationMs() {
      copyOnWrite();
      instance.clearTapTrackingDurationMs();
      return this;
    }

    /**
     * <pre>
     * How much time to give users to tap undo when after |tap_count| unexpected
     * taps where
     * </pre>
     *
     * <code>optional int32 tap_shutdown_delay_ms = 15;</code>
     * @return Whether the tapShutdownDelayMs field is set.
     */
    @java.lang.Override
    public boolean hasTapShutdownDelayMs() {
      return instance.hasTapShutdownDelayMs();
    }
    /**
     * <pre>
     * How much time to give users to tap undo when after |tap_count| unexpected
     * taps where
     * </pre>
     *
     * <code>optional int32 tap_shutdown_delay_ms = 15;</code>
     * @return The tapShutdownDelayMs.
     */
    @java.lang.Override
    public int getTapShutdownDelayMs() {
      return instance.getTapShutdownDelayMs();
    }
    /**
     * <pre>
     * How much time to give users to tap undo when after |tap_count| unexpected
     * taps where
     * </pre>
     *
     * <code>optional int32 tap_shutdown_delay_ms = 15;</code>
     * @param value The tapShutdownDelayMs to set.
     * @return This builder for chaining.
     */
    public Builder setTapShutdownDelayMs(int value) {
      copyOnWrite();
      instance.setTapShutdownDelayMs(value);
      return this;
    }
    /**
     * <pre>
     * How much time to give users to tap undo when after |tap_count| unexpected
     * taps where
     * </pre>
     *
     * <code>optional int32 tap_shutdown_delay_ms = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearTapShutdownDelayMs() {
      copyOnWrite();
      instance.clearTapShutdownDelayMs();
      return this;
    }

    /**
     * <pre>
     * Optional image drawn on top of overlays.
     * </pre>
     *
     * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
     */
    @java.lang.Override
    public boolean hasOverlayImage() {
      return instance.hasOverlayImage();
    }
    /**
     * <pre>
     * Optional image drawn on top of overlays.
     * </pre>
     *
     * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto getOverlayImage() {
      return instance.getOverlayImage();
    }
    /**
     * <pre>
     * Optional image drawn on top of overlays.
     * </pre>
     *
     * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
     */
    public Builder setOverlayImage(org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto value) {
      copyOnWrite();
      instance.setOverlayImage(value);
      return this;
      }
    /**
     * <pre>
     * Optional image drawn on top of overlays.
     * </pre>
     *
     * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
     */
    public Builder setOverlayImage(
        org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto.Builder builderForValue) {
      copyOnWrite();
      instance.setOverlayImage(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Optional image drawn on top of overlays.
     * </pre>
     *
     * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
     */
    public Builder mergeOverlayImage(org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto value) {
      copyOnWrite();
      instance.mergeOverlayImage(value);
      return this;
    }
    /**
     * <pre>
     * Optional image drawn on top of overlays.
     * </pre>
     *
     * <code>optional .autofill_assistant.OverlayImageProto overlay_image = 16;</code>
     */
    public Builder clearOverlayImage() {  copyOnWrite();
      instance.clearOverlayImage();
      return this;
    }

    /**
     * <pre>
     * Optional settings intended for integration tests.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
     */
    @java.lang.Override
    public boolean hasIntegrationTestSettings() {
      return instance.hasIntegrationTestSettings();
    }
    /**
     * <pre>
     * Optional settings intended for integration tests.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings getIntegrationTestSettings() {
      return instance.getIntegrationTestSettings();
    }
    /**
     * <pre>
     * Optional settings intended for integration tests.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
     */
    public Builder setIntegrationTestSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings value) {
      copyOnWrite();
      instance.setIntegrationTestSettings(value);
      return this;
      }
    /**
     * <pre>
     * Optional settings intended for integration tests.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
     */
    public Builder setIntegrationTestSettings(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings.Builder builderForValue) {
      copyOnWrite();
      instance.setIntegrationTestSettings(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Optional settings intended for integration tests.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
     */
    public Builder mergeIntegrationTestSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.IntegrationTestSettings value) {
      copyOnWrite();
      instance.mergeIntegrationTestSettings(value);
      return this;
    }
    /**
     * <pre>
     * Optional settings intended for integration tests.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientSettingsProto.IntegrationTestSettings integration_test_settings = 17;</code>
     */
    public Builder clearIntegrationTestSettings() {  copyOnWrite();
      instance.clearIntegrationTestSettings();
      return this;
    }

    /**
     * <pre>
     * Optional setting defining the size of the bottom sheet when Talkback is
     * enabled as a fraction of the available height. When set, the bottomsheet
     * will stop resizing automatically in talkback mode. It will always have the
     * specified size instead.
     * </pre>
     *
     * <code>optional float talkback_sheet_size_fraction = 18;</code>
     * @return Whether the talkbackSheetSizeFraction field is set.
     */
    @java.lang.Override
    public boolean hasTalkbackSheetSizeFraction() {
      return instance.hasTalkbackSheetSizeFraction();
    }
    /**
     * <pre>
     * Optional setting defining the size of the bottom sheet when Talkback is
     * enabled as a fraction of the available height. When set, the bottomsheet
     * will stop resizing automatically in talkback mode. It will always have the
     * specified size instead.
     * </pre>
     *
     * <code>optional float talkback_sheet_size_fraction = 18;</code>
     * @return The talkbackSheetSizeFraction.
     */
    @java.lang.Override
    public float getTalkbackSheetSizeFraction() {
      return instance.getTalkbackSheetSizeFraction();
    }
    /**
     * <pre>
     * Optional setting defining the size of the bottom sheet when Talkback is
     * enabled as a fraction of the available height. When set, the bottomsheet
     * will stop resizing automatically in talkback mode. It will always have the
     * specified size instead.
     * </pre>
     *
     * <code>optional float talkback_sheet_size_fraction = 18;</code>
     * @param value The talkbackSheetSizeFraction to set.
     * @return This builder for chaining.
     */
    public Builder setTalkbackSheetSizeFraction(float value) {
      copyOnWrite();
      instance.setTalkbackSheetSizeFraction(value);
      return this;
    }
    /**
     * <pre>
     * Optional setting defining the size of the bottom sheet when Talkback is
     * enabled as a fraction of the available height. When set, the bottomsheet
     * will stop resizing automatically in talkback mode. It will always have the
     * specified size instead.
     * </pre>
     *
     * <code>optional float talkback_sheet_size_fraction = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearTalkbackSheetSizeFraction() {
      copyOnWrite();
      instance.clearTalkbackSheetSizeFraction();
      return this;
    }

    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
     */
    @java.lang.Override
    public boolean hasBackButtonSettings() {
      return instance.hasBackButtonSettings();
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings getBackButtonSettings() {
      return instance.getBackButtonSettings();
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
     */
    public Builder setBackButtonSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings value) {
      copyOnWrite();
      instance.setBackButtonSettings(value);
      return this;
      }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
     */
    public Builder setBackButtonSettings(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings.Builder builderForValue) {
      copyOnWrite();
      instance.setBackButtonSettings(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
     */
    public Builder mergeBackButtonSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.BackButtonSettings value) {
      copyOnWrite();
      instance.mergeBackButtonSettings(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.BackButtonSettings back_button_settings = 19;</code>
     */
    public Builder clearBackButtonSettings() {  copyOnWrite();
      instance.clearBackButtonSettings();
      return this;
    }

    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
     */
    @java.lang.Override
    public boolean hasSlowWarningSettings() {
      return instance.hasSlowWarningSettings();
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings getSlowWarningSettings() {
      return instance.getSlowWarningSettings();
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
     */
    public Builder setSlowWarningSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings value) {
      copyOnWrite();
      instance.setSlowWarningSettings(value);
      return this;
      }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
     */
    public Builder setSlowWarningSettings(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings.Builder builderForValue) {
      copyOnWrite();
      instance.setSlowWarningSettings(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
     */
    public Builder mergeSlowWarningSettings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.SlowWarningSettings value) {
      copyOnWrite();
      instance.mergeSlowWarningSettings(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ClientSettingsProto.SlowWarningSettings slow_warning_settings = 21;</code>
     */
    public Builder clearSlowWarningSettings() {  copyOnWrite();
      instance.clearSlowWarningSettings();
      return this;
    }

    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString> getDisplayStringsList() {
      return java.util.Collections.unmodifiableList(
          instance.getDisplayStringsList());
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    @java.lang.Override
    public int getDisplayStringsCount() {
      return instance.getDisplayStringsCount();
    }/**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString getDisplayStrings(int index) {
      return instance.getDisplayStrings(index);
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder setDisplayStrings(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString value) {
      copyOnWrite();
      instance.setDisplayStrings(index, value);
      return this;
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder setDisplayStrings(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString.Builder builderForValue) {
      copyOnWrite();
      instance.setDisplayStrings(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder addDisplayStrings(org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString value) {
      copyOnWrite();
      instance.addDisplayStrings(value);
      return this;
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder addDisplayStrings(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString value) {
      copyOnWrite();
      instance.addDisplayStrings(index, value);
      return this;
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder addDisplayStrings(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString.Builder builderForValue) {
      copyOnWrite();
      instance.addDisplayStrings(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder addDisplayStrings(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString.Builder builderForValue) {
      copyOnWrite();
      instance.addDisplayStrings(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder addAllDisplayStrings(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString> values) {
      copyOnWrite();
      instance.addAllDisplayStrings(values);
      return this;
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder clearDisplayStrings() {
      copyOnWrite();
      instance.clearDisplayStrings();
      return this;
    }
    /**
     * <pre>
     * A map of display strings keyed by the ID. Note that the locale of these
     * strings must be provided in |display_strings_locale|. These strings are
     * ignored if locale is not provided.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ClientSettingsProto.DisplayString display_strings = 22;</code>
     */
    public Builder removeDisplayStrings(int index) {
      copyOnWrite();
      instance.removeDisplayStrings(index);
      return this;
    }

    /**
     * <pre>
     * The locale of |display_strings|. If |display_strings_locale| is not
     * provided, we ignore |display_strings|. When locale
     * is updated/switched to a new locale, we replace the set of
     * |display_strings|, even if empty. The provided locale should be in BCP 47
     * format, e.g. "en-US".
     * </pre>
     *
     * <code>optional string display_strings_locale = 23;</code>
     * @return Whether the displayStringsLocale field is set.
     */
    @java.lang.Override
    public boolean hasDisplayStringsLocale() {
      return instance.hasDisplayStringsLocale();
    }
    /**
     * <pre>
     * The locale of |display_strings|. If |display_strings_locale| is not
     * provided, we ignore |display_strings|. When locale
     * is updated/switched to a new locale, we replace the set of
     * |display_strings|, even if empty. The provided locale should be in BCP 47
     * format, e.g. "en-US".
     * </pre>
     *
     * <code>optional string display_strings_locale = 23;</code>
     * @return The displayStringsLocale.
     */
    @java.lang.Override
    public java.lang.String getDisplayStringsLocale() {
      return instance.getDisplayStringsLocale();
    }
    /**
     * <pre>
     * The locale of |display_strings|. If |display_strings_locale| is not
     * provided, we ignore |display_strings|. When locale
     * is updated/switched to a new locale, we replace the set of
     * |display_strings|, even if empty. The provided locale should be in BCP 47
     * format, e.g. "en-US".
     * </pre>
     *
     * <code>optional string display_strings_locale = 23;</code>
     * @return The bytes for displayStringsLocale.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayStringsLocaleBytes() {
      return instance.getDisplayStringsLocaleBytes();
    }
    /**
     * <pre>
     * The locale of |display_strings|. If |display_strings_locale| is not
     * provided, we ignore |display_strings|. When locale
     * is updated/switched to a new locale, we replace the set of
     * |display_strings|, even if empty. The provided locale should be in BCP 47
     * format, e.g. "en-US".
     * </pre>
     *
     * <code>optional string display_strings_locale = 23;</code>
     * @param value The displayStringsLocale to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayStringsLocale(
        java.lang.String value) {
      copyOnWrite();
      instance.setDisplayStringsLocale(value);
      return this;
    }
    /**
     * <pre>
     * The locale of |display_strings|. If |display_strings_locale| is not
     * provided, we ignore |display_strings|. When locale
     * is updated/switched to a new locale, we replace the set of
     * |display_strings|, even if empty. The provided locale should be in BCP 47
     * format, e.g. "en-US".
     * </pre>
     *
     * <code>optional string display_strings_locale = 23;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisplayStringsLocale() {
      copyOnWrite();
      instance.clearDisplayStringsLocale();
      return this;
    }
    /**
     * <pre>
     * The locale of |display_strings|. If |display_strings_locale| is not
     * provided, we ignore |display_strings|. When locale
     * is updated/switched to a new locale, we replace the set of
     * |display_strings|, even if empty. The provided locale should be in BCP 47
     * format, e.g. "en-US".
     * </pre>
     *
     * <code>optional string display_strings_locale = 23;</code>
     * @param value The bytes for displayStringsLocale to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayStringsLocaleBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDisplayStringsLocaleBytes(value);
      return this;
    }

    /**
     * <pre>
     * Extra time SelectorObserver has to finish. If it takes longer than
     * max_wait_time + extra_timeout (this value) it assumes something went
     * wrong and fails with a |TIMED_OUT| error.
     * </pre>
     *
     * <code>optional int32 selector_observer_extra_timeout_ms = 24;</code>
     * @return Whether the selectorObserverExtraTimeoutMs field is set.
     */
    @java.lang.Override
    public boolean hasSelectorObserverExtraTimeoutMs() {
      return instance.hasSelectorObserverExtraTimeoutMs();
    }
    /**
     * <pre>
     * Extra time SelectorObserver has to finish. If it takes longer than
     * max_wait_time + extra_timeout (this value) it assumes something went
     * wrong and fails with a |TIMED_OUT| error.
     * </pre>
     *
     * <code>optional int32 selector_observer_extra_timeout_ms = 24;</code>
     * @return The selectorObserverExtraTimeoutMs.
     */
    @java.lang.Override
    public int getSelectorObserverExtraTimeoutMs() {
      return instance.getSelectorObserverExtraTimeoutMs();
    }
    /**
     * <pre>
     * Extra time SelectorObserver has to finish. If it takes longer than
     * max_wait_time + extra_timeout (this value) it assumes something went
     * wrong and fails with a |TIMED_OUT| error.
     * </pre>
     *
     * <code>optional int32 selector_observer_extra_timeout_ms = 24;</code>
     * @param value The selectorObserverExtraTimeoutMs to set.
     * @return This builder for chaining.
     */
    public Builder setSelectorObserverExtraTimeoutMs(int value) {
      copyOnWrite();
      instance.setSelectorObserverExtraTimeoutMs(value);
      return this;
    }
    /**
     * <pre>
     * Extra time SelectorObserver has to finish. If it takes longer than
     * max_wait_time + extra_timeout (this value) it assumes something went
     * wrong and fails with a |TIMED_OUT| error.
     * </pre>
     *
     * <code>optional int32 selector_observer_extra_timeout_ms = 24;</code>
     * @return This builder for chaining.
     */
    public Builder clearSelectorObserverExtraTimeoutMs() {
      copyOnWrite();
      instance.clearSelectorObserverExtraTimeoutMs();
      return this;
    }

    /**
     * <pre>
     * SelectorObserver will wait until no DOM mutation notifications are received
     * for this amount of time to check the selectors.
     * </pre>
     *
     * <code>optional int32 selector_observer_debounce_interval_ms = 25;</code>
     * @return Whether the selectorObserverDebounceIntervalMs field is set.
     */
    @java.lang.Override
    public boolean hasSelectorObserverDebounceIntervalMs() {
      return instance.hasSelectorObserverDebounceIntervalMs();
    }
    /**
     * <pre>
     * SelectorObserver will wait until no DOM mutation notifications are received
     * for this amount of time to check the selectors.
     * </pre>
     *
     * <code>optional int32 selector_observer_debounce_interval_ms = 25;</code>
     * @return The selectorObserverDebounceIntervalMs.
     */
    @java.lang.Override
    public int getSelectorObserverDebounceIntervalMs() {
      return instance.getSelectorObserverDebounceIntervalMs();
    }
    /**
     * <pre>
     * SelectorObserver will wait until no DOM mutation notifications are received
     * for this amount of time to check the selectors.
     * </pre>
     *
     * <code>optional int32 selector_observer_debounce_interval_ms = 25;</code>
     * @param value The selectorObserverDebounceIntervalMs to set.
     * @return This builder for chaining.
     */
    public Builder setSelectorObserverDebounceIntervalMs(int value) {
      copyOnWrite();
      instance.setSelectorObserverDebounceIntervalMs(value);
      return this;
    }
    /**
     * <pre>
     * SelectorObserver will wait until no DOM mutation notifications are received
     * for this amount of time to check the selectors.
     * </pre>
     *
     * <code>optional int32 selector_observer_debounce_interval_ms = 25;</code>
     * @return This builder for chaining.
     */
    public Builder clearSelectorObserverDebounceIntervalMs() {
      copyOnWrite();
      instance.clearSelectorObserverDebounceIntervalMs();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ClientSettingsProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "periodicScriptCheckIntervalMs_",
            "periodicElementCheckIntervalMs_",
            "periodicScriptCheckCount_",
            "elementPositionUpdateIntervalMs_",
            "shortWaitForElementDeadlineMs_",
            "boxModelCheckIntervalMs_",
            "boxModelCheckCount_",
            "cancelDelayMs_",
            "tapCount_",
            "tapTrackingDurationMs_",
            "tapShutdownDelayMs_",
            "overlayImage_",
            "integrationTestSettings_",
            "talkbackSheetSizeFraction_",
            "backButtonSettings_",
            "documentReadyCheckTimeoutMs_",
            "slowWarningSettings_",
            "displayStrings_",
            org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.DisplayString.class,
            "displayStringsLocale_",
            "selectorObserverExtraTimeoutMs_",
            "selectorObserverDebounceIntervalMs_",
          };
          java.lang.String info =
              "\u0001\u0015\u0000\u0001\u0001\u0019\u0015\u0000\u0001\u0000\u0001\u1004\u0000\u0002" +
              "\u1004\u0001\u0003\u1004\u0002\u0004\u1004\u0003\u0005\u1004\u0004\u0006\u1004\u0005" +
              "\u0007\u1004\u0006\f\u1004\b\r\u1004\t\u000e\u1004\n\u000f\u1004\u000b\u0010\u1009" +
              "\f\u0011\u1009\r\u0012\u1001\u000e\u0013\u1009\u000f\u0014\u1004\u0007\u0015\u1009" +
              "\u0010\u0016\u001b\u0017\u1008\u0011\u0018\u1004\u0012\u0019\u1004\u0013";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ClientSettingsProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto DEFAULT_INSTANCE;
  static {
    ClientSettingsProto defaultInstance = new ClientSettingsProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ClientSettingsProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ClientSettingsProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ClientSettingsProto> PARSER;

  public static com.google.protobuf.Parser<ClientSettingsProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

