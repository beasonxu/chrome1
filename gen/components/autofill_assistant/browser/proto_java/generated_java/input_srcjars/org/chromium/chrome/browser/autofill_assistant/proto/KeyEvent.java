// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/action_value.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * A key event, for definition see here:
 * https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.KeyEvent}
 */
public  final class KeyEvent extends
    com.google.protobuf.GeneratedMessageLite<
        KeyEvent, KeyEvent.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.KeyEvent)
    KeyEventOrBuilder {
  private KeyEvent() {
    code_ = "";
    text_ = "";
    key_ = "";
    command_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  private int bitField0_;
  public static final int CODE_FIELD_NUMBER = 2;
  private java.lang.String code_;
  /**
   * <pre>
   * Unique DOM defined string value for each physical key (e.g., 'KeyA').
   * </pre>
   *
   * <code>optional string code = 2;</code>
   * @return Whether the code field is set.
   */
  @java.lang.Override
  public boolean hasCode() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Unique DOM defined string value for each physical key (e.g., 'KeyA').
   * </pre>
   *
   * <code>optional string code = 2;</code>
   * @return The code.
   */
  @java.lang.Override
  public java.lang.String getCode() {
    return code_;
  }
  /**
   * <pre>
   * Unique DOM defined string value for each physical key (e.g., 'KeyA').
   * </pre>
   *
   * <code>optional string code = 2;</code>
   * @return The bytes for code.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCodeBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(code_);
  }
  /**
   * <pre>
   * Unique DOM defined string value for each physical key (e.g., 'KeyA').
   * </pre>
   *
   * <code>optional string code = 2;</code>
   * @param value The code to set.
   */
  private void setCode(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    code_ = value;
  }
  /**
   * <pre>
   * Unique DOM defined string value for each physical key (e.g., 'KeyA').
   * </pre>
   *
   * <code>optional string code = 2;</code>
   */
  private void clearCode() {
    bitField0_ = (bitField0_ & ~0x00000001);
    code_ = getDefaultInstance().getCode();
  }
  /**
   * <pre>
   * Unique DOM defined string value for each physical key (e.g., 'KeyA').
   * </pre>
   *
   * <code>optional string code = 2;</code>
   * @param value The bytes for code to set.
   */
  private void setCodeBytes(
      com.google.protobuf.ByteString value) {
    code_ = value.toStringUtf8();
    bitField0_ |= 0x00000001;
  }

  public static final int TEXT_FIELD_NUMBER = 3;
  private java.lang.String text_;
  /**
   * <pre>
   * Text as generated by processing a virtual key code with a keyboard layout.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   * @return Whether the text field is set.
   */
  @java.lang.Override
  public boolean hasText() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Text as generated by processing a virtual key code with a keyboard layout.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   * @return The text.
   */
  @java.lang.Override
  public java.lang.String getText() {
    return text_;
  }
  /**
   * <pre>
   * Text as generated by processing a virtual key code with a keyboard layout.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   * @return The bytes for text.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(text_);
  }
  /**
   * <pre>
   * Text as generated by processing a virtual key code with a keyboard layout.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   * @param value The text to set.
   */
  private void setText(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000002;
    text_ = value;
  }
  /**
   * <pre>
   * Text as generated by processing a virtual key code with a keyboard layout.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   */
  private void clearText() {
    bitField0_ = (bitField0_ & ~0x00000002);
    text_ = getDefaultInstance().getText();
  }
  /**
   * <pre>
   * Text as generated by processing a virtual key code with a keyboard layout.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   * @param value The bytes for text to set.
   */
  private void setTextBytes(
      com.google.protobuf.ByteString value) {
    text_ = value.toStringUtf8();
    bitField0_ |= 0x00000002;
  }

  public static final int KEY_FIELD_NUMBER = 4;
  private java.lang.String key_;
  /**
   * <pre>
   * Unique DOM defined string value describing the meaning of the key in the
   * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
   * </pre>
   *
   * <code>optional string key = 4;</code>
   * @return Whether the key field is set.
   */
  @java.lang.Override
  public boolean hasKey() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Unique DOM defined string value describing the meaning of the key in the
   * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
   * </pre>
   *
   * <code>optional string key = 4;</code>
   * @return The key.
   */
  @java.lang.Override
  public java.lang.String getKey() {
    return key_;
  }
  /**
   * <pre>
   * Unique DOM defined string value describing the meaning of the key in the
   * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
   * </pre>
   *
   * <code>optional string key = 4;</code>
   * @return The bytes for key.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getKeyBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(key_);
  }
  /**
   * <pre>
   * Unique DOM defined string value describing the meaning of the key in the
   * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
   * </pre>
   *
   * <code>optional string key = 4;</code>
   * @param value The key to set.
   */
  private void setKey(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000004;
    key_ = value;
  }
  /**
   * <pre>
   * Unique DOM defined string value describing the meaning of the key in the
   * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
   * </pre>
   *
   * <code>optional string key = 4;</code>
   */
  private void clearKey() {
    bitField0_ = (bitField0_ & ~0x00000004);
    key_ = getDefaultInstance().getKey();
  }
  /**
   * <pre>
   * Unique DOM defined string value describing the meaning of the key in the
   * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
   * </pre>
   *
   * <code>optional string key = 4;</code>
   * @param value The bytes for key to set.
   */
  private void setKeyBytes(
      com.google.protobuf.ByteString value) {
    key_ = value.toStringUtf8();
    bitField0_ |= 0x00000004;
  }

  public static final int COMMAND_FIELD_NUMBER = 5;
  private com.google.protobuf.Internal.ProtobufList<java.lang.String> command_;
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   * @return A list containing the command.
   */
  @java.lang.Override
  public java.util.List<java.lang.String> getCommandList() {
    return command_;
  }
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   * @return The count of command.
   */
  @java.lang.Override
  public int getCommandCount() {
    return command_.size();
  }
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   * @param index The index of the element to return.
   * @return The command at the given index.
   */
  @java.lang.Override
  public java.lang.String getCommand(int index) {
    return command_.get(index);
  }
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the command at the given index.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCommandBytes(int index) {
    return com.google.protobuf.ByteString.copyFromUtf8(
        command_.get(index));
  }
  private void ensureCommandIsMutable() {
    com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
        command_;  if (!tmp.isModifiable()) {
      command_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   * @param index The index to set the value at.
   * @param value The command to set.
   */
  private void setCommand(
      int index, java.lang.String value) {
    value.getClass();
  ensureCommandIsMutable();
    command_.set(index, value);
  }
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   * @param value The command to add.
   */
  private void addCommand(
      java.lang.String value) {
    value.getClass();
  ensureCommandIsMutable();
    command_.add(value);
  }
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   * @param values The command to add.
   */
  private void addAllCommand(
      java.lang.Iterable<java.lang.String> values) {
    ensureCommandIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, command_);
  }
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   */
  private void clearCommand() {
    command_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  /**
   * <pre>
   * Editing commands to send with the key event (e.g., 'selectAll').
   * The list of commands can be found here:
   * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
   * </pre>
   *
   * <code>repeated string command = 5;</code>
   * @param value The bytes of the command to add.
   */
  private void addCommandBytes(
      com.google.protobuf.ByteString value) {
    ensureCommandIsMutable();
    command_.add(value.toStringUtf8());
  }

  public static final int KEY_CODE_FIELD_NUMBER = 6;
  private int keyCode_;
  /**
   * <pre>
   * Legacy keyCode for the KeyEvent:
   * https://w3c.github.io/uievents/#dom-keyboardevent-keycode
   * This is populated on a best-effort basis, with some characters mapped
   * assuming content expects US English layout input, as specified by:
   * https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
   * VKEY_UNKNOWN otherwise.
   * </pre>
   *
   * <code>optional int32 key_code = 6;</code>
   * @return Whether the keyCode field is set.
   */
  @java.lang.Override
  public boolean hasKeyCode() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Legacy keyCode for the KeyEvent:
   * https://w3c.github.io/uievents/#dom-keyboardevent-keycode
   * This is populated on a best-effort basis, with some characters mapped
   * assuming content expects US English layout input, as specified by:
   * https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
   * VKEY_UNKNOWN otherwise.
   * </pre>
   *
   * <code>optional int32 key_code = 6;</code>
   * @return The keyCode.
   */
  @java.lang.Override
  public int getKeyCode() {
    return keyCode_;
  }
  /**
   * <pre>
   * Legacy keyCode for the KeyEvent:
   * https://w3c.github.io/uievents/#dom-keyboardevent-keycode
   * This is populated on a best-effort basis, with some characters mapped
   * assuming content expects US English layout input, as specified by:
   * https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
   * VKEY_UNKNOWN otherwise.
   * </pre>
   *
   * <code>optional int32 key_code = 6;</code>
   * @param value The keyCode to set.
   */
  private void setKeyCode(int value) {
    bitField0_ |= 0x00000008;
    keyCode_ = value;
  }
  /**
   * <pre>
   * Legacy keyCode for the KeyEvent:
   * https://w3c.github.io/uievents/#dom-keyboardevent-keycode
   * This is populated on a best-effort basis, with some characters mapped
   * assuming content expects US English layout input, as specified by:
   * https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
   * VKEY_UNKNOWN otherwise.
   * </pre>
   *
   * <code>optional int32 key_code = 6;</code>
   */
  private void clearKeyCode() {
    bitField0_ = (bitField0_ & ~0x00000008);
    keyCode_ = 0;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A key event, for definition see here:
   * https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.KeyEvent}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.KeyEvent)
      org.chromium.chrome.browser.autofill_assistant.proto.KeyEventOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Unique DOM defined string value for each physical key (e.g., 'KeyA').
     * </pre>
     *
     * <code>optional string code = 2;</code>
     * @return Whether the code field is set.
     */
    @java.lang.Override
    public boolean hasCode() {
      return instance.hasCode();
    }
    /**
     * <pre>
     * Unique DOM defined string value for each physical key (e.g., 'KeyA').
     * </pre>
     *
     * <code>optional string code = 2;</code>
     * @return The code.
     */
    @java.lang.Override
    public java.lang.String getCode() {
      return instance.getCode();
    }
    /**
     * <pre>
     * Unique DOM defined string value for each physical key (e.g., 'KeyA').
     * </pre>
     *
     * <code>optional string code = 2;</code>
     * @return The bytes for code.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCodeBytes() {
      return instance.getCodeBytes();
    }
    /**
     * <pre>
     * Unique DOM defined string value for each physical key (e.g., 'KeyA').
     * </pre>
     *
     * <code>optional string code = 2;</code>
     * @param value The code to set.
     * @return This builder for chaining.
     */
    public Builder setCode(
        java.lang.String value) {
      copyOnWrite();
      instance.setCode(value);
      return this;
    }
    /**
     * <pre>
     * Unique DOM defined string value for each physical key (e.g., 'KeyA').
     * </pre>
     *
     * <code>optional string code = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCode() {
      copyOnWrite();
      instance.clearCode();
      return this;
    }
    /**
     * <pre>
     * Unique DOM defined string value for each physical key (e.g., 'KeyA').
     * </pre>
     *
     * <code>optional string code = 2;</code>
     * @param value The bytes for code to set.
     * @return This builder for chaining.
     */
    public Builder setCodeBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCodeBytes(value);
      return this;
    }

    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard layout.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     * @return Whether the text field is set.
     */
    @java.lang.Override
    public boolean hasText() {
      return instance.hasText();
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard layout.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     * @return The text.
     */
    @java.lang.Override
    public java.lang.String getText() {
      return instance.getText();
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard layout.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     * @return The bytes for text.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTextBytes() {
      return instance.getTextBytes();
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard layout.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     * @param value The text to set.
     * @return This builder for chaining.
     */
    public Builder setText(
        java.lang.String value) {
      copyOnWrite();
      instance.setText(value);
      return this;
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard layout.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearText() {
      copyOnWrite();
      instance.clearText();
      return this;
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard layout.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     * @param value The bytes for text to set.
     * @return This builder for chaining.
     */
    public Builder setTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Unique DOM defined string value describing the meaning of the key in the
     * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
     * </pre>
     *
     * <code>optional string key = 4;</code>
     * @return Whether the key field is set.
     */
    @java.lang.Override
    public boolean hasKey() {
      return instance.hasKey();
    }
    /**
     * <pre>
     * Unique DOM defined string value describing the meaning of the key in the
     * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
     * </pre>
     *
     * <code>optional string key = 4;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      return instance.getKey();
    }
    /**
     * <pre>
     * Unique DOM defined string value describing the meaning of the key in the
     * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
     * </pre>
     *
     * <code>optional string key = 4;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      return instance.getKeyBytes();
    }
    /**
     * <pre>
     * Unique DOM defined string value describing the meaning of the key in the
     * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
     * </pre>
     *
     * <code>optional string key = 4;</code>
     * @param value The key to set.
     * @return This builder for chaining.
     */
    public Builder setKey(
        java.lang.String value) {
      copyOnWrite();
      instance.setKey(value);
      return this;
    }
    /**
     * <pre>
     * Unique DOM defined string value describing the meaning of the key in the
     * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
     * </pre>
     *
     * <code>optional string key = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearKey() {
      copyOnWrite();
      instance.clearKey();
      return this;
    }
    /**
     * <pre>
     * Unique DOM defined string value describing the meaning of the key in the
     * context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
     * </pre>
     *
     * <code>optional string key = 4;</code>
     * @param value The bytes for key to set.
     * @return This builder for chaining.
     */
    public Builder setKeyBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setKeyBytes(value);
      return this;
    }

    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @return A list containing the command.
     */
    @java.lang.Override
    public java.util.List<java.lang.String>
        getCommandList() {
      return java.util.Collections.unmodifiableList(
          instance.getCommandList());
    }
    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @return The count of command.
     */
    @java.lang.Override
    public int getCommandCount() {
      return instance.getCommandCount();
    }
    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @param index The index of the element to return.
     * @return The command at the given index.
     */
    @java.lang.Override
    public java.lang.String getCommand(int index) {
      return instance.getCommand(index);
    }
    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the command at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCommandBytes(int index) {
      return instance.getCommandBytes(index);
    }
    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @param index The index to set the value at.
     * @param value The command to set.
     * @return This builder for chaining.
     */
    public Builder setCommand(
        int index, java.lang.String value) {
      copyOnWrite();
      instance.setCommand(index, value);
      return this;
    }
    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @param value The command to add.
     * @return This builder for chaining.
     */
    public Builder addCommand(
        java.lang.String value) {
      copyOnWrite();
      instance.addCommand(value);
      return this;
    }
    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @param values The command to add.
     * @return This builder for chaining.
     */
    public Builder addAllCommand(
        java.lang.Iterable<java.lang.String> values) {
      copyOnWrite();
      instance.addAllCommand(values);
      return this;
    }
    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearCommand() {
      copyOnWrite();
      instance.clearCommand();
      return this;
    }
    /**
     * <pre>
     * Editing commands to send with the key event (e.g., 'selectAll').
     * The list of commands can be found here:
     * https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
     * </pre>
     *
     * <code>repeated string command = 5;</code>
     * @param value The bytes of the command to add.
     * @return This builder for chaining.
     */
    public Builder addCommandBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addCommandBytes(value);
      return this;
    }

    /**
     * <pre>
     * Legacy keyCode for the KeyEvent:
     * https://w3c.github.io/uievents/#dom-keyboardevent-keycode
     * This is populated on a best-effort basis, with some characters mapped
     * assuming content expects US English layout input, as specified by:
     * https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
     * VKEY_UNKNOWN otherwise.
     * </pre>
     *
     * <code>optional int32 key_code = 6;</code>
     * @return Whether the keyCode field is set.
     */
    @java.lang.Override
    public boolean hasKeyCode() {
      return instance.hasKeyCode();
    }
    /**
     * <pre>
     * Legacy keyCode for the KeyEvent:
     * https://w3c.github.io/uievents/#dom-keyboardevent-keycode
     * This is populated on a best-effort basis, with some characters mapped
     * assuming content expects US English layout input, as specified by:
     * https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
     * VKEY_UNKNOWN otherwise.
     * </pre>
     *
     * <code>optional int32 key_code = 6;</code>
     * @return The keyCode.
     */
    @java.lang.Override
    public int getKeyCode() {
      return instance.getKeyCode();
    }
    /**
     * <pre>
     * Legacy keyCode for the KeyEvent:
     * https://w3c.github.io/uievents/#dom-keyboardevent-keycode
     * This is populated on a best-effort basis, with some characters mapped
     * assuming content expects US English layout input, as specified by:
     * https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
     * VKEY_UNKNOWN otherwise.
     * </pre>
     *
     * <code>optional int32 key_code = 6;</code>
     * @param value The keyCode to set.
     * @return This builder for chaining.
     */
    public Builder setKeyCode(int value) {
      copyOnWrite();
      instance.setKeyCode(value);
      return this;
    }
    /**
     * <pre>
     * Legacy keyCode for the KeyEvent:
     * https://w3c.github.io/uievents/#dom-keyboardevent-keycode
     * This is populated on a best-effort basis, with some characters mapped
     * assuming content expects US English layout input, as specified by:
     * https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
     * VKEY_UNKNOWN otherwise.
     * </pre>
     *
     * <code>optional int32 key_code = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyCode() {
      copyOnWrite();
      instance.clearKeyCode();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.KeyEvent)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "code_",
            "text_",
            "key_",
            "command_",
            "keyCode_",
          };
          java.lang.String info =
              "\u0001\u0005\u0000\u0001\u0002\u0006\u0005\u0000\u0001\u0000\u0002\u1008\u0000\u0003" +
              "\u1008\u0001\u0004\u1008\u0002\u0005\u001a\u0006\u1004\u0003";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.KeyEvent)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent DEFAULT_INSTANCE;
  static {
    KeyEvent defaultInstance = new KeyEvent();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      KeyEvent.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.KeyEvent getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<KeyEvent> PARSER;

  public static com.google.protobuf.Parser<KeyEvent> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

