// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/model.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

public interface ChipProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:autofill_assistant.ChipProto)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The type of the chip.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipType type = 1;</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <pre>
   * The type of the chip.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipType type = 1;</code>
   * @return The type.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.ChipType getType();

  /**
   * <pre>
   * The icon shown on the chip. Not required if text is set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
   * @return Whether the icon field is set.
   */
  boolean hasIcon();
  /**
   * <pre>
   * The icon shown on the chip. Not required if text is set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
   * @return The icon.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon getIcon();

  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   * @return Whether the text field is set.
   */
  boolean hasText();
  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   * @return The text.
   */
  java.lang.String getText();
  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   * @return The bytes for text.
   */
  com.google.protobuf.ByteString
      getTextBytes();

  /**
   * <pre>
   * Whether the chip is sticky. When the bottom sheet is configured with the
   * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
   * sheet is minimized, the first sticky action will be displayed instead of
   * the profile icon.
   * </pre>
   *
   * <code>optional bool sticky = 4;</code>
   * @return Whether the sticky field is set.
   */
  boolean hasSticky();
  /**
   * <pre>
   * Whether the chip is sticky. When the bottom sheet is configured with the
   * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
   * sheet is minimized, the first sticky action will be displayed instead of
   * the profile icon.
   * </pre>
   *
   * <code>optional bool sticky = 4;</code>
   * @return The sticky.
   */
  boolean getSticky();

  /**
   * <pre>
   * The content description for this chip. There are three possible states:
   * - unset: the content description will be inferred from the chip text and/or
   * the chip icon.
   * - set to empty string: this chip is not important for a11y.
   * - set to non-empty string: the chip will have the specified content
   * description.
   * </pre>
   *
   * <code>optional string content_description = 5;</code>
   * @return Whether the contentDescription field is set.
   */
  boolean hasContentDescription();
  /**
   * <pre>
   * The content description for this chip. There are three possible states:
   * - unset: the content description will be inferred from the chip text and/or
   * the chip icon.
   * - set to empty string: this chip is not important for a11y.
   * - set to non-empty string: the chip will have the specified content
   * description.
   * </pre>
   *
   * <code>optional string content_description = 5;</code>
   * @return The contentDescription.
   */
  java.lang.String getContentDescription();
  /**
   * <pre>
   * The content description for this chip. There are three possible states:
   * - unset: the content description will be inferred from the chip text and/or
   * the chip icon.
   * - set to empty string: this chip is not important for a11y.
   * - set to non-empty string: the chip will have the specified content
   * description.
   * </pre>
   *
   * <code>optional string content_description = 5;</code>
   * @return The bytes for contentDescription.
   */
  com.google.protobuf.ByteString
      getContentDescriptionBytes();
}
