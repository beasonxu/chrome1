// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/model.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Next Id: 43
 * </pre>
 *
 * Protobuf enum {@code autofill_assistant.ProcessedActionStatusProto}
 */
public enum ProcessedActionStatusProto
    implements com.google.protobuf.Internal.EnumLite {
  /**
   * <code>UNKNOWN_ACTION_STATUS = 0;</code>
   */
  UNKNOWN_ACTION_STATUS(0),
  /**
   * <pre>
   * Element could not be found.
   * </pre>
   *
   * <code>ELEMENT_RESOLUTION_FAILED = 1;</code>
   */
  ELEMENT_RESOLUTION_FAILED(1),
  /**
   * <pre>
   * The action was applied successfully.
   * </pre>
   *
   * <code>ACTION_APPLIED = 2;</code>
   */
  ACTION_APPLIED(2),
  /**
   * <pre>
   * The action failed (generic error).
   * This usually means that the client needs to be fixed: either the error
   * should be assigned a more specific error code, or a bug in the client code
   * needs to be fixed.
   * ProcessedActionProto.UnexpectedErrorInfoProto contains more details.
   * </pre>
   *
   * <code>OTHER_ACTION_STATUS = 3;</code>
   */
  OTHER_ACTION_STATUS(3),
  /**
   * <pre>
   * The action failed to collect the requested user data.
   * </pre>
   *
   * <code>COLLECT_USER_DATA_ERROR = 4;</code>
   */
  COLLECT_USER_DATA_ERROR(4),
  /**
   * <pre>
   * Server asked the client to execute an unknown or unsupported action.
   * </pre>
   *
   * <code>UNSUPPORTED_ACTION = 5;</code>
   */
  UNSUPPORTED_ACTION(5),
  /**
   * <pre>
   * The action decided to fallback to manual mode, stopping the script.
   * This can happen:
   * - if an autofill action or an update details action cancels the script,
   *   possibly, not necessarily, as a result of a user action.
   * - if an interrupt explicitly stops the main script, for wait for dom
   * </pre>
   *
   * <code>MANUAL_FALLBACK = 6;</code>
   */
  MANUAL_FALLBACK(6),
  /**
   * <pre>
   * The WaitForDom action failed because an interrupt that ran during
   * that action failed.
   * </pre>
   *
   * <code>INTERRUPT_FAILED = 7;</code>
   */
  INTERRUPT_FAILED(7),
  /**
   * <pre>
   * The script was canceled by the user, while it was running.
   * This only report such events that happen while a script is running. It can
   * affect any action. It is a signal that the action or script ran in an
   * abnormal situation and its outcome cannot be trusted.
   * </pre>
   *
   * <code>USER_ABORTED_ACTION = 8;</code>
   */
  USER_ABORTED_ACTION(8),
  /**
   * <pre>
   * The Autofill Action failed to get the full card information.
   * Possible causes:
   * - the user filled in the wrong CVC number.
   * - the card has expired
   * </pre>
   *
   * <code>GET_FULL_CARD_FAILED = 9;</code>
   */
  GET_FULL_CARD_FAILED(9),
  /**
   * <pre>
   * The action did not have what it needs. This is generally a bug in the
   * script.
   * This is currently returned by the autofill action, when it could not find
   * the credit card or the address it needs in the client memory. This is
   * usually the sign that the CollectUserDataAction was not run or failed.
   * </pre>
   *
   * <code>PRECONDITION_FAILED = 10;</code>
   */
  PRECONDITION_FAILED(10),
  /**
   * <pre>
   * The action definition returned by the server was rejected.
   * </pre>
   *
   * <code>INVALID_ACTION = 11;</code>
   */
  INVALID_ACTION(11),
  /**
   * <pre>
   * Executing the action as defined is unsupported.
   * </pre>
   *
   * <code>UNSUPPORTED = 12;</code>
   */
  UNSUPPORTED(12),
  /**
   * <pre>
   * Timed out waiting for the document to load.
   * </pre>
   *
   * <code>TIMED_OUT = 13;</code>
   */
  TIMED_OUT(13),
  /**
   * <pre>
   * Failed to get a stable position for the element, usually to click on it.
   * </pre>
   *
   * <code>ELEMENT_UNSTABLE = 14;</code>
   */
  ELEMENT_UNSTABLE(14),
  /**
   * <pre>
   * The value passed to the select option action does not exist in the element.
   * This is usually a scripting error.
   * </pre>
   *
   * <code>OPTION_VALUE_NOT_FOUND = 16;</code>
   */
  OPTION_VALUE_NOT_FOUND(16),
  /**
   * <pre>
   * The client got an unexpected error from a JavaScript snippet executed
   * through devtools. This means that there's a bug in the client code.
   * ProcessedActionProto.UnexpectedErrorInfoProto contains more details.
   * </pre>
   *
   * <code>UNEXPECTED_JS_ERROR = 17;</code>
   */
  UNEXPECTED_JS_ERROR(17),
  /**
   * <pre>
   * There were more than one matching element in the DOM in a context where
   * only one is supported. This is generally a scripting error: the selector is
   * not specific enough.
   * </pre>
   *
   * <code>TOO_MANY_ELEMENTS = 18;</code>
   */
  TOO_MANY_ELEMENTS(18),
  /**
   * <pre>
   * The browser failed to navigate to a new document for its main frame. Note
   * that this doesn't include page load errors, which are reported as
   * TIMED_OUT.
   * </pre>
   *
   * <code>NAVIGATION_ERROR = 19;</code>
   */
  NAVIGATION_ERROR(19),
  /**
   * <pre>
   * A selector included into the current action is invalid.
   * </pre>
   *
   * <code>INVALID_SELECTOR = 20;</code>
   */
  INVALID_SELECTOR(20),
  /**
   * <pre>
   * The requested autofill info (e.g., Chrome password manager login) was not
   * available. It might have been recently deleted.
   * </pre>
   *
   * <code>AUTOFILL_INFO_NOT_AVAILABLE = 21;</code>
   */
  AUTOFILL_INFO_NOT_AVAILABLE(21),
  /**
   * <pre>
   * An unexpected error occurred during element resolution.
   * </pre>
   *
   * <code>FRAME_HOST_NOT_FOUND = 22;</code>
   */
  FRAME_HOST_NOT_FOUND(22),
  /**
   * <pre>
   * Autofill could not fully fill the form as expected.
   * Possible causes:
   * - The fallback data was not available.
   * - A field defined as required was empty after the action completed.
   * - Filling a field resulted in error, e.g. the field was not found.
   * ProcessedActionStatusProto.AutofillErrorInfoProto contains more details.
   * </pre>
   *
   * <code>AUTOFILL_INCOMPLETE = 24;</code>
   */
  AUTOFILL_INCOMPLETE(24),
  /**
   * <pre>
   * Evaluating the element did report an unexpected mismatch in either value
   * or text.
   * </pre>
   *
   * <code>ELEMENT_MISMATCH = 26;</code>
   */
  ELEMENT_MISMATCH(26),
  /**
   * <pre>
   * Another element covered the targeted element, when trying to click.
   * </pre>
   *
   * <code>ELEMENT_NOT_ON_TOP = 27;</code>
   */
  ELEMENT_NOT_ON_TOP(27),
  /**
   * <pre>
   * The client_id could not be found in the client's ElementStore. This means
   * the element was either not successfully found or a wrong client_id was
   * used.
   * </pre>
   *
   * <code>CLIENT_ID_RESOLUTION_FAILED = 28;</code>
   */
  CLIENT_ID_RESOLUTION_FAILED(28),
  /**
   * <pre>
   * The target element's frame was not in the same domain or subdomain as the
   * password's origin.
   * </pre>
   *
   * <code>PASSWORD_ORIGIN_MISMATCH = 29;</code>
   */
  PASSWORD_ORIGIN_MISMATCH(29),
  /**
   * <pre>
   * Selecting an option failed because more than one option matched.
   * </pre>
   *
   * <code>TOO_MANY_OPTION_VALUES_FOUND = 30;</code>
   */
  TOO_MANY_OPTION_VALUES_FOUND(30),
  /**
   * <pre>
   * The action's target did not fit the action. E.g. a |SelectOption| being
   * called on any element other than &lt;select&gt;.
   * </pre>
   *
   * <code>INVALID_TARGET = 31;</code>
   */
  INVALID_TARGET(31),
  /**
   * <pre>
   * The element has no or only an empty box model. This can mean the element
   * is not rendered (display: none) or simply empty.
   * </pre>
   *
   * <code>ELEMENT_POSITION_NOT_FOUND = 33;</code>
   */
  ELEMENT_POSITION_NOT_FOUND(33),
  /**
   * <pre>
   * The requested client memory key was not available.
   * </pre>
   *
   * <code>CLIENT_MEMORY_KEY_NOT_AVAILABLE = 34;</code>
   */
  CLIENT_MEMORY_KEY_NOT_AVAILABLE(34),
  /**
   * <pre>
   * The requested value expression resulted in an empty string.
   * </pre>
   *
   * <code>EMPTY_VALUE_EXPRESSION_RESULT = 35;</code>
   */
  EMPTY_VALUE_EXPRESSION_RESULT(35),
  /**
   * <pre>
   * The RenderFrameHost does not have a corresponding live RenderFrame, e.g.
   * the renderer process may have crashed.
   * </pre>
   *
   * <code>NO_RENDER_FRAME = 37;</code>
   */
  NO_RENDER_FRAME(37),
  /**
   * <pre>
   * Requesting the user data from our data endpoint failed.
   * </pre>
   *
   * <code>USER_DATA_REQUEST_FAILED = 38;</code>
   */
  USER_DATA_REQUEST_FAILED(38),
  /**
   * <pre>
   * The js flow action forced an additional roundtrip.
   * </pre>
   *
   * <code>JS_FORCED_ROUNDTRIP = 39;</code>
   */
  JS_FORCED_ROUNDTRIP(39),
  /**
   * <pre>
   * The QR code scan returned without populating data in client memory.
   * Possible causes:
   * - The user did not give an image with a valid QR code.
   * </pre>
   *
   * <code>QR_CODE_SCAN_FAILURE = 40;</code>
   */
  QR_CODE_SCAN_FAILURE(40),
  /**
   * <pre>
   * The QR code scan was cancelled by the user.
   * Possible causes:
   * - The user pressed back button or clicked on cancel icon.
   * </pre>
   *
   * <code>QR_CODE_SCAN_CANCELLED = 41;</code>
   */
  QR_CODE_SCAN_CANCELLED(41),
  /**
   * <pre>
   * The QR code scan failed because of some camera issues.
   * </pre>
   *
   * <code>QR_CODE_SCAN_CAMERA_ERROR = 42;</code>
   */
  QR_CODE_SCAN_CAMERA_ERROR(42),
  ;

  /**
   * <code>UNKNOWN_ACTION_STATUS = 0;</code>
   */
  public static final int UNKNOWN_ACTION_STATUS_VALUE = 0;
  /**
   * <pre>
   * Element could not be found.
   * </pre>
   *
   * <code>ELEMENT_RESOLUTION_FAILED = 1;</code>
   */
  public static final int ELEMENT_RESOLUTION_FAILED_VALUE = 1;
  /**
   * <pre>
   * The action was applied successfully.
   * </pre>
   *
   * <code>ACTION_APPLIED = 2;</code>
   */
  public static final int ACTION_APPLIED_VALUE = 2;
  /**
   * <pre>
   * The action failed (generic error).
   * This usually means that the client needs to be fixed: either the error
   * should be assigned a more specific error code, or a bug in the client code
   * needs to be fixed.
   * ProcessedActionProto.UnexpectedErrorInfoProto contains more details.
   * </pre>
   *
   * <code>OTHER_ACTION_STATUS = 3;</code>
   */
  public static final int OTHER_ACTION_STATUS_VALUE = 3;
  /**
   * <pre>
   * The action failed to collect the requested user data.
   * </pre>
   *
   * <code>COLLECT_USER_DATA_ERROR = 4;</code>
   */
  public static final int COLLECT_USER_DATA_ERROR_VALUE = 4;
  /**
   * <pre>
   * Server asked the client to execute an unknown or unsupported action.
   * </pre>
   *
   * <code>UNSUPPORTED_ACTION = 5;</code>
   */
  public static final int UNSUPPORTED_ACTION_VALUE = 5;
  /**
   * <pre>
   * The action decided to fallback to manual mode, stopping the script.
   * This can happen:
   * - if an autofill action or an update details action cancels the script,
   *   possibly, not necessarily, as a result of a user action.
   * - if an interrupt explicitly stops the main script, for wait for dom
   * </pre>
   *
   * <code>MANUAL_FALLBACK = 6;</code>
   */
  public static final int MANUAL_FALLBACK_VALUE = 6;
  /**
   * <pre>
   * The WaitForDom action failed because an interrupt that ran during
   * that action failed.
   * </pre>
   *
   * <code>INTERRUPT_FAILED = 7;</code>
   */
  public static final int INTERRUPT_FAILED_VALUE = 7;
  /**
   * <pre>
   * The script was canceled by the user, while it was running.
   * This only report such events that happen while a script is running. It can
   * affect any action. It is a signal that the action or script ran in an
   * abnormal situation and its outcome cannot be trusted.
   * </pre>
   *
   * <code>USER_ABORTED_ACTION = 8;</code>
   */
  public static final int USER_ABORTED_ACTION_VALUE = 8;
  /**
   * <pre>
   * The Autofill Action failed to get the full card information.
   * Possible causes:
   * - the user filled in the wrong CVC number.
   * - the card has expired
   * </pre>
   *
   * <code>GET_FULL_CARD_FAILED = 9;</code>
   */
  public static final int GET_FULL_CARD_FAILED_VALUE = 9;
  /**
   * <pre>
   * The action did not have what it needs. This is generally a bug in the
   * script.
   * This is currently returned by the autofill action, when it could not find
   * the credit card or the address it needs in the client memory. This is
   * usually the sign that the CollectUserDataAction was not run or failed.
   * </pre>
   *
   * <code>PRECONDITION_FAILED = 10;</code>
   */
  public static final int PRECONDITION_FAILED_VALUE = 10;
  /**
   * <pre>
   * The action definition returned by the server was rejected.
   * </pre>
   *
   * <code>INVALID_ACTION = 11;</code>
   */
  public static final int INVALID_ACTION_VALUE = 11;
  /**
   * <pre>
   * Executing the action as defined is unsupported.
   * </pre>
   *
   * <code>UNSUPPORTED = 12;</code>
   */
  public static final int UNSUPPORTED_VALUE = 12;
  /**
   * <pre>
   * Timed out waiting for the document to load.
   * </pre>
   *
   * <code>TIMED_OUT = 13;</code>
   */
  public static final int TIMED_OUT_VALUE = 13;
  /**
   * <pre>
   * Failed to get a stable position for the element, usually to click on it.
   * </pre>
   *
   * <code>ELEMENT_UNSTABLE = 14;</code>
   */
  public static final int ELEMENT_UNSTABLE_VALUE = 14;
  /**
   * <pre>
   * The value passed to the select option action does not exist in the element.
   * This is usually a scripting error.
   * </pre>
   *
   * <code>OPTION_VALUE_NOT_FOUND = 16;</code>
   */
  public static final int OPTION_VALUE_NOT_FOUND_VALUE = 16;
  /**
   * <pre>
   * The client got an unexpected error from a JavaScript snippet executed
   * through devtools. This means that there's a bug in the client code.
   * ProcessedActionProto.UnexpectedErrorInfoProto contains more details.
   * </pre>
   *
   * <code>UNEXPECTED_JS_ERROR = 17;</code>
   */
  public static final int UNEXPECTED_JS_ERROR_VALUE = 17;
  /**
   * <pre>
   * There were more than one matching element in the DOM in a context where
   * only one is supported. This is generally a scripting error: the selector is
   * not specific enough.
   * </pre>
   *
   * <code>TOO_MANY_ELEMENTS = 18;</code>
   */
  public static final int TOO_MANY_ELEMENTS_VALUE = 18;
  /**
   * <pre>
   * The browser failed to navigate to a new document for its main frame. Note
   * that this doesn't include page load errors, which are reported as
   * TIMED_OUT.
   * </pre>
   *
   * <code>NAVIGATION_ERROR = 19;</code>
   */
  public static final int NAVIGATION_ERROR_VALUE = 19;
  /**
   * <pre>
   * A selector included into the current action is invalid.
   * </pre>
   *
   * <code>INVALID_SELECTOR = 20;</code>
   */
  public static final int INVALID_SELECTOR_VALUE = 20;
  /**
   * <pre>
   * The requested autofill info (e.g., Chrome password manager login) was not
   * available. It might have been recently deleted.
   * </pre>
   *
   * <code>AUTOFILL_INFO_NOT_AVAILABLE = 21;</code>
   */
  public static final int AUTOFILL_INFO_NOT_AVAILABLE_VALUE = 21;
  /**
   * <pre>
   * An unexpected error occurred during element resolution.
   * </pre>
   *
   * <code>FRAME_HOST_NOT_FOUND = 22;</code>
   */
  public static final int FRAME_HOST_NOT_FOUND_VALUE = 22;
  /**
   * <pre>
   * Autofill could not fully fill the form as expected.
   * Possible causes:
   * - The fallback data was not available.
   * - A field defined as required was empty after the action completed.
   * - Filling a field resulted in error, e.g. the field was not found.
   * ProcessedActionStatusProto.AutofillErrorInfoProto contains more details.
   * </pre>
   *
   * <code>AUTOFILL_INCOMPLETE = 24;</code>
   */
  public static final int AUTOFILL_INCOMPLETE_VALUE = 24;
  /**
   * <pre>
   * Evaluating the element did report an unexpected mismatch in either value
   * or text.
   * </pre>
   *
   * <code>ELEMENT_MISMATCH = 26;</code>
   */
  public static final int ELEMENT_MISMATCH_VALUE = 26;
  /**
   * <pre>
   * Another element covered the targeted element, when trying to click.
   * </pre>
   *
   * <code>ELEMENT_NOT_ON_TOP = 27;</code>
   */
  public static final int ELEMENT_NOT_ON_TOP_VALUE = 27;
  /**
   * <pre>
   * The client_id could not be found in the client's ElementStore. This means
   * the element was either not successfully found or a wrong client_id was
   * used.
   * </pre>
   *
   * <code>CLIENT_ID_RESOLUTION_FAILED = 28;</code>
   */
  public static final int CLIENT_ID_RESOLUTION_FAILED_VALUE = 28;
  /**
   * <pre>
   * The target element's frame was not in the same domain or subdomain as the
   * password's origin.
   * </pre>
   *
   * <code>PASSWORD_ORIGIN_MISMATCH = 29;</code>
   */
  public static final int PASSWORD_ORIGIN_MISMATCH_VALUE = 29;
  /**
   * <pre>
   * Selecting an option failed because more than one option matched.
   * </pre>
   *
   * <code>TOO_MANY_OPTION_VALUES_FOUND = 30;</code>
   */
  public static final int TOO_MANY_OPTION_VALUES_FOUND_VALUE = 30;
  /**
   * <pre>
   * The action's target did not fit the action. E.g. a |SelectOption| being
   * called on any element other than &lt;select&gt;.
   * </pre>
   *
   * <code>INVALID_TARGET = 31;</code>
   */
  public static final int INVALID_TARGET_VALUE = 31;
  /**
   * <pre>
   * The element has no or only an empty box model. This can mean the element
   * is not rendered (display: none) or simply empty.
   * </pre>
   *
   * <code>ELEMENT_POSITION_NOT_FOUND = 33;</code>
   */
  public static final int ELEMENT_POSITION_NOT_FOUND_VALUE = 33;
  /**
   * <pre>
   * The requested client memory key was not available.
   * </pre>
   *
   * <code>CLIENT_MEMORY_KEY_NOT_AVAILABLE = 34;</code>
   */
  public static final int CLIENT_MEMORY_KEY_NOT_AVAILABLE_VALUE = 34;
  /**
   * <pre>
   * The requested value expression resulted in an empty string.
   * </pre>
   *
   * <code>EMPTY_VALUE_EXPRESSION_RESULT = 35;</code>
   */
  public static final int EMPTY_VALUE_EXPRESSION_RESULT_VALUE = 35;
  /**
   * <pre>
   * The RenderFrameHost does not have a corresponding live RenderFrame, e.g.
   * the renderer process may have crashed.
   * </pre>
   *
   * <code>NO_RENDER_FRAME = 37;</code>
   */
  public static final int NO_RENDER_FRAME_VALUE = 37;
  /**
   * <pre>
   * Requesting the user data from our data endpoint failed.
   * </pre>
   *
   * <code>USER_DATA_REQUEST_FAILED = 38;</code>
   */
  public static final int USER_DATA_REQUEST_FAILED_VALUE = 38;
  /**
   * <pre>
   * The js flow action forced an additional roundtrip.
   * </pre>
   *
   * <code>JS_FORCED_ROUNDTRIP = 39;</code>
   */
  public static final int JS_FORCED_ROUNDTRIP_VALUE = 39;
  /**
   * <pre>
   * The QR code scan returned without populating data in client memory.
   * Possible causes:
   * - The user did not give an image with a valid QR code.
   * </pre>
   *
   * <code>QR_CODE_SCAN_FAILURE = 40;</code>
   */
  public static final int QR_CODE_SCAN_FAILURE_VALUE = 40;
  /**
   * <pre>
   * The QR code scan was cancelled by the user.
   * Possible causes:
   * - The user pressed back button or clicked on cancel icon.
   * </pre>
   *
   * <code>QR_CODE_SCAN_CANCELLED = 41;</code>
   */
  public static final int QR_CODE_SCAN_CANCELLED_VALUE = 41;
  /**
   * <pre>
   * The QR code scan failed because of some camera issues.
   * </pre>
   *
   * <code>QR_CODE_SCAN_CAMERA_ERROR = 42;</code>
   */
  public static final int QR_CODE_SCAN_CAMERA_ERROR_VALUE = 42;


  @java.lang.Override
  public final int getNumber() {
    return value;
  }

  /**
   * @param value The number of the enum to look for.
   * @return The enum associated with the given number.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ProcessedActionStatusProto valueOf(int value) {
    return forNumber(value);
  }

  public static ProcessedActionStatusProto forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_ACTION_STATUS;
      case 1: return ELEMENT_RESOLUTION_FAILED;
      case 2: return ACTION_APPLIED;
      case 3: return OTHER_ACTION_STATUS;
      case 4: return COLLECT_USER_DATA_ERROR;
      case 5: return UNSUPPORTED_ACTION;
      case 6: return MANUAL_FALLBACK;
      case 7: return INTERRUPT_FAILED;
      case 8: return USER_ABORTED_ACTION;
      case 9: return GET_FULL_CARD_FAILED;
      case 10: return PRECONDITION_FAILED;
      case 11: return INVALID_ACTION;
      case 12: return UNSUPPORTED;
      case 13: return TIMED_OUT;
      case 14: return ELEMENT_UNSTABLE;
      case 16: return OPTION_VALUE_NOT_FOUND;
      case 17: return UNEXPECTED_JS_ERROR;
      case 18: return TOO_MANY_ELEMENTS;
      case 19: return NAVIGATION_ERROR;
      case 20: return INVALID_SELECTOR;
      case 21: return AUTOFILL_INFO_NOT_AVAILABLE;
      case 22: return FRAME_HOST_NOT_FOUND;
      case 24: return AUTOFILL_INCOMPLETE;
      case 26: return ELEMENT_MISMATCH;
      case 27: return ELEMENT_NOT_ON_TOP;
      case 28: return CLIENT_ID_RESOLUTION_FAILED;
      case 29: return PASSWORD_ORIGIN_MISMATCH;
      case 30: return TOO_MANY_OPTION_VALUES_FOUND;
      case 31: return INVALID_TARGET;
      case 33: return ELEMENT_POSITION_NOT_FOUND;
      case 34: return CLIENT_MEMORY_KEY_NOT_AVAILABLE;
      case 35: return EMPTY_VALUE_EXPRESSION_RESULT;
      case 37: return NO_RENDER_FRAME;
      case 38: return USER_DATA_REQUEST_FAILED;
      case 39: return JS_FORCED_ROUNDTRIP;
      case 40: return QR_CODE_SCAN_FAILURE;
      case 41: return QR_CODE_SCAN_CANCELLED;
      case 42: return QR_CODE_SCAN_CAMERA_ERROR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ProcessedActionStatusProto>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ProcessedActionStatusProto> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ProcessedActionStatusProto>() {
          @java.lang.Override
          public ProcessedActionStatusProto findValueByNumber(int number) {
            return ProcessedActionStatusProto.forNumber(number);
          }
        };

  public static com.google.protobuf.Internal.EnumVerifier 
      internalGetVerifier() {
    return ProcessedActionStatusProtoVerifier.INSTANCE;
  }

  private static final class ProcessedActionStatusProtoVerifier implements 
       com.google.protobuf.Internal.EnumVerifier { 
          static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ProcessedActionStatusProtoVerifier();
          @java.lang.Override
          public boolean isInRange(int number) {
            return ProcessedActionStatusProto.forNumber(number) != null;
          }
        };

  private final int value;

  private ProcessedActionStatusProto(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:autofill_assistant.ProcessedActionStatusProto)
}

