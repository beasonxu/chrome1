// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/dom_action.proto

#include "components/autofill_assistant/browser/dom_action.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill_assistant {
PROTOBUF_CONSTEXPR ClientIdProto::ClientIdProto(
    ::_pbi::ConstantInitialized)
  : identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientIdProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientIdProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientIdProtoDefaultTypeInternal() {}
  union {
    ClientIdProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientIdProtoDefaultTypeInternal _ClientIdProto_default_instance_;
PROTOBUF_CONSTEXPR ScrollIntoViewProto::ScrollIntoViewProto(
    ::_pbi::ConstantInitialized)
  : animation_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , vertical_alignment_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , horizontal_alignment_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_id_(nullptr){}
struct ScrollIntoViewProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScrollIntoViewProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScrollIntoViewProtoDefaultTypeInternal() {}
  union {
    ScrollIntoViewProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScrollIntoViewProtoDefaultTypeInternal _ScrollIntoViewProto_default_instance_;
PROTOBUF_CONSTEXPR ScrollIntoViewIfNeededProto::ScrollIntoViewIfNeededProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr)
  , center_(false){}
struct ScrollIntoViewIfNeededProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScrollIntoViewIfNeededProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScrollIntoViewIfNeededProtoDefaultTypeInternal() {}
  union {
    ScrollIntoViewIfNeededProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScrollIntoViewIfNeededProtoDefaultTypeInternal _ScrollIntoViewIfNeededProto_default_instance_;
PROTOBUF_CONSTEXPR ScrollDistance::ScrollDistance(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ScrollDistanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScrollDistanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScrollDistanceDefaultTypeInternal() {}
  union {
    ScrollDistance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScrollDistanceDefaultTypeInternal _ScrollDistance_default_instance_;
PROTOBUF_CONSTEXPR ScrollWindowProto::ScrollWindowProto(
    ::_pbi::ConstantInitialized)
  : animation_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_frame_id_(nullptr)
  , scroll_distance_(nullptr){}
struct ScrollWindowProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScrollWindowProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScrollWindowProtoDefaultTypeInternal() {}
  union {
    ScrollWindowProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScrollWindowProtoDefaultTypeInternal _ScrollWindowProto_default_instance_;
PROTOBUF_CONSTEXPR ScrollContainerProto::ScrollContainerProto(
    ::_pbi::ConstantInitialized)
  : animation_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_id_(nullptr)
  , scroll_distance_(nullptr){}
struct ScrollContainerProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScrollContainerProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScrollContainerProtoDefaultTypeInternal() {}
  union {
    ScrollContainerProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScrollContainerProtoDefaultTypeInternal _ScrollContainerProto_default_instance_;
PROTOBUF_CONSTEXPR WaitForDocumentToBecomeInteractiveProto::WaitForDocumentToBecomeInteractiveProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr)
  , timeout_in_ms_(0){}
struct WaitForDocumentToBecomeInteractiveProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitForDocumentToBecomeInteractiveProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitForDocumentToBecomeInteractiveProtoDefaultTypeInternal() {}
  union {
    WaitForDocumentToBecomeInteractiveProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitForDocumentToBecomeInteractiveProtoDefaultTypeInternal _WaitForDocumentToBecomeInteractiveProto_default_instance_;
PROTOBUF_CONSTEXPR WaitForDocumentToBecomeCompleteProto::WaitForDocumentToBecomeCompleteProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr)
  , timeout_in_ms_(0){}
struct WaitForDocumentToBecomeCompleteProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitForDocumentToBecomeCompleteProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitForDocumentToBecomeCompleteProtoDefaultTypeInternal() {}
  union {
    WaitForDocumentToBecomeCompleteProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitForDocumentToBecomeCompleteProtoDefaultTypeInternal _WaitForDocumentToBecomeCompleteProto_default_instance_;
PROTOBUF_CONSTEXPR WaitForElementToBecomeStableProto::WaitForElementToBecomeStableProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr)
  , stable_check_max_rounds_(50)
  , stable_check_interval_ms_(200){}
struct WaitForElementToBecomeStableProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitForElementToBecomeStableProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitForElementToBecomeStableProtoDefaultTypeInternal() {}
  union {
    WaitForElementToBecomeStableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitForElementToBecomeStableProtoDefaultTypeInternal _WaitForElementToBecomeStableProto_default_instance_;
PROTOBUF_CONSTEXPR CheckElementIsOnTopProto::CheckElementIsOnTopProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr){}
struct CheckElementIsOnTopProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckElementIsOnTopProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckElementIsOnTopProtoDefaultTypeInternal() {}
  union {
    CheckElementIsOnTopProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckElementIsOnTopProtoDefaultTypeInternal _CheckElementIsOnTopProto_default_instance_;
PROTOBUF_CONSTEXPR SendClickEventProto::SendClickEventProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr){}
struct SendClickEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendClickEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendClickEventProtoDefaultTypeInternal() {}
  union {
    SendClickEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendClickEventProtoDefaultTypeInternal _SendClickEventProto_default_instance_;
PROTOBUF_CONSTEXPR SendTapEventProto::SendTapEventProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr){}
struct SendTapEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendTapEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendTapEventProtoDefaultTypeInternal() {}
  union {
    SendTapEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendTapEventProtoDefaultTypeInternal _SendTapEventProto_default_instance_;
PROTOBUF_CONSTEXPR JsClickProto::JsClickProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr){}
struct JsClickProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JsClickProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JsClickProtoDefaultTypeInternal() {}
  union {
    JsClickProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JsClickProtoDefaultTypeInternal _JsClickProto_default_instance_;
PROTOBUF_CONSTEXPR SendKeystrokeEventsProto_Result::SendKeystrokeEventsProto_Result(
    ::_pbi::ConstantInitialized)
  : months_since_password_last_used_(0){}
struct SendKeystrokeEventsProto_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendKeystrokeEventsProto_ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendKeystrokeEventsProto_ResultDefaultTypeInternal() {}
  union {
    SendKeystrokeEventsProto_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendKeystrokeEventsProto_ResultDefaultTypeInternal _SendKeystrokeEventsProto_Result_default_instance_;
PROTOBUF_CONSTEXPR SendKeystrokeEventsProto::SendKeystrokeEventsProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr)
  , value_(nullptr)
  , delay_in_ms_(0){}
struct SendKeystrokeEventsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendKeystrokeEventsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendKeystrokeEventsProtoDefaultTypeInternal() {}
  union {
    SendKeystrokeEventsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendKeystrokeEventsProtoDefaultTypeInternal _SendKeystrokeEventsProto_default_instance_;
PROTOBUF_CONSTEXPR SendKeyEventProto::SendKeyEventProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr)
  , key_event_(nullptr){}
struct SendKeyEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendKeyEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendKeyEventProtoDefaultTypeInternal() {}
  union {
    SendKeyEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendKeyEventProtoDefaultTypeInternal _SendKeyEventProto_default_instance_;
PROTOBUF_CONSTEXPR SendChangeEventProto::SendChangeEventProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr){}
struct SendChangeEventProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChangeEventProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChangeEventProtoDefaultTypeInternal() {}
  union {
    SendChangeEventProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChangeEventProtoDefaultTypeInternal _SendChangeEventProto_default_instance_;
PROTOBUF_CONSTEXPR SetElementAttributeProto::SetElementAttributeProto(
    ::_pbi::ConstantInitialized)
  : attribute_()
  , client_id_(nullptr)
  , value_(nullptr){}
struct SetElementAttributeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetElementAttributeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetElementAttributeProtoDefaultTypeInternal() {}
  union {
    SetElementAttributeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetElementAttributeProtoDefaultTypeInternal _SetElementAttributeProto_default_instance_;
PROTOBUF_CONSTEXPR SelectFieldValueProto::SelectFieldValueProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr){}
struct SelectFieldValueProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectFieldValueProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectFieldValueProtoDefaultTypeInternal() {}
  union {
    SelectFieldValueProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectFieldValueProtoDefaultTypeInternal _SelectFieldValueProto_default_instance_;
PROTOBUF_CONSTEXPR FocusFieldProto::FocusFieldProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr){}
struct FocusFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FocusFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FocusFieldProtoDefaultTypeInternal() {}
  union {
    FocusFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FocusFieldProtoDefaultTypeInternal _FocusFieldProto_default_instance_;
PROTOBUF_CONSTEXPR BlurFieldProto::BlurFieldProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr){}
struct BlurFieldProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlurFieldProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlurFieldProtoDefaultTypeInternal() {}
  union {
    BlurFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlurFieldProtoDefaultTypeInternal _BlurFieldProto_default_instance_;
PROTOBUF_CONSTEXPR SelectOptionElementProto::SelectOptionElementProto(
    ::_pbi::ConstantInitialized)
  : select_id_(nullptr)
  , option_id_(nullptr){}
struct SelectOptionElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectOptionElementProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectOptionElementProtoDefaultTypeInternal() {}
  union {
    SelectOptionElementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectOptionElementProtoDefaultTypeInternal _SelectOptionElementProto_default_instance_;
PROTOBUF_CONSTEXPR CheckElementTagProto::CheckElementTagProto(
    ::_pbi::ConstantInitialized)
  : any_of_tag_()
  , client_id_(nullptr){}
struct CheckElementTagProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckElementTagProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckElementTagProtoDefaultTypeInternal() {}
  union {
    CheckElementTagProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckElementTagProtoDefaultTypeInternal _CheckElementTagProto_default_instance_;
PROTOBUF_CONSTEXPR CheckOptionElementProto_Result::CheckOptionElementProto_Result(
    ::_pbi::ConstantInitialized)
  : match_(false){}
struct CheckOptionElementProto_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckOptionElementProto_ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckOptionElementProto_ResultDefaultTypeInternal() {}
  union {
    CheckOptionElementProto_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckOptionElementProto_ResultDefaultTypeInternal _CheckOptionElementProto_Result_default_instance_;
PROTOBUF_CONSTEXPR CheckOptionElementProto::CheckOptionElementProto(
    ::_pbi::ConstantInitialized)
  : select_id_(nullptr)
  , option_id_(nullptr)
  , mismatch_should_fail_(false){}
struct CheckOptionElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckOptionElementProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckOptionElementProtoDefaultTypeInternal() {}
  union {
    CheckOptionElementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckOptionElementProtoDefaultTypeInternal _CheckOptionElementProto_default_instance_;
PROTOBUF_CONSTEXPR ExecuteJsProto::ExecuteJsProto(
    ::_pbi::ConstantInitialized)
  : js_snippet_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_id_(nullptr)
  , timeout_ms_(0){}
struct ExecuteJsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteJsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteJsProtoDefaultTypeInternal() {}
  union {
    ExecuteJsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteJsProtoDefaultTypeInternal _ExecuteJsProto_default_instance_;
PROTOBUF_CONSTEXPR SetNativeValueProto::SetNativeValueProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr)
  , value_(nullptr){}
struct SetNativeValueProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetNativeValueProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetNativeValueProtoDefaultTypeInternal() {}
  union {
    SetNativeValueProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetNativeValueProtoDefaultTypeInternal _SetNativeValueProto_default_instance_;
PROTOBUF_CONSTEXPR SetNativeCheckedProto::SetNativeCheckedProto(
    ::_pbi::ConstantInitialized)
  : client_id_(nullptr)
  , checked_(false){}
struct SetNativeCheckedProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetNativeCheckedProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetNativeCheckedProtoDefaultTypeInternal() {}
  union {
    SetNativeCheckedProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetNativeCheckedProtoDefaultTypeInternal _SetNativeCheckedProto_default_instance_;
}  // namespace autofill_assistant
namespace autofill_assistant {

// ===================================================================

class ClientIdProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIdProto>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientIdProto::ClientIdProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ClientIdProto)
}
ClientIdProto::ClientIdProto(const ClientIdProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    identifier_.Set(from._internal_identifier(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ClientIdProto)
}

inline void ClientIdProto::SharedCtor() {
identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientIdProto::~ClientIdProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ClientIdProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientIdProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.Destroy();
}

void ClientIdProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientIdProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ClientIdProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientIdProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientIdProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ClientIdProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ClientIdProto)
  return target;
}

size_t ClientIdProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ClientIdProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string identifier = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIdProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientIdProto*>(
      &from));
}

void ClientIdProto::MergeFrom(const ClientIdProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ClientIdProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_identifier()) {
    _internal_set_identifier(from._internal_identifier());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientIdProto::CopyFrom(const ClientIdProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ClientIdProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIdProto::IsInitialized() const {
  return true;
}

void ClientIdProto::InternalSwap(ClientIdProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
}

std::string ClientIdProto::GetTypeName() const {
  return "autofill_assistant.ClientIdProto";
}


// ===================================================================

class ScrollIntoViewProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ScrollIntoViewProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const ScrollIntoViewProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_horizontal_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill_assistant::ClientIdProto&
ScrollIntoViewProto::_Internal::client_id(const ScrollIntoViewProto* msg) {
  return *msg->client_id_;
}
ScrollIntoViewProto::ScrollIntoViewProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ScrollIntoViewProto)
}
ScrollIntoViewProto::ScrollIntoViewProto(const ScrollIntoViewProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  animation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    animation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_animation()) {
    animation_.Set(from._internal_animation(), 
      GetArenaForAllocation());
  }
  vertical_alignment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vertical_alignment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vertical_alignment()) {
    vertical_alignment_.Set(from._internal_vertical_alignment(), 
      GetArenaForAllocation());
  }
  horizontal_alignment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    horizontal_alignment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_horizontal_alignment()) {
    horizontal_alignment_.Set(from._internal_horizontal_alignment(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ScrollIntoViewProto)
}

inline void ScrollIntoViewProto::SharedCtor() {
animation_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  animation_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vertical_alignment_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vertical_alignment_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
horizontal_alignment_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  horizontal_alignment_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_id_ = nullptr;
}

ScrollIntoViewProto::~ScrollIntoViewProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ScrollIntoViewProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScrollIntoViewProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  animation_.Destroy();
  vertical_alignment_.Destroy();
  horizontal_alignment_.Destroy();
  if (this != internal_default_instance()) delete client_id_;
}

void ScrollIntoViewProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScrollIntoViewProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ScrollIntoViewProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      animation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      vertical_alignment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      horizontal_alignment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ScrollIntoViewProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string animation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_animation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string vertical_alignment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vertical_alignment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string horizontal_alignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_horizontal_alignment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScrollIntoViewProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ScrollIntoViewProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional string animation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_animation(), target);
  }

  // optional string vertical_alignment = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vertical_alignment(), target);
  }

  // optional string horizontal_alignment = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_horizontal_alignment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ScrollIntoViewProto)
  return target;
}

size_t ScrollIntoViewProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ScrollIntoViewProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string animation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animation());
    }

    // optional string vertical_alignment = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vertical_alignment());
    }

    // optional string horizontal_alignment = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_horizontal_alignment());
    }

    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScrollIntoViewProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScrollIntoViewProto*>(
      &from));
}

void ScrollIntoViewProto::MergeFrom(const ScrollIntoViewProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ScrollIntoViewProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_animation(from._internal_animation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_vertical_alignment(from._internal_vertical_alignment());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_horizontal_alignment(from._internal_horizontal_alignment());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScrollIntoViewProto::CopyFrom(const ScrollIntoViewProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ScrollIntoViewProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollIntoViewProto::IsInitialized() const {
  return true;
}

void ScrollIntoViewProto::InternalSwap(ScrollIntoViewProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &animation_, lhs_arena,
      &other->animation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vertical_alignment_, lhs_arena,
      &other->vertical_alignment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &horizontal_alignment_, lhs_arena,
      &other->horizontal_alignment_, rhs_arena
  );
  swap(client_id_, other->client_id_);
}

std::string ScrollIntoViewProto::GetTypeName() const {
  return "autofill_assistant.ScrollIntoViewProto";
}


// ===================================================================

class ScrollIntoViewIfNeededProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ScrollIntoViewIfNeededProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const ScrollIntoViewIfNeededProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ClientIdProto&
ScrollIntoViewIfNeededProto::_Internal::client_id(const ScrollIntoViewIfNeededProto* msg) {
  return *msg->client_id_;
}
ScrollIntoViewIfNeededProto::ScrollIntoViewIfNeededProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ScrollIntoViewIfNeededProto)
}
ScrollIntoViewIfNeededProto::ScrollIntoViewIfNeededProto(const ScrollIntoViewIfNeededProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  center_ = from.center_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ScrollIntoViewIfNeededProto)
}

inline void ScrollIntoViewIfNeededProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&center_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(center_));
}

ScrollIntoViewIfNeededProto::~ScrollIntoViewIfNeededProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ScrollIntoViewIfNeededProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScrollIntoViewIfNeededProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void ScrollIntoViewIfNeededProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScrollIntoViewIfNeededProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ScrollIntoViewIfNeededProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  center_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ScrollIntoViewIfNeededProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_center(&has_bits);
          center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScrollIntoViewIfNeededProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ScrollIntoViewIfNeededProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional bool center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_center(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ScrollIntoViewIfNeededProto)
  return target;
}

size_t ScrollIntoViewIfNeededProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ScrollIntoViewIfNeededProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional bool center = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScrollIntoViewIfNeededProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScrollIntoViewIfNeededProto*>(
      &from));
}

void ScrollIntoViewIfNeededProto::MergeFrom(const ScrollIntoViewIfNeededProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ScrollIntoViewIfNeededProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      center_ = from.center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScrollIntoViewIfNeededProto::CopyFrom(const ScrollIntoViewIfNeededProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ScrollIntoViewIfNeededProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollIntoViewIfNeededProto::IsInitialized() const {
  return true;
}

void ScrollIntoViewIfNeededProto::InternalSwap(ScrollIntoViewIfNeededProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScrollIntoViewIfNeededProto, center_)
      + sizeof(ScrollIntoViewIfNeededProto::center_)
      - PROTOBUF_FIELD_OFFSET(ScrollIntoViewIfNeededProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string ScrollIntoViewIfNeededProto::GetTypeName() const {
  return "autofill_assistant.ScrollIntoViewIfNeededProto";
}


// ===================================================================

class ScrollDistance::_Internal {
 public:
};

ScrollDistance::ScrollDistance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ScrollDistance)
}
ScrollDistance::ScrollDistance(const ScrollDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kPixels: {
      _internal_set_pixels(from._internal_pixels());
      break;
    }
    case kWindowRatio: {
      _internal_set_window_ratio(from._internal_window_ratio());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ScrollDistance)
}

inline void ScrollDistance::SharedCtor() {
clear_has_value();
}

ScrollDistance::~ScrollDistance() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ScrollDistance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScrollDistance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void ScrollDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScrollDistance::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:autofill_assistant.ScrollDistance)
  switch (value_case()) {
    case kPixels: {
      // No need to clear
      break;
    }
    case kWindowRatio: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ScrollDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ScrollDistance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<std::string>();
}

const char* ScrollDistance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pixels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_pixels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float window_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _internal_set_window_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScrollDistance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ScrollDistance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kPixels: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pixels(), target);
      break;
    }
    case kWindowRatio: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_window_ratio(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ScrollDistance)
  return target;
}

size_t ScrollDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ScrollDistance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // int32 pixels = 1;
    case kPixels: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pixels());
      break;
    }
    // float window_ratio = 2;
    case kWindowRatio: {
      total_size += 1 + 4;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScrollDistance::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScrollDistance*>(
      &from));
}

void ScrollDistance::MergeFrom(const ScrollDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ScrollDistance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kPixels: {
      _internal_set_pixels(from._internal_pixels());
      break;
    }
    case kWindowRatio: {
      _internal_set_window_ratio(from._internal_window_ratio());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScrollDistance::CopyFrom(const ScrollDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ScrollDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollDistance::IsInitialized() const {
  return true;
}

void ScrollDistance::InternalSwap(ScrollDistance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ScrollDistance::GetTypeName() const {
  return "autofill_assistant.ScrollDistance";
}


// ===================================================================

class ScrollWindowProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ScrollWindowProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& optional_frame_id(const ScrollWindowProto* msg);
  static void set_has_optional_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill_assistant::ScrollDistance& scroll_distance(const ScrollWindowProto* msg);
  static void set_has_scroll_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
ScrollWindowProto::_Internal::optional_frame_id(const ScrollWindowProto* msg) {
  return *msg->optional_frame_id_;
}
const ::autofill_assistant::ScrollDistance&
ScrollWindowProto::_Internal::scroll_distance(const ScrollWindowProto* msg) {
  return *msg->scroll_distance_;
}
ScrollWindowProto::ScrollWindowProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ScrollWindowProto)
}
ScrollWindowProto::ScrollWindowProto(const ScrollWindowProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  animation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    animation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_animation()) {
    animation_.Set(from._internal_animation(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optional_frame_id()) {
    optional_frame_id_ = new ::autofill_assistant::ClientIdProto(*from.optional_frame_id_);
  } else {
    optional_frame_id_ = nullptr;
  }
  if (from._internal_has_scroll_distance()) {
    scroll_distance_ = new ::autofill_assistant::ScrollDistance(*from.scroll_distance_);
  } else {
    scroll_distance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ScrollWindowProto)
}

inline void ScrollWindowProto::SharedCtor() {
animation_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  animation_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optional_frame_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scroll_distance_) -
    reinterpret_cast<char*>(&optional_frame_id_)) + sizeof(scroll_distance_));
}

ScrollWindowProto::~ScrollWindowProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ScrollWindowProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScrollWindowProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  animation_.Destroy();
  if (this != internal_default_instance()) delete optional_frame_id_;
  if (this != internal_default_instance()) delete scroll_distance_;
}

void ScrollWindowProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScrollWindowProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ScrollWindowProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      animation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(optional_frame_id_ != nullptr);
      optional_frame_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(scroll_distance_ != nullptr);
      scroll_distance_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ScrollWindowProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto optional_frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_frame_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.ScrollDistance scroll_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scroll_distance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string animation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_animation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScrollWindowProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ScrollWindowProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto optional_frame_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::optional_frame_id(this),
        _Internal::optional_frame_id(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.ScrollDistance scroll_distance = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scroll_distance(this),
        _Internal::scroll_distance(this).GetCachedSize(), target, stream);
  }

  // optional string animation = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ScrollWindowProto)
  return target;
}

size_t ScrollWindowProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ScrollWindowProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string animation = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animation());
    }

    // optional .autofill_assistant.ClientIdProto optional_frame_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_frame_id_);
    }

    // optional .autofill_assistant.ScrollDistance scroll_distance = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scroll_distance_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScrollWindowProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScrollWindowProto*>(
      &from));
}

void ScrollWindowProto::MergeFrom(const ScrollWindowProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ScrollWindowProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_animation(from._internal_animation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_optional_frame_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_optional_frame_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_scroll_distance()->::autofill_assistant::ScrollDistance::MergeFrom(from._internal_scroll_distance());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScrollWindowProto::CopyFrom(const ScrollWindowProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ScrollWindowProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollWindowProto::IsInitialized() const {
  return true;
}

void ScrollWindowProto::InternalSwap(ScrollWindowProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &animation_, lhs_arena,
      &other->animation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScrollWindowProto, scroll_distance_)
      + sizeof(ScrollWindowProto::scroll_distance_)
      - PROTOBUF_FIELD_OFFSET(ScrollWindowProto, optional_frame_id_)>(
          reinterpret_cast<char*>(&optional_frame_id_),
          reinterpret_cast<char*>(&other->optional_frame_id_));
}

std::string ScrollWindowProto::GetTypeName() const {
  return "autofill_assistant.ScrollWindowProto";
}


// ===================================================================

class ScrollContainerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ScrollContainerProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const ScrollContainerProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill_assistant::ScrollDistance& scroll_distance(const ScrollContainerProto* msg);
  static void set_has_scroll_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
ScrollContainerProto::_Internal::client_id(const ScrollContainerProto* msg) {
  return *msg->client_id_;
}
const ::autofill_assistant::ScrollDistance&
ScrollContainerProto::_Internal::scroll_distance(const ScrollContainerProto* msg) {
  return *msg->scroll_distance_;
}
ScrollContainerProto::ScrollContainerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ScrollContainerProto)
}
ScrollContainerProto::ScrollContainerProto(const ScrollContainerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  animation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    animation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_animation()) {
    animation_.Set(from._internal_animation(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  if (from._internal_has_scroll_distance()) {
    scroll_distance_ = new ::autofill_assistant::ScrollDistance(*from.scroll_distance_);
  } else {
    scroll_distance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ScrollContainerProto)
}

inline void ScrollContainerProto::SharedCtor() {
animation_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  animation_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scroll_distance_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(scroll_distance_));
}

ScrollContainerProto::~ScrollContainerProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ScrollContainerProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScrollContainerProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  animation_.Destroy();
  if (this != internal_default_instance()) delete client_id_;
  if (this != internal_default_instance()) delete scroll_distance_;
}

void ScrollContainerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScrollContainerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ScrollContainerProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      animation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(scroll_distance_ != nullptr);
      scroll_distance_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ScrollContainerProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.ScrollDistance scroll_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scroll_distance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string animation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_animation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScrollContainerProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ScrollContainerProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.ScrollDistance scroll_distance = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scroll_distance(this),
        _Internal::scroll_distance(this).GetCachedSize(), target, stream);
  }

  // optional string animation = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ScrollContainerProto)
  return target;
}

size_t ScrollContainerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ScrollContainerProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string animation = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animation());
    }

    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional .autofill_assistant.ScrollDistance scroll_distance = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scroll_distance_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScrollContainerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScrollContainerProto*>(
      &from));
}

void ScrollContainerProto::MergeFrom(const ScrollContainerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ScrollContainerProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_animation(from._internal_animation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_scroll_distance()->::autofill_assistant::ScrollDistance::MergeFrom(from._internal_scroll_distance());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScrollContainerProto::CopyFrom(const ScrollContainerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ScrollContainerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollContainerProto::IsInitialized() const {
  return true;
}

void ScrollContainerProto::InternalSwap(ScrollContainerProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &animation_, lhs_arena,
      &other->animation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScrollContainerProto, scroll_distance_)
      + sizeof(ScrollContainerProto::scroll_distance_)
      - PROTOBUF_FIELD_OFFSET(ScrollContainerProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string ScrollContainerProto::GetTypeName() const {
  return "autofill_assistant.ScrollContainerProto";
}


// ===================================================================

class WaitForDocumentToBecomeInteractiveProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WaitForDocumentToBecomeInteractiveProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const WaitForDocumentToBecomeInteractiveProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout_in_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ClientIdProto&
WaitForDocumentToBecomeInteractiveProto::_Internal::client_id(const WaitForDocumentToBecomeInteractiveProto* msg) {
  return *msg->client_id_;
}
WaitForDocumentToBecomeInteractiveProto::WaitForDocumentToBecomeInteractiveProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
}
WaitForDocumentToBecomeInteractiveProto::WaitForDocumentToBecomeInteractiveProto(const WaitForDocumentToBecomeInteractiveProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  timeout_in_ms_ = from.timeout_in_ms_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
}

inline void WaitForDocumentToBecomeInteractiveProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_in_ms_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(timeout_in_ms_));
}

WaitForDocumentToBecomeInteractiveProto::~WaitForDocumentToBecomeInteractiveProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitForDocumentToBecomeInteractiveProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void WaitForDocumentToBecomeInteractiveProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitForDocumentToBecomeInteractiveProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  timeout_in_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WaitForDocumentToBecomeInteractiveProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 timeout_in_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timeout_in_ms(&has_bits);
          timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitForDocumentToBecomeInteractiveProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional int32 timeout_in_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeout_in_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
  return target;
}

size_t WaitForDocumentToBecomeInteractiveProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional int32 timeout_in_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_in_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitForDocumentToBecomeInteractiveProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WaitForDocumentToBecomeInteractiveProto*>(
      &from));
}

void WaitForDocumentToBecomeInteractiveProto::MergeFrom(const WaitForDocumentToBecomeInteractiveProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_in_ms_ = from.timeout_in_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WaitForDocumentToBecomeInteractiveProto::CopyFrom(const WaitForDocumentToBecomeInteractiveProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.WaitForDocumentToBecomeInteractiveProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForDocumentToBecomeInteractiveProto::IsInitialized() const {
  return true;
}

void WaitForDocumentToBecomeInteractiveProto::InternalSwap(WaitForDocumentToBecomeInteractiveProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitForDocumentToBecomeInteractiveProto, timeout_in_ms_)
      + sizeof(WaitForDocumentToBecomeInteractiveProto::timeout_in_ms_)
      - PROTOBUF_FIELD_OFFSET(WaitForDocumentToBecomeInteractiveProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string WaitForDocumentToBecomeInteractiveProto::GetTypeName() const {
  return "autofill_assistant.WaitForDocumentToBecomeInteractiveProto";
}


// ===================================================================

class WaitForDocumentToBecomeCompleteProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WaitForDocumentToBecomeCompleteProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const WaitForDocumentToBecomeCompleteProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout_in_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ClientIdProto&
WaitForDocumentToBecomeCompleteProto::_Internal::client_id(const WaitForDocumentToBecomeCompleteProto* msg) {
  return *msg->client_id_;
}
WaitForDocumentToBecomeCompleteProto::WaitForDocumentToBecomeCompleteProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
}
WaitForDocumentToBecomeCompleteProto::WaitForDocumentToBecomeCompleteProto(const WaitForDocumentToBecomeCompleteProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  timeout_in_ms_ = from.timeout_in_ms_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
}

inline void WaitForDocumentToBecomeCompleteProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_in_ms_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(timeout_in_ms_));
}

WaitForDocumentToBecomeCompleteProto::~WaitForDocumentToBecomeCompleteProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitForDocumentToBecomeCompleteProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void WaitForDocumentToBecomeCompleteProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitForDocumentToBecomeCompleteProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  timeout_in_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WaitForDocumentToBecomeCompleteProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 timeout_in_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timeout_in_ms(&has_bits);
          timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitForDocumentToBecomeCompleteProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional int32 timeout_in_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeout_in_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
  return target;
}

size_t WaitForDocumentToBecomeCompleteProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional int32 timeout_in_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_in_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitForDocumentToBecomeCompleteProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WaitForDocumentToBecomeCompleteProto*>(
      &from));
}

void WaitForDocumentToBecomeCompleteProto::MergeFrom(const WaitForDocumentToBecomeCompleteProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_in_ms_ = from.timeout_in_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WaitForDocumentToBecomeCompleteProto::CopyFrom(const WaitForDocumentToBecomeCompleteProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.WaitForDocumentToBecomeCompleteProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForDocumentToBecomeCompleteProto::IsInitialized() const {
  return true;
}

void WaitForDocumentToBecomeCompleteProto::InternalSwap(WaitForDocumentToBecomeCompleteProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitForDocumentToBecomeCompleteProto, timeout_in_ms_)
      + sizeof(WaitForDocumentToBecomeCompleteProto::timeout_in_ms_)
      - PROTOBUF_FIELD_OFFSET(WaitForDocumentToBecomeCompleteProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string WaitForDocumentToBecomeCompleteProto::GetTypeName() const {
  return "autofill_assistant.WaitForDocumentToBecomeCompleteProto";
}


// ===================================================================

class WaitForElementToBecomeStableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WaitForElementToBecomeStableProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const WaitForElementToBecomeStableProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stable_check_max_rounds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stable_check_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill_assistant::ClientIdProto&
WaitForElementToBecomeStableProto::_Internal::client_id(const WaitForElementToBecomeStableProto* msg) {
  return *msg->client_id_;
}
WaitForElementToBecomeStableProto::WaitForElementToBecomeStableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.WaitForElementToBecomeStableProto)
}
WaitForElementToBecomeStableProto::WaitForElementToBecomeStableProto(const WaitForElementToBecomeStableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  ::memcpy(&stable_check_max_rounds_, &from.stable_check_max_rounds_,
    static_cast<size_t>(reinterpret_cast<char*>(&stable_check_interval_ms_) -
    reinterpret_cast<char*>(&stable_check_max_rounds_)) + sizeof(stable_check_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.WaitForElementToBecomeStableProto)
}

inline void WaitForElementToBecomeStableProto::SharedCtor() {
client_id_ = nullptr;
stable_check_max_rounds_ = 50;
stable_check_interval_ms_ = 200;
}

WaitForElementToBecomeStableProto::~WaitForElementToBecomeStableProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.WaitForElementToBecomeStableProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitForElementToBecomeStableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void WaitForElementToBecomeStableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitForElementToBecomeStableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.WaitForElementToBecomeStableProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
    stable_check_max_rounds_ = 50;
    stable_check_interval_ms_ = 200;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WaitForElementToBecomeStableProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stable_check_max_rounds = 2 [default = 50];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stable_check_max_rounds(&has_bits);
          stable_check_max_rounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stable_check_interval_ms = 3 [default = 200];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stable_check_interval_ms(&has_bits);
          stable_check_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitForElementToBecomeStableProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.WaitForElementToBecomeStableProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional int32 stable_check_max_rounds = 2 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stable_check_max_rounds(), target);
  }

  // optional int32 stable_check_interval_ms = 3 [default = 200];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_stable_check_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.WaitForElementToBecomeStableProto)
  return target;
}

size_t WaitForElementToBecomeStableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.WaitForElementToBecomeStableProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional int32 stable_check_max_rounds = 2 [default = 50];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stable_check_max_rounds());
    }

    // optional int32 stable_check_interval_ms = 3 [default = 200];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stable_check_interval_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitForElementToBecomeStableProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WaitForElementToBecomeStableProto*>(
      &from));
}

void WaitForElementToBecomeStableProto::MergeFrom(const WaitForElementToBecomeStableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.WaitForElementToBecomeStableProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      stable_check_max_rounds_ = from.stable_check_max_rounds_;
    }
    if (cached_has_bits & 0x00000004u) {
      stable_check_interval_ms_ = from.stable_check_interval_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WaitForElementToBecomeStableProto::CopyFrom(const WaitForElementToBecomeStableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.WaitForElementToBecomeStableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForElementToBecomeStableProto::IsInitialized() const {
  return true;
}

void WaitForElementToBecomeStableProto::InternalSwap(WaitForElementToBecomeStableProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
  swap(stable_check_max_rounds_, other->stable_check_max_rounds_);
  swap(stable_check_interval_ms_, other->stable_check_interval_ms_);
}

std::string WaitForElementToBecomeStableProto::GetTypeName() const {
  return "autofill_assistant.WaitForElementToBecomeStableProto";
}


// ===================================================================

class CheckElementIsOnTopProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckElementIsOnTopProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const CheckElementIsOnTopProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
CheckElementIsOnTopProto::_Internal::client_id(const CheckElementIsOnTopProto* msg) {
  return *msg->client_id_;
}
CheckElementIsOnTopProto::CheckElementIsOnTopProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.CheckElementIsOnTopProto)
}
CheckElementIsOnTopProto::CheckElementIsOnTopProto(const CheckElementIsOnTopProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.CheckElementIsOnTopProto)
}

inline void CheckElementIsOnTopProto::SharedCtor() {
client_id_ = nullptr;
}

CheckElementIsOnTopProto::~CheckElementIsOnTopProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.CheckElementIsOnTopProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckElementIsOnTopProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void CheckElementIsOnTopProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckElementIsOnTopProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.CheckElementIsOnTopProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CheckElementIsOnTopProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckElementIsOnTopProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.CheckElementIsOnTopProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.CheckElementIsOnTopProto)
  return target;
}

size_t CheckElementIsOnTopProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.CheckElementIsOnTopProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckElementIsOnTopProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CheckElementIsOnTopProto*>(
      &from));
}

void CheckElementIsOnTopProto::MergeFrom(const CheckElementIsOnTopProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.CheckElementIsOnTopProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CheckElementIsOnTopProto::CopyFrom(const CheckElementIsOnTopProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.CheckElementIsOnTopProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckElementIsOnTopProto::IsInitialized() const {
  return true;
}

void CheckElementIsOnTopProto::InternalSwap(CheckElementIsOnTopProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

std::string CheckElementIsOnTopProto::GetTypeName() const {
  return "autofill_assistant.CheckElementIsOnTopProto";
}


// ===================================================================

class SendClickEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SendClickEventProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SendClickEventProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
SendClickEventProto::_Internal::client_id(const SendClickEventProto* msg) {
  return *msg->client_id_;
}
SendClickEventProto::SendClickEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SendClickEventProto)
}
SendClickEventProto::SendClickEventProto(const SendClickEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SendClickEventProto)
}

inline void SendClickEventProto::SharedCtor() {
client_id_ = nullptr;
}

SendClickEventProto::~SendClickEventProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SendClickEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendClickEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void SendClickEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendClickEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SendClickEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendClickEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendClickEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SendClickEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SendClickEventProto)
  return target;
}

size_t SendClickEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SendClickEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendClickEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendClickEventProto*>(
      &from));
}

void SendClickEventProto::MergeFrom(const SendClickEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SendClickEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendClickEventProto::CopyFrom(const SendClickEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SendClickEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendClickEventProto::IsInitialized() const {
  return true;
}

void SendClickEventProto::InternalSwap(SendClickEventProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

std::string SendClickEventProto::GetTypeName() const {
  return "autofill_assistant.SendClickEventProto";
}


// ===================================================================

class SendTapEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SendTapEventProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SendTapEventProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
SendTapEventProto::_Internal::client_id(const SendTapEventProto* msg) {
  return *msg->client_id_;
}
SendTapEventProto::SendTapEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SendTapEventProto)
}
SendTapEventProto::SendTapEventProto(const SendTapEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SendTapEventProto)
}

inline void SendTapEventProto::SharedCtor() {
client_id_ = nullptr;
}

SendTapEventProto::~SendTapEventProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SendTapEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendTapEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void SendTapEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTapEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SendTapEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendTapEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendTapEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SendTapEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SendTapEventProto)
  return target;
}

size_t SendTapEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SendTapEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendTapEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendTapEventProto*>(
      &from));
}

void SendTapEventProto::MergeFrom(const SendTapEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SendTapEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendTapEventProto::CopyFrom(const SendTapEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SendTapEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTapEventProto::IsInitialized() const {
  return true;
}

void SendTapEventProto::InternalSwap(SendTapEventProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

std::string SendTapEventProto::GetTypeName() const {
  return "autofill_assistant.SendTapEventProto";
}


// ===================================================================

class JsClickProto::_Internal {
 public:
  using HasBits = decltype(std::declval<JsClickProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const JsClickProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
JsClickProto::_Internal::client_id(const JsClickProto* msg) {
  return *msg->client_id_;
}
JsClickProto::JsClickProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.JsClickProto)
}
JsClickProto::JsClickProto(const JsClickProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.JsClickProto)
}

inline void JsClickProto::SharedCtor() {
client_id_ = nullptr;
}

JsClickProto::~JsClickProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.JsClickProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JsClickProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void JsClickProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JsClickProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.JsClickProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* JsClickProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JsClickProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.JsClickProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.JsClickProto)
  return target;
}

size_t JsClickProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.JsClickProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JsClickProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const JsClickProto*>(
      &from));
}

void JsClickProto::MergeFrom(const JsClickProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.JsClickProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void JsClickProto::CopyFrom(const JsClickProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.JsClickProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JsClickProto::IsInitialized() const {
  return true;
}

void JsClickProto::InternalSwap(JsClickProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

std::string JsClickProto::GetTypeName() const {
  return "autofill_assistant.JsClickProto";
}


// ===================================================================

class SendKeystrokeEventsProto_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<SendKeystrokeEventsProto_Result>()._has_bits_);
  static void set_has_months_since_password_last_used(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SendKeystrokeEventsProto_Result::SendKeystrokeEventsProto_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SendKeystrokeEventsProto.Result)
}
SendKeystrokeEventsProto_Result::SendKeystrokeEventsProto_Result(const SendKeystrokeEventsProto_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  months_since_password_last_used_ = from.months_since_password_last_used_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SendKeystrokeEventsProto.Result)
}

inline void SendKeystrokeEventsProto_Result::SharedCtor() {
months_since_password_last_used_ = 0;
}

SendKeystrokeEventsProto_Result::~SendKeystrokeEventsProto_Result() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SendKeystrokeEventsProto.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendKeystrokeEventsProto_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendKeystrokeEventsProto_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendKeystrokeEventsProto_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SendKeystrokeEventsProto.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  months_since_password_last_used_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendKeystrokeEventsProto_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 months_since_password_last_used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_months_since_password_last_used(&has_bits);
          months_since_password_last_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendKeystrokeEventsProto_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SendKeystrokeEventsProto.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 months_since_password_last_used = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_months_since_password_last_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SendKeystrokeEventsProto.Result)
  return target;
}

size_t SendKeystrokeEventsProto_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SendKeystrokeEventsProto.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 months_since_password_last_used = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_months_since_password_last_used());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendKeystrokeEventsProto_Result::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendKeystrokeEventsProto_Result*>(
      &from));
}

void SendKeystrokeEventsProto_Result::MergeFrom(const SendKeystrokeEventsProto_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SendKeystrokeEventsProto.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_months_since_password_last_used()) {
    _internal_set_months_since_password_last_used(from._internal_months_since_password_last_used());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendKeystrokeEventsProto_Result::CopyFrom(const SendKeystrokeEventsProto_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SendKeystrokeEventsProto.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendKeystrokeEventsProto_Result::IsInitialized() const {
  return true;
}

void SendKeystrokeEventsProto_Result::InternalSwap(SendKeystrokeEventsProto_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(months_since_password_last_used_, other->months_since_password_last_used_);
}

std::string SendKeystrokeEventsProto_Result::GetTypeName() const {
  return "autofill_assistant.SendKeystrokeEventsProto.Result";
}


// ===================================================================

class SendKeystrokeEventsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SendKeystrokeEventsProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SendKeystrokeEventsProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::TextValue& value(const SendKeystrokeEventsProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delay_in_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill_assistant::ClientIdProto&
SendKeystrokeEventsProto::_Internal::client_id(const SendKeystrokeEventsProto* msg) {
  return *msg->client_id_;
}
const ::autofill_assistant::TextValue&
SendKeystrokeEventsProto::_Internal::value(const SendKeystrokeEventsProto* msg) {
  return *msg->value_;
}
void SendKeystrokeEventsProto::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SendKeystrokeEventsProto::SendKeystrokeEventsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SendKeystrokeEventsProto)
}
SendKeystrokeEventsProto::SendKeystrokeEventsProto(const SendKeystrokeEventsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::autofill_assistant::TextValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  delay_in_ms_ = from.delay_in_ms_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SendKeystrokeEventsProto)
}

inline void SendKeystrokeEventsProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delay_in_ms_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(delay_in_ms_));
}

SendKeystrokeEventsProto::~SendKeystrokeEventsProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SendKeystrokeEventsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendKeystrokeEventsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
  if (this != internal_default_instance()) delete value_;
}

void SendKeystrokeEventsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendKeystrokeEventsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SendKeystrokeEventsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  delay_in_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendKeystrokeEventsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.TextValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delay_in_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_delay_in_ms(&has_bits);
          delay_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendKeystrokeEventsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SendKeystrokeEventsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.TextValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional int32 delay_in_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_delay_in_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SendKeystrokeEventsProto)
  return target;
}

size_t SendKeystrokeEventsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SendKeystrokeEventsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional .autofill_assistant.TextValue value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional int32 delay_in_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delay_in_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendKeystrokeEventsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendKeystrokeEventsProto*>(
      &from));
}

void SendKeystrokeEventsProto::MergeFrom(const SendKeystrokeEventsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SendKeystrokeEventsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::autofill_assistant::TextValue::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      delay_in_ms_ = from.delay_in_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendKeystrokeEventsProto::CopyFrom(const SendKeystrokeEventsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SendKeystrokeEventsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendKeystrokeEventsProto::IsInitialized() const {
  return true;
}

void SendKeystrokeEventsProto::InternalSwap(SendKeystrokeEventsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendKeystrokeEventsProto, delay_in_ms_)
      + sizeof(SendKeystrokeEventsProto::delay_in_ms_)
      - PROTOBUF_FIELD_OFFSET(SendKeystrokeEventsProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string SendKeystrokeEventsProto::GetTypeName() const {
  return "autofill_assistant.SendKeystrokeEventsProto";
}


// ===================================================================

class SendKeyEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SendKeyEventProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SendKeyEventProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::KeyEvent& key_event(const SendKeyEventProto* msg);
  static void set_has_key_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ClientIdProto&
SendKeyEventProto::_Internal::client_id(const SendKeyEventProto* msg) {
  return *msg->client_id_;
}
const ::autofill_assistant::KeyEvent&
SendKeyEventProto::_Internal::key_event(const SendKeyEventProto* msg) {
  return *msg->key_event_;
}
void SendKeyEventProto::clear_key_event() {
  if (key_event_ != nullptr) key_event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SendKeyEventProto::SendKeyEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SendKeyEventProto)
}
SendKeyEventProto::SendKeyEventProto(const SendKeyEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  if (from._internal_has_key_event()) {
    key_event_ = new ::autofill_assistant::KeyEvent(*from.key_event_);
  } else {
    key_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SendKeyEventProto)
}

inline void SendKeyEventProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_event_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(key_event_));
}

SendKeyEventProto::~SendKeyEventProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SendKeyEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendKeyEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
  if (this != internal_default_instance()) delete key_event_;
}

void SendKeyEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendKeyEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SendKeyEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(key_event_ != nullptr);
      key_event_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendKeyEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.KeyEvent key_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendKeyEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SendKeyEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.KeyEvent key_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key_event(this),
        _Internal::key_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SendKeyEventProto)
  return target;
}

size_t SendKeyEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SendKeyEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional .autofill_assistant.KeyEvent key_event = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_event_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendKeyEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendKeyEventProto*>(
      &from));
}

void SendKeyEventProto::MergeFrom(const SendKeyEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SendKeyEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_key_event()->::autofill_assistant::KeyEvent::MergeFrom(from._internal_key_event());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendKeyEventProto::CopyFrom(const SendKeyEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SendKeyEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendKeyEventProto::IsInitialized() const {
  return true;
}

void SendKeyEventProto::InternalSwap(SendKeyEventProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendKeyEventProto, key_event_)
      + sizeof(SendKeyEventProto::key_event_)
      - PROTOBUF_FIELD_OFFSET(SendKeyEventProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string SendKeyEventProto::GetTypeName() const {
  return "autofill_assistant.SendKeyEventProto";
}


// ===================================================================

class SendChangeEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChangeEventProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SendChangeEventProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
SendChangeEventProto::_Internal::client_id(const SendChangeEventProto* msg) {
  return *msg->client_id_;
}
SendChangeEventProto::SendChangeEventProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SendChangeEventProto)
}
SendChangeEventProto::SendChangeEventProto(const SendChangeEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SendChangeEventProto)
}

inline void SendChangeEventProto::SharedCtor() {
client_id_ = nullptr;
}

SendChangeEventProto::~SendChangeEventProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SendChangeEventProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendChangeEventProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void SendChangeEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendChangeEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SendChangeEventProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendChangeEventProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendChangeEventProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SendChangeEventProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SendChangeEventProto)
  return target;
}

size_t SendChangeEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SendChangeEventProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendChangeEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendChangeEventProto*>(
      &from));
}

void SendChangeEventProto::MergeFrom(const SendChangeEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SendChangeEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendChangeEventProto::CopyFrom(const SendChangeEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SendChangeEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChangeEventProto::IsInitialized() const {
  return true;
}

void SendChangeEventProto::InternalSwap(SendChangeEventProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

std::string SendChangeEventProto::GetTypeName() const {
  return "autofill_assistant.SendChangeEventProto";
}


// ===================================================================

class SetElementAttributeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetElementAttributeProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SetElementAttributeProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::TextValue& value(const SetElementAttributeProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ClientIdProto&
SetElementAttributeProto::_Internal::client_id(const SetElementAttributeProto* msg) {
  return *msg->client_id_;
}
const ::autofill_assistant::TextValue&
SetElementAttributeProto::_Internal::value(const SetElementAttributeProto* msg) {
  return *msg->value_;
}
void SetElementAttributeProto::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SetElementAttributeProto::SetElementAttributeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  attribute_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SetElementAttributeProto)
}
SetElementAttributeProto::SetElementAttributeProto(const SetElementAttributeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::autofill_assistant::TextValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SetElementAttributeProto)
}

inline void SetElementAttributeProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(value_));
}

SetElementAttributeProto::~SetElementAttributeProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SetElementAttributeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetElementAttributeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
  if (this != internal_default_instance()) delete value_;
}

void SetElementAttributeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetElementAttributeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SetElementAttributeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetElementAttributeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attribute();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.TextValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetElementAttributeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SetElementAttributeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // repeated string attribute = 2;
  for (int i = 0, n = this->_internal_attribute_size(); i < n; i++) {
    const auto& s = this->_internal_attribute(i);
    target = stream->WriteString(2, s, target);
  }

  // optional .autofill_assistant.TextValue value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SetElementAttributeProto)
  return target;
}

size_t SetElementAttributeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SetElementAttributeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attribute = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(attribute_.size());
  for (int i = 0, n = attribute_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      attribute_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional .autofill_assistant.TextValue value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetElementAttributeProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetElementAttributeProto*>(
      &from));
}

void SetElementAttributeProto::MergeFrom(const SetElementAttributeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SetElementAttributeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::autofill_assistant::TextValue::MergeFrom(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetElementAttributeProto::CopyFrom(const SetElementAttributeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SetElementAttributeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetElementAttributeProto::IsInitialized() const {
  return true;
}

void SetElementAttributeProto::InternalSwap(SetElementAttributeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetElementAttributeProto, value_)
      + sizeof(SetElementAttributeProto::value_)
      - PROTOBUF_FIELD_OFFSET(SetElementAttributeProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string SetElementAttributeProto::GetTypeName() const {
  return "autofill_assistant.SetElementAttributeProto";
}


// ===================================================================

class SelectFieldValueProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectFieldValueProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SelectFieldValueProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
SelectFieldValueProto::_Internal::client_id(const SelectFieldValueProto* msg) {
  return *msg->client_id_;
}
SelectFieldValueProto::SelectFieldValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SelectFieldValueProto)
}
SelectFieldValueProto::SelectFieldValueProto(const SelectFieldValueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SelectFieldValueProto)
}

inline void SelectFieldValueProto::SharedCtor() {
client_id_ = nullptr;
}

SelectFieldValueProto::~SelectFieldValueProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SelectFieldValueProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectFieldValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void SelectFieldValueProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectFieldValueProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SelectFieldValueProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectFieldValueProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectFieldValueProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SelectFieldValueProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SelectFieldValueProto)
  return target;
}

size_t SelectFieldValueProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SelectFieldValueProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectFieldValueProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectFieldValueProto*>(
      &from));
}

void SelectFieldValueProto::MergeFrom(const SelectFieldValueProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SelectFieldValueProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectFieldValueProto::CopyFrom(const SelectFieldValueProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SelectFieldValueProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectFieldValueProto::IsInitialized() const {
  return true;
}

void SelectFieldValueProto::InternalSwap(SelectFieldValueProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

std::string SelectFieldValueProto::GetTypeName() const {
  return "autofill_assistant.SelectFieldValueProto";
}


// ===================================================================

class FocusFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FocusFieldProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const FocusFieldProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
FocusFieldProto::_Internal::client_id(const FocusFieldProto* msg) {
  return *msg->client_id_;
}
FocusFieldProto::FocusFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.FocusFieldProto)
}
FocusFieldProto::FocusFieldProto(const FocusFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.FocusFieldProto)
}

inline void FocusFieldProto::SharedCtor() {
client_id_ = nullptr;
}

FocusFieldProto::~FocusFieldProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.FocusFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FocusFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void FocusFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FocusFieldProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.FocusFieldProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FocusFieldProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FocusFieldProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.FocusFieldProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.FocusFieldProto)
  return target;
}

size_t FocusFieldProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.FocusFieldProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FocusFieldProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FocusFieldProto*>(
      &from));
}

void FocusFieldProto::MergeFrom(const FocusFieldProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.FocusFieldProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FocusFieldProto::CopyFrom(const FocusFieldProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.FocusFieldProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocusFieldProto::IsInitialized() const {
  return true;
}

void FocusFieldProto::InternalSwap(FocusFieldProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

std::string FocusFieldProto::GetTypeName() const {
  return "autofill_assistant.FocusFieldProto";
}


// ===================================================================

class BlurFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BlurFieldProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const BlurFieldProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
BlurFieldProto::_Internal::client_id(const BlurFieldProto* msg) {
  return *msg->client_id_;
}
BlurFieldProto::BlurFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.BlurFieldProto)
}
BlurFieldProto::BlurFieldProto(const BlurFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.BlurFieldProto)
}

inline void BlurFieldProto::SharedCtor() {
client_id_ = nullptr;
}

BlurFieldProto::~BlurFieldProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.BlurFieldProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlurFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void BlurFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlurFieldProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.BlurFieldProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlurFieldProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlurFieldProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.BlurFieldProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.BlurFieldProto)
  return target;
}

size_t BlurFieldProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.BlurFieldProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlurFieldProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlurFieldProto*>(
      &from));
}

void BlurFieldProto::MergeFrom(const BlurFieldProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.BlurFieldProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlurFieldProto::CopyFrom(const BlurFieldProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.BlurFieldProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlurFieldProto::IsInitialized() const {
  return true;
}

void BlurFieldProto::InternalSwap(BlurFieldProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

std::string BlurFieldProto::GetTypeName() const {
  return "autofill_assistant.BlurFieldProto";
}


// ===================================================================

class SelectOptionElementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectOptionElementProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& select_id(const SelectOptionElementProto* msg);
  static void set_has_select_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::ClientIdProto& option_id(const SelectOptionElementProto* msg);
  static void set_has_option_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ClientIdProto&
SelectOptionElementProto::_Internal::select_id(const SelectOptionElementProto* msg) {
  return *msg->select_id_;
}
const ::autofill_assistant::ClientIdProto&
SelectOptionElementProto::_Internal::option_id(const SelectOptionElementProto* msg) {
  return *msg->option_id_;
}
SelectOptionElementProto::SelectOptionElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SelectOptionElementProto)
}
SelectOptionElementProto::SelectOptionElementProto(const SelectOptionElementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_select_id()) {
    select_id_ = new ::autofill_assistant::ClientIdProto(*from.select_id_);
  } else {
    select_id_ = nullptr;
  }
  if (from._internal_has_option_id()) {
    option_id_ = new ::autofill_assistant::ClientIdProto(*from.option_id_);
  } else {
    option_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SelectOptionElementProto)
}

inline void SelectOptionElementProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&select_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&option_id_) -
    reinterpret_cast<char*>(&select_id_)) + sizeof(option_id_));
}

SelectOptionElementProto::~SelectOptionElementProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SelectOptionElementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectOptionElementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete select_id_;
  if (this != internal_default_instance()) delete option_id_;
}

void SelectOptionElementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectOptionElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SelectOptionElementProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(select_id_ != nullptr);
      select_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(option_id_ != nullptr);
      option_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectOptionElementProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto select_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.ClientIdProto option_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_option_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectOptionElementProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SelectOptionElementProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto select_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::select_id(this),
        _Internal::select_id(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.ClientIdProto option_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::option_id(this),
        _Internal::option_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SelectOptionElementProto)
  return target;
}

size_t SelectOptionElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SelectOptionElementProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ClientIdProto select_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *select_id_);
    }

    // optional .autofill_assistant.ClientIdProto option_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *option_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectOptionElementProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectOptionElementProto*>(
      &from));
}

void SelectOptionElementProto::MergeFrom(const SelectOptionElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SelectOptionElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_select_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_select_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_option_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_option_id());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectOptionElementProto::CopyFrom(const SelectOptionElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SelectOptionElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectOptionElementProto::IsInitialized() const {
  return true;
}

void SelectOptionElementProto::InternalSwap(SelectOptionElementProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectOptionElementProto, option_id_)
      + sizeof(SelectOptionElementProto::option_id_)
      - PROTOBUF_FIELD_OFFSET(SelectOptionElementProto, select_id_)>(
          reinterpret_cast<char*>(&select_id_),
          reinterpret_cast<char*>(&other->select_id_));
}

std::string SelectOptionElementProto::GetTypeName() const {
  return "autofill_assistant.SelectOptionElementProto";
}


// ===================================================================

class CheckElementTagProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckElementTagProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const CheckElementTagProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::ClientIdProto&
CheckElementTagProto::_Internal::client_id(const CheckElementTagProto* msg) {
  return *msg->client_id_;
}
CheckElementTagProto::CheckElementTagProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  any_of_tag_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.CheckElementTagProto)
}
CheckElementTagProto::CheckElementTagProto(const CheckElementTagProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      any_of_tag_(from.any_of_tag_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.CheckElementTagProto)
}

inline void CheckElementTagProto::SharedCtor() {
client_id_ = nullptr;
}

CheckElementTagProto::~CheckElementTagProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.CheckElementTagProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckElementTagProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void CheckElementTagProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckElementTagProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.CheckElementTagProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_of_tag_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CheckElementTagProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string any_of_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_of_tag();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckElementTagProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.CheckElementTagProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // repeated string any_of_tag = 2;
  for (int i = 0, n = this->_internal_any_of_tag_size(); i < n; i++) {
    const auto& s = this->_internal_any_of_tag(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.CheckElementTagProto)
  return target;
}

size_t CheckElementTagProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.CheckElementTagProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_of_tag = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_of_tag_.size());
  for (int i = 0, n = any_of_tag_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_of_tag_.Get(i));
  }

  // optional .autofill_assistant.ClientIdProto client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckElementTagProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CheckElementTagProto*>(
      &from));
}

void CheckElementTagProto::MergeFrom(const CheckElementTagProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.CheckElementTagProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  any_of_tag_.MergeFrom(from.any_of_tag_);
  if (from._internal_has_client_id()) {
    _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CheckElementTagProto::CopyFrom(const CheckElementTagProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.CheckElementTagProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckElementTagProto::IsInitialized() const {
  return true;
}

void CheckElementTagProto::InternalSwap(CheckElementTagProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_of_tag_.InternalSwap(&other->any_of_tag_);
  swap(client_id_, other->client_id_);
}

std::string CheckElementTagProto::GetTypeName() const {
  return "autofill_assistant.CheckElementTagProto";
}


// ===================================================================

class CheckOptionElementProto_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckOptionElementProto_Result>()._has_bits_);
  static void set_has_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CheckOptionElementProto_Result::CheckOptionElementProto_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.CheckOptionElementProto.Result)
}
CheckOptionElementProto_Result::CheckOptionElementProto_Result(const CheckOptionElementProto_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  match_ = from.match_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.CheckOptionElementProto.Result)
}

inline void CheckOptionElementProto_Result::SharedCtor() {
match_ = false;
}

CheckOptionElementProto_Result::~CheckOptionElementProto_Result() {
  // @@protoc_insertion_point(destructor:autofill_assistant.CheckOptionElementProto.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckOptionElementProto_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CheckOptionElementProto_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckOptionElementProto_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.CheckOptionElementProto.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CheckOptionElementProto_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match(&has_bits);
          match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckOptionElementProto_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.CheckOptionElementProto.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.CheckOptionElementProto.Result)
  return target;
}

size_t CheckOptionElementProto_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.CheckOptionElementProto.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool match = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckOptionElementProto_Result::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CheckOptionElementProto_Result*>(
      &from));
}

void CheckOptionElementProto_Result::MergeFrom(const CheckOptionElementProto_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.CheckOptionElementProto.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match()) {
    _internal_set_match(from._internal_match());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CheckOptionElementProto_Result::CopyFrom(const CheckOptionElementProto_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.CheckOptionElementProto.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckOptionElementProto_Result::IsInitialized() const {
  return true;
}

void CheckOptionElementProto_Result::InternalSwap(CheckOptionElementProto_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_, other->match_);
}

std::string CheckOptionElementProto_Result::GetTypeName() const {
  return "autofill_assistant.CheckOptionElementProto.Result";
}


// ===================================================================

class CheckOptionElementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckOptionElementProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& select_id(const CheckOptionElementProto* msg);
  static void set_has_select_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::ClientIdProto& option_id(const CheckOptionElementProto* msg);
  static void set_has_option_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mismatch_should_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill_assistant::ClientIdProto&
CheckOptionElementProto::_Internal::select_id(const CheckOptionElementProto* msg) {
  return *msg->select_id_;
}
const ::autofill_assistant::ClientIdProto&
CheckOptionElementProto::_Internal::option_id(const CheckOptionElementProto* msg) {
  return *msg->option_id_;
}
CheckOptionElementProto::CheckOptionElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.CheckOptionElementProto)
}
CheckOptionElementProto::CheckOptionElementProto(const CheckOptionElementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_select_id()) {
    select_id_ = new ::autofill_assistant::ClientIdProto(*from.select_id_);
  } else {
    select_id_ = nullptr;
  }
  if (from._internal_has_option_id()) {
    option_id_ = new ::autofill_assistant::ClientIdProto(*from.option_id_);
  } else {
    option_id_ = nullptr;
  }
  mismatch_should_fail_ = from.mismatch_should_fail_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.CheckOptionElementProto)
}

inline void CheckOptionElementProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&select_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mismatch_should_fail_) -
    reinterpret_cast<char*>(&select_id_)) + sizeof(mismatch_should_fail_));
}

CheckOptionElementProto::~CheckOptionElementProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.CheckOptionElementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckOptionElementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete select_id_;
  if (this != internal_default_instance()) delete option_id_;
}

void CheckOptionElementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckOptionElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.CheckOptionElementProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(select_id_ != nullptr);
      select_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(option_id_ != nullptr);
      option_id_->Clear();
    }
  }
  mismatch_should_fail_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CheckOptionElementProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto select_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.ClientIdProto option_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_option_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mismatch_should_fail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mismatch_should_fail(&has_bits);
          mismatch_should_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckOptionElementProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.CheckOptionElementProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto select_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::select_id(this),
        _Internal::select_id(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.ClientIdProto option_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::option_id(this),
        _Internal::option_id(this).GetCachedSize(), target, stream);
  }

  // optional bool mismatch_should_fail = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_mismatch_should_fail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.CheckOptionElementProto)
  return target;
}

size_t CheckOptionElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.CheckOptionElementProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .autofill_assistant.ClientIdProto select_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *select_id_);
    }

    // optional .autofill_assistant.ClientIdProto option_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *option_id_);
    }

    // optional bool mismatch_should_fail = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckOptionElementProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CheckOptionElementProto*>(
      &from));
}

void CheckOptionElementProto::MergeFrom(const CheckOptionElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.CheckOptionElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_select_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_select_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_option_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_option_id());
    }
    if (cached_has_bits & 0x00000004u) {
      mismatch_should_fail_ = from.mismatch_should_fail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CheckOptionElementProto::CopyFrom(const CheckOptionElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.CheckOptionElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckOptionElementProto::IsInitialized() const {
  return true;
}

void CheckOptionElementProto::InternalSwap(CheckOptionElementProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckOptionElementProto, mismatch_should_fail_)
      + sizeof(CheckOptionElementProto::mismatch_should_fail_)
      - PROTOBUF_FIELD_OFFSET(CheckOptionElementProto, select_id_)>(
          reinterpret_cast<char*>(&select_id_),
          reinterpret_cast<char*>(&other->select_id_));
}

std::string CheckOptionElementProto::GetTypeName() const {
  return "autofill_assistant.CheckOptionElementProto";
}


// ===================================================================

class ExecuteJsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecuteJsProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const ExecuteJsProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_js_snippet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill_assistant::ClientIdProto&
ExecuteJsProto::_Internal::client_id(const ExecuteJsProto* msg) {
  return *msg->client_id_;
}
ExecuteJsProto::ExecuteJsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ExecuteJsProto)
}
ExecuteJsProto::ExecuteJsProto(const ExecuteJsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  js_snippet_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    js_snippet_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_js_snippet()) {
    js_snippet_.Set(from._internal_js_snippet(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  timeout_ms_ = from.timeout_ms_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ExecuteJsProto)
}

inline void ExecuteJsProto::SharedCtor() {
js_snippet_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  js_snippet_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(timeout_ms_));
}

ExecuteJsProto::~ExecuteJsProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ExecuteJsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteJsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  js_snippet_.Destroy();
  if (this != internal_default_instance()) delete client_id_;
}

void ExecuteJsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteJsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ExecuteJsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      js_snippet_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
  }
  timeout_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExecuteJsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string js_snippet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_js_snippet();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timeout_ms(&has_bits);
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteJsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ExecuteJsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional string js_snippet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_js_snippet(), target);
  }

  // optional int32 timeout_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ExecuteJsProto)
  return target;
}

size_t ExecuteJsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ExecuteJsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string js_snippet = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_js_snippet());
    }

    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional int32 timeout_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteJsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExecuteJsProto*>(
      &from));
}

void ExecuteJsProto::MergeFrom(const ExecuteJsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ExecuteJsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_js_snippet(from._internal_js_snippet());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ms_ = from.timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExecuteJsProto::CopyFrom(const ExecuteJsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ExecuteJsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteJsProto::IsInitialized() const {
  return true;
}

void ExecuteJsProto::InternalSwap(ExecuteJsProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &js_snippet_, lhs_arena,
      &other->js_snippet_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteJsProto, timeout_ms_)
      + sizeof(ExecuteJsProto::timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(ExecuteJsProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string ExecuteJsProto::GetTypeName() const {
  return "autofill_assistant.ExecuteJsProto";
}


// ===================================================================

class SetNativeValueProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetNativeValueProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SetNativeValueProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::TextValue& value(const SetNativeValueProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ClientIdProto&
SetNativeValueProto::_Internal::client_id(const SetNativeValueProto* msg) {
  return *msg->client_id_;
}
const ::autofill_assistant::TextValue&
SetNativeValueProto::_Internal::value(const SetNativeValueProto* msg) {
  return *msg->value_;
}
void SetNativeValueProto::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SetNativeValueProto::SetNativeValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SetNativeValueProto)
}
SetNativeValueProto::SetNativeValueProto(const SetNativeValueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::autofill_assistant::TextValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SetNativeValueProto)
}

inline void SetNativeValueProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(value_));
}

SetNativeValueProto::~SetNativeValueProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SetNativeValueProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetNativeValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
  if (this != internal_default_instance()) delete value_;
}

void SetNativeValueProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetNativeValueProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SetNativeValueProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetNativeValueProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.TextValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetNativeValueProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SetNativeValueProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.TextValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SetNativeValueProto)
  return target;
}

size_t SetNativeValueProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SetNativeValueProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional .autofill_assistant.TextValue value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetNativeValueProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetNativeValueProto*>(
      &from));
}

void SetNativeValueProto::MergeFrom(const SetNativeValueProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SetNativeValueProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::autofill_assistant::TextValue::MergeFrom(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetNativeValueProto::CopyFrom(const SetNativeValueProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SetNativeValueProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNativeValueProto::IsInitialized() const {
  return true;
}

void SetNativeValueProto::InternalSwap(SetNativeValueProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetNativeValueProto, value_)
      + sizeof(SetNativeValueProto::value_)
      - PROTOBUF_FIELD_OFFSET(SetNativeValueProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string SetNativeValueProto::GetTypeName() const {
  return "autofill_assistant.SetNativeValueProto";
}


// ===================================================================

class SetNativeCheckedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetNativeCheckedProto>()._has_bits_);
  static const ::autofill_assistant::ClientIdProto& client_id(const SetNativeCheckedProto* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_checked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ClientIdProto&
SetNativeCheckedProto::_Internal::client_id(const SetNativeCheckedProto* msg) {
  return *msg->client_id_;
}
SetNativeCheckedProto::SetNativeCheckedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SetNativeCheckedProto)
}
SetNativeCheckedProto::SetNativeCheckedProto(const SetNativeCheckedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::autofill_assistant::ClientIdProto(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  checked_ = from.checked_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SetNativeCheckedProto)
}

inline void SetNativeCheckedProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&checked_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(checked_));
}

SetNativeCheckedProto::~SetNativeCheckedProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SetNativeCheckedProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetNativeCheckedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_id_;
}

void SetNativeCheckedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetNativeCheckedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SetNativeCheckedProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_id_ != nullptr);
    client_id_->Clear();
  }
  checked_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetNativeCheckedProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ClientIdProto client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool checked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_checked(&has_bits);
          checked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetNativeCheckedProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SetNativeCheckedProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ClientIdProto client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_id(this),
        _Internal::client_id(this).GetCachedSize(), target, stream);
  }

  // optional bool checked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_checked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SetNativeCheckedProto)
  return target;
}

size_t SetNativeCheckedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SetNativeCheckedProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ClientIdProto client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional bool checked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetNativeCheckedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetNativeCheckedProto*>(
      &from));
}

void SetNativeCheckedProto::MergeFrom(const SetNativeCheckedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SetNativeCheckedProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::autofill_assistant::ClientIdProto::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      checked_ = from.checked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetNativeCheckedProto::CopyFrom(const SetNativeCheckedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SetNativeCheckedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNativeCheckedProto::IsInitialized() const {
  return true;
}

void SetNativeCheckedProto::InternalSwap(SetNativeCheckedProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetNativeCheckedProto, checked_)
      + sizeof(SetNativeCheckedProto::checked_)
      - PROTOBUF_FIELD_OFFSET(SetNativeCheckedProto, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

std::string SetNativeCheckedProto::GetTypeName() const {
  return "autofill_assistant.SetNativeCheckedProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill_assistant::ClientIdProto*
Arena::CreateMaybeMessage< ::autofill_assistant::ClientIdProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ClientIdProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ScrollIntoViewProto*
Arena::CreateMaybeMessage< ::autofill_assistant::ScrollIntoViewProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ScrollIntoViewProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ScrollIntoViewIfNeededProto*
Arena::CreateMaybeMessage< ::autofill_assistant::ScrollIntoViewIfNeededProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ScrollIntoViewIfNeededProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ScrollDistance*
Arena::CreateMaybeMessage< ::autofill_assistant::ScrollDistance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ScrollDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ScrollWindowProto*
Arena::CreateMaybeMessage< ::autofill_assistant::ScrollWindowProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ScrollWindowProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ScrollContainerProto*
Arena::CreateMaybeMessage< ::autofill_assistant::ScrollContainerProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ScrollContainerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::WaitForDocumentToBecomeInteractiveProto*
Arena::CreateMaybeMessage< ::autofill_assistant::WaitForDocumentToBecomeInteractiveProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::WaitForDocumentToBecomeInteractiveProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::WaitForDocumentToBecomeCompleteProto*
Arena::CreateMaybeMessage< ::autofill_assistant::WaitForDocumentToBecomeCompleteProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::WaitForDocumentToBecomeCompleteProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::WaitForElementToBecomeStableProto*
Arena::CreateMaybeMessage< ::autofill_assistant::WaitForElementToBecomeStableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::WaitForElementToBecomeStableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::CheckElementIsOnTopProto*
Arena::CreateMaybeMessage< ::autofill_assistant::CheckElementIsOnTopProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::CheckElementIsOnTopProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SendClickEventProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SendClickEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SendClickEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SendTapEventProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SendTapEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SendTapEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::JsClickProto*
Arena::CreateMaybeMessage< ::autofill_assistant::JsClickProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::JsClickProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SendKeystrokeEventsProto_Result*
Arena::CreateMaybeMessage< ::autofill_assistant::SendKeystrokeEventsProto_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SendKeystrokeEventsProto_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SendKeystrokeEventsProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SendKeystrokeEventsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SendKeystrokeEventsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SendKeyEventProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SendKeyEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SendKeyEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SendChangeEventProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SendChangeEventProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SendChangeEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SetElementAttributeProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SetElementAttributeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SetElementAttributeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SelectFieldValueProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SelectFieldValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SelectFieldValueProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::FocusFieldProto*
Arena::CreateMaybeMessage< ::autofill_assistant::FocusFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::FocusFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::BlurFieldProto*
Arena::CreateMaybeMessage< ::autofill_assistant::BlurFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::BlurFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SelectOptionElementProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SelectOptionElementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SelectOptionElementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::CheckElementTagProto*
Arena::CreateMaybeMessage< ::autofill_assistant::CheckElementTagProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::CheckElementTagProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::CheckOptionElementProto_Result*
Arena::CreateMaybeMessage< ::autofill_assistant::CheckOptionElementProto_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::CheckOptionElementProto_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::CheckOptionElementProto*
Arena::CreateMaybeMessage< ::autofill_assistant::CheckOptionElementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::CheckOptionElementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ExecuteJsProto*
Arena::CreateMaybeMessage< ::autofill_assistant::ExecuteJsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ExecuteJsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SetNativeValueProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SetNativeValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SetNativeValueProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SetNativeCheckedProto*
Arena::CreateMaybeMessage< ::autofill_assistant::SetNativeCheckedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SetNativeCheckedProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
