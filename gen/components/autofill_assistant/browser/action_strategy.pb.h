// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/action_strategy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2faction_5fstrategy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2faction_5fstrategy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fautofill_5fassistant_2fbrowser_2faction_5fstrategy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fautofill_5fassistant_2fbrowser_2faction_5fstrategy_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace autofill_assistant {

enum KeyboardValueFillStrategy : int {
  UNSPECIFIED_KEYBAORD_STRATEGY = 0,
  SET_VALUE = 1,
  SIMULATE_KEY_PRESSES = 2,
  SIMULATE_KEY_PRESSES_SELECT_VALUE = 3,
  SIMULATE_KEY_PRESSES_FOCUS = 4
};
bool KeyboardValueFillStrategy_IsValid(int value);
constexpr KeyboardValueFillStrategy KeyboardValueFillStrategy_MIN = UNSPECIFIED_KEYBAORD_STRATEGY;
constexpr KeyboardValueFillStrategy KeyboardValueFillStrategy_MAX = SIMULATE_KEY_PRESSES_FOCUS;
constexpr int KeyboardValueFillStrategy_ARRAYSIZE = KeyboardValueFillStrategy_MAX + 1;

const std::string& KeyboardValueFillStrategy_Name(KeyboardValueFillStrategy value);
template<typename T>
inline const std::string& KeyboardValueFillStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyboardValueFillStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyboardValueFillStrategy_Name.");
  return KeyboardValueFillStrategy_Name(static_cast<KeyboardValueFillStrategy>(enum_t_value));
}
bool KeyboardValueFillStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KeyboardValueFillStrategy* value);
enum DropdownSelectStrategy : int {
  UNSPECIFIED_SELECT_STRATEGY = 0,
  VALUE_MATCH = 1,
  LABEL_MATCH = 2,
  LABEL_STARTS_WITH = 3
};
bool DropdownSelectStrategy_IsValid(int value);
constexpr DropdownSelectStrategy DropdownSelectStrategy_MIN = UNSPECIFIED_SELECT_STRATEGY;
constexpr DropdownSelectStrategy DropdownSelectStrategy_MAX = LABEL_STARTS_WITH;
constexpr int DropdownSelectStrategy_ARRAYSIZE = DropdownSelectStrategy_MAX + 1;

const std::string& DropdownSelectStrategy_Name(DropdownSelectStrategy value);
template<typename T>
inline const std::string& DropdownSelectStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DropdownSelectStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DropdownSelectStrategy_Name.");
  return DropdownSelectStrategy_Name(static_cast<DropdownSelectStrategy>(enum_t_value));
}
bool DropdownSelectStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DropdownSelectStrategy* value);
enum ClickType : int {
  NOT_SET = 0,
  TAP = 1,
  JAVASCRIPT = 2,
  CLICK = 3
};
bool ClickType_IsValid(int value);
constexpr ClickType ClickType_MIN = NOT_SET;
constexpr ClickType ClickType_MAX = CLICK;
constexpr int ClickType_ARRAYSIZE = ClickType_MAX + 1;

const std::string& ClickType_Name(ClickType value);
template<typename T>
inline const std::string& ClickType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClickType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClickType_Name.");
  return ClickType_Name(static_cast<ClickType>(enum_t_value));
}
bool ClickType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClickType* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill_assistant

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autofill_assistant::KeyboardValueFillStrategy> : ::std::true_type {};
template <> struct is_proto_enum< ::autofill_assistant::DropdownSelectStrategy> : ::std::true_type {};
template <> struct is_proto_enum< ::autofill_assistant::ClickType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2faction_5fstrategy_2eproto
