// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/content/common/proto/semantic_feature_overrides.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto {
  static const uint32_t offsets[];
};
namespace autofill_assistant {
class PredictionLabel;
struct PredictionLabelDefaultTypeInternal;
extern PredictionLabelDefaultTypeInternal _PredictionLabel_default_instance_;
class SemanticSelectorPolicy;
struct SemanticSelectorPolicyDefaultTypeInternal;
extern SemanticSelectorPolicyDefaultTypeInternal _SemanticSelectorPolicy_default_instance_;
class SparseEncoding;
struct SparseEncodingDefaultTypeInternal;
extern SparseEncodingDefaultTypeInternal _SparseEncoding_default_instance_;
class VersionedFeatureOverrides;
struct VersionedFeatureOverridesDefaultTypeInternal;
extern VersionedFeatureOverridesDefaultTypeInternal _VersionedFeatureOverrides_default_instance_;
class VersionedFeatureOverrides_DataPoint;
struct VersionedFeatureOverrides_DataPointDefaultTypeInternal;
extern VersionedFeatureOverrides_DataPointDefaultTypeInternal _VersionedFeatureOverrides_DataPoint_default_instance_;
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill_assistant::PredictionLabel* Arena::CreateMaybeMessage<::autofill_assistant::PredictionLabel>(Arena*);
template<> ::autofill_assistant::SemanticSelectorPolicy* Arena::CreateMaybeMessage<::autofill_assistant::SemanticSelectorPolicy>(Arena*);
template<> ::autofill_assistant::SparseEncoding* Arena::CreateMaybeMessage<::autofill_assistant::SparseEncoding>(Arena*);
template<> ::autofill_assistant::VersionedFeatureOverrides* Arena::CreateMaybeMessage<::autofill_assistant::VersionedFeatureOverrides>(Arena*);
template<> ::autofill_assistant::VersionedFeatureOverrides_DataPoint* Arena::CreateMaybeMessage<::autofill_assistant::VersionedFeatureOverrides_DataPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill_assistant {

// ===================================================================

class SparseEncoding final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.SparseEncoding) */ {
 public:
  inline SparseEncoding() : SparseEncoding(nullptr) {}
  ~SparseEncoding() override;
  explicit PROTOBUF_CONSTEXPR SparseEncoding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseEncoding(const SparseEncoding& from);
  SparseEncoding(SparseEncoding&& from) noexcept
    : SparseEncoding() {
    *this = ::std::move(from);
  }

  inline SparseEncoding& operator=(const SparseEncoding& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseEncoding& operator=(SparseEncoding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SparseEncoding& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseEncoding* internal_default_instance() {
    return reinterpret_cast<const SparseEncoding*>(
               &_SparseEncoding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SparseEncoding& a, SparseEncoding& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SparseEncoding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseEncoding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseEncoding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseEncoding>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SparseEncoding& from);
  void MergeFrom(const SparseEncoding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseEncoding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.SparseEncoding";
  }
  protected:
  explicit SparseEncoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureConcatenationIndexFieldNumber = 1,
    kVocabularyIndexFieldNumber = 2,
    kNumberOfOccurrencesFieldNumber = 3,
  };
  // optional int32 feature_concatenation_index = 1;
  bool has_feature_concatenation_index() const;
  private:
  bool _internal_has_feature_concatenation_index() const;
  public:
  void clear_feature_concatenation_index();
  int32_t feature_concatenation_index() const;
  void set_feature_concatenation_index(int32_t value);
  private:
  int32_t _internal_feature_concatenation_index() const;
  void _internal_set_feature_concatenation_index(int32_t value);
  public:

  // optional int32 vocabulary_index = 2;
  bool has_vocabulary_index() const;
  private:
  bool _internal_has_vocabulary_index() const;
  public:
  void clear_vocabulary_index();
  int32_t vocabulary_index() const;
  void set_vocabulary_index(int32_t value);
  private:
  int32_t _internal_vocabulary_index() const;
  void _internal_set_vocabulary_index(int32_t value);
  public:

  // optional int32 number_of_occurrences = 3;
  bool has_number_of_occurrences() const;
  private:
  bool _internal_has_number_of_occurrences() const;
  public:
  void clear_number_of_occurrences();
  int32_t number_of_occurrences() const;
  void set_number_of_occurrences(int32_t value);
  private:
  int32_t _internal_number_of_occurrences() const;
  void _internal_set_number_of_occurrences(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autofill_assistant.SparseEncoding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t feature_concatenation_index_;
  int32_t vocabulary_index_;
  int32_t number_of_occurrences_;
  friend struct ::TableStruct_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto;
};
// -------------------------------------------------------------------

class PredictionLabel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.PredictionLabel) */ {
 public:
  inline PredictionLabel() : PredictionLabel(nullptr) {}
  ~PredictionLabel() override;
  explicit PROTOBUF_CONSTEXPR PredictionLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionLabel(const PredictionLabel& from);
  PredictionLabel(PredictionLabel&& from) noexcept
    : PredictionLabel() {
    *this = ::std::move(from);
  }

  inline PredictionLabel& operator=(const PredictionLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionLabel& operator=(PredictionLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PredictionLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionLabel* internal_default_instance() {
    return reinterpret_cast<const PredictionLabel*>(
               &_PredictionLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PredictionLabel& a, PredictionLabel& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PredictionLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PredictionLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PredictionLabel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PredictionLabel& from);
  void MergeFrom(const PredictionLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PredictionLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.PredictionLabel";
  }
  protected:
  explicit PredictionLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectiveFieldNumber = 1,
    kSemanticRoleFieldNumber = 2,
  };
  // optional int32 objective = 1;
  bool has_objective() const;
  private:
  bool _internal_has_objective() const;
  public:
  void clear_objective();
  int32_t objective() const;
  void set_objective(int32_t value);
  private:
  int32_t _internal_objective() const;
  void _internal_set_objective(int32_t value);
  public:

  // optional int32 semantic_role = 2;
  bool has_semantic_role() const;
  private:
  bool _internal_has_semantic_role() const;
  public:
  void clear_semantic_role();
  int32_t semantic_role() const;
  void set_semantic_role(int32_t value);
  private:
  int32_t _internal_semantic_role() const;
  void _internal_set_semantic_role(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autofill_assistant.PredictionLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t objective_;
  int32_t semantic_role_;
  friend struct ::TableStruct_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto;
};
// -------------------------------------------------------------------

class VersionedFeatureOverrides_DataPoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.VersionedFeatureOverrides.DataPoint) */ {
 public:
  inline VersionedFeatureOverrides_DataPoint() : VersionedFeatureOverrides_DataPoint(nullptr) {}
  ~VersionedFeatureOverrides_DataPoint() override;
  explicit PROTOBUF_CONSTEXPR VersionedFeatureOverrides_DataPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionedFeatureOverrides_DataPoint(const VersionedFeatureOverrides_DataPoint& from);
  VersionedFeatureOverrides_DataPoint(VersionedFeatureOverrides_DataPoint&& from) noexcept
    : VersionedFeatureOverrides_DataPoint() {
    *this = ::std::move(from);
  }

  inline VersionedFeatureOverrides_DataPoint& operator=(const VersionedFeatureOverrides_DataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionedFeatureOverrides_DataPoint& operator=(VersionedFeatureOverrides_DataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VersionedFeatureOverrides_DataPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionedFeatureOverrides_DataPoint* internal_default_instance() {
    return reinterpret_cast<const VersionedFeatureOverrides_DataPoint*>(
               &_VersionedFeatureOverrides_DataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VersionedFeatureOverrides_DataPoint& a, VersionedFeatureOverrides_DataPoint& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(VersionedFeatureOverrides_DataPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionedFeatureOverrides_DataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionedFeatureOverrides_DataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionedFeatureOverrides_DataPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VersionedFeatureOverrides_DataPoint& from);
  void MergeFrom(const VersionedFeatureOverrides_DataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VersionedFeatureOverrides_DataPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.VersionedFeatureOverrides.DataPoint";
  }
  protected:
  explicit VersionedFeatureOverrides_DataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyCoordinateFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated .autofill_assistant.SparseEncoding key_coordinate = 1;
  int key_coordinate_size() const;
  private:
  int _internal_key_coordinate_size() const;
  public:
  void clear_key_coordinate();
  ::autofill_assistant::SparseEncoding* mutable_key_coordinate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::SparseEncoding >*
      mutable_key_coordinate();
  private:
  const ::autofill_assistant::SparseEncoding& _internal_key_coordinate(int index) const;
  ::autofill_assistant::SparseEncoding* _internal_add_key_coordinate();
  public:
  const ::autofill_assistant::SparseEncoding& key_coordinate(int index) const;
  ::autofill_assistant::SparseEncoding* add_key_coordinate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::SparseEncoding >&
      key_coordinate() const;

  // optional .autofill_assistant.PredictionLabel value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::autofill_assistant::PredictionLabel& value() const;
  PROTOBUF_NODISCARD ::autofill_assistant::PredictionLabel* release_value();
  ::autofill_assistant::PredictionLabel* mutable_value();
  void set_allocated_value(::autofill_assistant::PredictionLabel* value);
  private:
  const ::autofill_assistant::PredictionLabel& _internal_value() const;
  ::autofill_assistant::PredictionLabel* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::autofill_assistant::PredictionLabel* value);
  ::autofill_assistant::PredictionLabel* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:autofill_assistant.VersionedFeatureOverrides.DataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::SparseEncoding > key_coordinate_;
  ::autofill_assistant::PredictionLabel* value_;
  friend struct ::TableStruct_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto;
};
// -------------------------------------------------------------------

class VersionedFeatureOverrides final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.VersionedFeatureOverrides) */ {
 public:
  inline VersionedFeatureOverrides() : VersionedFeatureOverrides(nullptr) {}
  ~VersionedFeatureOverrides() override;
  explicit PROTOBUF_CONSTEXPR VersionedFeatureOverrides(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionedFeatureOverrides(const VersionedFeatureOverrides& from);
  VersionedFeatureOverrides(VersionedFeatureOverrides&& from) noexcept
    : VersionedFeatureOverrides() {
    *this = ::std::move(from);
  }

  inline VersionedFeatureOverrides& operator=(const VersionedFeatureOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionedFeatureOverrides& operator=(VersionedFeatureOverrides&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VersionedFeatureOverrides& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionedFeatureOverrides* internal_default_instance() {
    return reinterpret_cast<const VersionedFeatureOverrides*>(
               &_VersionedFeatureOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VersionedFeatureOverrides& a, VersionedFeatureOverrides& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(VersionedFeatureOverrides* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionedFeatureOverrides* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionedFeatureOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionedFeatureOverrides>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VersionedFeatureOverrides& from);
  void MergeFrom(const VersionedFeatureOverrides& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VersionedFeatureOverrides* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.VersionedFeatureOverrides";
  }
  protected:
  explicit VersionedFeatureOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef VersionedFeatureOverrides_DataPoint DataPoint;

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointMapFieldNumber = 1,
  };
  // repeated .autofill_assistant.VersionedFeatureOverrides.DataPoint data_point_map = 1;
  int data_point_map_size() const;
  private:
  int _internal_data_point_map_size() const;
  public:
  void clear_data_point_map();
  ::autofill_assistant::VersionedFeatureOverrides_DataPoint* mutable_data_point_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::VersionedFeatureOverrides_DataPoint >*
      mutable_data_point_map();
  private:
  const ::autofill_assistant::VersionedFeatureOverrides_DataPoint& _internal_data_point_map(int index) const;
  ::autofill_assistant::VersionedFeatureOverrides_DataPoint* _internal_add_data_point_map();
  public:
  const ::autofill_assistant::VersionedFeatureOverrides_DataPoint& data_point_map(int index) const;
  ::autofill_assistant::VersionedFeatureOverrides_DataPoint* add_data_point_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::VersionedFeatureOverrides_DataPoint >&
      data_point_map() const;

  // @@protoc_insertion_point(class_scope:autofill_assistant.VersionedFeatureOverrides)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::VersionedFeatureOverrides_DataPoint > data_point_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto;
};
// -------------------------------------------------------------------

class SemanticSelectorPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.SemanticSelectorPolicy) */ {
 public:
  inline SemanticSelectorPolicy() : SemanticSelectorPolicy(nullptr) {}
  ~SemanticSelectorPolicy() override;
  explicit PROTOBUF_CONSTEXPR SemanticSelectorPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SemanticSelectorPolicy(const SemanticSelectorPolicy& from);
  SemanticSelectorPolicy(SemanticSelectorPolicy&& from) noexcept
    : SemanticSelectorPolicy() {
    *this = ::std::move(from);
  }

  inline SemanticSelectorPolicy& operator=(const SemanticSelectorPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemanticSelectorPolicy& operator=(SemanticSelectorPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SemanticSelectorPolicy& default_instance() {
    return *internal_default_instance();
  }
  enum FeatureOverridesCase {
    kBagOfWords = 1,
    FEATURE_OVERRIDES_NOT_SET = 0,
  };

  static inline const SemanticSelectorPolicy* internal_default_instance() {
    return reinterpret_cast<const SemanticSelectorPolicy*>(
               &_SemanticSelectorPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SemanticSelectorPolicy& a, SemanticSelectorPolicy& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SemanticSelectorPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SemanticSelectorPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SemanticSelectorPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SemanticSelectorPolicy>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SemanticSelectorPolicy& from);
  void MergeFrom(const SemanticSelectorPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SemanticSelectorPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.SemanticSelectorPolicy";
  }
  protected:
  explicit SemanticSelectorPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBagOfWordsFieldNumber = 1,
  };
  // .autofill_assistant.VersionedFeatureOverrides bag_of_words = 1;
  bool has_bag_of_words() const;
  private:
  bool _internal_has_bag_of_words() const;
  public:
  void clear_bag_of_words();
  const ::autofill_assistant::VersionedFeatureOverrides& bag_of_words() const;
  PROTOBUF_NODISCARD ::autofill_assistant::VersionedFeatureOverrides* release_bag_of_words();
  ::autofill_assistant::VersionedFeatureOverrides* mutable_bag_of_words();
  void set_allocated_bag_of_words(::autofill_assistant::VersionedFeatureOverrides* bag_of_words);
  private:
  const ::autofill_assistant::VersionedFeatureOverrides& _internal_bag_of_words() const;
  ::autofill_assistant::VersionedFeatureOverrides* _internal_mutable_bag_of_words();
  public:
  void unsafe_arena_set_allocated_bag_of_words(
      ::autofill_assistant::VersionedFeatureOverrides* bag_of_words);
  ::autofill_assistant::VersionedFeatureOverrides* unsafe_arena_release_bag_of_words();

  void clear_feature_overrides();
  FeatureOverridesCase feature_overrides_case() const;
  // @@protoc_insertion_point(class_scope:autofill_assistant.SemanticSelectorPolicy)
 private:
  class _Internal;
  void set_has_bag_of_words();

  inline bool has_feature_overrides() const;
  inline void clear_has_feature_overrides();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FeatureOverridesUnion {
    constexpr FeatureOverridesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::autofill_assistant::VersionedFeatureOverrides* bag_of_words_;
  } feature_overrides_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SparseEncoding

// optional int32 feature_concatenation_index = 1;
inline bool SparseEncoding::_internal_has_feature_concatenation_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseEncoding::has_feature_concatenation_index() const {
  return _internal_has_feature_concatenation_index();
}
inline void SparseEncoding::clear_feature_concatenation_index() {
  feature_concatenation_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SparseEncoding::_internal_feature_concatenation_index() const {
  return feature_concatenation_index_;
}
inline int32_t SparseEncoding::feature_concatenation_index() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.SparseEncoding.feature_concatenation_index)
  return _internal_feature_concatenation_index();
}
inline void SparseEncoding::_internal_set_feature_concatenation_index(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  feature_concatenation_index_ = value;
}
inline void SparseEncoding::set_feature_concatenation_index(int32_t value) {
  _internal_set_feature_concatenation_index(value);
  // @@protoc_insertion_point(field_set:autofill_assistant.SparseEncoding.feature_concatenation_index)
}

// optional int32 vocabulary_index = 2;
inline bool SparseEncoding::_internal_has_vocabulary_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SparseEncoding::has_vocabulary_index() const {
  return _internal_has_vocabulary_index();
}
inline void SparseEncoding::clear_vocabulary_index() {
  vocabulary_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SparseEncoding::_internal_vocabulary_index() const {
  return vocabulary_index_;
}
inline int32_t SparseEncoding::vocabulary_index() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.SparseEncoding.vocabulary_index)
  return _internal_vocabulary_index();
}
inline void SparseEncoding::_internal_set_vocabulary_index(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  vocabulary_index_ = value;
}
inline void SparseEncoding::set_vocabulary_index(int32_t value) {
  _internal_set_vocabulary_index(value);
  // @@protoc_insertion_point(field_set:autofill_assistant.SparseEncoding.vocabulary_index)
}

// optional int32 number_of_occurrences = 3;
inline bool SparseEncoding::_internal_has_number_of_occurrences() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SparseEncoding::has_number_of_occurrences() const {
  return _internal_has_number_of_occurrences();
}
inline void SparseEncoding::clear_number_of_occurrences() {
  number_of_occurrences_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SparseEncoding::_internal_number_of_occurrences() const {
  return number_of_occurrences_;
}
inline int32_t SparseEncoding::number_of_occurrences() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.SparseEncoding.number_of_occurrences)
  return _internal_number_of_occurrences();
}
inline void SparseEncoding::_internal_set_number_of_occurrences(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  number_of_occurrences_ = value;
}
inline void SparseEncoding::set_number_of_occurrences(int32_t value) {
  _internal_set_number_of_occurrences(value);
  // @@protoc_insertion_point(field_set:autofill_assistant.SparseEncoding.number_of_occurrences)
}

// -------------------------------------------------------------------

// PredictionLabel

// optional int32 objective = 1;
inline bool PredictionLabel::_internal_has_objective() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PredictionLabel::has_objective() const {
  return _internal_has_objective();
}
inline void PredictionLabel::clear_objective() {
  objective_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t PredictionLabel::_internal_objective() const {
  return objective_;
}
inline int32_t PredictionLabel::objective() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.PredictionLabel.objective)
  return _internal_objective();
}
inline void PredictionLabel::_internal_set_objective(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  objective_ = value;
}
inline void PredictionLabel::set_objective(int32_t value) {
  _internal_set_objective(value);
  // @@protoc_insertion_point(field_set:autofill_assistant.PredictionLabel.objective)
}

// optional int32 semantic_role = 2;
inline bool PredictionLabel::_internal_has_semantic_role() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PredictionLabel::has_semantic_role() const {
  return _internal_has_semantic_role();
}
inline void PredictionLabel::clear_semantic_role() {
  semantic_role_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t PredictionLabel::_internal_semantic_role() const {
  return semantic_role_;
}
inline int32_t PredictionLabel::semantic_role() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.PredictionLabel.semantic_role)
  return _internal_semantic_role();
}
inline void PredictionLabel::_internal_set_semantic_role(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  semantic_role_ = value;
}
inline void PredictionLabel::set_semantic_role(int32_t value) {
  _internal_set_semantic_role(value);
  // @@protoc_insertion_point(field_set:autofill_assistant.PredictionLabel.semantic_role)
}

// -------------------------------------------------------------------

// VersionedFeatureOverrides_DataPoint

// repeated .autofill_assistant.SparseEncoding key_coordinate = 1;
inline int VersionedFeatureOverrides_DataPoint::_internal_key_coordinate_size() const {
  return key_coordinate_.size();
}
inline int VersionedFeatureOverrides_DataPoint::key_coordinate_size() const {
  return _internal_key_coordinate_size();
}
inline void VersionedFeatureOverrides_DataPoint::clear_key_coordinate() {
  key_coordinate_.Clear();
}
inline ::autofill_assistant::SparseEncoding* VersionedFeatureOverrides_DataPoint::mutable_key_coordinate(int index) {
  // @@protoc_insertion_point(field_mutable:autofill_assistant.VersionedFeatureOverrides.DataPoint.key_coordinate)
  return key_coordinate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::SparseEncoding >*
VersionedFeatureOverrides_DataPoint::mutable_key_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:autofill_assistant.VersionedFeatureOverrides.DataPoint.key_coordinate)
  return &key_coordinate_;
}
inline const ::autofill_assistant::SparseEncoding& VersionedFeatureOverrides_DataPoint::_internal_key_coordinate(int index) const {
  return key_coordinate_.Get(index);
}
inline const ::autofill_assistant::SparseEncoding& VersionedFeatureOverrides_DataPoint::key_coordinate(int index) const {
  // @@protoc_insertion_point(field_get:autofill_assistant.VersionedFeatureOverrides.DataPoint.key_coordinate)
  return _internal_key_coordinate(index);
}
inline ::autofill_assistant::SparseEncoding* VersionedFeatureOverrides_DataPoint::_internal_add_key_coordinate() {
  return key_coordinate_.Add();
}
inline ::autofill_assistant::SparseEncoding* VersionedFeatureOverrides_DataPoint::add_key_coordinate() {
  ::autofill_assistant::SparseEncoding* _add = _internal_add_key_coordinate();
  // @@protoc_insertion_point(field_add:autofill_assistant.VersionedFeatureOverrides.DataPoint.key_coordinate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::SparseEncoding >&
VersionedFeatureOverrides_DataPoint::key_coordinate() const {
  // @@protoc_insertion_point(field_list:autofill_assistant.VersionedFeatureOverrides.DataPoint.key_coordinate)
  return key_coordinate_;
}

// optional .autofill_assistant.PredictionLabel value = 2;
inline bool VersionedFeatureOverrides_DataPoint::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool VersionedFeatureOverrides_DataPoint::has_value() const {
  return _internal_has_value();
}
inline void VersionedFeatureOverrides_DataPoint::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::autofill_assistant::PredictionLabel& VersionedFeatureOverrides_DataPoint::_internal_value() const {
  const ::autofill_assistant::PredictionLabel* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::PredictionLabel&>(
      ::autofill_assistant::_PredictionLabel_default_instance_);
}
inline const ::autofill_assistant::PredictionLabel& VersionedFeatureOverrides_DataPoint::value() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.VersionedFeatureOverrides.DataPoint.value)
  return _internal_value();
}
inline void VersionedFeatureOverrides_DataPoint::unsafe_arena_set_allocated_value(
    ::autofill_assistant::PredictionLabel* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.VersionedFeatureOverrides.DataPoint.value)
}
inline ::autofill_assistant::PredictionLabel* VersionedFeatureOverrides_DataPoint::release_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::PredictionLabel* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::PredictionLabel* VersionedFeatureOverrides_DataPoint::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:autofill_assistant.VersionedFeatureOverrides.DataPoint.value)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::PredictionLabel* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::autofill_assistant::PredictionLabel* VersionedFeatureOverrides_DataPoint::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::PredictionLabel>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::autofill_assistant::PredictionLabel* VersionedFeatureOverrides_DataPoint::mutable_value() {
  ::autofill_assistant::PredictionLabel* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.VersionedFeatureOverrides.DataPoint.value)
  return _msg;
}
inline void VersionedFeatureOverrides_DataPoint::set_allocated_value(::autofill_assistant::PredictionLabel* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.VersionedFeatureOverrides.DataPoint.value)
}

// -------------------------------------------------------------------

// VersionedFeatureOverrides

// repeated .autofill_assistant.VersionedFeatureOverrides.DataPoint data_point_map = 1;
inline int VersionedFeatureOverrides::_internal_data_point_map_size() const {
  return data_point_map_.size();
}
inline int VersionedFeatureOverrides::data_point_map_size() const {
  return _internal_data_point_map_size();
}
inline void VersionedFeatureOverrides::clear_data_point_map() {
  data_point_map_.Clear();
}
inline ::autofill_assistant::VersionedFeatureOverrides_DataPoint* VersionedFeatureOverrides::mutable_data_point_map(int index) {
  // @@protoc_insertion_point(field_mutable:autofill_assistant.VersionedFeatureOverrides.data_point_map)
  return data_point_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::VersionedFeatureOverrides_DataPoint >*
VersionedFeatureOverrides::mutable_data_point_map() {
  // @@protoc_insertion_point(field_mutable_list:autofill_assistant.VersionedFeatureOverrides.data_point_map)
  return &data_point_map_;
}
inline const ::autofill_assistant::VersionedFeatureOverrides_DataPoint& VersionedFeatureOverrides::_internal_data_point_map(int index) const {
  return data_point_map_.Get(index);
}
inline const ::autofill_assistant::VersionedFeatureOverrides_DataPoint& VersionedFeatureOverrides::data_point_map(int index) const {
  // @@protoc_insertion_point(field_get:autofill_assistant.VersionedFeatureOverrides.data_point_map)
  return _internal_data_point_map(index);
}
inline ::autofill_assistant::VersionedFeatureOverrides_DataPoint* VersionedFeatureOverrides::_internal_add_data_point_map() {
  return data_point_map_.Add();
}
inline ::autofill_assistant::VersionedFeatureOverrides_DataPoint* VersionedFeatureOverrides::add_data_point_map() {
  ::autofill_assistant::VersionedFeatureOverrides_DataPoint* _add = _internal_add_data_point_map();
  // @@protoc_insertion_point(field_add:autofill_assistant.VersionedFeatureOverrides.data_point_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill_assistant::VersionedFeatureOverrides_DataPoint >&
VersionedFeatureOverrides::data_point_map() const {
  // @@protoc_insertion_point(field_list:autofill_assistant.VersionedFeatureOverrides.data_point_map)
  return data_point_map_;
}

// -------------------------------------------------------------------

// SemanticSelectorPolicy

// .autofill_assistant.VersionedFeatureOverrides bag_of_words = 1;
inline bool SemanticSelectorPolicy::_internal_has_bag_of_words() const {
  return feature_overrides_case() == kBagOfWords;
}
inline bool SemanticSelectorPolicy::has_bag_of_words() const {
  return _internal_has_bag_of_words();
}
inline void SemanticSelectorPolicy::set_has_bag_of_words() {
  _oneof_case_[0] = kBagOfWords;
}
inline void SemanticSelectorPolicy::clear_bag_of_words() {
  if (_internal_has_bag_of_words()) {
    if (GetArenaForAllocation() == nullptr) {
      delete feature_overrides_.bag_of_words_;
    }
    clear_has_feature_overrides();
  }
}
inline ::autofill_assistant::VersionedFeatureOverrides* SemanticSelectorPolicy::release_bag_of_words() {
  // @@protoc_insertion_point(field_release:autofill_assistant.SemanticSelectorPolicy.bag_of_words)
  if (_internal_has_bag_of_words()) {
    clear_has_feature_overrides();
    ::autofill_assistant::VersionedFeatureOverrides* temp = feature_overrides_.bag_of_words_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    feature_overrides_.bag_of_words_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::autofill_assistant::VersionedFeatureOverrides& SemanticSelectorPolicy::_internal_bag_of_words() const {
  return _internal_has_bag_of_words()
      ? *feature_overrides_.bag_of_words_
      : reinterpret_cast< ::autofill_assistant::VersionedFeatureOverrides&>(::autofill_assistant::_VersionedFeatureOverrides_default_instance_);
}
inline const ::autofill_assistant::VersionedFeatureOverrides& SemanticSelectorPolicy::bag_of_words() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.SemanticSelectorPolicy.bag_of_words)
  return _internal_bag_of_words();
}
inline ::autofill_assistant::VersionedFeatureOverrides* SemanticSelectorPolicy::unsafe_arena_release_bag_of_words() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autofill_assistant.SemanticSelectorPolicy.bag_of_words)
  if (_internal_has_bag_of_words()) {
    clear_has_feature_overrides();
    ::autofill_assistant::VersionedFeatureOverrides* temp = feature_overrides_.bag_of_words_;
    feature_overrides_.bag_of_words_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SemanticSelectorPolicy::unsafe_arena_set_allocated_bag_of_words(::autofill_assistant::VersionedFeatureOverrides* bag_of_words) {
  clear_feature_overrides();
  if (bag_of_words) {
    set_has_bag_of_words();
    feature_overrides_.bag_of_words_ = bag_of_words;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.SemanticSelectorPolicy.bag_of_words)
}
inline ::autofill_assistant::VersionedFeatureOverrides* SemanticSelectorPolicy::_internal_mutable_bag_of_words() {
  if (!_internal_has_bag_of_words()) {
    clear_feature_overrides();
    set_has_bag_of_words();
    feature_overrides_.bag_of_words_ = CreateMaybeMessage< ::autofill_assistant::VersionedFeatureOverrides >(GetArenaForAllocation());
  }
  return feature_overrides_.bag_of_words_;
}
inline ::autofill_assistant::VersionedFeatureOverrides* SemanticSelectorPolicy::mutable_bag_of_words() {
  ::autofill_assistant::VersionedFeatureOverrides* _msg = _internal_mutable_bag_of_words();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.SemanticSelectorPolicy.bag_of_words)
  return _msg;
}

inline bool SemanticSelectorPolicy::has_feature_overrides() const {
  return feature_overrides_case() != FEATURE_OVERRIDES_NOT_SET;
}
inline void SemanticSelectorPolicy::clear_has_feature_overrides() {
  _oneof_case_[0] = FEATURE_OVERRIDES_NOT_SET;
}
inline SemanticSelectorPolicy::FeatureOverridesCase SemanticSelectorPolicy::feature_overrides_case() const {
  return SemanticSelectorPolicy::FeatureOverridesCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill_assistant

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fcontent_2fcommon_2fproto_2fsemantic_5ffeature_5foverrides_2eproto
