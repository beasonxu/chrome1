// components/autofill_assistant/content/common/autofill_assistant_agent.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/autofill_assistant/content/common/autofill_assistant_agent.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/autofill_assistant/content/common/autofill_assistant_agent.mojom-params-data.h"
#include "components/autofill_assistant/content/common/autofill_assistant_agent.mojom-shared-message-ids.h"

#include "components/autofill_assistant/content/common/autofill_assistant_agent.mojom-import-headers.h"
#include "components/autofill_assistant/content/common/autofill_assistant_agent.mojom-test-utils.h"


#ifndef COMPONENTS_AUTOFILL_ASSISTANT_CONTENT_COMMON_AUTOFILL_ASSISTANT_AGENT_MOJOM_JUMBO_H_
#define COMPONENTS_AUTOFILL_ASSISTANT_CONTENT_COMMON_AUTOFILL_ASSISTANT_AGENT_MOJOM_JUMBO_H_
#endif



namespace autofill_assistant {
namespace mojom {
const char AutofillAssistantAgent::Name_[] = "autofill_assistant.mojom.AutofillAssistantAgent";

AutofillAssistantAgent::IPCStableHashFunction AutofillAssistantAgent::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAutofillAssistantAgent_GetSemanticNodes_Name: {
      return &AutofillAssistantAgent::GetSemanticNodes_Sym::IPCStableHash;
    }
    case internal::kAutofillAssistantAgent_SetElementValue_Name: {
      return &AutofillAssistantAgent::SetElementValue_Sym::IPCStableHash;
    }
    case internal::kAutofillAssistantAgent_SetElementChecked_Name: {
      return &AutofillAssistantAgent::SetElementChecked_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AutofillAssistantAgent::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAutofillAssistantAgent_GetSemanticNodes_Name:
            return "Receive autofill_assistant::mojom::AutofillAssistantAgent::GetSemanticNodes";
      case internal::kAutofillAssistantAgent_SetElementValue_Name:
            return "Receive autofill_assistant::mojom::AutofillAssistantAgent::SetElementValue";
      case internal::kAutofillAssistantAgent_SetElementChecked_Name:
            return "Receive autofill_assistant::mojom::AutofillAssistantAgent::SetElementChecked";
    }
  } else {
    switch (message.name()) {
      case internal::kAutofillAssistantAgent_GetSemanticNodes_Name:
            return "Receive reply autofill_assistant::mojom::AutofillAssistantAgent::GetSemanticNodes";
      case internal::kAutofillAssistantAgent_SetElementValue_Name:
            return "Receive reply autofill_assistant::mojom::AutofillAssistantAgent::SetElementValue";
      case internal::kAutofillAssistantAgent_SetElementChecked_Name:
            return "Receive reply autofill_assistant::mojom::AutofillAssistantAgent::SetElementChecked";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AutofillAssistantAgent::GetSemanticNodes_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)autofill_assistant::mojom::AutofillAssistantAgent::GetSemanticNodes");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AutofillAssistantAgent::SetElementValue_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)autofill_assistant::mojom::AutofillAssistantAgent::SetElementValue");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AutofillAssistantAgent::SetElementChecked_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)autofill_assistant::mojom::AutofillAssistantAgent::SetElementChecked");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class AutofillAssistantAgent_GetSemanticNodes_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AutofillAssistantAgent_GetSemanticNodes_ForwardToCallback(
      AutofillAssistantAgent::GetSemanticNodesCallback callback
      ) : callback_(std::move(callback)) {
  }

  AutofillAssistantAgent_GetSemanticNodes_ForwardToCallback(const AutofillAssistantAgent_GetSemanticNodes_ForwardToCallback&) = delete;
  AutofillAssistantAgent_GetSemanticNodes_ForwardToCallback& operator=(const AutofillAssistantAgent_GetSemanticNodes_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AutofillAssistantAgent::GetSemanticNodesCallback callback_;
};

class AutofillAssistantAgent_SetElementValue_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AutofillAssistantAgent_SetElementValue_ForwardToCallback(
      AutofillAssistantAgent::SetElementValueCallback callback
      ) : callback_(std::move(callback)) {
  }

  AutofillAssistantAgent_SetElementValue_ForwardToCallback(const AutofillAssistantAgent_SetElementValue_ForwardToCallback&) = delete;
  AutofillAssistantAgent_SetElementValue_ForwardToCallback& operator=(const AutofillAssistantAgent_SetElementValue_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AutofillAssistantAgent::SetElementValueCallback callback_;
};

class AutofillAssistantAgent_SetElementChecked_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AutofillAssistantAgent_SetElementChecked_ForwardToCallback(
      AutofillAssistantAgent::SetElementCheckedCallback callback
      ) : callback_(std::move(callback)) {
  }

  AutofillAssistantAgent_SetElementChecked_ForwardToCallback(const AutofillAssistantAgent_SetElementChecked_ForwardToCallback&) = delete;
  AutofillAssistantAgent_SetElementChecked_ForwardToCallback& operator=(const AutofillAssistantAgent_SetElementChecked_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AutofillAssistantAgent::SetElementCheckedCallback callback_;
};

AutofillAssistantAgentProxy::AutofillAssistantAgentProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AutofillAssistantAgentProxy::GetSemanticNodes(
    int32_t in_role, int32_t in_objective, bool in_ignore_objective, ::base::TimeDelta in_timeout, GetSemanticNodesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send autofill_assistant::mojom::AutofillAssistantAgent::GetSemanticNodes", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("role"), in_role,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("objective"), in_objective,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ignore_objective"), in_ignore_objective,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("timeout"), in_timeout,
                        "<value of type ::base::TimeDelta>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAutofillAssistantAgent_GetSemanticNodes_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::autofill_assistant::mojom::internal::AutofillAssistantAgent_GetSemanticNodes_Params_Data> params(
          message);
  params.Allocate();
  params->role = in_role;
  params->objective = in_objective;
  params->ignore_objective = in_ignore_objective;
  mojo::internal::MessageFragment<
      typename decltype(params->timeout)::BaseType> timeout_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
      in_timeout, timeout_fragment);
  params->timeout.Set(
      timeout_fragment.is_null() ? nullptr : timeout_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->timeout.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null timeout in AutofillAssistantAgent.GetSemanticNodes request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAssistantAgent::Name_);
  message.set_method_name("GetSemanticNodes");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AutofillAssistantAgent_GetSemanticNodes_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AutofillAssistantAgentProxy::SetElementValue(
    int32_t in_backend_node_id, const ::std::u16string& in_value, bool in_send_events, SetElementValueCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send autofill_assistant::mojom::AutofillAssistantAgent::SetElementValue", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("backend_node_id"), in_backend_node_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type const ::std::u16string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("send_events"), in_send_events,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAutofillAssistantAgent_SetElementValue_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::autofill_assistant::mojom::internal::AutofillAssistantAgent_SetElementValue_Params_Data> params(
          message);
  params.Allocate();
  params->backend_node_id = in_backend_node_id;
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_value, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in AutofillAssistantAgent.SetElementValue request");
  params->send_events = in_send_events;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAssistantAgent::Name_);
  message.set_method_name("SetElementValue");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AutofillAssistantAgent_SetElementValue_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AutofillAssistantAgentProxy::SetElementChecked(
    int32_t in_backend_node_id, bool in_checked, bool in_send_events, SetElementCheckedCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send autofill_assistant::mojom::AutofillAssistantAgent::SetElementChecked", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("backend_node_id"), in_backend_node_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("checked"), in_checked,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("send_events"), in_send_events,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAutofillAssistantAgent_SetElementChecked_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::autofill_assistant::mojom::internal::AutofillAssistantAgent_SetElementChecked_Params_Data> params(
          message);
  params.Allocate();
  params->backend_node_id = in_backend_node_id;
  params->checked = in_checked;
  params->send_events = in_send_events;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAssistantAgent::Name_);
  message.set_method_name("SetElementChecked");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AutofillAssistantAgent_SetElementChecked_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class AutofillAssistantAgent_GetSemanticNodes_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AutofillAssistantAgent::GetSemanticNodesCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AutofillAssistantAgent_GetSemanticNodes_ProxyToResponder> proxy(
        new AutofillAssistantAgent_GetSemanticNodes_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AutofillAssistantAgent_GetSemanticNodes_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AutofillAssistantAgent_GetSemanticNodes_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AutofillAssistantAgent_GetSemanticNodes_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AutofillAssistantAgent::GetSemanticNodesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::autofill_assistant::mojom::NodeDataStatus in_status, const std::vector<::autofill_assistant::NodeData>& in_nodes);
};

bool AutofillAssistantAgent_GetSemanticNodes_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::autofill_assistant::mojom::NodeDataStatus p_status{};
  std::vector<::autofill_assistant::NodeData> p_nodes{};
  AutofillAssistantAgent_GetSemanticNodes_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (success && !input_data_view.ReadNodes(&p_nodes))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AutofillAssistantAgent::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status), 
std::move(p_nodes));
  return true;
}

void AutofillAssistantAgent_GetSemanticNodes_ProxyToResponder::Run(
    ::autofill_assistant::mojom::NodeDataStatus in_status, const std::vector<::autofill_assistant::NodeData>& in_nodes) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply autofill_assistant::mojom::AutofillAssistantAgent::GetSemanticNodes", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("status"), in_status,
                        "<value of type ::autofill_assistant::mojom::NodeDataStatus>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("nodes"), in_nodes,
                        "<value of type const std::vector<::autofill_assistant::NodeData>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAutofillAssistantAgent_GetSemanticNodes_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::autofill_assistant::mojom::internal::AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::autofill_assistant::mojom::NodeDataStatus>(
      in_status, &params->status);
  mojo::internal::MessageFragment<
      typename decltype(params->nodes)::BaseType>
      nodes_fragment(params.message());
  const mojo::internal::ContainerValidateParams nodes_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::autofill_assistant::mojom::NodeDataDataView>>(
      in_nodes, nodes_fragment, &nodes_validate_params);
  params->nodes.Set(
      nodes_fragment.is_null() ? nullptr : nodes_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->nodes.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null nodes in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAssistantAgent::Name_);
  message.set_method_name("GetSemanticNodes");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AutofillAssistantAgent_SetElementValue_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AutofillAssistantAgent::SetElementValueCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AutofillAssistantAgent_SetElementValue_ProxyToResponder> proxy(
        new AutofillAssistantAgent_SetElementValue_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AutofillAssistantAgent_SetElementValue_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AutofillAssistantAgent_SetElementValue_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AutofillAssistantAgent_SetElementValue_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AutofillAssistantAgent::SetElementValueCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool AutofillAssistantAgent_SetElementValue_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AutofillAssistantAgent_SetElementValue_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AutofillAssistantAgent_SetElementValue_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  AutofillAssistantAgent_SetElementValue_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AutofillAssistantAgent::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void AutofillAssistantAgent_SetElementValue_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply autofill_assistant::mojom::AutofillAssistantAgent::SetElementValue", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAutofillAssistantAgent_SetElementValue_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::autofill_assistant::mojom::internal::AutofillAssistantAgent_SetElementValue_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAssistantAgent::Name_);
  message.set_method_name("SetElementValue");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AutofillAssistantAgent_SetElementChecked_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AutofillAssistantAgent::SetElementCheckedCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AutofillAssistantAgent_SetElementChecked_ProxyToResponder> proxy(
        new AutofillAssistantAgent_SetElementChecked_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AutofillAssistantAgent_SetElementChecked_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AutofillAssistantAgent_SetElementChecked_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AutofillAssistantAgent_SetElementChecked_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AutofillAssistantAgent::SetElementCheckedCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool AutofillAssistantAgent_SetElementChecked_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AutofillAssistantAgent_SetElementChecked_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AutofillAssistantAgent_SetElementChecked_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  AutofillAssistantAgent_SetElementChecked_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AutofillAssistantAgent::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void AutofillAssistantAgent_SetElementChecked_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply autofill_assistant::mojom::AutofillAssistantAgent::SetElementChecked", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAutofillAssistantAgent_SetElementChecked_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::autofill_assistant::mojom::internal::AutofillAssistantAgent_SetElementChecked_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AutofillAssistantAgent::Name_);
  message.set_method_name("SetElementChecked");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool AutofillAssistantAgentStubDispatch::Accept(
    AutofillAssistantAgent* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAutofillAssistantAgent_GetSemanticNodes_Name: {
      break;
    }
    case internal::kAutofillAssistantAgent_SetElementValue_Name: {
      break;
    }
    case internal::kAutofillAssistantAgent_SetElementChecked_Name: {
      break;
    }
  }
  return false;
}

// static
bool AutofillAssistantAgentStubDispatch::AcceptWithResponder(
    AutofillAssistantAgent* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAutofillAssistantAgent_GetSemanticNodes_Name: {

      internal::AutofillAssistantAgent_GetSemanticNodes_Params_Data* params =
          reinterpret_cast<
              internal::AutofillAssistantAgent_GetSemanticNodes_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_role{};
      int32_t p_objective{};
      bool p_ignore_objective{};
      ::base::TimeDelta p_timeout{};
      AutofillAssistantAgent_GetSemanticNodes_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_role = input_data_view.role();
      if (success)
        p_objective = input_data_view.objective();
      if (success)
        p_ignore_objective = input_data_view.ignore_objective();
      if (success && !input_data_view.ReadTimeout(&p_timeout))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAssistantAgent::Name_, 0, false);
        return false;
      }
      AutofillAssistantAgent::GetSemanticNodesCallback callback =
          AutofillAssistantAgent_GetSemanticNodes_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetSemanticNodes(
std::move(p_role), 
std::move(p_objective), 
std::move(p_ignore_objective), 
std::move(p_timeout), std::move(callback));
      return true;
    }
    case internal::kAutofillAssistantAgent_SetElementValue_Name: {

      internal::AutofillAssistantAgent_SetElementValue_Params_Data* params =
          reinterpret_cast<
              internal::AutofillAssistantAgent_SetElementValue_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_backend_node_id{};
      ::std::u16string p_value{};
      bool p_send_events{};
      AutofillAssistantAgent_SetElementValue_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_backend_node_id = input_data_view.backend_node_id();
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (success)
        p_send_events = input_data_view.send_events();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAssistantAgent::Name_, 1, false);
        return false;
      }
      AutofillAssistantAgent::SetElementValueCallback callback =
          AutofillAssistantAgent_SetElementValue_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetElementValue(
std::move(p_backend_node_id), 
std::move(p_value), 
std::move(p_send_events), std::move(callback));
      return true;
    }
    case internal::kAutofillAssistantAgent_SetElementChecked_Name: {

      internal::AutofillAssistantAgent_SetElementChecked_Params_Data* params =
          reinterpret_cast<
              internal::AutofillAssistantAgent_SetElementChecked_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_backend_node_id{};
      bool p_checked{};
      bool p_send_events{};
      AutofillAssistantAgent_SetElementChecked_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_backend_node_id = input_data_view.backend_node_id();
      if (success)
        p_checked = input_data_view.checked();
      if (success)
        p_send_events = input_data_view.send_events();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AutofillAssistantAgent::Name_, 2, false);
        return false;
      }
      AutofillAssistantAgent::SetElementCheckedCallback callback =
          AutofillAssistantAgent_SetElementChecked_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetElementChecked(
std::move(p_backend_node_id), 
std::move(p_checked), 
std::move(p_send_events), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAutofillAssistantAgentValidationInfo[] = {
    {&internal::AutofillAssistantAgent_GetSemanticNodes_Params_Data::Validate,
     &internal::AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data::Validate},
    {&internal::AutofillAssistantAgent_SetElementValue_Params_Data::Validate,
     &internal::AutofillAssistantAgent_SetElementValue_ResponseParams_Data::Validate},
    {&internal::AutofillAssistantAgent_SetElementChecked_Params_Data::Validate,
     &internal::AutofillAssistantAgent_SetElementChecked_ResponseParams_Data::Validate},
};

bool AutofillAssistantAgentRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::autofill_assistant::mojom::AutofillAssistantAgent::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAutofillAssistantAgentValidationInfo);
}

bool AutofillAssistantAgentResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::autofill_assistant::mojom::AutofillAssistantAgent::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAutofillAssistantAgentValidationInfo);
}


}  // namespace mojom
}  // namespace autofill_assistant


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace autofill_assistant {
namespace mojom {


void AutofillAssistantAgentInterceptorForTesting::GetSemanticNodes(int32_t role, int32_t objective, bool ignore_objective, ::base::TimeDelta timeout, GetSemanticNodesCallback callback) {
  GetForwardingInterface()->GetSemanticNodes(std::move(role), std::move(objective), std::move(ignore_objective), std::move(timeout), std::move(callback));
}
void AutofillAssistantAgentInterceptorForTesting::SetElementValue(int32_t backend_node_id, const ::std::u16string& value, bool send_events, SetElementValueCallback callback) {
  GetForwardingInterface()->SetElementValue(std::move(backend_node_id), std::move(value), std::move(send_events), std::move(callback));
}
void AutofillAssistantAgentInterceptorForTesting::SetElementChecked(int32_t backend_node_id, bool checked, bool send_events, SetElementCheckedCallback callback) {
  GetForwardingInterface()->SetElementChecked(std::move(backend_node_id), std::move(checked), std::move(send_events), std::move(callback));
}
AutofillAssistantAgentAsyncWaiter::AutofillAssistantAgentAsyncWaiter(
    AutofillAssistantAgent* proxy) : proxy_(proxy) {}

AutofillAssistantAgentAsyncWaiter::~AutofillAssistantAgentAsyncWaiter() = default;

void AutofillAssistantAgentAsyncWaiter::GetSemanticNodes(
    int32_t role, int32_t objective, bool ignore_objective, ::base::TimeDelta timeout, ::autofill_assistant::mojom::NodeDataStatus* out_status, std::vector<::autofill_assistant::NodeData>* out_nodes) {
  base::RunLoop loop;
  proxy_->GetSemanticNodes(std::move(role),std::move(objective),std::move(ignore_objective),std::move(timeout),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::autofill_assistant::mojom::NodeDataStatus* out_status
,
             std::vector<::autofill_assistant::NodeData>* out_nodes
,
             ::autofill_assistant::mojom::NodeDataStatus status,
             const std::vector<::autofill_assistant::NodeData>& nodes) {*out_status = std::move(status);*out_nodes = std::move(nodes);
            loop->Quit();
          },
          &loop,
          out_status,
          out_nodes));
  loop.Run();
}
void AutofillAssistantAgentAsyncWaiter::SetElementValue(
    int32_t backend_node_id, const ::std::u16string& value, bool send_events, bool* out_success) {
  base::RunLoop loop;
  proxy_->SetElementValue(std::move(backend_node_id),std::move(value),std::move(send_events),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void AutofillAssistantAgentAsyncWaiter::SetElementChecked(
    int32_t backend_node_id, bool checked, bool send_events, bool* out_success) {
  base::RunLoop loop;
  proxy_->SetElementChecked(std::move(backend_node_id),std::move(checked),std::move(send_events),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}





}  // namespace mojom
}  // namespace autofill_assistant


#if defined(__clang__)
#pragma clang diagnostic pop
#endif