// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace autofill_assistant {
class ModelMetadata;
struct ModelMetadataDefaultTypeInternal;
extern ModelMetadataDefaultTypeInternal _ModelMetadata_default_instance_;
class ModelMetadata_InputMetadata;
struct ModelMetadata_InputMetadataDefaultTypeInternal;
extern ModelMetadata_InputMetadataDefaultTypeInternal _ModelMetadata_InputMetadata_default_instance_;
class ModelMetadata_ObjectiveMetadata;
struct ModelMetadata_ObjectiveMetadataDefaultTypeInternal;
extern ModelMetadata_ObjectiveMetadataDefaultTypeInternal _ModelMetadata_ObjectiveMetadata_default_instance_;
class ModelMetadata_OutputMetadata;
struct ModelMetadata_OutputMetadataDefaultTypeInternal;
extern ModelMetadata_OutputMetadataDefaultTypeInternal _ModelMetadata_OutputMetadata_default_instance_;
class ModelMetadata_SemanticRoleMetadata;
struct ModelMetadata_SemanticRoleMetadataDefaultTypeInternal;
extern ModelMetadata_SemanticRoleMetadataDefaultTypeInternal _ModelMetadata_SemanticRoleMetadata_default_instance_;
class ModelMetadata_TagMetadata;
struct ModelMetadata_TagMetadataDefaultTypeInternal;
extern ModelMetadata_TagMetadataDefaultTypeInternal _ModelMetadata_TagMetadata_default_instance_;
class ModelMetadata_TextMetadata;
struct ModelMetadata_TextMetadataDefaultTypeInternal;
extern ModelMetadata_TextMetadataDefaultTypeInternal _ModelMetadata_TextMetadata_default_instance_;
class ModelMetadata_TypeMetadata;
struct ModelMetadata_TypeMetadataDefaultTypeInternal;
extern ModelMetadata_TypeMetadataDefaultTypeInternal _ModelMetadata_TypeMetadata_default_instance_;
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill_assistant::ModelMetadata* Arena::CreateMaybeMessage<::autofill_assistant::ModelMetadata>(Arena*);
template<> ::autofill_assistant::ModelMetadata_InputMetadata* Arena::CreateMaybeMessage<::autofill_assistant::ModelMetadata_InputMetadata>(Arena*);
template<> ::autofill_assistant::ModelMetadata_ObjectiveMetadata* Arena::CreateMaybeMessage<::autofill_assistant::ModelMetadata_ObjectiveMetadata>(Arena*);
template<> ::autofill_assistant::ModelMetadata_OutputMetadata* Arena::CreateMaybeMessage<::autofill_assistant::ModelMetadata_OutputMetadata>(Arena*);
template<> ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* Arena::CreateMaybeMessage<::autofill_assistant::ModelMetadata_SemanticRoleMetadata>(Arena*);
template<> ::autofill_assistant::ModelMetadata_TagMetadata* Arena::CreateMaybeMessage<::autofill_assistant::ModelMetadata_TagMetadata>(Arena*);
template<> ::autofill_assistant::ModelMetadata_TextMetadata* Arena::CreateMaybeMessage<::autofill_assistant::ModelMetadata_TextMetadata>(Arena*);
template<> ::autofill_assistant::ModelMetadata_TypeMetadata* Arena::CreateMaybeMessage<::autofill_assistant::ModelMetadata_TypeMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill_assistant {

// ===================================================================

class ModelMetadata_TagMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.ModelMetadata.TagMetadata) */ {
 public:
  inline ModelMetadata_TagMetadata() : ModelMetadata_TagMetadata(nullptr) {}
  ~ModelMetadata_TagMetadata() override;
  explicit PROTOBUF_CONSTEXPR ModelMetadata_TagMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelMetadata_TagMetadata(const ModelMetadata_TagMetadata& from);
  ModelMetadata_TagMetadata(ModelMetadata_TagMetadata&& from) noexcept
    : ModelMetadata_TagMetadata() {
    *this = ::std::move(from);
  }

  inline ModelMetadata_TagMetadata& operator=(const ModelMetadata_TagMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMetadata_TagMetadata& operator=(ModelMetadata_TagMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelMetadata_TagMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelMetadata_TagMetadata* internal_default_instance() {
    return reinterpret_cast<const ModelMetadata_TagMetadata*>(
               &_ModelMetadata_TagMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelMetadata_TagMetadata& a, ModelMetadata_TagMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModelMetadata_TagMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelMetadata_TagMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelMetadata_TagMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelMetadata_TagMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelMetadata_TagMetadata& from);
  void MergeFrom(const ModelMetadata_TagMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelMetadata_TagMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.ModelMetadata.TagMetadata";
  }
  protected:
  explicit ModelMetadata_TagMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabularyFieldNumber = 1,
  };
  // optional string vocabulary = 1;
  bool has_vocabulary() const;
  private:
  bool _internal_has_vocabulary() const;
  public:
  void clear_vocabulary();
  const std::string& vocabulary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vocabulary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vocabulary();
  PROTOBUF_NODISCARD std::string* release_vocabulary();
  void set_allocated_vocabulary(std::string* vocabulary);
  private:
  const std::string& _internal_vocabulary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vocabulary(const std::string& value);
  std::string* _internal_mutable_vocabulary();
  public:

  // @@protoc_insertion_point(class_scope:autofill_assistant.ModelMetadata.TagMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocabulary_;
  friend struct ::TableStruct_model_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ModelMetadata_TypeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.ModelMetadata.TypeMetadata) */ {
 public:
  inline ModelMetadata_TypeMetadata() : ModelMetadata_TypeMetadata(nullptr) {}
  ~ModelMetadata_TypeMetadata() override;
  explicit PROTOBUF_CONSTEXPR ModelMetadata_TypeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelMetadata_TypeMetadata(const ModelMetadata_TypeMetadata& from);
  ModelMetadata_TypeMetadata(ModelMetadata_TypeMetadata&& from) noexcept
    : ModelMetadata_TypeMetadata() {
    *this = ::std::move(from);
  }

  inline ModelMetadata_TypeMetadata& operator=(const ModelMetadata_TypeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMetadata_TypeMetadata& operator=(ModelMetadata_TypeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelMetadata_TypeMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelMetadata_TypeMetadata* internal_default_instance() {
    return reinterpret_cast<const ModelMetadata_TypeMetadata*>(
               &_ModelMetadata_TypeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelMetadata_TypeMetadata& a, ModelMetadata_TypeMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModelMetadata_TypeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelMetadata_TypeMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelMetadata_TypeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelMetadata_TypeMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelMetadata_TypeMetadata& from);
  void MergeFrom(const ModelMetadata_TypeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelMetadata_TypeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.ModelMetadata.TypeMetadata";
  }
  protected:
  explicit ModelMetadata_TypeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabularyFieldNumber = 1,
  };
  // optional string vocabulary = 1;
  bool has_vocabulary() const;
  private:
  bool _internal_has_vocabulary() const;
  public:
  void clear_vocabulary();
  const std::string& vocabulary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vocabulary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vocabulary();
  PROTOBUF_NODISCARD std::string* release_vocabulary();
  void set_allocated_vocabulary(std::string* vocabulary);
  private:
  const std::string& _internal_vocabulary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vocabulary(const std::string& value);
  std::string* _internal_mutable_vocabulary();
  public:

  // @@protoc_insertion_point(class_scope:autofill_assistant.ModelMetadata.TypeMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocabulary_;
  friend struct ::TableStruct_model_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ModelMetadata_TextMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.ModelMetadata.TextMetadata) */ {
 public:
  inline ModelMetadata_TextMetadata() : ModelMetadata_TextMetadata(nullptr) {}
  ~ModelMetadata_TextMetadata() override;
  explicit PROTOBUF_CONSTEXPR ModelMetadata_TextMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelMetadata_TextMetadata(const ModelMetadata_TextMetadata& from);
  ModelMetadata_TextMetadata(ModelMetadata_TextMetadata&& from) noexcept
    : ModelMetadata_TextMetadata() {
    *this = ::std::move(from);
  }

  inline ModelMetadata_TextMetadata& operator=(const ModelMetadata_TextMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMetadata_TextMetadata& operator=(ModelMetadata_TextMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelMetadata_TextMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelMetadata_TextMetadata* internal_default_instance() {
    return reinterpret_cast<const ModelMetadata_TextMetadata*>(
               &_ModelMetadata_TextMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModelMetadata_TextMetadata& a, ModelMetadata_TextMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModelMetadata_TextMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelMetadata_TextMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelMetadata_TextMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelMetadata_TextMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelMetadata_TextMetadata& from);
  void MergeFrom(const ModelMetadata_TextMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelMetadata_TextMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.ModelMetadata.TextMetadata";
  }
  protected:
  explicit ModelMetadata_TextMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabularyFieldNumber = 1,
    kRegexFieldNumber = 2,
  };
  // optional string vocabulary = 1;
  bool has_vocabulary() const;
  private:
  bool _internal_has_vocabulary() const;
  public:
  void clear_vocabulary();
  const std::string& vocabulary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vocabulary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vocabulary();
  PROTOBUF_NODISCARD std::string* release_vocabulary();
  void set_allocated_vocabulary(std::string* vocabulary);
  private:
  const std::string& _internal_vocabulary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vocabulary(const std::string& value);
  std::string* _internal_mutable_vocabulary();
  public:

  // optional string regex = 2;
  bool has_regex() const;
  private:
  bool _internal_has_regex() const;
  public:
  void clear_regex();
  const std::string& regex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_regex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_regex();
  PROTOBUF_NODISCARD std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  private:
  const std::string& _internal_regex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // @@protoc_insertion_point(class_scope:autofill_assistant.ModelMetadata.TextMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocabulary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  friend struct ::TableStruct_model_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ModelMetadata_InputMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.ModelMetadata.InputMetadata) */ {
 public:
  inline ModelMetadata_InputMetadata() : ModelMetadata_InputMetadata(nullptr) {}
  ~ModelMetadata_InputMetadata() override;
  explicit PROTOBUF_CONSTEXPR ModelMetadata_InputMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelMetadata_InputMetadata(const ModelMetadata_InputMetadata& from);
  ModelMetadata_InputMetadata(ModelMetadata_InputMetadata&& from) noexcept
    : ModelMetadata_InputMetadata() {
    *this = ::std::move(from);
  }

  inline ModelMetadata_InputMetadata& operator=(const ModelMetadata_InputMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMetadata_InputMetadata& operator=(ModelMetadata_InputMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelMetadata_InputMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelMetadata_InputMetadata* internal_default_instance() {
    return reinterpret_cast<const ModelMetadata_InputMetadata*>(
               &_ModelMetadata_InputMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelMetadata_InputMetadata& a, ModelMetadata_InputMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModelMetadata_InputMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelMetadata_InputMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelMetadata_InputMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelMetadata_InputMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelMetadata_InputMetadata& from);
  void MergeFrom(const ModelMetadata_InputMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelMetadata_InputMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.ModelMetadata.InputMetadata";
  }
  protected:
  explicit ModelMetadata_InputMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTextFieldNumber = 3,
  };
  // optional .autofill_assistant.ModelMetadata.TagMetadata tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::autofill_assistant::ModelMetadata_TagMetadata& tag() const;
  PROTOBUF_NODISCARD ::autofill_assistant::ModelMetadata_TagMetadata* release_tag();
  ::autofill_assistant::ModelMetadata_TagMetadata* mutable_tag();
  void set_allocated_tag(::autofill_assistant::ModelMetadata_TagMetadata* tag);
  private:
  const ::autofill_assistant::ModelMetadata_TagMetadata& _internal_tag() const;
  ::autofill_assistant::ModelMetadata_TagMetadata* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::autofill_assistant::ModelMetadata_TagMetadata* tag);
  ::autofill_assistant::ModelMetadata_TagMetadata* unsafe_arena_release_tag();

  // optional .autofill_assistant.ModelMetadata.TypeMetadata type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::autofill_assistant::ModelMetadata_TypeMetadata& type() const;
  PROTOBUF_NODISCARD ::autofill_assistant::ModelMetadata_TypeMetadata* release_type();
  ::autofill_assistant::ModelMetadata_TypeMetadata* mutable_type();
  void set_allocated_type(::autofill_assistant::ModelMetadata_TypeMetadata* type);
  private:
  const ::autofill_assistant::ModelMetadata_TypeMetadata& _internal_type() const;
  ::autofill_assistant::ModelMetadata_TypeMetadata* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::autofill_assistant::ModelMetadata_TypeMetadata* type);
  ::autofill_assistant::ModelMetadata_TypeMetadata* unsafe_arena_release_type();

  // optional .autofill_assistant.ModelMetadata.TextMetadata text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::autofill_assistant::ModelMetadata_TextMetadata& text() const;
  PROTOBUF_NODISCARD ::autofill_assistant::ModelMetadata_TextMetadata* release_text();
  ::autofill_assistant::ModelMetadata_TextMetadata* mutable_text();
  void set_allocated_text(::autofill_assistant::ModelMetadata_TextMetadata* text);
  private:
  const ::autofill_assistant::ModelMetadata_TextMetadata& _internal_text() const;
  ::autofill_assistant::ModelMetadata_TextMetadata* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::autofill_assistant::ModelMetadata_TextMetadata* text);
  ::autofill_assistant::ModelMetadata_TextMetadata* unsafe_arena_release_text();

  // @@protoc_insertion_point(class_scope:autofill_assistant.ModelMetadata.InputMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autofill_assistant::ModelMetadata_TagMetadata* tag_;
  ::autofill_assistant::ModelMetadata_TypeMetadata* type_;
  ::autofill_assistant::ModelMetadata_TextMetadata* text_;
  friend struct ::TableStruct_model_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ModelMetadata_SemanticRoleMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.ModelMetadata.SemanticRoleMetadata) */ {
 public:
  inline ModelMetadata_SemanticRoleMetadata() : ModelMetadata_SemanticRoleMetadata(nullptr) {}
  ~ModelMetadata_SemanticRoleMetadata() override;
  explicit PROTOBUF_CONSTEXPR ModelMetadata_SemanticRoleMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelMetadata_SemanticRoleMetadata(const ModelMetadata_SemanticRoleMetadata& from);
  ModelMetadata_SemanticRoleMetadata(ModelMetadata_SemanticRoleMetadata&& from) noexcept
    : ModelMetadata_SemanticRoleMetadata() {
    *this = ::std::move(from);
  }

  inline ModelMetadata_SemanticRoleMetadata& operator=(const ModelMetadata_SemanticRoleMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMetadata_SemanticRoleMetadata& operator=(ModelMetadata_SemanticRoleMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelMetadata_SemanticRoleMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelMetadata_SemanticRoleMetadata* internal_default_instance() {
    return reinterpret_cast<const ModelMetadata_SemanticRoleMetadata*>(
               &_ModelMetadata_SemanticRoleMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModelMetadata_SemanticRoleMetadata& a, ModelMetadata_SemanticRoleMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModelMetadata_SemanticRoleMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelMetadata_SemanticRoleMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelMetadata_SemanticRoleMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelMetadata_SemanticRoleMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelMetadata_SemanticRoleMetadata& from);
  void MergeFrom(const ModelMetadata_SemanticRoleMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelMetadata_SemanticRoleMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.ModelMetadata.SemanticRoleMetadata";
  }
  protected:
  explicit ModelMetadata_SemanticRoleMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 1,
    kObjectiveBlockIndexFieldNumber = 2,
  };
  // repeated int32 classes = 1 [packed = true];
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  private:
  int32_t _internal_classes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_classes() const;
  void _internal_add_classes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_classes();
  public:
  int32_t classes(int index) const;
  void set_classes(int index, int32_t value);
  void add_classes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_classes();

  // repeated int32 objective_block_index = 2 [packed = true];
  int objective_block_index_size() const;
  private:
  int _internal_objective_block_index_size() const;
  public:
  void clear_objective_block_index();
  private:
  int32_t _internal_objective_block_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_objective_block_index() const;
  void _internal_add_objective_block_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_objective_block_index();
  public:
  int32_t objective_block_index(int index) const;
  void set_objective_block_index(int index, int32_t value);
  void add_objective_block_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      objective_block_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_objective_block_index();

  // @@protoc_insertion_point(class_scope:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > classes_;
  mutable std::atomic<int> _classes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > objective_block_index_;
  mutable std::atomic<int> _objective_block_index_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ModelMetadata_ObjectiveMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.ModelMetadata.ObjectiveMetadata) */ {
 public:
  inline ModelMetadata_ObjectiveMetadata() : ModelMetadata_ObjectiveMetadata(nullptr) {}
  ~ModelMetadata_ObjectiveMetadata() override;
  explicit PROTOBUF_CONSTEXPR ModelMetadata_ObjectiveMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelMetadata_ObjectiveMetadata(const ModelMetadata_ObjectiveMetadata& from);
  ModelMetadata_ObjectiveMetadata(ModelMetadata_ObjectiveMetadata&& from) noexcept
    : ModelMetadata_ObjectiveMetadata() {
    *this = ::std::move(from);
  }

  inline ModelMetadata_ObjectiveMetadata& operator=(const ModelMetadata_ObjectiveMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMetadata_ObjectiveMetadata& operator=(ModelMetadata_ObjectiveMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelMetadata_ObjectiveMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelMetadata_ObjectiveMetadata* internal_default_instance() {
    return reinterpret_cast<const ModelMetadata_ObjectiveMetadata*>(
               &_ModelMetadata_ObjectiveMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModelMetadata_ObjectiveMetadata& a, ModelMetadata_ObjectiveMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModelMetadata_ObjectiveMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelMetadata_ObjectiveMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelMetadata_ObjectiveMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelMetadata_ObjectiveMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelMetadata_ObjectiveMetadata& from);
  void MergeFrom(const ModelMetadata_ObjectiveMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelMetadata_ObjectiveMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.ModelMetadata.ObjectiveMetadata";
  }
  protected:
  explicit ModelMetadata_ObjectiveMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 1,
    kBlocksFieldNumber = 2,
  };
  // repeated int32 classes = 1 [packed = true];
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  private:
  int32_t _internal_classes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_classes() const;
  void _internal_add_classes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_classes();
  public:
  int32_t classes(int index) const;
  void set_classes(int index, int32_t value);
  void add_classes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_classes();

  // repeated int32 blocks = 2 [packed = true];
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  private:
  int32_t _internal_blocks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_blocks() const;
  void _internal_add_blocks(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_blocks();
  public:
  int32_t blocks(int index) const;
  void set_blocks(int index, int32_t value);
  void add_blocks(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_blocks();

  // @@protoc_insertion_point(class_scope:autofill_assistant.ModelMetadata.ObjectiveMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > classes_;
  mutable std::atomic<int> _classes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > blocks_;
  mutable std::atomic<int> _blocks_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ModelMetadata_OutputMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.ModelMetadata.OutputMetadata) */ {
 public:
  inline ModelMetadata_OutputMetadata() : ModelMetadata_OutputMetadata(nullptr) {}
  ~ModelMetadata_OutputMetadata() override;
  explicit PROTOBUF_CONSTEXPR ModelMetadata_OutputMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelMetadata_OutputMetadata(const ModelMetadata_OutputMetadata& from);
  ModelMetadata_OutputMetadata(ModelMetadata_OutputMetadata&& from) noexcept
    : ModelMetadata_OutputMetadata() {
    *this = ::std::move(from);
  }

  inline ModelMetadata_OutputMetadata& operator=(const ModelMetadata_OutputMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMetadata_OutputMetadata& operator=(ModelMetadata_OutputMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelMetadata_OutputMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelMetadata_OutputMetadata* internal_default_instance() {
    return reinterpret_cast<const ModelMetadata_OutputMetadata*>(
               &_ModelMetadata_OutputMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ModelMetadata_OutputMetadata& a, ModelMetadata_OutputMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModelMetadata_OutputMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelMetadata_OutputMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelMetadata_OutputMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelMetadata_OutputMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelMetadata_OutputMetadata& from);
  void MergeFrom(const ModelMetadata_OutputMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelMetadata_OutputMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.ModelMetadata.OutputMetadata";
  }
  protected:
  explicit ModelMetadata_OutputMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSemanticRoleFieldNumber = 1,
    kObjectiveFieldNumber = 2,
  };
  // optional .autofill_assistant.ModelMetadata.SemanticRoleMetadata semantic_role = 1;
  bool has_semantic_role() const;
  private:
  bool _internal_has_semantic_role() const;
  public:
  void clear_semantic_role();
  const ::autofill_assistant::ModelMetadata_SemanticRoleMetadata& semantic_role() const;
  PROTOBUF_NODISCARD ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* release_semantic_role();
  ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* mutable_semantic_role();
  void set_allocated_semantic_role(::autofill_assistant::ModelMetadata_SemanticRoleMetadata* semantic_role);
  private:
  const ::autofill_assistant::ModelMetadata_SemanticRoleMetadata& _internal_semantic_role() const;
  ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* _internal_mutable_semantic_role();
  public:
  void unsafe_arena_set_allocated_semantic_role(
      ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* semantic_role);
  ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* unsafe_arena_release_semantic_role();

  // optional .autofill_assistant.ModelMetadata.ObjectiveMetadata objective = 2;
  bool has_objective() const;
  private:
  bool _internal_has_objective() const;
  public:
  void clear_objective();
  const ::autofill_assistant::ModelMetadata_ObjectiveMetadata& objective() const;
  PROTOBUF_NODISCARD ::autofill_assistant::ModelMetadata_ObjectiveMetadata* release_objective();
  ::autofill_assistant::ModelMetadata_ObjectiveMetadata* mutable_objective();
  void set_allocated_objective(::autofill_assistant::ModelMetadata_ObjectiveMetadata* objective);
  private:
  const ::autofill_assistant::ModelMetadata_ObjectiveMetadata& _internal_objective() const;
  ::autofill_assistant::ModelMetadata_ObjectiveMetadata* _internal_mutable_objective();
  public:
  void unsafe_arena_set_allocated_objective(
      ::autofill_assistant::ModelMetadata_ObjectiveMetadata* objective);
  ::autofill_assistant::ModelMetadata_ObjectiveMetadata* unsafe_arena_release_objective();

  // @@protoc_insertion_point(class_scope:autofill_assistant.ModelMetadata.OutputMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* semantic_role_;
  ::autofill_assistant::ModelMetadata_ObjectiveMetadata* objective_;
  friend struct ::TableStruct_model_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ModelMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.ModelMetadata) */ {
 public:
  inline ModelMetadata() : ModelMetadata(nullptr) {}
  ~ModelMetadata() override;
  explicit PROTOBUF_CONSTEXPR ModelMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelMetadata(const ModelMetadata& from);
  ModelMetadata(ModelMetadata&& from) noexcept
    : ModelMetadata() {
    *this = ::std::move(from);
  }

  inline ModelMetadata& operator=(const ModelMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMetadata& operator=(ModelMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelMetadata* internal_default_instance() {
    return reinterpret_cast<const ModelMetadata*>(
               &_ModelMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ModelMetadata& a, ModelMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModelMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelMetadata& from);
  void MergeFrom(const ModelMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.ModelMetadata";
  }
  protected:
  explicit ModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ModelMetadata_TagMetadata TagMetadata;
  typedef ModelMetadata_TypeMetadata TypeMetadata;
  typedef ModelMetadata_TextMetadata TextMetadata;
  typedef ModelMetadata_InputMetadata InputMetadata;
  typedef ModelMetadata_SemanticRoleMetadata SemanticRoleMetadata;
  typedef ModelMetadata_ObjectiveMetadata ObjectiveMetadata;
  typedef ModelMetadata_OutputMetadata OutputMetadata;

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
  };
  // optional .autofill_assistant.ModelMetadata.InputMetadata input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::autofill_assistant::ModelMetadata_InputMetadata& input() const;
  PROTOBUF_NODISCARD ::autofill_assistant::ModelMetadata_InputMetadata* release_input();
  ::autofill_assistant::ModelMetadata_InputMetadata* mutable_input();
  void set_allocated_input(::autofill_assistant::ModelMetadata_InputMetadata* input);
  private:
  const ::autofill_assistant::ModelMetadata_InputMetadata& _internal_input() const;
  ::autofill_assistant::ModelMetadata_InputMetadata* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::autofill_assistant::ModelMetadata_InputMetadata* input);
  ::autofill_assistant::ModelMetadata_InputMetadata* unsafe_arena_release_input();

  // optional .autofill_assistant.ModelMetadata.OutputMetadata output = 2;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::autofill_assistant::ModelMetadata_OutputMetadata& output() const;
  PROTOBUF_NODISCARD ::autofill_assistant::ModelMetadata_OutputMetadata* release_output();
  ::autofill_assistant::ModelMetadata_OutputMetadata* mutable_output();
  void set_allocated_output(::autofill_assistant::ModelMetadata_OutputMetadata* output);
  private:
  const ::autofill_assistant::ModelMetadata_OutputMetadata& _internal_output() const;
  ::autofill_assistant::ModelMetadata_OutputMetadata* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::autofill_assistant::ModelMetadata_OutputMetadata* output);
  ::autofill_assistant::ModelMetadata_OutputMetadata* unsafe_arena_release_output();

  // @@protoc_insertion_point(class_scope:autofill_assistant.ModelMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autofill_assistant::ModelMetadata_InputMetadata* input_;
  ::autofill_assistant::ModelMetadata_OutputMetadata* output_;
  friend struct ::TableStruct_model_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelMetadata_TagMetadata

// optional string vocabulary = 1;
inline bool ModelMetadata_TagMetadata::_internal_has_vocabulary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelMetadata_TagMetadata::has_vocabulary() const {
  return _internal_has_vocabulary();
}
inline void ModelMetadata_TagMetadata::clear_vocabulary() {
  vocabulary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelMetadata_TagMetadata::vocabulary() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.TagMetadata.vocabulary)
  return _internal_vocabulary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelMetadata_TagMetadata::set_vocabulary(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 vocabulary_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill_assistant.ModelMetadata.TagMetadata.vocabulary)
}
inline std::string* ModelMetadata_TagMetadata::mutable_vocabulary() {
  std::string* _s = _internal_mutable_vocabulary();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.TagMetadata.vocabulary)
  return _s;
}
inline const std::string& ModelMetadata_TagMetadata::_internal_vocabulary() const {
  return vocabulary_.Get();
}
inline void ModelMetadata_TagMetadata::_internal_set_vocabulary(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vocabulary_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelMetadata_TagMetadata::_internal_mutable_vocabulary() {
  _has_bits_[0] |= 0x00000001u;
  return vocabulary_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelMetadata_TagMetadata::release_vocabulary() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.TagMetadata.vocabulary)
  if (!_internal_has_vocabulary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = vocabulary_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vocabulary_.IsDefault()) {
    vocabulary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelMetadata_TagMetadata::set_allocated_vocabulary(std::string* vocabulary) {
  if (vocabulary != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vocabulary_.SetAllocated(vocabulary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vocabulary_.IsDefault()) {
    vocabulary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.TagMetadata.vocabulary)
}

// -------------------------------------------------------------------

// ModelMetadata_TypeMetadata

// optional string vocabulary = 1;
inline bool ModelMetadata_TypeMetadata::_internal_has_vocabulary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelMetadata_TypeMetadata::has_vocabulary() const {
  return _internal_has_vocabulary();
}
inline void ModelMetadata_TypeMetadata::clear_vocabulary() {
  vocabulary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelMetadata_TypeMetadata::vocabulary() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.TypeMetadata.vocabulary)
  return _internal_vocabulary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelMetadata_TypeMetadata::set_vocabulary(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 vocabulary_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill_assistant.ModelMetadata.TypeMetadata.vocabulary)
}
inline std::string* ModelMetadata_TypeMetadata::mutable_vocabulary() {
  std::string* _s = _internal_mutable_vocabulary();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.TypeMetadata.vocabulary)
  return _s;
}
inline const std::string& ModelMetadata_TypeMetadata::_internal_vocabulary() const {
  return vocabulary_.Get();
}
inline void ModelMetadata_TypeMetadata::_internal_set_vocabulary(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vocabulary_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelMetadata_TypeMetadata::_internal_mutable_vocabulary() {
  _has_bits_[0] |= 0x00000001u;
  return vocabulary_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelMetadata_TypeMetadata::release_vocabulary() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.TypeMetadata.vocabulary)
  if (!_internal_has_vocabulary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = vocabulary_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vocabulary_.IsDefault()) {
    vocabulary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelMetadata_TypeMetadata::set_allocated_vocabulary(std::string* vocabulary) {
  if (vocabulary != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vocabulary_.SetAllocated(vocabulary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vocabulary_.IsDefault()) {
    vocabulary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.TypeMetadata.vocabulary)
}

// -------------------------------------------------------------------

// ModelMetadata_TextMetadata

// optional string vocabulary = 1;
inline bool ModelMetadata_TextMetadata::_internal_has_vocabulary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelMetadata_TextMetadata::has_vocabulary() const {
  return _internal_has_vocabulary();
}
inline void ModelMetadata_TextMetadata::clear_vocabulary() {
  vocabulary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelMetadata_TextMetadata::vocabulary() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.TextMetadata.vocabulary)
  return _internal_vocabulary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelMetadata_TextMetadata::set_vocabulary(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 vocabulary_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill_assistant.ModelMetadata.TextMetadata.vocabulary)
}
inline std::string* ModelMetadata_TextMetadata::mutable_vocabulary() {
  std::string* _s = _internal_mutable_vocabulary();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.TextMetadata.vocabulary)
  return _s;
}
inline const std::string& ModelMetadata_TextMetadata::_internal_vocabulary() const {
  return vocabulary_.Get();
}
inline void ModelMetadata_TextMetadata::_internal_set_vocabulary(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vocabulary_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelMetadata_TextMetadata::_internal_mutable_vocabulary() {
  _has_bits_[0] |= 0x00000001u;
  return vocabulary_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelMetadata_TextMetadata::release_vocabulary() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.TextMetadata.vocabulary)
  if (!_internal_has_vocabulary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = vocabulary_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vocabulary_.IsDefault()) {
    vocabulary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelMetadata_TextMetadata::set_allocated_vocabulary(std::string* vocabulary) {
  if (vocabulary != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vocabulary_.SetAllocated(vocabulary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vocabulary_.IsDefault()) {
    vocabulary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.TextMetadata.vocabulary)
}

// optional string regex = 2;
inline bool ModelMetadata_TextMetadata::_internal_has_regex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelMetadata_TextMetadata::has_regex() const {
  return _internal_has_regex();
}
inline void ModelMetadata_TextMetadata::clear_regex() {
  regex_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelMetadata_TextMetadata::regex() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.TextMetadata.regex)
  return _internal_regex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelMetadata_TextMetadata::set_regex(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 regex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill_assistant.ModelMetadata.TextMetadata.regex)
}
inline std::string* ModelMetadata_TextMetadata::mutable_regex() {
  std::string* _s = _internal_mutable_regex();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.TextMetadata.regex)
  return _s;
}
inline const std::string& ModelMetadata_TextMetadata::_internal_regex() const {
  return regex_.Get();
}
inline void ModelMetadata_TextMetadata::_internal_set_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  regex_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelMetadata_TextMetadata::_internal_mutable_regex() {
  _has_bits_[0] |= 0x00000002u;
  return regex_.Mutable(GetArenaForAllocation());
}
inline std::string* ModelMetadata_TextMetadata::release_regex() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.TextMetadata.regex)
  if (!_internal_has_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = regex_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (regex_.IsDefault()) {
    regex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModelMetadata_TextMetadata::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  regex_.SetAllocated(regex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (regex_.IsDefault()) {
    regex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.TextMetadata.regex)
}

// -------------------------------------------------------------------

// ModelMetadata_InputMetadata

// optional .autofill_assistant.ModelMetadata.TagMetadata tag = 1;
inline bool ModelMetadata_InputMetadata::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tag_ != nullptr);
  return value;
}
inline bool ModelMetadata_InputMetadata::has_tag() const {
  return _internal_has_tag();
}
inline void ModelMetadata_InputMetadata::clear_tag() {
  if (tag_ != nullptr) tag_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::autofill_assistant::ModelMetadata_TagMetadata& ModelMetadata_InputMetadata::_internal_tag() const {
  const ::autofill_assistant::ModelMetadata_TagMetadata* p = tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::ModelMetadata_TagMetadata&>(
      ::autofill_assistant::_ModelMetadata_TagMetadata_default_instance_);
}
inline const ::autofill_assistant::ModelMetadata_TagMetadata& ModelMetadata_InputMetadata::tag() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.InputMetadata.tag)
  return _internal_tag();
}
inline void ModelMetadata_InputMetadata::unsafe_arena_set_allocated_tag(
    ::autofill_assistant::ModelMetadata_TagMetadata* tag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.ModelMetadata.InputMetadata.tag)
}
inline ::autofill_assistant::ModelMetadata_TagMetadata* ModelMetadata_InputMetadata::release_tag() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::ModelMetadata_TagMetadata* temp = tag_;
  tag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::ModelMetadata_TagMetadata* ModelMetadata_InputMetadata::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.InputMetadata.tag)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::ModelMetadata_TagMetadata* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::autofill_assistant::ModelMetadata_TagMetadata* ModelMetadata_InputMetadata::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::ModelMetadata_TagMetadata>(GetArenaForAllocation());
    tag_ = p;
  }
  return tag_;
}
inline ::autofill_assistant::ModelMetadata_TagMetadata* ModelMetadata_InputMetadata::mutable_tag() {
  ::autofill_assistant::ModelMetadata_TagMetadata* _msg = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.InputMetadata.tag)
  return _msg;
}
inline void ModelMetadata_InputMetadata::set_allocated_tag(::autofill_assistant::ModelMetadata_TagMetadata* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.InputMetadata.tag)
}

// optional .autofill_assistant.ModelMetadata.TypeMetadata type = 2;
inline bool ModelMetadata_InputMetadata::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool ModelMetadata_InputMetadata::has_type() const {
  return _internal_has_type();
}
inline void ModelMetadata_InputMetadata::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::autofill_assistant::ModelMetadata_TypeMetadata& ModelMetadata_InputMetadata::_internal_type() const {
  const ::autofill_assistant::ModelMetadata_TypeMetadata* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::ModelMetadata_TypeMetadata&>(
      ::autofill_assistant::_ModelMetadata_TypeMetadata_default_instance_);
}
inline const ::autofill_assistant::ModelMetadata_TypeMetadata& ModelMetadata_InputMetadata::type() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.InputMetadata.type)
  return _internal_type();
}
inline void ModelMetadata_InputMetadata::unsafe_arena_set_allocated_type(
    ::autofill_assistant::ModelMetadata_TypeMetadata* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.ModelMetadata.InputMetadata.type)
}
inline ::autofill_assistant::ModelMetadata_TypeMetadata* ModelMetadata_InputMetadata::release_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::autofill_assistant::ModelMetadata_TypeMetadata* temp = type_;
  type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::ModelMetadata_TypeMetadata* ModelMetadata_InputMetadata::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.InputMetadata.type)
  _has_bits_[0] &= ~0x00000002u;
  ::autofill_assistant::ModelMetadata_TypeMetadata* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::autofill_assistant::ModelMetadata_TypeMetadata* ModelMetadata_InputMetadata::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::ModelMetadata_TypeMetadata>(GetArenaForAllocation());
    type_ = p;
  }
  return type_;
}
inline ::autofill_assistant::ModelMetadata_TypeMetadata* ModelMetadata_InputMetadata::mutable_type() {
  ::autofill_assistant::ModelMetadata_TypeMetadata* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.InputMetadata.type)
  return _msg;
}
inline void ModelMetadata_InputMetadata::set_allocated_type(::autofill_assistant::ModelMetadata_TypeMetadata* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.InputMetadata.type)
}

// optional .autofill_assistant.ModelMetadata.TextMetadata text = 3;
inline bool ModelMetadata_InputMetadata::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || text_ != nullptr);
  return value;
}
inline bool ModelMetadata_InputMetadata::has_text() const {
  return _internal_has_text();
}
inline void ModelMetadata_InputMetadata::clear_text() {
  if (text_ != nullptr) text_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::autofill_assistant::ModelMetadata_TextMetadata& ModelMetadata_InputMetadata::_internal_text() const {
  const ::autofill_assistant::ModelMetadata_TextMetadata* p = text_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::ModelMetadata_TextMetadata&>(
      ::autofill_assistant::_ModelMetadata_TextMetadata_default_instance_);
}
inline const ::autofill_assistant::ModelMetadata_TextMetadata& ModelMetadata_InputMetadata::text() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.InputMetadata.text)
  return _internal_text();
}
inline void ModelMetadata_InputMetadata::unsafe_arena_set_allocated_text(
    ::autofill_assistant::ModelMetadata_TextMetadata* text) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.ModelMetadata.InputMetadata.text)
}
inline ::autofill_assistant::ModelMetadata_TextMetadata* ModelMetadata_InputMetadata::release_text() {
  _has_bits_[0] &= ~0x00000004u;
  ::autofill_assistant::ModelMetadata_TextMetadata* temp = text_;
  text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::ModelMetadata_TextMetadata* ModelMetadata_InputMetadata::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.InputMetadata.text)
  _has_bits_[0] &= ~0x00000004u;
  ::autofill_assistant::ModelMetadata_TextMetadata* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::autofill_assistant::ModelMetadata_TextMetadata* ModelMetadata_InputMetadata::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000004u;
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::ModelMetadata_TextMetadata>(GetArenaForAllocation());
    text_ = p;
  }
  return text_;
}
inline ::autofill_assistant::ModelMetadata_TextMetadata* ModelMetadata_InputMetadata::mutable_text() {
  ::autofill_assistant::ModelMetadata_TextMetadata* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.InputMetadata.text)
  return _msg;
}
inline void ModelMetadata_InputMetadata::set_allocated_text(::autofill_assistant::ModelMetadata_TextMetadata* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.InputMetadata.text)
}

// -------------------------------------------------------------------

// ModelMetadata_SemanticRoleMetadata

// repeated int32 classes = 1 [packed = true];
inline int ModelMetadata_SemanticRoleMetadata::_internal_classes_size() const {
  return classes_.size();
}
inline int ModelMetadata_SemanticRoleMetadata::classes_size() const {
  return _internal_classes_size();
}
inline void ModelMetadata_SemanticRoleMetadata::clear_classes() {
  classes_.Clear();
}
inline int32_t ModelMetadata_SemanticRoleMetadata::_internal_classes(int index) const {
  return classes_.Get(index);
}
inline int32_t ModelMetadata_SemanticRoleMetadata::classes(int index) const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.SemanticRoleMetadata.classes)
  return _internal_classes(index);
}
inline void ModelMetadata_SemanticRoleMetadata::set_classes(int index, int32_t value) {
  classes_.Set(index, value);
  // @@protoc_insertion_point(field_set:autofill_assistant.ModelMetadata.SemanticRoleMetadata.classes)
}
inline void ModelMetadata_SemanticRoleMetadata::_internal_add_classes(int32_t value) {
  classes_.Add(value);
}
inline void ModelMetadata_SemanticRoleMetadata::add_classes(int32_t value) {
  _internal_add_classes(value);
  // @@protoc_insertion_point(field_add:autofill_assistant.ModelMetadata.SemanticRoleMetadata.classes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ModelMetadata_SemanticRoleMetadata::_internal_classes() const {
  return classes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ModelMetadata_SemanticRoleMetadata::classes() const {
  // @@protoc_insertion_point(field_list:autofill_assistant.ModelMetadata.SemanticRoleMetadata.classes)
  return _internal_classes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ModelMetadata_SemanticRoleMetadata::_internal_mutable_classes() {
  return &classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ModelMetadata_SemanticRoleMetadata::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:autofill_assistant.ModelMetadata.SemanticRoleMetadata.classes)
  return _internal_mutable_classes();
}

// repeated int32 objective_block_index = 2 [packed = true];
inline int ModelMetadata_SemanticRoleMetadata::_internal_objective_block_index_size() const {
  return objective_block_index_.size();
}
inline int ModelMetadata_SemanticRoleMetadata::objective_block_index_size() const {
  return _internal_objective_block_index_size();
}
inline void ModelMetadata_SemanticRoleMetadata::clear_objective_block_index() {
  objective_block_index_.Clear();
}
inline int32_t ModelMetadata_SemanticRoleMetadata::_internal_objective_block_index(int index) const {
  return objective_block_index_.Get(index);
}
inline int32_t ModelMetadata_SemanticRoleMetadata::objective_block_index(int index) const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.SemanticRoleMetadata.objective_block_index)
  return _internal_objective_block_index(index);
}
inline void ModelMetadata_SemanticRoleMetadata::set_objective_block_index(int index, int32_t value) {
  objective_block_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:autofill_assistant.ModelMetadata.SemanticRoleMetadata.objective_block_index)
}
inline void ModelMetadata_SemanticRoleMetadata::_internal_add_objective_block_index(int32_t value) {
  objective_block_index_.Add(value);
}
inline void ModelMetadata_SemanticRoleMetadata::add_objective_block_index(int32_t value) {
  _internal_add_objective_block_index(value);
  // @@protoc_insertion_point(field_add:autofill_assistant.ModelMetadata.SemanticRoleMetadata.objective_block_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ModelMetadata_SemanticRoleMetadata::_internal_objective_block_index() const {
  return objective_block_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ModelMetadata_SemanticRoleMetadata::objective_block_index() const {
  // @@protoc_insertion_point(field_list:autofill_assistant.ModelMetadata.SemanticRoleMetadata.objective_block_index)
  return _internal_objective_block_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ModelMetadata_SemanticRoleMetadata::_internal_mutable_objective_block_index() {
  return &objective_block_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ModelMetadata_SemanticRoleMetadata::mutable_objective_block_index() {
  // @@protoc_insertion_point(field_mutable_list:autofill_assistant.ModelMetadata.SemanticRoleMetadata.objective_block_index)
  return _internal_mutable_objective_block_index();
}

// -------------------------------------------------------------------

// ModelMetadata_ObjectiveMetadata

// repeated int32 classes = 1 [packed = true];
inline int ModelMetadata_ObjectiveMetadata::_internal_classes_size() const {
  return classes_.size();
}
inline int ModelMetadata_ObjectiveMetadata::classes_size() const {
  return _internal_classes_size();
}
inline void ModelMetadata_ObjectiveMetadata::clear_classes() {
  classes_.Clear();
}
inline int32_t ModelMetadata_ObjectiveMetadata::_internal_classes(int index) const {
  return classes_.Get(index);
}
inline int32_t ModelMetadata_ObjectiveMetadata::classes(int index) const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.ObjectiveMetadata.classes)
  return _internal_classes(index);
}
inline void ModelMetadata_ObjectiveMetadata::set_classes(int index, int32_t value) {
  classes_.Set(index, value);
  // @@protoc_insertion_point(field_set:autofill_assistant.ModelMetadata.ObjectiveMetadata.classes)
}
inline void ModelMetadata_ObjectiveMetadata::_internal_add_classes(int32_t value) {
  classes_.Add(value);
}
inline void ModelMetadata_ObjectiveMetadata::add_classes(int32_t value) {
  _internal_add_classes(value);
  // @@protoc_insertion_point(field_add:autofill_assistant.ModelMetadata.ObjectiveMetadata.classes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ModelMetadata_ObjectiveMetadata::_internal_classes() const {
  return classes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ModelMetadata_ObjectiveMetadata::classes() const {
  // @@protoc_insertion_point(field_list:autofill_assistant.ModelMetadata.ObjectiveMetadata.classes)
  return _internal_classes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ModelMetadata_ObjectiveMetadata::_internal_mutable_classes() {
  return &classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ModelMetadata_ObjectiveMetadata::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:autofill_assistant.ModelMetadata.ObjectiveMetadata.classes)
  return _internal_mutable_classes();
}

// repeated int32 blocks = 2 [packed = true];
inline int ModelMetadata_ObjectiveMetadata::_internal_blocks_size() const {
  return blocks_.size();
}
inline int ModelMetadata_ObjectiveMetadata::blocks_size() const {
  return _internal_blocks_size();
}
inline void ModelMetadata_ObjectiveMetadata::clear_blocks() {
  blocks_.Clear();
}
inline int32_t ModelMetadata_ObjectiveMetadata::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline int32_t ModelMetadata_ObjectiveMetadata::blocks(int index) const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.ObjectiveMetadata.blocks)
  return _internal_blocks(index);
}
inline void ModelMetadata_ObjectiveMetadata::set_blocks(int index, int32_t value) {
  blocks_.Set(index, value);
  // @@protoc_insertion_point(field_set:autofill_assistant.ModelMetadata.ObjectiveMetadata.blocks)
}
inline void ModelMetadata_ObjectiveMetadata::_internal_add_blocks(int32_t value) {
  blocks_.Add(value);
}
inline void ModelMetadata_ObjectiveMetadata::add_blocks(int32_t value) {
  _internal_add_blocks(value);
  // @@protoc_insertion_point(field_add:autofill_assistant.ModelMetadata.ObjectiveMetadata.blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ModelMetadata_ObjectiveMetadata::_internal_blocks() const {
  return blocks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ModelMetadata_ObjectiveMetadata::blocks() const {
  // @@protoc_insertion_point(field_list:autofill_assistant.ModelMetadata.ObjectiveMetadata.blocks)
  return _internal_blocks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ModelMetadata_ObjectiveMetadata::_internal_mutable_blocks() {
  return &blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ModelMetadata_ObjectiveMetadata::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:autofill_assistant.ModelMetadata.ObjectiveMetadata.blocks)
  return _internal_mutable_blocks();
}

// -------------------------------------------------------------------

// ModelMetadata_OutputMetadata

// optional .autofill_assistant.ModelMetadata.SemanticRoleMetadata semantic_role = 1;
inline bool ModelMetadata_OutputMetadata::_internal_has_semantic_role() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || semantic_role_ != nullptr);
  return value;
}
inline bool ModelMetadata_OutputMetadata::has_semantic_role() const {
  return _internal_has_semantic_role();
}
inline void ModelMetadata_OutputMetadata::clear_semantic_role() {
  if (semantic_role_ != nullptr) semantic_role_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::autofill_assistant::ModelMetadata_SemanticRoleMetadata& ModelMetadata_OutputMetadata::_internal_semantic_role() const {
  const ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* p = semantic_role_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::ModelMetadata_SemanticRoleMetadata&>(
      ::autofill_assistant::_ModelMetadata_SemanticRoleMetadata_default_instance_);
}
inline const ::autofill_assistant::ModelMetadata_SemanticRoleMetadata& ModelMetadata_OutputMetadata::semantic_role() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.OutputMetadata.semantic_role)
  return _internal_semantic_role();
}
inline void ModelMetadata_OutputMetadata::unsafe_arena_set_allocated_semantic_role(
    ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* semantic_role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(semantic_role_);
  }
  semantic_role_ = semantic_role;
  if (semantic_role) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.ModelMetadata.OutputMetadata.semantic_role)
}
inline ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* ModelMetadata_OutputMetadata::release_semantic_role() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* temp = semantic_role_;
  semantic_role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* ModelMetadata_OutputMetadata::unsafe_arena_release_semantic_role() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.OutputMetadata.semantic_role)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* temp = semantic_role_;
  semantic_role_ = nullptr;
  return temp;
}
inline ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* ModelMetadata_OutputMetadata::_internal_mutable_semantic_role() {
  _has_bits_[0] |= 0x00000001u;
  if (semantic_role_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::ModelMetadata_SemanticRoleMetadata>(GetArenaForAllocation());
    semantic_role_ = p;
  }
  return semantic_role_;
}
inline ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* ModelMetadata_OutputMetadata::mutable_semantic_role() {
  ::autofill_assistant::ModelMetadata_SemanticRoleMetadata* _msg = _internal_mutable_semantic_role();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.OutputMetadata.semantic_role)
  return _msg;
}
inline void ModelMetadata_OutputMetadata::set_allocated_semantic_role(::autofill_assistant::ModelMetadata_SemanticRoleMetadata* semantic_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete semantic_role_;
  }
  if (semantic_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(semantic_role);
    if (message_arena != submessage_arena) {
      semantic_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, semantic_role, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  semantic_role_ = semantic_role;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.OutputMetadata.semantic_role)
}

// optional .autofill_assistant.ModelMetadata.ObjectiveMetadata objective = 2;
inline bool ModelMetadata_OutputMetadata::_internal_has_objective() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || objective_ != nullptr);
  return value;
}
inline bool ModelMetadata_OutputMetadata::has_objective() const {
  return _internal_has_objective();
}
inline void ModelMetadata_OutputMetadata::clear_objective() {
  if (objective_ != nullptr) objective_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::autofill_assistant::ModelMetadata_ObjectiveMetadata& ModelMetadata_OutputMetadata::_internal_objective() const {
  const ::autofill_assistant::ModelMetadata_ObjectiveMetadata* p = objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::ModelMetadata_ObjectiveMetadata&>(
      ::autofill_assistant::_ModelMetadata_ObjectiveMetadata_default_instance_);
}
inline const ::autofill_assistant::ModelMetadata_ObjectiveMetadata& ModelMetadata_OutputMetadata::objective() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.OutputMetadata.objective)
  return _internal_objective();
}
inline void ModelMetadata_OutputMetadata::unsafe_arena_set_allocated_objective(
    ::autofill_assistant::ModelMetadata_ObjectiveMetadata* objective) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objective_);
  }
  objective_ = objective;
  if (objective) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.ModelMetadata.OutputMetadata.objective)
}
inline ::autofill_assistant::ModelMetadata_ObjectiveMetadata* ModelMetadata_OutputMetadata::release_objective() {
  _has_bits_[0] &= ~0x00000002u;
  ::autofill_assistant::ModelMetadata_ObjectiveMetadata* temp = objective_;
  objective_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::ModelMetadata_ObjectiveMetadata* ModelMetadata_OutputMetadata::unsafe_arena_release_objective() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.OutputMetadata.objective)
  _has_bits_[0] &= ~0x00000002u;
  ::autofill_assistant::ModelMetadata_ObjectiveMetadata* temp = objective_;
  objective_ = nullptr;
  return temp;
}
inline ::autofill_assistant::ModelMetadata_ObjectiveMetadata* ModelMetadata_OutputMetadata::_internal_mutable_objective() {
  _has_bits_[0] |= 0x00000002u;
  if (objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::ModelMetadata_ObjectiveMetadata>(GetArenaForAllocation());
    objective_ = p;
  }
  return objective_;
}
inline ::autofill_assistant::ModelMetadata_ObjectiveMetadata* ModelMetadata_OutputMetadata::mutable_objective() {
  ::autofill_assistant::ModelMetadata_ObjectiveMetadata* _msg = _internal_mutable_objective();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.OutputMetadata.objective)
  return _msg;
}
inline void ModelMetadata_OutputMetadata::set_allocated_objective(::autofill_assistant::ModelMetadata_ObjectiveMetadata* objective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete objective_;
  }
  if (objective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(objective);
    if (message_arena != submessage_arena) {
      objective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objective, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objective_ = objective;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.OutputMetadata.objective)
}

// -------------------------------------------------------------------

// ModelMetadata

// optional .autofill_assistant.ModelMetadata.InputMetadata input = 1;
inline bool ModelMetadata::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || input_ != nullptr);
  return value;
}
inline bool ModelMetadata::has_input() const {
  return _internal_has_input();
}
inline void ModelMetadata::clear_input() {
  if (input_ != nullptr) input_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::autofill_assistant::ModelMetadata_InputMetadata& ModelMetadata::_internal_input() const {
  const ::autofill_assistant::ModelMetadata_InputMetadata* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::ModelMetadata_InputMetadata&>(
      ::autofill_assistant::_ModelMetadata_InputMetadata_default_instance_);
}
inline const ::autofill_assistant::ModelMetadata_InputMetadata& ModelMetadata::input() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.input)
  return _internal_input();
}
inline void ModelMetadata::unsafe_arena_set_allocated_input(
    ::autofill_assistant::ModelMetadata_InputMetadata* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.ModelMetadata.input)
}
inline ::autofill_assistant::ModelMetadata_InputMetadata* ModelMetadata::release_input() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::ModelMetadata_InputMetadata* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::ModelMetadata_InputMetadata* ModelMetadata::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.input)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::ModelMetadata_InputMetadata* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::autofill_assistant::ModelMetadata_InputMetadata* ModelMetadata::_internal_mutable_input() {
  _has_bits_[0] |= 0x00000001u;
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::ModelMetadata_InputMetadata>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::autofill_assistant::ModelMetadata_InputMetadata* ModelMetadata::mutable_input() {
  ::autofill_assistant::ModelMetadata_InputMetadata* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.input)
  return _msg;
}
inline void ModelMetadata::set_allocated_input(::autofill_assistant::ModelMetadata_InputMetadata* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.input)
}

// optional .autofill_assistant.ModelMetadata.OutputMetadata output = 2;
inline bool ModelMetadata::_internal_has_output() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || output_ != nullptr);
  return value;
}
inline bool ModelMetadata::has_output() const {
  return _internal_has_output();
}
inline void ModelMetadata::clear_output() {
  if (output_ != nullptr) output_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::autofill_assistant::ModelMetadata_OutputMetadata& ModelMetadata::_internal_output() const {
  const ::autofill_assistant::ModelMetadata_OutputMetadata* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::ModelMetadata_OutputMetadata&>(
      ::autofill_assistant::_ModelMetadata_OutputMetadata_default_instance_);
}
inline const ::autofill_assistant::ModelMetadata_OutputMetadata& ModelMetadata::output() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.ModelMetadata.output)
  return _internal_output();
}
inline void ModelMetadata::unsafe_arena_set_allocated_output(
    ::autofill_assistant::ModelMetadata_OutputMetadata* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.ModelMetadata.output)
}
inline ::autofill_assistant::ModelMetadata_OutputMetadata* ModelMetadata::release_output() {
  _has_bits_[0] &= ~0x00000002u;
  ::autofill_assistant::ModelMetadata_OutputMetadata* temp = output_;
  output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::ModelMetadata_OutputMetadata* ModelMetadata::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:autofill_assistant.ModelMetadata.output)
  _has_bits_[0] &= ~0x00000002u;
  ::autofill_assistant::ModelMetadata_OutputMetadata* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::autofill_assistant::ModelMetadata_OutputMetadata* ModelMetadata::_internal_mutable_output() {
  _has_bits_[0] |= 0x00000002u;
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::ModelMetadata_OutputMetadata>(GetArenaForAllocation());
    output_ = p;
  }
  return output_;
}
inline ::autofill_assistant::ModelMetadata_OutputMetadata* ModelMetadata::mutable_output() {
  ::autofill_assistant::ModelMetadata_OutputMetadata* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.ModelMetadata.output)
  return _msg;
}
inline void ModelMetadata::set_allocated_output(::autofill_assistant::ModelMetadata_OutputMetadata* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.ModelMetadata.output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill_assistant

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_5fmetadata_2eproto
