// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/autofill_assistant/Starter

#ifndef org_chromium_components_autofill_assistant_Starter_JNI
#define org_chromium_components_autofill_assistant_Starter_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_autofill_1assistant_Starter[];
const char kClassPath_org_chromium_components_autofill_1assistant_Starter[] =
    "org/chromium/components/autofill_assistant/Starter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_autofill_1assistant_Starter_clazz(nullptr);
#ifndef org_chromium_components_autofill_1assistant_Starter_clazz_defined
#define org_chromium_components_autofill_1assistant_Starter_clazz_defined
inline jclass org_chromium_components_autofill_1assistant_Starter_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_autofill_1assistant_Starter,
      &g_org_chromium_components_autofill_1assistant_Starter_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace autofill_assistant {

static jlong JNI_Starter_FromWebContents(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    webContents,
    const base::android::JavaParamRef<jobject>& staticDependencies);

JNI_GENERATOR_EXPORT jlong Java_J_N_M2_1hDktG(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents,
    jobject staticDependencies) {
  return JNI_Starter_FromWebContents(env, base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jobject>(env, staticDependencies));
}

JNI_GENERATOR_EXPORT void Java_J_N_MqkOj9Ar(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeStarterDelegateAndroid,
    jobject caller) {
  StarterDelegateAndroid* native =
      reinterpret_cast<StarterDelegateAndroid*>(nativeStarterDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Attach");
  return native->Attach(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_1ksUDgi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeStarterDelegateAndroid,
    jobject caller) {
  StarterDelegateAndroid* native =
      reinterpret_cast<StarterDelegateAndroid*>(nativeStarterDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Detach");
  return native->Detach(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MhVfR81n(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeStarterDelegateAndroid,
    jobject caller,
    jint result) {
  StarterDelegateAndroid* native =
      reinterpret_cast<StarterDelegateAndroid*>(nativeStarterDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnFeatureModuleInstalled");
  return native->OnFeatureModuleInstalled(env, base::android::JavaParamRef<jobject>(env, caller),
      result);
}

JNI_GENERATOR_EXPORT void Java_J_N_M1oC_1EyL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeStarterDelegateAndroid,
    jobject caller,
    jboolean shown,
    jint result) {
  StarterDelegateAndroid* native =
      reinterpret_cast<StarterDelegateAndroid*>(nativeStarterDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnOnboardingFinished");
  return native->OnOnboardingFinished(env, base::android::JavaParamRef<jobject>(env, caller), shown,
      result);
}

JNI_GENERATOR_EXPORT void Java_J_N_McQWLJNF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeStarterDelegateAndroid,
    jobject caller,
    jboolean isInteractable) {
  StarterDelegateAndroid* native =
      reinterpret_cast<StarterDelegateAndroid*>(nativeStarterDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnInteractabilityChanged");
  return native->OnInteractabilityChanged(env, base::android::JavaParamRef<jobject>(env, caller),
      isInteractable);
}

JNI_GENERATOR_EXPORT void Java_J_N_MT8Rc8yi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeStarterDelegateAndroid,
    jobject caller) {
  StarterDelegateAndroid* native =
      reinterpret_cast<StarterDelegateAndroid*>(nativeStarterDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnActivityAttachmentChanged");
  return native->OnActivityAttachmentChanged(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_McY8emyf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeStarterDelegateAndroid,
    jobject caller,
    jstring experimentIds,
    jobjectArray parameterNames,
    jobjectArray parameterValues,
    jobjectArray deviceOnlyParameterNames,
    jobjectArray deviceOnlyParameterValues,
    jstring initialUrl) {
  StarterDelegateAndroid* native =
      reinterpret_cast<StarterDelegateAndroid*>(nativeStarterDelegateAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Start");
  return native->Start(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, experimentIds),
      base::android::JavaParamRef<jobjectArray>(env, parameterNames),
      base::android::JavaParamRef<jobjectArray>(env, parameterValues),
      base::android::JavaParamRef<jobjectArray>(env, deviceOnlyParameterNames),
      base::android::JavaParamRef<jobjectArray>(env, deviceOnlyParameterValues),
      base::android::JavaParamRef<jstring>(env, initialUrl));
}


static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_getFeatureModuleInstalled(nullptr);
static jboolean Java_Starter_getFeatureModuleInstalled(JNIEnv* env) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_autofill_1assistant_Starter_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getFeatureModuleInstalled",
          "()Z",
          &g_org_chromium_components_autofill_1assistant_Starter_getFeatureModuleInstalled);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_installFeatureModule(nullptr);
static void Java_Starter_installFeatureModule(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jboolean showUi) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_autofill_1assistant_Starter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "installFeatureModule",
          "(Z)V",
          &g_org_chromium_components_autofill_1assistant_Starter_installFeatureModule);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, showUi);
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_getIsFirstTimeUser(nullptr);
static jboolean Java_Starter_getIsFirstTimeUser(JNIEnv* env) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_autofill_1assistant_Starter_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getIsFirstTimeUser",
          "()Z",
          &g_org_chromium_components_autofill_1assistant_Starter_getIsFirstTimeUser);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_setIsFirstTimeUser(nullptr);
static void Java_Starter_setIsFirstTimeUser(JNIEnv* env, jboolean firstTimeUser) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_autofill_1assistant_Starter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setIsFirstTimeUser",
          "(Z)V",
          &g_org_chromium_components_autofill_1assistant_Starter_setIsFirstTimeUser);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, firstTimeUser);
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_getOnboardingAccepted(nullptr);
static jboolean Java_Starter_getOnboardingAccepted(JNIEnv* env) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_autofill_1assistant_Starter_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getOnboardingAccepted",
          "()Z",
          &g_org_chromium_components_autofill_1assistant_Starter_getOnboardingAccepted);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_setOnboardingAccepted(nullptr);
static void Java_Starter_setOnboardingAccepted(JNIEnv* env, jboolean accepted) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_autofill_1assistant_Starter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setOnboardingAccepted",
          "(Z)V",
          &g_org_chromium_components_autofill_1assistant_Starter_setOnboardingAccepted);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, accepted);
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_showOnboarding(nullptr);
static void Java_Starter_showOnboarding(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& onboardingHelper,
    jboolean useDialogOnboarding,
    const base::android::JavaRef<jstring>& experimentIds,
    const base::android::JavaRef<jobjectArray>& parameterKeys,
    const base::android::JavaRef<jobjectArray>& parameterValues,
    jboolean hideBottomSheetOnOnboardingAccepted) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_autofill_1assistant_Starter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "showOnboarding",
"(Lorg/chromium/components/autofill_assistant/AssistantOnboardingHelper;ZLjava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Z)V",
          &g_org_chromium_components_autofill_1assistant_Starter_showOnboarding);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, onboardingHelper.obj(), useDialogOnboarding,
              experimentIds.obj(), parameterKeys.obj(), parameterValues.obj(),
              hideBottomSheetOnOnboardingAccepted);
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_hideOnboarding(nullptr);
static void Java_Starter_hideOnboarding(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& onboardingHelper) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_autofill_1assistant_Starter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hideOnboarding",
          "(Lorg/chromium/components/autofill_assistant/AssistantOnboardingHelper;)V",
          &g_org_chromium_components_autofill_1assistant_Starter_hideOnboarding);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, onboardingHelper.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_getProactiveHelpSettingEnabled(nullptr);
static jboolean Java_Starter_getProactiveHelpSettingEnabled(JNIEnv* env) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_autofill_1assistant_Starter_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getProactiveHelpSettingEnabled",
          "()Z",
          &g_org_chromium_components_autofill_1assistant_Starter_getProactiveHelpSettingEnabled);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_setProactiveHelpSettingEnabled(nullptr);
static void Java_Starter_setProactiveHelpSettingEnabled(JNIEnv* env, jboolean enabled) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_autofill_1assistant_Starter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setProactiveHelpSettingEnabled",
          "(Z)V",
          &g_org_chromium_components_autofill_1assistant_Starter_setProactiveHelpSettingEnabled);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, enabled);
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_getMakeSearchesAndBrowsingBetterSettingEnabled(nullptr);
static jboolean Java_Starter_getMakeSearchesAndBrowsingBetterSettingEnabled(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_autofill_1assistant_Starter_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMakeSearchesAndBrowsingBetterSettingEnabled",
          "()Z",
&g_org_chromium_components_autofill_1assistant_Starter_getMakeSearchesAndBrowsingBetterSettingEnabled);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_getOrCreateDependenciesAndOnboardingHelper(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_Starter_getOrCreateDependenciesAndOnboardingHelper(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_autofill_1assistant_Starter_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getOrCreateDependenciesAndOnboardingHelper",
          "()[Ljava/lang/Object;",
&g_org_chromium_components_autofill_1assistant_Starter_getOrCreateDependenciesAndOnboardingHelper);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_autofill_1assistant_Starter_getIsTabCreatedByGSA(nullptr);
static jboolean Java_Starter_getIsTabCreatedByGSA(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_autofill_1assistant_Starter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_autofill_1assistant_Starter_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getIsTabCreatedByGSA",
          "()Z",
          &g_org_chromium_components_autofill_1assistant_Starter_getIsTabCreatedByGSA);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace autofill_assistant

#endif  // org_chromium_components_autofill_assistant_Starter_JNI
