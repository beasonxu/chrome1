// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_registration_generator.py
// Please do not change its content.

#ifndef GEN_COMPONENTS_CRONET_ANDROID_CRONET_JNI_REGISTRATION_
#define GEN_COMPONENTS_CRONET_ANDROID_CRONET_JNI_REGISTRATION_

#include <jni.h>

#include <iterator>

#include "base/android/jni_generator/jni_generator_helper.h"
#include "base/android/jni_int_wrapper.h"


// Step 1: Forward declarations (classes).


// Step 2: Forward declarations (methods).

JNI_GENERATOR_EXPORT void Java_J_N_MiAkQ_1SU(
    JNIEnv* env,
    jclass jcaller,
    jint newState);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MA9sJ3RR(
    JNIEnv* env,
    jclass jcaller,
    jstring featureName);
JNI_GENERATOR_EXPORT void Java_J_N_MDkrKi31(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray args);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MsCvypjU(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString);
JNI_GENERATOR_EXPORT jstring Java_J_N_MZJ2lrZY(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString);
JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MHzche6O(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_M5K_1ewhl(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString);
JNI_GENERATOR_EXPORT void Java_J_N_MUoYiNbY(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString,
    jstring value);
JNI_GENERATOR_EXPORT void Java_J_N_MPquHBNa(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray array);
JNI_GENERATOR_EXPORT void Java_J_N_M1cMYXGO(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString);
JNI_GENERATOR_EXPORT jint Java_J_N_MOiBJ1qS(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jlong Java_J_N_ML0T8q1U(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_MrWG2uUW(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);
JNI_GENERATOR_EXPORT void Java_J_N_MmyrhqXB(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);
JNI_GENERATOR_EXPORT void Java_J_N_M7UXCmoq(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);
JNI_GENERATOR_EXPORT void Java_J_N_MRlw2LEn(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);
JNI_GENERATOR_EXPORT void Java_J_N_M_1Gv8TwM(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id,
    jlong timeNanos);
JNI_GENERATOR_EXPORT void Java_J_N_MrKsqeCD(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id,
    jlong timeNanos);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MFTJCvBh(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MRiRQ_1Ey(
    JNIEnv* env,
    jclass jcaller,
    jlong featurePointer);
JNI_GENERATOR_EXPORT jboolean Java_J_N_M8R55Xut(
    JNIEnv* env,
    jclass jcaller,
    jlong featurePointer,
    jstring paramName,
    jboolean defaultValue);
JNI_GENERATOR_EXPORT jstring Java_J_N_MdC43qwX(
    JNIEnv* env,
    jclass jcaller,
    jstring trialName);
JNI_GENERATOR_EXPORT jboolean Java_J_N_Mmqqda9c(
    JNIEnv* env,
    jclass jcaller,
    jstring trialName);
JNI_GENERATOR_EXPORT jstring Java_J_N_MZWMOP4I(
    JNIEnv* env,
    jclass jcaller,
    jstring trialName,
    jstring parameterKey);
JNI_GENERATOR_EXPORT void Java_J_N_MHz6Fn06(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MGqzwlIM(
    JNIEnv* env,
    jclass jcaller,
    jstring trialName,
    jstring groupName);
JNI_GENERATOR_EXPORT jstring Java_J_N_MWck3aif(
    JNIEnv* env,
    jclass jcaller,
    jstring filePath);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MsOKBrZ5(
    JNIEnv* env,
    jclass jcaller,
    jstring fileName,
    jbyteArray data);
JNI_GENERATOR_EXPORT void Java_J_N_MLlibBXh(
    JNIEnv* env,
    jclass jcaller,
    jboolean crashAfterReport,
    jthrowable e);
JNI_GENERATOR_EXPORT void Java_J_N_MmS4zlEt(
    JNIEnv* env,
    jclass jcaller,
    jstring stackTrace);
JNI_GENERATOR_EXPORT void Java_J_N_MJcct7gJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJavaHandlerThread,
    jlong nativeEvent);
JNI_GENERATOR_EXPORT void Java_J_N_MYwg_00024x8E(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJavaHandlerThread);
JNI_GENERATOR_EXPORT void Java_J_N_MZJzyjAa(
    JNIEnv* env,
    jclass jcaller,
    jint pressure);
JNI_GENERATOR_EXPORT void Java_J_N_M6H_1IiaF(
    JNIEnv* env,
    jclass jcaller,
    jint what,
    jstring path);
JNI_GENERATOR_EXPORT void Java_J_N_MCImhGql(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_MQNVaF2F(
    JNIEnv* env,
    jclass jcaller,
    jint thermalStatus);
JNI_GENERATOR_EXPORT void Java_J_N_MFFzPOVw(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_MRN_00024Vid3(
    JNIEnv* env,
    jclass jcaller,
    jstring categoryFilter);
JNI_GENERATOR_EXPORT void Java_J_N_MOgCa3d_00024(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_MlFM5bdC(
    JNIEnv* env,
    jclass jcaller,
    jstring categoryFilter);
JNI_GENERATOR_EXPORT void Java_J_N_ML40H8ed(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg);
JNI_GENERATOR_EXPORT void Java_J_N_M9XfPu17(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg);
JNI_GENERATOR_EXPORT void Java_J_N_Mw73xTww(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg);
JNI_GENERATOR_EXPORT void Java_J_N_M_1y76mct(
    JNIEnv* env,
    jclass jcaller,
    jstring target);
JNI_GENERATOR_EXPORT void Java_J_N_MLJecZJ9(
    JNIEnv* env,
    jclass jcaller,
    jstring target);
JNI_GENERATOR_EXPORT void Java_J_N_MHopMqLX(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id);
JNI_GENERATOR_EXPORT void Java_J_N_MffNhCLU(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MnfJQqTB(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_Ml5G_1GLY(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jlong Java_J_N_MwX2YEhL(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong dumpProtoPtr);
JNI_GENERATOR_EXPORT void Java_J_N_MmnP6i1r(
    JNIEnv* env,
    jclass jcaller,
    jint id,
    jint parentId,
    jboolean isShown,
    jboolean isDirty,
    jstring className,
    jstring resourceName,
    jlong activityProtoPtr);
JNI_GENERATOR_EXPORT void Java_J_N_MgOW0Igo(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong durMs);
JNI_GENERATOR_EXPORT void Java_J_N_MJ46uzUz(
    JNIEnv* env,
    jclass jcaller,
    jstring scenarioName,
    jlongArray timestampsNs,
    jlongArray durationsNs,
    jlongArray jankBurstsNs,
    jint missedFrames);
JNI_GENERATOR_EXPORT jlong Java_J_N_MtKTTHie(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jboolean sample);
JNI_GENERATOR_EXPORT jlong Java_J_N_MILRV9Ch(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);
JNI_GENERATOR_EXPORT jlong Java_J_N_M_00024oMD214(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);
JNI_GENERATOR_EXPORT jlong Java_J_N_Mk1ai9mx(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample);
JNI_GENERATOR_EXPORT void Java_J_N_MTDsfZGe(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong millisSinceEvent);
JNI_GENERATOR_EXPORT jint Java_J_N_M_11WxmXI_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jint sample,
    jlong snapshotPtr);
JNI_GENERATOR_EXPORT jint Java_J_N_MP_00024RSyC4_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong snapshotPtr);
JNI_GENERATOR_EXPORT jlong Java_J_N_MlZcyPle_1ForTesting(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_MqHgOQAN_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong snapshotPtr);
JNI_GENERATOR_EXPORT jlong Java_J_N_MEfoV_00024c9_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject callback);
JNI_GENERATOR_EXPORT void Java_J_N_MUBbgum1_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong callbackId);
JNI_GENERATOR_EXPORT jstring Java_J_N_MvO_00024oy3r(
    JNIEnv* env,
    jclass jcaller,
    jint verbosityLevel);
JNI_GENERATOR_EXPORT void Java_J_N_MTILOhAQ(
    JNIEnv* env,
    jclass jcaller,
    jint priority,
    jboolean mayBlock,
    jboolean useThreadPool,
    jbyte extensionId,
    jbyteArray extensionData,
    jobject task,
    jlong delay,
    jstring runnableClassName);
JNI_GENERATOR_EXPORT jlong Java_J_N_M5_1IQXaH(
    JNIEnv* env,
    jclass jcaller,
    jint taskRunnerType,
    jint priority,
    jboolean mayBlock,
    jboolean useThreadPool,
    jbyte extensionId,
    jbyteArray extensionData);
JNI_GENERATOR_EXPORT void Java_J_N_MERCiIV8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid);
JNI_GENERATOR_EXPORT void Java_J_N_MGnQU_0002447(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid,
    jobject task,
    jlong delay,
    jstring runnableClassName);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MdFi6sVQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid);
JNI_GENERATOR_EXPORT jstring Java_J_N_MpCt7siL(
    JNIEnv* env,
    jclass jcaller,
    jstring url);
JNI_GENERATOR_EXPORT void Java_J_N_M0s8NeYn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJavaNegotiateResultWrapper,
    jobject caller,
    jint status,
    jstring authToken);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MorcXgQd(
    JNIEnv* env,
    jclass jcaller,
    jstring headerName,
    jstring headerValue);
JNI_GENERATOR_EXPORT void Java_J_N_MSZPA7qE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr);
JNI_GENERATOR_EXPORT void Java_J_N_MbPIImnU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jint newConnectionType,
    jlong defaultNetId);
JNI_GENERATOR_EXPORT void Java_J_N_Mg0W7eRL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jint newConnectionCost);
JNI_GENERATOR_EXPORT void Java_J_N_Mt26m31j(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jint subType);
JNI_GENERATOR_EXPORT void Java_J_N_MBT1i5cd(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jlong netId,
    jint connectionType);
JNI_GENERATOR_EXPORT void Java_J_N_MiJIMrTb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jlong netId);
JNI_GENERATOR_EXPORT void Java_J_N_MDpuHJTB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jlong netId);
JNI_GENERATOR_EXPORT void Java_J_N_MpF_00024179U(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jlongArray activeNetIds);
JNI_GENERATOR_EXPORT void Java_J_N_MyoFZt_000242(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jstring host,
    jint port,
    jstring pacUrl,
    jobjectArray exclusionList);
JNI_GENERATOR_EXPORT void Java_J_N_MCIk73GZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_MGVAvp19(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jlong Java_J_N_MqTDYvZd(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong urlRequestContextAdapter,
    jboolean sendRequestHeadersAutomatically,
    jboolean trafficStatsTagSet,
    jint trafficStatsTag,
    jboolean trafficStatsUidSet,
    jint trafficStatsUid,
    jlong networkHandle);
JNI_GENERATOR_EXPORT jint Java_J_N_McDUim_1I(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jstring url,
    jint priority,
    jstring method,
    jobjectArray headers,
    jboolean endOfStream);
JNI_GENERATOR_EXPORT void Java_J_N_MGLIR7Sc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);
JNI_GENERATOR_EXPORT jboolean Java_J_N_Md_1rPmgC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject byteBuffer,
    jint position,
    jint limit);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MwJCBTMQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobjectArray buffers,
    jintArray positions,
    jintArray limits,
    jboolean endOfStream);
JNI_GENERATOR_EXPORT void Java_J_N_MS2l1kNx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean sendOnCanceled);
JNI_GENERATOR_EXPORT void Java_J_N_MROCxiBo(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jstring Java_J_N_M6xubM8G(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT jlong Java_J_N_MA4X1aZa(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong urlRequestAdapter,
    jlong length);
JNI_GENERATOR_EXPORT jlong Java_J_N_MnDEFloP_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject caller);
JNI_GENERATOR_EXPORT jlong Java_J_N_MymnNC4_1_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong length,
    jlong adapter);
JNI_GENERATOR_EXPORT void Java_J_N_MpWH3VIr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jint bytesRead,
    jboolean finalChunk);
JNI_GENERATOR_EXPORT void Java_J_N_MFpRjSMv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_MMW1G0N1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr);
JNI_GENERATOR_EXPORT jlong Java_J_N_MuOIsMvf(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong urlRequestContextAdapter,
    jstring url,
    jint priority,
    jboolean disableCache,
    jboolean disableConnectionMigration,
    jboolean trafficStatsTagSet,
    jint trafficStatsTag,
    jboolean trafficStatsUidSet,
    jint trafficStatsUid,
    jint idempotency,
    jlong networkHandle);
JNI_GENERATOR_EXPORT jboolean Java_J_N_M51RPBJe(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jstring method);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MvHusd1J(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jstring name,
    jstring value);
JNI_GENERATOR_EXPORT void Java_J_N_MabZ5m6r(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_Mhp54Oqs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MfCxA8r3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject byteBuffer,
    jint position,
    jint capacity);
JNI_GENERATOR_EXPORT void Java_J_N_M4znfYdB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean sendOnCanceled);
JNI_GENERATOR_EXPORT void Java_J_N_MgIIMpT9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject listener);
JNI_GENERATOR_EXPORT jlong Java_J_N_MB3ntV7V(
    JNIEnv* env,
    jclass jcaller,
    jstring userAgent,
    jstring storagePath,
    jboolean quicEnabled,
    jstring quicUserAgentId,
    jboolean http2Enabled,
    jboolean brotliEnabled,
    jboolean disableCache,
    jint httpCacheMode,
    jlong httpCacheMaxSize,
    jstring experimentalOptions,
    jlong mockCertVerifier,
    jboolean enableNetworkQualityEstimator,
    jboolean bypassPublicKeyPinningForLocalTrustAnchors,
    jint networkThreadPriority);
JNI_GENERATOR_EXPORT void Java_J_N_MyRIv1Ij(
    JNIEnv* env,
    jclass jcaller,
    jlong urlRequestContextConfig,
    jstring host,
    jint port,
    jint alternatePort);
JNI_GENERATOR_EXPORT void Java_J_N_Muq3ic6p(
    JNIEnv* env,
    jclass jcaller,
    jlong urlRequestContextConfig,
    jstring host,
    jobjectArray hashes,
    jboolean includeSubdomains,
    jlong expirationTime);
JNI_GENERATOR_EXPORT jlong Java_J_N_M135Cu0D(
    JNIEnv* env,
    jclass jcaller,
    jlong urlRequestContextConfig);
JNI_GENERATOR_EXPORT jint Java_J_N_MnO2u2DQ(
    JNIEnv* env,
    jclass jcaller,
    jint loggingLevel);
JNI_GENERATOR_EXPORT jbyteArray Java_J_N_M7CZ_1Klr(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_MeBvNXm5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MgwJQAH1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jstring fileName,
    jboolean logAll);
JNI_GENERATOR_EXPORT void Java_J_N_MTULt02u(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jstring dirPath,
    jboolean logAll,
    jint maxSize);
JNI_GENERATOR_EXPORT void Java_J_N_MKFm_1qQ7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_M6Dz0nZ5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_M6sIJDgy_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean useLocalHostRequests,
    jboolean useSmallerResponses,
    jboolean disableOfflineCheck);
JNI_GENERATOR_EXPORT void Java_J_N_MpnFLFF2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean should);
JNI_GENERATOR_EXPORT void Java_J_N_MnPUhNKP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean should);
JNI_GENERATOR_EXPORT jboolean Java_J_N_Mey_1yE9a(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller);


// Step 3: Method declarations.


static const JNINativeMethod kMethods_J_N[] = {
    { "MiAkQ_SU", "(I)V", reinterpret_cast<void*>(Java_J_N_MiAkQ_1SU) },
    { "MOiBJ1qS", "()I", reinterpret_cast<void*>(Java_J_N_MOiBJ1qS) },
    { "ML0T8q1U", "()J", reinterpret_cast<void*>(Java_J_N_ML0T8q1U) },
    { "MWck3aif", "(Ljava/lang/String;)Ljava/lang/String;",
        reinterpret_cast<void*>(Java_J_N_MWck3aif) },
    { "MsOKBrZ5", "(Ljava/lang/String;[B)Z", reinterpret_cast<void*>(Java_J_N_MsOKBrZ5) },
    { "M6H_IiaF", "(ILjava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_M6H_1IiaF) },
    { "MCImhGql", "()V", reinterpret_cast<void*>(Java_J_N_MCImhGql) },
    { "MQNVaF2F", "(I)V", reinterpret_cast<void*>(Java_J_N_MQNVaF2F) },
    { "MJ46uzUz", "(Ljava/lang/String;[J[J[JI)V", reinterpret_cast<void*>(Java_J_N_MJ46uzUz) },
    { "MvO$oy3r", "(I)Ljava/lang/String;", reinterpret_cast<void*>(Java_J_N_MvO_00024oy3r) },
    { "MTILOhAQ", "(IZZB[BLjava/lang/Object;JLjava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_MTILOhAQ) },
    { "M5_IQXaH", "(IIZZB[B)J", reinterpret_cast<void*>(Java_J_N_M5_1IQXaH) },
    { "MERCiIV8", "(J)V", reinterpret_cast<void*>(Java_J_N_MERCiIV8) },
    { "MGnQU$47", "(JLjava/lang/Object;JLjava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_MGnQU_0002447) },
    { "MdFi6sVQ", "(J)Z", reinterpret_cast<void*>(Java_J_N_MdFi6sVQ) },
    { "MpCt7siL", "(Ljava/lang/String;)Ljava/lang/String;",
        reinterpret_cast<void*>(Java_J_N_MpCt7siL) },
    { "M0s8NeYn", "(JLjava/lang/Object;ILjava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_M0s8NeYn) },
    { "MorcXgQd", "(Ljava/lang/String;Ljava/lang/String;)Z",
        reinterpret_cast<void*>(Java_J_N_MorcXgQd) },
    { "MSZPA7qE", "(J)V", reinterpret_cast<void*>(Java_J_N_MSZPA7qE) },
    { "MbPIImnU", "(JLjava/lang/Object;IJ)V", reinterpret_cast<void*>(Java_J_N_MbPIImnU) },
    { "Mg0W7eRL", "(JLjava/lang/Object;I)V", reinterpret_cast<void*>(Java_J_N_Mg0W7eRL) },
    { "Mt26m31j", "(JLjava/lang/Object;I)V", reinterpret_cast<void*>(Java_J_N_Mt26m31j) },
    { "MBT1i5cd", "(JLjava/lang/Object;JI)V", reinterpret_cast<void*>(Java_J_N_MBT1i5cd) },
    { "MiJIMrTb", "(JLjava/lang/Object;J)V", reinterpret_cast<void*>(Java_J_N_MiJIMrTb) },
    { "MDpuHJTB", "(JLjava/lang/Object;J)V", reinterpret_cast<void*>(Java_J_N_MDpuHJTB) },
    { "MpF$179U", "(JLjava/lang/Object;[J)V", reinterpret_cast<void*>(Java_J_N_MpF_00024179U) },
    { "MyoFZt$2", "(JLjava/lang/Object;Ljava/lang/String;ILjava/lang/String;[Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_MyoFZt_000242) },
    { "MCIk73GZ", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MCIk73GZ) },
    { "MqTDYvZd", "(Ljava/lang/Object;JZZIZIJ)J", reinterpret_cast<void*>(Java_J_N_MqTDYvZd) },
    { "McDUim_I", "(JLjava/lang/Object;Ljava/lang/String;ILjava/lang/String;[Ljava/lang/String;Z)I",
        reinterpret_cast<void*>(Java_J_N_McDUim_1I) },
    { "MGLIR7Sc", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MGLIR7Sc) },
    { "Md_rPmgC", "(JLjava/lang/Object;Ljava/lang/Object;II)Z",
        reinterpret_cast<void*>(Java_J_N_Md_1rPmgC) },
    { "MwJCBTMQ", "(JLjava/lang/Object;[Ljava/lang/Object;[I[IZ)Z",
        reinterpret_cast<void*>(Java_J_N_MwJCBTMQ) },
    { "MS2l1kNx", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_MS2l1kNx) },
    { "MROCxiBo", "()V", reinterpret_cast<void*>(Java_J_N_MROCxiBo) },
    { "M6xubM8G", "()Ljava/lang/String;", reinterpret_cast<void*>(Java_J_N_M6xubM8G) },
    { "MA4X1aZa", "(Ljava/lang/Object;JJ)J", reinterpret_cast<void*>(Java_J_N_MA4X1aZa) },
    { "MnDEFloP_ForTesting", "(Ljava/lang/Object;)J",
        reinterpret_cast<void*>(Java_J_N_MnDEFloP_1ForTesting) },
    { "MymnNC4__ForTesting", "(Ljava/lang/Object;JJ)J",
        reinterpret_cast<void*>(Java_J_N_MymnNC4_1_1ForTesting) },
    { "MpWH3VIr", "(JLjava/lang/Object;IZ)V", reinterpret_cast<void*>(Java_J_N_MpWH3VIr) },
    { "MFpRjSMv", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MFpRjSMv) },
    { "MMW1G0N1", "(J)V", reinterpret_cast<void*>(Java_J_N_MMW1G0N1) },
    { "MuOIsMvf", "(Ljava/lang/Object;JLjava/lang/String;IZZZIZIIJ)J",
        reinterpret_cast<void*>(Java_J_N_MuOIsMvf) },
    { "M51RPBJe", "(JLjava/lang/Object;Ljava/lang/String;)Z",
        reinterpret_cast<void*>(Java_J_N_M51RPBJe) },
    { "MvHusd1J", "(JLjava/lang/Object;Ljava/lang/String;Ljava/lang/String;)Z",
        reinterpret_cast<void*>(Java_J_N_MvHusd1J) },
    { "MabZ5m6r", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MabZ5m6r) },
    { "Mhp54Oqs", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_Mhp54Oqs) },
    { "MfCxA8r3", "(JLjava/lang/Object;Ljava/lang/Object;II)Z",
        reinterpret_cast<void*>(Java_J_N_MfCxA8r3) },
    { "M4znfYdB", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_M4znfYdB) },
    { "MgIIMpT9", "(JLjava/lang/Object;Ljava/lang/Object;)V",
        reinterpret_cast<void*>(Java_J_N_MgIIMpT9) },
    { "MB3ntV7V",
        "(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ZZZIJLjava/lang/String;JZZI)J",
        reinterpret_cast<void*>(Java_J_N_MB3ntV7V) },
    { "MyRIv1Ij", "(JLjava/lang/String;II)V", reinterpret_cast<void*>(Java_J_N_MyRIv1Ij) },
    { "Muq3ic6p", "(JLjava/lang/String;[[BZJ)V", reinterpret_cast<void*>(Java_J_N_Muq3ic6p) },
    { "M135Cu0D", "(J)J", reinterpret_cast<void*>(Java_J_N_M135Cu0D) },
    { "MnO2u2DQ", "(I)I", reinterpret_cast<void*>(Java_J_N_MnO2u2DQ) },
    { "M7CZ_Klr", "()[B", reinterpret_cast<void*>(Java_J_N_M7CZ_1Klr) },
    { "MeBvNXm5", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MeBvNXm5) },
    { "MgwJQAH1", "(JLjava/lang/Object;Ljava/lang/String;Z)Z",
        reinterpret_cast<void*>(Java_J_N_MgwJQAH1) },
    { "MTULt02u", "(JLjava/lang/Object;Ljava/lang/String;ZI)V",
        reinterpret_cast<void*>(Java_J_N_MTULt02u) },
    { "MKFm_qQ7", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MKFm_1qQ7) },
    { "M6Dz0nZ5", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_M6Dz0nZ5) },
    { "M6sIJDgy_ForTesting", "(JLjava/lang/Object;ZZZ)V",
        reinterpret_cast<void*>(Java_J_N_M6sIJDgy_1ForTesting) },
    { "MpnFLFF2", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_MpnFLFF2) },
    { "MnPUhNKP", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_MnPUhNKP) },
    { "Mey_yE9a", "(JLjava/lang/Object;)Z", reinterpret_cast<void*>(Java_J_N_Mey_1yE9a) },

};

namespace {

JNI_REGISTRATION_EXPORT bool RegisterNative_J_N(JNIEnv* env) {
  const int number_of_methods = std::size(kMethods_J_N);

  base::android::ScopedJavaLocalRef<jclass> native_clazz =
      base::android::GetClass(env, "J/N");
  if (env->RegisterNatives(
      native_clazz.obj(),
      kMethods_J_N,
      number_of_methods) < 0) {

    jni_generator::HandleRegistrationError(env, native_clazz.obj(), __FILE__);
    return false;
  }

  return true;
}

}  // namespace

static const JNINativeMethod kMethods_J_NMAIN_DEX[] = {
    { "MA9sJ3RR", "(Ljava/lang/String;)Z", reinterpret_cast<void*>(Java_J_N_MA9sJ3RR) },
    { "MDkrKi31", "([Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_MDkrKi31) },
    { "MsCvypjU", "(Ljava/lang/String;)Z", reinterpret_cast<void*>(Java_J_N_MsCvypjU) },
    { "MZJ2lrZY", "(Ljava/lang/String;)Ljava/lang/String;",
        reinterpret_cast<void*>(Java_J_N_MZJ2lrZY) },
    { "MHzche6O", "()[Ljava/lang/String;", reinterpret_cast<void*>(Java_J_N_MHzche6O) },
    { "M5K_ewhl", "(Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_M5K_1ewhl) },
    { "MUoYiNbY", "(Ljava/lang/String;Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_MUoYiNbY) },
    { "MPquHBNa", "([Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_MPquHBNa) },
    { "M1cMYXGO", "(Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_M1cMYXGO) },
    { "MrWG2uUW", "(Ljava/lang/String;JIJ)V", reinterpret_cast<void*>(Java_J_N_MrWG2uUW) },
    { "MmyrhqXB", "(Ljava/lang/String;JIJ)V", reinterpret_cast<void*>(Java_J_N_MmyrhqXB) },
    { "M7UXCmoq", "(Ljava/lang/String;JIJ)V", reinterpret_cast<void*>(Java_J_N_M7UXCmoq) },
    { "MRlw2LEn", "(Ljava/lang/String;JIJ)V", reinterpret_cast<void*>(Java_J_N_MRlw2LEn) },
    { "M_Gv8TwM", "(Ljava/lang/String;JJ)V", reinterpret_cast<void*>(Java_J_N_M_1Gv8TwM) },
    { "MrKsqeCD", "(Ljava/lang/String;JJ)V", reinterpret_cast<void*>(Java_J_N_MrKsqeCD) },
    { "MFTJCvBh", "()Z", reinterpret_cast<void*>(Java_J_N_MFTJCvBh) },
    { "MRiRQ_Ey", "(J)Z", reinterpret_cast<void*>(Java_J_N_MRiRQ_1Ey) },
    { "M8R55Xut", "(JLjava/lang/String;Z)Z", reinterpret_cast<void*>(Java_J_N_M8R55Xut) },
    { "MdC43qwX", "(Ljava/lang/String;)Ljava/lang/String;",
        reinterpret_cast<void*>(Java_J_N_MdC43qwX) },
    { "Mmqqda9c", "(Ljava/lang/String;)Z", reinterpret_cast<void*>(Java_J_N_Mmqqda9c) },
    { "MZWMOP4I", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
        reinterpret_cast<void*>(Java_J_N_MZWMOP4I) },
    { "MHz6Fn06", "()V", reinterpret_cast<void*>(Java_J_N_MHz6Fn06) },
    { "MGqzwlIM", "(Ljava/lang/String;Ljava/lang/String;)Z",
        reinterpret_cast<void*>(Java_J_N_MGqzwlIM) },
    { "MLlibBXh", "(ZLjava/lang/Throwable;)V", reinterpret_cast<void*>(Java_J_N_MLlibBXh) },
    { "MmS4zlEt", "(Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_MmS4zlEt) },
    { "MJcct7gJ", "(JJ)V", reinterpret_cast<void*>(Java_J_N_MJcct7gJ) },
    { "MYwg$x8E", "(J)V", reinterpret_cast<void*>(Java_J_N_MYwg_00024x8E) },
    { "MZJzyjAa", "(I)V", reinterpret_cast<void*>(Java_J_N_MZJzyjAa) },
    { "MFFzPOVw", "()V", reinterpret_cast<void*>(Java_J_N_MFFzPOVw) },
    { "MRN$Vid3", "(Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_MRN_00024Vid3) },
    { "MOgCa3d$", "()V", reinterpret_cast<void*>(Java_J_N_MOgCa3d_00024) },
    { "MlFM5bdC", "(Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_MlFM5bdC) },
    { "ML40H8ed", "(Ljava/lang/String;Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_ML40H8ed) },
    { "M9XfPu17", "(Ljava/lang/String;Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_M9XfPu17) },
    { "Mw73xTww", "(Ljava/lang/String;Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_Mw73xTww) },
    { "M_y76mct", "(Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_M_1y76mct) },
    { "MLJecZJ9", "(Ljava/lang/String;)V", reinterpret_cast<void*>(Java_J_N_MLJecZJ9) },
    { "MHopMqLX", "(Ljava/lang/String;J)V", reinterpret_cast<void*>(Java_J_N_MHopMqLX) },
    { "MffNhCLU", "(Ljava/lang/String;J)V", reinterpret_cast<void*>(Java_J_N_MffNhCLU) },
    { "MnfJQqTB", "()Z", reinterpret_cast<void*>(Java_J_N_MnfJQqTB) },
    { "Ml5G_GLY", "()V", reinterpret_cast<void*>(Java_J_N_Ml5G_1GLY) },
    { "MwX2YEhL", "(Ljava/lang/String;J)J", reinterpret_cast<void*>(Java_J_N_MwX2YEhL) },
    { "MmnP6i1r", "(IIZZLjava/lang/String;Ljava/lang/String;J)V",
        reinterpret_cast<void*>(Java_J_N_MmnP6i1r) },
    { "MgOW0Igo", "(Ljava/lang/String;J)V", reinterpret_cast<void*>(Java_J_N_MgOW0Igo) },
    { "MtKTTHie", "(Ljava/lang/String;JZ)J", reinterpret_cast<void*>(Java_J_N_MtKTTHie) },
    { "MILRV9Ch", "(Ljava/lang/String;JIIII)J", reinterpret_cast<void*>(Java_J_N_MILRV9Ch) },
    { "M$oMD214", "(Ljava/lang/String;JIIII)J", reinterpret_cast<void*>(Java_J_N_M_00024oMD214) },
    { "Mk1ai9mx", "(Ljava/lang/String;JI)J", reinterpret_cast<void*>(Java_J_N_Mk1ai9mx) },
    { "MTDsfZGe", "(Ljava/lang/String;J)V", reinterpret_cast<void*>(Java_J_N_MTDsfZGe) },
    { "M_1WxmXI_ForTesting", "(Ljava/lang/String;IJ)I",
        reinterpret_cast<void*>(Java_J_N_M_11WxmXI_1ForTesting) },
    { "MP$RSyC4_ForTesting", "(Ljava/lang/String;J)I",
        reinterpret_cast<void*>(Java_J_N_MP_00024RSyC4_1ForTesting) },
    { "MlZcyPle_ForTesting", "()J", reinterpret_cast<void*>(Java_J_N_MlZcyPle_1ForTesting) },
    { "MqHgOQAN_ForTesting", "(J)V", reinterpret_cast<void*>(Java_J_N_MqHgOQAN_1ForTesting) },
    { "MEfoV$c9_ForTesting", "(Ljava/lang/Object;)J",
        reinterpret_cast<void*>(Java_J_N_MEfoV_00024c9_1ForTesting) },
    { "MUBbgum1_ForTesting", "(J)V", reinterpret_cast<void*>(Java_J_N_MUBbgum1_1ForTesting) },
    { "MGVAvp19", "()V", reinterpret_cast<void*>(Java_J_N_MGVAvp19) },

};

namespace {

JNI_REGISTRATION_EXPORT bool RegisterNative_J_NMAIN_DEX(JNIEnv* env) {
  const int number_of_methods = std::size(kMethods_J_NMAIN_DEX);

  base::android::ScopedJavaLocalRef<jclass> native_clazz =
      base::android::GetClass(env, "J/N");
  if (env->RegisterNatives(
      native_clazz.obj(),
      kMethods_J_NMAIN_DEX,
      number_of_methods) < 0) {

    jni_generator::HandleRegistrationError(env, native_clazz.obj(), __FILE__);
    return false;
  }

  return true;
}

}  // namespace


// Step 4: Main dex and non-main dex registration functions.

namespace  {

bool RegisterMainDexNatives(JNIEnv* env) {
  // Register natives in a proxy.
  if (!RegisterNative_J_NMAIN_DEX(env)) {
    return false;
  }


  return true;
}

bool RegisterNonMainDexNatives(JNIEnv* env) {
  // Register natives in a proxy.
  if (!RegisterNative_J_N(env)) {
    return false;
  }


  return true;
}

}  // namespace 

#endif  // GEN_COMPONENTS_CRONET_ANDROID_CRONET_JNI_REGISTRATION_
