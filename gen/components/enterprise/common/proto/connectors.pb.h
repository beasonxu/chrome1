// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/enterprise/common/proto/connectors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/safe_browsing/core/common/proto/csd.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto {
  static const uint32_t offsets[];
};
namespace enterprise_connectors {
class ClientMetadata;
struct ClientMetadataDefaultTypeInternal;
extern ClientMetadataDefaultTypeInternal _ClientMetadata_default_instance_;
class ClientMetadata_Browser;
struct ClientMetadata_BrowserDefaultTypeInternal;
extern ClientMetadata_BrowserDefaultTypeInternal _ClientMetadata_Browser_default_instance_;
class ClientMetadata_Device;
struct ClientMetadata_DeviceDefaultTypeInternal;
extern ClientMetadata_DeviceDefaultTypeInternal _ClientMetadata_Device_default_instance_;
class ClientMetadata_Profile;
struct ClientMetadata_ProfileDefaultTypeInternal;
extern ClientMetadata_ProfileDefaultTypeInternal _ClientMetadata_Profile_default_instance_;
class ContentAnalysisAcknowledgement;
struct ContentAnalysisAcknowledgementDefaultTypeInternal;
extern ContentAnalysisAcknowledgementDefaultTypeInternal _ContentAnalysisAcknowledgement_default_instance_;
class ContentAnalysisRequest;
struct ContentAnalysisRequestDefaultTypeInternal;
extern ContentAnalysisRequestDefaultTypeInternal _ContentAnalysisRequest_default_instance_;
class ContentAnalysisResponse;
struct ContentAnalysisResponseDefaultTypeInternal;
extern ContentAnalysisResponseDefaultTypeInternal _ContentAnalysisResponse_default_instance_;
class ContentAnalysisResponse_Result;
struct ContentAnalysisResponse_ResultDefaultTypeInternal;
extern ContentAnalysisResponse_ResultDefaultTypeInternal _ContentAnalysisResponse_Result_default_instance_;
class ContentAnalysisResponse_Result_CustomMessage;
struct ContentAnalysisResponse_Result_CustomMessageDefaultTypeInternal;
extern ContentAnalysisResponse_Result_CustomMessageDefaultTypeInternal _ContentAnalysisResponse_Result_CustomMessage_default_instance_;
class ContentAnalysisResponse_Result_TriggeredRule;
struct ContentAnalysisResponse_Result_TriggeredRuleDefaultTypeInternal;
extern ContentAnalysisResponse_Result_TriggeredRuleDefaultTypeInternal _ContentAnalysisResponse_Result_TriggeredRule_default_instance_;
class ContentMetaData;
struct ContentMetaDataDefaultTypeInternal;
extern ContentMetaDataDefaultTypeInternal _ContentMetaData_default_instance_;
}  // namespace enterprise_connectors
PROTOBUF_NAMESPACE_OPEN
template<> ::enterprise_connectors::ClientMetadata* Arena::CreateMaybeMessage<::enterprise_connectors::ClientMetadata>(Arena*);
template<> ::enterprise_connectors::ClientMetadata_Browser* Arena::CreateMaybeMessage<::enterprise_connectors::ClientMetadata_Browser>(Arena*);
template<> ::enterprise_connectors::ClientMetadata_Device* Arena::CreateMaybeMessage<::enterprise_connectors::ClientMetadata_Device>(Arena*);
template<> ::enterprise_connectors::ClientMetadata_Profile* Arena::CreateMaybeMessage<::enterprise_connectors::ClientMetadata_Profile>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisAcknowledgement* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisAcknowledgement>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisRequest* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisRequest>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisResponse* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisResponse_Result* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse_Result>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule>(Arena*);
template<> ::enterprise_connectors::ContentMetaData* Arena::CreateMaybeMessage<::enterprise_connectors::ContentMetaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enterprise_connectors {

enum ContentAnalysisResponse_Result_TriggeredRule_Action : int {
  ContentAnalysisResponse_Result_TriggeredRule_Action_ACTION_UNSPECIFIED = 0,
  ContentAnalysisResponse_Result_TriggeredRule_Action_REPORT_ONLY = 1,
  ContentAnalysisResponse_Result_TriggeredRule_Action_WARN = 2,
  ContentAnalysisResponse_Result_TriggeredRule_Action_BLOCK = 3
};
bool ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(int value);
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MIN = ContentAnalysisResponse_Result_TriggeredRule_Action_ACTION_UNSPECIFIED;
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MAX = ContentAnalysisResponse_Result_TriggeredRule_Action_BLOCK;
constexpr int ContentAnalysisResponse_Result_TriggeredRule_Action_Action_ARRAYSIZE = ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MAX + 1;

const std::string& ContentAnalysisResponse_Result_TriggeredRule_Action_Name(ContentAnalysisResponse_Result_TriggeredRule_Action value);
template<typename T>
inline const std::string& ContentAnalysisResponse_Result_TriggeredRule_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentAnalysisResponse_Result_TriggeredRule_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentAnalysisResponse_Result_TriggeredRule_Action_Name.");
  return ContentAnalysisResponse_Result_TriggeredRule_Action_Name(static_cast<ContentAnalysisResponse_Result_TriggeredRule_Action>(enum_t_value));
}
bool ContentAnalysisResponse_Result_TriggeredRule_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContentAnalysisResponse_Result_TriggeredRule_Action* value);
enum ContentAnalysisResponse_Result_Status : int {
  ContentAnalysisResponse_Result_Status_STATUS_UNKNOWN = 0,
  ContentAnalysisResponse_Result_Status_SUCCESS = 1,
  ContentAnalysisResponse_Result_Status_FAILURE = 2
};
bool ContentAnalysisResponse_Result_Status_IsValid(int value);
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result_Status_Status_MIN = ContentAnalysisResponse_Result_Status_STATUS_UNKNOWN;
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result_Status_Status_MAX = ContentAnalysisResponse_Result_Status_FAILURE;
constexpr int ContentAnalysisResponse_Result_Status_Status_ARRAYSIZE = ContentAnalysisResponse_Result_Status_Status_MAX + 1;

const std::string& ContentAnalysisResponse_Result_Status_Name(ContentAnalysisResponse_Result_Status value);
template<typename T>
inline const std::string& ContentAnalysisResponse_Result_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentAnalysisResponse_Result_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentAnalysisResponse_Result_Status_Name.");
  return ContentAnalysisResponse_Result_Status_Name(static_cast<ContentAnalysisResponse_Result_Status>(enum_t_value));
}
bool ContentAnalysisResponse_Result_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContentAnalysisResponse_Result_Status* value);
enum ContentAnalysisAcknowledgement_Status : int {
  ContentAnalysisAcknowledgement_Status_SUCCESS = 1,
  ContentAnalysisAcknowledgement_Status_INVALID_RESPONSE = 2,
  ContentAnalysisAcknowledgement_Status_TOO_LATE = 3
};
bool ContentAnalysisAcknowledgement_Status_IsValid(int value);
constexpr ContentAnalysisAcknowledgement_Status ContentAnalysisAcknowledgement_Status_Status_MIN = ContentAnalysisAcknowledgement_Status_SUCCESS;
constexpr ContentAnalysisAcknowledgement_Status ContentAnalysisAcknowledgement_Status_Status_MAX = ContentAnalysisAcknowledgement_Status_TOO_LATE;
constexpr int ContentAnalysisAcknowledgement_Status_Status_ARRAYSIZE = ContentAnalysisAcknowledgement_Status_Status_MAX + 1;

const std::string& ContentAnalysisAcknowledgement_Status_Name(ContentAnalysisAcknowledgement_Status value);
template<typename T>
inline const std::string& ContentAnalysisAcknowledgement_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentAnalysisAcknowledgement_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentAnalysisAcknowledgement_Status_Name.");
  return ContentAnalysisAcknowledgement_Status_Name(static_cast<ContentAnalysisAcknowledgement_Status>(enum_t_value));
}
bool ContentAnalysisAcknowledgement_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContentAnalysisAcknowledgement_Status* value);
enum ContentAnalysisAcknowledgement_FinalAction : int {
  ContentAnalysisAcknowledgement_FinalAction_ACTION_UNSPECIFIED = 0,
  ContentAnalysisAcknowledgement_FinalAction_ALLOW = 1,
  ContentAnalysisAcknowledgement_FinalAction_REPORT_ONLY = 2,
  ContentAnalysisAcknowledgement_FinalAction_WARN = 3,
  ContentAnalysisAcknowledgement_FinalAction_BLOCK = 4
};
bool ContentAnalysisAcknowledgement_FinalAction_IsValid(int value);
constexpr ContentAnalysisAcknowledgement_FinalAction ContentAnalysisAcknowledgement_FinalAction_FinalAction_MIN = ContentAnalysisAcknowledgement_FinalAction_ACTION_UNSPECIFIED;
constexpr ContentAnalysisAcknowledgement_FinalAction ContentAnalysisAcknowledgement_FinalAction_FinalAction_MAX = ContentAnalysisAcknowledgement_FinalAction_BLOCK;
constexpr int ContentAnalysisAcknowledgement_FinalAction_FinalAction_ARRAYSIZE = ContentAnalysisAcknowledgement_FinalAction_FinalAction_MAX + 1;

const std::string& ContentAnalysisAcknowledgement_FinalAction_Name(ContentAnalysisAcknowledgement_FinalAction value);
template<typename T>
inline const std::string& ContentAnalysisAcknowledgement_FinalAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentAnalysisAcknowledgement_FinalAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentAnalysisAcknowledgement_FinalAction_Name.");
  return ContentAnalysisAcknowledgement_FinalAction_Name(static_cast<ContentAnalysisAcknowledgement_FinalAction>(enum_t_value));
}
bool ContentAnalysisAcknowledgement_FinalAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContentAnalysisAcknowledgement_FinalAction* value);
enum AnalysisConnector : int {
  ANALYSIS_CONNECTOR_UNSPECIFIED = 0,
  FILE_DOWNLOADED = 1,
  FILE_ATTACHED = 2,
  BULK_DATA_ENTRY = 3,
  PRINT = 4,
  FILE_TRANSFER = 5
};
bool AnalysisConnector_IsValid(int value);
constexpr AnalysisConnector AnalysisConnector_MIN = ANALYSIS_CONNECTOR_UNSPECIFIED;
constexpr AnalysisConnector AnalysisConnector_MAX = FILE_TRANSFER;
constexpr int AnalysisConnector_ARRAYSIZE = AnalysisConnector_MAX + 1;

const std::string& AnalysisConnector_Name(AnalysisConnector value);
template<typename T>
inline const std::string& AnalysisConnector_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnalysisConnector>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnalysisConnector_Name.");
  return AnalysisConnector_Name(static_cast<AnalysisConnector>(enum_t_value));
}
bool AnalysisConnector_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnalysisConnector* value);
// ===================================================================

class ContentMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentMetaData) */ {
 public:
  inline ContentMetaData() : ContentMetaData(nullptr) {}
  ~ContentMetaData() override;
  explicit PROTOBUF_CONSTEXPR ContentMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentMetaData(const ContentMetaData& from);
  ContentMetaData(ContentMetaData&& from) noexcept
    : ContentMetaData() {
    *this = ::std::move(from);
  }

  inline ContentMetaData& operator=(const ContentMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentMetaData& operator=(ContentMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentMetaData* internal_default_instance() {
    return reinterpret_cast<const ContentMetaData*>(
               &_ContentMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentMetaData& a, ContentMetaData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentMetaData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentMetaData& from);
  void MergeFrom(const ContentMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentMetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentMetaData";
  }
  protected:
  explicit ContentMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kDigestFieldNumber = 3,
    kEmailFieldNumber = 5,
    kContentTypeFieldNumber = 6,
    kCsdFieldNumber = 4,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string filename = 2;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string digest = 3;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional string email = 5;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string content_type = 6;
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // optional .safe_browsing.ClientDownloadRequest csd = 4;
  bool has_csd() const;
  private:
  bool _internal_has_csd() const;
  public:
  void clear_csd();
  const ::safe_browsing::ClientDownloadRequest& csd() const;
  PROTOBUF_NODISCARD ::safe_browsing::ClientDownloadRequest* release_csd();
  ::safe_browsing::ClientDownloadRequest* mutable_csd();
  void set_allocated_csd(::safe_browsing::ClientDownloadRequest* csd);
  private:
  const ::safe_browsing::ClientDownloadRequest& _internal_csd() const;
  ::safe_browsing::ClientDownloadRequest* _internal_mutable_csd();
  public:
  void unsafe_arena_set_allocated_csd(
      ::safe_browsing::ClientDownloadRequest* csd);
  ::safe_browsing::ClientDownloadRequest* unsafe_arena_release_csd();

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  ::safe_browsing::ClientDownloadRequest* csd_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ClientMetadata_Browser final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ClientMetadata.Browser) */ {
 public:
  inline ClientMetadata_Browser() : ClientMetadata_Browser(nullptr) {}
  ~ClientMetadata_Browser() override;
  explicit PROTOBUF_CONSTEXPR ClientMetadata_Browser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMetadata_Browser(const ClientMetadata_Browser& from);
  ClientMetadata_Browser(ClientMetadata_Browser&& from) noexcept
    : ClientMetadata_Browser() {
    *this = ::std::move(from);
  }

  inline ClientMetadata_Browser& operator=(const ClientMetadata_Browser& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMetadata_Browser& operator=(ClientMetadata_Browser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientMetadata_Browser& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMetadata_Browser* internal_default_instance() {
    return reinterpret_cast<const ClientMetadata_Browser*>(
               &_ClientMetadata_Browser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientMetadata_Browser& a, ClientMetadata_Browser& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientMetadata_Browser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMetadata_Browser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMetadata_Browser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMetadata_Browser>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientMetadata_Browser& from);
  void MergeFrom(const ClientMetadata_Browser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientMetadata_Browser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ClientMetadata.Browser";
  }
  protected:
  explicit ClientMetadata_Browser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserIdFieldNumber = 1,
    kUserAgentFieldNumber = 2,
    kChromeVersionFieldNumber = 3,
    kMachineUserFieldNumber = 4,
  };
  // optional string browser_id = 1;
  bool has_browser_id() const;
  private:
  bool _internal_has_browser_id() const;
  public:
  void clear_browser_id();
  const std::string& browser_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_browser_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_browser_id();
  PROTOBUF_NODISCARD std::string* release_browser_id();
  void set_allocated_browser_id(std::string* browser_id);
  private:
  const std::string& _internal_browser_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_browser_id(const std::string& value);
  std::string* _internal_mutable_browser_id();
  public:

  // optional string user_agent = 2;
  bool has_user_agent() const;
  private:
  bool _internal_has_user_agent() const;
  public:
  void clear_user_agent();
  const std::string& user_agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_agent();
  PROTOBUF_NODISCARD std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // optional string chrome_version = 3;
  bool has_chrome_version() const;
  private:
  bool _internal_has_chrome_version() const;
  public:
  void clear_chrome_version();
  const std::string& chrome_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chrome_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chrome_version();
  PROTOBUF_NODISCARD std::string* release_chrome_version();
  void set_allocated_chrome_version(std::string* chrome_version);
  private:
  const std::string& _internal_chrome_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chrome_version(const std::string& value);
  std::string* _internal_mutable_chrome_version();
  public:

  // optional string machine_user = 4;
  bool has_machine_user() const;
  private:
  bool _internal_has_machine_user() const;
  public:
  void clear_machine_user();
  const std::string& machine_user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_user();
  PROTOBUF_NODISCARD std::string* release_machine_user();
  void set_allocated_machine_user(std::string* machine_user);
  private:
  const std::string& _internal_machine_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_user(const std::string& value);
  std::string* _internal_mutable_machine_user();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ClientMetadata.Browser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr browser_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chrome_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_user_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ClientMetadata_Device final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ClientMetadata.Device) */ {
 public:
  inline ClientMetadata_Device() : ClientMetadata_Device(nullptr) {}
  ~ClientMetadata_Device() override;
  explicit PROTOBUF_CONSTEXPR ClientMetadata_Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMetadata_Device(const ClientMetadata_Device& from);
  ClientMetadata_Device(ClientMetadata_Device&& from) noexcept
    : ClientMetadata_Device() {
    *this = ::std::move(from);
  }

  inline ClientMetadata_Device& operator=(const ClientMetadata_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMetadata_Device& operator=(ClientMetadata_Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientMetadata_Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMetadata_Device* internal_default_instance() {
    return reinterpret_cast<const ClientMetadata_Device*>(
               &_ClientMetadata_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientMetadata_Device& a, ClientMetadata_Device& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientMetadata_Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMetadata_Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMetadata_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMetadata_Device>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientMetadata_Device& from);
  void MergeFrom(const ClientMetadata_Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientMetadata_Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ClientMetadata.Device";
  }
  protected:
  explicit ClientMetadata_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmTokenFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kOsVersionFieldNumber = 3,
    kOsPlatformFieldNumber = 4,
    kNameFieldNumber = 5,
  };
  // optional string dm_token = 1;
  bool has_dm_token() const;
  private:
  bool _internal_has_dm_token() const;
  public:
  void clear_dm_token();
  const std::string& dm_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dm_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dm_token();
  PROTOBUF_NODISCARD std::string* release_dm_token();
  void set_allocated_dm_token(std::string* dm_token);
  private:
  const std::string& _internal_dm_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dm_token(const std::string& value);
  std::string* _internal_mutable_dm_token();
  public:

  // optional string client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // optional string os_version = 3;
  bool has_os_version() const;
  private:
  bool _internal_has_os_version() const;
  public:
  void clear_os_version();
  const std::string& os_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_version();
  PROTOBUF_NODISCARD std::string* release_os_version();
  void set_allocated_os_version(std::string* os_version);
  private:
  const std::string& _internal_os_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_version(const std::string& value);
  std::string* _internal_mutable_os_version();
  public:

  // optional string os_platform = 4;
  bool has_os_platform() const;
  private:
  bool _internal_has_os_platform() const;
  public:
  void clear_os_platform();
  const std::string& os_platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_platform();
  PROTOBUF_NODISCARD std::string* release_os_platform();
  void set_allocated_os_platform(std::string* os_platform);
  private:
  const std::string& _internal_os_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_platform(const std::string& value);
  std::string* _internal_mutable_os_platform();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ClientMetadata.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ClientMetadata_Profile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ClientMetadata.Profile) */ {
 public:
  inline ClientMetadata_Profile() : ClientMetadata_Profile(nullptr) {}
  ~ClientMetadata_Profile() override;
  explicit PROTOBUF_CONSTEXPR ClientMetadata_Profile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMetadata_Profile(const ClientMetadata_Profile& from);
  ClientMetadata_Profile(ClientMetadata_Profile&& from) noexcept
    : ClientMetadata_Profile() {
    *this = ::std::move(from);
  }

  inline ClientMetadata_Profile& operator=(const ClientMetadata_Profile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMetadata_Profile& operator=(ClientMetadata_Profile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientMetadata_Profile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMetadata_Profile* internal_default_instance() {
    return reinterpret_cast<const ClientMetadata_Profile*>(
               &_ClientMetadata_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientMetadata_Profile& a, ClientMetadata_Profile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientMetadata_Profile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMetadata_Profile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMetadata_Profile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMetadata_Profile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientMetadata_Profile& from);
  void MergeFrom(const ClientMetadata_Profile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientMetadata_Profile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ClientMetadata.Profile";
  }
  protected:
  explicit ClientMetadata_Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmTokenFieldNumber = 1,
    kGaiaEmailFieldNumber = 2,
    kProfilePathFieldNumber = 3,
    kProfileNameFieldNumber = 4,
    kClientIdFieldNumber = 5,
  };
  // optional string dm_token = 1;
  bool has_dm_token() const;
  private:
  bool _internal_has_dm_token() const;
  public:
  void clear_dm_token();
  const std::string& dm_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dm_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dm_token();
  PROTOBUF_NODISCARD std::string* release_dm_token();
  void set_allocated_dm_token(std::string* dm_token);
  private:
  const std::string& _internal_dm_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dm_token(const std::string& value);
  std::string* _internal_mutable_dm_token();
  public:

  // optional string gaia_email = 2;
  bool has_gaia_email() const;
  private:
  bool _internal_has_gaia_email() const;
  public:
  void clear_gaia_email();
  const std::string& gaia_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gaia_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gaia_email();
  PROTOBUF_NODISCARD std::string* release_gaia_email();
  void set_allocated_gaia_email(std::string* gaia_email);
  private:
  const std::string& _internal_gaia_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gaia_email(const std::string& value);
  std::string* _internal_mutable_gaia_email();
  public:

  // optional string profile_path = 3;
  bool has_profile_path() const;
  private:
  bool _internal_has_profile_path() const;
  public:
  void clear_profile_path();
  const std::string& profile_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_path();
  PROTOBUF_NODISCARD std::string* release_profile_path();
  void set_allocated_profile_path(std::string* profile_path);
  private:
  const std::string& _internal_profile_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_path(const std::string& value);
  std::string* _internal_mutable_profile_path();
  public:

  // optional string profile_name = 4;
  bool has_profile_name() const;
  private:
  bool _internal_has_profile_name() const;
  public:
  void clear_profile_name();
  const std::string& profile_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_name();
  PROTOBUF_NODISCARD std::string* release_profile_name();
  void set_allocated_profile_name(std::string* profile_name);
  private:
  const std::string& _internal_profile_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_name(const std::string& value);
  std::string* _internal_mutable_profile_name();
  public:

  // optional string client_id = 5;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ClientMetadata.Profile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gaia_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ClientMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ClientMetadata) */ {
 public:
  inline ClientMetadata() : ClientMetadata(nullptr) {}
  ~ClientMetadata() override;
  explicit PROTOBUF_CONSTEXPR ClientMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMetadata(const ClientMetadata& from);
  ClientMetadata(ClientMetadata&& from) noexcept
    : ClientMetadata() {
    *this = ::std::move(from);
  }

  inline ClientMetadata& operator=(const ClientMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMetadata& operator=(ClientMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMetadata* internal_default_instance() {
    return reinterpret_cast<const ClientMetadata*>(
               &_ClientMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientMetadata& a, ClientMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientMetadata& from);
  void MergeFrom(const ClientMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ClientMetadata";
  }
  protected:
  explicit ClientMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientMetadata_Browser Browser;
  typedef ClientMetadata_Device Device;
  typedef ClientMetadata_Profile Profile;

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserFieldNumber = 1,
    kDeviceFieldNumber = 2,
    kProfileFieldNumber = 3,
  };
  // optional .enterprise_connectors.ClientMetadata.Browser browser = 1;
  bool has_browser() const;
  private:
  bool _internal_has_browser() const;
  public:
  void clear_browser();
  const ::enterprise_connectors::ClientMetadata_Browser& browser() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::ClientMetadata_Browser* release_browser();
  ::enterprise_connectors::ClientMetadata_Browser* mutable_browser();
  void set_allocated_browser(::enterprise_connectors::ClientMetadata_Browser* browser);
  private:
  const ::enterprise_connectors::ClientMetadata_Browser& _internal_browser() const;
  ::enterprise_connectors::ClientMetadata_Browser* _internal_mutable_browser();
  public:
  void unsafe_arena_set_allocated_browser(
      ::enterprise_connectors::ClientMetadata_Browser* browser);
  ::enterprise_connectors::ClientMetadata_Browser* unsafe_arena_release_browser();

  // optional .enterprise_connectors.ClientMetadata.Device device = 2;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::enterprise_connectors::ClientMetadata_Device& device() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::ClientMetadata_Device* release_device();
  ::enterprise_connectors::ClientMetadata_Device* mutable_device();
  void set_allocated_device(::enterprise_connectors::ClientMetadata_Device* device);
  private:
  const ::enterprise_connectors::ClientMetadata_Device& _internal_device() const;
  ::enterprise_connectors::ClientMetadata_Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::enterprise_connectors::ClientMetadata_Device* device);
  ::enterprise_connectors::ClientMetadata_Device* unsafe_arena_release_device();

  // optional .enterprise_connectors.ClientMetadata.Profile profile = 3;
  bool has_profile() const;
  private:
  bool _internal_has_profile() const;
  public:
  void clear_profile();
  const ::enterprise_connectors::ClientMetadata_Profile& profile() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::ClientMetadata_Profile* release_profile();
  ::enterprise_connectors::ClientMetadata_Profile* mutable_profile();
  void set_allocated_profile(::enterprise_connectors::ClientMetadata_Profile* profile);
  private:
  const ::enterprise_connectors::ClientMetadata_Profile& _internal_profile() const;
  ::enterprise_connectors::ClientMetadata_Profile* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::enterprise_connectors::ClientMetadata_Profile* profile);
  ::enterprise_connectors::ClientMetadata_Profile* unsafe_arena_release_profile();

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ClientMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::enterprise_connectors::ClientMetadata_Browser* browser_;
  ::enterprise_connectors::ClientMetadata_Device* device_;
  ::enterprise_connectors::ClientMetadata_Profile* profile_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisRequest) */ {
 public:
  inline ContentAnalysisRequest() : ContentAnalysisRequest(nullptr) {}
  ~ContentAnalysisRequest() override;
  explicit PROTOBUF_CONSTEXPR ContentAnalysisRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentAnalysisRequest(const ContentAnalysisRequest& from);
  ContentAnalysisRequest(ContentAnalysisRequest&& from) noexcept
    : ContentAnalysisRequest() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisRequest& operator=(const ContentAnalysisRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisRequest& operator=(ContentAnalysisRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentAnalysisRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ContentDataCase {
    kTextContent = 13,
    kFilePath = 14,
    CONTENT_DATA_NOT_SET = 0,
  };

  static inline const ContentAnalysisRequest* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisRequest*>(
               &_ContentAnalysisRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ContentAnalysisRequest& a, ContentAnalysisRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentAnalysisRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentAnalysisRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentAnalysisRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentAnalysisRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentAnalysisRequest& from);
  void MergeFrom(const ContentAnalysisRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisRequest";
  }
  protected:
  explicit ContentAnalysisRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 11,
    kDeviceTokenFieldNumber = 1,
    kFcmNotificationTokenFieldNumber = 2,
    kRequestTokenFieldNumber = 5,
    kRequestDataFieldNumber = 10,
    kClientMetadataFieldNumber = 12,
    kExpiresAtFieldNumber = 15,
    kAnalysisConnectorFieldNumber = 9,
    kTextContentFieldNumber = 13,
    kFilePathFieldNumber = 14,
  };
  // repeated string tags = 11;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string device_token = 1;
  bool has_device_token() const;
  private:
  bool _internal_has_device_token() const;
  public:
  void clear_device_token();
  const std::string& device_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_token();
  PROTOBUF_NODISCARD std::string* release_device_token();
  void set_allocated_device_token(std::string* device_token);
  private:
  const std::string& _internal_device_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_token(const std::string& value);
  std::string* _internal_mutable_device_token();
  public:

  // optional string fcm_notification_token = 2;
  bool has_fcm_notification_token() const;
  private:
  bool _internal_has_fcm_notification_token() const;
  public:
  void clear_fcm_notification_token();
  const std::string& fcm_notification_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fcm_notification_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fcm_notification_token();
  PROTOBUF_NODISCARD std::string* release_fcm_notification_token();
  void set_allocated_fcm_notification_token(std::string* fcm_notification_token);
  private:
  const std::string& _internal_fcm_notification_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fcm_notification_token(const std::string& value);
  std::string* _internal_mutable_fcm_notification_token();
  public:

  // optional string request_token = 5;
  bool has_request_token() const;
  private:
  bool _internal_has_request_token() const;
  public:
  void clear_request_token();
  const std::string& request_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_token();
  PROTOBUF_NODISCARD std::string* release_request_token();
  void set_allocated_request_token(std::string* request_token);
  private:
  const std::string& _internal_request_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_token(const std::string& value);
  std::string* _internal_mutable_request_token();
  public:

  // optional .enterprise_connectors.ContentMetaData request_data = 10;
  bool has_request_data() const;
  private:
  bool _internal_has_request_data() const;
  public:
  void clear_request_data();
  const ::enterprise_connectors::ContentMetaData& request_data() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::ContentMetaData* release_request_data();
  ::enterprise_connectors::ContentMetaData* mutable_request_data();
  void set_allocated_request_data(::enterprise_connectors::ContentMetaData* request_data);
  private:
  const ::enterprise_connectors::ContentMetaData& _internal_request_data() const;
  ::enterprise_connectors::ContentMetaData* _internal_mutable_request_data();
  public:
  void unsafe_arena_set_allocated_request_data(
      ::enterprise_connectors::ContentMetaData* request_data);
  ::enterprise_connectors::ContentMetaData* unsafe_arena_release_request_data();

  // optional .enterprise_connectors.ClientMetadata client_metadata = 12;
  bool has_client_metadata() const;
  private:
  bool _internal_has_client_metadata() const;
  public:
  void clear_client_metadata();
  const ::enterprise_connectors::ClientMetadata& client_metadata() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::ClientMetadata* release_client_metadata();
  ::enterprise_connectors::ClientMetadata* mutable_client_metadata();
  void set_allocated_client_metadata(::enterprise_connectors::ClientMetadata* client_metadata);
  private:
  const ::enterprise_connectors::ClientMetadata& _internal_client_metadata() const;
  ::enterprise_connectors::ClientMetadata* _internal_mutable_client_metadata();
  public:
  void unsafe_arena_set_allocated_client_metadata(
      ::enterprise_connectors::ClientMetadata* client_metadata);
  ::enterprise_connectors::ClientMetadata* unsafe_arena_release_client_metadata();

  // optional int64 expires_at = 15;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  int64_t expires_at() const;
  void set_expires_at(int64_t value);
  private:
  int64_t _internal_expires_at() const;
  void _internal_set_expires_at(int64_t value);
  public:

  // optional .enterprise_connectors.AnalysisConnector analysis_connector = 9;
  bool has_analysis_connector() const;
  private:
  bool _internal_has_analysis_connector() const;
  public:
  void clear_analysis_connector();
  ::enterprise_connectors::AnalysisConnector analysis_connector() const;
  void set_analysis_connector(::enterprise_connectors::AnalysisConnector value);
  private:
  ::enterprise_connectors::AnalysisConnector _internal_analysis_connector() const;
  void _internal_set_analysis_connector(::enterprise_connectors::AnalysisConnector value);
  public:

  // string text_content = 13;
  bool has_text_content() const;
  private:
  bool _internal_has_text_content() const;
  public:
  void clear_text_content();
  const std::string& text_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_content();
  PROTOBUF_NODISCARD std::string* release_text_content();
  void set_allocated_text_content(std::string* text_content);
  private:
  const std::string& _internal_text_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_content(const std::string& value);
  std::string* _internal_mutable_text_content();
  public:

  // string file_path = 14;
  bool has_file_path() const;
  private:
  bool _internal_has_file_path() const;
  public:
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  void clear_content_data();
  ContentDataCase content_data_case() const;
  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisRequest)
 private:
  class _Internal;
  void set_has_text_content();
  void set_has_file_path();

  inline bool has_content_data() const;
  inline void clear_has_content_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fcm_notification_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_token_;
  ::enterprise_connectors::ContentMetaData* request_data_;
  ::enterprise_connectors::ClientMetadata* client_metadata_;
  int64_t expires_at_;
  int analysis_connector_;
  union ContentDataUnion {
    constexpr ContentDataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  } content_data_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisResponse_Result_CustomMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage) */ {
 public:
  inline ContentAnalysisResponse_Result_CustomMessage() : ContentAnalysisResponse_Result_CustomMessage(nullptr) {}
  ~ContentAnalysisResponse_Result_CustomMessage() override;
  explicit PROTOBUF_CONSTEXPR ContentAnalysisResponse_Result_CustomMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentAnalysisResponse_Result_CustomMessage(const ContentAnalysisResponse_Result_CustomMessage& from);
  ContentAnalysisResponse_Result_CustomMessage(ContentAnalysisResponse_Result_CustomMessage&& from) noexcept
    : ContentAnalysisResponse_Result_CustomMessage() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisResponse_Result_CustomMessage& operator=(const ContentAnalysisResponse_Result_CustomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisResponse_Result_CustomMessage& operator=(ContentAnalysisResponse_Result_CustomMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentAnalysisResponse_Result_CustomMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentAnalysisResponse_Result_CustomMessage* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisResponse_Result_CustomMessage*>(
               &_ContentAnalysisResponse_Result_CustomMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ContentAnalysisResponse_Result_CustomMessage& a, ContentAnalysisResponse_Result_CustomMessage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentAnalysisResponse_Result_CustomMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentAnalysisResponse_Result_CustomMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentAnalysisResponse_Result_CustomMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentAnalysisResponse_Result_CustomMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentAnalysisResponse_Result_CustomMessage& from);
  void MergeFrom(const ContentAnalysisResponse_Result_CustomMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisResponse_Result_CustomMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage";
  }
  protected:
  explicit ContentAnalysisResponse_Result_CustomMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLearnMoreUrlFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // optional string learn_more_url = 1;
  bool has_learn_more_url() const;
  private:
  bool _internal_has_learn_more_url() const;
  public:
  void clear_learn_more_url();
  const std::string& learn_more_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_learn_more_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_learn_more_url();
  PROTOBUF_NODISCARD std::string* release_learn_more_url();
  void set_allocated_learn_more_url(std::string* learn_more_url);
  private:
  const std::string& _internal_learn_more_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_learn_more_url(const std::string& value);
  std::string* _internal_mutable_learn_more_url();
  public:

  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr learn_more_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisResponse_Result_TriggeredRule final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule) */ {
 public:
  inline ContentAnalysisResponse_Result_TriggeredRule() : ContentAnalysisResponse_Result_TriggeredRule(nullptr) {}
  ~ContentAnalysisResponse_Result_TriggeredRule() override;
  explicit PROTOBUF_CONSTEXPR ContentAnalysisResponse_Result_TriggeredRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentAnalysisResponse_Result_TriggeredRule(const ContentAnalysisResponse_Result_TriggeredRule& from);
  ContentAnalysisResponse_Result_TriggeredRule(ContentAnalysisResponse_Result_TriggeredRule&& from) noexcept
    : ContentAnalysisResponse_Result_TriggeredRule() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisResponse_Result_TriggeredRule& operator=(const ContentAnalysisResponse_Result_TriggeredRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisResponse_Result_TriggeredRule& operator=(ContentAnalysisResponse_Result_TriggeredRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentAnalysisResponse_Result_TriggeredRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentAnalysisResponse_Result_TriggeredRule* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisResponse_Result_TriggeredRule*>(
               &_ContentAnalysisResponse_Result_TriggeredRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ContentAnalysisResponse_Result_TriggeredRule& a, ContentAnalysisResponse_Result_TriggeredRule& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentAnalysisResponse_Result_TriggeredRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentAnalysisResponse_Result_TriggeredRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentAnalysisResponse_Result_TriggeredRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentAnalysisResponse_Result_TriggeredRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentAnalysisResponse_Result_TriggeredRule& from);
  void MergeFrom(const ContentAnalysisResponse_Result_TriggeredRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisResponse_Result_TriggeredRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule";
  }
  protected:
  explicit ContentAnalysisResponse_Result_TriggeredRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContentAnalysisResponse_Result_TriggeredRule_Action Action;
  static constexpr Action ACTION_UNSPECIFIED =
    ContentAnalysisResponse_Result_TriggeredRule_Action_ACTION_UNSPECIFIED;
  static constexpr Action REPORT_ONLY =
    ContentAnalysisResponse_Result_TriggeredRule_Action_REPORT_ONLY;
  static constexpr Action WARN =
    ContentAnalysisResponse_Result_TriggeredRule_Action_WARN;
  static constexpr Action BLOCK =
    ContentAnalysisResponse_Result_TriggeredRule_Action_BLOCK;
  static inline bool Action_IsValid(int value) {
    return ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MIN;
  static constexpr Action Action_MAX =
    ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    ContentAnalysisResponse_Result_TriggeredRule_Action_Action_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return ContentAnalysisResponse_Result_TriggeredRule_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return ContentAnalysisResponse_Result_TriggeredRule_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRuleNameFieldNumber = 2,
    kRuleIdFieldNumber = 3,
    kCustomMessageFieldNumber = 4,
    kActionFieldNumber = 1,
  };
  // optional string rule_name = 2;
  bool has_rule_name() const;
  private:
  bool _internal_has_rule_name() const;
  public:
  void clear_rule_name();
  const std::string& rule_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rule_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rule_name();
  PROTOBUF_NODISCARD std::string* release_rule_name();
  void set_allocated_rule_name(std::string* rule_name);
  private:
  const std::string& _internal_rule_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_name(const std::string& value);
  std::string* _internal_mutable_rule_name();
  public:

  // optional string rule_id = 3;
  bool has_rule_id() const;
  private:
  bool _internal_has_rule_id() const;
  public:
  void clear_rule_id();
  const std::string& rule_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rule_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rule_id();
  PROTOBUF_NODISCARD std::string* release_rule_id();
  void set_allocated_rule_id(std::string* rule_id);
  private:
  const std::string& _internal_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_id(const std::string& value);
  std::string* _internal_mutable_rule_id();
  public:

  // optional .enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage custom_message = 4;
  bool has_custom_message() const;
  private:
  bool _internal_has_custom_message() const;
  public:
  void clear_custom_message();
  const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage& custom_message() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* release_custom_message();
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* mutable_custom_message();
  void set_allocated_custom_message(::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message);
  private:
  const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage& _internal_custom_message() const;
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* _internal_mutable_custom_message();
  public:
  void unsafe_arena_set_allocated_custom_message(
      ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message);
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* unsafe_arena_release_custom_message();

  // optional .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.Action action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action action() const;
  void set_action(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action value);
  private:
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action _internal_action() const;
  void _internal_set_action(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_id_;
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message_;
  int action_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisResponse_Result final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisResponse.Result) */ {
 public:
  inline ContentAnalysisResponse_Result() : ContentAnalysisResponse_Result(nullptr) {}
  ~ContentAnalysisResponse_Result() override;
  explicit PROTOBUF_CONSTEXPR ContentAnalysisResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentAnalysisResponse_Result(const ContentAnalysisResponse_Result& from);
  ContentAnalysisResponse_Result(ContentAnalysisResponse_Result&& from) noexcept
    : ContentAnalysisResponse_Result() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisResponse_Result& operator=(const ContentAnalysisResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisResponse_Result& operator=(ContentAnalysisResponse_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentAnalysisResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentAnalysisResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisResponse_Result*>(
               &_ContentAnalysisResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ContentAnalysisResponse_Result& a, ContentAnalysisResponse_Result& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentAnalysisResponse_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentAnalysisResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentAnalysisResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentAnalysisResponse_Result>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentAnalysisResponse_Result& from);
  void MergeFrom(const ContentAnalysisResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisResponse_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisResponse.Result";
  }
  protected:
  explicit ContentAnalysisResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContentAnalysisResponse_Result_CustomMessage CustomMessage;
  typedef ContentAnalysisResponse_Result_TriggeredRule TriggeredRule;

  typedef ContentAnalysisResponse_Result_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    ContentAnalysisResponse_Result_Status_STATUS_UNKNOWN;
  static constexpr Status SUCCESS =
    ContentAnalysisResponse_Result_Status_SUCCESS;
  static constexpr Status FAILURE =
    ContentAnalysisResponse_Result_Status_FAILURE;
  static inline bool Status_IsValid(int value) {
    return ContentAnalysisResponse_Result_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ContentAnalysisResponse_Result_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ContentAnalysisResponse_Result_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ContentAnalysisResponse_Result_Status_Status_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ContentAnalysisResponse_Result_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ContentAnalysisResponse_Result_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTriggeredRulesFieldNumber = 3,
    kTagFieldNumber = 1,
    kMalwareFamilyFieldNumber = 4,
    kMalwareCategoryFieldNumber = 5,
    kEvidenceLockerFilepathFieldNumber = 6,
    kCustomMessageFieldNumber = 7,
    kStatusFieldNumber = 2,
  };
  // repeated .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule triggered_rules = 3;
  int triggered_rules_size() const;
  private:
  int _internal_triggered_rules_size() const;
  public:
  void clear_triggered_rules();
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* mutable_triggered_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >*
      mutable_triggered_rules();
  private:
  const ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule& _internal_triggered_rules(int index) const;
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* _internal_add_triggered_rules();
  public:
  const ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule& triggered_rules(int index) const;
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* add_triggered_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >&
      triggered_rules() const;

  // optional string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional string malware_family = 4;
  bool has_malware_family() const;
  private:
  bool _internal_has_malware_family() const;
  public:
  void clear_malware_family();
  const std::string& malware_family() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_malware_family(ArgT0&& arg0, ArgT... args);
  std::string* mutable_malware_family();
  PROTOBUF_NODISCARD std::string* release_malware_family();
  void set_allocated_malware_family(std::string* malware_family);
  private:
  const std::string& _internal_malware_family() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_malware_family(const std::string& value);
  std::string* _internal_mutable_malware_family();
  public:

  // optional string malware_category = 5;
  bool has_malware_category() const;
  private:
  bool _internal_has_malware_category() const;
  public:
  void clear_malware_category();
  const std::string& malware_category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_malware_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_malware_category();
  PROTOBUF_NODISCARD std::string* release_malware_category();
  void set_allocated_malware_category(std::string* malware_category);
  private:
  const std::string& _internal_malware_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_malware_category(const std::string& value);
  std::string* _internal_mutable_malware_category();
  public:

  // optional string evidence_locker_filepath = 6;
  bool has_evidence_locker_filepath() const;
  private:
  bool _internal_has_evidence_locker_filepath() const;
  public:
  void clear_evidence_locker_filepath();
  const std::string& evidence_locker_filepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_evidence_locker_filepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_evidence_locker_filepath();
  PROTOBUF_NODISCARD std::string* release_evidence_locker_filepath();
  void set_allocated_evidence_locker_filepath(std::string* evidence_locker_filepath);
  private:
  const std::string& _internal_evidence_locker_filepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_evidence_locker_filepath(const std::string& value);
  std::string* _internal_mutable_evidence_locker_filepath();
  public:

  // optional .enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage custom_message = 7;
  bool has_custom_message() const;
  private:
  bool _internal_has_custom_message() const;
  public:
  void clear_custom_message();
  const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage& custom_message() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* release_custom_message();
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* mutable_custom_message();
  void set_allocated_custom_message(::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message);
  private:
  const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage& _internal_custom_message() const;
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* _internal_mutable_custom_message();
  public:
  void unsafe_arena_set_allocated_custom_message(
      ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message);
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* unsafe_arena_release_custom_message();

  // optional .enterprise_connectors.ContentAnalysisResponse.Result.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::enterprise_connectors::ContentAnalysisResponse_Result_Status status() const;
  void set_status(::enterprise_connectors::ContentAnalysisResponse_Result_Status value);
  private:
  ::enterprise_connectors::ContentAnalysisResponse_Result_Status _internal_status() const;
  void _internal_set_status(::enterprise_connectors::ContentAnalysisResponse_Result_Status value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule > triggered_rules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr malware_family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr malware_category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evidence_locker_filepath_;
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message_;
  int status_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisResponse) */ {
 public:
  inline ContentAnalysisResponse() : ContentAnalysisResponse(nullptr) {}
  ~ContentAnalysisResponse() override;
  explicit PROTOBUF_CONSTEXPR ContentAnalysisResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentAnalysisResponse(const ContentAnalysisResponse& from);
  ContentAnalysisResponse(ContentAnalysisResponse&& from) noexcept
    : ContentAnalysisResponse() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisResponse& operator=(const ContentAnalysisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisResponse& operator=(ContentAnalysisResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentAnalysisResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentAnalysisResponse* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisResponse*>(
               &_ContentAnalysisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ContentAnalysisResponse& a, ContentAnalysisResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentAnalysisResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentAnalysisResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentAnalysisResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentAnalysisResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentAnalysisResponse& from);
  void MergeFrom(const ContentAnalysisResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisResponse";
  }
  protected:
  explicit ContentAnalysisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContentAnalysisResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 4,
    kRequestTokenFieldNumber = 1,
  };
  // repeated .enterprise_connectors.ContentAnalysisResponse.Result results = 4;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::enterprise_connectors::ContentAnalysisResponse_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result >*
      mutable_results();
  private:
  const ::enterprise_connectors::ContentAnalysisResponse_Result& _internal_results(int index) const;
  ::enterprise_connectors::ContentAnalysisResponse_Result* _internal_add_results();
  public:
  const ::enterprise_connectors::ContentAnalysisResponse_Result& results(int index) const;
  ::enterprise_connectors::ContentAnalysisResponse_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result >&
      results() const;

  // optional string request_token = 1;
  bool has_request_token() const;
  private:
  bool _internal_has_request_token() const;
  public:
  void clear_request_token();
  const std::string& request_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_token();
  PROTOBUF_NODISCARD std::string* release_request_token();
  void set_allocated_request_token(std::string* request_token);
  private:
  const std::string& _internal_request_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_token(const std::string& value);
  std::string* _internal_mutable_request_token();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_token_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisAcknowledgement final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisAcknowledgement) */ {
 public:
  inline ContentAnalysisAcknowledgement() : ContentAnalysisAcknowledgement(nullptr) {}
  ~ContentAnalysisAcknowledgement() override;
  explicit PROTOBUF_CONSTEXPR ContentAnalysisAcknowledgement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentAnalysisAcknowledgement(const ContentAnalysisAcknowledgement& from);
  ContentAnalysisAcknowledgement(ContentAnalysisAcknowledgement&& from) noexcept
    : ContentAnalysisAcknowledgement() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisAcknowledgement& operator=(const ContentAnalysisAcknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisAcknowledgement& operator=(ContentAnalysisAcknowledgement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentAnalysisAcknowledgement& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentAnalysisAcknowledgement* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisAcknowledgement*>(
               &_ContentAnalysisAcknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ContentAnalysisAcknowledgement& a, ContentAnalysisAcknowledgement& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentAnalysisAcknowledgement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentAnalysisAcknowledgement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentAnalysisAcknowledgement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentAnalysisAcknowledgement>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentAnalysisAcknowledgement& from);
  void MergeFrom(const ContentAnalysisAcknowledgement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisAcknowledgement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisAcknowledgement";
  }
  protected:
  explicit ContentAnalysisAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContentAnalysisAcknowledgement_Status Status;
  static constexpr Status SUCCESS =
    ContentAnalysisAcknowledgement_Status_SUCCESS;
  static constexpr Status INVALID_RESPONSE =
    ContentAnalysisAcknowledgement_Status_INVALID_RESPONSE;
  static constexpr Status TOO_LATE =
    ContentAnalysisAcknowledgement_Status_TOO_LATE;
  static inline bool Status_IsValid(int value) {
    return ContentAnalysisAcknowledgement_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ContentAnalysisAcknowledgement_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ContentAnalysisAcknowledgement_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ContentAnalysisAcknowledgement_Status_Status_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ContentAnalysisAcknowledgement_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ContentAnalysisAcknowledgement_Status_Parse(name, value);
  }

  typedef ContentAnalysisAcknowledgement_FinalAction FinalAction;
  static constexpr FinalAction ACTION_UNSPECIFIED =
    ContentAnalysisAcknowledgement_FinalAction_ACTION_UNSPECIFIED;
  static constexpr FinalAction ALLOW =
    ContentAnalysisAcknowledgement_FinalAction_ALLOW;
  static constexpr FinalAction REPORT_ONLY =
    ContentAnalysisAcknowledgement_FinalAction_REPORT_ONLY;
  static constexpr FinalAction WARN =
    ContentAnalysisAcknowledgement_FinalAction_WARN;
  static constexpr FinalAction BLOCK =
    ContentAnalysisAcknowledgement_FinalAction_BLOCK;
  static inline bool FinalAction_IsValid(int value) {
    return ContentAnalysisAcknowledgement_FinalAction_IsValid(value);
  }
  static constexpr FinalAction FinalAction_MIN =
    ContentAnalysisAcknowledgement_FinalAction_FinalAction_MIN;
  static constexpr FinalAction FinalAction_MAX =
    ContentAnalysisAcknowledgement_FinalAction_FinalAction_MAX;
  static constexpr int FinalAction_ARRAYSIZE =
    ContentAnalysisAcknowledgement_FinalAction_FinalAction_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FinalAction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FinalAction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FinalAction_Name.");
    return ContentAnalysisAcknowledgement_FinalAction_Name(enum_t_value);
  }
  static inline bool FinalAction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FinalAction* value) {
    return ContentAnalysisAcknowledgement_FinalAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTokenFieldNumber = 1,
    kFinalActionFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // optional string request_token = 1;
  bool has_request_token() const;
  private:
  bool _internal_has_request_token() const;
  public:
  void clear_request_token();
  const std::string& request_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_token();
  PROTOBUF_NODISCARD std::string* release_request_token();
  void set_allocated_request_token(std::string* request_token);
  private:
  const std::string& _internal_request_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_token(const std::string& value);
  std::string* _internal_mutable_request_token();
  public:

  // optional .enterprise_connectors.ContentAnalysisAcknowledgement.FinalAction final_action = 3;
  bool has_final_action() const;
  private:
  bool _internal_has_final_action() const;
  public:
  void clear_final_action();
  ::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction final_action() const;
  void set_final_action(::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction value);
  private:
  ::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction _internal_final_action() const;
  void _internal_set_final_action(::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction value);
  public:

  // optional .enterprise_connectors.ContentAnalysisAcknowledgement.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::enterprise_connectors::ContentAnalysisAcknowledgement_Status status() const;
  void set_status(::enterprise_connectors::ContentAnalysisAcknowledgement_Status value);
  private:
  ::enterprise_connectors::ContentAnalysisAcknowledgement_Status _internal_status() const;
  void _internal_set_status(::enterprise_connectors::ContentAnalysisAcknowledgement_Status value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisAcknowledgement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_token_;
  int final_action_;
  int status_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentMetaData

// optional string url = 1;
inline bool ContentMetaData::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentMetaData::has_url() const {
  return _internal_has_url();
}
inline void ContentMetaData::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentMetaData::url() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentMetaData::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentMetaData.url)
}
inline std::string* ContentMetaData::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.url)
  return _s;
}
inline const std::string& ContentMetaData::_internal_url() const {
  return url_.Get();
}
inline void ContentMetaData::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentMetaData::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentMetaData::release_url() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentMetaData::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.url)
}

// optional string filename = 2;
inline bool ContentMetaData::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentMetaData::has_filename() const {
  return _internal_has_filename();
}
inline void ContentMetaData::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentMetaData::filename() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentMetaData::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentMetaData.filename)
}
inline std::string* ContentMetaData::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.filename)
  return _s;
}
inline const std::string& ContentMetaData::_internal_filename() const {
  return filename_.Get();
}
inline void ContentMetaData::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentMetaData::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentMetaData::release_filename() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentMetaData::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.filename)
}

// optional string digest = 3;
inline bool ContentMetaData::_internal_has_digest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentMetaData::has_digest() const {
  return _internal_has_digest();
}
inline void ContentMetaData::clear_digest() {
  digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentMetaData::digest() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentMetaData::set_digest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 digest_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentMetaData.digest)
}
inline std::string* ContentMetaData::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.digest)
  return _s;
}
inline const std::string& ContentMetaData::_internal_digest() const {
  return digest_.Get();
}
inline void ContentMetaData::_internal_set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  digest_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentMetaData::_internal_mutable_digest() {
  _has_bits_[0] |= 0x00000004u;
  return digest_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentMetaData::release_digest() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = digest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (digest_.IsDefault()) {
    digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentMetaData::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  digest_.SetAllocated(digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (digest_.IsDefault()) {
    digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.digest)
}

// optional .safe_browsing.ClientDownloadRequest csd = 4;
inline bool ContentMetaData::_internal_has_csd() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || csd_ != nullptr);
  return value;
}
inline bool ContentMetaData::has_csd() const {
  return _internal_has_csd();
}
inline const ::safe_browsing::ClientDownloadRequest& ContentMetaData::_internal_csd() const {
  const ::safe_browsing::ClientDownloadRequest* p = csd_;
  return p != nullptr ? *p : reinterpret_cast<const ::safe_browsing::ClientDownloadRequest&>(
      ::safe_browsing::_ClientDownloadRequest_default_instance_);
}
inline const ::safe_browsing::ClientDownloadRequest& ContentMetaData::csd() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.csd)
  return _internal_csd();
}
inline void ContentMetaData::unsafe_arena_set_allocated_csd(
    ::safe_browsing::ClientDownloadRequest* csd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(csd_);
  }
  csd_ = csd;
  if (csd) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.ContentMetaData.csd)
}
inline ::safe_browsing::ClientDownloadRequest* ContentMetaData::release_csd() {
  _has_bits_[0] &= ~0x00000020u;
  ::safe_browsing::ClientDownloadRequest* temp = csd_;
  csd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest* ContentMetaData::unsafe_arena_release_csd() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.csd)
  _has_bits_[0] &= ~0x00000020u;
  ::safe_browsing::ClientDownloadRequest* temp = csd_;
  csd_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest* ContentMetaData::_internal_mutable_csd() {
  _has_bits_[0] |= 0x00000020u;
  if (csd_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest>(GetArenaForAllocation());
    csd_ = p;
  }
  return csd_;
}
inline ::safe_browsing::ClientDownloadRequest* ContentMetaData::mutable_csd() {
  ::safe_browsing::ClientDownloadRequest* _msg = _internal_mutable_csd();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.csd)
  return _msg;
}
inline void ContentMetaData::set_allocated_csd(::safe_browsing::ClientDownloadRequest* csd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(csd_);
  }
  if (csd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(csd));
    if (message_arena != submessage_arena) {
      csd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  csd_ = csd;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.csd)
}

// optional string email = 5;
inline bool ContentMetaData::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentMetaData::has_email() const {
  return _internal_has_email();
}
inline void ContentMetaData::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ContentMetaData::email() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentMetaData::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentMetaData.email)
}
inline std::string* ContentMetaData::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.email)
  return _s;
}
inline const std::string& ContentMetaData::_internal_email() const {
  return email_.Get();
}
inline void ContentMetaData::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  email_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentMetaData::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000008u;
  return email_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentMetaData::release_email() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault()) {
    email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentMetaData::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault()) {
    email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.email)
}

// optional string content_type = 6;
inline bool ContentMetaData::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContentMetaData::has_content_type() const {
  return _internal_has_content_type();
}
inline void ContentMetaData::clear_content_type() {
  content_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ContentMetaData::content_type() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentMetaData::set_content_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 content_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentMetaData.content_type)
}
inline std::string* ContentMetaData::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.content_type)
  return _s;
}
inline const std::string& ContentMetaData::_internal_content_type() const {
  return content_type_.Get();
}
inline void ContentMetaData::_internal_set_content_type(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentMetaData::_internal_mutable_content_type() {
  _has_bits_[0] |= 0x00000010u;
  return content_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentMetaData::release_content_type() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.content_type)
  if (!_internal_has_content_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = content_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_type_.IsDefault()) {
    content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentMetaData::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  content_type_.SetAllocated(content_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_type_.IsDefault()) {
    content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.content_type)
}

// -------------------------------------------------------------------

// ClientMetadata_Browser

// optional string browser_id = 1;
inline bool ClientMetadata_Browser::_internal_has_browser_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientMetadata_Browser::has_browser_id() const {
  return _internal_has_browser_id();
}
inline void ClientMetadata_Browser::clear_browser_id() {
  browser_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientMetadata_Browser::browser_id() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Browser.browser_id)
  return _internal_browser_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Browser::set_browser_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 browser_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Browser.browser_id)
}
inline std::string* ClientMetadata_Browser::mutable_browser_id() {
  std::string* _s = _internal_mutable_browser_id();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Browser.browser_id)
  return _s;
}
inline const std::string& ClientMetadata_Browser::_internal_browser_id() const {
  return browser_id_.Get();
}
inline void ClientMetadata_Browser::_internal_set_browser_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  browser_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Browser::_internal_mutable_browser_id() {
  _has_bits_[0] |= 0x00000001u;
  return browser_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Browser::release_browser_id() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Browser.browser_id)
  if (!_internal_has_browser_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = browser_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (browser_id_.IsDefault()) {
    browser_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Browser::set_allocated_browser_id(std::string* browser_id) {
  if (browser_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  browser_id_.SetAllocated(browser_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (browser_id_.IsDefault()) {
    browser_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Browser.browser_id)
}

// optional string user_agent = 2;
inline bool ClientMetadata_Browser::_internal_has_user_agent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientMetadata_Browser::has_user_agent() const {
  return _internal_has_user_agent();
}
inline void ClientMetadata_Browser::clear_user_agent() {
  user_agent_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientMetadata_Browser::user_agent() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Browser.user_agent)
  return _internal_user_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Browser::set_user_agent(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 user_agent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Browser.user_agent)
}
inline std::string* ClientMetadata_Browser::mutable_user_agent() {
  std::string* _s = _internal_mutable_user_agent();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Browser.user_agent)
  return _s;
}
inline const std::string& ClientMetadata_Browser::_internal_user_agent() const {
  return user_agent_.Get();
}
inline void ClientMetadata_Browser::_internal_set_user_agent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_agent_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Browser::_internal_mutable_user_agent() {
  _has_bits_[0] |= 0x00000002u;
  return user_agent_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Browser::release_user_agent() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Browser.user_agent)
  if (!_internal_has_user_agent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = user_agent_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_agent_.IsDefault()) {
    user_agent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Browser::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_agent_.SetAllocated(user_agent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_agent_.IsDefault()) {
    user_agent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Browser.user_agent)
}

// optional string chrome_version = 3;
inline bool ClientMetadata_Browser::_internal_has_chrome_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientMetadata_Browser::has_chrome_version() const {
  return _internal_has_chrome_version();
}
inline void ClientMetadata_Browser::clear_chrome_version() {
  chrome_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientMetadata_Browser::chrome_version() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Browser.chrome_version)
  return _internal_chrome_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Browser::set_chrome_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 chrome_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Browser.chrome_version)
}
inline std::string* ClientMetadata_Browser::mutable_chrome_version() {
  std::string* _s = _internal_mutable_chrome_version();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Browser.chrome_version)
  return _s;
}
inline const std::string& ClientMetadata_Browser::_internal_chrome_version() const {
  return chrome_version_.Get();
}
inline void ClientMetadata_Browser::_internal_set_chrome_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  chrome_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Browser::_internal_mutable_chrome_version() {
  _has_bits_[0] |= 0x00000004u;
  return chrome_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Browser::release_chrome_version() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Browser.chrome_version)
  if (!_internal_has_chrome_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = chrome_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chrome_version_.IsDefault()) {
    chrome_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Browser::set_allocated_chrome_version(std::string* chrome_version) {
  if (chrome_version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  chrome_version_.SetAllocated(chrome_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chrome_version_.IsDefault()) {
    chrome_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Browser.chrome_version)
}

// optional string machine_user = 4;
inline bool ClientMetadata_Browser::_internal_has_machine_user() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientMetadata_Browser::has_machine_user() const {
  return _internal_has_machine_user();
}
inline void ClientMetadata_Browser::clear_machine_user() {
  machine_user_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientMetadata_Browser::machine_user() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Browser.machine_user)
  return _internal_machine_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Browser::set_machine_user(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 machine_user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Browser.machine_user)
}
inline std::string* ClientMetadata_Browser::mutable_machine_user() {
  std::string* _s = _internal_mutable_machine_user();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Browser.machine_user)
  return _s;
}
inline const std::string& ClientMetadata_Browser::_internal_machine_user() const {
  return machine_user_.Get();
}
inline void ClientMetadata_Browser::_internal_set_machine_user(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  machine_user_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Browser::_internal_mutable_machine_user() {
  _has_bits_[0] |= 0x00000008u;
  return machine_user_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Browser::release_machine_user() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Browser.machine_user)
  if (!_internal_has_machine_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = machine_user_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_user_.IsDefault()) {
    machine_user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Browser::set_allocated_machine_user(std::string* machine_user) {
  if (machine_user != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  machine_user_.SetAllocated(machine_user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_user_.IsDefault()) {
    machine_user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Browser.machine_user)
}

// -------------------------------------------------------------------

// ClientMetadata_Device

// optional string dm_token = 1;
inline bool ClientMetadata_Device::_internal_has_dm_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientMetadata_Device::has_dm_token() const {
  return _internal_has_dm_token();
}
inline void ClientMetadata_Device::clear_dm_token() {
  dm_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientMetadata_Device::dm_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Device.dm_token)
  return _internal_dm_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Device::set_dm_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 dm_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Device.dm_token)
}
inline std::string* ClientMetadata_Device::mutable_dm_token() {
  std::string* _s = _internal_mutable_dm_token();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Device.dm_token)
  return _s;
}
inline const std::string& ClientMetadata_Device::_internal_dm_token() const {
  return dm_token_.Get();
}
inline void ClientMetadata_Device::_internal_set_dm_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dm_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::_internal_mutable_dm_token() {
  _has_bits_[0] |= 0x00000001u;
  return dm_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::release_dm_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Device.dm_token)
  if (!_internal_has_dm_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = dm_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_token_.IsDefault()) {
    dm_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Device::set_allocated_dm_token(std::string* dm_token) {
  if (dm_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dm_token_.SetAllocated(dm_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_token_.IsDefault()) {
    dm_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Device.dm_token)
}

// optional string client_id = 2;
inline bool ClientMetadata_Device::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientMetadata_Device::has_client_id() const {
  return _internal_has_client_id();
}
inline void ClientMetadata_Device::clear_client_id() {
  client_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientMetadata_Device::client_id() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Device.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Device::set_client_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Device.client_id)
}
inline std::string* ClientMetadata_Device::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Device.client_id)
  return _s;
}
inline const std::string& ClientMetadata_Device::_internal_client_id() const {
  return client_id_.Get();
}
inline void ClientMetadata_Device::_internal_set_client_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::_internal_mutable_client_id() {
  _has_bits_[0] |= 0x00000002u;
  return client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::release_client_id() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Device.client_id)
  if (!_internal_has_client_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = client_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault()) {
    client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Device::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault()) {
    client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Device.client_id)
}

// optional string os_version = 3;
inline bool ClientMetadata_Device::_internal_has_os_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientMetadata_Device::has_os_version() const {
  return _internal_has_os_version();
}
inline void ClientMetadata_Device::clear_os_version() {
  os_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientMetadata_Device::os_version() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Device.os_version)
  return _internal_os_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Device::set_os_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 os_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Device.os_version)
}
inline std::string* ClientMetadata_Device::mutable_os_version() {
  std::string* _s = _internal_mutable_os_version();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Device.os_version)
  return _s;
}
inline const std::string& ClientMetadata_Device::_internal_os_version() const {
  return os_version_.Get();
}
inline void ClientMetadata_Device::_internal_set_os_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  os_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::_internal_mutable_os_version() {
  _has_bits_[0] |= 0x00000004u;
  return os_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::release_os_version() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Device.os_version)
  if (!_internal_has_os_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = os_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_version_.IsDefault()) {
    os_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Device::set_allocated_os_version(std::string* os_version) {
  if (os_version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  os_version_.SetAllocated(os_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_version_.IsDefault()) {
    os_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Device.os_version)
}

// optional string os_platform = 4;
inline bool ClientMetadata_Device::_internal_has_os_platform() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientMetadata_Device::has_os_platform() const {
  return _internal_has_os_platform();
}
inline void ClientMetadata_Device::clear_os_platform() {
  os_platform_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientMetadata_Device::os_platform() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Device.os_platform)
  return _internal_os_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Device::set_os_platform(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 os_platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Device.os_platform)
}
inline std::string* ClientMetadata_Device::mutable_os_platform() {
  std::string* _s = _internal_mutable_os_platform();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Device.os_platform)
  return _s;
}
inline const std::string& ClientMetadata_Device::_internal_os_platform() const {
  return os_platform_.Get();
}
inline void ClientMetadata_Device::_internal_set_os_platform(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  os_platform_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::_internal_mutable_os_platform() {
  _has_bits_[0] |= 0x00000008u;
  return os_platform_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::release_os_platform() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Device.os_platform)
  if (!_internal_has_os_platform()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = os_platform_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_platform_.IsDefault()) {
    os_platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Device::set_allocated_os_platform(std::string* os_platform) {
  if (os_platform != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  os_platform_.SetAllocated(os_platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_platform_.IsDefault()) {
    os_platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Device.os_platform)
}

// optional string name = 5;
inline bool ClientMetadata_Device::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientMetadata_Device::has_name() const {
  return _internal_has_name();
}
inline void ClientMetadata_Device::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientMetadata_Device::name() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Device.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Device::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Device.name)
}
inline std::string* ClientMetadata_Device::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Device.name)
  return _s;
}
inline const std::string& ClientMetadata_Device::_internal_name() const {
  return name_.Get();
}
inline void ClientMetadata_Device::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000010u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Device::release_name() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Device.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Device.name)
}

// -------------------------------------------------------------------

// ClientMetadata_Profile

// optional string dm_token = 1;
inline bool ClientMetadata_Profile::_internal_has_dm_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientMetadata_Profile::has_dm_token() const {
  return _internal_has_dm_token();
}
inline void ClientMetadata_Profile::clear_dm_token() {
  dm_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientMetadata_Profile::dm_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Profile.dm_token)
  return _internal_dm_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Profile::set_dm_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 dm_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Profile.dm_token)
}
inline std::string* ClientMetadata_Profile::mutable_dm_token() {
  std::string* _s = _internal_mutable_dm_token();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Profile.dm_token)
  return _s;
}
inline const std::string& ClientMetadata_Profile::_internal_dm_token() const {
  return dm_token_.Get();
}
inline void ClientMetadata_Profile::_internal_set_dm_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dm_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::_internal_mutable_dm_token() {
  _has_bits_[0] |= 0x00000001u;
  return dm_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::release_dm_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Profile.dm_token)
  if (!_internal_has_dm_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = dm_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_token_.IsDefault()) {
    dm_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Profile::set_allocated_dm_token(std::string* dm_token) {
  if (dm_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dm_token_.SetAllocated(dm_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_token_.IsDefault()) {
    dm_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Profile.dm_token)
}

// optional string gaia_email = 2;
inline bool ClientMetadata_Profile::_internal_has_gaia_email() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientMetadata_Profile::has_gaia_email() const {
  return _internal_has_gaia_email();
}
inline void ClientMetadata_Profile::clear_gaia_email() {
  gaia_email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientMetadata_Profile::gaia_email() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Profile.gaia_email)
  return _internal_gaia_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Profile::set_gaia_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 gaia_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Profile.gaia_email)
}
inline std::string* ClientMetadata_Profile::mutable_gaia_email() {
  std::string* _s = _internal_mutable_gaia_email();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Profile.gaia_email)
  return _s;
}
inline const std::string& ClientMetadata_Profile::_internal_gaia_email() const {
  return gaia_email_.Get();
}
inline void ClientMetadata_Profile::_internal_set_gaia_email(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gaia_email_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::_internal_mutable_gaia_email() {
  _has_bits_[0] |= 0x00000002u;
  return gaia_email_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::release_gaia_email() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Profile.gaia_email)
  if (!_internal_has_gaia_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = gaia_email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gaia_email_.IsDefault()) {
    gaia_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Profile::set_allocated_gaia_email(std::string* gaia_email) {
  if (gaia_email != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gaia_email_.SetAllocated(gaia_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gaia_email_.IsDefault()) {
    gaia_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Profile.gaia_email)
}

// optional string profile_path = 3;
inline bool ClientMetadata_Profile::_internal_has_profile_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientMetadata_Profile::has_profile_path() const {
  return _internal_has_profile_path();
}
inline void ClientMetadata_Profile::clear_profile_path() {
  profile_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientMetadata_Profile::profile_path() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Profile.profile_path)
  return _internal_profile_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Profile::set_profile_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 profile_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Profile.profile_path)
}
inline std::string* ClientMetadata_Profile::mutable_profile_path() {
  std::string* _s = _internal_mutable_profile_path();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Profile.profile_path)
  return _s;
}
inline const std::string& ClientMetadata_Profile::_internal_profile_path() const {
  return profile_path_.Get();
}
inline void ClientMetadata_Profile::_internal_set_profile_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  profile_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::_internal_mutable_profile_path() {
  _has_bits_[0] |= 0x00000004u;
  return profile_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::release_profile_path() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Profile.profile_path)
  if (!_internal_has_profile_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = profile_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_path_.IsDefault()) {
    profile_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Profile::set_allocated_profile_path(std::string* profile_path) {
  if (profile_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  profile_path_.SetAllocated(profile_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_path_.IsDefault()) {
    profile_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Profile.profile_path)
}

// optional string profile_name = 4;
inline bool ClientMetadata_Profile::_internal_has_profile_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientMetadata_Profile::has_profile_name() const {
  return _internal_has_profile_name();
}
inline void ClientMetadata_Profile::clear_profile_name() {
  profile_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientMetadata_Profile::profile_name() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Profile.profile_name)
  return _internal_profile_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Profile::set_profile_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 profile_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Profile.profile_name)
}
inline std::string* ClientMetadata_Profile::mutable_profile_name() {
  std::string* _s = _internal_mutable_profile_name();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Profile.profile_name)
  return _s;
}
inline const std::string& ClientMetadata_Profile::_internal_profile_name() const {
  return profile_name_.Get();
}
inline void ClientMetadata_Profile::_internal_set_profile_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  profile_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::_internal_mutable_profile_name() {
  _has_bits_[0] |= 0x00000008u;
  return profile_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::release_profile_name() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Profile.profile_name)
  if (!_internal_has_profile_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = profile_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault()) {
    profile_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Profile::set_allocated_profile_name(std::string* profile_name) {
  if (profile_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  profile_name_.SetAllocated(profile_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault()) {
    profile_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Profile.profile_name)
}

// optional string client_id = 5;
inline bool ClientMetadata_Profile::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientMetadata_Profile::has_client_id() const {
  return _internal_has_client_id();
}
inline void ClientMetadata_Profile::clear_client_id() {
  client_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientMetadata_Profile::client_id() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.Profile.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientMetadata_Profile::set_client_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ClientMetadata.Profile.client_id)
}
inline std::string* ClientMetadata_Profile::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.Profile.client_id)
  return _s;
}
inline const std::string& ClientMetadata_Profile::_internal_client_id() const {
  return client_id_.Get();
}
inline void ClientMetadata_Profile::_internal_set_client_id(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::_internal_mutable_client_id() {
  _has_bits_[0] |= 0x00000010u;
  return client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientMetadata_Profile::release_client_id() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.Profile.client_id)
  if (!_internal_has_client_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = client_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault()) {
    client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientMetadata_Profile::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault()) {
    client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.Profile.client_id)
}

// -------------------------------------------------------------------

// ClientMetadata

// optional .enterprise_connectors.ClientMetadata.Browser browser = 1;
inline bool ClientMetadata::_internal_has_browser() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || browser_ != nullptr);
  return value;
}
inline bool ClientMetadata::has_browser() const {
  return _internal_has_browser();
}
inline void ClientMetadata::clear_browser() {
  if (browser_ != nullptr) browser_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::enterprise_connectors::ClientMetadata_Browser& ClientMetadata::_internal_browser() const {
  const ::enterprise_connectors::ClientMetadata_Browser* p = browser_;
  return p != nullptr ? *p : reinterpret_cast<const ::enterprise_connectors::ClientMetadata_Browser&>(
      ::enterprise_connectors::_ClientMetadata_Browser_default_instance_);
}
inline const ::enterprise_connectors::ClientMetadata_Browser& ClientMetadata::browser() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.browser)
  return _internal_browser();
}
inline void ClientMetadata::unsafe_arena_set_allocated_browser(
    ::enterprise_connectors::ClientMetadata_Browser* browser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(browser_);
  }
  browser_ = browser;
  if (browser) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.ClientMetadata.browser)
}
inline ::enterprise_connectors::ClientMetadata_Browser* ClientMetadata::release_browser() {
  _has_bits_[0] &= ~0x00000001u;
  ::enterprise_connectors::ClientMetadata_Browser* temp = browser_;
  browser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::enterprise_connectors::ClientMetadata_Browser* ClientMetadata::unsafe_arena_release_browser() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.browser)
  _has_bits_[0] &= ~0x00000001u;
  ::enterprise_connectors::ClientMetadata_Browser* temp = browser_;
  browser_ = nullptr;
  return temp;
}
inline ::enterprise_connectors::ClientMetadata_Browser* ClientMetadata::_internal_mutable_browser() {
  _has_bits_[0] |= 0x00000001u;
  if (browser_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_connectors::ClientMetadata_Browser>(GetArenaForAllocation());
    browser_ = p;
  }
  return browser_;
}
inline ::enterprise_connectors::ClientMetadata_Browser* ClientMetadata::mutable_browser() {
  ::enterprise_connectors::ClientMetadata_Browser* _msg = _internal_mutable_browser();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.browser)
  return _msg;
}
inline void ClientMetadata::set_allocated_browser(::enterprise_connectors::ClientMetadata_Browser* browser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete browser_;
  }
  if (browser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(browser);
    if (message_arena != submessage_arena) {
      browser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, browser, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  browser_ = browser;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.browser)
}

// optional .enterprise_connectors.ClientMetadata.Device device = 2;
inline bool ClientMetadata::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || device_ != nullptr);
  return value;
}
inline bool ClientMetadata::has_device() const {
  return _internal_has_device();
}
inline void ClientMetadata::clear_device() {
  if (device_ != nullptr) device_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::enterprise_connectors::ClientMetadata_Device& ClientMetadata::_internal_device() const {
  const ::enterprise_connectors::ClientMetadata_Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::enterprise_connectors::ClientMetadata_Device&>(
      ::enterprise_connectors::_ClientMetadata_Device_default_instance_);
}
inline const ::enterprise_connectors::ClientMetadata_Device& ClientMetadata::device() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.device)
  return _internal_device();
}
inline void ClientMetadata::unsafe_arena_set_allocated_device(
    ::enterprise_connectors::ClientMetadata_Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.ClientMetadata.device)
}
inline ::enterprise_connectors::ClientMetadata_Device* ClientMetadata::release_device() {
  _has_bits_[0] &= ~0x00000002u;
  ::enterprise_connectors::ClientMetadata_Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::enterprise_connectors::ClientMetadata_Device* ClientMetadata::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.device)
  _has_bits_[0] &= ~0x00000002u;
  ::enterprise_connectors::ClientMetadata_Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::enterprise_connectors::ClientMetadata_Device* ClientMetadata::_internal_mutable_device() {
  _has_bits_[0] |= 0x00000002u;
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_connectors::ClientMetadata_Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::enterprise_connectors::ClientMetadata_Device* ClientMetadata::mutable_device() {
  ::enterprise_connectors::ClientMetadata_Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.device)
  return _msg;
}
inline void ClientMetadata::set_allocated_device(::enterprise_connectors::ClientMetadata_Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.device)
}

// optional .enterprise_connectors.ClientMetadata.Profile profile = 3;
inline bool ClientMetadata::_internal_has_profile() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || profile_ != nullptr);
  return value;
}
inline bool ClientMetadata::has_profile() const {
  return _internal_has_profile();
}
inline void ClientMetadata::clear_profile() {
  if (profile_ != nullptr) profile_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::enterprise_connectors::ClientMetadata_Profile& ClientMetadata::_internal_profile() const {
  const ::enterprise_connectors::ClientMetadata_Profile* p = profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::enterprise_connectors::ClientMetadata_Profile&>(
      ::enterprise_connectors::_ClientMetadata_Profile_default_instance_);
}
inline const ::enterprise_connectors::ClientMetadata_Profile& ClientMetadata::profile() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ClientMetadata.profile)
  return _internal_profile();
}
inline void ClientMetadata::unsafe_arena_set_allocated_profile(
    ::enterprise_connectors::ClientMetadata_Profile* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  profile_ = profile;
  if (profile) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.ClientMetadata.profile)
}
inline ::enterprise_connectors::ClientMetadata_Profile* ClientMetadata::release_profile() {
  _has_bits_[0] &= ~0x00000004u;
  ::enterprise_connectors::ClientMetadata_Profile* temp = profile_;
  profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::enterprise_connectors::ClientMetadata_Profile* ClientMetadata::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ClientMetadata.profile)
  _has_bits_[0] &= ~0x00000004u;
  ::enterprise_connectors::ClientMetadata_Profile* temp = profile_;
  profile_ = nullptr;
  return temp;
}
inline ::enterprise_connectors::ClientMetadata_Profile* ClientMetadata::_internal_mutable_profile() {
  _has_bits_[0] |= 0x00000004u;
  if (profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_connectors::ClientMetadata_Profile>(GetArenaForAllocation());
    profile_ = p;
  }
  return profile_;
}
inline ::enterprise_connectors::ClientMetadata_Profile* ClientMetadata::mutable_profile() {
  ::enterprise_connectors::ClientMetadata_Profile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ClientMetadata.profile)
  return _msg;
}
inline void ClientMetadata::set_allocated_profile(::enterprise_connectors::ClientMetadata_Profile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_;
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(profile);
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ClientMetadata.profile)
}

// -------------------------------------------------------------------

// ContentAnalysisRequest

// optional string device_token = 1;
inline bool ContentAnalysisRequest::_internal_has_device_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentAnalysisRequest::has_device_token() const {
  return _internal_has_device_token();
}
inline void ContentAnalysisRequest::clear_device_token() {
  device_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisRequest::device_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.device_token)
  return _internal_device_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisRequest::set_device_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 device_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.device_token)
}
inline std::string* ContentAnalysisRequest::mutable_device_token() {
  std::string* _s = _internal_mutable_device_token();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.device_token)
  return _s;
}
inline const std::string& ContentAnalysisRequest::_internal_device_token() const {
  return device_token_.Get();
}
inline void ContentAnalysisRequest::_internal_set_device_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::_internal_mutable_device_token() {
  _has_bits_[0] |= 0x00000001u;
  return device_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::release_device_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.device_token)
  if (!_internal_has_device_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = device_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_token_.IsDefault()) {
    device_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisRequest::set_allocated_device_token(std::string* device_token) {
  if (device_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_token_.SetAllocated(device_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_token_.IsDefault()) {
    device_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.device_token)
}

// optional string fcm_notification_token = 2;
inline bool ContentAnalysisRequest::_internal_has_fcm_notification_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentAnalysisRequest::has_fcm_notification_token() const {
  return _internal_has_fcm_notification_token();
}
inline void ContentAnalysisRequest::clear_fcm_notification_token() {
  fcm_notification_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentAnalysisRequest::fcm_notification_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
  return _internal_fcm_notification_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisRequest::set_fcm_notification_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 fcm_notification_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
}
inline std::string* ContentAnalysisRequest::mutable_fcm_notification_token() {
  std::string* _s = _internal_mutable_fcm_notification_token();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
  return _s;
}
inline const std::string& ContentAnalysisRequest::_internal_fcm_notification_token() const {
  return fcm_notification_token_.Get();
}
inline void ContentAnalysisRequest::_internal_set_fcm_notification_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fcm_notification_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::_internal_mutable_fcm_notification_token() {
  _has_bits_[0] |= 0x00000002u;
  return fcm_notification_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::release_fcm_notification_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
  if (!_internal_has_fcm_notification_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = fcm_notification_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fcm_notification_token_.IsDefault()) {
    fcm_notification_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisRequest::set_allocated_fcm_notification_token(std::string* fcm_notification_token) {
  if (fcm_notification_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fcm_notification_token_.SetAllocated(fcm_notification_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fcm_notification_token_.IsDefault()) {
    fcm_notification_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
}

// optional string request_token = 5;
inline bool ContentAnalysisRequest::_internal_has_request_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentAnalysisRequest::has_request_token() const {
  return _internal_has_request_token();
}
inline void ContentAnalysisRequest::clear_request_token() {
  request_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentAnalysisRequest::request_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.request_token)
  return _internal_request_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisRequest::set_request_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 request_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.request_token)
}
inline std::string* ContentAnalysisRequest::mutable_request_token() {
  std::string* _s = _internal_mutable_request_token();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.request_token)
  return _s;
}
inline const std::string& ContentAnalysisRequest::_internal_request_token() const {
  return request_token_.Get();
}
inline void ContentAnalysisRequest::_internal_set_request_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  request_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::_internal_mutable_request_token() {
  _has_bits_[0] |= 0x00000004u;
  return request_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::release_request_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.request_token)
  if (!_internal_has_request_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = request_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_token_.IsDefault()) {
    request_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisRequest::set_allocated_request_token(std::string* request_token) {
  if (request_token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  request_token_.SetAllocated(request_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_token_.IsDefault()) {
    request_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.request_token)
}

// optional .enterprise_connectors.AnalysisConnector analysis_connector = 9;
inline bool ContentAnalysisRequest::_internal_has_analysis_connector() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ContentAnalysisRequest::has_analysis_connector() const {
  return _internal_has_analysis_connector();
}
inline void ContentAnalysisRequest::clear_analysis_connector() {
  analysis_connector_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::enterprise_connectors::AnalysisConnector ContentAnalysisRequest::_internal_analysis_connector() const {
  return static_cast< ::enterprise_connectors::AnalysisConnector >(analysis_connector_);
}
inline ::enterprise_connectors::AnalysisConnector ContentAnalysisRequest::analysis_connector() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.analysis_connector)
  return _internal_analysis_connector();
}
inline void ContentAnalysisRequest::_internal_set_analysis_connector(::enterprise_connectors::AnalysisConnector value) {
  assert(::enterprise_connectors::AnalysisConnector_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  analysis_connector_ = value;
}
inline void ContentAnalysisRequest::set_analysis_connector(::enterprise_connectors::AnalysisConnector value) {
  _internal_set_analysis_connector(value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.analysis_connector)
}

// optional .enterprise_connectors.ContentMetaData request_data = 10;
inline bool ContentAnalysisRequest::_internal_has_request_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || request_data_ != nullptr);
  return value;
}
inline bool ContentAnalysisRequest::has_request_data() const {
  return _internal_has_request_data();
}
inline void ContentAnalysisRequest::clear_request_data() {
  if (request_data_ != nullptr) request_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::enterprise_connectors::ContentMetaData& ContentAnalysisRequest::_internal_request_data() const {
  const ::enterprise_connectors::ContentMetaData* p = request_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::enterprise_connectors::ContentMetaData&>(
      ::enterprise_connectors::_ContentMetaData_default_instance_);
}
inline const ::enterprise_connectors::ContentMetaData& ContentAnalysisRequest::request_data() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.request_data)
  return _internal_request_data();
}
inline void ContentAnalysisRequest::unsafe_arena_set_allocated_request_data(
    ::enterprise_connectors::ContentMetaData* request_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_data_);
  }
  request_data_ = request_data;
  if (request_data) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.ContentAnalysisRequest.request_data)
}
inline ::enterprise_connectors::ContentMetaData* ContentAnalysisRequest::release_request_data() {
  _has_bits_[0] &= ~0x00000008u;
  ::enterprise_connectors::ContentMetaData* temp = request_data_;
  request_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::enterprise_connectors::ContentMetaData* ContentAnalysisRequest::unsafe_arena_release_request_data() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.request_data)
  _has_bits_[0] &= ~0x00000008u;
  ::enterprise_connectors::ContentMetaData* temp = request_data_;
  request_data_ = nullptr;
  return temp;
}
inline ::enterprise_connectors::ContentMetaData* ContentAnalysisRequest::_internal_mutable_request_data() {
  _has_bits_[0] |= 0x00000008u;
  if (request_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_connectors::ContentMetaData>(GetArenaForAllocation());
    request_data_ = p;
  }
  return request_data_;
}
inline ::enterprise_connectors::ContentMetaData* ContentAnalysisRequest::mutable_request_data() {
  ::enterprise_connectors::ContentMetaData* _msg = _internal_mutable_request_data();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.request_data)
  return _msg;
}
inline void ContentAnalysisRequest::set_allocated_request_data(::enterprise_connectors::ContentMetaData* request_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete request_data_;
  }
  if (request_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request_data);
    if (message_arena != submessage_arena) {
      request_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  request_data_ = request_data;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.request_data)
}

// repeated string tags = 11;
inline int ContentAnalysisRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int ContentAnalysisRequest::tags_size() const {
  return _internal_tags_size();
}
inline void ContentAnalysisRequest::clear_tags() {
  tags_.Clear();
}
inline std::string* ContentAnalysisRequest::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:enterprise_connectors.ContentAnalysisRequest.tags)
  return _s;
}
inline const std::string& ContentAnalysisRequest::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& ContentAnalysisRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.tags)
  return _internal_tags(index);
}
inline std::string* ContentAnalysisRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.tags)
  return tags_.Mutable(index);
}
inline void ContentAnalysisRequest::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline std::string* ContentAnalysisRequest::_internal_add_tags() {
  return tags_.Add();
}
inline void ContentAnalysisRequest::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContentAnalysisRequest::tags() const {
  // @@protoc_insertion_point(field_list:enterprise_connectors.ContentAnalysisRequest.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContentAnalysisRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_connectors.ContentAnalysisRequest.tags)
  return &tags_;
}

// optional .enterprise_connectors.ClientMetadata client_metadata = 12;
inline bool ContentAnalysisRequest::_internal_has_client_metadata() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || client_metadata_ != nullptr);
  return value;
}
inline bool ContentAnalysisRequest::has_client_metadata() const {
  return _internal_has_client_metadata();
}
inline void ContentAnalysisRequest::clear_client_metadata() {
  if (client_metadata_ != nullptr) client_metadata_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::enterprise_connectors::ClientMetadata& ContentAnalysisRequest::_internal_client_metadata() const {
  const ::enterprise_connectors::ClientMetadata* p = client_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::enterprise_connectors::ClientMetadata&>(
      ::enterprise_connectors::_ClientMetadata_default_instance_);
}
inline const ::enterprise_connectors::ClientMetadata& ContentAnalysisRequest::client_metadata() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.client_metadata)
  return _internal_client_metadata();
}
inline void ContentAnalysisRequest::unsafe_arena_set_allocated_client_metadata(
    ::enterprise_connectors::ClientMetadata* client_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_metadata_);
  }
  client_metadata_ = client_metadata;
  if (client_metadata) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.ContentAnalysisRequest.client_metadata)
}
inline ::enterprise_connectors::ClientMetadata* ContentAnalysisRequest::release_client_metadata() {
  _has_bits_[0] &= ~0x00000010u;
  ::enterprise_connectors::ClientMetadata* temp = client_metadata_;
  client_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::enterprise_connectors::ClientMetadata* ContentAnalysisRequest::unsafe_arena_release_client_metadata() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.client_metadata)
  _has_bits_[0] &= ~0x00000010u;
  ::enterprise_connectors::ClientMetadata* temp = client_metadata_;
  client_metadata_ = nullptr;
  return temp;
}
inline ::enterprise_connectors::ClientMetadata* ContentAnalysisRequest::_internal_mutable_client_metadata() {
  _has_bits_[0] |= 0x00000010u;
  if (client_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_connectors::ClientMetadata>(GetArenaForAllocation());
    client_metadata_ = p;
  }
  return client_metadata_;
}
inline ::enterprise_connectors::ClientMetadata* ContentAnalysisRequest::mutable_client_metadata() {
  ::enterprise_connectors::ClientMetadata* _msg = _internal_mutable_client_metadata();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.client_metadata)
  return _msg;
}
inline void ContentAnalysisRequest::set_allocated_client_metadata(::enterprise_connectors::ClientMetadata* client_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete client_metadata_;
  }
  if (client_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_metadata);
    if (message_arena != submessage_arena) {
      client_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  client_metadata_ = client_metadata;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.client_metadata)
}

// string text_content = 13;
inline bool ContentAnalysisRequest::_internal_has_text_content() const {
  return content_data_case() == kTextContent;
}
inline bool ContentAnalysisRequest::has_text_content() const {
  return _internal_has_text_content();
}
inline void ContentAnalysisRequest::set_has_text_content() {
  _oneof_case_[0] = kTextContent;
}
inline void ContentAnalysisRequest::clear_text_content() {
  if (_internal_has_text_content()) {
    content_data_.text_content_.Destroy();
    clear_has_content_data();
  }
}
inline const std::string& ContentAnalysisRequest::text_content() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.text_content)
  return _internal_text_content();
}
template <typename ArgT0, typename... ArgT>
inline void ContentAnalysisRequest::set_text_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_text_content()) {
    clear_content_data();
    set_has_text_content();
    content_data_.text_content_.InitDefault();
  }
  content_data_.text_content_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.text_content)
}
inline std::string* ContentAnalysisRequest::mutable_text_content() {
  std::string* _s = _internal_mutable_text_content();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.text_content)
  return _s;
}
inline const std::string& ContentAnalysisRequest::_internal_text_content() const {
  if (_internal_has_text_content()) {
    return content_data_.text_content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ContentAnalysisRequest::_internal_set_text_content(const std::string& value) {
  if (!_internal_has_text_content()) {
    clear_content_data();
    set_has_text_content();
    content_data_.text_content_.InitDefault();
  }
  content_data_.text_content_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::_internal_mutable_text_content() {
  if (!_internal_has_text_content()) {
    clear_content_data();
    set_has_text_content();
    content_data_.text_content_.InitDefault();
  }
  return content_data_.text_content_.Mutable(      GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::release_text_content() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.text_content)
  if (_internal_has_text_content()) {
    clear_has_content_data();
    return content_data_.text_content_.Release();
  } else {
    return nullptr;
  }
}
inline void ContentAnalysisRequest::set_allocated_text_content(std::string* text_content) {
  if (has_content_data()) {
    clear_content_data();
  }
  if (text_content != nullptr) {
    set_has_text_content();
    content_data_.text_content_.InitAllocated(text_content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.text_content)
}

// string file_path = 14;
inline bool ContentAnalysisRequest::_internal_has_file_path() const {
  return content_data_case() == kFilePath;
}
inline bool ContentAnalysisRequest::has_file_path() const {
  return _internal_has_file_path();
}
inline void ContentAnalysisRequest::set_has_file_path() {
  _oneof_case_[0] = kFilePath;
}
inline void ContentAnalysisRequest::clear_file_path() {
  if (_internal_has_file_path()) {
    content_data_.file_path_.Destroy();
    clear_has_content_data();
  }
}
inline const std::string& ContentAnalysisRequest::file_path() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline void ContentAnalysisRequest::set_file_path(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_file_path()) {
    clear_content_data();
    set_has_file_path();
    content_data_.file_path_.InitDefault();
  }
  content_data_.file_path_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.file_path)
}
inline std::string* ContentAnalysisRequest::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.file_path)
  return _s;
}
inline const std::string& ContentAnalysisRequest::_internal_file_path() const {
  if (_internal_has_file_path()) {
    return content_data_.file_path_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ContentAnalysisRequest::_internal_set_file_path(const std::string& value) {
  if (!_internal_has_file_path()) {
    clear_content_data();
    set_has_file_path();
    content_data_.file_path_.InitDefault();
  }
  content_data_.file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::_internal_mutable_file_path() {
  if (!_internal_has_file_path()) {
    clear_content_data();
    set_has_file_path();
    content_data_.file_path_.InitDefault();
  }
  return content_data_.file_path_.Mutable(      GetArenaForAllocation());
}
inline std::string* ContentAnalysisRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.file_path)
  if (_internal_has_file_path()) {
    clear_has_content_data();
    return content_data_.file_path_.Release();
  } else {
    return nullptr;
  }
}
inline void ContentAnalysisRequest::set_allocated_file_path(std::string* file_path) {
  if (has_content_data()) {
    clear_content_data();
  }
  if (file_path != nullptr) {
    set_has_file_path();
    content_data_.file_path_.InitAllocated(file_path, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.file_path)
}

// optional int64 expires_at = 15;
inline bool ContentAnalysisRequest::_internal_has_expires_at() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ContentAnalysisRequest::has_expires_at() const {
  return _internal_has_expires_at();
}
inline void ContentAnalysisRequest::clear_expires_at() {
  expires_at_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t ContentAnalysisRequest::_internal_expires_at() const {
  return expires_at_;
}
inline int64_t ContentAnalysisRequest::expires_at() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.expires_at)
  return _internal_expires_at();
}
inline void ContentAnalysisRequest::_internal_set_expires_at(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  expires_at_ = value;
}
inline void ContentAnalysisRequest::set_expires_at(int64_t value) {
  _internal_set_expires_at(value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.expires_at)
}

inline bool ContentAnalysisRequest::has_content_data() const {
  return content_data_case() != CONTENT_DATA_NOT_SET;
}
inline void ContentAnalysisRequest::clear_has_content_data() {
  _oneof_case_[0] = CONTENT_DATA_NOT_SET;
}
inline ContentAnalysisRequest::ContentDataCase ContentAnalysisRequest::content_data_case() const {
  return ContentAnalysisRequest::ContentDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ContentAnalysisResponse_Result_CustomMessage

// optional string learn_more_url = 1;
inline bool ContentAnalysisResponse_Result_CustomMessage::_internal_has_learn_more_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result_CustomMessage::has_learn_more_url() const {
  return _internal_has_learn_more_url();
}
inline void ContentAnalysisResponse_Result_CustomMessage::clear_learn_more_url() {
  learn_more_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisResponse_Result_CustomMessage::learn_more_url() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.learn_more_url)
  return _internal_learn_more_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse_Result_CustomMessage::set_learn_more_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 learn_more_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.learn_more_url)
}
inline std::string* ContentAnalysisResponse_Result_CustomMessage::mutable_learn_more_url() {
  std::string* _s = _internal_mutable_learn_more_url();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.learn_more_url)
  return _s;
}
inline const std::string& ContentAnalysisResponse_Result_CustomMessage::_internal_learn_more_url() const {
  return learn_more_url_.Get();
}
inline void ContentAnalysisResponse_Result_CustomMessage::_internal_set_learn_more_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  learn_more_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result_CustomMessage::_internal_mutable_learn_more_url() {
  _has_bits_[0] |= 0x00000001u;
  return learn_more_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result_CustomMessage::release_learn_more_url() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.learn_more_url)
  if (!_internal_has_learn_more_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = learn_more_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (learn_more_url_.IsDefault()) {
    learn_more_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse_Result_CustomMessage::set_allocated_learn_more_url(std::string* learn_more_url) {
  if (learn_more_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  learn_more_url_.SetAllocated(learn_more_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (learn_more_url_.IsDefault()) {
    learn_more_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.learn_more_url)
}

// optional string message = 2;
inline bool ContentAnalysisResponse_Result_CustomMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result_CustomMessage::has_message() const {
  return _internal_has_message();
}
inline void ContentAnalysisResponse_Result_CustomMessage::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentAnalysisResponse_Result_CustomMessage::message() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse_Result_CustomMessage::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.message)
}
inline std::string* ContentAnalysisResponse_Result_CustomMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.message)
  return _s;
}
inline const std::string& ContentAnalysisResponse_Result_CustomMessage::_internal_message() const {
  return message_.Get();
}
inline void ContentAnalysisResponse_Result_CustomMessage::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result_CustomMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result_CustomMessage::release_message() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse_Result_CustomMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage.message)
}

// -------------------------------------------------------------------

// ContentAnalysisResponse_Result_TriggeredRule

// optional .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.Action action = 1;
inline bool ContentAnalysisResponse_Result_TriggeredRule::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result_TriggeredRule::has_action() const {
  return _internal_has_action();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::_internal_action() const {
  return static_cast< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action >(action_);
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::action() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.action)
  return _internal_action();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::_internal_set_action(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action value) {
  assert(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_ = value;
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_action(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.action)
}

// optional string rule_name = 2;
inline bool ContentAnalysisResponse_Result_TriggeredRule::_internal_has_rule_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result_TriggeredRule::has_rule_name() const {
  return _internal_has_rule_name();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::clear_rule_name() {
  rule_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisResponse_Result_TriggeredRule::rule_name() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
  return _internal_rule_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse_Result_TriggeredRule::set_rule_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 rule_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::mutable_rule_name() {
  std::string* _s = _internal_mutable_rule_name();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
  return _s;
}
inline const std::string& ContentAnalysisResponse_Result_TriggeredRule::_internal_rule_name() const {
  return rule_name_.Get();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::_internal_set_rule_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rule_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::_internal_mutable_rule_name() {
  _has_bits_[0] |= 0x00000001u;
  return rule_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::release_rule_name() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
  if (!_internal_has_rule_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = rule_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rule_name_.IsDefault()) {
    rule_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_allocated_rule_name(std::string* rule_name) {
  if (rule_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rule_name_.SetAllocated(rule_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rule_name_.IsDefault()) {
    rule_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
}

// optional string rule_id = 3;
inline bool ContentAnalysisResponse_Result_TriggeredRule::_internal_has_rule_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result_TriggeredRule::has_rule_id() const {
  return _internal_has_rule_id();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::clear_rule_id() {
  rule_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentAnalysisResponse_Result_TriggeredRule::rule_id() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
  return _internal_rule_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse_Result_TriggeredRule::set_rule_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 rule_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::mutable_rule_id() {
  std::string* _s = _internal_mutable_rule_id();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
  return _s;
}
inline const std::string& ContentAnalysisResponse_Result_TriggeredRule::_internal_rule_id() const {
  return rule_id_.Get();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::_internal_set_rule_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rule_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::_internal_mutable_rule_id() {
  _has_bits_[0] |= 0x00000002u;
  return rule_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::release_rule_id() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
  if (!_internal_has_rule_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = rule_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rule_id_.IsDefault()) {
    rule_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_allocated_rule_id(std::string* rule_id) {
  if (rule_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rule_id_.SetAllocated(rule_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rule_id_.IsDefault()) {
    rule_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
}

// optional .enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage custom_message = 4;
inline bool ContentAnalysisResponse_Result_TriggeredRule::_internal_has_custom_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || custom_message_ != nullptr);
  return value;
}
inline bool ContentAnalysisResponse_Result_TriggeredRule::has_custom_message() const {
  return _internal_has_custom_message();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::clear_custom_message() {
  if (custom_message_ != nullptr) custom_message_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage& ContentAnalysisResponse_Result_TriggeredRule::_internal_custom_message() const {
  const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* p = custom_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage&>(
      ::enterprise_connectors::_ContentAnalysisResponse_Result_CustomMessage_default_instance_);
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage& ContentAnalysisResponse_Result_TriggeredRule::custom_message() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.custom_message)
  return _internal_custom_message();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::unsafe_arena_set_allocated_custom_message(
    ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_message_);
  }
  custom_message_ = custom_message;
  if (custom_message) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.custom_message)
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* ContentAnalysisResponse_Result_TriggeredRule::release_custom_message() {
  _has_bits_[0] &= ~0x00000004u;
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* temp = custom_message_;
  custom_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* ContentAnalysisResponse_Result_TriggeredRule::unsafe_arena_release_custom_message() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.custom_message)
  _has_bits_[0] &= ~0x00000004u;
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* temp = custom_message_;
  custom_message_ = nullptr;
  return temp;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* ContentAnalysisResponse_Result_TriggeredRule::_internal_mutable_custom_message() {
  _has_bits_[0] |= 0x00000004u;
  if (custom_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage>(GetArenaForAllocation());
    custom_message_ = p;
  }
  return custom_message_;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* ContentAnalysisResponse_Result_TriggeredRule::mutable_custom_message() {
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* _msg = _internal_mutable_custom_message();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.custom_message)
  return _msg;
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_allocated_custom_message(::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete custom_message_;
  }
  if (custom_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_message);
    if (message_arena != submessage_arena) {
      custom_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  custom_message_ = custom_message;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.custom_message)
}

// -------------------------------------------------------------------

// ContentAnalysisResponse_Result

// optional string tag = 1;
inline bool ContentAnalysisResponse_Result::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result::has_tag() const {
  return _internal_has_tag();
}
inline void ContentAnalysisResponse_Result::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisResponse_Result::tag() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse_Result::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.tag)
}
inline std::string* ContentAnalysisResponse_Result::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.tag)
  return _s;
}
inline const std::string& ContentAnalysisResponse_Result::_internal_tag() const {
  return tag_.Get();
}
inline void ContentAnalysisResponse_Result::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result::release_tag() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse_Result::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.tag)
}

// optional .enterprise_connectors.ContentAnalysisResponse.Result.Status status = 2;
inline bool ContentAnalysisResponse_Result::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ContentAnalysisResponse_Result::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result::_internal_status() const {
  return static_cast< ::enterprise_connectors::ContentAnalysisResponse_Result_Status >(status_);
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.status)
  return _internal_status();
}
inline void ContentAnalysisResponse_Result::_internal_set_status(::enterprise_connectors::ContentAnalysisResponse_Result_Status value) {
  assert(::enterprise_connectors::ContentAnalysisResponse_Result_Status_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void ContentAnalysisResponse_Result::set_status(::enterprise_connectors::ContentAnalysisResponse_Result_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.status)
}

// repeated .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule triggered_rules = 3;
inline int ContentAnalysisResponse_Result::_internal_triggered_rules_size() const {
  return triggered_rules_.size();
}
inline int ContentAnalysisResponse_Result::triggered_rules_size() const {
  return _internal_triggered_rules_size();
}
inline void ContentAnalysisResponse_Result::clear_triggered_rules() {
  triggered_rules_.Clear();
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* ContentAnalysisResponse_Result::mutable_triggered_rules(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return triggered_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >*
ContentAnalysisResponse_Result::mutable_triggered_rules() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return &triggered_rules_;
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule& ContentAnalysisResponse_Result::_internal_triggered_rules(int index) const {
  return triggered_rules_.Get(index);
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule& ContentAnalysisResponse_Result::triggered_rules(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return _internal_triggered_rules(index);
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* ContentAnalysisResponse_Result::_internal_add_triggered_rules() {
  return triggered_rules_.Add();
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* ContentAnalysisResponse_Result::add_triggered_rules() {
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* _add = _internal_add_triggered_rules();
  // @@protoc_insertion_point(field_add:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >&
ContentAnalysisResponse_Result::triggered_rules() const {
  // @@protoc_insertion_point(field_list:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return triggered_rules_;
}

// optional .enterprise_connectors.ContentAnalysisResponse.Result.CustomMessage custom_message = 7;
inline bool ContentAnalysisResponse_Result::_internal_has_custom_message() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || custom_message_ != nullptr);
  return value;
}
inline bool ContentAnalysisResponse_Result::has_custom_message() const {
  return _internal_has_custom_message();
}
inline void ContentAnalysisResponse_Result::clear_custom_message() {
  if (custom_message_ != nullptr) custom_message_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage& ContentAnalysisResponse_Result::_internal_custom_message() const {
  const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* p = custom_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage&>(
      ::enterprise_connectors::_ContentAnalysisResponse_Result_CustomMessage_default_instance_);
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage& ContentAnalysisResponse_Result::custom_message() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.custom_message)
  return _internal_custom_message();
}
inline void ContentAnalysisResponse_Result::unsafe_arena_set_allocated_custom_message(
    ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_message_);
  }
  custom_message_ = custom_message;
  if (custom_message) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.custom_message)
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* ContentAnalysisResponse_Result::release_custom_message() {
  _has_bits_[0] &= ~0x00000010u;
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* temp = custom_message_;
  custom_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* ContentAnalysisResponse_Result::unsafe_arena_release_custom_message() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.custom_message)
  _has_bits_[0] &= ~0x00000010u;
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* temp = custom_message_;
  custom_message_ = nullptr;
  return temp;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* ContentAnalysisResponse_Result::_internal_mutable_custom_message() {
  _has_bits_[0] |= 0x00000010u;
  if (custom_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage>(GetArenaForAllocation());
    custom_message_ = p;
  }
  return custom_message_;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* ContentAnalysisResponse_Result::mutable_custom_message() {
  ::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* _msg = _internal_mutable_custom_message();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.custom_message)
  return _msg;
}
inline void ContentAnalysisResponse_Result::set_allocated_custom_message(::enterprise_connectors::ContentAnalysisResponse_Result_CustomMessage* custom_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete custom_message_;
  }
  if (custom_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_message);
    if (message_arena != submessage_arena) {
      custom_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  custom_message_ = custom_message;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.custom_message)
}

// optional string malware_family = 4;
inline bool ContentAnalysisResponse_Result::_internal_has_malware_family() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result::has_malware_family() const {
  return _internal_has_malware_family();
}
inline void ContentAnalysisResponse_Result::clear_malware_family() {
  malware_family_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentAnalysisResponse_Result::malware_family() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.malware_family)
  return _internal_malware_family();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse_Result::set_malware_family(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 malware_family_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.malware_family)
}
inline std::string* ContentAnalysisResponse_Result::mutable_malware_family() {
  std::string* _s = _internal_mutable_malware_family();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.malware_family)
  return _s;
}
inline const std::string& ContentAnalysisResponse_Result::_internal_malware_family() const {
  return malware_family_.Get();
}
inline void ContentAnalysisResponse_Result::_internal_set_malware_family(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  malware_family_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result::_internal_mutable_malware_family() {
  _has_bits_[0] |= 0x00000002u;
  return malware_family_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result::release_malware_family() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.malware_family)
  if (!_internal_has_malware_family()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = malware_family_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (malware_family_.IsDefault()) {
    malware_family_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse_Result::set_allocated_malware_family(std::string* malware_family) {
  if (malware_family != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  malware_family_.SetAllocated(malware_family, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (malware_family_.IsDefault()) {
    malware_family_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.malware_family)
}

// optional string malware_category = 5;
inline bool ContentAnalysisResponse_Result::_internal_has_malware_category() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result::has_malware_category() const {
  return _internal_has_malware_category();
}
inline void ContentAnalysisResponse_Result::clear_malware_category() {
  malware_category_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentAnalysisResponse_Result::malware_category() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.malware_category)
  return _internal_malware_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse_Result::set_malware_category(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 malware_category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.malware_category)
}
inline std::string* ContentAnalysisResponse_Result::mutable_malware_category() {
  std::string* _s = _internal_mutable_malware_category();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.malware_category)
  return _s;
}
inline const std::string& ContentAnalysisResponse_Result::_internal_malware_category() const {
  return malware_category_.Get();
}
inline void ContentAnalysisResponse_Result::_internal_set_malware_category(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  malware_category_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result::_internal_mutable_malware_category() {
  _has_bits_[0] |= 0x00000004u;
  return malware_category_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result::release_malware_category() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.malware_category)
  if (!_internal_has_malware_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = malware_category_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (malware_category_.IsDefault()) {
    malware_category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse_Result::set_allocated_malware_category(std::string* malware_category) {
  if (malware_category != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  malware_category_.SetAllocated(malware_category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (malware_category_.IsDefault()) {
    malware_category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.malware_category)
}

// optional string evidence_locker_filepath = 6;
inline bool ContentAnalysisResponse_Result::_internal_has_evidence_locker_filepath() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentAnalysisResponse_Result::has_evidence_locker_filepath() const {
  return _internal_has_evidence_locker_filepath();
}
inline void ContentAnalysisResponse_Result::clear_evidence_locker_filepath() {
  evidence_locker_filepath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ContentAnalysisResponse_Result::evidence_locker_filepath() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.evidence_locker_filepath)
  return _internal_evidence_locker_filepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse_Result::set_evidence_locker_filepath(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 evidence_locker_filepath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.evidence_locker_filepath)
}
inline std::string* ContentAnalysisResponse_Result::mutable_evidence_locker_filepath() {
  std::string* _s = _internal_mutable_evidence_locker_filepath();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.evidence_locker_filepath)
  return _s;
}
inline const std::string& ContentAnalysisResponse_Result::_internal_evidence_locker_filepath() const {
  return evidence_locker_filepath_.Get();
}
inline void ContentAnalysisResponse_Result::_internal_set_evidence_locker_filepath(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  evidence_locker_filepath_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result::_internal_mutable_evidence_locker_filepath() {
  _has_bits_[0] |= 0x00000008u;
  return evidence_locker_filepath_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse_Result::release_evidence_locker_filepath() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.evidence_locker_filepath)
  if (!_internal_has_evidence_locker_filepath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = evidence_locker_filepath_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (evidence_locker_filepath_.IsDefault()) {
    evidence_locker_filepath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse_Result::set_allocated_evidence_locker_filepath(std::string* evidence_locker_filepath) {
  if (evidence_locker_filepath != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  evidence_locker_filepath_.SetAllocated(evidence_locker_filepath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (evidence_locker_filepath_.IsDefault()) {
    evidence_locker_filepath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.evidence_locker_filepath)
}

// -------------------------------------------------------------------

// ContentAnalysisResponse

// optional string request_token = 1;
inline bool ContentAnalysisResponse::_internal_has_request_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentAnalysisResponse::has_request_token() const {
  return _internal_has_request_token();
}
inline void ContentAnalysisResponse::clear_request_token() {
  request_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisResponse::request_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.request_token)
  return _internal_request_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisResponse::set_request_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 request_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.request_token)
}
inline std::string* ContentAnalysisResponse::mutable_request_token() {
  std::string* _s = _internal_mutable_request_token();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.request_token)
  return _s;
}
inline const std::string& ContentAnalysisResponse::_internal_request_token() const {
  return request_token_.Get();
}
inline void ContentAnalysisResponse::_internal_set_request_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse::_internal_mutable_request_token() {
  _has_bits_[0] |= 0x00000001u;
  return request_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisResponse::release_request_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.request_token)
  if (!_internal_has_request_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = request_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_token_.IsDefault()) {
    request_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisResponse::set_allocated_request_token(std::string* request_token) {
  if (request_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_token_.SetAllocated(request_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_token_.IsDefault()) {
    request_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.request_token)
}

// repeated .enterprise_connectors.ContentAnalysisResponse.Result results = 4;
inline int ContentAnalysisResponse::_internal_results_size() const {
  return results_.size();
}
inline int ContentAnalysisResponse::results_size() const {
  return _internal_results_size();
}
inline void ContentAnalysisResponse::clear_results() {
  results_.Clear();
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result* ContentAnalysisResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result >*
ContentAnalysisResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_connectors.ContentAnalysisResponse.results)
  return &results_;
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result& ContentAnalysisResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result& ContentAnalysisResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.results)
  return _internal_results(index);
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result* ContentAnalysisResponse::_internal_add_results() {
  return results_.Add();
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result* ContentAnalysisResponse::add_results() {
  ::enterprise_connectors::ContentAnalysisResponse_Result* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:enterprise_connectors.ContentAnalysisResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result >&
ContentAnalysisResponse::results() const {
  // @@protoc_insertion_point(field_list:enterprise_connectors.ContentAnalysisResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// ContentAnalysisAcknowledgement

// optional string request_token = 1;
inline bool ContentAnalysisAcknowledgement::_internal_has_request_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentAnalysisAcknowledgement::has_request_token() const {
  return _internal_has_request_token();
}
inline void ContentAnalysisAcknowledgement::clear_request_token() {
  request_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisAcknowledgement::request_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisAcknowledgement.request_token)
  return _internal_request_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentAnalysisAcknowledgement::set_request_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 request_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisAcknowledgement.request_token)
}
inline std::string* ContentAnalysisAcknowledgement::mutable_request_token() {
  std::string* _s = _internal_mutable_request_token();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisAcknowledgement.request_token)
  return _s;
}
inline const std::string& ContentAnalysisAcknowledgement::_internal_request_token() const {
  return request_token_.Get();
}
inline void ContentAnalysisAcknowledgement::_internal_set_request_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentAnalysisAcknowledgement::_internal_mutable_request_token() {
  _has_bits_[0] |= 0x00000001u;
  return request_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentAnalysisAcknowledgement::release_request_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisAcknowledgement.request_token)
  if (!_internal_has_request_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = request_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_token_.IsDefault()) {
    request_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentAnalysisAcknowledgement::set_allocated_request_token(std::string* request_token) {
  if (request_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_token_.SetAllocated(request_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_token_.IsDefault()) {
    request_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisAcknowledgement.request_token)
}

// optional .enterprise_connectors.ContentAnalysisAcknowledgement.Status status = 2;
inline bool ContentAnalysisAcknowledgement::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentAnalysisAcknowledgement::has_status() const {
  return _internal_has_status();
}
inline void ContentAnalysisAcknowledgement::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::enterprise_connectors::ContentAnalysisAcknowledgement_Status ContentAnalysisAcknowledgement::_internal_status() const {
  return static_cast< ::enterprise_connectors::ContentAnalysisAcknowledgement_Status >(status_);
}
inline ::enterprise_connectors::ContentAnalysisAcknowledgement_Status ContentAnalysisAcknowledgement::status() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisAcknowledgement.status)
  return _internal_status();
}
inline void ContentAnalysisAcknowledgement::_internal_set_status(::enterprise_connectors::ContentAnalysisAcknowledgement_Status value) {
  assert(::enterprise_connectors::ContentAnalysisAcknowledgement_Status_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void ContentAnalysisAcknowledgement::set_status(::enterprise_connectors::ContentAnalysisAcknowledgement_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisAcknowledgement.status)
}

// optional .enterprise_connectors.ContentAnalysisAcknowledgement.FinalAction final_action = 3;
inline bool ContentAnalysisAcknowledgement::_internal_has_final_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentAnalysisAcknowledgement::has_final_action() const {
  return _internal_has_final_action();
}
inline void ContentAnalysisAcknowledgement::clear_final_action() {
  final_action_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction ContentAnalysisAcknowledgement::_internal_final_action() const {
  return static_cast< ::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction >(final_action_);
}
inline ::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction ContentAnalysisAcknowledgement::final_action() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisAcknowledgement.final_action)
  return _internal_final_action();
}
inline void ContentAnalysisAcknowledgement::_internal_set_final_action(::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction value) {
  assert(::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  final_action_ = value;
}
inline void ContentAnalysisAcknowledgement::set_final_action(::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction value) {
  _internal_set_final_action(value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisAcknowledgement.final_action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_connectors

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_connectors::ContentAnalysisResponse_Result_Status> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_connectors::ContentAnalysisAcknowledgement_Status> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_connectors::ContentAnalysisAcknowledgement_FinalAction> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_connectors::AnalysisConnector> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto
