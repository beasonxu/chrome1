// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/enterprise/common/proto/extensions_workflow_events.proto

#include "components/enterprise/common/proto/extensions_workflow_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace enterprise_reporting {
PROTOBUF_CONSTEXPR ExtensionsWorkflowEvent::ExtensionsWorkflowEvent(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , justification_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_timestamp_millis_(int64_t{0})
  , removed_(false)
  , client_type_(0)
{}
struct ExtensionsWorkflowEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionsWorkflowEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionsWorkflowEventDefaultTypeInternal() {}
  union {
    ExtensionsWorkflowEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionsWorkflowEventDefaultTypeInternal _ExtensionsWorkflowEvent_default_instance_;
}  // namespace enterprise_reporting
namespace enterprise_reporting {
bool ExtensionsWorkflowEvent_ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ExtensionsWorkflowEvent_ClientType_strings[3] = {};

static const char ExtensionsWorkflowEvent_ClientType_names[] =
  "BROWSER_DEVICE"
  "CHROME_OS_USER"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExtensionsWorkflowEvent_ClientType_entries[] = {
  { {ExtensionsWorkflowEvent_ClientType_names + 0, 14}, 2 },
  { {ExtensionsWorkflowEvent_ClientType_names + 14, 14}, 1 },
  { {ExtensionsWorkflowEvent_ClientType_names + 28, 7}, 0 },
};

static const int ExtensionsWorkflowEvent_ClientType_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> CHROME_OS_USER
  0, // 2 -> BROWSER_DEVICE
};

const std::string& ExtensionsWorkflowEvent_ClientType_Name(
    ExtensionsWorkflowEvent_ClientType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExtensionsWorkflowEvent_ClientType_entries,
          ExtensionsWorkflowEvent_ClientType_entries_by_number,
          3, ExtensionsWorkflowEvent_ClientType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExtensionsWorkflowEvent_ClientType_entries,
      ExtensionsWorkflowEvent_ClientType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ExtensionsWorkflowEvent_ClientType_strings[idx].get();
}
bool ExtensionsWorkflowEvent_ClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtensionsWorkflowEvent_ClientType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExtensionsWorkflowEvent_ClientType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ExtensionsWorkflowEvent_ClientType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent::UNKNOWN;
constexpr ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent::CHROME_OS_USER;
constexpr ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent::BROWSER_DEVICE;
constexpr ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent::ClientType_MIN;
constexpr ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent::ClientType_MAX;
constexpr int ExtensionsWorkflowEvent::ClientType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ExtensionsWorkflowEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionsWorkflowEvent>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_timestamp_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_justification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ExtensionsWorkflowEvent::ExtensionsWorkflowEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:enterprise_reporting.ExtensionsWorkflowEvent)
}
ExtensionsWorkflowEvent::ExtensionsWorkflowEvent(const ExtensionsWorkflowEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  justification_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    justification_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_justification()) {
    justification_.Set(from._internal_justification(), 
      GetArenaForAllocation());
  }
  device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_name()) {
    device_name_.Set(from._internal_device_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_timestamp_millis_, &from.request_timestamp_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&request_timestamp_millis_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:enterprise_reporting.ExtensionsWorkflowEvent)
}

inline void ExtensionsWorkflowEvent::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
justification_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  justification_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_timestamp_millis_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&request_timestamp_millis_)) + sizeof(client_type_));
}

ExtensionsWorkflowEvent::~ExtensionsWorkflowEvent() {
  // @@protoc_insertion_point(destructor:enterprise_reporting.ExtensionsWorkflowEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionsWorkflowEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  justification_.Destroy();
  device_name_.Destroy();
}

void ExtensionsWorkflowEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionsWorkflowEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_reporting.ExtensionsWorkflowEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      justification_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      device_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&request_timestamp_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_type_) -
        reinterpret_cast<char*>(&request_timestamp_millis_)) + sizeof(client_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionsWorkflowEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 request_timestamp_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_request_timestamp_millis(&has_bits);
          request_timestamp_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool removed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_removed(&has_bits);
          removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .enterprise_reporting.ExtensionsWorkflowEvent.ClientType client_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_reporting::ExtensionsWorkflowEvent_ClientType_IsValid(val))) {
            _internal_set_client_type(static_cast<::enterprise_reporting::ExtensionsWorkflowEvent_ClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string justification = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_justification();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionsWorkflowEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_reporting.ExtensionsWorkflowEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional int64 request_timestamp_millis = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_request_timestamp_millis(), target);
  }

  // optional bool removed = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_removed(), target);
  }

  // optional .enterprise_reporting.ExtensionsWorkflowEvent.ClientType client_type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_type(), target);
  }

  // optional string justification = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_justification(), target);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_reporting.ExtensionsWorkflowEvent)
  return target;
}

size_t ExtensionsWorkflowEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_reporting.ExtensionsWorkflowEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string justification = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_justification());
    }

    // optional string device_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional int64 request_timestamp_millis = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_timestamp_millis());
    }

    // optional bool removed = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .enterprise_reporting.ExtensionsWorkflowEvent.ClientType client_type = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionsWorkflowEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionsWorkflowEvent*>(
      &from));
}

void ExtensionsWorkflowEvent::MergeFrom(const ExtensionsWorkflowEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_reporting.ExtensionsWorkflowEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_justification(from._internal_justification());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000008u) {
      request_timestamp_millis_ = from.request_timestamp_millis_;
    }
    if (cached_has_bits & 0x00000010u) {
      removed_ = from.removed_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_type_ = from.client_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionsWorkflowEvent::CopyFrom(const ExtensionsWorkflowEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_reporting.ExtensionsWorkflowEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionsWorkflowEvent::IsInitialized() const {
  return true;
}

void ExtensionsWorkflowEvent::InternalSwap(ExtensionsWorkflowEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &justification_, lhs_arena,
      &other->justification_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_name_, lhs_arena,
      &other->device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionsWorkflowEvent, client_type_)
      + sizeof(ExtensionsWorkflowEvent::client_type_)
      - PROTOBUF_FIELD_OFFSET(ExtensionsWorkflowEvent, request_timestamp_millis_)>(
          reinterpret_cast<char*>(&request_timestamp_millis_),
          reinterpret_cast<char*>(&other->request_timestamp_millis_));
}

std::string ExtensionsWorkflowEvent::GetTypeName() const {
  return "enterprise_reporting.ExtensionsWorkflowEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_reporting
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_reporting::ExtensionsWorkflowEvent*
Arena::CreateMaybeMessage< ::enterprise_reporting::ExtensionsWorkflowEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_reporting::ExtensionsWorkflowEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
