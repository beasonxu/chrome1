// components/digital_goods/mojom/digital_goods.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/digital_goods/mojom/digital_goods.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/digital_goods/mojom/digital_goods.mojom-params-data.h"
#include "components/digital_goods/mojom/digital_goods.mojom-shared-message-ids.h"

#include "components/digital_goods/mojom/digital_goods.mojom-import-headers.h"
#include "components/digital_goods/mojom/digital_goods.mojom-test-utils.h"


#ifndef COMPONENTS_DIGITAL_GOODS_MOJOM_DIGITAL_GOODS_MOJOM_JUMBO_H_
#define COMPONENTS_DIGITAL_GOODS_MOJOM_DIGITAL_GOODS_MOJOM_JUMBO_H_
#endif



namespace payments {
namespace mojom {
ItemDetails::ItemDetails()
    : item_id(),
      title(),
      description(),
      price(),
      subscription_period(),
      free_trial_period(),
      introductory_price(),
      introductory_price_period(),
      introductory_price_cycles(),
      type(),
      icon_urls() {}

ItemDetails::ItemDetails(
    const std::string& item_id_in,
    const std::string& title_in,
    const std::string& description_in,
    ::payments::mojom::PaymentCurrencyAmountPtr price_in,
    const absl::optional<std::string>& subscription_period_in,
    const absl::optional<std::string>& free_trial_period_in,
    ::payments::mojom::PaymentCurrencyAmountPtr introductory_price_in,
    const absl::optional<std::string>& introductory_price_period_in)
    : item_id(std::move(item_id_in)),
      title(std::move(title_in)),
      description(std::move(description_in)),
      price(std::move(price_in)),
      subscription_period(std::move(subscription_period_in)),
      free_trial_period(std::move(free_trial_period_in)),
      introductory_price(std::move(introductory_price_in)),
      introductory_price_period(std::move(introductory_price_period_in)),
      introductory_price_cycles(),
      type(),
      icon_urls() {}

ItemDetails::ItemDetails(
    const std::string& item_id_in,
    const std::string& title_in,
    const std::string& description_in,
    ::payments::mojom::PaymentCurrencyAmountPtr price_in,
    const absl::optional<std::string>& subscription_period_in,
    const absl::optional<std::string>& free_trial_period_in,
    ::payments::mojom::PaymentCurrencyAmountPtr introductory_price_in,
    const absl::optional<std::string>& introductory_price_period_in,
    uint32_t introductory_price_cycles_in,
    ItemType type_in,
    absl::optional<std::vector<::GURL>> icon_urls_in)
    : item_id(std::move(item_id_in)),
      title(std::move(title_in)),
      description(std::move(description_in)),
      price(std::move(price_in)),
      subscription_period(std::move(subscription_period_in)),
      free_trial_period(std::move(free_trial_period_in)),
      introductory_price(std::move(introductory_price_in)),
      introductory_price_period(std::move(introductory_price_period_in)),
      introductory_price_cycles(std::move(introductory_price_cycles_in)),
      type(std::move(type_in)),
      icon_urls(std::move(icon_urls_in)) {}

ItemDetails::~ItemDetails() = default;

void ItemDetails::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "item_id"), this->item_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "title"), this->title,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "description"), this->description,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "price"), this->price,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::payments::mojom::PaymentCurrencyAmountPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "subscription_period"), this->subscription_period,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "free_trial_period"), this->free_trial_period,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "introductory_price"), this->introductory_price,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::payments::mojom::PaymentCurrencyAmountPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "introductory_price_period"), this->introductory_price_period,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "introductory_price_cycles"), this->introductory_price_cycles,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ItemType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "icon_urls"), this->icon_urls,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<::GURL>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ItemDetails::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PurchaseReference::PurchaseReference()
    : item_id(),
      purchase_token() {}

PurchaseReference::PurchaseReference(
    const std::string& item_id_in,
    const std::string& purchase_token_in)
    : item_id(std::move(item_id_in)),
      purchase_token(std::move(purchase_token_in)) {}

PurchaseReference::~PurchaseReference() = default;
size_t PurchaseReference::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->item_id);
  seed = mojo::internal::Hash(seed, this->purchase_token);
  return seed;
}

void PurchaseReference::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "item_id"), this->item_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "purchase_token"), this->purchase_token,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PurchaseReference::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace payments


namespace mojo {


// static
bool StructTraits<::payments::mojom::ItemDetails::DataView, ::payments::mojom::ItemDetailsPtr>::Read(
    ::payments::mojom::ItemDetails::DataView input,
    ::payments::mojom::ItemDetailsPtr* output) {
  bool success = true;
  ::payments::mojom::ItemDetailsPtr result(::payments::mojom::ItemDetails::New());
  
      if (success && !input.ReadItemId(&result->item_id))
        success = false;
      if (success && !input.ReadTitle(&result->title))
        success = false;
      if (success && !input.ReadDescription(&result->description))
        success = false;
      if (success && !input.ReadPrice(&result->price))
        success = false;
      if (success && !input.ReadSubscriptionPeriod(&result->subscription_period))
        success = false;
      if (success && !input.ReadFreeTrialPeriod(&result->free_trial_period))
        success = false;
      if (success && !input.ReadIntroductoryPrice(&result->introductory_price))
        success = false;
      if (success && !input.ReadIntroductoryPricePeriod(&result->introductory_price_period))
        success = false;
      if (success)
        result->introductory_price_cycles = input.introductory_price_cycles();
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadIconUrls(&result->icon_urls))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::payments::mojom::PurchaseReference::DataView, ::payments::mojom::PurchaseReferencePtr>::Read(
    ::payments::mojom::PurchaseReference::DataView input,
    ::payments::mojom::PurchaseReferencePtr* output) {
  bool success = true;
  ::payments::mojom::PurchaseReferencePtr result(::payments::mojom::PurchaseReference::New());
  
      if (success && !input.ReadItemId(&result->item_id))
        success = false;
      if (success && !input.ReadPurchaseToken(&result->purchase_token))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace payments {
namespace mojom {




}  // namespace mojom
}  // namespace payments


#if defined(__clang__)
#pragma clang diagnostic pop
#endif