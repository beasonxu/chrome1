// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/reporting/proto/synced/health.proto

#include "components/reporting/proto/synced/health.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace reporting {
PROTOBUF_CONSTEXPR StorageDequeue::StorageDequeue(
    ::_pbi::ConstantInitialized)
  : sequencing_id_(int64_t{0})
  , records_count_(int64_t{0}){}
struct StorageDequeueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageDequeueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageDequeueDefaultTypeInternal() {}
  union {
    StorageDequeue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageDequeueDefaultTypeInternal _StorageDequeue_default_instance_;
PROTOBUF_CONSTEXPR StorageEnqueue::StorageEnqueue(
    ::_pbi::ConstantInitialized)
  : sequencing_id_(int64_t{0}){}
struct StorageEnqueueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageEnqueueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageEnqueueDefaultTypeInternal() {}
  union {
    StorageEnqueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageEnqueueDefaultTypeInternal _StorageEnqueue_default_instance_;
PROTOBUF_CONSTEXPR StorageQueueAction::StorageQueueAction(
    ::_pbi::ConstantInitialized)
  : status_(nullptr)
  , _oneof_case_{}{}
struct StorageQueueActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageQueueActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageQueueActionDefaultTypeInternal() {}
  union {
    StorageQueueAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageQueueActionDefaultTypeInternal _StorageQueueAction_default_instance_;
PROTOBUF_CONSTEXPR EnqueueRecordCall::EnqueueRecordCall(
    ::_pbi::ConstantInitialized)
  : status_(nullptr)
  , priority_(0)
{}
struct EnqueueRecordCallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnqueueRecordCallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnqueueRecordCallDefaultTypeInternal() {}
  union {
    EnqueueRecordCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnqueueRecordCallDefaultTypeInternal _EnqueueRecordCall_default_instance_;
PROTOBUF_CONSTEXPR FlushPriorityCall::FlushPriorityCall(
    ::_pbi::ConstantInitialized)
  : status_(nullptr)
  , priority_(0)
{}
struct FlushPriorityCallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushPriorityCallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushPriorityCallDefaultTypeInternal() {}
  union {
    FlushPriorityCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushPriorityCallDefaultTypeInternal _FlushPriorityCall_default_instance_;
PROTOBUF_CONSTEXPR UploadEncryptedRecordCall::UploadEncryptedRecordCall(
    ::_pbi::ConstantInitialized)
  : status_(nullptr)
  , sequencing_id_(int64_t{0})
  , encryption_key_requested_(false){}
struct UploadEncryptedRecordCallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadEncryptedRecordCallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadEncryptedRecordCallDefaultTypeInternal() {}
  union {
    UploadEncryptedRecordCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadEncryptedRecordCallDefaultTypeInternal _UploadEncryptedRecordCall_default_instance_;
PROTOBUF_CONSTEXPR ConfirmRecordUploadCall::ConfirmRecordUploadCall(
    ::_pbi::ConstantInitialized)
  : sequencing_id_(int64_t{0})
  , force_confirm_(false){}
struct ConfirmRecordUploadCallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmRecordUploadCallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmRecordUploadCallDefaultTypeInternal() {}
  union {
    ConfirmRecordUploadCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmRecordUploadCallDefaultTypeInternal _ConfirmRecordUploadCall_default_instance_;
PROTOBUF_CONSTEXPR HealthDataHistory::HealthDataHistory(
    ::_pbi::ConstantInitialized)
  : timestamp_seconds_(int64_t{0})
  , _oneof_case_{}{}
struct HealthDataHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthDataHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthDataHistoryDefaultTypeInternal() {}
  union {
    HealthDataHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthDataHistoryDefaultTypeInternal _HealthDataHistory_default_instance_;
PROTOBUF_CONSTEXPR ERPHealthData::ERPHealthData(
    ::_pbi::ConstantInitialized)
  : history_(){}
struct ERPHealthDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ERPHealthDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ERPHealthDataDefaultTypeInternal() {}
  union {
    ERPHealthData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ERPHealthDataDefaultTypeInternal _ERPHealthData_default_instance_;
}  // namespace reporting
namespace reporting {

// ===================================================================

class StorageDequeue::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageDequeue>()._has_bits_);
  static void set_has_sequencing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_records_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StorageDequeue::StorageDequeue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.StorageDequeue)
}
StorageDequeue::StorageDequeue(const StorageDequeue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&sequencing_id_, &from.sequencing_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&records_count_) -
    reinterpret_cast<char*>(&sequencing_id_)) + sizeof(records_count_));
  // @@protoc_insertion_point(copy_constructor:reporting.StorageDequeue)
}

inline void StorageDequeue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequencing_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&records_count_) -
    reinterpret_cast<char*>(&sequencing_id_)) + sizeof(records_count_));
}

StorageDequeue::~StorageDequeue() {
  // @@protoc_insertion_point(destructor:reporting.StorageDequeue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageDequeue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StorageDequeue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StorageDequeue::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.StorageDequeue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sequencing_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&records_count_) -
        reinterpret_cast<char*>(&sequencing_id_)) + sizeof(records_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StorageDequeue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 sequencing_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequencing_id(&has_bits);
          sequencing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 records_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_records_count(&has_bits);
          records_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageDequeue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.StorageDequeue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 sequencing_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequencing_id(), target);
  }

  // optional int64 records_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_records_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.StorageDequeue)
  return target;
}

size_t StorageDequeue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.StorageDequeue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 sequencing_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequencing_id());
    }

    // optional int64 records_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_records_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageDequeue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StorageDequeue*>(
      &from));
}

void StorageDequeue::MergeFrom(const StorageDequeue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.StorageDequeue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sequencing_id_ = from.sequencing_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      records_count_ = from.records_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StorageDequeue::CopyFrom(const StorageDequeue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.StorageDequeue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageDequeue::IsInitialized() const {
  return true;
}

void StorageDequeue::InternalSwap(StorageDequeue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StorageDequeue, records_count_)
      + sizeof(StorageDequeue::records_count_)
      - PROTOBUF_FIELD_OFFSET(StorageDequeue, sequencing_id_)>(
          reinterpret_cast<char*>(&sequencing_id_),
          reinterpret_cast<char*>(&other->sequencing_id_));
}

std::string StorageDequeue::GetTypeName() const {
  return "reporting.StorageDequeue";
}


// ===================================================================

class StorageEnqueue::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageEnqueue>()._has_bits_);
  static void set_has_sequencing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StorageEnqueue::StorageEnqueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.StorageEnqueue)
}
StorageEnqueue::StorageEnqueue(const StorageEnqueue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sequencing_id_ = from.sequencing_id_;
  // @@protoc_insertion_point(copy_constructor:reporting.StorageEnqueue)
}

inline void StorageEnqueue::SharedCtor() {
sequencing_id_ = int64_t{0};
}

StorageEnqueue::~StorageEnqueue() {
  // @@protoc_insertion_point(destructor:reporting.StorageEnqueue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageEnqueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StorageEnqueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StorageEnqueue::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.StorageEnqueue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequencing_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StorageEnqueue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 sequencing_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequencing_id(&has_bits);
          sequencing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageEnqueue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.StorageEnqueue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 sequencing_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequencing_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.StorageEnqueue)
  return target;
}

size_t StorageEnqueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.StorageEnqueue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 sequencing_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequencing_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageEnqueue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StorageEnqueue*>(
      &from));
}

void StorageEnqueue::MergeFrom(const StorageEnqueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.StorageEnqueue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sequencing_id()) {
    _internal_set_sequencing_id(from._internal_sequencing_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StorageEnqueue::CopyFrom(const StorageEnqueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.StorageEnqueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageEnqueue::IsInitialized() const {
  return true;
}

void StorageEnqueue::InternalSwap(StorageEnqueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sequencing_id_, other->sequencing_id_);
}

std::string StorageEnqueue::GetTypeName() const {
  return "reporting.StorageEnqueue";
}


// ===================================================================

class StorageQueueAction::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageQueueAction>()._has_bits_);
  static const ::reporting::StorageDequeue& storage_dequeue(const StorageQueueAction* msg);
  static const ::reporting::StorageEnqueue& storage_enqueue(const StorageQueueAction* msg);
  static const ::reporting::StatusProto& status(const StorageQueueAction* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::reporting::StorageDequeue&
StorageQueueAction::_Internal::storage_dequeue(const StorageQueueAction* msg) {
  return *msg->action_.storage_dequeue_;
}
const ::reporting::StorageEnqueue&
StorageQueueAction::_Internal::storage_enqueue(const StorageQueueAction* msg) {
  return *msg->action_.storage_enqueue_;
}
const ::reporting::StatusProto&
StorageQueueAction::_Internal::status(const StorageQueueAction* msg) {
  return *msg->status_;
}
void StorageQueueAction::set_allocated_storage_dequeue(::reporting::StorageDequeue* storage_dequeue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (storage_dequeue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage_dequeue);
    if (message_arena != submessage_arena) {
      storage_dequeue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_dequeue, submessage_arena);
    }
    set_has_storage_dequeue();
    action_.storage_dequeue_ = storage_dequeue;
  }
  // @@protoc_insertion_point(field_set_allocated:reporting.StorageQueueAction.storage_dequeue)
}
void StorageQueueAction::set_allocated_storage_enqueue(::reporting::StorageEnqueue* storage_enqueue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (storage_enqueue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage_enqueue);
    if (message_arena != submessage_arena) {
      storage_enqueue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_enqueue, submessage_arena);
    }
    set_has_storage_enqueue();
    action_.storage_enqueue_ = storage_enqueue;
  }
  // @@protoc_insertion_point(field_set_allocated:reporting.StorageQueueAction.storage_enqueue)
}
void StorageQueueAction::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StorageQueueAction::StorageQueueAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.StorageQueueAction)
}
StorageQueueAction::StorageQueueAction(const StorageQueueAction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::reporting::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  clear_has_action();
  switch (from.action_case()) {
    case kStorageDequeue: {
      _internal_mutable_storage_dequeue()->::reporting::StorageDequeue::MergeFrom(from._internal_storage_dequeue());
      break;
    }
    case kStorageEnqueue: {
      _internal_mutable_storage_enqueue()->::reporting::StorageEnqueue::MergeFrom(from._internal_storage_enqueue());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:reporting.StorageQueueAction)
}

inline void StorageQueueAction::SharedCtor() {
status_ = nullptr;
clear_has_action();
}

StorageQueueAction::~StorageQueueAction() {
  // @@protoc_insertion_point(destructor:reporting.StorageQueueAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageQueueAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (has_action()) {
    clear_action();
  }
}

void StorageQueueAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StorageQueueAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:reporting.StorageQueueAction)
  switch (action_case()) {
    case kStorageDequeue: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.storage_dequeue_;
      }
      break;
    }
    case kStorageEnqueue: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.storage_enqueue_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void StorageQueueAction::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.StorageQueueAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StorageQueueAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .reporting.StorageDequeue storage_dequeue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_dequeue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .reporting.StorageEnqueue storage_enqueue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_enqueue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.StatusProto status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageQueueAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.StorageQueueAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kStorageDequeue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::storage_dequeue(this),
          _Internal::storage_dequeue(this).GetCachedSize(), target, stream);
      break;
    }
    case kStorageEnqueue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::storage_enqueue(this),
          _Internal::storage_enqueue(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .reporting.StatusProto status = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.StorageQueueAction)
  return target;
}

size_t StorageQueueAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.StorageQueueAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .reporting.StatusProto status = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  switch (action_case()) {
    // .reporting.StorageDequeue storage_dequeue = 1;
    case kStorageDequeue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.storage_dequeue_);
      break;
    }
    // .reporting.StorageEnqueue storage_enqueue = 2;
    case kStorageEnqueue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.storage_enqueue_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageQueueAction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StorageQueueAction*>(
      &from));
}

void StorageQueueAction::MergeFrom(const StorageQueueAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.StorageQueueAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::reporting::StatusProto::MergeFrom(from._internal_status());
  }
  switch (from.action_case()) {
    case kStorageDequeue: {
      _internal_mutable_storage_dequeue()->::reporting::StorageDequeue::MergeFrom(from._internal_storage_dequeue());
      break;
    }
    case kStorageEnqueue: {
      _internal_mutable_storage_enqueue()->::reporting::StorageEnqueue::MergeFrom(from._internal_storage_enqueue());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StorageQueueAction::CopyFrom(const StorageQueueAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.StorageQueueAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageQueueAction::IsInitialized() const {
  return true;
}

void StorageQueueAction::InternalSwap(StorageQueueAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string StorageQueueAction::GetTypeName() const {
  return "reporting.StorageQueueAction";
}


// ===================================================================

class EnqueueRecordCall::_Internal {
 public:
  using HasBits = decltype(std::declval<EnqueueRecordCall>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::reporting::StatusProto& status(const EnqueueRecordCall* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::reporting::StatusProto&
EnqueueRecordCall::_Internal::status(const EnqueueRecordCall* msg) {
  return *msg->status_;
}
void EnqueueRecordCall::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EnqueueRecordCall::EnqueueRecordCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.EnqueueRecordCall)
}
EnqueueRecordCall::EnqueueRecordCall(const EnqueueRecordCall& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::reporting::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:reporting.EnqueueRecordCall)
}

inline void EnqueueRecordCall::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&status_)) + sizeof(priority_));
}

EnqueueRecordCall::~EnqueueRecordCall() {
  // @@protoc_insertion_point(destructor:reporting.EnqueueRecordCall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnqueueRecordCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void EnqueueRecordCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnqueueRecordCall::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.EnqueueRecordCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  priority_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnqueueRecordCall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .reporting.Priority priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reporting::Priority_IsValid(val))) {
            _internal_set_priority(static_cast<::reporting::Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.StatusProto status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnqueueRecordCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.EnqueueRecordCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .reporting.Priority priority = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_priority(), target);
  }

  // optional .reporting.StatusProto status = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.EnqueueRecordCall)
  return target;
}

size_t EnqueueRecordCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.EnqueueRecordCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .reporting.StatusProto status = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .reporting.Priority priority = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueRecordCall::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnqueueRecordCall*>(
      &from));
}

void EnqueueRecordCall::MergeFrom(const EnqueueRecordCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.EnqueueRecordCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::reporting::StatusProto::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnqueueRecordCall::CopyFrom(const EnqueueRecordCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.EnqueueRecordCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueRecordCall::IsInitialized() const {
  return true;
}

void EnqueueRecordCall::InternalSwap(EnqueueRecordCall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnqueueRecordCall, priority_)
      + sizeof(EnqueueRecordCall::priority_)
      - PROTOBUF_FIELD_OFFSET(EnqueueRecordCall, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

std::string EnqueueRecordCall::GetTypeName() const {
  return "reporting.EnqueueRecordCall";
}


// ===================================================================

class FlushPriorityCall::_Internal {
 public:
  using HasBits = decltype(std::declval<FlushPriorityCall>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::reporting::StatusProto& status(const FlushPriorityCall* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::reporting::StatusProto&
FlushPriorityCall::_Internal::status(const FlushPriorityCall* msg) {
  return *msg->status_;
}
void FlushPriorityCall::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FlushPriorityCall::FlushPriorityCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.FlushPriorityCall)
}
FlushPriorityCall::FlushPriorityCall(const FlushPriorityCall& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::reporting::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:reporting.FlushPriorityCall)
}

inline void FlushPriorityCall::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&status_)) + sizeof(priority_));
}

FlushPriorityCall::~FlushPriorityCall() {
  // @@protoc_insertion_point(destructor:reporting.FlushPriorityCall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushPriorityCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void FlushPriorityCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlushPriorityCall::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.FlushPriorityCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  priority_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FlushPriorityCall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .reporting.Priority priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reporting::Priority_IsValid(val))) {
            _internal_set_priority(static_cast<::reporting::Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.StatusProto status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushPriorityCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.FlushPriorityCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .reporting.Priority priority = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_priority(), target);
  }

  // optional .reporting.StatusProto status = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.FlushPriorityCall)
  return target;
}

size_t FlushPriorityCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.FlushPriorityCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .reporting.StatusProto status = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .reporting.Priority priority = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushPriorityCall::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FlushPriorityCall*>(
      &from));
}

void FlushPriorityCall::MergeFrom(const FlushPriorityCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.FlushPriorityCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::reporting::StatusProto::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FlushPriorityCall::CopyFrom(const FlushPriorityCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.FlushPriorityCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushPriorityCall::IsInitialized() const {
  return true;
}

void FlushPriorityCall::InternalSwap(FlushPriorityCall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushPriorityCall, priority_)
      + sizeof(FlushPriorityCall::priority_)
      - PROTOBUF_FIELD_OFFSET(FlushPriorityCall, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

std::string FlushPriorityCall::GetTypeName() const {
  return "reporting.FlushPriorityCall";
}


// ===================================================================

class UploadEncryptedRecordCall::_Internal {
 public:
  using HasBits = decltype(std::declval<UploadEncryptedRecordCall>()._has_bits_);
  static void set_has_sequencing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encryption_key_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::reporting::StatusProto& status(const UploadEncryptedRecordCall* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::reporting::StatusProto&
UploadEncryptedRecordCall::_Internal::status(const UploadEncryptedRecordCall* msg) {
  return *msg->status_;
}
void UploadEncryptedRecordCall::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UploadEncryptedRecordCall::UploadEncryptedRecordCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.UploadEncryptedRecordCall)
}
UploadEncryptedRecordCall::UploadEncryptedRecordCall(const UploadEncryptedRecordCall& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::reporting::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&sequencing_id_, &from.sequencing_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&encryption_key_requested_) -
    reinterpret_cast<char*>(&sequencing_id_)) + sizeof(encryption_key_requested_));
  // @@protoc_insertion_point(copy_constructor:reporting.UploadEncryptedRecordCall)
}

inline void UploadEncryptedRecordCall::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encryption_key_requested_) -
    reinterpret_cast<char*>(&status_)) + sizeof(encryption_key_requested_));
}

UploadEncryptedRecordCall::~UploadEncryptedRecordCall() {
  // @@protoc_insertion_point(destructor:reporting.UploadEncryptedRecordCall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadEncryptedRecordCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void UploadEncryptedRecordCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadEncryptedRecordCall::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.UploadEncryptedRecordCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sequencing_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encryption_key_requested_) -
        reinterpret_cast<char*>(&sequencing_id_)) + sizeof(encryption_key_requested_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UploadEncryptedRecordCall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 sequencing_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequencing_id(&has_bits);
          sequencing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool encryption_key_requested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_encryption_key_requested(&has_bits);
          encryption_key_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.StatusProto status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadEncryptedRecordCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.UploadEncryptedRecordCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 sequencing_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequencing_id(), target);
  }

  // optional bool encryption_key_requested = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_encryption_key_requested(), target);
  }

  // optional .reporting.StatusProto status = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.UploadEncryptedRecordCall)
  return target;
}

size_t UploadEncryptedRecordCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.UploadEncryptedRecordCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .reporting.StatusProto status = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional int64 sequencing_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequencing_id());
    }

    // optional bool encryption_key_requested = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadEncryptedRecordCall::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UploadEncryptedRecordCall*>(
      &from));
}

void UploadEncryptedRecordCall::MergeFrom(const UploadEncryptedRecordCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.UploadEncryptedRecordCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::reporting::StatusProto::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      sequencing_id_ = from.sequencing_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      encryption_key_requested_ = from.encryption_key_requested_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UploadEncryptedRecordCall::CopyFrom(const UploadEncryptedRecordCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.UploadEncryptedRecordCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEncryptedRecordCall::IsInitialized() const {
  return true;
}

void UploadEncryptedRecordCall::InternalSwap(UploadEncryptedRecordCall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadEncryptedRecordCall, encryption_key_requested_)
      + sizeof(UploadEncryptedRecordCall::encryption_key_requested_)
      - PROTOBUF_FIELD_OFFSET(UploadEncryptedRecordCall, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

std::string UploadEncryptedRecordCall::GetTypeName() const {
  return "reporting.UploadEncryptedRecordCall";
}


// ===================================================================

class ConfirmRecordUploadCall::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfirmRecordUploadCall>()._has_bits_);
  static void set_has_sequencing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_confirm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConfirmRecordUploadCall::ConfirmRecordUploadCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.ConfirmRecordUploadCall)
}
ConfirmRecordUploadCall::ConfirmRecordUploadCall(const ConfirmRecordUploadCall& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&sequencing_id_, &from.sequencing_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_confirm_) -
    reinterpret_cast<char*>(&sequencing_id_)) + sizeof(force_confirm_));
  // @@protoc_insertion_point(copy_constructor:reporting.ConfirmRecordUploadCall)
}

inline void ConfirmRecordUploadCall::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequencing_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_confirm_) -
    reinterpret_cast<char*>(&sequencing_id_)) + sizeof(force_confirm_));
}

ConfirmRecordUploadCall::~ConfirmRecordUploadCall() {
  // @@protoc_insertion_point(destructor:reporting.ConfirmRecordUploadCall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmRecordUploadCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfirmRecordUploadCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfirmRecordUploadCall::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.ConfirmRecordUploadCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sequencing_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_confirm_) -
        reinterpret_cast<char*>(&sequencing_id_)) + sizeof(force_confirm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ConfirmRecordUploadCall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 sequencing_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequencing_id(&has_bits);
          sequencing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_confirm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_force_confirm(&has_bits);
          force_confirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmRecordUploadCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.ConfirmRecordUploadCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 sequencing_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequencing_id(), target);
  }

  // optional bool force_confirm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_force_confirm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.ConfirmRecordUploadCall)
  return target;
}

size_t ConfirmRecordUploadCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.ConfirmRecordUploadCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 sequencing_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequencing_id());
    }

    // optional bool force_confirm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfirmRecordUploadCall::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ConfirmRecordUploadCall*>(
      &from));
}

void ConfirmRecordUploadCall::MergeFrom(const ConfirmRecordUploadCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.ConfirmRecordUploadCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sequencing_id_ = from.sequencing_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_confirm_ = from.force_confirm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ConfirmRecordUploadCall::CopyFrom(const ConfirmRecordUploadCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.ConfirmRecordUploadCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmRecordUploadCall::IsInitialized() const {
  return true;
}

void ConfirmRecordUploadCall::InternalSwap(ConfirmRecordUploadCall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfirmRecordUploadCall, force_confirm_)
      + sizeof(ConfirmRecordUploadCall::force_confirm_)
      - PROTOBUF_FIELD_OFFSET(ConfirmRecordUploadCall, sequencing_id_)>(
          reinterpret_cast<char*>(&sequencing_id_),
          reinterpret_cast<char*>(&other->sequencing_id_));
}

std::string ConfirmRecordUploadCall::GetTypeName() const {
  return "reporting.ConfirmRecordUploadCall";
}


// ===================================================================

class HealthDataHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<HealthDataHistory>()._has_bits_);
  static const ::reporting::EnqueueRecordCall& enqueue_record_call(const HealthDataHistory* msg);
  static const ::reporting::FlushPriorityCall& flush_priority_call(const HealthDataHistory* msg);
  static const ::reporting::UploadEncryptedRecordCall& upload_encrypted_record_call(const HealthDataHistory* msg);
  static const ::reporting::ConfirmRecordUploadCall& confirm_record_upload_call(const HealthDataHistory* msg);
  static const ::reporting::StorageQueueAction& storage_queue_action(const HealthDataHistory* msg);
  static void set_has_timestamp_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::reporting::EnqueueRecordCall&
HealthDataHistory::_Internal::enqueue_record_call(const HealthDataHistory* msg) {
  return *msg->record_.enqueue_record_call_;
}
const ::reporting::FlushPriorityCall&
HealthDataHistory::_Internal::flush_priority_call(const HealthDataHistory* msg) {
  return *msg->record_.flush_priority_call_;
}
const ::reporting::UploadEncryptedRecordCall&
HealthDataHistory::_Internal::upload_encrypted_record_call(const HealthDataHistory* msg) {
  return *msg->record_.upload_encrypted_record_call_;
}
const ::reporting::ConfirmRecordUploadCall&
HealthDataHistory::_Internal::confirm_record_upload_call(const HealthDataHistory* msg) {
  return *msg->record_.confirm_record_upload_call_;
}
const ::reporting::StorageQueueAction&
HealthDataHistory::_Internal::storage_queue_action(const HealthDataHistory* msg) {
  return *msg->record_.storage_queue_action_;
}
void HealthDataHistory::set_allocated_enqueue_record_call(::reporting::EnqueueRecordCall* enqueue_record_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (enqueue_record_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enqueue_record_call);
    if (message_arena != submessage_arena) {
      enqueue_record_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enqueue_record_call, submessage_arena);
    }
    set_has_enqueue_record_call();
    record_.enqueue_record_call_ = enqueue_record_call;
  }
  // @@protoc_insertion_point(field_set_allocated:reporting.HealthDataHistory.enqueue_record_call)
}
void HealthDataHistory::set_allocated_flush_priority_call(::reporting::FlushPriorityCall* flush_priority_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (flush_priority_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(flush_priority_call);
    if (message_arena != submessage_arena) {
      flush_priority_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush_priority_call, submessage_arena);
    }
    set_has_flush_priority_call();
    record_.flush_priority_call_ = flush_priority_call;
  }
  // @@protoc_insertion_point(field_set_allocated:reporting.HealthDataHistory.flush_priority_call)
}
void HealthDataHistory::set_allocated_upload_encrypted_record_call(::reporting::UploadEncryptedRecordCall* upload_encrypted_record_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (upload_encrypted_record_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upload_encrypted_record_call);
    if (message_arena != submessage_arena) {
      upload_encrypted_record_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_encrypted_record_call, submessage_arena);
    }
    set_has_upload_encrypted_record_call();
    record_.upload_encrypted_record_call_ = upload_encrypted_record_call;
  }
  // @@protoc_insertion_point(field_set_allocated:reporting.HealthDataHistory.upload_encrypted_record_call)
}
void HealthDataHistory::set_allocated_confirm_record_upload_call(::reporting::ConfirmRecordUploadCall* confirm_record_upload_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (confirm_record_upload_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(confirm_record_upload_call);
    if (message_arena != submessage_arena) {
      confirm_record_upload_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirm_record_upload_call, submessage_arena);
    }
    set_has_confirm_record_upload_call();
    record_.confirm_record_upload_call_ = confirm_record_upload_call;
  }
  // @@protoc_insertion_point(field_set_allocated:reporting.HealthDataHistory.confirm_record_upload_call)
}
void HealthDataHistory::set_allocated_storage_queue_action(::reporting::StorageQueueAction* storage_queue_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (storage_queue_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage_queue_action);
    if (message_arena != submessage_arena) {
      storage_queue_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_queue_action, submessage_arena);
    }
    set_has_storage_queue_action();
    record_.storage_queue_action_ = storage_queue_action;
  }
  // @@protoc_insertion_point(field_set_allocated:reporting.HealthDataHistory.storage_queue_action)
}
HealthDataHistory::HealthDataHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.HealthDataHistory)
}
HealthDataHistory::HealthDataHistory(const HealthDataHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  timestamp_seconds_ = from.timestamp_seconds_;
  clear_has_record();
  switch (from.record_case()) {
    case kEnqueueRecordCall: {
      _internal_mutable_enqueue_record_call()->::reporting::EnqueueRecordCall::MergeFrom(from._internal_enqueue_record_call());
      break;
    }
    case kFlushPriorityCall: {
      _internal_mutable_flush_priority_call()->::reporting::FlushPriorityCall::MergeFrom(from._internal_flush_priority_call());
      break;
    }
    case kUploadEncryptedRecordCall: {
      _internal_mutable_upload_encrypted_record_call()->::reporting::UploadEncryptedRecordCall::MergeFrom(from._internal_upload_encrypted_record_call());
      break;
    }
    case kConfirmRecordUploadCall: {
      _internal_mutable_confirm_record_upload_call()->::reporting::ConfirmRecordUploadCall::MergeFrom(from._internal_confirm_record_upload_call());
      break;
    }
    case kStorageQueueAction: {
      _internal_mutable_storage_queue_action()->::reporting::StorageQueueAction::MergeFrom(from._internal_storage_queue_action());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:reporting.HealthDataHistory)
}

inline void HealthDataHistory::SharedCtor() {
timestamp_seconds_ = int64_t{0};
clear_has_record();
}

HealthDataHistory::~HealthDataHistory() {
  // @@protoc_insertion_point(destructor:reporting.HealthDataHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthDataHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_record()) {
    clear_record();
  }
}

void HealthDataHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthDataHistory::clear_record() {
// @@protoc_insertion_point(one_of_clear_start:reporting.HealthDataHistory)
  switch (record_case()) {
    case kEnqueueRecordCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.enqueue_record_call_;
      }
      break;
    }
    case kFlushPriorityCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.flush_priority_call_;
      }
      break;
    }
    case kUploadEncryptedRecordCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.upload_encrypted_record_call_;
      }
      break;
    }
    case kConfirmRecordUploadCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.confirm_record_upload_call_;
      }
      break;
    }
    case kStorageQueueAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.storage_queue_action_;
      }
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_NOT_SET;
}


void HealthDataHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.HealthDataHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_seconds_ = int64_t{0};
  clear_record();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HealthDataHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .reporting.EnqueueRecordCall enqueue_record_call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enqueue_record_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .reporting.FlushPriorityCall flush_priority_call = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush_priority_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .reporting.UploadEncryptedRecordCall upload_encrypted_record_call = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upload_encrypted_record_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .reporting.ConfirmRecordUploadCall confirm_record_upload_call = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirm_record_upload_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .reporting.StorageQueueAction storage_queue_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_queue_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timestamp_seconds(&has_bits);
          timestamp_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthDataHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.HealthDataHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (record_case()) {
    case kEnqueueRecordCall: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::enqueue_record_call(this),
          _Internal::enqueue_record_call(this).GetCachedSize(), target, stream);
      break;
    }
    case kFlushPriorityCall: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::flush_priority_call(this),
          _Internal::flush_priority_call(this).GetCachedSize(), target, stream);
      break;
    }
    case kUploadEncryptedRecordCall: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::upload_encrypted_record_call(this),
          _Internal::upload_encrypted_record_call(this).GetCachedSize(), target, stream);
      break;
    }
    case kConfirmRecordUploadCall: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::confirm_record_upload_call(this),
          _Internal::confirm_record_upload_call(this).GetCachedSize(), target, stream);
      break;
    }
    case kStorageQueueAction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::storage_queue_action(this),
          _Internal::storage_queue_action(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_seconds = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.HealthDataHistory)
  return target;
}

size_t HealthDataHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.HealthDataHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 timestamp_seconds = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_seconds());
  }

  switch (record_case()) {
    // .reporting.EnqueueRecordCall enqueue_record_call = 1;
    case kEnqueueRecordCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.enqueue_record_call_);
      break;
    }
    // .reporting.FlushPriorityCall flush_priority_call = 2;
    case kFlushPriorityCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.flush_priority_call_);
      break;
    }
    // .reporting.UploadEncryptedRecordCall upload_encrypted_record_call = 3;
    case kUploadEncryptedRecordCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.upload_encrypted_record_call_);
      break;
    }
    // .reporting.ConfirmRecordUploadCall confirm_record_upload_call = 4;
    case kConfirmRecordUploadCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.confirm_record_upload_call_);
      break;
    }
    // .reporting.StorageQueueAction storage_queue_action = 5;
    case kStorageQueueAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.storage_queue_action_);
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthDataHistory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HealthDataHistory*>(
      &from));
}

void HealthDataHistory::MergeFrom(const HealthDataHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.HealthDataHistory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp_seconds()) {
    _internal_set_timestamp_seconds(from._internal_timestamp_seconds());
  }
  switch (from.record_case()) {
    case kEnqueueRecordCall: {
      _internal_mutable_enqueue_record_call()->::reporting::EnqueueRecordCall::MergeFrom(from._internal_enqueue_record_call());
      break;
    }
    case kFlushPriorityCall: {
      _internal_mutable_flush_priority_call()->::reporting::FlushPriorityCall::MergeFrom(from._internal_flush_priority_call());
      break;
    }
    case kUploadEncryptedRecordCall: {
      _internal_mutable_upload_encrypted_record_call()->::reporting::UploadEncryptedRecordCall::MergeFrom(from._internal_upload_encrypted_record_call());
      break;
    }
    case kConfirmRecordUploadCall: {
      _internal_mutable_confirm_record_upload_call()->::reporting::ConfirmRecordUploadCall::MergeFrom(from._internal_confirm_record_upload_call());
      break;
    }
    case kStorageQueueAction: {
      _internal_mutable_storage_queue_action()->::reporting::StorageQueueAction::MergeFrom(from._internal_storage_queue_action());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HealthDataHistory::CopyFrom(const HealthDataHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.HealthDataHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthDataHistory::IsInitialized() const {
  return true;
}

void HealthDataHistory::InternalSwap(HealthDataHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_seconds_, other->timestamp_seconds_);
  swap(record_, other->record_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string HealthDataHistory::GetTypeName() const {
  return "reporting.HealthDataHistory";
}


// ===================================================================

class ERPHealthData::_Internal {
 public:
};

ERPHealthData::ERPHealthData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  history_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.ERPHealthData)
}
ERPHealthData::ERPHealthData(const ERPHealthData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      history_(from.history_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:reporting.ERPHealthData)
}

inline void ERPHealthData::SharedCtor() {
}

ERPHealthData::~ERPHealthData() {
  // @@protoc_insertion_point(destructor:reporting.ERPHealthData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ERPHealthData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ERPHealthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ERPHealthData::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.ERPHealthData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ERPHealthData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .reporting.HealthDataHistory history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ERPHealthData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.ERPHealthData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .reporting.HealthDataHistory history = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.ERPHealthData)
  return target;
}

size_t ERPHealthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.ERPHealthData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .reporting.HealthDataHistory history = 1;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERPHealthData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ERPHealthData*>(
      &from));
}

void ERPHealthData::MergeFrom(const ERPHealthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.ERPHealthData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ERPHealthData::CopyFrom(const ERPHealthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.ERPHealthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERPHealthData::IsInitialized() const {
  return true;
}

void ERPHealthData::InternalSwap(ERPHealthData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  history_.InternalSwap(&other->history_);
}

std::string ERPHealthData::GetTypeName() const {
  return "reporting.ERPHealthData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace reporting
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reporting::StorageDequeue*
Arena::CreateMaybeMessage< ::reporting::StorageDequeue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::StorageDequeue >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::StorageEnqueue*
Arena::CreateMaybeMessage< ::reporting::StorageEnqueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::StorageEnqueue >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::StorageQueueAction*
Arena::CreateMaybeMessage< ::reporting::StorageQueueAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::StorageQueueAction >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::EnqueueRecordCall*
Arena::CreateMaybeMessage< ::reporting::EnqueueRecordCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::EnqueueRecordCall >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::FlushPriorityCall*
Arena::CreateMaybeMessage< ::reporting::FlushPriorityCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::FlushPriorityCall >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::UploadEncryptedRecordCall*
Arena::CreateMaybeMessage< ::reporting::UploadEncryptedRecordCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::UploadEncryptedRecordCall >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::ConfirmRecordUploadCall*
Arena::CreateMaybeMessage< ::reporting::ConfirmRecordUploadCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::ConfirmRecordUploadCall >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::HealthDataHistory*
Arena::CreateMaybeMessage< ::reporting::HealthDataHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::HealthDataHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::ERPHealthData*
Arena::CreateMaybeMessage< ::reporting::ERPHealthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::ERPHealthData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
