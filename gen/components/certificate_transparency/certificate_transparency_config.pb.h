// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: certificate_transparency_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_certificate_5ftransparency_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_certificate_5ftransparency_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "certificate_transparency.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_certificate_5ftransparency_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_certificate_5ftransparency_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_browser_certificate_transparency {
class CTConfig;
struct CTConfigDefaultTypeInternal;
extern CTConfigDefaultTypeInternal _CTConfig_default_instance_;
}  // namespace chrome_browser_certificate_transparency
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_certificate_transparency::CTConfig* Arena::CreateMaybeMessage<::chrome_browser_certificate_transparency::CTConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_certificate_transparency {

// ===================================================================

class CTConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_certificate_transparency.CTConfig) */ {
 public:
  inline CTConfig() : CTConfig(nullptr) {}
  ~CTConfig() override;
  explicit PROTOBUF_CONSTEXPR CTConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTConfig(const CTConfig& from);
  CTConfig(CTConfig&& from) noexcept
    : CTConfig() {
    *this = ::std::move(from);
  }

  inline CTConfig& operator=(const CTConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTConfig& operator=(CTConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CTConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTConfig* internal_default_instance() {
    return reinterpret_cast<const CTConfig*>(
               &_CTConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CTConfig& a, CTConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CTConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CTConfig& from);
  void MergeFrom(const CTConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CTConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_certificate_transparency.CTConfig";
  }
  protected:
  explicit CTConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPopularSctsFieldNumber = 3,
    kLogListFieldNumber = 2,
    kDisableCtEnforcementFieldNumber = 1,
  };
  // repeated bytes popular_scts = 3;
  int popular_scts_size() const;
  private:
  int _internal_popular_scts_size() const;
  public:
  void clear_popular_scts();
  const std::string& popular_scts(int index) const;
  std::string* mutable_popular_scts(int index);
  void set_popular_scts(int index, const std::string& value);
  void set_popular_scts(int index, std::string&& value);
  void set_popular_scts(int index, const char* value);
  void set_popular_scts(int index, const void* value, size_t size);
  std::string* add_popular_scts();
  void add_popular_scts(const std::string& value);
  void add_popular_scts(std::string&& value);
  void add_popular_scts(const char* value);
  void add_popular_scts(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& popular_scts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_popular_scts();
  private:
  const std::string& _internal_popular_scts(int index) const;
  std::string* _internal_add_popular_scts();
  public:

  // .chrome_browser_certificate_transparency.CTLogList log_list = 2;
  bool has_log_list() const;
  private:
  bool _internal_has_log_list() const;
  public:
  void clear_log_list();
  const ::chrome_browser_certificate_transparency::CTLogList& log_list() const;
  PROTOBUF_NODISCARD ::chrome_browser_certificate_transparency::CTLogList* release_log_list();
  ::chrome_browser_certificate_transparency::CTLogList* mutable_log_list();
  void set_allocated_log_list(::chrome_browser_certificate_transparency::CTLogList* log_list);
  private:
  const ::chrome_browser_certificate_transparency::CTLogList& _internal_log_list() const;
  ::chrome_browser_certificate_transparency::CTLogList* _internal_mutable_log_list();
  public:
  void unsafe_arena_set_allocated_log_list(
      ::chrome_browser_certificate_transparency::CTLogList* log_list);
  ::chrome_browser_certificate_transparency::CTLogList* unsafe_arena_release_log_list();

  // bool disable_ct_enforcement = 1;
  void clear_disable_ct_enforcement();
  bool disable_ct_enforcement() const;
  void set_disable_ct_enforcement(bool value);
  private:
  bool _internal_disable_ct_enforcement() const;
  void _internal_set_disable_ct_enforcement(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_certificate_transparency.CTConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> popular_scts_;
  ::chrome_browser_certificate_transparency::CTLogList* log_list_;
  bool disable_ct_enforcement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_certificate_5ftransparency_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTConfig

// bool disable_ct_enforcement = 1;
inline void CTConfig::clear_disable_ct_enforcement() {
  disable_ct_enforcement_ = false;
}
inline bool CTConfig::_internal_disable_ct_enforcement() const {
  return disable_ct_enforcement_;
}
inline bool CTConfig::disable_ct_enforcement() const {
  // @@protoc_insertion_point(field_get:chrome_browser_certificate_transparency.CTConfig.disable_ct_enforcement)
  return _internal_disable_ct_enforcement();
}
inline void CTConfig::_internal_set_disable_ct_enforcement(bool value) {
  
  disable_ct_enforcement_ = value;
}
inline void CTConfig::set_disable_ct_enforcement(bool value) {
  _internal_set_disable_ct_enforcement(value);
  // @@protoc_insertion_point(field_set:chrome_browser_certificate_transparency.CTConfig.disable_ct_enforcement)
}

// .chrome_browser_certificate_transparency.CTLogList log_list = 2;
inline bool CTConfig::_internal_has_log_list() const {
  return this != internal_default_instance() && log_list_ != nullptr;
}
inline bool CTConfig::has_log_list() const {
  return _internal_has_log_list();
}
inline const ::chrome_browser_certificate_transparency::CTLogList& CTConfig::_internal_log_list() const {
  const ::chrome_browser_certificate_transparency::CTLogList* p = log_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::chrome_browser_certificate_transparency::CTLogList&>(
      ::chrome_browser_certificate_transparency::_CTLogList_default_instance_);
}
inline const ::chrome_browser_certificate_transparency::CTLogList& CTConfig::log_list() const {
  // @@protoc_insertion_point(field_get:chrome_browser_certificate_transparency.CTConfig.log_list)
  return _internal_log_list();
}
inline void CTConfig::unsafe_arena_set_allocated_log_list(
    ::chrome_browser_certificate_transparency::CTLogList* log_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_list_);
  }
  log_list_ = log_list;
  if (log_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chrome_browser_certificate_transparency.CTConfig.log_list)
}
inline ::chrome_browser_certificate_transparency::CTLogList* CTConfig::release_log_list() {
  
  ::chrome_browser_certificate_transparency::CTLogList* temp = log_list_;
  log_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chrome_browser_certificate_transparency::CTLogList* CTConfig::unsafe_arena_release_log_list() {
  // @@protoc_insertion_point(field_release:chrome_browser_certificate_transparency.CTConfig.log_list)
  
  ::chrome_browser_certificate_transparency::CTLogList* temp = log_list_;
  log_list_ = nullptr;
  return temp;
}
inline ::chrome_browser_certificate_transparency::CTLogList* CTConfig::_internal_mutable_log_list() {
  
  if (log_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_certificate_transparency::CTLogList>(GetArenaForAllocation());
    log_list_ = p;
  }
  return log_list_;
}
inline ::chrome_browser_certificate_transparency::CTLogList* CTConfig::mutable_log_list() {
  ::chrome_browser_certificate_transparency::CTLogList* _msg = _internal_mutable_log_list();
  // @@protoc_insertion_point(field_mutable:chrome_browser_certificate_transparency.CTConfig.log_list)
  return _msg;
}
inline void CTConfig::set_allocated_log_list(::chrome_browser_certificate_transparency::CTLogList* log_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_list_);
  }
  if (log_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_list));
    if (message_arena != submessage_arena) {
      log_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_list, submessage_arena);
    }
    
  } else {
    
  }
  log_list_ = log_list;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_certificate_transparency.CTConfig.log_list)
}

// repeated bytes popular_scts = 3;
inline int CTConfig::_internal_popular_scts_size() const {
  return popular_scts_.size();
}
inline int CTConfig::popular_scts_size() const {
  return _internal_popular_scts_size();
}
inline void CTConfig::clear_popular_scts() {
  popular_scts_.Clear();
}
inline std::string* CTConfig::add_popular_scts() {
  std::string* _s = _internal_add_popular_scts();
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_certificate_transparency.CTConfig.popular_scts)
  return _s;
}
inline const std::string& CTConfig::_internal_popular_scts(int index) const {
  return popular_scts_.Get(index);
}
inline const std::string& CTConfig::popular_scts(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_certificate_transparency.CTConfig.popular_scts)
  return _internal_popular_scts(index);
}
inline std::string* CTConfig::mutable_popular_scts(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_certificate_transparency.CTConfig.popular_scts)
  return popular_scts_.Mutable(index);
}
inline void CTConfig::set_popular_scts(int index, const std::string& value) {
  popular_scts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chrome_browser_certificate_transparency.CTConfig.popular_scts)
}
inline void CTConfig::set_popular_scts(int index, std::string&& value) {
  popular_scts_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chrome_browser_certificate_transparency.CTConfig.popular_scts)
}
inline void CTConfig::set_popular_scts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  popular_scts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_certificate_transparency.CTConfig.popular_scts)
}
inline void CTConfig::set_popular_scts(int index, const void* value, size_t size) {
  popular_scts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_certificate_transparency.CTConfig.popular_scts)
}
inline std::string* CTConfig::_internal_add_popular_scts() {
  return popular_scts_.Add();
}
inline void CTConfig::add_popular_scts(const std::string& value) {
  popular_scts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_certificate_transparency.CTConfig.popular_scts)
}
inline void CTConfig::add_popular_scts(std::string&& value) {
  popular_scts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_certificate_transparency.CTConfig.popular_scts)
}
inline void CTConfig::add_popular_scts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  popular_scts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_certificate_transparency.CTConfig.popular_scts)
}
inline void CTConfig::add_popular_scts(const void* value, size_t size) {
  popular_scts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_certificate_transparency.CTConfig.popular_scts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CTConfig::popular_scts() const {
  // @@protoc_insertion_point(field_list:chrome_browser_certificate_transparency.CTConfig.popular_scts)
  return popular_scts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CTConfig::mutable_popular_scts() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_certificate_transparency.CTConfig.popular_scts)
  return &popular_scts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_certificate_transparency

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_certificate_5ftransparency_5fconfig_2eproto
