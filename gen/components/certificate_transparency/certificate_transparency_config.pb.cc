// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: certificate_transparency_config.proto

#include "certificate_transparency_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_certificate_transparency {
PROTOBUF_CONSTEXPR CTConfig::CTConfig(
    ::_pbi::ConstantInitialized)
  : popular_scts_()
  , log_list_(nullptr)
  , disable_ct_enforcement_(false){}
struct CTConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CTConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CTConfigDefaultTypeInternal() {}
  union {
    CTConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CTConfigDefaultTypeInternal _CTConfig_default_instance_;
}  // namespace chrome_browser_certificate_transparency
namespace chrome_browser_certificate_transparency {

// ===================================================================

class CTConfig::_Internal {
 public:
  static const ::chrome_browser_certificate_transparency::CTLogList& log_list(const CTConfig* msg);
};

const ::chrome_browser_certificate_transparency::CTLogList&
CTConfig::_Internal::log_list(const CTConfig* msg) {
  return *msg->log_list_;
}
void CTConfig::clear_log_list() {
  if (GetArenaForAllocation() == nullptr && log_list_ != nullptr) {
    delete log_list_;
  }
  log_list_ = nullptr;
}
CTConfig::CTConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  popular_scts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_certificate_transparency.CTConfig)
}
CTConfig::CTConfig(const CTConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      popular_scts_(from.popular_scts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_log_list()) {
    log_list_ = new ::chrome_browser_certificate_transparency::CTLogList(*from.log_list_);
  } else {
    log_list_ = nullptr;
  }
  disable_ct_enforcement_ = from.disable_ct_enforcement_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_certificate_transparency.CTConfig)
}

inline void CTConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&log_list_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_ct_enforcement_) -
    reinterpret_cast<char*>(&log_list_)) + sizeof(disable_ct_enforcement_));
}

CTConfig::~CTConfig() {
  // @@protoc_insertion_point(destructor:chrome_browser_certificate_transparency.CTConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CTConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete log_list_;
}

void CTConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CTConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_certificate_transparency.CTConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  popular_scts_.Clear();
  if (GetArenaForAllocation() == nullptr && log_list_ != nullptr) {
    delete log_list_;
  }
  log_list_ = nullptr;
  disable_ct_enforcement_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* CTConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool disable_ct_enforcement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          disable_ct_enforcement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_certificate_transparency.CTLogList log_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes popular_scts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_popular_scts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CTConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_certificate_transparency.CTConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disable_ct_enforcement = 1;
  if (this->_internal_disable_ct_enforcement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_disable_ct_enforcement(), target);
  }

  // .chrome_browser_certificate_transparency.CTLogList log_list = 2;
  if (this->_internal_has_log_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::log_list(this),
        _Internal::log_list(this).GetCachedSize(), target, stream);
  }

  // repeated bytes popular_scts = 3;
  for (int i = 0, n = this->_internal_popular_scts_size(); i < n; i++) {
    const auto& s = this->_internal_popular_scts(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_certificate_transparency.CTConfig)
  return target;
}

size_t CTConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_certificate_transparency.CTConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes popular_scts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(popular_scts_.size());
  for (int i = 0, n = popular_scts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      popular_scts_.Get(i));
  }

  // .chrome_browser_certificate_transparency.CTLogList log_list = 2;
  if (this->_internal_has_log_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_list_);
  }

  // bool disable_ct_enforcement = 1;
  if (this->_internal_disable_ct_enforcement() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CTConfig*>(
      &from));
}

void CTConfig::MergeFrom(const CTConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_certificate_transparency.CTConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  popular_scts_.MergeFrom(from.popular_scts_);
  if (from._internal_has_log_list()) {
    _internal_mutable_log_list()->::chrome_browser_certificate_transparency::CTLogList::MergeFrom(from._internal_log_list());
  }
  if (from._internal_disable_ct_enforcement() != 0) {
    _internal_set_disable_ct_enforcement(from._internal_disable_ct_enforcement());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CTConfig::CopyFrom(const CTConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_certificate_transparency.CTConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTConfig::IsInitialized() const {
  return true;
}

void CTConfig::InternalSwap(CTConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  popular_scts_.InternalSwap(&other->popular_scts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CTConfig, disable_ct_enforcement_)
      + sizeof(CTConfig::disable_ct_enforcement_)
      - PROTOBUF_FIELD_OFFSET(CTConfig, log_list_)>(
          reinterpret_cast<char*>(&log_list_),
          reinterpret_cast<char*>(&other->log_list_));
}

std::string CTConfig::GetTypeName() const {
  return "chrome_browser_certificate_transparency.CTConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_certificate_transparency
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_certificate_transparency::CTConfig*
Arena::CreateMaybeMessage< ::chrome_browser_certificate_transparency::CTConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_certificate_transparency::CTConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
