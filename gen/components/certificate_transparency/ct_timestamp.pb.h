// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ct_timestamp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ct_5ftimestamp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ct_5ftimestamp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ct_5ftimestamp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ct_5ftimestamp_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_browser_certificate_transparency {
class CTTimestamp;
struct CTTimestampDefaultTypeInternal;
extern CTTimestampDefaultTypeInternal _CTTimestamp_default_instance_;
}  // namespace chrome_browser_certificate_transparency
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_certificate_transparency::CTTimestamp* Arena::CreateMaybeMessage<::chrome_browser_certificate_transparency::CTTimestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_certificate_transparency {

// ===================================================================

class CTTimestamp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_certificate_transparency.CTTimestamp) */ {
 public:
  inline CTTimestamp() : CTTimestamp(nullptr) {}
  ~CTTimestamp() override;
  explicit PROTOBUF_CONSTEXPR CTTimestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTTimestamp(const CTTimestamp& from);
  CTTimestamp(CTTimestamp&& from) noexcept
    : CTTimestamp() {
    *this = ::std::move(from);
  }

  inline CTTimestamp& operator=(const CTTimestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTTimestamp& operator=(CTTimestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CTTimestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTTimestamp* internal_default_instance() {
    return reinterpret_cast<const CTTimestamp*>(
               &_CTTimestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CTTimestamp& a, CTTimestamp& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CTTimestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTTimestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTTimestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTTimestamp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CTTimestamp& from);
  void MergeFrom(const CTTimestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CTTimestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_certificate_transparency.CTTimestamp";
  }
  protected:
  explicit CTTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // int32 nanos = 2;
  void clear_nanos();
  int32_t nanos() const;
  void set_nanos(int32_t value);
  private:
  int32_t _internal_nanos() const;
  void _internal_set_nanos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_certificate_transparency.CTTimestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t seconds_;
  int32_t nanos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ct_5ftimestamp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTTimestamp

// int64 seconds = 1;
inline void CTTimestamp::clear_seconds() {
  seconds_ = int64_t{0};
}
inline int64_t CTTimestamp::_internal_seconds() const {
  return seconds_;
}
inline int64_t CTTimestamp::seconds() const {
  // @@protoc_insertion_point(field_get:chrome_browser_certificate_transparency.CTTimestamp.seconds)
  return _internal_seconds();
}
inline void CTTimestamp::_internal_set_seconds(int64_t value) {
  
  seconds_ = value;
}
inline void CTTimestamp::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:chrome_browser_certificate_transparency.CTTimestamp.seconds)
}

// int32 nanos = 2;
inline void CTTimestamp::clear_nanos() {
  nanos_ = 0;
}
inline int32_t CTTimestamp::_internal_nanos() const {
  return nanos_;
}
inline int32_t CTTimestamp::nanos() const {
  // @@protoc_insertion_point(field_get:chrome_browser_certificate_transparency.CTTimestamp.nanos)
  return _internal_nanos();
}
inline void CTTimestamp::_internal_set_nanos(int32_t value) {
  
  nanos_ = value;
}
inline void CTTimestamp::set_nanos(int32_t value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:chrome_browser_certificate_transparency.CTTimestamp.nanos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_certificate_transparency

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ct_5ftimestamp_2eproto
