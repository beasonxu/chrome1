// components/web_cache/public/mojom/web_cache.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_WEB_CACHE_PUBLIC_MOJOM_WEB_CACHE_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_WEB_CACHE_PUBLIC_MOJOM_WEB_CACHE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace web_cache {
namespace mojom {
namespace internal {

class ValidationContext;
class  WebCache_SetCacheCapacity_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t capacity;

 private:
  friend class mojo::internal::MessageFragment<WebCache_SetCacheCapacity_Params_Data>;

  WebCache_SetCacheCapacity_Params_Data();
  ~WebCache_SetCacheCapacity_Params_Data() = delete;
};
static_assert(sizeof(WebCache_SetCacheCapacity_Params_Data) == 16,
              "Bad sizeof(WebCache_SetCacheCapacity_Params_Data)");
class  WebCache_ClearCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t on_navigation : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<WebCache_ClearCache_Params_Data>;

  WebCache_ClearCache_Params_Data();
  ~WebCache_ClearCache_Params_Data() = delete;
};
static_assert(sizeof(WebCache_ClearCache_Params_Data) == 16,
              "Bad sizeof(WebCache_ClearCache_Params_Data)");

}  // namespace internal


class WebCache_SetCacheCapacity_ParamsDataView {
 public:
  WebCache_SetCacheCapacity_ParamsDataView() = default;

  WebCache_SetCacheCapacity_ParamsDataView(
      internal::WebCache_SetCacheCapacity_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t capacity() const {
    return data_->capacity;
  }
 private:
  internal::WebCache_SetCacheCapacity_Params_Data* data_ = nullptr;
};



class WebCache_ClearCache_ParamsDataView {
 public:
  WebCache_ClearCache_ParamsDataView() = default;

  WebCache_ClearCache_ParamsDataView(
      internal::WebCache_ClearCache_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool on_navigation() const {
    return data_->on_navigation;
  }
 private:
  internal::WebCache_ClearCache_Params_Data* data_ = nullptr;
};





}  // namespace mojom
}  // namespace web_cache

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_WEB_CACHE_PUBLIC_MOJOM_WEB_CACHE_MOJOM_PARAMS_DATA_H_