// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/browser_ui/accessibility/FontSizePrefs

#ifndef org_chromium_components_browser_ui_accessibility_FontSizePrefs_JNI
#define org_chromium_components_browser_ui_accessibility_FontSizePrefs_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_browser_1ui_accessibility_FontSizePrefs[];
const char kClassPath_org_chromium_components_browser_1ui_accessibility_FontSizePrefs[] =
    "org/chromium/components/browser_ui/accessibility/FontSizePrefs";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz(nullptr);
#ifndef org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz_defined
#define org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz_defined
inline jclass org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_browser_1ui_accessibility_FontSizePrefs,
      &g_org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace browser_ui {

static jlong JNI_FontSizePrefs_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& browserContextHandle);

JNI_GENERATOR_EXPORT jlong Java_J_N_MsRweqIy(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject browserContextHandle) {
  return JNI_FontSizePrefs_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, browserContextHandle));
}

JNI_GENERATOR_EXPORT void Java_J_N_MVamzRn1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFontSizePrefsAndroid) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M3_14WQmR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFontSizePrefsAndroid,
    jobject caller,
    jfloat fontScaleFactor) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFontScaleFactor");
  return native->SetFontScaleFactor(env, base::android::JavaParamRef<jobject>(env, caller),
      fontScaleFactor);
}

JNI_GENERATOR_EXPORT jfloat Java_J_N_Maawwu0p(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFontSizePrefsAndroid,
    jobject caller) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFontScaleFactor", 0);
  return native->GetFontScaleFactor(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MYwzxNqz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFontSizePrefsAndroid,
    jobject caller) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetForceEnableZoom", false);
  return native->GetForceEnableZoom(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MkBbXiXK(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeFontSizePrefsAndroid,
    jobject caller,
    jboolean enabled) {
  FontSizePrefsAndroid* native =
      reinterpret_cast<FontSizePrefsAndroid*>(nativeFontSizePrefsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetForceEnableZoom");
  return native->SetForceEnableZoom(env, base::android::JavaParamRef<jobject>(env, caller),
      enabled);
}


static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_accessibility_FontSizePrefs_onFontScaleFactorChanged(nullptr);
static void Java_FontSizePrefs_onFontScaleFactorChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jfloat fontScaleFactor) {
  jclass clazz = org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onFontScaleFactorChanged",
          "(F)V",
&g_org_chromium_components_browser_1ui_accessibility_FontSizePrefs_onFontScaleFactorChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, fontScaleFactor);
}

static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_accessibility_FontSizePrefs_onForceEnableZoomChanged(nullptr);
static void Java_FontSizePrefs_onForceEnableZoomChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean enabled) {
  jclass clazz = org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_browser_1ui_accessibility_FontSizePrefs_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onForceEnableZoomChanged",
          "(Z)V",
&g_org_chromium_components_browser_1ui_accessibility_FontSizePrefs_onForceEnableZoomChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, enabled);
}

}  // namespace browser_ui

#endif  // org_chromium_components_browser_ui_accessibility_FontSizePrefs_JNI
