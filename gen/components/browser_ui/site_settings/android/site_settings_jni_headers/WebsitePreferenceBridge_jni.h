// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/browser_ui/site_settings/WebsitePreferenceBridge

#ifndef org_chromium_components_browser_ui_site_settings_WebsitePreferenceBridge_JNI
#define org_chromium_components_browser_ui_site_settings_WebsitePreferenceBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge[];
const char kClassPath_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge[] =
    "org/chromium/components/browser_ui/site_settings/WebsitePreferenceBridge";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback[];
const char
    kClassPath_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback[]
    =
    "org/chromium/components/browser_ui/site_settings/WebsitePreferenceBridge$StorageInfoClearedCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(nullptr);
#ifndef org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz_defined
#define org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz_defined
inline jclass
    org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge,
      &g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_clazz(nullptr);
#ifndef org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_clazz_defined
#define org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_clazz_defined
inline jclass
    org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback,
      &g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jboolean JNI_WebsitePreferenceBridge_IsNotificationEmbargoedForOrigin(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& origin);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mi9B_1Rpt(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring origin) {
  return JNI_WebsitePreferenceBridge_IsNotificationEmbargoedForOrigin(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle),
      base::android::JavaParamRef<jstring>(env, origin));
}

static void JNI_WebsitePreferenceBridge_ReportNotificationRevokedForOrigin(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& origin,
    jint newSettingValue);

JNI_GENERATOR_EXPORT void Java_J_N_M_000241c3w6w(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring origin,
    jint newSettingValue) {
  return JNI_WebsitePreferenceBridge_ReportNotificationRevokedForOrigin(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle),
      base::android::JavaParamRef<jstring>(env, origin), newSettingValue);
}

static void JNI_WebsitePreferenceBridge_ClearBannerData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& origin);

JNI_GENERATOR_EXPORT void Java_J_N_MyQGLOqU(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring origin) {
  return JNI_WebsitePreferenceBridge_ClearBannerData(env, base::android::JavaParamRef<jobject>(env,
      browserContextHandle), base::android::JavaParamRef<jstring>(env, origin));
}

static void JNI_WebsitePreferenceBridge_ClearMediaLicenses(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& origin);

JNI_GENERATOR_EXPORT void Java_J_N_MSoF8bn2(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring origin) {
  return JNI_WebsitePreferenceBridge_ClearMediaLicenses(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle),
      base::android::JavaParamRef<jstring>(env, origin));
}

static void JNI_WebsitePreferenceBridge_ClearCookieData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& path);

JNI_GENERATOR_EXPORT void Java_J_N_Mks53EZS(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring path) {
  return JNI_WebsitePreferenceBridge_ClearCookieData(env, base::android::JavaParamRef<jobject>(env,
      browserContextHandle), base::android::JavaParamRef<jstring>(env, path));
}

static void JNI_WebsitePreferenceBridge_ClearLocalStorageData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& path,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_M101q5hN(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring path,
    jobject callback) {
  return JNI_WebsitePreferenceBridge_ClearLocalStorageData(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle),
      base::android::JavaParamRef<jstring>(env, path), base::android::JavaParamRef<jobject>(env,
      callback));
}

static void JNI_WebsitePreferenceBridge_ClearStorageData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& origin,
    jint type,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MykycHKg(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring origin,
    jint type,
    jobject callback) {
  return JNI_WebsitePreferenceBridge_ClearStorageData(env, base::android::JavaParamRef<jobject>(env,
      browserContextHandle), base::android::JavaParamRef<jstring>(env, origin), type,
      base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_WebsitePreferenceBridge_GetChosenObjects(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint type,
    const base::android::JavaParamRef<jobject>& list);

JNI_GENERATOR_EXPORT void Java_J_N_MA5QWuba(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint type,
    jobject list) {
  return JNI_WebsitePreferenceBridge_GetChosenObjects(env, base::android::JavaParamRef<jobject>(env,
      browserContextHandle), type, base::android::JavaParamRef<jobject>(env, list));
}

static void JNI_WebsitePreferenceBridge_ResetNotificationsSettingsForTest(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle);

JNI_GENERATOR_EXPORT void Java_J_N_MOHgUpop_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle) {
  return JNI_WebsitePreferenceBridge_ResetNotificationsSettingsForTest(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle));
}

static void JNI_WebsitePreferenceBridge_RevokeObjectPermission(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint type,
    const base::android::JavaParamRef<jstring>& origin,
    const base::android::JavaParamRef<jstring>& object);

JNI_GENERATOR_EXPORT void Java_J_N_Mw9TjMNp(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint type,
    jstring origin,
    jstring object) {
  return JNI_WebsitePreferenceBridge_RevokeObjectPermission(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), type,
      base::android::JavaParamRef<jstring>(env, origin), base::android::JavaParamRef<jstring>(env,
      object));
}

static jboolean JNI_WebsitePreferenceBridge_IsContentSettingsPatternValid(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& pattern);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mo_000246Pn_00024c(
    JNIEnv* env,
    jclass jcaller,
    jstring pattern) {
  return JNI_WebsitePreferenceBridge_IsContentSettingsPatternValid(env,
      base::android::JavaParamRef<jstring>(env, pattern));
}

static jboolean JNI_WebsitePreferenceBridge_UrlMatchesContentSettingsPattern(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& pattern);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MDL_000244rLc(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jstring pattern) {
  return JNI_WebsitePreferenceBridge_UrlMatchesContentSettingsPattern(env,
      base::android::JavaParamRef<jstring>(env, url), base::android::JavaParamRef<jstring>(env,
      pattern));
}

static void JNI_WebsitePreferenceBridge_FetchStorageInfo(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MlZM1XeP(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jobject callback) {
  return JNI_WebsitePreferenceBridge_FetchStorageInfo(env, base::android::JavaParamRef<jobject>(env,
      browserContextHandle), base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_WebsitePreferenceBridge_FetchLocalStorageInfo(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jobject>& callback,
    jboolean includeImportant);

JNI_GENERATOR_EXPORT void Java_J_N_MvKW9dxN(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jobject callback,
    jboolean includeImportant) {
  return JNI_WebsitePreferenceBridge_FetchLocalStorageInfo(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle),
      base::android::JavaParamRef<jobject>(env, callback), includeImportant);
}

static void JNI_WebsitePreferenceBridge_GetOriginsForPermission(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingsType,
    const base::android::JavaParamRef<jobject>& list,
    jboolean managedOnly);

JNI_GENERATOR_EXPORT void Java_J_N_MexN59P3(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingsType,
    jobject list,
    jboolean managedOnly) {
  return JNI_WebsitePreferenceBridge_GetOriginsForPermission(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingsType,
      base::android::JavaParamRef<jobject>(env, list), managedOnly);
}

static jint JNI_WebsitePreferenceBridge_GetPermissionSettingForOrigin(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingsType,
    const base::android::JavaParamRef<jstring>& origin,
    const base::android::JavaParamRef<jstring>& embedder);

JNI_GENERATOR_EXPORT jint Java_J_N_MrCE1oma(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingsType,
    jstring origin,
    jstring embedder) {
  return JNI_WebsitePreferenceBridge_GetPermissionSettingForOrigin(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingsType,
      base::android::JavaParamRef<jstring>(env, origin), base::android::JavaParamRef<jstring>(env,
      embedder));
}

static void JNI_WebsitePreferenceBridge_SetPermissionSettingForOrigin(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingsType,
    const base::android::JavaParamRef<jstring>& origin,
    const base::android::JavaParamRef<jstring>& embedder,
    jint value);

JNI_GENERATOR_EXPORT void Java_J_N_MKKuVgiF(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingsType,
    jstring origin,
    jstring embedder,
    jint value) {
  return JNI_WebsitePreferenceBridge_SetPermissionSettingForOrigin(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingsType,
      base::android::JavaParamRef<jstring>(env, origin), base::android::JavaParamRef<jstring>(env,
      embedder), value);
}

static jboolean JNI_WebsitePreferenceBridge_IsDSEOrigin(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& origin);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MwP0orC3(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring origin) {
  return JNI_WebsitePreferenceBridge_IsDSEOrigin(env, base::android::JavaParamRef<jobject>(env,
      browserContextHandle), base::android::JavaParamRef<jstring>(env, origin));
}

static jboolean JNI_WebsitePreferenceBridge_GetAdBlockingActivated(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& origin);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mq9o4NGp(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring origin) {
  return JNI_WebsitePreferenceBridge_GetAdBlockingActivated(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle),
      base::android::JavaParamRef<jstring>(env, origin));
}

static jboolean JNI_WebsitePreferenceBridge_IsContentSettingEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MJSt3Ocq(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType) {
  return JNI_WebsitePreferenceBridge_IsContentSettingEnabled(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType);
}

static jboolean JNI_WebsitePreferenceBridge_IsContentSettingManaged(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MnAiqOhu(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType) {
  return JNI_WebsitePreferenceBridge_IsContentSettingManaged(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType);
}

static jboolean JNI_WebsitePreferenceBridge_IsCookieDeletionDisabled(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    const base::android::JavaParamRef<jstring>& origin);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M9l6T3Dg(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jstring origin) {
  return JNI_WebsitePreferenceBridge_IsCookieDeletionDisabled(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle),
      base::android::JavaParamRef<jstring>(env, origin));
}

static void JNI_WebsitePreferenceBridge_SetContentSettingEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType,
    jboolean allow);

JNI_GENERATOR_EXPORT void Java_J_N_MM1KTgoi(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType,
    jboolean allow) {
  return JNI_WebsitePreferenceBridge_SetContentSettingEnabled(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType, allow);
}

static void JNI_WebsitePreferenceBridge_GetContentSettingsExceptions(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingsType,
    const base::android::JavaParamRef<jobject>& list);

JNI_GENERATOR_EXPORT void Java_J_N_MI_00024w5f76(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingsType,
    jobject list) {
  return JNI_WebsitePreferenceBridge_GetContentSettingsExceptions(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingsType,
      base::android::JavaParamRef<jobject>(env, list));
}

static jint JNI_WebsitePreferenceBridge_GetContentSetting(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType,
    const base::android::JavaParamRef<jobject>& primaryUrl,
    const base::android::JavaParamRef<jobject>& secondaryUrl);

JNI_GENERATOR_EXPORT jint Java_J_N_MFhlM_00024PH(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType,
    jobject primaryUrl,
    jobject secondaryUrl) {
  return JNI_WebsitePreferenceBridge_GetContentSetting(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType,
      base::android::JavaParamRef<jobject>(env, primaryUrl),
      base::android::JavaParamRef<jobject>(env, secondaryUrl));
}

static void JNI_WebsitePreferenceBridge_SetContentSettingDefaultScope(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType,
    const base::android::JavaParamRef<jobject>& primaryUrl,
    const base::android::JavaParamRef<jobject>& secondaryUrl,
    jint setting);

JNI_GENERATOR_EXPORT void Java_J_N_M3qJKRL4(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType,
    jobject primaryUrl,
    jobject secondaryUrl,
    jint setting) {
  return JNI_WebsitePreferenceBridge_SetContentSettingDefaultScope(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType,
      base::android::JavaParamRef<jobject>(env, primaryUrl),
      base::android::JavaParamRef<jobject>(env, secondaryUrl), setting);
}

static void JNI_WebsitePreferenceBridge_SetContentSettingCustomScope(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType,
    const base::android::JavaParamRef<jstring>& primaryPattern,
    const base::android::JavaParamRef<jstring>& secondaryPattern,
    jint setting);

JNI_GENERATOR_EXPORT void Java_J_N_M2hAJhrO(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType,
    jstring primaryPattern,
    jstring secondaryPattern,
    jint setting) {
  return JNI_WebsitePreferenceBridge_SetContentSettingCustomScope(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType,
      base::android::JavaParamRef<jstring>(env, primaryPattern),
      base::android::JavaParamRef<jstring>(env, secondaryPattern), setting);
}

static jint JNI_WebsitePreferenceBridge_GetDefaultContentSetting(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType);

JNI_GENERATOR_EXPORT jint Java_J_N_M7ddkyN4(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType) {
  return JNI_WebsitePreferenceBridge_GetDefaultContentSetting(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType);
}

static void JNI_WebsitePreferenceBridge_SetDefaultContentSetting(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType,
    jint setting);

JNI_GENERATOR_EXPORT void Java_J_N_MRZB6KDK(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType,
    jint setting) {
  return JNI_WebsitePreferenceBridge_SetDefaultContentSetting(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType, setting);
}

static jboolean JNI_WebsitePreferenceBridge_IsContentSettingUserModifiable(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MB23OvTV(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType) {
  return JNI_WebsitePreferenceBridge_IsContentSettingUserModifiable(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType);
}

static jboolean JNI_WebsitePreferenceBridge_IsContentSettingManagedByCustodian(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle,
    jint contentSettingType);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M1hZJgqW(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle,
    jint contentSettingType) {
  return JNI_WebsitePreferenceBridge_IsContentSettingManagedByCustodian(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle), contentSettingType);
}

static jboolean JNI_WebsitePreferenceBridge_GetLocationAllowedByPolicy(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M_1_1mL5j3(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle) {
  return JNI_WebsitePreferenceBridge_GetLocationAllowedByPolicy(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle));
}


static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_onStorageInfoCleared(nullptr);
static void Java_StorageInfoClearedCallback_onStorageInfoCleared(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onStorageInfoCleared",
          "()V",
&g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_00024StorageInfoClearedCallback_onStorageInfoCleared);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_insertPermissionInfoIntoList(nullptr);
static void Java_WebsitePreferenceBridge_insertPermissionInfoIntoList(JNIEnv* env, JniIntWrapper
    type,
    const base::android::JavaRef<jobject>& list,
    const base::android::JavaRef<jstring>& origin,
    const base::android::JavaRef<jstring>& embedder,
    jboolean isEmbargoed) {
  jclass clazz =
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "insertPermissionInfoIntoList",
          "(ILjava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;Z)V",
&g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_insertPermissionInfoIntoList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(type), list.obj(), origin.obj(), embedder.obj(),
              isEmbargoed);
}

static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_insertStorageInfoIntoList(nullptr);
static void Java_WebsitePreferenceBridge_insertStorageInfoIntoList(JNIEnv* env, const
    base::android::JavaRef<jobject>& list,
    const base::android::JavaRef<jstring>& host,
    JniIntWrapper type,
    jlong size) {
  jclass clazz =
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "insertStorageInfoIntoList",
          "(Ljava/util/ArrayList;Ljava/lang/String;IJ)V",
&g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_insertStorageInfoIntoList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, list.obj(), host.obj(), as_jint(type), size);
}

static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_createStorageInfoList(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_WebsitePreferenceBridge_createStorageInfoList(JNIEnv* env) {
  jclass clazz =
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createStorageInfoList",
          "()Ljava/lang/Object;",
&g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_createStorageInfoList);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_createLocalStorageInfoMap(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_WebsitePreferenceBridge_createLocalStorageInfoMap(JNIEnv* env) {
  jclass clazz =
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createLocalStorageInfoMap",
          "()Ljava/lang/Object;",
&g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_createLocalStorageInfoMap);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_insertLocalStorageInfoIntoMap(nullptr);
static void Java_WebsitePreferenceBridge_insertLocalStorageInfoIntoMap(JNIEnv* env, const
    base::android::JavaRef<jobject>& map,
    const base::android::JavaRef<jstring>& origin,
    jlong size,
    jboolean important) {
  jclass clazz =
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "insertLocalStorageInfoIntoMap",
          "(Ljava/util/HashMap;Ljava/lang/String;JZ)V",
&g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_insertLocalStorageInfoIntoMap);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, map.obj(), origin.obj(), size, important);
}

static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_insertChosenObjectInfoIntoList(nullptr);
static void Java_WebsitePreferenceBridge_insertChosenObjectInfoIntoList(JNIEnv* env, const
    base::android::JavaRef<jobject>& list,
    JniIntWrapper contentSettingsType,
    const base::android::JavaRef<jstring>& origin,
    const base::android::JavaRef<jstring>& name,
    const base::android::JavaRef<jstring>& object,
    jboolean isManaged) {
  jclass clazz =
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "insertChosenObjectInfoIntoList",
          "(Ljava/util/ArrayList;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V",
&g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_insertChosenObjectInfoIntoList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, list.obj(), as_jint(contentSettingsType), origin.obj(),
              name.obj(), object.obj(), isManaged);
}

static std::atomic<jmethodID>
    g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_addContentSettingExceptionToList(nullptr);
static void Java_WebsitePreferenceBridge_addContentSettingExceptionToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& list,
    JniIntWrapper contentSettingsType,
    const base::android::JavaRef<jstring>& primaryPattern,
    const base::android::JavaRef<jstring>& secondaryPattern,
    JniIntWrapper contentSetting,
    const base::android::JavaRef<jstring>& source,
    jboolean isEmbargoed) {
  jclass clazz =
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addContentSettingExceptionToList",
          "(Ljava/util/ArrayList;ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;Z)V",
&g_org_chromium_components_browser_1ui_site_1settings_WebsitePreferenceBridge_addContentSettingExceptionToList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, list.obj(), as_jint(contentSettingsType),
              primaryPattern.obj(), secondaryPattern.obj(), as_jint(contentSetting), source.obj(),
              isEmbargoed);
}

#endif  // org_chromium_components_browser_ui_site_settings_WebsitePreferenceBridge_JNI
