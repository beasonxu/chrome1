// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: url_param_filter_classification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_url_5fparam_5ffilter_5fclassification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_url_5fparam_5ffilter_5fclassification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_url_5fparam_5ffilter_5fclassification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_url_5fparam_5ffilter_5fclassification_2eproto {
  static const uint32_t offsets[];
};
namespace url_param_filter {
class FilterClassification;
struct FilterClassificationDefaultTypeInternal;
extern FilterClassificationDefaultTypeInternal _FilterClassification_default_instance_;
class FilterClassifications;
struct FilterClassificationsDefaultTypeInternal;
extern FilterClassificationsDefaultTypeInternal _FilterClassifications_default_instance_;
class FilterParameter;
struct FilterParameterDefaultTypeInternal;
extern FilterParameterDefaultTypeInternal _FilterParameter_default_instance_;
}  // namespace url_param_filter
PROTOBUF_NAMESPACE_OPEN
template<> ::url_param_filter::FilterClassification* Arena::CreateMaybeMessage<::url_param_filter::FilterClassification>(Arena*);
template<> ::url_param_filter::FilterClassifications* Arena::CreateMaybeMessage<::url_param_filter::FilterClassifications>(Arena*);
template<> ::url_param_filter::FilterParameter* Arena::CreateMaybeMessage<::url_param_filter::FilterParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace url_param_filter {

enum FilterClassification_SiteRole : int {
  FilterClassification_SiteRole_SITE_ROLE_UNKNOWN = 0,
  FilterClassification_SiteRole_SOURCE = 1,
  FilterClassification_SiteRole_DESTINATION = 2
};
bool FilterClassification_SiteRole_IsValid(int value);
constexpr FilterClassification_SiteRole FilterClassification_SiteRole_SiteRole_MIN = FilterClassification_SiteRole_SITE_ROLE_UNKNOWN;
constexpr FilterClassification_SiteRole FilterClassification_SiteRole_SiteRole_MAX = FilterClassification_SiteRole_DESTINATION;
constexpr int FilterClassification_SiteRole_SiteRole_ARRAYSIZE = FilterClassification_SiteRole_SiteRole_MAX + 1;

const std::string& FilterClassification_SiteRole_Name(FilterClassification_SiteRole value);
template<typename T>
inline const std::string& FilterClassification_SiteRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilterClassification_SiteRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilterClassification_SiteRole_Name.");
  return FilterClassification_SiteRole_Name(static_cast<FilterClassification_SiteRole>(enum_t_value));
}
bool FilterClassification_SiteRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FilterClassification_SiteRole* value);
enum FilterClassification_UseCase : int {
  FilterClassification_UseCase_USE_CASE_UNKNOWN = 0,
  FilterClassification_UseCase_CROSS_OTR = 1,
  FilterClassification_UseCase_CROSS_SITE_NO_3PC = 2
};
bool FilterClassification_UseCase_IsValid(int value);
constexpr FilterClassification_UseCase FilterClassification_UseCase_UseCase_MIN = FilterClassification_UseCase_USE_CASE_UNKNOWN;
constexpr FilterClassification_UseCase FilterClassification_UseCase_UseCase_MAX = FilterClassification_UseCase_CROSS_SITE_NO_3PC;
constexpr int FilterClassification_UseCase_UseCase_ARRAYSIZE = FilterClassification_UseCase_UseCase_MAX + 1;

const std::string& FilterClassification_UseCase_Name(FilterClassification_UseCase value);
template<typename T>
inline const std::string& FilterClassification_UseCase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilterClassification_UseCase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilterClassification_UseCase_Name.");
  return FilterClassification_UseCase_Name(static_cast<FilterClassification_UseCase>(enum_t_value));
}
bool FilterClassification_UseCase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FilterClassification_UseCase* value);
enum FilterClassification_SiteMatchType : int {
  FilterClassification_SiteMatchType_MATCH_TYPE_UNKNOWN = 0,
  FilterClassification_SiteMatchType_EXACT_ETLD_PLUS_ONE = 1,
  FilterClassification_SiteMatchType_ETLD_WILDCARD = 2
};
bool FilterClassification_SiteMatchType_IsValid(int value);
constexpr FilterClassification_SiteMatchType FilterClassification_SiteMatchType_SiteMatchType_MIN = FilterClassification_SiteMatchType_MATCH_TYPE_UNKNOWN;
constexpr FilterClassification_SiteMatchType FilterClassification_SiteMatchType_SiteMatchType_MAX = FilterClassification_SiteMatchType_ETLD_WILDCARD;
constexpr int FilterClassification_SiteMatchType_SiteMatchType_ARRAYSIZE = FilterClassification_SiteMatchType_SiteMatchType_MAX + 1;

const std::string& FilterClassification_SiteMatchType_Name(FilterClassification_SiteMatchType value);
template<typename T>
inline const std::string& FilterClassification_SiteMatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilterClassification_SiteMatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilterClassification_SiteMatchType_Name.");
  return FilterClassification_SiteMatchType_Name(static_cast<FilterClassification_SiteMatchType>(enum_t_value));
}
bool FilterClassification_SiteMatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FilterClassification_SiteMatchType* value);
// ===================================================================

class FilterParameter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:url_param_filter.FilterParameter) */ {
 public:
  inline FilterParameter() : FilterParameter(nullptr) {}
  ~FilterParameter() override;
  explicit PROTOBUF_CONSTEXPR FilterParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterParameter(const FilterParameter& from);
  FilterParameter(FilterParameter&& from) noexcept
    : FilterParameter() {
    *this = ::std::move(from);
  }

  inline FilterParameter& operator=(const FilterParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterParameter& operator=(FilterParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FilterParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterParameter* internal_default_instance() {
    return reinterpret_cast<const FilterParameter*>(
               &_FilterParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FilterParameter& a, FilterParameter& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FilterParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterParameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FilterParameter& from);
  void MergeFrom(const FilterParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "url_param_filter.FilterParameter";
  }
  protected:
  explicit FilterParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:url_param_filter.FilterParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_url_5fparam_5ffilter_5fclassification_2eproto;
};
// -------------------------------------------------------------------

class FilterClassification final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:url_param_filter.FilterClassification) */ {
 public:
  inline FilterClassification() : FilterClassification(nullptr) {}
  ~FilterClassification() override;
  explicit PROTOBUF_CONSTEXPR FilterClassification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterClassification(const FilterClassification& from);
  FilterClassification(FilterClassification&& from) noexcept
    : FilterClassification() {
    *this = ::std::move(from);
  }

  inline FilterClassification& operator=(const FilterClassification& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterClassification& operator=(FilterClassification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FilterClassification& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterClassification* internal_default_instance() {
    return reinterpret_cast<const FilterClassification*>(
               &_FilterClassification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FilterClassification& a, FilterClassification& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FilterClassification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterClassification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterClassification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterClassification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FilterClassification& from);
  void MergeFrom(const FilterClassification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterClassification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "url_param_filter.FilterClassification";
  }
  protected:
  explicit FilterClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FilterClassification_SiteRole SiteRole;
  static constexpr SiteRole SITE_ROLE_UNKNOWN =
    FilterClassification_SiteRole_SITE_ROLE_UNKNOWN;
  static constexpr SiteRole SOURCE =
    FilterClassification_SiteRole_SOURCE;
  static constexpr SiteRole DESTINATION =
    FilterClassification_SiteRole_DESTINATION;
  static inline bool SiteRole_IsValid(int value) {
    return FilterClassification_SiteRole_IsValid(value);
  }
  static constexpr SiteRole SiteRole_MIN =
    FilterClassification_SiteRole_SiteRole_MIN;
  static constexpr SiteRole SiteRole_MAX =
    FilterClassification_SiteRole_SiteRole_MAX;
  static constexpr int SiteRole_ARRAYSIZE =
    FilterClassification_SiteRole_SiteRole_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SiteRole_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SiteRole>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SiteRole_Name.");
    return FilterClassification_SiteRole_Name(enum_t_value);
  }
  static inline bool SiteRole_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SiteRole* value) {
    return FilterClassification_SiteRole_Parse(name, value);
  }

  typedef FilterClassification_UseCase UseCase;
  static constexpr UseCase USE_CASE_UNKNOWN =
    FilterClassification_UseCase_USE_CASE_UNKNOWN;
  static constexpr UseCase CROSS_OTR =
    FilterClassification_UseCase_CROSS_OTR;
  static constexpr UseCase CROSS_SITE_NO_3PC =
    FilterClassification_UseCase_CROSS_SITE_NO_3PC;
  static inline bool UseCase_IsValid(int value) {
    return FilterClassification_UseCase_IsValid(value);
  }
  static constexpr UseCase UseCase_MIN =
    FilterClassification_UseCase_UseCase_MIN;
  static constexpr UseCase UseCase_MAX =
    FilterClassification_UseCase_UseCase_MAX;
  static constexpr int UseCase_ARRAYSIZE =
    FilterClassification_UseCase_UseCase_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UseCase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UseCase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UseCase_Name.");
    return FilterClassification_UseCase_Name(enum_t_value);
  }
  static inline bool UseCase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UseCase* value) {
    return FilterClassification_UseCase_Parse(name, value);
  }

  typedef FilterClassification_SiteMatchType SiteMatchType;
  static constexpr SiteMatchType MATCH_TYPE_UNKNOWN =
    FilterClassification_SiteMatchType_MATCH_TYPE_UNKNOWN;
  static constexpr SiteMatchType EXACT_ETLD_PLUS_ONE =
    FilterClassification_SiteMatchType_EXACT_ETLD_PLUS_ONE;
  static constexpr SiteMatchType ETLD_WILDCARD =
    FilterClassification_SiteMatchType_ETLD_WILDCARD;
  static inline bool SiteMatchType_IsValid(int value) {
    return FilterClassification_SiteMatchType_IsValid(value);
  }
  static constexpr SiteMatchType SiteMatchType_MIN =
    FilterClassification_SiteMatchType_SiteMatchType_MIN;
  static constexpr SiteMatchType SiteMatchType_MAX =
    FilterClassification_SiteMatchType_SiteMatchType_MAX;
  static constexpr int SiteMatchType_ARRAYSIZE =
    FilterClassification_SiteMatchType_SiteMatchType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SiteMatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SiteMatchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SiteMatchType_Name.");
    return FilterClassification_SiteMatchType_Name(enum_t_value);
  }
  static inline bool SiteMatchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SiteMatchType* value) {
    return FilterClassification_SiteMatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 3,
    kUseCasesFieldNumber = 4,
    kExperimentTagsFieldNumber = 5,
    kSiteFieldNumber = 1,
    kSiteRoleFieldNumber = 2,
    kSiteMatchTypeFieldNumber = 6,
  };
  // repeated .url_param_filter.FilterParameter parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::url_param_filter::FilterParameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterParameter >*
      mutable_parameters();
  private:
  const ::url_param_filter::FilterParameter& _internal_parameters(int index) const;
  ::url_param_filter::FilterParameter* _internal_add_parameters();
  public:
  const ::url_param_filter::FilterParameter& parameters(int index) const;
  ::url_param_filter::FilterParameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterParameter >&
      parameters() const;

  // repeated .url_param_filter.FilterClassification.UseCase use_cases = 4 [packed = true];
  int use_cases_size() const;
  private:
  int _internal_use_cases_size() const;
  public:
  void clear_use_cases();
  private:
  ::url_param_filter::FilterClassification_UseCase _internal_use_cases(int index) const;
  void _internal_add_use_cases(::url_param_filter::FilterClassification_UseCase value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_use_cases();
  public:
  ::url_param_filter::FilterClassification_UseCase use_cases(int index) const;
  void set_use_cases(int index, ::url_param_filter::FilterClassification_UseCase value);
  void add_use_cases(::url_param_filter::FilterClassification_UseCase value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& use_cases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_use_cases();

  // repeated string experiment_tags = 5;
  int experiment_tags_size() const;
  private:
  int _internal_experiment_tags_size() const;
  public:
  void clear_experiment_tags();
  const std::string& experiment_tags(int index) const;
  std::string* mutable_experiment_tags(int index);
  void set_experiment_tags(int index, const std::string& value);
  void set_experiment_tags(int index, std::string&& value);
  void set_experiment_tags(int index, const char* value);
  void set_experiment_tags(int index, const char* value, size_t size);
  std::string* add_experiment_tags();
  void add_experiment_tags(const std::string& value);
  void add_experiment_tags(std::string&& value);
  void add_experiment_tags(const char* value);
  void add_experiment_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& experiment_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_experiment_tags();
  private:
  const std::string& _internal_experiment_tags(int index) const;
  std::string* _internal_add_experiment_tags();
  public:

  // optional string site = 1;
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const std::string& site() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site();
  PROTOBUF_NODISCARD std::string* release_site();
  void set_allocated_site(std::string* site);
  private:
  const std::string& _internal_site() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site(const std::string& value);
  std::string* _internal_mutable_site();
  public:

  // optional .url_param_filter.FilterClassification.SiteRole site_role = 2;
  bool has_site_role() const;
  private:
  bool _internal_has_site_role() const;
  public:
  void clear_site_role();
  ::url_param_filter::FilterClassification_SiteRole site_role() const;
  void set_site_role(::url_param_filter::FilterClassification_SiteRole value);
  private:
  ::url_param_filter::FilterClassification_SiteRole _internal_site_role() const;
  void _internal_set_site_role(::url_param_filter::FilterClassification_SiteRole value);
  public:

  // optional .url_param_filter.FilterClassification.SiteMatchType site_match_type = 6;
  bool has_site_match_type() const;
  private:
  bool _internal_has_site_match_type() const;
  public:
  void clear_site_match_type();
  ::url_param_filter::FilterClassification_SiteMatchType site_match_type() const;
  void set_site_match_type(::url_param_filter::FilterClassification_SiteMatchType value);
  private:
  ::url_param_filter::FilterClassification_SiteMatchType _internal_site_match_type() const;
  void _internal_set_site_match_type(::url_param_filter::FilterClassification_SiteMatchType value);
  public:

  // @@protoc_insertion_point(class_scope:url_param_filter.FilterClassification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterParameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> use_cases_;
  mutable std::atomic<int> _use_cases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> experiment_tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_;
  int site_role_;
  int site_match_type_;
  friend struct ::TableStruct_url_5fparam_5ffilter_5fclassification_2eproto;
};
// -------------------------------------------------------------------

class FilterClassifications final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:url_param_filter.FilterClassifications) */ {
 public:
  inline FilterClassifications() : FilterClassifications(nullptr) {}
  ~FilterClassifications() override;
  explicit PROTOBUF_CONSTEXPR FilterClassifications(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterClassifications(const FilterClassifications& from);
  FilterClassifications(FilterClassifications&& from) noexcept
    : FilterClassifications() {
    *this = ::std::move(from);
  }

  inline FilterClassifications& operator=(const FilterClassifications& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterClassifications& operator=(FilterClassifications&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FilterClassifications& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterClassifications* internal_default_instance() {
    return reinterpret_cast<const FilterClassifications*>(
               &_FilterClassifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FilterClassifications& a, FilterClassifications& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FilterClassifications* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterClassifications* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterClassifications* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterClassifications>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FilterClassifications& from);
  void MergeFrom(const FilterClassifications& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterClassifications* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "url_param_filter.FilterClassifications";
  }
  protected:
  explicit FilterClassifications(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationsFieldNumber = 1,
  };
  // repeated .url_param_filter.FilterClassification classifications = 1;
  int classifications_size() const;
  private:
  int _internal_classifications_size() const;
  public:
  void clear_classifications();
  ::url_param_filter::FilterClassification* mutable_classifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterClassification >*
      mutable_classifications();
  private:
  const ::url_param_filter::FilterClassification& _internal_classifications(int index) const;
  ::url_param_filter::FilterClassification* _internal_add_classifications();
  public:
  const ::url_param_filter::FilterClassification& classifications(int index) const;
  ::url_param_filter::FilterClassification* add_classifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterClassification >&
      classifications() const;

  // @@protoc_insertion_point(class_scope:url_param_filter.FilterClassifications)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterClassification > classifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_url_5fparam_5ffilter_5fclassification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilterParameter

// optional string name = 1;
inline bool FilterParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilterParameter::has_name() const {
  return _internal_has_name();
}
inline void FilterParameter::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilterParameter::name() const {
  // @@protoc_insertion_point(field_get:url_param_filter.FilterParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilterParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:url_param_filter.FilterParameter.name)
}
inline std::string* FilterParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:url_param_filter.FilterParameter.name)
  return _s;
}
inline const std::string& FilterParameter::_internal_name() const {
  return name_.Get();
}
inline void FilterParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* FilterParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* FilterParameter::release_name() {
  // @@protoc_insertion_point(field_release:url_param_filter.FilterParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FilterParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:url_param_filter.FilterParameter.name)
}

// -------------------------------------------------------------------

// FilterClassification

// optional string site = 1;
inline bool FilterClassification::_internal_has_site() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilterClassification::has_site() const {
  return _internal_has_site();
}
inline void FilterClassification::clear_site() {
  site_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilterClassification::site() const {
  // @@protoc_insertion_point(field_get:url_param_filter.FilterClassification.site)
  return _internal_site();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilterClassification::set_site(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 site_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:url_param_filter.FilterClassification.site)
}
inline std::string* FilterClassification::mutable_site() {
  std::string* _s = _internal_mutable_site();
  // @@protoc_insertion_point(field_mutable:url_param_filter.FilterClassification.site)
  return _s;
}
inline const std::string& FilterClassification::_internal_site() const {
  return site_.Get();
}
inline void FilterClassification::_internal_set_site(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  site_.Set(value, GetArenaForAllocation());
}
inline std::string* FilterClassification::_internal_mutable_site() {
  _has_bits_[0] |= 0x00000001u;
  return site_.Mutable(GetArenaForAllocation());
}
inline std::string* FilterClassification::release_site() {
  // @@protoc_insertion_point(field_release:url_param_filter.FilterClassification.site)
  if (!_internal_has_site()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = site_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_.IsDefault()) {
    site_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FilterClassification::set_allocated_site(std::string* site) {
  if (site != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  site_.SetAllocated(site, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_.IsDefault()) {
    site_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:url_param_filter.FilterClassification.site)
}

// optional .url_param_filter.FilterClassification.SiteRole site_role = 2;
inline bool FilterClassification::_internal_has_site_role() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FilterClassification::has_site_role() const {
  return _internal_has_site_role();
}
inline void FilterClassification::clear_site_role() {
  site_role_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::url_param_filter::FilterClassification_SiteRole FilterClassification::_internal_site_role() const {
  return static_cast< ::url_param_filter::FilterClassification_SiteRole >(site_role_);
}
inline ::url_param_filter::FilterClassification_SiteRole FilterClassification::site_role() const {
  // @@protoc_insertion_point(field_get:url_param_filter.FilterClassification.site_role)
  return _internal_site_role();
}
inline void FilterClassification::_internal_set_site_role(::url_param_filter::FilterClassification_SiteRole value) {
  assert(::url_param_filter::FilterClassification_SiteRole_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  site_role_ = value;
}
inline void FilterClassification::set_site_role(::url_param_filter::FilterClassification_SiteRole value) {
  _internal_set_site_role(value);
  // @@protoc_insertion_point(field_set:url_param_filter.FilterClassification.site_role)
}

// optional .url_param_filter.FilterClassification.SiteMatchType site_match_type = 6;
inline bool FilterClassification::_internal_has_site_match_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FilterClassification::has_site_match_type() const {
  return _internal_has_site_match_type();
}
inline void FilterClassification::clear_site_match_type() {
  site_match_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::url_param_filter::FilterClassification_SiteMatchType FilterClassification::_internal_site_match_type() const {
  return static_cast< ::url_param_filter::FilterClassification_SiteMatchType >(site_match_type_);
}
inline ::url_param_filter::FilterClassification_SiteMatchType FilterClassification::site_match_type() const {
  // @@protoc_insertion_point(field_get:url_param_filter.FilterClassification.site_match_type)
  return _internal_site_match_type();
}
inline void FilterClassification::_internal_set_site_match_type(::url_param_filter::FilterClassification_SiteMatchType value) {
  assert(::url_param_filter::FilterClassification_SiteMatchType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  site_match_type_ = value;
}
inline void FilterClassification::set_site_match_type(::url_param_filter::FilterClassification_SiteMatchType value) {
  _internal_set_site_match_type(value);
  // @@protoc_insertion_point(field_set:url_param_filter.FilterClassification.site_match_type)
}

// repeated .url_param_filter.FilterParameter parameters = 3;
inline int FilterClassification::_internal_parameters_size() const {
  return parameters_.size();
}
inline int FilterClassification::parameters_size() const {
  return _internal_parameters_size();
}
inline void FilterClassification::clear_parameters() {
  parameters_.Clear();
}
inline ::url_param_filter::FilterParameter* FilterClassification::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:url_param_filter.FilterClassification.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterParameter >*
FilterClassification::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:url_param_filter.FilterClassification.parameters)
  return &parameters_;
}
inline const ::url_param_filter::FilterParameter& FilterClassification::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::url_param_filter::FilterParameter& FilterClassification::parameters(int index) const {
  // @@protoc_insertion_point(field_get:url_param_filter.FilterClassification.parameters)
  return _internal_parameters(index);
}
inline ::url_param_filter::FilterParameter* FilterClassification::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::url_param_filter::FilterParameter* FilterClassification::add_parameters() {
  ::url_param_filter::FilterParameter* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:url_param_filter.FilterClassification.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterParameter >&
FilterClassification::parameters() const {
  // @@protoc_insertion_point(field_list:url_param_filter.FilterClassification.parameters)
  return parameters_;
}

// repeated .url_param_filter.FilterClassification.UseCase use_cases = 4 [packed = true];
inline int FilterClassification::_internal_use_cases_size() const {
  return use_cases_.size();
}
inline int FilterClassification::use_cases_size() const {
  return _internal_use_cases_size();
}
inline void FilterClassification::clear_use_cases() {
  use_cases_.Clear();
}
inline ::url_param_filter::FilterClassification_UseCase FilterClassification::_internal_use_cases(int index) const {
  return static_cast< ::url_param_filter::FilterClassification_UseCase >(use_cases_.Get(index));
}
inline ::url_param_filter::FilterClassification_UseCase FilterClassification::use_cases(int index) const {
  // @@protoc_insertion_point(field_get:url_param_filter.FilterClassification.use_cases)
  return _internal_use_cases(index);
}
inline void FilterClassification::set_use_cases(int index, ::url_param_filter::FilterClassification_UseCase value) {
  assert(::url_param_filter::FilterClassification_UseCase_IsValid(value));
  use_cases_.Set(index, value);
  // @@protoc_insertion_point(field_set:url_param_filter.FilterClassification.use_cases)
}
inline void FilterClassification::_internal_add_use_cases(::url_param_filter::FilterClassification_UseCase value) {
  assert(::url_param_filter::FilterClassification_UseCase_IsValid(value));
  use_cases_.Add(value);
}
inline void FilterClassification::add_use_cases(::url_param_filter::FilterClassification_UseCase value) {
  _internal_add_use_cases(value);
  // @@protoc_insertion_point(field_add:url_param_filter.FilterClassification.use_cases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FilterClassification::use_cases() const {
  // @@protoc_insertion_point(field_list:url_param_filter.FilterClassification.use_cases)
  return use_cases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterClassification::_internal_mutable_use_cases() {
  return &use_cases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FilterClassification::mutable_use_cases() {
  // @@protoc_insertion_point(field_mutable_list:url_param_filter.FilterClassification.use_cases)
  return _internal_mutable_use_cases();
}

// repeated string experiment_tags = 5;
inline int FilterClassification::_internal_experiment_tags_size() const {
  return experiment_tags_.size();
}
inline int FilterClassification::experiment_tags_size() const {
  return _internal_experiment_tags_size();
}
inline void FilterClassification::clear_experiment_tags() {
  experiment_tags_.Clear();
}
inline std::string* FilterClassification::add_experiment_tags() {
  std::string* _s = _internal_add_experiment_tags();
  // @@protoc_insertion_point(field_add_mutable:url_param_filter.FilterClassification.experiment_tags)
  return _s;
}
inline const std::string& FilterClassification::_internal_experiment_tags(int index) const {
  return experiment_tags_.Get(index);
}
inline const std::string& FilterClassification::experiment_tags(int index) const {
  // @@protoc_insertion_point(field_get:url_param_filter.FilterClassification.experiment_tags)
  return _internal_experiment_tags(index);
}
inline std::string* FilterClassification::mutable_experiment_tags(int index) {
  // @@protoc_insertion_point(field_mutable:url_param_filter.FilterClassification.experiment_tags)
  return experiment_tags_.Mutable(index);
}
inline void FilterClassification::set_experiment_tags(int index, const std::string& value) {
  experiment_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:url_param_filter.FilterClassification.experiment_tags)
}
inline void FilterClassification::set_experiment_tags(int index, std::string&& value) {
  experiment_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:url_param_filter.FilterClassification.experiment_tags)
}
inline void FilterClassification::set_experiment_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  experiment_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:url_param_filter.FilterClassification.experiment_tags)
}
inline void FilterClassification::set_experiment_tags(int index, const char* value, size_t size) {
  experiment_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:url_param_filter.FilterClassification.experiment_tags)
}
inline std::string* FilterClassification::_internal_add_experiment_tags() {
  return experiment_tags_.Add();
}
inline void FilterClassification::add_experiment_tags(const std::string& value) {
  experiment_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:url_param_filter.FilterClassification.experiment_tags)
}
inline void FilterClassification::add_experiment_tags(std::string&& value) {
  experiment_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:url_param_filter.FilterClassification.experiment_tags)
}
inline void FilterClassification::add_experiment_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  experiment_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:url_param_filter.FilterClassification.experiment_tags)
}
inline void FilterClassification::add_experiment_tags(const char* value, size_t size) {
  experiment_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:url_param_filter.FilterClassification.experiment_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FilterClassification::experiment_tags() const {
  // @@protoc_insertion_point(field_list:url_param_filter.FilterClassification.experiment_tags)
  return experiment_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FilterClassification::mutable_experiment_tags() {
  // @@protoc_insertion_point(field_mutable_list:url_param_filter.FilterClassification.experiment_tags)
  return &experiment_tags_;
}

// -------------------------------------------------------------------

// FilterClassifications

// repeated .url_param_filter.FilterClassification classifications = 1;
inline int FilterClassifications::_internal_classifications_size() const {
  return classifications_.size();
}
inline int FilterClassifications::classifications_size() const {
  return _internal_classifications_size();
}
inline void FilterClassifications::clear_classifications() {
  classifications_.Clear();
}
inline ::url_param_filter::FilterClassification* FilterClassifications::mutable_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:url_param_filter.FilterClassifications.classifications)
  return classifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterClassification >*
FilterClassifications::mutable_classifications() {
  // @@protoc_insertion_point(field_mutable_list:url_param_filter.FilterClassifications.classifications)
  return &classifications_;
}
inline const ::url_param_filter::FilterClassification& FilterClassifications::_internal_classifications(int index) const {
  return classifications_.Get(index);
}
inline const ::url_param_filter::FilterClassification& FilterClassifications::classifications(int index) const {
  // @@protoc_insertion_point(field_get:url_param_filter.FilterClassifications.classifications)
  return _internal_classifications(index);
}
inline ::url_param_filter::FilterClassification* FilterClassifications::_internal_add_classifications() {
  return classifications_.Add();
}
inline ::url_param_filter::FilterClassification* FilterClassifications::add_classifications() {
  ::url_param_filter::FilterClassification* _add = _internal_add_classifications();
  // @@protoc_insertion_point(field_add:url_param_filter.FilterClassifications.classifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::url_param_filter::FilterClassification >&
FilterClassifications::classifications() const {
  // @@protoc_insertion_point(field_list:url_param_filter.FilterClassifications.classifications)
  return classifications_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace url_param_filter

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::url_param_filter::FilterClassification_SiteRole> : ::std::true_type {};
template <> struct is_proto_enum< ::url_param_filter::FilterClassification_UseCase> : ::std::true_type {};
template <> struct is_proto_enum< ::url_param_filter::FilterClassification_SiteMatchType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_url_5fparam_5ffilter_5fclassification_2eproto
