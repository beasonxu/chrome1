// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/commerce/core/proto/merchant_signal_db_content.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fmerchant_5fsignal_5fdb_5fcontent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fmerchant_5fsignal_5fdb_5fcontent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fcommerce_2fcore_2fproto_2fmerchant_5fsignal_5fdb_5fcontent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fcommerce_2fcore_2fproto_2fmerchant_5fsignal_5fdb_5fcontent_2eproto {
  static const uint32_t offsets[];
};
namespace merchant_signal_db {
class MerchantSignalContentProto;
struct MerchantSignalContentProtoDefaultTypeInternal;
extern MerchantSignalContentProtoDefaultTypeInternal _MerchantSignalContentProto_default_instance_;
}  // namespace merchant_signal_db
PROTOBUF_NAMESPACE_OPEN
template<> ::merchant_signal_db::MerchantSignalContentProto* Arena::CreateMaybeMessage<::merchant_signal_db::MerchantSignalContentProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace merchant_signal_db {

// ===================================================================

class MerchantSignalContentProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:merchant_signal_db.MerchantSignalContentProto) */ {
 public:
  inline MerchantSignalContentProto() : MerchantSignalContentProto(nullptr) {}
  ~MerchantSignalContentProto() override;
  explicit PROTOBUF_CONSTEXPR MerchantSignalContentProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MerchantSignalContentProto(const MerchantSignalContentProto& from);
  MerchantSignalContentProto(MerchantSignalContentProto&& from) noexcept
    : MerchantSignalContentProto() {
    *this = ::std::move(from);
  }

  inline MerchantSignalContentProto& operator=(const MerchantSignalContentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerchantSignalContentProto& operator=(MerchantSignalContentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MerchantSignalContentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const MerchantSignalContentProto* internal_default_instance() {
    return reinterpret_cast<const MerchantSignalContentProto*>(
               &_MerchantSignalContentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MerchantSignalContentProto& a, MerchantSignalContentProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MerchantSignalContentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MerchantSignalContentProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MerchantSignalContentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MerchantSignalContentProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MerchantSignalContentProto& from);
  void MergeFrom(const MerchantSignalContentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MerchantSignalContentProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merchant_signal_db.MerchantSignalContentProto";
  }
  protected:
  explicit MerchantSignalContentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTrustSignalsMessageDisplayedTimestampFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int64 trust_signals_message_displayed_timestamp = 2;
  void clear_trust_signals_message_displayed_timestamp();
  int64_t trust_signals_message_displayed_timestamp() const;
  void set_trust_signals_message_displayed_timestamp(int64_t value);
  private:
  int64_t _internal_trust_signals_message_displayed_timestamp() const;
  void _internal_set_trust_signals_message_displayed_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:merchant_signal_db.MerchantSignalContentProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int64_t trust_signals_message_displayed_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fcommerce_2fcore_2fproto_2fmerchant_5fsignal_5fdb_5fcontent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MerchantSignalContentProto

// string key = 1;
inline void MerchantSignalContentProto::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& MerchantSignalContentProto::key() const {
  // @@protoc_insertion_point(field_get:merchant_signal_db.MerchantSignalContentProto.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MerchantSignalContentProto::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:merchant_signal_db.MerchantSignalContentProto.key)
}
inline std::string* MerchantSignalContentProto::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:merchant_signal_db.MerchantSignalContentProto.key)
  return _s;
}
inline const std::string& MerchantSignalContentProto::_internal_key() const {
  return key_.Get();
}
inline void MerchantSignalContentProto::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* MerchantSignalContentProto::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* MerchantSignalContentProto::release_key() {
  // @@protoc_insertion_point(field_release:merchant_signal_db.MerchantSignalContentProto.key)
  return key_.Release();
}
inline void MerchantSignalContentProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:merchant_signal_db.MerchantSignalContentProto.key)
}

// int64 trust_signals_message_displayed_timestamp = 2;
inline void MerchantSignalContentProto::clear_trust_signals_message_displayed_timestamp() {
  trust_signals_message_displayed_timestamp_ = int64_t{0};
}
inline int64_t MerchantSignalContentProto::_internal_trust_signals_message_displayed_timestamp() const {
  return trust_signals_message_displayed_timestamp_;
}
inline int64_t MerchantSignalContentProto::trust_signals_message_displayed_timestamp() const {
  // @@protoc_insertion_point(field_get:merchant_signal_db.MerchantSignalContentProto.trust_signals_message_displayed_timestamp)
  return _internal_trust_signals_message_displayed_timestamp();
}
inline void MerchantSignalContentProto::_internal_set_trust_signals_message_displayed_timestamp(int64_t value) {
  
  trust_signals_message_displayed_timestamp_ = value;
}
inline void MerchantSignalContentProto::set_trust_signals_message_displayed_timestamp(int64_t value) {
  _internal_set_trust_signals_message_displayed_timestamp(value);
  // @@protoc_insertion_point(field_set:merchant_signal_db.MerchantSignalContentProto.trust_signals_message_displayed_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace merchant_signal_db

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fmerchant_5fsignal_5fdb_5fcontent_2eproto
