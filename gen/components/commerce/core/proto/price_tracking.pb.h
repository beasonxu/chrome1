// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/commerce/core/proto/price_tracking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto {
  static const uint32_t offsets[];
};
namespace commerce {
class BuyableProduct;
struct BuyableProductDefaultTypeInternal;
extern BuyableProductDefaultTypeInternal _BuyableProduct_default_instance_;
class PriceTrackingData;
struct PriceTrackingDataDefaultTypeInternal;
extern PriceTrackingDataDefaultTypeInternal _PriceTrackingData_default_instance_;
class ProductPrice;
struct ProductPriceDefaultTypeInternal;
extern ProductPriceDefaultTypeInternal _ProductPrice_default_instance_;
class ProductPriceUpdate;
struct ProductPriceUpdateDefaultTypeInternal;
extern ProductPriceUpdateDefaultTypeInternal _ProductPriceUpdate_default_instance_;
}  // namespace commerce
PROTOBUF_NAMESPACE_OPEN
template<> ::commerce::BuyableProduct* Arena::CreateMaybeMessage<::commerce::BuyableProduct>(Arena*);
template<> ::commerce::PriceTrackingData* Arena::CreateMaybeMessage<::commerce::PriceTrackingData>(Arena*);
template<> ::commerce::ProductPrice* Arena::CreateMaybeMessage<::commerce::ProductPrice>(Arena*);
template<> ::commerce::ProductPriceUpdate* Arena::CreateMaybeMessage<::commerce::ProductPriceUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace commerce {

enum BuyableProduct_ProductReferenceType : int {
  BuyableProduct_ProductReferenceType_UNKNOWN = 0,
  BuyableProduct_ProductReferenceType_MAIN_PRODUCT = 1
};
bool BuyableProduct_ProductReferenceType_IsValid(int value);
constexpr BuyableProduct_ProductReferenceType BuyableProduct_ProductReferenceType_ProductReferenceType_MIN = BuyableProduct_ProductReferenceType_UNKNOWN;
constexpr BuyableProduct_ProductReferenceType BuyableProduct_ProductReferenceType_ProductReferenceType_MAX = BuyableProduct_ProductReferenceType_MAIN_PRODUCT;
constexpr int BuyableProduct_ProductReferenceType_ProductReferenceType_ARRAYSIZE = BuyableProduct_ProductReferenceType_ProductReferenceType_MAX + 1;

const std::string& BuyableProduct_ProductReferenceType_Name(BuyableProduct_ProductReferenceType value);
template<typename T>
inline const std::string& BuyableProduct_ProductReferenceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuyableProduct_ProductReferenceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuyableProduct_ProductReferenceType_Name.");
  return BuyableProduct_ProductReferenceType_Name(static_cast<BuyableProduct_ProductReferenceType>(enum_t_value));
}
bool BuyableProduct_ProductReferenceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuyableProduct_ProductReferenceType* value);
// ===================================================================

class PriceTrackingData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:commerce.PriceTrackingData) */ {
 public:
  inline PriceTrackingData() : PriceTrackingData(nullptr) {}
  ~PriceTrackingData() override;
  explicit PROTOBUF_CONSTEXPR PriceTrackingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriceTrackingData(const PriceTrackingData& from);
  PriceTrackingData(PriceTrackingData&& from) noexcept
    : PriceTrackingData() {
    *this = ::std::move(from);
  }

  inline PriceTrackingData& operator=(const PriceTrackingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceTrackingData& operator=(PriceTrackingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PriceTrackingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceTrackingData* internal_default_instance() {
    return reinterpret_cast<const PriceTrackingData*>(
               &_PriceTrackingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PriceTrackingData& a, PriceTrackingData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PriceTrackingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceTrackingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriceTrackingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PriceTrackingData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PriceTrackingData& from);
  void MergeFrom(const PriceTrackingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PriceTrackingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commerce.PriceTrackingData";
  }
  protected:
  explicit PriceTrackingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyableProductFieldNumber = 1,
    kProductUpdateFieldNumber = 2,
  };
  // optional .commerce.BuyableProduct buyable_product = 1;
  bool has_buyable_product() const;
  private:
  bool _internal_has_buyable_product() const;
  public:
  void clear_buyable_product();
  const ::commerce::BuyableProduct& buyable_product() const;
  PROTOBUF_NODISCARD ::commerce::BuyableProduct* release_buyable_product();
  ::commerce::BuyableProduct* mutable_buyable_product();
  void set_allocated_buyable_product(::commerce::BuyableProduct* buyable_product);
  private:
  const ::commerce::BuyableProduct& _internal_buyable_product() const;
  ::commerce::BuyableProduct* _internal_mutable_buyable_product();
  public:
  void unsafe_arena_set_allocated_buyable_product(
      ::commerce::BuyableProduct* buyable_product);
  ::commerce::BuyableProduct* unsafe_arena_release_buyable_product();

  // optional .commerce.ProductPriceUpdate product_update = 2;
  bool has_product_update() const;
  private:
  bool _internal_has_product_update() const;
  public:
  void clear_product_update();
  const ::commerce::ProductPriceUpdate& product_update() const;
  PROTOBUF_NODISCARD ::commerce::ProductPriceUpdate* release_product_update();
  ::commerce::ProductPriceUpdate* mutable_product_update();
  void set_allocated_product_update(::commerce::ProductPriceUpdate* product_update);
  private:
  const ::commerce::ProductPriceUpdate& _internal_product_update() const;
  ::commerce::ProductPriceUpdate* _internal_mutable_product_update();
  public:
  void unsafe_arena_set_allocated_product_update(
      ::commerce::ProductPriceUpdate* product_update);
  ::commerce::ProductPriceUpdate* unsafe_arena_release_product_update();

  // @@protoc_insertion_point(class_scope:commerce.PriceTrackingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::commerce::BuyableProduct* buyable_product_;
  ::commerce::ProductPriceUpdate* product_update_;
  friend struct ::TableStruct_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class BuyableProduct final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:commerce.BuyableProduct) */ {
 public:
  inline BuyableProduct() : BuyableProduct(nullptr) {}
  ~BuyableProduct() override;
  explicit PROTOBUF_CONSTEXPR BuyableProduct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuyableProduct(const BuyableProduct& from);
  BuyableProduct(BuyableProduct&& from) noexcept
    : BuyableProduct() {
    *this = ::std::move(from);
  }

  inline BuyableProduct& operator=(const BuyableProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuyableProduct& operator=(BuyableProduct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuyableProduct& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuyableProduct* internal_default_instance() {
    return reinterpret_cast<const BuyableProduct*>(
               &_BuyableProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BuyableProduct& a, BuyableProduct& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BuyableProduct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuyableProduct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuyableProduct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuyableProduct>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuyableProduct& from);
  void MergeFrom(const BuyableProduct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuyableProduct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commerce.BuyableProduct";
  }
  protected:
  explicit BuyableProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BuyableProduct_ProductReferenceType ProductReferenceType;
  static constexpr ProductReferenceType UNKNOWN =
    BuyableProduct_ProductReferenceType_UNKNOWN;
  static constexpr ProductReferenceType MAIN_PRODUCT =
    BuyableProduct_ProductReferenceType_MAIN_PRODUCT;
  static inline bool ProductReferenceType_IsValid(int value) {
    return BuyableProduct_ProductReferenceType_IsValid(value);
  }
  static constexpr ProductReferenceType ProductReferenceType_MIN =
    BuyableProduct_ProductReferenceType_ProductReferenceType_MIN;
  static constexpr ProductReferenceType ProductReferenceType_MAX =
    BuyableProduct_ProductReferenceType_ProductReferenceType_MAX;
  static constexpr int ProductReferenceType_ARRAYSIZE =
    BuyableProduct_ProductReferenceType_ProductReferenceType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProductReferenceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProductReferenceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProductReferenceType_Name.");
    return BuyableProduct_ProductReferenceType_Name(enum_t_value);
  }
  static inline bool ProductReferenceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProductReferenceType* value) {
    return BuyableProduct_ProductReferenceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kImageUrlFieldNumber = 2,
    kCountryCodeFieldNumber = 7,
    kCurrentPriceFieldNumber = 3,
    kOfferIdFieldNumber = 5,
    kProductClusterIdFieldNumber = 6,
    kReferenceTypeFieldNumber = 4,
  };
  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string image_url = 2;
  bool has_image_url() const;
  private:
  bool _internal_has_image_url() const;
  public:
  void clear_image_url();
  const std::string& image_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_url();
  PROTOBUF_NODISCARD std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // optional string country_code = 7;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional .commerce.ProductPrice current_price = 3;
  bool has_current_price() const;
  private:
  bool _internal_has_current_price() const;
  public:
  void clear_current_price();
  const ::commerce::ProductPrice& current_price() const;
  PROTOBUF_NODISCARD ::commerce::ProductPrice* release_current_price();
  ::commerce::ProductPrice* mutable_current_price();
  void set_allocated_current_price(::commerce::ProductPrice* current_price);
  private:
  const ::commerce::ProductPrice& _internal_current_price() const;
  ::commerce::ProductPrice* _internal_mutable_current_price();
  public:
  void unsafe_arena_set_allocated_current_price(
      ::commerce::ProductPrice* current_price);
  ::commerce::ProductPrice* unsafe_arena_release_current_price();

  // optional fixed64 offer_id = 5;
  bool has_offer_id() const;
  private:
  bool _internal_has_offer_id() const;
  public:
  void clear_offer_id();
  uint64_t offer_id() const;
  void set_offer_id(uint64_t value);
  private:
  uint64_t _internal_offer_id() const;
  void _internal_set_offer_id(uint64_t value);
  public:

  // optional uint64 product_cluster_id = 6;
  bool has_product_cluster_id() const;
  private:
  bool _internal_has_product_cluster_id() const;
  public:
  void clear_product_cluster_id();
  uint64_t product_cluster_id() const;
  void set_product_cluster_id(uint64_t value);
  private:
  uint64_t _internal_product_cluster_id() const;
  void _internal_set_product_cluster_id(uint64_t value);
  public:

  // optional .commerce.BuyableProduct.ProductReferenceType reference_type = 4;
  bool has_reference_type() const;
  private:
  bool _internal_has_reference_type() const;
  public:
  void clear_reference_type();
  ::commerce::BuyableProduct_ProductReferenceType reference_type() const;
  void set_reference_type(::commerce::BuyableProduct_ProductReferenceType value);
  private:
  ::commerce::BuyableProduct_ProductReferenceType _internal_reference_type() const;
  void _internal_set_reference_type(::commerce::BuyableProduct_ProductReferenceType value);
  public:

  // @@protoc_insertion_point(class_scope:commerce.BuyableProduct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::commerce::ProductPrice* current_price_;
  uint64_t offer_id_;
  uint64_t product_cluster_id_;
  int reference_type_;
  friend struct ::TableStruct_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class ProductPriceUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:commerce.ProductPriceUpdate) */ {
 public:
  inline ProductPriceUpdate() : ProductPriceUpdate(nullptr) {}
  ~ProductPriceUpdate() override;
  explicit PROTOBUF_CONSTEXPR ProductPriceUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductPriceUpdate(const ProductPriceUpdate& from);
  ProductPriceUpdate(ProductPriceUpdate&& from) noexcept
    : ProductPriceUpdate() {
    *this = ::std::move(from);
  }

  inline ProductPriceUpdate& operator=(const ProductPriceUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductPriceUpdate& operator=(ProductPriceUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProductPriceUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductPriceUpdate* internal_default_instance() {
    return reinterpret_cast<const ProductPriceUpdate*>(
               &_ProductPriceUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProductPriceUpdate& a, ProductPriceUpdate& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProductPriceUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductPriceUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductPriceUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductPriceUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProductPriceUpdate& from);
  void MergeFrom(const ProductPriceUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductPriceUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commerce.ProductPriceUpdate";
  }
  protected:
  explicit ProductPriceUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldPriceFieldNumber = 2,
    kNewPriceFieldNumber = 3,
    kOfferIdFieldNumber = 1,
  };
  // optional .commerce.ProductPrice old_price = 2;
  bool has_old_price() const;
  private:
  bool _internal_has_old_price() const;
  public:
  void clear_old_price();
  const ::commerce::ProductPrice& old_price() const;
  PROTOBUF_NODISCARD ::commerce::ProductPrice* release_old_price();
  ::commerce::ProductPrice* mutable_old_price();
  void set_allocated_old_price(::commerce::ProductPrice* old_price);
  private:
  const ::commerce::ProductPrice& _internal_old_price() const;
  ::commerce::ProductPrice* _internal_mutable_old_price();
  public:
  void unsafe_arena_set_allocated_old_price(
      ::commerce::ProductPrice* old_price);
  ::commerce::ProductPrice* unsafe_arena_release_old_price();

  // optional .commerce.ProductPrice new_price = 3;
  bool has_new_price() const;
  private:
  bool _internal_has_new_price() const;
  public:
  void clear_new_price();
  const ::commerce::ProductPrice& new_price() const;
  PROTOBUF_NODISCARD ::commerce::ProductPrice* release_new_price();
  ::commerce::ProductPrice* mutable_new_price();
  void set_allocated_new_price(::commerce::ProductPrice* new_price);
  private:
  const ::commerce::ProductPrice& _internal_new_price() const;
  ::commerce::ProductPrice* _internal_mutable_new_price();
  public:
  void unsafe_arena_set_allocated_new_price(
      ::commerce::ProductPrice* new_price);
  ::commerce::ProductPrice* unsafe_arena_release_new_price();

  // optional fixed64 offer_id = 1;
  bool has_offer_id() const;
  private:
  bool _internal_has_offer_id() const;
  public:
  void clear_offer_id();
  uint64_t offer_id() const;
  void set_offer_id(uint64_t value);
  private:
  uint64_t _internal_offer_id() const;
  void _internal_set_offer_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:commerce.ProductPriceUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::commerce::ProductPrice* old_price_;
  ::commerce::ProductPrice* new_price_;
  uint64_t offer_id_;
  friend struct ::TableStruct_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class ProductPrice final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:commerce.ProductPrice) */ {
 public:
  inline ProductPrice() : ProductPrice(nullptr) {}
  ~ProductPrice() override;
  explicit PROTOBUF_CONSTEXPR ProductPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductPrice(const ProductPrice& from);
  ProductPrice(ProductPrice&& from) noexcept
    : ProductPrice() {
    *this = ::std::move(from);
  }

  inline ProductPrice& operator=(const ProductPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductPrice& operator=(ProductPrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProductPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductPrice* internal_default_instance() {
    return reinterpret_cast<const ProductPrice*>(
               &_ProductPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProductPrice& a, ProductPrice& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProductPrice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductPrice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProductPrice& from);
  void MergeFrom(const ProductPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductPrice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commerce.ProductPrice";
  }
  protected:
  explicit ProductPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 1,
    kAmountMicrosFieldNumber = 2,
  };
  // optional string currency_code = 1;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  PROTOBUF_NODISCARD std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // optional int64 amount_micros = 2;
  bool has_amount_micros() const;
  private:
  bool _internal_has_amount_micros() const;
  public:
  void clear_amount_micros();
  int64_t amount_micros() const;
  void set_amount_micros(int64_t value);
  private:
  int64_t _internal_amount_micros() const;
  void _internal_set_amount_micros(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:commerce.ProductPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
  int64_t amount_micros_;
  friend struct ::TableStruct_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PriceTrackingData

// optional .commerce.BuyableProduct buyable_product = 1;
inline bool PriceTrackingData::_internal_has_buyable_product() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || buyable_product_ != nullptr);
  return value;
}
inline bool PriceTrackingData::has_buyable_product() const {
  return _internal_has_buyable_product();
}
inline void PriceTrackingData::clear_buyable_product() {
  if (buyable_product_ != nullptr) buyable_product_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::commerce::BuyableProduct& PriceTrackingData::_internal_buyable_product() const {
  const ::commerce::BuyableProduct* p = buyable_product_;
  return p != nullptr ? *p : reinterpret_cast<const ::commerce::BuyableProduct&>(
      ::commerce::_BuyableProduct_default_instance_);
}
inline const ::commerce::BuyableProduct& PriceTrackingData::buyable_product() const {
  // @@protoc_insertion_point(field_get:commerce.PriceTrackingData.buyable_product)
  return _internal_buyable_product();
}
inline void PriceTrackingData::unsafe_arena_set_allocated_buyable_product(
    ::commerce::BuyableProduct* buyable_product) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buyable_product_);
  }
  buyable_product_ = buyable_product;
  if (buyable_product) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commerce.PriceTrackingData.buyable_product)
}
inline ::commerce::BuyableProduct* PriceTrackingData::release_buyable_product() {
  _has_bits_[0] &= ~0x00000001u;
  ::commerce::BuyableProduct* temp = buyable_product_;
  buyable_product_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commerce::BuyableProduct* PriceTrackingData::unsafe_arena_release_buyable_product() {
  // @@protoc_insertion_point(field_release:commerce.PriceTrackingData.buyable_product)
  _has_bits_[0] &= ~0x00000001u;
  ::commerce::BuyableProduct* temp = buyable_product_;
  buyable_product_ = nullptr;
  return temp;
}
inline ::commerce::BuyableProduct* PriceTrackingData::_internal_mutable_buyable_product() {
  _has_bits_[0] |= 0x00000001u;
  if (buyable_product_ == nullptr) {
    auto* p = CreateMaybeMessage<::commerce::BuyableProduct>(GetArenaForAllocation());
    buyable_product_ = p;
  }
  return buyable_product_;
}
inline ::commerce::BuyableProduct* PriceTrackingData::mutable_buyable_product() {
  ::commerce::BuyableProduct* _msg = _internal_mutable_buyable_product();
  // @@protoc_insertion_point(field_mutable:commerce.PriceTrackingData.buyable_product)
  return _msg;
}
inline void PriceTrackingData::set_allocated_buyable_product(::commerce::BuyableProduct* buyable_product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete buyable_product_;
  }
  if (buyable_product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buyable_product);
    if (message_arena != submessage_arena) {
      buyable_product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyable_product, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buyable_product_ = buyable_product;
  // @@protoc_insertion_point(field_set_allocated:commerce.PriceTrackingData.buyable_product)
}

// optional .commerce.ProductPriceUpdate product_update = 2;
inline bool PriceTrackingData::_internal_has_product_update() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || product_update_ != nullptr);
  return value;
}
inline bool PriceTrackingData::has_product_update() const {
  return _internal_has_product_update();
}
inline void PriceTrackingData::clear_product_update() {
  if (product_update_ != nullptr) product_update_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::commerce::ProductPriceUpdate& PriceTrackingData::_internal_product_update() const {
  const ::commerce::ProductPriceUpdate* p = product_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::commerce::ProductPriceUpdate&>(
      ::commerce::_ProductPriceUpdate_default_instance_);
}
inline const ::commerce::ProductPriceUpdate& PriceTrackingData::product_update() const {
  // @@protoc_insertion_point(field_get:commerce.PriceTrackingData.product_update)
  return _internal_product_update();
}
inline void PriceTrackingData::unsafe_arena_set_allocated_product_update(
    ::commerce::ProductPriceUpdate* product_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_update_);
  }
  product_update_ = product_update;
  if (product_update) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commerce.PriceTrackingData.product_update)
}
inline ::commerce::ProductPriceUpdate* PriceTrackingData::release_product_update() {
  _has_bits_[0] &= ~0x00000002u;
  ::commerce::ProductPriceUpdate* temp = product_update_;
  product_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commerce::ProductPriceUpdate* PriceTrackingData::unsafe_arena_release_product_update() {
  // @@protoc_insertion_point(field_release:commerce.PriceTrackingData.product_update)
  _has_bits_[0] &= ~0x00000002u;
  ::commerce::ProductPriceUpdate* temp = product_update_;
  product_update_ = nullptr;
  return temp;
}
inline ::commerce::ProductPriceUpdate* PriceTrackingData::_internal_mutable_product_update() {
  _has_bits_[0] |= 0x00000002u;
  if (product_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::commerce::ProductPriceUpdate>(GetArenaForAllocation());
    product_update_ = p;
  }
  return product_update_;
}
inline ::commerce::ProductPriceUpdate* PriceTrackingData::mutable_product_update() {
  ::commerce::ProductPriceUpdate* _msg = _internal_mutable_product_update();
  // @@protoc_insertion_point(field_mutable:commerce.PriceTrackingData.product_update)
  return _msg;
}
inline void PriceTrackingData::set_allocated_product_update(::commerce::ProductPriceUpdate* product_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete product_update_;
  }
  if (product_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(product_update);
    if (message_arena != submessage_arena) {
      product_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product_update, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  product_update_ = product_update;
  // @@protoc_insertion_point(field_set_allocated:commerce.PriceTrackingData.product_update)
}

// -------------------------------------------------------------------

// BuyableProduct

// optional string title = 1;
inline bool BuyableProduct::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuyableProduct::has_title() const {
  return _internal_has_title();
}
inline void BuyableProduct::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuyableProduct::title() const {
  // @@protoc_insertion_point(field_get:commerce.BuyableProduct.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuyableProduct::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commerce.BuyableProduct.title)
}
inline std::string* BuyableProduct::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:commerce.BuyableProduct.title)
  return _s;
}
inline const std::string& BuyableProduct::_internal_title() const {
  return title_.Get();
}
inline void BuyableProduct::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* BuyableProduct::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* BuyableProduct::release_title() {
  // @@protoc_insertion_point(field_release:commerce.BuyableProduct.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuyableProduct::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:commerce.BuyableProduct.title)
}

// optional string image_url = 2;
inline bool BuyableProduct::_internal_has_image_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuyableProduct::has_image_url() const {
  return _internal_has_image_url();
}
inline void BuyableProduct::clear_image_url() {
  image_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BuyableProduct::image_url() const {
  // @@protoc_insertion_point(field_get:commerce.BuyableProduct.image_url)
  return _internal_image_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuyableProduct::set_image_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 image_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commerce.BuyableProduct.image_url)
}
inline std::string* BuyableProduct::mutable_image_url() {
  std::string* _s = _internal_mutable_image_url();
  // @@protoc_insertion_point(field_mutable:commerce.BuyableProduct.image_url)
  return _s;
}
inline const std::string& BuyableProduct::_internal_image_url() const {
  return image_url_.Get();
}
inline void BuyableProduct::_internal_set_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_url_.Set(value, GetArenaForAllocation());
}
inline std::string* BuyableProduct::_internal_mutable_image_url() {
  _has_bits_[0] |= 0x00000002u;
  return image_url_.Mutable(GetArenaForAllocation());
}
inline std::string* BuyableProduct::release_image_url() {
  // @@protoc_insertion_point(field_release:commerce.BuyableProduct.image_url)
  if (!_internal_has_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = image_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault()) {
    image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuyableProduct::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_url_.SetAllocated(image_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault()) {
    image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:commerce.BuyableProduct.image_url)
}

// optional .commerce.ProductPrice current_price = 3;
inline bool BuyableProduct::_internal_has_current_price() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || current_price_ != nullptr);
  return value;
}
inline bool BuyableProduct::has_current_price() const {
  return _internal_has_current_price();
}
inline void BuyableProduct::clear_current_price() {
  if (current_price_ != nullptr) current_price_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::commerce::ProductPrice& BuyableProduct::_internal_current_price() const {
  const ::commerce::ProductPrice* p = current_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::commerce::ProductPrice&>(
      ::commerce::_ProductPrice_default_instance_);
}
inline const ::commerce::ProductPrice& BuyableProduct::current_price() const {
  // @@protoc_insertion_point(field_get:commerce.BuyableProduct.current_price)
  return _internal_current_price();
}
inline void BuyableProduct::unsafe_arena_set_allocated_current_price(
    ::commerce::ProductPrice* current_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_price_);
  }
  current_price_ = current_price;
  if (current_price) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commerce.BuyableProduct.current_price)
}
inline ::commerce::ProductPrice* BuyableProduct::release_current_price() {
  _has_bits_[0] &= ~0x00000008u;
  ::commerce::ProductPrice* temp = current_price_;
  current_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commerce::ProductPrice* BuyableProduct::unsafe_arena_release_current_price() {
  // @@protoc_insertion_point(field_release:commerce.BuyableProduct.current_price)
  _has_bits_[0] &= ~0x00000008u;
  ::commerce::ProductPrice* temp = current_price_;
  current_price_ = nullptr;
  return temp;
}
inline ::commerce::ProductPrice* BuyableProduct::_internal_mutable_current_price() {
  _has_bits_[0] |= 0x00000008u;
  if (current_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::commerce::ProductPrice>(GetArenaForAllocation());
    current_price_ = p;
  }
  return current_price_;
}
inline ::commerce::ProductPrice* BuyableProduct::mutable_current_price() {
  ::commerce::ProductPrice* _msg = _internal_mutable_current_price();
  // @@protoc_insertion_point(field_mutable:commerce.BuyableProduct.current_price)
  return _msg;
}
inline void BuyableProduct::set_allocated_current_price(::commerce::ProductPrice* current_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete current_price_;
  }
  if (current_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_price);
    if (message_arena != submessage_arena) {
      current_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_price, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  current_price_ = current_price;
  // @@protoc_insertion_point(field_set_allocated:commerce.BuyableProduct.current_price)
}

// optional .commerce.BuyableProduct.ProductReferenceType reference_type = 4;
inline bool BuyableProduct::_internal_has_reference_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BuyableProduct::has_reference_type() const {
  return _internal_has_reference_type();
}
inline void BuyableProduct::clear_reference_type() {
  reference_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::commerce::BuyableProduct_ProductReferenceType BuyableProduct::_internal_reference_type() const {
  return static_cast< ::commerce::BuyableProduct_ProductReferenceType >(reference_type_);
}
inline ::commerce::BuyableProduct_ProductReferenceType BuyableProduct::reference_type() const {
  // @@protoc_insertion_point(field_get:commerce.BuyableProduct.reference_type)
  return _internal_reference_type();
}
inline void BuyableProduct::_internal_set_reference_type(::commerce::BuyableProduct_ProductReferenceType value) {
  assert(::commerce::BuyableProduct_ProductReferenceType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  reference_type_ = value;
}
inline void BuyableProduct::set_reference_type(::commerce::BuyableProduct_ProductReferenceType value) {
  _internal_set_reference_type(value);
  // @@protoc_insertion_point(field_set:commerce.BuyableProduct.reference_type)
}

// optional fixed64 offer_id = 5;
inline bool BuyableProduct::_internal_has_offer_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BuyableProduct::has_offer_id() const {
  return _internal_has_offer_id();
}
inline void BuyableProduct::clear_offer_id() {
  offer_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t BuyableProduct::_internal_offer_id() const {
  return offer_id_;
}
inline uint64_t BuyableProduct::offer_id() const {
  // @@protoc_insertion_point(field_get:commerce.BuyableProduct.offer_id)
  return _internal_offer_id();
}
inline void BuyableProduct::_internal_set_offer_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  offer_id_ = value;
}
inline void BuyableProduct::set_offer_id(uint64_t value) {
  _internal_set_offer_id(value);
  // @@protoc_insertion_point(field_set:commerce.BuyableProduct.offer_id)
}

// optional uint64 product_cluster_id = 6;
inline bool BuyableProduct::_internal_has_product_cluster_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BuyableProduct::has_product_cluster_id() const {
  return _internal_has_product_cluster_id();
}
inline void BuyableProduct::clear_product_cluster_id() {
  product_cluster_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t BuyableProduct::_internal_product_cluster_id() const {
  return product_cluster_id_;
}
inline uint64_t BuyableProduct::product_cluster_id() const {
  // @@protoc_insertion_point(field_get:commerce.BuyableProduct.product_cluster_id)
  return _internal_product_cluster_id();
}
inline void BuyableProduct::_internal_set_product_cluster_id(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  product_cluster_id_ = value;
}
inline void BuyableProduct::set_product_cluster_id(uint64_t value) {
  _internal_set_product_cluster_id(value);
  // @@protoc_insertion_point(field_set:commerce.BuyableProduct.product_cluster_id)
}

// optional string country_code = 7;
inline bool BuyableProduct::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuyableProduct::has_country_code() const {
  return _internal_has_country_code();
}
inline void BuyableProduct::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BuyableProduct::country_code() const {
  // @@protoc_insertion_point(field_get:commerce.BuyableProduct.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuyableProduct::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commerce.BuyableProduct.country_code)
}
inline std::string* BuyableProduct::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:commerce.BuyableProduct.country_code)
  return _s;
}
inline const std::string& BuyableProduct::_internal_country_code() const {
  return country_code_.Get();
}
inline void BuyableProduct::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* BuyableProduct::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000004u;
  return country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* BuyableProduct::release_country_code() {
  // @@protoc_insertion_point(field_release:commerce.BuyableProduct.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault()) {
    country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuyableProduct::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault()) {
    country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:commerce.BuyableProduct.country_code)
}

// -------------------------------------------------------------------

// ProductPriceUpdate

// optional fixed64 offer_id = 1;
inline bool ProductPriceUpdate::_internal_has_offer_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProductPriceUpdate::has_offer_id() const {
  return _internal_has_offer_id();
}
inline void ProductPriceUpdate::clear_offer_id() {
  offer_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ProductPriceUpdate::_internal_offer_id() const {
  return offer_id_;
}
inline uint64_t ProductPriceUpdate::offer_id() const {
  // @@protoc_insertion_point(field_get:commerce.ProductPriceUpdate.offer_id)
  return _internal_offer_id();
}
inline void ProductPriceUpdate::_internal_set_offer_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  offer_id_ = value;
}
inline void ProductPriceUpdate::set_offer_id(uint64_t value) {
  _internal_set_offer_id(value);
  // @@protoc_insertion_point(field_set:commerce.ProductPriceUpdate.offer_id)
}

// optional .commerce.ProductPrice old_price = 2;
inline bool ProductPriceUpdate::_internal_has_old_price() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || old_price_ != nullptr);
  return value;
}
inline bool ProductPriceUpdate::has_old_price() const {
  return _internal_has_old_price();
}
inline void ProductPriceUpdate::clear_old_price() {
  if (old_price_ != nullptr) old_price_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::commerce::ProductPrice& ProductPriceUpdate::_internal_old_price() const {
  const ::commerce::ProductPrice* p = old_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::commerce::ProductPrice&>(
      ::commerce::_ProductPrice_default_instance_);
}
inline const ::commerce::ProductPrice& ProductPriceUpdate::old_price() const {
  // @@protoc_insertion_point(field_get:commerce.ProductPriceUpdate.old_price)
  return _internal_old_price();
}
inline void ProductPriceUpdate::unsafe_arena_set_allocated_old_price(
    ::commerce::ProductPrice* old_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_price_);
  }
  old_price_ = old_price;
  if (old_price) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commerce.ProductPriceUpdate.old_price)
}
inline ::commerce::ProductPrice* ProductPriceUpdate::release_old_price() {
  _has_bits_[0] &= ~0x00000001u;
  ::commerce::ProductPrice* temp = old_price_;
  old_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commerce::ProductPrice* ProductPriceUpdate::unsafe_arena_release_old_price() {
  // @@protoc_insertion_point(field_release:commerce.ProductPriceUpdate.old_price)
  _has_bits_[0] &= ~0x00000001u;
  ::commerce::ProductPrice* temp = old_price_;
  old_price_ = nullptr;
  return temp;
}
inline ::commerce::ProductPrice* ProductPriceUpdate::_internal_mutable_old_price() {
  _has_bits_[0] |= 0x00000001u;
  if (old_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::commerce::ProductPrice>(GetArenaForAllocation());
    old_price_ = p;
  }
  return old_price_;
}
inline ::commerce::ProductPrice* ProductPriceUpdate::mutable_old_price() {
  ::commerce::ProductPrice* _msg = _internal_mutable_old_price();
  // @@protoc_insertion_point(field_mutable:commerce.ProductPriceUpdate.old_price)
  return _msg;
}
inline void ProductPriceUpdate::set_allocated_old_price(::commerce::ProductPrice* old_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete old_price_;
  }
  if (old_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(old_price);
    if (message_arena != submessage_arena) {
      old_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_price, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  old_price_ = old_price;
  // @@protoc_insertion_point(field_set_allocated:commerce.ProductPriceUpdate.old_price)
}

// optional .commerce.ProductPrice new_price = 3;
inline bool ProductPriceUpdate::_internal_has_new_price() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || new_price_ != nullptr);
  return value;
}
inline bool ProductPriceUpdate::has_new_price() const {
  return _internal_has_new_price();
}
inline void ProductPriceUpdate::clear_new_price() {
  if (new_price_ != nullptr) new_price_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::commerce::ProductPrice& ProductPriceUpdate::_internal_new_price() const {
  const ::commerce::ProductPrice* p = new_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::commerce::ProductPrice&>(
      ::commerce::_ProductPrice_default_instance_);
}
inline const ::commerce::ProductPrice& ProductPriceUpdate::new_price() const {
  // @@protoc_insertion_point(field_get:commerce.ProductPriceUpdate.new_price)
  return _internal_new_price();
}
inline void ProductPriceUpdate::unsafe_arena_set_allocated_new_price(
    ::commerce::ProductPrice* new_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_price_);
  }
  new_price_ = new_price;
  if (new_price) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commerce.ProductPriceUpdate.new_price)
}
inline ::commerce::ProductPrice* ProductPriceUpdate::release_new_price() {
  _has_bits_[0] &= ~0x00000002u;
  ::commerce::ProductPrice* temp = new_price_;
  new_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commerce::ProductPrice* ProductPriceUpdate::unsafe_arena_release_new_price() {
  // @@protoc_insertion_point(field_release:commerce.ProductPriceUpdate.new_price)
  _has_bits_[0] &= ~0x00000002u;
  ::commerce::ProductPrice* temp = new_price_;
  new_price_ = nullptr;
  return temp;
}
inline ::commerce::ProductPrice* ProductPriceUpdate::_internal_mutable_new_price() {
  _has_bits_[0] |= 0x00000002u;
  if (new_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::commerce::ProductPrice>(GetArenaForAllocation());
    new_price_ = p;
  }
  return new_price_;
}
inline ::commerce::ProductPrice* ProductPriceUpdate::mutable_new_price() {
  ::commerce::ProductPrice* _msg = _internal_mutable_new_price();
  // @@protoc_insertion_point(field_mutable:commerce.ProductPriceUpdate.new_price)
  return _msg;
}
inline void ProductPriceUpdate::set_allocated_new_price(::commerce::ProductPrice* new_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete new_price_;
  }
  if (new_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_price);
    if (message_arena != submessage_arena) {
      new_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_price, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_price_ = new_price;
  // @@protoc_insertion_point(field_set_allocated:commerce.ProductPriceUpdate.new_price)
}

// -------------------------------------------------------------------

// ProductPrice

// optional string currency_code = 1;
inline bool ProductPrice::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProductPrice::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void ProductPrice::clear_currency_code() {
  currency_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProductPrice::currency_code() const {
  // @@protoc_insertion_point(field_get:commerce.ProductPrice.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductPrice::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 currency_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commerce.ProductPrice.currency_code)
}
inline std::string* ProductPrice::mutable_currency_code() {
  std::string* _s = _internal_mutable_currency_code();
  // @@protoc_insertion_point(field_mutable:commerce.ProductPrice.currency_code)
  return _s;
}
inline const std::string& ProductPrice::_internal_currency_code() const {
  return currency_code_.Get();
}
inline void ProductPrice::_internal_set_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  currency_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductPrice::_internal_mutable_currency_code() {
  _has_bits_[0] |= 0x00000001u;
  return currency_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductPrice::release_currency_code() {
  // @@protoc_insertion_point(field_release:commerce.ProductPrice.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = currency_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currency_code_.IsDefault()) {
    currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProductPrice::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currency_code_.SetAllocated(currency_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currency_code_.IsDefault()) {
    currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:commerce.ProductPrice.currency_code)
}

// optional int64 amount_micros = 2;
inline bool ProductPrice::_internal_has_amount_micros() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProductPrice::has_amount_micros() const {
  return _internal_has_amount_micros();
}
inline void ProductPrice::clear_amount_micros() {
  amount_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ProductPrice::_internal_amount_micros() const {
  return amount_micros_;
}
inline int64_t ProductPrice::amount_micros() const {
  // @@protoc_insertion_point(field_get:commerce.ProductPrice.amount_micros)
  return _internal_amount_micros();
}
inline void ProductPrice::_internal_set_amount_micros(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  amount_micros_ = value;
}
inline void ProductPrice::set_amount_micros(int64_t value) {
  _internal_set_amount_micros(value);
  // @@protoc_insertion_point(field_set:commerce.ProductPrice.amount_micros)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commerce

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::commerce::BuyableProduct_ProductReferenceType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fcommerce_2fcore_2fproto_2fprice_5ftracking_2eproto
