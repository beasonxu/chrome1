// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/commerce/core/proto/merchant_trust.proto

#include "components/commerce/core/proto/merchant_trust.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace commerce {
PROTOBUF_CONSTEXPR MerchantTrustSignalsV2::MerchantTrustSignalsV2(
    ::_pbi::ConstantInitialized)
  : merchant_details_page_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , merchant_star_rating_(0)
  , merchant_count_rating_(0)
  , non_personalized_familiarity_score_(0)
  , has_return_policy_(false)
  , contains_sensitive_content_(false)
  , proactive_message_disabled_(false){}
struct MerchantTrustSignalsV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR MerchantTrustSignalsV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MerchantTrustSignalsV2DefaultTypeInternal() {}
  union {
    MerchantTrustSignalsV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MerchantTrustSignalsV2DefaultTypeInternal _MerchantTrustSignalsV2_default_instance_;
}  // namespace commerce
namespace commerce {

// ===================================================================

class MerchantTrustSignalsV2::_Internal {
 public:
  using HasBits = decltype(std::declval<MerchantTrustSignalsV2>()._has_bits_);
  static void set_has_merchant_star_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_merchant_count_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_merchant_details_page_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_return_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_non_personalized_familiarity_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contains_sensitive_content(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_proactive_message_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MerchantTrustSignalsV2::MerchantTrustSignalsV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:commerce.MerchantTrustSignalsV2)
}
MerchantTrustSignalsV2::MerchantTrustSignalsV2(const MerchantTrustSignalsV2& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  merchant_details_page_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    merchant_details_page_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_merchant_details_page_url()) {
    merchant_details_page_url_.Set(from._internal_merchant_details_page_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&merchant_star_rating_, &from.merchant_star_rating_,
    static_cast<size_t>(reinterpret_cast<char*>(&proactive_message_disabled_) -
    reinterpret_cast<char*>(&merchant_star_rating_)) + sizeof(proactive_message_disabled_));
  // @@protoc_insertion_point(copy_constructor:commerce.MerchantTrustSignalsV2)
}

inline void MerchantTrustSignalsV2::SharedCtor() {
merchant_details_page_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  merchant_details_page_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&merchant_star_rating_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proactive_message_disabled_) -
    reinterpret_cast<char*>(&merchant_star_rating_)) + sizeof(proactive_message_disabled_));
}

MerchantTrustSignalsV2::~MerchantTrustSignalsV2() {
  // @@protoc_insertion_point(destructor:commerce.MerchantTrustSignalsV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MerchantTrustSignalsV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  merchant_details_page_url_.Destroy();
}

void MerchantTrustSignalsV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MerchantTrustSignalsV2::Clear() {
// @@protoc_insertion_point(message_clear_start:commerce.MerchantTrustSignalsV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    merchant_details_page_url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&merchant_star_rating_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proactive_message_disabled_) -
        reinterpret_cast<char*>(&merchant_star_rating_)) + sizeof(proactive_message_disabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MerchantTrustSignalsV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float merchant_star_rating = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_merchant_star_rating(&has_bits);
          merchant_star_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 merchant_count_rating = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_merchant_count_rating(&has_bits);
          merchant_count_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string merchant_details_page_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_merchant_details_page_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_return_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_has_return_policy(&has_bits);
          has_return_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float non_personalized_familiarity_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_non_personalized_familiarity_score(&has_bits);
          non_personalized_familiarity_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_sensitive_content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_contains_sensitive_content(&has_bits);
          contains_sensitive_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool proactive_message_disabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_proactive_message_disabled(&has_bits);
          proactive_message_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MerchantTrustSignalsV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commerce.MerchantTrustSignalsV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float merchant_star_rating = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_merchant_star_rating(), target);
  }

  // optional int32 merchant_count_rating = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_merchant_count_rating(), target);
  }

  // optional string merchant_details_page_url = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_merchant_details_page_url(), target);
  }

  // optional bool has_return_policy = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_return_policy(), target);
  }

  // optional float non_personalized_familiarity_score = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_non_personalized_familiarity_score(), target);
  }

  // optional bool contains_sensitive_content = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_sensitive_content(), target);
  }

  // optional bool proactive_message_disabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_proactive_message_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commerce.MerchantTrustSignalsV2)
  return target;
}

size_t MerchantTrustSignalsV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commerce.MerchantTrustSignalsV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string merchant_details_page_url = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_merchant_details_page_url());
    }

    // optional float merchant_star_rating = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 merchant_count_rating = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_merchant_count_rating());
    }

    // optional float non_personalized_familiarity_score = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool has_return_policy = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool contains_sensitive_content = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool proactive_message_disabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerchantTrustSignalsV2::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MerchantTrustSignalsV2*>(
      &from));
}

void MerchantTrustSignalsV2::MergeFrom(const MerchantTrustSignalsV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commerce.MerchantTrustSignalsV2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_merchant_details_page_url(from._internal_merchant_details_page_url());
    }
    if (cached_has_bits & 0x00000002u) {
      merchant_star_rating_ = from.merchant_star_rating_;
    }
    if (cached_has_bits & 0x00000004u) {
      merchant_count_rating_ = from.merchant_count_rating_;
    }
    if (cached_has_bits & 0x00000008u) {
      non_personalized_familiarity_score_ = from.non_personalized_familiarity_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_return_policy_ = from.has_return_policy_;
    }
    if (cached_has_bits & 0x00000020u) {
      contains_sensitive_content_ = from.contains_sensitive_content_;
    }
    if (cached_has_bits & 0x00000040u) {
      proactive_message_disabled_ = from.proactive_message_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MerchantTrustSignalsV2::CopyFrom(const MerchantTrustSignalsV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commerce.MerchantTrustSignalsV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerchantTrustSignalsV2::IsInitialized() const {
  return true;
}

void MerchantTrustSignalsV2::InternalSwap(MerchantTrustSignalsV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &merchant_details_page_url_, lhs_arena,
      &other->merchant_details_page_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MerchantTrustSignalsV2, proactive_message_disabled_)
      + sizeof(MerchantTrustSignalsV2::proactive_message_disabled_)
      - PROTOBUF_FIELD_OFFSET(MerchantTrustSignalsV2, merchant_star_rating_)>(
          reinterpret_cast<char*>(&merchant_star_rating_),
          reinterpret_cast<char*>(&other->merchant_star_rating_));
}

std::string MerchantTrustSignalsV2::GetTypeName() const {
  return "commerce.MerchantTrustSignalsV2";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commerce
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::commerce::MerchantTrustSignalsV2*
Arena::CreateMaybeMessage< ::commerce::MerchantTrustSignalsV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commerce::MerchantTrustSignalsV2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
