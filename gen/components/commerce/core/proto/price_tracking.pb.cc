// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/commerce/core/proto/price_tracking.proto

#include "components/commerce/core/proto/price_tracking.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace commerce {
PROTOBUF_CONSTEXPR PriceTrackingData::PriceTrackingData(
    ::_pbi::ConstantInitialized)
  : buyable_product_(nullptr)
  , product_update_(nullptr){}
struct PriceTrackingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceTrackingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceTrackingDataDefaultTypeInternal() {}
  union {
    PriceTrackingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceTrackingDataDefaultTypeInternal _PriceTrackingData_default_instance_;
PROTOBUF_CONSTEXPR BuyableProduct::BuyableProduct(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , country_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , current_price_(nullptr)
  , offer_id_(uint64_t{0u})
  , product_cluster_id_(uint64_t{0u})
  , reference_type_(0)
{}
struct BuyableProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuyableProductDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuyableProductDefaultTypeInternal() {}
  union {
    BuyableProduct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuyableProductDefaultTypeInternal _BuyableProduct_default_instance_;
PROTOBUF_CONSTEXPR ProductPriceUpdate::ProductPriceUpdate(
    ::_pbi::ConstantInitialized)
  : old_price_(nullptr)
  , new_price_(nullptr)
  , offer_id_(uint64_t{0u}){}
struct ProductPriceUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductPriceUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductPriceUpdateDefaultTypeInternal() {}
  union {
    ProductPriceUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductPriceUpdateDefaultTypeInternal _ProductPriceUpdate_default_instance_;
PROTOBUF_CONSTEXPR ProductPrice::ProductPrice(
    ::_pbi::ConstantInitialized)
  : currency_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , amount_micros_(int64_t{0}){}
struct ProductPriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductPriceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductPriceDefaultTypeInternal() {}
  union {
    ProductPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductPriceDefaultTypeInternal _ProductPrice_default_instance_;
}  // namespace commerce
namespace commerce {
bool BuyableProduct_ProductReferenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BuyableProduct_ProductReferenceType_strings[2] = {};

static const char BuyableProduct_ProductReferenceType_names[] =
  "MAIN_PRODUCT"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BuyableProduct_ProductReferenceType_entries[] = {
  { {BuyableProduct_ProductReferenceType_names + 0, 12}, 1 },
  { {BuyableProduct_ProductReferenceType_names + 12, 7}, 0 },
};

static const int BuyableProduct_ProductReferenceType_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> MAIN_PRODUCT
};

const std::string& BuyableProduct_ProductReferenceType_Name(
    BuyableProduct_ProductReferenceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BuyableProduct_ProductReferenceType_entries,
          BuyableProduct_ProductReferenceType_entries_by_number,
          2, BuyableProduct_ProductReferenceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BuyableProduct_ProductReferenceType_entries,
      BuyableProduct_ProductReferenceType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BuyableProduct_ProductReferenceType_strings[idx].get();
}
bool BuyableProduct_ProductReferenceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuyableProduct_ProductReferenceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BuyableProduct_ProductReferenceType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<BuyableProduct_ProductReferenceType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuyableProduct_ProductReferenceType BuyableProduct::UNKNOWN;
constexpr BuyableProduct_ProductReferenceType BuyableProduct::MAIN_PRODUCT;
constexpr BuyableProduct_ProductReferenceType BuyableProduct::ProductReferenceType_MIN;
constexpr BuyableProduct_ProductReferenceType BuyableProduct::ProductReferenceType_MAX;
constexpr int BuyableProduct::ProductReferenceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PriceTrackingData::_Internal {
 public:
  using HasBits = decltype(std::declval<PriceTrackingData>()._has_bits_);
  static const ::commerce::BuyableProduct& buyable_product(const PriceTrackingData* msg);
  static void set_has_buyable_product(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::commerce::ProductPriceUpdate& product_update(const PriceTrackingData* msg);
  static void set_has_product_update(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::commerce::BuyableProduct&
PriceTrackingData::_Internal::buyable_product(const PriceTrackingData* msg) {
  return *msg->buyable_product_;
}
const ::commerce::ProductPriceUpdate&
PriceTrackingData::_Internal::product_update(const PriceTrackingData* msg) {
  return *msg->product_update_;
}
PriceTrackingData::PriceTrackingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:commerce.PriceTrackingData)
}
PriceTrackingData::PriceTrackingData(const PriceTrackingData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_buyable_product()) {
    buyable_product_ = new ::commerce::BuyableProduct(*from.buyable_product_);
  } else {
    buyable_product_ = nullptr;
  }
  if (from._internal_has_product_update()) {
    product_update_ = new ::commerce::ProductPriceUpdate(*from.product_update_);
  } else {
    product_update_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:commerce.PriceTrackingData)
}

inline void PriceTrackingData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buyable_product_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&product_update_) -
    reinterpret_cast<char*>(&buyable_product_)) + sizeof(product_update_));
}

PriceTrackingData::~PriceTrackingData() {
  // @@protoc_insertion_point(destructor:commerce.PriceTrackingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PriceTrackingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete buyable_product_;
  if (this != internal_default_instance()) delete product_update_;
}

void PriceTrackingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PriceTrackingData::Clear() {
// @@protoc_insertion_point(message_clear_start:commerce.PriceTrackingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(buyable_product_ != nullptr);
      buyable_product_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(product_update_ != nullptr);
      product_update_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PriceTrackingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .commerce.BuyableProduct buyable_product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyable_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .commerce.ProductPriceUpdate product_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_product_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PriceTrackingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commerce.PriceTrackingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .commerce.BuyableProduct buyable_product = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::buyable_product(this),
        _Internal::buyable_product(this).GetCachedSize(), target, stream);
  }

  // optional .commerce.ProductPriceUpdate product_update = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::product_update(this),
        _Internal::product_update(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commerce.PriceTrackingData)
  return target;
}

size_t PriceTrackingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commerce.PriceTrackingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .commerce.BuyableProduct buyable_product = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *buyable_product_);
    }

    // optional .commerce.ProductPriceUpdate product_update = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *product_update_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceTrackingData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PriceTrackingData*>(
      &from));
}

void PriceTrackingData::MergeFrom(const PriceTrackingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commerce.PriceTrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_buyable_product()->::commerce::BuyableProduct::MergeFrom(from._internal_buyable_product());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_product_update()->::commerce::ProductPriceUpdate::MergeFrom(from._internal_product_update());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PriceTrackingData::CopyFrom(const PriceTrackingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commerce.PriceTrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceTrackingData::IsInitialized() const {
  return true;
}

void PriceTrackingData::InternalSwap(PriceTrackingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceTrackingData, product_update_)
      + sizeof(PriceTrackingData::product_update_)
      - PROTOBUF_FIELD_OFFSET(PriceTrackingData, buyable_product_)>(
          reinterpret_cast<char*>(&buyable_product_),
          reinterpret_cast<char*>(&other->buyable_product_));
}

std::string PriceTrackingData::GetTypeName() const {
  return "commerce.PriceTrackingData";
}


// ===================================================================

class BuyableProduct::_Internal {
 public:
  using HasBits = decltype(std::declval<BuyableProduct>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::commerce::ProductPrice& current_price(const BuyableProduct* msg);
  static void set_has_current_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reference_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_product_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::commerce::ProductPrice&
BuyableProduct::_Internal::current_price(const BuyableProduct* msg) {
  return *msg->current_price_;
}
BuyableProduct::BuyableProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:commerce.BuyableProduct)
}
BuyableProduct::BuyableProduct(const BuyableProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  image_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_url()) {
    image_url_.Set(from._internal_image_url(), 
      GetArenaForAllocation());
  }
  country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    country_code_.Set(from._internal_country_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_current_price()) {
    current_price_ = new ::commerce::ProductPrice(*from.current_price_);
  } else {
    current_price_ = nullptr;
  }
  ::memcpy(&offer_id_, &from.offer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_type_) -
    reinterpret_cast<char*>(&offer_id_)) + sizeof(reference_type_));
  // @@protoc_insertion_point(copy_constructor:commerce.BuyableProduct)
}

inline void BuyableProduct::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reference_type_) -
    reinterpret_cast<char*>(&current_price_)) + sizeof(reference_type_));
}

BuyableProduct::~BuyableProduct() {
  // @@protoc_insertion_point(destructor:commerce.BuyableProduct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuyableProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  image_url_.Destroy();
  country_code_.Destroy();
  if (this != internal_default_instance()) delete current_price_;
}

void BuyableProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuyableProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:commerce.BuyableProduct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      image_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(current_price_ != nullptr);
      current_price_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&offer_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_type_) -
        reinterpret_cast<char*>(&offer_id_)) + sizeof(reference_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuyableProduct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .commerce.ProductPrice current_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .commerce.BuyableProduct.ProductReferenceType reference_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::commerce::BuyableProduct_ProductReferenceType_IsValid(val))) {
            _internal_set_reference_type(static_cast<::commerce::BuyableProduct_ProductReferenceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 offer_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_offer_id(&has_bits);
          offer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 product_cluster_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_product_cluster_id(&has_bits);
          product_cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuyableProduct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commerce.BuyableProduct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string image_url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_url(), target);
  }

  // optional .commerce.ProductPrice current_price = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::current_price(this),
        _Internal::current_price(this).GetCachedSize(), target, stream);
  }

  // optional .commerce.BuyableProduct.ProductReferenceType reference_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reference_type(), target);
  }

  // optional fixed64 offer_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_offer_id(), target);
  }

  // optional uint64 product_cluster_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_product_cluster_id(), target);
  }

  // optional string country_code = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commerce.BuyableProduct)
  return target;
}

size_t BuyableProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commerce.BuyableProduct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string image_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_url());
    }

    // optional string country_code = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional .commerce.ProductPrice current_price = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_price_);
    }

    // optional fixed64 offer_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 product_cluster_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_product_cluster_id());
    }

    // optional .commerce.BuyableProduct.ProductReferenceType reference_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reference_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuyableProduct::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuyableProduct*>(
      &from));
}

void BuyableProduct::MergeFrom(const BuyableProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commerce.BuyableProduct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_image_url(from._internal_image_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_current_price()->::commerce::ProductPrice::MergeFrom(from._internal_current_price());
    }
    if (cached_has_bits & 0x00000010u) {
      offer_id_ = from.offer_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      product_cluster_id_ = from.product_cluster_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      reference_type_ = from.reference_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuyableProduct::CopyFrom(const BuyableProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commerce.BuyableProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyableProduct::IsInitialized() const {
  return true;
}

void BuyableProduct::InternalSwap(BuyableProduct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_url_, lhs_arena,
      &other->image_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuyableProduct, reference_type_)
      + sizeof(BuyableProduct::reference_type_)
      - PROTOBUF_FIELD_OFFSET(BuyableProduct, current_price_)>(
          reinterpret_cast<char*>(&current_price_),
          reinterpret_cast<char*>(&other->current_price_));
}

std::string BuyableProduct::GetTypeName() const {
  return "commerce.BuyableProduct";
}


// ===================================================================

class ProductPriceUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductPriceUpdate>()._has_bits_);
  static void set_has_offer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::commerce::ProductPrice& old_price(const ProductPriceUpdate* msg);
  static void set_has_old_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::commerce::ProductPrice& new_price(const ProductPriceUpdate* msg);
  static void set_has_new_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::commerce::ProductPrice&
ProductPriceUpdate::_Internal::old_price(const ProductPriceUpdate* msg) {
  return *msg->old_price_;
}
const ::commerce::ProductPrice&
ProductPriceUpdate::_Internal::new_price(const ProductPriceUpdate* msg) {
  return *msg->new_price_;
}
ProductPriceUpdate::ProductPriceUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:commerce.ProductPriceUpdate)
}
ProductPriceUpdate::ProductPriceUpdate(const ProductPriceUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_old_price()) {
    old_price_ = new ::commerce::ProductPrice(*from.old_price_);
  } else {
    old_price_ = nullptr;
  }
  if (from._internal_has_new_price()) {
    new_price_ = new ::commerce::ProductPrice(*from.new_price_);
  } else {
    new_price_ = nullptr;
  }
  offer_id_ = from.offer_id_;
  // @@protoc_insertion_point(copy_constructor:commerce.ProductPriceUpdate)
}

inline void ProductPriceUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&old_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offer_id_) -
    reinterpret_cast<char*>(&old_price_)) + sizeof(offer_id_));
}

ProductPriceUpdate::~ProductPriceUpdate() {
  // @@protoc_insertion_point(destructor:commerce.ProductPriceUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductPriceUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete old_price_;
  if (this != internal_default_instance()) delete new_price_;
}

void ProductPriceUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProductPriceUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:commerce.ProductPriceUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(old_price_ != nullptr);
      old_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_price_ != nullptr);
      new_price_->Clear();
    }
  }
  offer_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProductPriceUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 offer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_offer_id(&has_bits);
          offer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .commerce.ProductPrice old_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .commerce.ProductPrice new_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductPriceUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commerce.ProductPriceUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 offer_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_offer_id(), target);
  }

  // optional .commerce.ProductPrice old_price = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_price(this),
        _Internal::old_price(this).GetCachedSize(), target, stream);
  }

  // optional .commerce.ProductPrice new_price = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_price(this),
        _Internal::new_price(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commerce.ProductPriceUpdate)
  return target;
}

size_t ProductPriceUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commerce.ProductPriceUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .commerce.ProductPrice old_price = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_price_);
    }

    // optional .commerce.ProductPrice new_price = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_price_);
    }

    // optional fixed64 offer_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductPriceUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProductPriceUpdate*>(
      &from));
}

void ProductPriceUpdate::MergeFrom(const ProductPriceUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commerce.ProductPriceUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_old_price()->::commerce::ProductPrice::MergeFrom(from._internal_old_price());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_price()->::commerce::ProductPrice::MergeFrom(from._internal_new_price());
    }
    if (cached_has_bits & 0x00000004u) {
      offer_id_ = from.offer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProductPriceUpdate::CopyFrom(const ProductPriceUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commerce.ProductPriceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductPriceUpdate::IsInitialized() const {
  return true;
}

void ProductPriceUpdate::InternalSwap(ProductPriceUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductPriceUpdate, offer_id_)
      + sizeof(ProductPriceUpdate::offer_id_)
      - PROTOBUF_FIELD_OFFSET(ProductPriceUpdate, old_price_)>(
          reinterpret_cast<char*>(&old_price_),
          reinterpret_cast<char*>(&other->old_price_));
}

std::string ProductPriceUpdate::GetTypeName() const {
  return "commerce.ProductPriceUpdate";
}


// ===================================================================

class ProductPrice::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductPrice>()._has_bits_);
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProductPrice::ProductPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:commerce.ProductPrice)
}
ProductPrice::ProductPrice(const ProductPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    currency_code_.Set(from._internal_currency_code(), 
      GetArenaForAllocation());
  }
  amount_micros_ = from.amount_micros_;
  // @@protoc_insertion_point(copy_constructor:commerce.ProductPrice)
}

inline void ProductPrice::SharedCtor() {
currency_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  currency_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_micros_ = int64_t{0};
}

ProductPrice::~ProductPrice() {
  // @@protoc_insertion_point(destructor:commerce.ProductPrice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  currency_code_.Destroy();
}

void ProductPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProductPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:commerce.ProductPrice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    currency_code_.ClearNonDefaultToEmpty();
  }
  amount_micros_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProductPrice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string currency_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 amount_micros = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount_micros(&has_bits);
          amount_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductPrice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commerce.ProductPrice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string currency_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency_code(), target);
  }

  // optional int64 amount_micros = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount_micros(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commerce.ProductPrice)
  return target;
}

size_t ProductPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commerce.ProductPrice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string currency_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional int64 amount_micros = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount_micros());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductPrice::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProductPrice*>(
      &from));
}

void ProductPrice::MergeFrom(const ProductPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commerce.ProductPrice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_micros_ = from.amount_micros_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProductPrice::CopyFrom(const ProductPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commerce.ProductPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductPrice::IsInitialized() const {
  return true;
}

void ProductPrice::InternalSwap(ProductPrice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &currency_code_, lhs_arena,
      &other->currency_code_, rhs_arena
  );
  swap(amount_micros_, other->amount_micros_);
}

std::string ProductPrice::GetTypeName() const {
  return "commerce.ProductPrice";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commerce
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::commerce::PriceTrackingData*
Arena::CreateMaybeMessage< ::commerce::PriceTrackingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commerce::PriceTrackingData >(arena);
}
template<> PROTOBUF_NOINLINE ::commerce::BuyableProduct*
Arena::CreateMaybeMessage< ::commerce::BuyableProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commerce::BuyableProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::commerce::ProductPriceUpdate*
Arena::CreateMaybeMessage< ::commerce::ProductPriceUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commerce::ProductPriceUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::commerce::ProductPrice*
Arena::CreateMaybeMessage< ::commerce::ProductPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commerce::ProductPrice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
