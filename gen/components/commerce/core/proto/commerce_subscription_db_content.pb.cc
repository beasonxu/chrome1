// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/commerce/core/proto/commerce_subscription_db_content.proto

#include "components/commerce/core/proto/commerce_subscription_db_content.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace commerce_subscription_db {
PROTOBUF_CONSTEXPR CommerceSubscriptionContentProto::CommerceSubscriptionContentProto(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tracking_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , subscription_type_(0)

  , tracking_id_type_(0)

  , timestamp_(int64_t{0})
  , management_type_(0)
{}
struct CommerceSubscriptionContentProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommerceSubscriptionContentProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommerceSubscriptionContentProtoDefaultTypeInternal() {}
  union {
    CommerceSubscriptionContentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommerceSubscriptionContentProtoDefaultTypeInternal _CommerceSubscriptionContentProto_default_instance_;
}  // namespace commerce_subscription_db
namespace commerce_subscription_db {
bool CommerceSubscriptionContentProto_SubscriptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CommerceSubscriptionContentProto_SubscriptionType_strings[2] = {};

static const char CommerceSubscriptionContentProto_SubscriptionType_names[] =
  "PRICE_TRACK"
  "TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CommerceSubscriptionContentProto_SubscriptionType_entries[] = {
  { {CommerceSubscriptionContentProto_SubscriptionType_names + 0, 11}, 1 },
  { {CommerceSubscriptionContentProto_SubscriptionType_names + 11, 16}, 0 },
};

static const int CommerceSubscriptionContentProto_SubscriptionType_entries_by_number[] = {
  1, // 0 -> TYPE_UNSPECIFIED
  0, // 1 -> PRICE_TRACK
};

const std::string& CommerceSubscriptionContentProto_SubscriptionType_Name(
    CommerceSubscriptionContentProto_SubscriptionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CommerceSubscriptionContentProto_SubscriptionType_entries,
          CommerceSubscriptionContentProto_SubscriptionType_entries_by_number,
          2, CommerceSubscriptionContentProto_SubscriptionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CommerceSubscriptionContentProto_SubscriptionType_entries,
      CommerceSubscriptionContentProto_SubscriptionType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CommerceSubscriptionContentProto_SubscriptionType_strings[idx].get();
}
bool CommerceSubscriptionContentProto_SubscriptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommerceSubscriptionContentProto_SubscriptionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CommerceSubscriptionContentProto_SubscriptionType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CommerceSubscriptionContentProto_SubscriptionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommerceSubscriptionContentProto_SubscriptionType CommerceSubscriptionContentProto::TYPE_UNSPECIFIED;
constexpr CommerceSubscriptionContentProto_SubscriptionType CommerceSubscriptionContentProto::PRICE_TRACK;
constexpr CommerceSubscriptionContentProto_SubscriptionType CommerceSubscriptionContentProto::SubscriptionType_MIN;
constexpr CommerceSubscriptionContentProto_SubscriptionType CommerceSubscriptionContentProto::SubscriptionType_MAX;
constexpr int CommerceSubscriptionContentProto::SubscriptionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CommerceSubscriptionContentProto_TrackingIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CommerceSubscriptionContentProto_TrackingIdType_strings[3] = {};

static const char CommerceSubscriptionContentProto_TrackingIdType_names[] =
  "IDENTIFIER_TYPE_UNSPECIFIED"
  "OFFER_ID"
  "PRODUCT_CLUSTER_ID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CommerceSubscriptionContentProto_TrackingIdType_entries[] = {
  { {CommerceSubscriptionContentProto_TrackingIdType_names + 0, 27}, 0 },
  { {CommerceSubscriptionContentProto_TrackingIdType_names + 27, 8}, 1 },
  { {CommerceSubscriptionContentProto_TrackingIdType_names + 35, 18}, 2 },
};

static const int CommerceSubscriptionContentProto_TrackingIdType_entries_by_number[] = {
  0, // 0 -> IDENTIFIER_TYPE_UNSPECIFIED
  1, // 1 -> OFFER_ID
  2, // 2 -> PRODUCT_CLUSTER_ID
};

const std::string& CommerceSubscriptionContentProto_TrackingIdType_Name(
    CommerceSubscriptionContentProto_TrackingIdType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CommerceSubscriptionContentProto_TrackingIdType_entries,
          CommerceSubscriptionContentProto_TrackingIdType_entries_by_number,
          3, CommerceSubscriptionContentProto_TrackingIdType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CommerceSubscriptionContentProto_TrackingIdType_entries,
      CommerceSubscriptionContentProto_TrackingIdType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CommerceSubscriptionContentProto_TrackingIdType_strings[idx].get();
}
bool CommerceSubscriptionContentProto_TrackingIdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommerceSubscriptionContentProto_TrackingIdType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CommerceSubscriptionContentProto_TrackingIdType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CommerceSubscriptionContentProto_TrackingIdType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto::IDENTIFIER_TYPE_UNSPECIFIED;
constexpr CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto::OFFER_ID;
constexpr CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto::PRODUCT_CLUSTER_ID;
constexpr CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto::TrackingIdType_MIN;
constexpr CommerceSubscriptionContentProto_TrackingIdType CommerceSubscriptionContentProto::TrackingIdType_MAX;
constexpr int CommerceSubscriptionContentProto::TrackingIdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CommerceSubscriptionContentProto_SubscriptionManagementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CommerceSubscriptionContentProto_SubscriptionManagementType_strings[3] = {};

static const char CommerceSubscriptionContentProto_SubscriptionManagementType_names[] =
  "CHROME_MANAGED"
  "MANAGE_TYPE_UNSPECIFIED"
  "USER_MANAGED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CommerceSubscriptionContentProto_SubscriptionManagementType_entries[] = {
  { {CommerceSubscriptionContentProto_SubscriptionManagementType_names + 0, 14}, 1 },
  { {CommerceSubscriptionContentProto_SubscriptionManagementType_names + 14, 23}, 0 },
  { {CommerceSubscriptionContentProto_SubscriptionManagementType_names + 37, 12}, 2 },
};

static const int CommerceSubscriptionContentProto_SubscriptionManagementType_entries_by_number[] = {
  1, // 0 -> MANAGE_TYPE_UNSPECIFIED
  0, // 1 -> CHROME_MANAGED
  2, // 2 -> USER_MANAGED
};

const std::string& CommerceSubscriptionContentProto_SubscriptionManagementType_Name(
    CommerceSubscriptionContentProto_SubscriptionManagementType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CommerceSubscriptionContentProto_SubscriptionManagementType_entries,
          CommerceSubscriptionContentProto_SubscriptionManagementType_entries_by_number,
          3, CommerceSubscriptionContentProto_SubscriptionManagementType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CommerceSubscriptionContentProto_SubscriptionManagementType_entries,
      CommerceSubscriptionContentProto_SubscriptionManagementType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CommerceSubscriptionContentProto_SubscriptionManagementType_strings[idx].get();
}
bool CommerceSubscriptionContentProto_SubscriptionManagementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommerceSubscriptionContentProto_SubscriptionManagementType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CommerceSubscriptionContentProto_SubscriptionManagementType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CommerceSubscriptionContentProto_SubscriptionManagementType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto::MANAGE_TYPE_UNSPECIFIED;
constexpr CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto::CHROME_MANAGED;
constexpr CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto::USER_MANAGED;
constexpr CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto::SubscriptionManagementType_MIN;
constexpr CommerceSubscriptionContentProto_SubscriptionManagementType CommerceSubscriptionContentProto::SubscriptionManagementType_MAX;
constexpr int CommerceSubscriptionContentProto::SubscriptionManagementType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CommerceSubscriptionContentProto::_Internal {
 public:
};

CommerceSubscriptionContentProto::CommerceSubscriptionContentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:commerce_subscription_db.CommerceSubscriptionContentProto)
}
CommerceSubscriptionContentProto::CommerceSubscriptionContentProto(const CommerceSubscriptionContentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  tracking_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tracking_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracking_id().empty()) {
    tracking_id_.Set(from._internal_tracking_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&subscription_type_, &from.subscription_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&management_type_) -
    reinterpret_cast<char*>(&subscription_type_)) + sizeof(management_type_));
  // @@protoc_insertion_point(copy_constructor:commerce_subscription_db.CommerceSubscriptionContentProto)
}

inline void CommerceSubscriptionContentProto::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tracking_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tracking_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subscription_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&management_type_) -
    reinterpret_cast<char*>(&subscription_type_)) + sizeof(management_type_));
}

CommerceSubscriptionContentProto::~CommerceSubscriptionContentProto() {
  // @@protoc_insertion_point(destructor:commerce_subscription_db.CommerceSubscriptionContentProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommerceSubscriptionContentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  tracking_id_.Destroy();
}

void CommerceSubscriptionContentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommerceSubscriptionContentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:commerce_subscription_db.CommerceSubscriptionContentProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  tracking_id_.ClearToEmpty();
  ::memset(&subscription_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&management_type_) -
      reinterpret_cast<char*>(&subscription_type_)) + sizeof(management_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CommerceSubscriptionContentProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionType subscription_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subscription_type(static_cast<::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionType>(val));
        } else
          goto handle_unusual;
        continue;
      // string tracking_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tracking_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .commerce_subscription_db.CommerceSubscriptionContentProto.TrackingIdType tracking_id_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tracking_id_type(static_cast<::commerce_subscription_db::CommerceSubscriptionContentProto_TrackingIdType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionManagementType management_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_management_type(static_cast<::commerce_subscription_db::CommerceSubscriptionContentProto_SubscriptionManagementType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommerceSubscriptionContentProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commerce_subscription_db.CommerceSubscriptionContentProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commerce_subscription_db.CommerceSubscriptionContentProto.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionType subscription_type = 2;
  if (this->_internal_subscription_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_subscription_type(), target);
  }

  // string tracking_id = 3;
  if (!this->_internal_tracking_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracking_id().data(), static_cast<int>(this->_internal_tracking_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commerce_subscription_db.CommerceSubscriptionContentProto.tracking_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tracking_id(), target);
  }

  // .commerce_subscription_db.CommerceSubscriptionContentProto.TrackingIdType tracking_id_type = 4;
  if (this->_internal_tracking_id_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tracking_id_type(), target);
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionManagementType management_type = 6;
  if (this->_internal_management_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_management_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commerce_subscription_db.CommerceSubscriptionContentProto)
  return target;
}

size_t CommerceSubscriptionContentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commerce_subscription_db.CommerceSubscriptionContentProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string tracking_id = 3;
  if (!this->_internal_tracking_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracking_id());
  }

  // .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionType subscription_type = 2;
  if (this->_internal_subscription_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subscription_type());
  }

  // .commerce_subscription_db.CommerceSubscriptionContentProto.TrackingIdType tracking_id_type = 4;
  if (this->_internal_tracking_id_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracking_id_type());
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .commerce_subscription_db.CommerceSubscriptionContentProto.SubscriptionManagementType management_type = 6;
  if (this->_internal_management_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_management_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommerceSubscriptionContentProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CommerceSubscriptionContentProto*>(
      &from));
}

void CommerceSubscriptionContentProto::MergeFrom(const CommerceSubscriptionContentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commerce_subscription_db.CommerceSubscriptionContentProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_tracking_id().empty()) {
    _internal_set_tracking_id(from._internal_tracking_id());
  }
  if (from._internal_subscription_type() != 0) {
    _internal_set_subscription_type(from._internal_subscription_type());
  }
  if (from._internal_tracking_id_type() != 0) {
    _internal_set_tracking_id_type(from._internal_tracking_id_type());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_management_type() != 0) {
    _internal_set_management_type(from._internal_management_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CommerceSubscriptionContentProto::CopyFrom(const CommerceSubscriptionContentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commerce_subscription_db.CommerceSubscriptionContentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommerceSubscriptionContentProto::IsInitialized() const {
  return true;
}

void CommerceSubscriptionContentProto::InternalSwap(CommerceSubscriptionContentProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tracking_id_, lhs_arena,
      &other->tracking_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommerceSubscriptionContentProto, management_type_)
      + sizeof(CommerceSubscriptionContentProto::management_type_)
      - PROTOBUF_FIELD_OFFSET(CommerceSubscriptionContentProto, subscription_type_)>(
          reinterpret_cast<char*>(&subscription_type_),
          reinterpret_cast<char*>(&other->subscription_type_));
}

std::string CommerceSubscriptionContentProto::GetTypeName() const {
  return "commerce_subscription_db.CommerceSubscriptionContentProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commerce_subscription_db
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::commerce_subscription_db::CommerceSubscriptionContentProto*
Arena::CreateMaybeMessage< ::commerce_subscription_db::CommerceSubscriptionContentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commerce_subscription_db::CommerceSubscriptionContentProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
