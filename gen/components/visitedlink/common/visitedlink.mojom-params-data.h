// components/visitedlink/common/visitedlink.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_VISITEDLINK_COMMON_VISITEDLINK_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_VISITEDLINK_COMMON_VISITEDLINK_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace visitedlink {
namespace mojom {
namespace internal {

class ValidationContext;
class  VisitedLinkNotificationSink_UpdateVisitedLinks_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> table_region;

 private:
  friend class mojo::internal::MessageFragment<VisitedLinkNotificationSink_UpdateVisitedLinks_Params_Data>;

  VisitedLinkNotificationSink_UpdateVisitedLinks_Params_Data();
  ~VisitedLinkNotificationSink_UpdateVisitedLinks_Params_Data() = delete;
};
static_assert(sizeof(VisitedLinkNotificationSink_UpdateVisitedLinks_Params_Data) == 16,
              "Bad sizeof(VisitedLinkNotificationSink_UpdateVisitedLinks_Params_Data)");
class  VisitedLinkNotificationSink_AddVisitedLinks_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint64_t>> link_hashes;

 private:
  friend class mojo::internal::MessageFragment<VisitedLinkNotificationSink_AddVisitedLinks_Params_Data>;

  VisitedLinkNotificationSink_AddVisitedLinks_Params_Data();
  ~VisitedLinkNotificationSink_AddVisitedLinks_Params_Data() = delete;
};
static_assert(sizeof(VisitedLinkNotificationSink_AddVisitedLinks_Params_Data) == 16,
              "Bad sizeof(VisitedLinkNotificationSink_AddVisitedLinks_Params_Data)");
class  VisitedLinkNotificationSink_ResetVisitedLinks_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t invalidate_cached_hashes : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<VisitedLinkNotificationSink_ResetVisitedLinks_Params_Data>;

  VisitedLinkNotificationSink_ResetVisitedLinks_Params_Data();
  ~VisitedLinkNotificationSink_ResetVisitedLinks_Params_Data() = delete;
};
static_assert(sizeof(VisitedLinkNotificationSink_ResetVisitedLinks_Params_Data) == 16,
              "Bad sizeof(VisitedLinkNotificationSink_ResetVisitedLinks_Params_Data)");

}  // namespace internal


class VisitedLinkNotificationSink_UpdateVisitedLinks_ParamsDataView {
 public:
  VisitedLinkNotificationSink_UpdateVisitedLinks_ParamsDataView() = default;

  VisitedLinkNotificationSink_UpdateVisitedLinks_ParamsDataView(
      internal::VisitedLinkNotificationSink_UpdateVisitedLinks_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTableRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTableRegion(UserType* output) {
    
    auto* pointer = data_->table_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, message_);
  }
 private:
  internal::VisitedLinkNotificationSink_UpdateVisitedLinks_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VisitedLinkNotificationSink_AddVisitedLinks_ParamsDataView {
 public:
  VisitedLinkNotificationSink_AddVisitedLinks_ParamsDataView() = default;

  VisitedLinkNotificationSink_AddVisitedLinks_ParamsDataView(
      internal::VisitedLinkNotificationSink_AddVisitedLinks_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLinkHashesDataView(
      mojo::ArrayDataView<uint64_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLinkHashes(UserType* output) {
    
    auto* pointer = data_->link_hashes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint64_t>>(
        pointer, output, message_);
  }
 private:
  internal::VisitedLinkNotificationSink_AddVisitedLinks_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VisitedLinkNotificationSink_ResetVisitedLinks_ParamsDataView {
 public:
  VisitedLinkNotificationSink_ResetVisitedLinks_ParamsDataView() = default;

  VisitedLinkNotificationSink_ResetVisitedLinks_ParamsDataView(
      internal::VisitedLinkNotificationSink_ResetVisitedLinks_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool invalidate_cached_hashes() const {
    return data_->invalidate_cached_hashes;
  }
 private:
  internal::VisitedLinkNotificationSink_ResetVisitedLinks_Params_Data* data_ = nullptr;
};


inline void VisitedLinkNotificationSink_UpdateVisitedLinks_ParamsDataView::GetTableRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->table_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, message_);
}


inline void VisitedLinkNotificationSink_AddVisitedLinks_ParamsDataView::GetLinkHashesDataView(
    mojo::ArrayDataView<uint64_t>* output) {
  auto pointer = data_->link_hashes.Get();
  *output = mojo::ArrayDataView<uint64_t>(pointer, message_);
}



}  // namespace mojom
}  // namespace visitedlink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_VISITEDLINK_COMMON_VISITEDLINK_MOJOM_PARAMS_DATA_H_