// ui/accessibility/mojom/ax_assistant_structure.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_ACCESSIBILITY_MOJOM_AX_ASSISTANT_STRUCTURE_MOJOM_SHARED_INTERNAL_H_
#define UI_ACCESSIBILITY_MOJOM_AX_ASSISTANT_STRUCTURE_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "ui/gfx/range/mojom/range.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace ax {
namespace mojom {
namespace internal {
class AssistantTree_Data;
class AssistantNode_Data;
class AssistantExtra_Data;
class AssistantStructure_Data;

#pragma pack(push, 1)
class  AssistantTree_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::AssistantNode_Data>>> nodes;

 private:
  friend class mojo::internal::MessageFragment<AssistantTree_Data>;

  AssistantTree_Data();
  ~AssistantTree_Data() = delete;
};
static_assert(sizeof(AssistantTree_Data) == 16,
              "Bad sizeof(AssistantTree_Data)");
// Used by AssistantTree::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AssistantTree_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AssistantTree_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AssistantTree_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AssistantTree_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AssistantTree_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AssistantNode_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> children_indices;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> text;
  float text_size;
  uint32_t color;
  uint32_t bgcolor;
  uint8_t bold : 1;
  uint8_t italic : 1;
  uint8_t underline : 1;
  uint8_t line_through : 1;
  uint8_t pad9_[3];
  mojo::internal::Pointer<::gfx::mojom::internal::Range_Data> selection;
  mojo::internal::Pointer<mojo::internal::String_Data> class_name;
  mojo::internal::Pointer<mojo::internal::String_Data> role;

 private:
  friend class mojo::internal::MessageFragment<AssistantNode_Data>;

  AssistantNode_Data();
  ~AssistantNode_Data() = delete;
};
static_assert(sizeof(AssistantNode_Data) == 72,
              "Bad sizeof(AssistantNode_Data)");
// Used by AssistantNode::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AssistantNode_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AssistantNode_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AssistantNode_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AssistantNode_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AssistantNode_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AssistantExtra_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> bounds_pixel;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> title;

 private:
  friend class mojo::internal::MessageFragment<AssistantExtra_Data>;

  AssistantExtra_Data();
  ~AssistantExtra_Data() = delete;
};
static_assert(sizeof(AssistantExtra_Data) == 32,
              "Bad sizeof(AssistantExtra_Data)");
// Used by AssistantExtra::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AssistantExtra_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AssistantExtra_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AssistantExtra_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AssistantExtra_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AssistantExtra_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AssistantStructure_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::AssistantTree_Data> assistant_tree;
  mojo::internal::Pointer<internal::AssistantExtra_Data> assistant_extra;

 private:
  friend class mojo::internal::MessageFragment<AssistantStructure_Data>;

  AssistantStructure_Data();
  ~AssistantStructure_Data() = delete;
};
static_assert(sizeof(AssistantStructure_Data) == 24,
              "Bad sizeof(AssistantStructure_Data)");
// Used by AssistantStructure::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AssistantStructure_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AssistantStructure_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AssistantStructure_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AssistantStructure_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AssistantStructure_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace ax

#endif  // UI_ACCESSIBILITY_MOJOM_AX_ASSISTANT_STRUCTURE_MOJOM_SHARED_INTERNAL_H_