// ui/accessibility/mojom/ax_action_data.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_ACCESSIBILITY_MOJOM_AX_ACTION_DATA_MOJOM_SHARED_H_
#define UI_ACCESSIBILITY_MOJOM_AX_ACTION_DATA_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/accessibility/mojom/ax_action_data.mojom-shared-internal.h"
#include "ui/accessibility/ax_enums.mojom-shared.h"
#include "ui/accessibility/mojom/ax_tree_id.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"







namespace ax {
namespace mojom {
class AXActionDataDataView;



}  // namespace mojom
}  // namespace ax

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::ax::mojom::AXActionDataDataView> {
  using Data = ::ax::mojom::internal::AXActionData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace ax {
namespace mojom {


class AXActionDataDataView {
 public:
  AXActionDataDataView() = default;

  AXActionDataDataView(
      internal::AXActionData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) const {
    auto data_value = data_->action;
    return mojo::internal::Deserialize<::ax::mojom::Action>(
        data_value, output);
  }
  ::ax::mojom::Action action() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ax::mojom::Action>(data_->action));
  }
  inline void GetTargetTreeIdDataView(
      ::ax::mojom::AXTreeIDDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTargetTreeId(UserType* output) {
    
    auto* pointer = !data_->target_tree_id.is_null() ? &data_->target_tree_id : nullptr;
    return mojo::internal::Deserialize<::ax::mojom::AXTreeIDDataView>(
        pointer, output, message_);
  }
  inline void GetSourceExtensionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceExtensionId(UserType* output) {
    
    auto* pointer = data_->source_extension_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t target_node_id() const {
    return data_->target_node_id;
  }
  int32_t request_id() const {
    return data_->request_id;
  }
  int32_t flags() const {
    return data_->flags;
  }
  int32_t anchor_node_id() const {
    return data_->anchor_node_id;
  }
  int32_t anchor_offset() const {
    return data_->anchor_offset;
  }
  int32_t focus_node_id() const {
    return data_->focus_node_id;
  }
  int32_t focus_offset() const {
    return data_->focus_offset;
  }
  int32_t custom_action_id() const {
    return data_->custom_action_id;
  }
  inline void GetTargetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTargetRect(UserType* output) {
    
    auto* pointer = data_->target_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetTargetPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTargetPoint(UserType* output) {
    
    auto* pointer = data_->target_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadHitTestEventToFire(UserType* output) const {
    auto data_value = data_->hit_test_event_to_fire;
    return mojo::internal::Deserialize<::ax::mojom::Event>(
        data_value, output);
  }
  ::ax::mojom::Event hit_test_event_to_fire() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ax::mojom::Event>(data_->hit_test_event_to_fire));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadHorizontalScrollAlignment(UserType* output) const {
    auto data_value = data_->horizontal_scroll_alignment;
    return mojo::internal::Deserialize<::ax::mojom::ScrollAlignment>(
        data_value, output);
  }
  ::ax::mojom::ScrollAlignment horizontal_scroll_alignment() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ax::mojom::ScrollAlignment>(data_->horizontal_scroll_alignment));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadVerticalScrollAlignment(UserType* output) const {
    auto data_value = data_->vertical_scroll_alignment;
    return mojo::internal::Deserialize<::ax::mojom::ScrollAlignment>(
        data_value, output);
  }
  ::ax::mojom::ScrollAlignment vertical_scroll_alignment() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ax::mojom::ScrollAlignment>(data_->vertical_scroll_alignment));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadScrollBehavior(UserType* output) const {
    auto data_value = data_->scroll_behavior;
    return mojo::internal::Deserialize<::ax::mojom::ScrollBehavior>(
        data_value, output);
  }
  ::ax::mojom::ScrollBehavior scroll_behavior() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ax::mojom::ScrollBehavior>(data_->scroll_behavior));
  }
 private:
  internal::AXActionData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace ax

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ax::mojom::AXActionDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::ax::mojom::AXActionDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::ax::mojom::internal::AXActionData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::ax::mojom::Action>(
        Traits::action(input), &fragment->action);
    decltype(Traits::target_tree_id(input)) in_target_tree_id = Traits::target_tree_id(input);
    mojo::internal::MessageFragment<decltype(fragment->target_tree_id)>
        target_tree_id_fragment(fragment.message());
    target_tree_id_fragment.Claim(&fragment->target_tree_id);
    mojo::internal::Serialize<::ax::mojom::AXTreeIDDataView>(
        in_target_tree_id, target_tree_id_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->target_tree_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null target_tree_id in AXActionData struct");
    decltype(Traits::source_extension_id(input)) in_source_extension_id = Traits::source_extension_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->source_extension_id)::BaseType> source_extension_id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_source_extension_id, source_extension_id_fragment);
    fragment->source_extension_id.Set(
        source_extension_id_fragment.is_null() ? nullptr : source_extension_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->source_extension_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null source_extension_id in AXActionData struct");
    fragment->target_node_id = Traits::target_node_id(input);
    fragment->request_id = Traits::request_id(input);
    fragment->flags = Traits::flags(input);
    fragment->anchor_node_id = Traits::anchor_node_id(input);
    fragment->anchor_offset = Traits::anchor_offset(input);
    fragment->focus_node_id = Traits::focus_node_id(input);
    fragment->focus_offset = Traits::focus_offset(input);
    fragment->custom_action_id = Traits::custom_action_id(input);
    decltype(Traits::target_rect(input)) in_target_rect = Traits::target_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->target_rect)::BaseType> target_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_target_rect, target_rect_fragment);
    fragment->target_rect.Set(
        target_rect_fragment.is_null() ? nullptr : target_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->target_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null target_rect in AXActionData struct");
    decltype(Traits::target_point(input)) in_target_point = Traits::target_point(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->target_point)::BaseType> target_point_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointDataView>(
        in_target_point, target_point_fragment);
    fragment->target_point.Set(
        target_point_fragment.is_null() ? nullptr : target_point_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->target_point.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null target_point in AXActionData struct");
    decltype(Traits::value(input)) in_value = Traits::value(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->value)::BaseType> value_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_value, value_fragment);
    fragment->value.Set(
        value_fragment.is_null() ? nullptr : value_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->value.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null value in AXActionData struct");
    mojo::internal::Serialize<::ax::mojom::Event>(
        Traits::hit_test_event_to_fire(input), &fragment->hit_test_event_to_fire);
    mojo::internal::Serialize<::ax::mojom::ScrollAlignment>(
        Traits::horizontal_scroll_alignment(input), &fragment->horizontal_scroll_alignment);
    mojo::internal::Serialize<::ax::mojom::ScrollAlignment>(
        Traits::vertical_scroll_alignment(input), &fragment->vertical_scroll_alignment);
    mojo::internal::Serialize<::ax::mojom::ScrollBehavior>(
        Traits::scroll_behavior(input), &fragment->scroll_behavior);
  }

  static bool Deserialize(::ax::mojom::internal::AXActionData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::ax::mojom::AXActionDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace ax {
namespace mojom {

inline void AXActionDataDataView::GetTargetTreeIdDataView(
    ::ax::mojom::AXTreeIDDataView* output) {
  auto pointer = &data_->target_tree_id;
  *output = ::ax::mojom::AXTreeIDDataView(pointer, message_);
}
inline void AXActionDataDataView::GetSourceExtensionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->source_extension_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AXActionDataDataView::GetTargetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->target_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void AXActionDataDataView::GetTargetPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->target_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}
inline void AXActionDataDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace ax

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // UI_ACCESSIBILITY_MOJOM_AX_ACTION_DATA_MOJOM_SHARED_H_