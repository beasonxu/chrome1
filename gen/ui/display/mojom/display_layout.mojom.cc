// ui/display/mojom/display_layout.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "ui/display/mojom/display_layout.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "ui/display/mojom/display_layout.mojom-params-data.h"
#include "ui/display/mojom/display_layout.mojom-shared-message-ids.h"

#include "ui/display/mojom/display_layout.mojom-import-headers.h"
#include "ui/display/mojom/display_layout.mojom-test-utils.h"


#ifndef UI_DISPLAY_MOJOM_DISPLAY_LAYOUT_MOJOM_JUMBO_H_
#define UI_DISPLAY_MOJOM_DISPLAY_LAYOUT_MOJOM_JUMBO_H_
#endif



namespace display {
namespace mojom {
DisplayPlacement::DisplayPlacement()
    : display_id(),
      parent_display_id(),
      position(),
      offset(),
      offset_reference() {}

DisplayPlacement::DisplayPlacement(
    int64_t display_id_in,
    int64_t parent_display_id_in,
    ::display::DisplayPlacement::Position position_in,
    int32_t offset_in,
    ::display::DisplayPlacement::OffsetReference offset_reference_in)
    : display_id(std::move(display_id_in)),
      parent_display_id(std::move(parent_display_id_in)),
      position(std::move(position_in)),
      offset(std::move(offset_in)),
      offset_reference(std::move(offset_reference_in)) {}

DisplayPlacement::~DisplayPlacement() = default;

void DisplayPlacement::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "display_id"), this->display_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "parent_display_id"), this->parent_display_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "position"), this->position,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::display::DisplayPlacement::Position>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "offset"), this->offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "offset_reference"), this->offset_reference,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::display::DisplayPlacement::OffsetReference>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DisplayPlacement::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
DisplayLayout::DisplayLayout()
    : default_unified(),
      primary_display_id(),
      placement_list() {}

DisplayLayout::DisplayLayout(
    bool default_unified_in,
    int64_t primary_display_id_in,
    std::vector<::display::DisplayPlacement> placement_list_in)
    : default_unified(std::move(default_unified_in)),
      primary_display_id(std::move(primary_display_id_in)),
      placement_list(std::move(placement_list_in)) {}

DisplayLayout::~DisplayLayout() = default;

void DisplayLayout::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "default_unified"), this->default_unified,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "primary_display_id"), this->primary_display_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "placement_list"), this->placement_list,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::display::DisplayPlacement>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DisplayLayout::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace display


namespace mojo {


// static
bool StructTraits<::display::mojom::DisplayPlacement::DataView, ::display::mojom::DisplayPlacementPtr>::Read(
    ::display::mojom::DisplayPlacement::DataView input,
    ::display::mojom::DisplayPlacementPtr* output) {
  bool success = true;
  ::display::mojom::DisplayPlacementPtr result(::display::mojom::DisplayPlacement::New());
  
      if (success)
        result->display_id = input.display_id();
      if (success)
        result->parent_display_id = input.parent_display_id();
      if (success && !input.ReadPosition(&result->position))
        success = false;
      if (success)
        result->offset = input.offset();
      if (success && !input.ReadOffsetReference(&result->offset_reference))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::display::mojom::DisplayLayout::DataView, ::display::mojom::DisplayLayoutPtr>::Read(
    ::display::mojom::DisplayLayout::DataView input,
    ::display::mojom::DisplayLayoutPtr* output) {
  bool success = true;
  ::display::mojom::DisplayLayoutPtr result(::display::mojom::DisplayLayout::New());
  
      if (success)
        result->default_unified = input.default_unified();
      if (success)
        result->primary_display_id = input.primary_display_id();
      if (success && !input.ReadPlacementList(&result->placement_list))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace display {
namespace mojom {




}  // namespace mojom
}  // namespace display


#if defined(__clang__)
#pragma clang diagnostic pop
#endif