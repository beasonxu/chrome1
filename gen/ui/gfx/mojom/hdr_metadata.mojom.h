// ui/gfx/mojom/hdr_metadata.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_HDR_METADATA_MOJOM_H_
#define UI_GFX_MOJOM_HDR_METADATA_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/gfx/mojom/hdr_metadata.mojom-shared.h"
#include "ui/gfx/mojom/hdr_metadata.mojom-forward.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include <string>
#include <vector>




#include "ui/gfx/mojom/hdr_metadata_mojom_traits.h"




namespace gfx {
namespace mojom {









class  ColorVolumeMetadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ColorVolumeMetadata, T>::value>;
  using DataView = ColorVolumeMetadataDataView;
  using Data_ = internal::ColorVolumeMetadata_Data;

  template <typename... Args>
  static ColorVolumeMetadataPtr New(Args&&... args) {
    return ColorVolumeMetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ColorVolumeMetadataPtr From(const U& u) {
    return mojo::TypeConverter<ColorVolumeMetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ColorVolumeMetadata>::Convert(*this);
  }


  ColorVolumeMetadata();

  ColorVolumeMetadata(
      const ::gfx::PointF& primary_r,
      const ::gfx::PointF& primary_g,
      const ::gfx::PointF& primary_b,
      const ::gfx::PointF& white_point,
      float luminance_max,
      float luminance_min);


  ~ColorVolumeMetadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ColorVolumeMetadataPtr>
  ColorVolumeMetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ColorVolumeMetadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ColorVolumeMetadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ColorVolumeMetadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ColorVolumeMetadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ColorVolumeMetadata_UnserializedMessageContext<
            UserType, ColorVolumeMetadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ColorVolumeMetadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ColorVolumeMetadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ColorVolumeMetadata_UnserializedMessageContext<
            UserType, ColorVolumeMetadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ColorVolumeMetadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::gfx::PointF primary_r;
  
  ::gfx::PointF primary_g;
  
  ::gfx::PointF primary_b;
  
  ::gfx::PointF white_point;
  
  float luminance_max;
  
  float luminance_min;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ColorVolumeMetadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ColorVolumeMetadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ColorVolumeMetadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ColorVolumeMetadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  HDRMetadata {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<HDRMetadata, T>::value>;
  using DataView = HDRMetadataDataView;
  using Data_ = internal::HDRMetadata_Data;

  template <typename... Args>
  static HDRMetadataPtr New(Args&&... args) {
    return HDRMetadataPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static HDRMetadataPtr From(const U& u) {
    return mojo::TypeConverter<HDRMetadataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HDRMetadata>::Convert(*this);
  }


  HDRMetadata();

  HDRMetadata(
      const ::gfx::ColorVolumeMetadata& color_volume_metadata,
      uint32_t max_content_light_level,
      uint32_t max_frame_average_light_level);


  ~HDRMetadata();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = HDRMetadataPtr>
  HDRMetadataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, HDRMetadata::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, HDRMetadata::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        HDRMetadata::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        HDRMetadata::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::HDRMetadata_UnserializedMessageContext<
            UserType, HDRMetadata::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<HDRMetadata::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return HDRMetadata::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::HDRMetadata_UnserializedMessageContext<
            UserType, HDRMetadata::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<HDRMetadata::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::gfx::ColorVolumeMetadata color_volume_metadata;
  
  uint32_t max_content_light_level;
  
  uint32_t max_frame_average_light_level;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, HDRMetadata::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, HDRMetadata::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, HDRMetadata::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, HDRMetadata::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ColorVolumeMetadataPtr ColorVolumeMetadata::Clone() const {
  return New(
      mojo::Clone(primary_r),
      mojo::Clone(primary_g),
      mojo::Clone(primary_b),
      mojo::Clone(white_point),
      mojo::Clone(luminance_max),
      mojo::Clone(luminance_min)
  );
}

template <typename T, ColorVolumeMetadata::EnableIfSame<T>*>
bool ColorVolumeMetadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->primary_r, other_struct.primary_r))
    return false;
  if (!mojo::Equals(this->primary_g, other_struct.primary_g))
    return false;
  if (!mojo::Equals(this->primary_b, other_struct.primary_b))
    return false;
  if (!mojo::Equals(this->white_point, other_struct.white_point))
    return false;
  if (!mojo::Equals(this->luminance_max, other_struct.luminance_max))
    return false;
  if (!mojo::Equals(this->luminance_min, other_struct.luminance_min))
    return false;
  return true;
}

template <typename T, ColorVolumeMetadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.primary_r < rhs.primary_r)
    return true;
  if (rhs.primary_r < lhs.primary_r)
    return false;
  if (lhs.primary_g < rhs.primary_g)
    return true;
  if (rhs.primary_g < lhs.primary_g)
    return false;
  if (lhs.primary_b < rhs.primary_b)
    return true;
  if (rhs.primary_b < lhs.primary_b)
    return false;
  if (lhs.white_point < rhs.white_point)
    return true;
  if (rhs.white_point < lhs.white_point)
    return false;
  if (lhs.luminance_max < rhs.luminance_max)
    return true;
  if (rhs.luminance_max < lhs.luminance_max)
    return false;
  if (lhs.luminance_min < rhs.luminance_min)
    return true;
  if (rhs.luminance_min < lhs.luminance_min)
    return false;
  return false;
}
template <typename StructPtrType>
HDRMetadataPtr HDRMetadata::Clone() const {
  return New(
      mojo::Clone(color_volume_metadata),
      mojo::Clone(max_content_light_level),
      mojo::Clone(max_frame_average_light_level)
  );
}

template <typename T, HDRMetadata::EnableIfSame<T>*>
bool HDRMetadata::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->color_volume_metadata, other_struct.color_volume_metadata))
    return false;
  if (!mojo::Equals(this->max_content_light_level, other_struct.max_content_light_level))
    return false;
  if (!mojo::Equals(this->max_frame_average_light_level, other_struct.max_frame_average_light_level))
    return false;
  return true;
}

template <typename T, HDRMetadata::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.color_volume_metadata < rhs.color_volume_metadata)
    return true;
  if (rhs.color_volume_metadata < lhs.color_volume_metadata)
    return false;
  if (lhs.max_content_light_level < rhs.max_content_light_level)
    return true;
  if (rhs.max_content_light_level < lhs.max_content_light_level)
    return false;
  if (lhs.max_frame_average_light_level < rhs.max_frame_average_light_level)
    return true;
  if (rhs.max_frame_average_light_level < lhs.max_frame_average_light_level)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace gfx

namespace mojo {


template <>
struct  StructTraits<::gfx::mojom::ColorVolumeMetadata::DataView,
                                         ::gfx::mojom::ColorVolumeMetadataPtr> {
  static bool IsNull(const ::gfx::mojom::ColorVolumeMetadataPtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::ColorVolumeMetadataPtr* output) { output->reset(); }

  static const decltype(::gfx::mojom::ColorVolumeMetadata::primary_r)& primary_r(
      const ::gfx::mojom::ColorVolumeMetadataPtr& input) {
    return input->primary_r;
  }

  static const decltype(::gfx::mojom::ColorVolumeMetadata::primary_g)& primary_g(
      const ::gfx::mojom::ColorVolumeMetadataPtr& input) {
    return input->primary_g;
  }

  static const decltype(::gfx::mojom::ColorVolumeMetadata::primary_b)& primary_b(
      const ::gfx::mojom::ColorVolumeMetadataPtr& input) {
    return input->primary_b;
  }

  static const decltype(::gfx::mojom::ColorVolumeMetadata::white_point)& white_point(
      const ::gfx::mojom::ColorVolumeMetadataPtr& input) {
    return input->white_point;
  }

  static decltype(::gfx::mojom::ColorVolumeMetadata::luminance_max) luminance_max(
      const ::gfx::mojom::ColorVolumeMetadataPtr& input) {
    return input->luminance_max;
  }

  static decltype(::gfx::mojom::ColorVolumeMetadata::luminance_min) luminance_min(
      const ::gfx::mojom::ColorVolumeMetadataPtr& input) {
    return input->luminance_min;
  }

  static bool Read(::gfx::mojom::ColorVolumeMetadata::DataView input, ::gfx::mojom::ColorVolumeMetadataPtr* output);
};


template <>
struct  StructTraits<::gfx::mojom::HDRMetadata::DataView,
                                         ::gfx::mojom::HDRMetadataPtr> {
  static bool IsNull(const ::gfx::mojom::HDRMetadataPtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::HDRMetadataPtr* output) { output->reset(); }

  static const decltype(::gfx::mojom::HDRMetadata::color_volume_metadata)& color_volume_metadata(
      const ::gfx::mojom::HDRMetadataPtr& input) {
    return input->color_volume_metadata;
  }

  static decltype(::gfx::mojom::HDRMetadata::max_content_light_level) max_content_light_level(
      const ::gfx::mojom::HDRMetadataPtr& input) {
    return input->max_content_light_level;
  }

  static decltype(::gfx::mojom::HDRMetadata::max_frame_average_light_level) max_frame_average_light_level(
      const ::gfx::mojom::HDRMetadataPtr& input) {
    return input->max_frame_average_light_level;
  }

  static bool Read(::gfx::mojom::HDRMetadata::DataView input, ::gfx::mojom::HDRMetadataPtr* output);
};

}  // namespace mojo

#endif  // UI_GFX_MOJOM_HDR_METADATA_MOJOM_H_