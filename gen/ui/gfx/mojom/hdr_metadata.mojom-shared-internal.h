// ui/gfx/mojom/hdr_metadata.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_INTERNAL_H_
#define UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace gfx {
namespace mojom {
namespace internal {
class ColorVolumeMetadata_Data;
class HDRMetadata_Data;

#pragma pack(push, 1)
class  ColorVolumeMetadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> primary_r;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> primary_g;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> primary_b;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> white_point;
  float luminance_max;
  float luminance_min;

 private:
  friend class mojo::internal::MessageFragment<ColorVolumeMetadata_Data>;

  ColorVolumeMetadata_Data();
  ~ColorVolumeMetadata_Data() = delete;
};
static_assert(sizeof(ColorVolumeMetadata_Data) == 48,
              "Bad sizeof(ColorVolumeMetadata_Data)");
// Used by ColorVolumeMetadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ColorVolumeMetadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ColorVolumeMetadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ColorVolumeMetadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ColorVolumeMetadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ColorVolumeMetadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  HDRMetadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ColorVolumeMetadata_Data> color_volume_metadata;
  uint32_t max_content_light_level;
  uint32_t max_frame_average_light_level;

 private:
  friend class mojo::internal::MessageFragment<HDRMetadata_Data>;

  HDRMetadata_Data();
  ~HDRMetadata_Data() = delete;
};
static_assert(sizeof(HDRMetadata_Data) == 24,
              "Bad sizeof(HDRMetadata_Data)");
// Used by HDRMetadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HDRMetadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HDRMetadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HDRMetadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HDRMetadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HDRMetadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace gfx

#endif  // UI_GFX_MOJOM_HDR_METADATA_MOJOM_SHARED_INTERNAL_H_