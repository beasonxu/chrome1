// ui/gfx/mojom/gpu_extra_info.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "ui/gfx/mojom/gpu_extra_info.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "ui/gfx/mojom/gpu_extra_info.mojom-params-data.h"
namespace gfx {
namespace mojom {

namespace internal {


// static
bool ANGLEFeature_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 56, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ANGLEFeature_Data* object =
      static_cast<const ANGLEFeature_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->category, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams category_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->category, validation_context,
                                         &category_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->description, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams description_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->description, validation_context,
                                         &description_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->bug, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams bug_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->bug, validation_context,
                                         &bug_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->status, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams status_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->status, validation_context,
                                         &status_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->condition, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams condition_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->condition, validation_context,
                                         &condition_validate_params)) {
    return false;
  }

  return true;
}

ANGLEFeature_Data::ANGLEFeature_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuExtraInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuExtraInfo_Data* object =
      static_cast<const GpuExtraInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->angle_features, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams angle_features_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->angle_features, validation_context,
                                         &angle_features_validate_params)) {
    return false;
  }

  return true;
}

GpuExtraInfo_Data::GpuExtraInfo_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace gfx