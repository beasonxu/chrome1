// ui/events/mojom/keyboard_codes.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_EVENTS_MOJOM_KEYBOARD_CODES_MOJOM_SHARED_H_
#define UI_EVENTS_MOJOM_KEYBOARD_CODES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/events/mojom/keyboard_codes.mojom-shared-internal.h"







namespace ui {
namespace mojom {


}  // namespace mojom
}  // namespace ui

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace ui {
namespace mojom {


enum class KeyboardCode : int32_t {
  
  BACK = 8,
  
  TAB = 9,
  
  CLEAR = 12,
  
  RETURN = 13,
  
  SHIFT = 16,
  
  CONTROL = 17,
  
  MENU = 18,
  
  PAUSE = 19,
  
  CAPITAL = 20,
  
  KANA = 21,
  
  HANGUL = 21,
  
  JUNJA = 23,
  
  FINAL = 24,
  
  HANJA = 25,
  
  KANJI = 25,
  
  ESCAPE = 27,
  
  CONVERT = 28,
  
  NONCONVERT = 29,
  
  ACCEPT = 30,
  
  MODECHANGE = 31,
  
  SPACE = 32,
  
  PRIOR = 33,
  
  NEXT = 34,
  
  END = 35,
  
  HOME = 36,
  
  LEFT = 37,
  
  UP = 38,
  
  RIGHT = 39,
  
  DOWN = 40,
  
  SELECT = 41,
  
  PRINT = 42,
  
  EXECUTE = 43,
  
  SNAPSHOT = 44,
  
  INSERT = 45,
  
  KEY_DELETE = 46,
  
  HELP = 47,
  
  NUM_0 = 48,
  
  NUM_1 = 49,
  
  NUM_2 = 50,
  
  NUM_3 = 51,
  
  NUM_4 = 52,
  
  NUM_5 = 53,
  
  NUM_6 = 54,
  
  NUM_7 = 55,
  
  NUM_8 = 56,
  
  NUM_9 = 57,
  
  A = 65,
  
  B = 66,
  
  C = 67,
  
  D = 68,
  
  E = 69,
  
  F = 70,
  
  G = 71,
  
  H = 72,
  
  I = 73,
  
  J = 74,
  
  K = 75,
  
  L = 76,
  
  M = 77,
  
  N = 78,
  
  O = 79,
  
  P = 80,
  
  Q = 81,
  
  R = 82,
  
  S = 83,
  
  T = 84,
  
  U = 85,
  
  V = 86,
  
  W = 87,
  
  X = 88,
  
  Y = 89,
  
  Z = 90,
  
  LWIN = 91,
  
  COMMAND = 91,
  
  RWIN = 92,
  
  APPS = 93,
  
  SLEEP = 95,
  
  NUMPAD0 = 96,
  
  NUMPAD1 = 97,
  
  NUMPAD2 = 98,
  
  NUMPAD3 = 99,
  
  NUMPAD4 = 100,
  
  NUMPAD5 = 101,
  
  NUMPAD6 = 102,
  
  NUMPAD7 = 103,
  
  NUMPAD8 = 104,
  
  NUMPAD9 = 105,
  
  MULTIPLY = 106,
  
  ADD = 107,
  
  SEPARATOR = 108,
  
  SUBTRACT = 109,
  
  DECIMAL = 110,
  
  DIVIDE = 111,
  
  F1 = 112,
  
  F2 = 113,
  
  F3 = 114,
  
  F4 = 115,
  
  F5 = 116,
  
  F6 = 117,
  
  F7 = 118,
  
  F8 = 119,
  
  F9 = 120,
  
  F10 = 121,
  
  F11 = 122,
  
  F12 = 123,
  
  F13 = 124,
  
  F14 = 125,
  
  F15 = 126,
  
  F16 = 127,
  
  F17 = 128,
  
  F18 = 129,
  
  F19 = 130,
  
  F20 = 131,
  
  F21 = 132,
  
  F22 = 133,
  
  F23 = 134,
  
  F24 = 135,
  
  NUMLOCK = 144,
  
  SCROLL = 145,
  
  LSHIFT = 160,
  
  RSHIFT = 161,
  
  LCONTROL = 162,
  
  RCONTROL = 163,
  
  LMENU = 164,
  
  RMENU = 165,
  
  BROWSER_BACK = 166,
  
  BROWSER_FORWARD = 167,
  
  BROWSER_REFRESH = 168,
  
  BROWSER_STOP = 169,
  
  BROWSER_SEARCH = 170,
  
  BROWSER_FAVORITES = 171,
  
  BROWSER_HOME = 172,
  
  VOLUME_MUTE = 173,
  
  VOLUME_DOWN = 174,
  
  VOLUME_UP = 175,
  
  MEDIA_NEXT_TRACK = 176,
  
  MEDIA_PREV_TRACK = 177,
  
  MEDIA_STOP = 178,
  
  MEDIA_PLAY_PAUSE = 179,
  
  MEDIA_LAUNCH_MAIL = 180,
  
  MEDIA_LAUNCH_MEDIA_SELECT = 181,
  
  MEDIA_LAUNCH_APP1 = 182,
  
  MEDIA_LAUNCH_APP2 = 183,
  
  OEM_1 = 186,
  
  OEM_PLUS = 187,
  
  OEM_COMMA = 188,
  
  OEM_MINUS = 189,
  
  OEM_PERIOD = 190,
  
  OEM_2 = 191,
  
  OEM_3 = 192,
  
  OEM_4 = 219,
  
  OEM_5 = 220,
  
  OEM_6 = 221,
  
  OEM_7 = 222,
  
  OEM_8 = 223,
  
  OEM_102 = 226,
  
  PROCESSKEY = 229,
  
  PACKET = 231,
  
  DBE_SBCSCHAR = 243,
  
  DBE_DBCSCHAR = 244,
  
  ATTN = 246,
  
  CRSEL = 247,
  
  EXSEL = 248,
  
  EREOF = 249,
  
  PLAY = 250,
  
  ZOOM = 251,
  
  NONAME = 252,
  
  PA1 = 253,
  
  OEM_CLEAR = 254,
  
  UNKNOWN = 0,
  
  WLAN = 151,
  
  POWER = 152,
  
  ASSISTANT = 153,
  
  BRIGHTNESS_DOWN = 216,
  
  BRIGHTNESS_UP = 217,
  
  KBD_BRIGHTNESS_DOWN = 218,
  
  KBD_BRIGHTNESS_UP = 232,
  
  ALTGR = 225,
  
  COMPOSE = 230,
  kMinValue = 0,
  kMaxValue = 254,
};

 std::ostream& operator<<(std::ostream& os, KeyboardCode value);
inline bool IsKnownEnumValue(KeyboardCode value) {
  return internal::KeyboardCode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace ui

namespace std {

template <>
struct hash<::ui::mojom::KeyboardCode>
    : public mojo::internal::EnumHashImpl<::ui::mojom::KeyboardCode> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ui::mojom::KeyboardCode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ui::mojom::KeyboardCode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ui::mojom::KeyboardCode>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace ui {
namespace mojom {


}  // namespace mojom
}  // namespace ui

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::ui::mojom::KeyboardCode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ui::mojom::KeyboardCode value);
};

} // namespace perfetto

#endif  // UI_EVENTS_MOJOM_KEYBOARD_CODES_MOJOM_SHARED_H_