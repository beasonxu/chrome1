// ui/base/ime/mojom/ime_types.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "ui/base/ime/mojom/ime_types.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "ui/base/ime/mojom/ime_types.mojom-params-data.h"
#include "ui/base/ime/mojom/ime_types.mojom-shared-message-ids.h"

#include "ui/base/ime/mojom/ime_types.mojom-blink-import-headers.h"
#include "ui/base/ime/mojom/ime_types.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef UI_BASE_IME_MOJOM_IME_TYPES_MOJOM_BLINK_JUMBO_H_
#define UI_BASE_IME_MOJOM_IME_TYPES_MOJOM_BLINK_JUMBO_H_
#endif



namespace ui {
namespace mojom {
namespace blink {
ImeTextSpan::ImeTextSpan()
    : type(),
      start_offset(),
      end_offset(),
      underline_color(),
      thickness(),
      underline_style(),
      text_color(),
      background_color(),
      suggestion_highlight_color(),
      remove_on_finish_composing(),
      interim_char_selection(),
      suggestions() {}

ImeTextSpan::ImeTextSpan(
    ::ui::ImeTextSpan::Type type_in,
    uint32_t start_offset_in,
    uint32_t end_offset_in,
    uint32_t underline_color_in,
    ::ui::ImeTextSpan::Thickness thickness_in,
    ::ui::ImeTextSpan::UnderlineStyle underline_style_in,
    uint32_t text_color_in,
    uint32_t background_color_in,
    uint32_t suggestion_highlight_color_in,
    bool remove_on_finish_composing_in,
    bool interim_char_selection_in,
    WTF::Vector<WTF::String> suggestions_in)
    : type(std::move(type_in)),
      start_offset(std::move(start_offset_in)),
      end_offset(std::move(end_offset_in)),
      underline_color(std::move(underline_color_in)),
      thickness(std::move(thickness_in)),
      underline_style(std::move(underline_style_in)),
      text_color(std::move(text_color_in)),
      background_color(std::move(background_color_in)),
      suggestion_highlight_color(std::move(suggestion_highlight_color_in)),
      remove_on_finish_composing(std::move(remove_on_finish_composing_in)),
      interim_char_selection(std::move(interim_char_selection_in)),
      suggestions(std::move(suggestions_in)) {}

ImeTextSpan::~ImeTextSpan() = default;

void ImeTextSpan::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::ui::ImeTextSpan::Type>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "start_offset"), this->start_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "end_offset"), this->end_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "underline_color"), this->underline_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "thickness"), this->thickness,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::ui::ImeTextSpan::Thickness>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "underline_style"), this->underline_style,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::ui::ImeTextSpan::UnderlineStyle>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_color"), this->text_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "background_color"), this->background_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "suggestion_highlight_color"), this->suggestion_highlight_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "remove_on_finish_composing"), this->remove_on_finish_composing,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "interim_char_selection"), this->interim_char_selection,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "suggestions"), this->suggestions,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::Vector<WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ImeTextSpan::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace ui


namespace mojo {


// static
bool StructTraits<::ui::mojom::blink::ImeTextSpan::DataView, ::ui::mojom::blink::ImeTextSpanPtr>::Read(
    ::ui::mojom::blink::ImeTextSpan::DataView input,
    ::ui::mojom::blink::ImeTextSpanPtr* output) {
  bool success = true;
  ::ui::mojom::blink::ImeTextSpanPtr result(::ui::mojom::blink::ImeTextSpan::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success)
        result->start_offset = input.start_offset();
      if (success)
        result->end_offset = input.end_offset();
      if (success)
        result->underline_color = input.underline_color();
      if (success && !input.ReadThickness(&result->thickness))
        success = false;
      if (success && !input.ReadUnderlineStyle(&result->underline_style))
        success = false;
      if (success)
        result->text_color = input.text_color();
      if (success)
        result->background_color = input.background_color();
      if (success)
        result->suggestion_highlight_color = input.suggestion_highlight_color();
      if (success)
        result->remove_on_finish_composing = input.remove_on_finish_composing();
      if (success)
        result->interim_char_selection = input.interim_char_selection();
      if (success && !input.ReadSuggestions(&result->suggestions))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace ui {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace ui


#if defined(__clang__)
#pragma clang diagnostic pop
#endif