// ui/base/cursor/mojom/cursor_type.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "ui/base/cursor/mojom/cursor_type.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "ui/base/cursor/mojom/cursor_type.mojom-params-data.h"
namespace ui {
namespace mojom {

static NOINLINE const char* CursorTypeToStringHelper(CursorType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case CursorType::kNull:
      return "kNull";
    case CursorType::kPointer:
      return "kPointer";
    case CursorType::kCross:
      return "kCross";
    case CursorType::kHand:
      return "kHand";
    case CursorType::kIBeam:
      return "kIBeam";
    case CursorType::kWait:
      return "kWait";
    case CursorType::kHelp:
      return "kHelp";
    case CursorType::kEastResize:
      return "kEastResize";
    case CursorType::kNorthResize:
      return "kNorthResize";
    case CursorType::kNorthEastResize:
      return "kNorthEastResize";
    case CursorType::kNorthWestResize:
      return "kNorthWestResize";
    case CursorType::kSouthResize:
      return "kSouthResize";
    case CursorType::kSouthEastResize:
      return "kSouthEastResize";
    case CursorType::kSouthWestResize:
      return "kSouthWestResize";
    case CursorType::kWestResize:
      return "kWestResize";
    case CursorType::kNorthSouthResize:
      return "kNorthSouthResize";
    case CursorType::kEastWestResize:
      return "kEastWestResize";
    case CursorType::kNorthEastSouthWestResize:
      return "kNorthEastSouthWestResize";
    case CursorType::kNorthWestSouthEastResize:
      return "kNorthWestSouthEastResize";
    case CursorType::kColumnResize:
      return "kColumnResize";
    case CursorType::kRowResize:
      return "kRowResize";
    case CursorType::kMiddlePanning:
      return "kMiddlePanning";
    case CursorType::kEastPanning:
      return "kEastPanning";
    case CursorType::kNorthPanning:
      return "kNorthPanning";
    case CursorType::kNorthEastPanning:
      return "kNorthEastPanning";
    case CursorType::kNorthWestPanning:
      return "kNorthWestPanning";
    case CursorType::kSouthPanning:
      return "kSouthPanning";
    case CursorType::kSouthEastPanning:
      return "kSouthEastPanning";
    case CursorType::kSouthWestPanning:
      return "kSouthWestPanning";
    case CursorType::kWestPanning:
      return "kWestPanning";
    case CursorType::kMove:
      return "kMove";
    case CursorType::kVerticalText:
      return "kVerticalText";
    case CursorType::kCell:
      return "kCell";
    case CursorType::kContextMenu:
      return "kContextMenu";
    case CursorType::kAlias:
      return "kAlias";
    case CursorType::kProgress:
      return "kProgress";
    case CursorType::kNoDrop:
      return "kNoDrop";
    case CursorType::kCopy:
      return "kCopy";
    case CursorType::kNone:
      return "kNone";
    case CursorType::kNotAllowed:
      return "kNotAllowed";
    case CursorType::kZoomIn:
      return "kZoomIn";
    case CursorType::kZoomOut:
      return "kZoomOut";
    case CursorType::kGrab:
      return "kGrab";
    case CursorType::kGrabbing:
      return "kGrabbing";
    case CursorType::kMiddlePanningVertical:
      return "kMiddlePanningVertical";
    case CursorType::kMiddlePanningHorizontal:
      return "kMiddlePanningHorizontal";
    case CursorType::kCustom:
      return "kCustom";
    case CursorType::kDndNone:
      return "kDndNone";
    case CursorType::kDndMove:
      return "kDndMove";
    case CursorType::kDndCopy:
      return "kDndCopy";
    case CursorType::kDndLink:
      return "kDndLink";
    case CursorType::kEastWestNoResize:
      return "kEastWestNoResize";
    case CursorType::kNorthSouthNoResize:
      return "kNorthSouthNoResize";
    case CursorType::kNorthEastSouthWestNoResize:
      return "kNorthEastSouthWestNoResize";
    case CursorType::kNorthWestSouthEastNoResize:
      return "kNorthWestSouthEastNoResize";
    default:
      return nullptr;
  }
}

std::string CursorTypeToString(CursorType value) {
  const char *str = CursorTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown CursorType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, CursorType value) {
  return os << CursorTypeToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace ui

namespace perfetto {

// static
void TraceFormatTraits<::ui::mojom::CursorType>::WriteIntoTrace(
   perfetto::TracedValue context, ::ui::mojom::CursorType value) {
  return std::move(context).WriteString(::ui::mojom::CursorTypeToString(value));
}

} // namespace perfetto