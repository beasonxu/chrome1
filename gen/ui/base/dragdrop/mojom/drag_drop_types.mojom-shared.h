// ui/base/dragdrop/mojom/drag_drop_types.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_BASE_DRAGDROP_MOJOM_DRAG_DROP_TYPES_MOJOM_SHARED_H_
#define UI_BASE_DRAGDROP_MOJOM_DRAG_DROP_TYPES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "ui/base/dragdrop/mojom/drag_drop_types.mojom-shared-internal.h"



#include "base/component_export.h"




namespace ui {
namespace mojom {


}  // namespace mojom
}  // namespace ui

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace ui {
namespace mojom {


enum class DragEventSource : int32_t {
  
  kMouse = 0,
  
  kTouch = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(UI_BASE_DRAGDROP_MOJOM_SHARED) std::ostream& operator<<(std::ostream& os, DragEventSource value);
inline bool IsKnownEnumValue(DragEventSource value) {
  return internal::DragEventSource_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class DragOperation : int32_t {
  
  kNone = 0,
  
  kCopy = 1,
  
  kLink = 2,
  
  kMove = 16,
  kMinValue = 0,
  kMaxValue = 16,
};

COMPONENT_EXPORT(UI_BASE_DRAGDROP_MOJOM_SHARED) std::ostream& operator<<(std::ostream& os, DragOperation value);
inline bool IsKnownEnumValue(DragOperation value) {
  return internal::DragOperation_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace ui

namespace std {

template <>
struct hash<::ui::mojom::DragEventSource>
    : public mojo::internal::EnumHashImpl<::ui::mojom::DragEventSource> {};

template <>
struct hash<::ui::mojom::DragOperation>
    : public mojo::internal::EnumHashImpl<::ui::mojom::DragOperation> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ui::mojom::DragEventSource, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ui::mojom::DragEventSource, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ui::mojom::DragEventSource>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ui::mojom::DragOperation, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::ui::mojom::DragOperation, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::ui::mojom::DragOperation>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace ui {
namespace mojom {


}  // namespace mojom
}  // namespace ui

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(UI_BASE_DRAGDROP_MOJOM_SHARED) TraceFormatTraits<::ui::mojom::DragEventSource> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ui::mojom::DragEventSource value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(UI_BASE_DRAGDROP_MOJOM_SHARED) TraceFormatTraits<::ui::mojom::DragOperation> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::ui::mojom::DragOperation value);
};

} // namespace perfetto

#endif  // UI_BASE_DRAGDROP_MOJOM_DRAG_DROP_TYPES_MOJOM_SHARED_H_