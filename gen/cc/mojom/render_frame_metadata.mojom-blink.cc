// cc/mojom/render_frame_metadata.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "cc/mojom/render_frame_metadata.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "cc/mojom/render_frame_metadata.mojom-params-data.h"
#include "cc/mojom/render_frame_metadata.mojom-shared-message-ids.h"

#include "cc/mojom/render_frame_metadata.mojom-blink-import-headers.h"
#include "cc/mojom/render_frame_metadata.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef CC_MOJOM_RENDER_FRAME_METADATA_MOJOM_BLINK_JUMBO_H_
#define CC_MOJOM_RENDER_FRAME_METADATA_MOJOM_BLINK_JUMBO_H_
#endif



namespace cc {
namespace mojom {
namespace blink {
DelegatedInkBrowserMetadata::DelegatedInkBrowserMetadata()
    : delegated_ink_is_hovering() {}

DelegatedInkBrowserMetadata::DelegatedInkBrowserMetadata(
    bool delegated_ink_is_hovering_in)
    : delegated_ink_is_hovering(std::move(delegated_ink_is_hovering_in)) {}

DelegatedInkBrowserMetadata::~DelegatedInkBrowserMetadata() = default;
size_t DelegatedInkBrowserMetadata::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->delegated_ink_is_hovering);
  return seed;
}

void DelegatedInkBrowserMetadata::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "delegated_ink_is_hovering"), this->delegated_ink_is_hovering,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DelegatedInkBrowserMetadata::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
RenderFrameMetadata::RenderFrameMetadata()
    : root_background_color(),
      root_scroll_offset(),
      is_scroll_offset_at_top(),
      selection(),
      is_mobile_optimized(),
      delegated_ink_metadata(),
      device_scale_factor(),
      viewport_size_in_pixels(),
      local_surface_id(),
      page_scale_factor(),
      external_page_scale_factor(),
      top_controls_height(),
      top_controls_shown_ratio(),
      new_vertical_scroll_direction(),
      previous_surfaces_visual_update_duration(),
      current_surface_visual_update_duration(),
      bottom_controls_height(),
      bottom_controls_shown_ratio(),
      top_controls_min_height_offset(),
      bottom_controls_min_height_offset(),
      min_page_scale_factor(),
      max_page_scale_factor(),
      root_overflow_y_hidden(),
      scrollable_viewport_size(),
      root_layer_size(),
      has_transparent_background() {}

RenderFrameMetadata::RenderFrameMetadata(
    const ::SkColor4f& root_background_color_in,
    const absl::optional<::gfx::PointF>& root_scroll_offset_in,
    bool is_scroll_offset_at_top_in,
    const ::viz::Selection<::gfx::SelectionBound>& selection_in,
    bool is_mobile_optimized_in,
    DelegatedInkBrowserMetadataPtr delegated_ink_metadata_in,
    float device_scale_factor_in,
    const ::gfx::Size& viewport_size_in_pixels_in,
    const absl::optional<::viz::LocalSurfaceId>& local_surface_id_in,
    float page_scale_factor_in,
    float external_page_scale_factor_in,
    float top_controls_height_in,
    float top_controls_shown_ratio_in,
    ::viz::VerticalScrollDirection new_vertical_scroll_direction_in,
    ::base::TimeDelta previous_surfaces_visual_update_duration_in,
    ::base::TimeDelta current_surface_visual_update_duration_in,
    float bottom_controls_height_in,
    float bottom_controls_shown_ratio_in,
    float top_controls_min_height_offset_in,
    float bottom_controls_min_height_offset_in,
    float min_page_scale_factor_in,
    float max_page_scale_factor_in,
    bool root_overflow_y_hidden_in,
    const ::gfx::SizeF& scrollable_viewport_size_in,
    const ::gfx::SizeF& root_layer_size_in,
    bool has_transparent_background_in)
    : root_background_color(std::move(root_background_color_in)),
      root_scroll_offset(std::move(root_scroll_offset_in)),
      is_scroll_offset_at_top(std::move(is_scroll_offset_at_top_in)),
      selection(std::move(selection_in)),
      is_mobile_optimized(std::move(is_mobile_optimized_in)),
      delegated_ink_metadata(std::move(delegated_ink_metadata_in)),
      device_scale_factor(std::move(device_scale_factor_in)),
      viewport_size_in_pixels(std::move(viewport_size_in_pixels_in)),
      local_surface_id(std::move(local_surface_id_in)),
      page_scale_factor(std::move(page_scale_factor_in)),
      external_page_scale_factor(std::move(external_page_scale_factor_in)),
      top_controls_height(std::move(top_controls_height_in)),
      top_controls_shown_ratio(std::move(top_controls_shown_ratio_in)),
      new_vertical_scroll_direction(std::move(new_vertical_scroll_direction_in)),
      previous_surfaces_visual_update_duration(std::move(previous_surfaces_visual_update_duration_in)),
      current_surface_visual_update_duration(std::move(current_surface_visual_update_duration_in)),
      bottom_controls_height(std::move(bottom_controls_height_in)),
      bottom_controls_shown_ratio(std::move(bottom_controls_shown_ratio_in)),
      top_controls_min_height_offset(std::move(top_controls_min_height_offset_in)),
      bottom_controls_min_height_offset(std::move(bottom_controls_min_height_offset_in)),
      min_page_scale_factor(std::move(min_page_scale_factor_in)),
      max_page_scale_factor(std::move(max_page_scale_factor_in)),
      root_overflow_y_hidden(std::move(root_overflow_y_hidden_in)),
      scrollable_viewport_size(std::move(scrollable_viewport_size_in)),
      root_layer_size(std::move(root_layer_size_in)),
      has_transparent_background(std::move(has_transparent_background_in)) {}

RenderFrameMetadata::~RenderFrameMetadata() = default;

void RenderFrameMetadata::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "root_background_color"), this->root_background_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::SkColor4f&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "root_scroll_offset"), this->root_scroll_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::gfx::PointF>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_scroll_offset_at_top"), this->is_scroll_offset_at_top,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "selection"), this->selection,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::viz::Selection<::gfx::SelectionBound>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_mobile_optimized"), this->is_mobile_optimized,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "delegated_ink_metadata"), this->delegated_ink_metadata,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type DelegatedInkBrowserMetadataPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "device_scale_factor"), this->device_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_size_in_pixels"), this->viewport_size_in_pixels,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "local_surface_id"), this->local_surface_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::viz::LocalSurfaceId>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "page_scale_factor"), this->page_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "external_page_scale_factor"), this->external_page_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "top_controls_height"), this->top_controls_height,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "top_controls_shown_ratio"), this->top_controls_shown_ratio,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "new_vertical_scroll_direction"), this->new_vertical_scroll_direction,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::viz::VerticalScrollDirection>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "previous_surfaces_visual_update_duration"), this->previous_surfaces_visual_update_duration,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "current_surface_visual_update_duration"), this->current_surface_visual_update_duration,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bottom_controls_height"), this->bottom_controls_height,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bottom_controls_shown_ratio"), this->bottom_controls_shown_ratio,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "top_controls_min_height_offset"), this->top_controls_min_height_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bottom_controls_min_height_offset"), this->bottom_controls_min_height_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "min_page_scale_factor"), this->min_page_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "max_page_scale_factor"), this->max_page_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "root_overflow_y_hidden"), this->root_overflow_y_hidden,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "scrollable_viewport_size"), this->scrollable_viewport_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::SizeF&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "root_layer_size"), this->root_layer_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::SizeF&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_transparent_background"), this->has_transparent_background,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool RenderFrameMetadata::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char RenderFrameMetadataObserver::Name_[] = "cc.mojom.RenderFrameMetadataObserver";

RenderFrameMetadataObserver::IPCStableHashFunction RenderFrameMetadataObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kRenderFrameMetadataObserver_ReportAllRootScrolls_Name: {
      return &RenderFrameMetadataObserver::ReportAllRootScrolls_Sym::IPCStableHash;
    }
    case internal::kRenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Name: {
      return &RenderFrameMetadataObserver::ReportAllFrameSubmissionsForTesting_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* RenderFrameMetadataObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kRenderFrameMetadataObserver_ReportAllRootScrolls_Name:
            return "Receive cc::mojom::RenderFrameMetadataObserver::ReportAllRootScrolls";
      case internal::kRenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Name:
            return "Receive cc::mojom::RenderFrameMetadataObserver::ReportAllFrameSubmissionsForTesting";
    }
  } else {
    switch (message.name()) {
      case internal::kRenderFrameMetadataObserver_ReportAllRootScrolls_Name:
            return "Receive reply cc::mojom::RenderFrameMetadataObserver::ReportAllRootScrolls";
      case internal::kRenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Name:
            return "Receive reply cc::mojom::RenderFrameMetadataObserver::ReportAllFrameSubmissionsForTesting";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t RenderFrameMetadataObserver::ReportAllRootScrolls_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cc::mojom::RenderFrameMetadataObserver::ReportAllRootScrolls");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RenderFrameMetadataObserver::ReportAllFrameSubmissionsForTesting_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cc::mojom::RenderFrameMetadataObserver::ReportAllFrameSubmissionsForTesting");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

RenderFrameMetadataObserverProxy::RenderFrameMetadataObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void RenderFrameMetadataObserverProxy::ReportAllRootScrolls(
    bool in_enabled) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cc::mojom::RenderFrameMetadataObserver::ReportAllRootScrolls", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("enabled"), in_enabled,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRenderFrameMetadataObserver_ReportAllRootScrolls_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cc::mojom::internal::RenderFrameMetadataObserver_ReportAllRootScrolls_Params_Data> params(
          message);
  params.Allocate();
  params->enabled = in_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RenderFrameMetadataObserver::Name_);
  message.set_method_name("ReportAllRootScrolls");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void RenderFrameMetadataObserverProxy::ReportAllFrameSubmissionsForTesting(
    bool in_enabled) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cc::mojom::RenderFrameMetadataObserver::ReportAllFrameSubmissionsForTesting", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("enabled"), in_enabled,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cc::mojom::internal::RenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Params_Data> params(
          message);
  params.Allocate();
  params->enabled = in_enabled;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RenderFrameMetadataObserver::Name_);
  message.set_method_name("ReportAllFrameSubmissionsForTesting");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool RenderFrameMetadataObserverStubDispatch::Accept(
    RenderFrameMetadataObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kRenderFrameMetadataObserver_ReportAllRootScrolls_Name: {

      DCHECK(message->is_serialized());
      internal::RenderFrameMetadataObserver_ReportAllRootScrolls_Params_Data* params =
          reinterpret_cast<internal::RenderFrameMetadataObserver_ReportAllRootScrolls_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_enabled{};
      RenderFrameMetadataObserver_ReportAllRootScrolls_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_enabled = input_data_view.enabled();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RenderFrameMetadataObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ReportAllRootScrolls(
std::move(p_enabled));
      return true;
    }
    case internal::kRenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Name: {

      DCHECK(message->is_serialized());
      internal::RenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Params_Data* params =
          reinterpret_cast<internal::RenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_enabled{};
      RenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_enabled = input_data_view.enabled();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RenderFrameMetadataObserver::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ReportAllFrameSubmissionsForTesting(
std::move(p_enabled));
      return true;
    }
  }
  return false;
}

// static
bool RenderFrameMetadataObserverStubDispatch::AcceptWithResponder(
    RenderFrameMetadataObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kRenderFrameMetadataObserver_ReportAllRootScrolls_Name: {
      break;
    }
    case internal::kRenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kRenderFrameMetadataObserverValidationInfo[] = {
    {&internal::RenderFrameMetadataObserver_ReportAllRootScrolls_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::RenderFrameMetadataObserver_ReportAllFrameSubmissionsForTesting_Params_Data::Validate,
     nullptr /* no response */},
};

bool RenderFrameMetadataObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::cc::mojom::blink::RenderFrameMetadataObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kRenderFrameMetadataObserverValidationInfo);
}

const char RenderFrameMetadataObserverClient::Name_[] = "cc.mojom.RenderFrameMetadataObserverClient";

RenderFrameMetadataObserverClient::IPCStableHashFunction RenderFrameMetadataObserverClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kRenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Name: {
      return &RenderFrameMetadataObserverClient::OnRenderFrameMetadataChanged_Sym::IPCStableHash;
    }
    case internal::kRenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Name: {
      return &RenderFrameMetadataObserverClient::OnFrameSubmissionForTesting_Sym::IPCStableHash;
    }
    case internal::kRenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Name: {
      return &RenderFrameMetadataObserverClient::OnRootScrollOffsetChanged_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* RenderFrameMetadataObserverClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kRenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Name:
            return "Receive cc::mojom::RenderFrameMetadataObserverClient::OnRenderFrameMetadataChanged";
      case internal::kRenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Name:
            return "Receive cc::mojom::RenderFrameMetadataObserverClient::OnFrameSubmissionForTesting";
      case internal::kRenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Name:
            return "Receive cc::mojom::RenderFrameMetadataObserverClient::OnRootScrollOffsetChanged";
    }
  } else {
    switch (message.name()) {
      case internal::kRenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Name:
            return "Receive reply cc::mojom::RenderFrameMetadataObserverClient::OnRenderFrameMetadataChanged";
      case internal::kRenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Name:
            return "Receive reply cc::mojom::RenderFrameMetadataObserverClient::OnFrameSubmissionForTesting";
      case internal::kRenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Name:
            return "Receive reply cc::mojom::RenderFrameMetadataObserverClient::OnRootScrollOffsetChanged";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t RenderFrameMetadataObserverClient::OnRenderFrameMetadataChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cc::mojom::RenderFrameMetadataObserverClient::OnRenderFrameMetadataChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RenderFrameMetadataObserverClient::OnFrameSubmissionForTesting_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cc::mojom::RenderFrameMetadataObserverClient::OnFrameSubmissionForTesting");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t RenderFrameMetadataObserverClient::OnRootScrollOffsetChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cc::mojom::RenderFrameMetadataObserverClient::OnRootScrollOffsetChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

RenderFrameMetadataObserverClientProxy::RenderFrameMetadataObserverClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void RenderFrameMetadataObserverClientProxy::OnRenderFrameMetadataChanged(
    uint32_t in_frame_token, const ::cc::RenderFrameMetadata& in_metadata) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cc::mojom::RenderFrameMetadataObserverClient::OnRenderFrameMetadataChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("frame_token"), in_frame_token,
                        "<value of type uint32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("metadata"), in_metadata,
                        "<value of type const ::cc::RenderFrameMetadata&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cc::mojom::internal::RenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Params_Data> params(
          message);
  params.Allocate();
  params->frame_token = in_frame_token;
  mojo::internal::MessageFragment<
      typename decltype(params->metadata)::BaseType> metadata_fragment(
          params.message());
  mojo::internal::Serialize<::cc::mojom::RenderFrameMetadataDataView>(
      in_metadata, metadata_fragment);
  params->metadata.Set(
      metadata_fragment.is_null() ? nullptr : metadata_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->metadata.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null metadata in RenderFrameMetadataObserverClient.OnRenderFrameMetadataChanged request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RenderFrameMetadataObserverClient::Name_);
  message.set_method_name("OnRenderFrameMetadataChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void RenderFrameMetadataObserverClientProxy::OnFrameSubmissionForTesting(
    uint32_t in_frame_token) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cc::mojom::RenderFrameMetadataObserverClient::OnFrameSubmissionForTesting", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("frame_token"), in_frame_token,
                        "<value of type uint32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cc::mojom::internal::RenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Params_Data> params(
          message);
  params.Allocate();
  params->frame_token = in_frame_token;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RenderFrameMetadataObserverClient::Name_);
  message.set_method_name("OnFrameSubmissionForTesting");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void RenderFrameMetadataObserverClientProxy::OnRootScrollOffsetChanged(
    const ::gfx::PointF& in_root_scroll_offset) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cc::mojom::RenderFrameMetadataObserverClient::OnRootScrollOffsetChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("root_scroll_offset"), in_root_scroll_offset,
                        "<value of type const ::gfx::PointF&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kRenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cc::mojom::internal::RenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->root_scroll_offset)::BaseType> root_scroll_offset_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
      in_root_scroll_offset, root_scroll_offset_fragment);
  params->root_scroll_offset.Set(
      root_scroll_offset_fragment.is_null() ? nullptr : root_scroll_offset_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->root_scroll_offset.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null root_scroll_offset in RenderFrameMetadataObserverClient.OnRootScrollOffsetChanged request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(RenderFrameMetadataObserverClient::Name_);
  message.set_method_name("OnRootScrollOffsetChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool RenderFrameMetadataObserverClientStubDispatch::Accept(
    RenderFrameMetadataObserverClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kRenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Name: {

      DCHECK(message->is_serialized());
      internal::RenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Params_Data* params =
          reinterpret_cast<internal::RenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint32_t p_frame_token{};
      ::cc::RenderFrameMetadata p_metadata{};
      RenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_frame_token = input_data_view.frame_token();
      if (success && !input_data_view.ReadMetadata(&p_metadata))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RenderFrameMetadataObserverClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnRenderFrameMetadataChanged(
std::move(p_frame_token), 
std::move(p_metadata));
      return true;
    }
    case internal::kRenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Name: {

      DCHECK(message->is_serialized());
      internal::RenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Params_Data* params =
          reinterpret_cast<internal::RenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint32_t p_frame_token{};
      RenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_frame_token = input_data_view.frame_token();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RenderFrameMetadataObserverClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnFrameSubmissionForTesting(
std::move(p_frame_token));
      return true;
    }
    case internal::kRenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Name: {

      DCHECK(message->is_serialized());
      internal::RenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Params_Data* params =
          reinterpret_cast<internal::RenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::gfx::PointF p_root_scroll_offset{};
      RenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadRootScrollOffset(&p_root_scroll_offset))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            RenderFrameMetadataObserverClient::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnRootScrollOffsetChanged(
std::move(p_root_scroll_offset));
      return true;
    }
  }
  return false;
}

// static
bool RenderFrameMetadataObserverClientStubDispatch::AcceptWithResponder(
    RenderFrameMetadataObserverClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kRenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Name: {
      break;
    }
    case internal::kRenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Name: {
      break;
    }
    case internal::kRenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kRenderFrameMetadataObserverClientValidationInfo[] = {
    {&internal::RenderFrameMetadataObserverClient_OnRenderFrameMetadataChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::RenderFrameMetadataObserverClient_OnFrameSubmissionForTesting_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::RenderFrameMetadataObserverClient_OnRootScrollOffsetChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool RenderFrameMetadataObserverClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::cc::mojom::blink::RenderFrameMetadataObserverClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kRenderFrameMetadataObserverClientValidationInfo);
}



}  // namespace blink
}  // namespace mojom
}  // namespace cc


namespace mojo {


// static
bool StructTraits<::cc::mojom::blink::DelegatedInkBrowserMetadata::DataView, ::cc::mojom::blink::DelegatedInkBrowserMetadataPtr>::Read(
    ::cc::mojom::blink::DelegatedInkBrowserMetadata::DataView input,
    ::cc::mojom::blink::DelegatedInkBrowserMetadataPtr* output) {
  bool success = true;
  ::cc::mojom::blink::DelegatedInkBrowserMetadataPtr result(::cc::mojom::blink::DelegatedInkBrowserMetadata::New());
  
      if (success)
        result->delegated_ink_is_hovering = input.delegated_ink_is_hovering();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::cc::mojom::blink::RenderFrameMetadata::DataView, ::cc::mojom::blink::RenderFrameMetadataPtr>::Read(
    ::cc::mojom::blink::RenderFrameMetadata::DataView input,
    ::cc::mojom::blink::RenderFrameMetadataPtr* output) {
  bool success = true;
  ::cc::mojom::blink::RenderFrameMetadataPtr result(::cc::mojom::blink::RenderFrameMetadata::New());
  
      if (success && !input.ReadRootBackgroundColor(&result->root_background_color))
        success = false;
      if (success && !input.ReadRootScrollOffset(&result->root_scroll_offset))
        success = false;
      if (success)
        result->is_scroll_offset_at_top = input.is_scroll_offset_at_top();
      if (success && !input.ReadSelection(&result->selection))
        success = false;
      if (success)
        result->is_mobile_optimized = input.is_mobile_optimized();
      if (success && !input.ReadDelegatedInkMetadata(&result->delegated_ink_metadata))
        success = false;
      if (success)
        result->device_scale_factor = input.device_scale_factor();
      if (success && !input.ReadViewportSizeInPixels(&result->viewport_size_in_pixels))
        success = false;
      if (success && !input.ReadLocalSurfaceId(&result->local_surface_id))
        success = false;
      if (success)
        result->page_scale_factor = input.page_scale_factor();
      if (success)
        result->external_page_scale_factor = input.external_page_scale_factor();
      if (success)
        result->top_controls_height = input.top_controls_height();
      if (success)
        result->top_controls_shown_ratio = input.top_controls_shown_ratio();
      if (success && !input.ReadNewVerticalScrollDirection(&result->new_vertical_scroll_direction))
        success = false;
      if (success && !input.ReadPreviousSurfacesVisualUpdateDuration(&result->previous_surfaces_visual_update_duration))
        success = false;
      if (success && !input.ReadCurrentSurfaceVisualUpdateDuration(&result->current_surface_visual_update_duration))
        success = false;
      if (success)
        result->bottom_controls_height = input.bottom_controls_height();
      if (success)
        result->bottom_controls_shown_ratio = input.bottom_controls_shown_ratio();
      if (success)
        result->top_controls_min_height_offset = input.top_controls_min_height_offset();
      if (success)
        result->bottom_controls_min_height_offset = input.bottom_controls_min_height_offset();
      if (success)
        result->min_page_scale_factor = input.min_page_scale_factor();
      if (success)
        result->max_page_scale_factor = input.max_page_scale_factor();
      if (success)
        result->root_overflow_y_hidden = input.root_overflow_y_hidden();
      if (success && !input.ReadScrollableViewportSize(&result->scrollable_viewport_size))
        success = false;
      if (success && !input.ReadRootLayerSize(&result->root_layer_size))
        success = false;
      if (success)
        result->has_transparent_background = input.has_transparent_background();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace cc {
namespace mojom {
namespace blink {


void RenderFrameMetadataObserverInterceptorForTesting::ReportAllRootScrolls(bool enabled) {
  GetForwardingInterface()->ReportAllRootScrolls(std::move(enabled));
}
void RenderFrameMetadataObserverInterceptorForTesting::ReportAllFrameSubmissionsForTesting(bool enabled) {
  GetForwardingInterface()->ReportAllFrameSubmissionsForTesting(std::move(enabled));
}
RenderFrameMetadataObserverAsyncWaiter::RenderFrameMetadataObserverAsyncWaiter(
    RenderFrameMetadataObserver* proxy) : proxy_(proxy) {}

RenderFrameMetadataObserverAsyncWaiter::~RenderFrameMetadataObserverAsyncWaiter() = default;




void RenderFrameMetadataObserverClientInterceptorForTesting::OnRenderFrameMetadataChanged(uint32_t frame_token, const ::cc::RenderFrameMetadata& metadata) {
  GetForwardingInterface()->OnRenderFrameMetadataChanged(std::move(frame_token), std::move(metadata));
}
void RenderFrameMetadataObserverClientInterceptorForTesting::OnFrameSubmissionForTesting(uint32_t frame_token) {
  GetForwardingInterface()->OnFrameSubmissionForTesting(std::move(frame_token));
}
void RenderFrameMetadataObserverClientInterceptorForTesting::OnRootScrollOffsetChanged(const ::gfx::PointF& root_scroll_offset) {
  GetForwardingInterface()->OnRootScrollOffsetChanged(std::move(root_scroll_offset));
}
RenderFrameMetadataObserverClientAsyncWaiter::RenderFrameMetadataObserverClientAsyncWaiter(
    RenderFrameMetadataObserverClient* proxy) : proxy_(proxy) {}

RenderFrameMetadataObserverClientAsyncWaiter::~RenderFrameMetadataObserverClientAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace cc


#if defined(__clang__)
#pragma clang diagnostic pop
#endif