// device/bluetooth/public/mojom/adapter.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_SHARED_H_
#define DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "device/bluetooth/public/mojom/adapter.mojom-shared-internal.h"
#include "device/bluetooth/public/mojom/device.mojom-shared.h"
#include "device/bluetooth/public/mojom/uuid.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace bluetooth {
namespace mojom {
class ConnectToServiceResultDataView;

class AcceptConnectionResultDataView;

class AdapterInfoDataView;



}  // namespace mojom
}  // namespace bluetooth

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::bluetooth::mojom::ConnectToServiceResultDataView> {
  using Data = ::bluetooth::mojom::internal::ConnectToServiceResult_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::bluetooth::mojom::AcceptConnectionResultDataView> {
  using Data = ::bluetooth::mojom::internal::AcceptConnectionResult_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::bluetooth::mojom::AdapterInfoDataView> {
  using Data = ::bluetooth::mojom::internal::AdapterInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace bluetooth {
namespace mojom {


enum class ConnectResult : int32_t {
  
  SUCCESS = 0,
  
  AUTH_CANCELED = 1,
  
  AUTH_FAILED = 2,
  
  AUTH_REJECTED = 3,
  
  AUTH_TIMEOUT = 4,
  
  FAILED = 5,
  
  INPROGRESS = 6,
  
  UNKNOWN = 7,
  
  UNSUPPORTED_DEVICE = 8,
  
  DEVICE_NO_LONGER_IN_RANGE = 9,
  kMinValue = 0,
  kMaxValue = 9,
};

 std::ostream& operator<<(std::ostream& os, ConnectResult value);
inline bool IsKnownEnumValue(ConnectResult value) {
  return internal::ConnectResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class AdvertisementInterfaceBase {};

using AdvertisementPtrDataView =
    mojo::InterfacePtrDataView<AdvertisementInterfaceBase>;
using AdvertisementRequestDataView =
    mojo::InterfaceRequestDataView<AdvertisementInterfaceBase>;
using AdvertisementAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AdvertisementInterfaceBase>;
using AdvertisementAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AdvertisementInterfaceBase>;
class DiscoverySessionInterfaceBase {};

using DiscoverySessionPtrDataView =
    mojo::InterfacePtrDataView<DiscoverySessionInterfaceBase>;
using DiscoverySessionRequestDataView =
    mojo::InterfaceRequestDataView<DiscoverySessionInterfaceBase>;
using DiscoverySessionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DiscoverySessionInterfaceBase>;
using DiscoverySessionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DiscoverySessionInterfaceBase>;
class SocketInterfaceBase {};

using SocketPtrDataView =
    mojo::InterfacePtrDataView<SocketInterfaceBase>;
using SocketRequestDataView =
    mojo::InterfaceRequestDataView<SocketInterfaceBase>;
using SocketAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SocketInterfaceBase>;
using SocketAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SocketInterfaceBase>;
class ServerSocketInterfaceBase {};

using ServerSocketPtrDataView =
    mojo::InterfacePtrDataView<ServerSocketInterfaceBase>;
using ServerSocketRequestDataView =
    mojo::InterfaceRequestDataView<ServerSocketInterfaceBase>;
using ServerSocketAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ServerSocketInterfaceBase>;
using ServerSocketAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ServerSocketInterfaceBase>;
class AdapterInterfaceBase {};

using AdapterPtrDataView =
    mojo::InterfacePtrDataView<AdapterInterfaceBase>;
using AdapterRequestDataView =
    mojo::InterfaceRequestDataView<AdapterInterfaceBase>;
using AdapterAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AdapterInterfaceBase>;
using AdapterAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AdapterInterfaceBase>;
class AdapterObserverInterfaceBase {};

using AdapterObserverPtrDataView =
    mojo::InterfacePtrDataView<AdapterObserverInterfaceBase>;
using AdapterObserverRequestDataView =
    mojo::InterfaceRequestDataView<AdapterObserverInterfaceBase>;
using AdapterObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AdapterObserverInterfaceBase>;
using AdapterObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AdapterObserverInterfaceBase>;


class ConnectToServiceResultDataView {
 public:
  ConnectToServiceResultDataView() = default;

  ConnectToServiceResultDataView(
      internal::ConnectToServiceResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeSocket() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::bluetooth::mojom::SocketInterfaceBase>>(
            &data_->socket, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeConsumerHandle TakeReceiveStream() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->receive_stream, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeProducerHandle TakeSendStream() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->send_stream, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ConnectToServiceResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AcceptConnectionResultDataView {
 public:
  AcceptConnectionResultDataView() = default;

  AcceptConnectionResultDataView(
      internal::AcceptConnectionResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceDataView(
      ::bluetooth::mojom::DeviceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevice(UserType* output) {
    
    auto* pointer = data_->device.Get();
    return mojo::internal::Deserialize<::bluetooth::mojom::DeviceInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeSocket() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::bluetooth::mojom::SocketInterfaceBase>>(
            &data_->socket, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeConsumerHandle TakeReceiveStream() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->receive_stream, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeProducerHandle TakeSendStream() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->send_stream, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AcceptConnectionResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AdapterInfoDataView {
 public:
  AdapterInfoDataView() = default;

  AdapterInfoDataView(
      internal::AdapterInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAddressDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAddress(UserType* output) {
    
    auto* pointer = data_->address.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSystemNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSystemName(UserType* output) {
    
    auto* pointer = data_->system_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool floss() const {
    return data_->floss;
  }
  bool initialized() const {
    return data_->initialized;
  }
  bool present() const {
    return data_->present;
  }
  bool powered() const {
    return data_->powered;
  }
  bool discoverable() const {
    return data_->discoverable;
  }
  bool discovering() const {
    return data_->discovering;
  }
 private:
  internal::AdapterInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace bluetooth

namespace std {

template <>
struct hash<::bluetooth::mojom::ConnectResult>
    : public mojo::internal::EnumHashImpl<::bluetooth::mojom::ConnectResult> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::bluetooth::mojom::ConnectResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::bluetooth::mojom::ConnectResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::bluetooth::mojom::ConnectResult>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::bluetooth::mojom::ConnectToServiceResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::bluetooth::mojom::ConnectToServiceResultDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::bluetooth::mojom::internal::ConnectToServiceResult_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::socket(input)) in_socket = Traits::socket(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::bluetooth::mojom::SocketInterfaceBase>>(
        in_socket, &fragment->socket, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->socket),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid socket in ConnectToServiceResult struct");
    decltype(Traits::receive_stream(input)) in_receive_stream = Traits::receive_stream(input);
    mojo::internal::Serialize<mojo::ScopedDataPipeConsumerHandle>(
        in_receive_stream, &fragment->receive_stream, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->receive_stream),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid receive_stream in ConnectToServiceResult struct");
    decltype(Traits::send_stream(input)) in_send_stream = Traits::send_stream(input);
    mojo::internal::Serialize<mojo::ScopedDataPipeProducerHandle>(
        in_send_stream, &fragment->send_stream, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->send_stream),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid send_stream in ConnectToServiceResult struct");
  }

  static bool Deserialize(::bluetooth::mojom::internal::ConnectToServiceResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::bluetooth::mojom::ConnectToServiceResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::bluetooth::mojom::AcceptConnectionResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::bluetooth::mojom::AcceptConnectionResultDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::bluetooth::mojom::internal::AcceptConnectionResult_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::device(input)) in_device = Traits::device(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->device)::BaseType> device_fragment(
            fragment.message());
    mojo::internal::Serialize<::bluetooth::mojom::DeviceInfoDataView>(
        in_device, device_fragment);
    fragment->device.Set(
        device_fragment.is_null() ? nullptr : device_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->device.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null device in AcceptConnectionResult struct");
    decltype(Traits::socket(input)) in_socket = Traits::socket(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::bluetooth::mojom::SocketInterfaceBase>>(
        in_socket, &fragment->socket, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->socket),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid socket in AcceptConnectionResult struct");
    decltype(Traits::receive_stream(input)) in_receive_stream = Traits::receive_stream(input);
    mojo::internal::Serialize<mojo::ScopedDataPipeConsumerHandle>(
        in_receive_stream, &fragment->receive_stream, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->receive_stream),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid receive_stream in AcceptConnectionResult struct");
    decltype(Traits::send_stream(input)) in_send_stream = Traits::send_stream(input);
    mojo::internal::Serialize<mojo::ScopedDataPipeProducerHandle>(
        in_send_stream, &fragment->send_stream, &fragment.message());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid(fragment->send_stream),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid send_stream in AcceptConnectionResult struct");
  }

  static bool Deserialize(::bluetooth::mojom::internal::AcceptConnectionResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::bluetooth::mojom::AcceptConnectionResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::bluetooth::mojom::AdapterInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::bluetooth::mojom::AdapterInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::bluetooth::mojom::internal::AdapterInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::address(input)) in_address = Traits::address(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->address)::BaseType> address_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_address, address_fragment);
    fragment->address.Set(
        address_fragment.is_null() ? nullptr : address_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->address.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null address in AdapterInfo struct");
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in AdapterInfo struct");
    decltype(Traits::system_name(input)) in_system_name = Traits::system_name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->system_name)::BaseType> system_name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_system_name, system_name_fragment);
    fragment->system_name.Set(
        system_name_fragment.is_null() ? nullptr : system_name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->system_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null system_name in AdapterInfo struct");
    fragment->floss = Traits::floss(input);
    fragment->initialized = Traits::initialized(input);
    fragment->present = Traits::present(input);
    fragment->powered = Traits::powered(input);
    fragment->discoverable = Traits::discoverable(input);
    fragment->discovering = Traits::discovering(input);
  }

  static bool Deserialize(::bluetooth::mojom::internal::AdapterInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::bluetooth::mojom::AdapterInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace bluetooth {
namespace mojom {



inline void AcceptConnectionResultDataView::GetDeviceDataView(
    ::bluetooth::mojom::DeviceInfoDataView* output) {
  auto pointer = data_->device.Get();
  *output = ::bluetooth::mojom::DeviceInfoDataView(pointer, message_);
}


inline void AdapterInfoDataView::GetAddressDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->address.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AdapterInfoDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void AdapterInfoDataView::GetSystemNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->system_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace bluetooth

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::bluetooth::mojom::ConnectResult> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::bluetooth::mojom::ConnectResult value);
};

} // namespace perfetto

#endif  // DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_SHARED_H_