// device/bluetooth/public/mojom/device.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_BLUETOOTH_PUBLIC_MOJOM_DEVICE_MOJOM_TEST_UTILS_H_
#define DEVICE_BLUETOOTH_PUBLIC_MOJOM_DEVICE_MOJOM_TEST_UTILS_H_

#include "device/bluetooth/public/mojom/device.mojom.h"


namespace bluetooth {
namespace mojom {


class  DeviceInterceptorForTesting : public Device {
  virtual Device* GetForwardingInterface() = 0;
  void Disconnect() override;
  void GetInfo(GetInfoCallback callback) override;
  void GetServices(GetServicesCallback callback) override;
  void GetCharacteristics(const std::string& service_id, GetCharacteristicsCallback callback) override;
  void ReadValueForCharacteristic(const std::string& service_id, const std::string& characteristic_id, ReadValueForCharacteristicCallback callback) override;
  void WriteValueForCharacteristic(const std::string& service_id, const std::string& characteristic_id, const std::vector<uint8_t>& value, WriteValueForCharacteristicCallback callback) override;
  void GetDescriptors(const std::string& service_id, const std::string& characteristic_id, GetDescriptorsCallback callback) override;
  void ReadValueForDescriptor(const std::string& service_id, const std::string& characteristic_id, const std::string& descriptor_id, ReadValueForDescriptorCallback callback) override;
  void WriteValueForDescriptor(const std::string& service_id, const std::string& characteristic_id, const std::string& descriptor_id, const std::vector<uint8_t>& value, WriteValueForDescriptorCallback callback) override;
};
class  DeviceAsyncWaiter {
 public:
  explicit DeviceAsyncWaiter(Device* proxy);

  DeviceAsyncWaiter(const DeviceAsyncWaiter&) = delete;
  DeviceAsyncWaiter& operator=(const DeviceAsyncWaiter&) = delete;

  ~DeviceAsyncWaiter();
  void GetInfo(
      DeviceInfoPtr* out_info);
  void GetServices(
      std::vector<ServiceInfoPtr>* out_services);
  void GetCharacteristics(
      const std::string& service_id, absl::optional<std::vector<CharacteristicInfoPtr>>* out_characteristics);
  void ReadValueForCharacteristic(
      const std::string& service_id, const std::string& characteristic_id, GattResult* out_result, absl::optional<std::vector<uint8_t>>* out_value);
  void WriteValueForCharacteristic(
      const std::string& service_id, const std::string& characteristic_id, const std::vector<uint8_t>& value, GattResult* out_result);
  void GetDescriptors(
      const std::string& service_id, const std::string& characteristic_id, absl::optional<std::vector<DescriptorInfoPtr>>* out_descriptors);
  void ReadValueForDescriptor(
      const std::string& service_id, const std::string& characteristic_id, const std::string& descriptor_id, GattResult* out_result, absl::optional<std::vector<uint8_t>>* out_value);
  void WriteValueForDescriptor(
      const std::string& service_id, const std::string& characteristic_id, const std::string& descriptor_id, const std::vector<uint8_t>& value, GattResult* out_result);

 private:
  Device* const proxy_;
};




}  // namespace mojom
}  // namespace bluetooth

#endif  // DEVICE_BLUETOOTH_PUBLIC_MOJOM_DEVICE_MOJOM_TEST_UTILS_H_