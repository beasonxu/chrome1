// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/vr/NonPresentingGvrContext

#ifndef org_chromium_device_vr_NonPresentingGvrContext_JNI
#define org_chromium_device_vr_NonPresentingGvrContext_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_device_vr_NonPresentingGvrContext[];
const char kClassPath_org_chromium_device_vr_NonPresentingGvrContext[] =
    "org/chromium/device/vr/NonPresentingGvrContext";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_vr_NonPresentingGvrContext_clazz(nullptr);
#ifndef org_chromium_device_vr_NonPresentingGvrContext_clazz_defined
#define org_chromium_device_vr_NonPresentingGvrContext_clazz_defined
inline jclass org_chromium_device_vr_NonPresentingGvrContext_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_device_vr_NonPresentingGvrContext,
      "vr", &g_org_chromium_device_vr_NonPresentingGvrContext_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {


static std::atomic<jmethodID> g_org_chromium_device_vr_NonPresentingGvrContext_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_NonPresentingGvrContext_create(JNIEnv* env,
    jlong nativeNonPresentingGvrContext) {
  jclass clazz = org_chromium_device_vr_NonPresentingGvrContext_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_vr_NonPresentingGvrContext_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/device/vr/NonPresentingGvrContext;",
          &g_org_chromium_device_vr_NonPresentingGvrContext_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeNonPresentingGvrContext);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_device_vr_NonPresentingGvrContext_getNativeGvrContext(nullptr);
static jlong Java_NonPresentingGvrContext_getNativeGvrContext(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_vr_NonPresentingGvrContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_vr_NonPresentingGvrContext_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativeGvrContext",
          "()J",
          &g_org_chromium_device_vr_NonPresentingGvrContext_getNativeGvrContext);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_device_vr_NonPresentingGvrContext_pause(nullptr);
static void Java_NonPresentingGvrContext_pause(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_device_vr_NonPresentingGvrContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_vr_NonPresentingGvrContext_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "pause",
          "()V",
          &g_org_chromium_device_vr_NonPresentingGvrContext_pause);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_device_vr_NonPresentingGvrContext_resume(nullptr);
static void Java_NonPresentingGvrContext_resume(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_device_vr_NonPresentingGvrContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_vr_NonPresentingGvrContext_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "resume",
          "()V",
          &g_org_chromium_device_vr_NonPresentingGvrContext_resume);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_device_vr_NonPresentingGvrContext_shutdown(nullptr);
static void Java_NonPresentingGvrContext_shutdown(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_vr_NonPresentingGvrContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_vr_NonPresentingGvrContext_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "shutdown",
          "()V",
          &g_org_chromium_device_vr_NonPresentingGvrContext_shutdown);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace device

#endif  // org_chromium_device_vr_NonPresentingGvrContext_JNI
