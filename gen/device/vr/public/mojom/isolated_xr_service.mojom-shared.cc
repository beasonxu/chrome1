// device/vr/public/mojom/isolated_xr_service.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "device/vr/public/mojom/isolated_xr_service.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "device/vr/public/mojom/isolated_xr_service.mojom-params-data.h"
namespace device {
namespace mojom {

namespace internal {


// static
bool XRRuntimeSessionOptions_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 64, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntimeSessionOptions_Data* object =
      static_cast<const XRRuntimeSessionOptions_Data*>(data);


  if (!::device::mojom::internal::XRSessionMode_Data
        ::Validate(object->mode, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->required_features, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams required_features_validate_params(
      0, ::device::mojom::internal::XRSessionFeature_Data::Validate);
  if (!mojo::internal::ValidateContainer(object->required_features, validation_context,
                                         &required_features_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->optional_features, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams optional_features_validate_params(
      0, ::device::mojom::internal::XRSessionFeature_Data::Validate);
  if (!mojo::internal::ValidateContainer(object->optional_features, validation_context,
                                         &optional_features_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->tracked_images, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams tracked_images_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->tracked_images, validation_context,
                                         &tracked_images_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->depth_options, validation_context))
    return false;

  return true;
}

XRRuntimeSessionOptions_Data::XRRuntimeSessionOptions_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRuntimeSessionResult_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntimeSessionResult_Data* object =
      static_cast<const XRRuntimeSessionResult_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->controller, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->controller,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->session, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->session, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->frame_sink_id, validation_context))
    return false;

  return true;
}

XRRuntimeSessionResult_Data::XRRuntimeSessionResult_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRenderInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRenderInfo_Data* object =
      static_cast<const XRRenderInfo_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->mojo_from_viewer, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->views, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams views_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->views, validation_context,
                                         &views_validate_params)) {
    return false;
  }

  return true;
}

XRRenderInfo_Data::XRRenderInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRDeviceData_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRDeviceData_Data* object =
      static_cast<const XRDeviceData_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->supported_features, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams supported_features_validate_params(
      0, ::device::mojom::internal::XRSessionFeature_Data::Validate);
  if (!mojo::internal::ValidateContainer(object->supported_features, validation_context,
                                         &supported_features_validate_params)) {
    return false;
  }

  return true;
}

XRDeviceData_Data::XRDeviceData_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRSessionController_SetFrameDataRestricted_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRSessionController_SetFrameDataRestricted_Params_Data* object =
      static_cast<const XRSessionController_SetFrameDataRestricted_Params_Data*>(data);

  return true;
}

XRSessionController_SetFrameDataRestricted_Params_Data::XRSessionController_SetFrameDataRestricted_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data* object =
      static_cast<const XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data*>(data);


  if (!::device::mojom::internal::XRVisibilityState_Data
        ::Validate(object->visibility_state, validation_context))
    return false;

  return true;
}

XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data::XRRuntimeEventListener_OnVisibilityStateChanged_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRuntimeEventListener_OnExitPresent_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntimeEventListener_OnExitPresent_Params_Data* object =
      static_cast<const XRRuntimeEventListener_OnExitPresent_Params_Data*>(data);

  return true;
}

XRRuntimeEventListener_OnExitPresent_Params_Data::XRRuntimeEventListener_OnExitPresent_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRuntime_RequestSession_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntime_RequestSession_Params_Data* object =
      static_cast<const XRRuntime_RequestSession_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->options, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->options, validation_context))
    return false;

  return true;
}

XRRuntime_RequestSession_Params_Data::XRRuntime_RequestSession_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRuntime_RequestSession_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntime_RequestSession_ResponseParams_Data* object =
      static_cast<const XRRuntime_RequestSession_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->session, validation_context))
    return false;

  return true;
}

XRRuntime_RequestSession_ResponseParams_Data::XRRuntime_RequestSession_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRuntime_ShutdownSession_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntime_ShutdownSession_Params_Data* object =
      static_cast<const XRRuntime_ShutdownSession_Params_Data*>(data);

  return true;
}

XRRuntime_ShutdownSession_Params_Data::XRRuntime_ShutdownSession_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRuntime_ShutdownSession_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntime_ShutdownSession_ResponseParams_Data* object =
      static_cast<const XRRuntime_ShutdownSession_ResponseParams_Data*>(data);

  return true;
}

XRRuntime_ShutdownSession_ResponseParams_Data::XRRuntime_ShutdownSession_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRRuntime_ListenToDeviceChanges_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRRuntime_ListenToDeviceChanges_Params_Data* object =
      static_cast<const XRRuntime_ListenToDeviceChanges_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->listener, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->listener,
                                                 validation_context)) {
    return false;
  }

  return true;
}

XRRuntime_ListenToDeviceChanges_Params_Data::XRRuntime_ListenToDeviceChanges_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ImmersiveOverlay_RequestNextOverlayPose_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ImmersiveOverlay_RequestNextOverlayPose_Params_Data* object =
      static_cast<const ImmersiveOverlay_RequestNextOverlayPose_Params_Data*>(data);

  return true;
}

ImmersiveOverlay_RequestNextOverlayPose_Params_Data::ImmersiveOverlay_RequestNextOverlayPose_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data* object =
      static_cast<const ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->render_info, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->render_info, validation_context))
    return false;

  return true;
}

ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data::ImmersiveOverlay_RequestNextOverlayPose_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ImmersiveOverlay_SubmitOverlayTexture_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ImmersiveOverlay_SubmitOverlayTexture_Params_Data* object =
      static_cast<const ImmersiveOverlay_SubmitOverlayTexture_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->texture, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->texture,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->sync_token, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->sync_token, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->left_bounds, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->left_bounds, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->right_bounds, 5, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->right_bounds, validation_context))
    return false;

  return true;
}

ImmersiveOverlay_SubmitOverlayTexture_Params_Data::ImmersiveOverlay_SubmitOverlayTexture_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data* object =
      static_cast<const ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data*>(data);

  return true;
}

ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data::ImmersiveOverlay_SubmitOverlayTexture_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data* object =
      static_cast<const ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data*>(data);

  return true;
}

ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data::ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data* object =
      static_cast<const ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data*>(data);

  return true;
}

ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data* object =
      static_cast<const ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data*>(data);

  return true;
}

ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data::ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRCompositorHost_CreateImmersiveOverlay_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRCompositorHost_CreateImmersiveOverlay_Params_Data* object =
      static_cast<const XRCompositorHost_CreateImmersiveOverlay_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->overlay, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->overlay,
                                                 validation_context)) {
    return false;
  }

  return true;
}

XRCompositorHost_CreateImmersiveOverlay_Params_Data::XRCompositorHost_CreateImmersiveOverlay_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data* object =
      static_cast<const IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->runtime, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->runtime,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->compositor_host, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->compositor_host,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->device_data, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->device_data, validation_context))
    return false;


  if (!::device::mojom::internal::XRDeviceId_Data
        ::Validate(object->device_id, validation_context))
    return false;

  return true;
}

IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data::IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data* object =
      static_cast<const IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data*>(data);


  if (!::device::mojom::internal::XRDeviceId_Data
        ::Validate(object->device_index, validation_context))
    return false;

  return true;
}

IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data::IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data* object =
      static_cast<const IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data*>(data);

  return true;
}

IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data::IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IsolatedXRRuntimeProvider_RequestDevices_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const IsolatedXRRuntimeProvider_RequestDevices_Params_Data* object =
      static_cast<const IsolatedXRRuntimeProvider_RequestDevices_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->client, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->client,
                                                 validation_context)) {
    return false;
  }

  return true;
}

IsolatedXRRuntimeProvider_RequestDevices_Params_Data::IsolatedXRRuntimeProvider_RequestDevices_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRDeviceService_BindRuntimeProvider_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRDeviceService_BindRuntimeProvider_Params_Data* object =
      static_cast<const XRDeviceService_BindRuntimeProvider_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->host, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->host,
                                                 validation_context)) {
    return false;
  }

  return true;
}

XRDeviceService_BindRuntimeProvider_Params_Data::XRDeviceService_BindRuntimeProvider_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRDeviceService_BindTestHook_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRDeviceService_BindTestHook_Params_Data* object =
      static_cast<const XRDeviceService_BindTestHook_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

XRDeviceService_BindTestHook_Params_Data::XRDeviceService_BindTestHook_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool XRDeviceServiceHost_BindGpu_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const XRDeviceServiceHost_BindGpu_Params_Data* object =
      static_cast<const XRDeviceServiceHost_BindGpu_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

XRDeviceServiceHost_BindGpu_Params_Data::XRDeviceServiceHost_BindGpu_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace device