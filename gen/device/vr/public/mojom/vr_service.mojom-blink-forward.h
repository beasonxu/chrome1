// device/vr/public/mojom/vr_service.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_VR_PUBLIC_MOJOM_VR_SERVICE_MOJOM_BLINK_FORWARD_H_
#define DEVICE_VR_PUBLIC_MOJOM_VR_SERVICE_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"




namespace device {
namespace mojom {

enum class XRDeviceId : int32_t;

enum class XRHandedness : int32_t;

enum class XRTargetRayMode : int32_t;

enum class XRSessionFeature : int32_t;

enum class XRSessionFeatureRequestStatus : int32_t;

enum class XRSessionMode : int32_t;

enum class XREnvironmentBlendMode : int32_t;

enum class XRDepthUsage : int32_t;

enum class XRDepthDataFormat : int32_t;

enum class XRInteractionMode : int32_t;

enum class XRHandJoint : int32_t;

enum class XREye : int32_t;

enum class XRPresentationTransportMethod : int32_t;

enum class XRReferenceSpaceType : int32_t;

enum class XRInputSourceSpaceType : int32_t;

enum class XRPlaneOrientation : int32_t;

enum class RequestSessionError : int32_t;

enum class XrCompatibleResult : int32_t;

enum class CreateAnchorResult : int32_t;

enum class SubscribeToHitTestResult : int32_t;

enum class EntityTypeForHitTest : int32_t;

enum class XRVisibilityState : int32_t;
class VRServiceInterfaceBase;
class XRSessionMetricsRecorderInterfaceBase;
class VRServiceClientInterfaceBase;
class XREnvironmentIntegrationProviderInterfaceBase;
class XRInputSourceButtonListenerInterfaceBase;
class XRFrameDataProviderInterfaceBase;
class XRPresentationProviderInterfaceBase;
class XRPresentationClientInterfaceBase;
class XRSessionClientInterfaceBase;
}  // namespace device
}  // namespace mojom


namespace device {
namespace mojom {
namespace blink {
// Aliases for definition in the parent namespace.
using XRDeviceId = XRDeviceId;
using XRHandedness = XRHandedness;
using XRTargetRayMode = XRTargetRayMode;
using XRSessionFeature = XRSessionFeature;
using XRSessionFeatureRequestStatus = XRSessionFeatureRequestStatus;
using XRSessionMode = XRSessionMode;
using XREnvironmentBlendMode = XREnvironmentBlendMode;
using XRDepthUsage = XRDepthUsage;
using XRDepthDataFormat = XRDepthDataFormat;
using XRInteractionMode = XRInteractionMode;
using XRHandJoint = XRHandJoint;
using XREye = XREye;
using XRPresentationTransportMethod = XRPresentationTransportMethod;
using XRReferenceSpaceType = XRReferenceSpaceType;
using XRInputSourceSpaceType = XRInputSourceSpaceType;
using XRPlaneOrientation = XRPlaneOrientation;
using RequestSessionError = RequestSessionError;
using XrCompatibleResult = XrCompatibleResult;
using CreateAnchorResult = CreateAnchorResult;
using SubscribeToHitTestResult = SubscribeToHitTestResult;
using EntityTypeForHitTest = EntityTypeForHitTest;
using XRVisibilityState = XRVisibilityState;
using VRServiceInterfaceBase = VRServiceInterfaceBase;
using XRSessionMetricsRecorderInterfaceBase = XRSessionMetricsRecorderInterfaceBase;
using VRServiceClientInterfaceBase = VRServiceClientInterfaceBase;
using XREnvironmentIntegrationProviderInterfaceBase = XREnvironmentIntegrationProviderInterfaceBase;
using XRInputSourceButtonListenerInterfaceBase = XRInputSourceButtonListenerInterfaceBase;
using XRFrameDataProviderInterfaceBase = XRFrameDataProviderInterfaceBase;
using XRPresentationProviderInterfaceBase = XRPresentationProviderInterfaceBase;
using XRPresentationClientInterfaceBase = XRPresentationClientInterfaceBase;
using XRSessionClientInterfaceBase = XRSessionClientInterfaceBase;
class XRTrackedImage;
using XRTrackedImagePtr = mojo::StructPtr<XRTrackedImage>;

class XRDepthOptions;
using XRDepthOptionsPtr = mojo::StructPtr<XRDepthOptions>;

class XRSessionOptions;
using XRSessionOptionsPtr = mojo::StructPtr<XRSessionOptions>;

class XRDepthConfig;
using XRDepthConfigPtr = mojo::InlinedStructPtr<XRDepthConfig>;

class XRSessionDeviceConfig;
using XRSessionDeviceConfigPtr = mojo::StructPtr<XRSessionDeviceConfig>;

class XRSession;
using XRSessionPtr = mojo::StructPtr<XRSession>;

class XRPresentationConnection;
using XRPresentationConnectionPtr = mojo::StructPtr<XRPresentationConnection>;

class XRInputSourceDescription;
using XRInputSourceDescriptionPtr = mojo::StructPtr<XRInputSourceDescription>;

class XRHandJointData;
using XRHandJointDataPtr = mojo::StructPtr<XRHandJointData>;

class XRHandTrackingData;
using XRHandTrackingDataPtr = mojo::StructPtr<XRHandTrackingData>;

class XRInputSourceState;
using XRInputSourceStatePtr = mojo::StructPtr<XRInputSourceState>;

class VRFieldOfView;
using VRFieldOfViewPtr = mojo::InlinedStructPtr<VRFieldOfView>;

class VRPose;
using VRPosePtr = mojo::StructPtr<VRPose>;

class Pose;
using PosePtr = mojo::StructPtr<Pose>;

class XRRay;
using XRRayPtr = mojo::StructPtr<XRRay>;

class XRHitResult;
using XRHitResultPtr = mojo::StructPtr<XRHitResult>;

class XRView;
using XRViewPtr = mojo::StructPtr<XRView>;

class VRStageParameters;
using VRStageParametersPtr = mojo::StructPtr<VRStageParameters>;

class XRPresentationTransportOptions;
using XRPresentationTransportOptionsPtr = mojo::InlinedStructPtr<XRPresentationTransportOptions>;

class XRInputSourceSpaceInfo;
using XRInputSourceSpaceInfoPtr = mojo::InlinedStructPtr<XRInputSourceSpaceInfo>;

class XRHandJointSpaceInfo;
using XRHandJointSpaceInfoPtr = mojo::InlinedStructPtr<XRHandJointSpaceInfo>;

class XRPlanePointData;
using XRPlanePointDataPtr = mojo::InlinedStructPtr<XRPlanePointData>;

class XRPlaneData;
using XRPlaneDataPtr = mojo::StructPtr<XRPlaneData>;

class XRPlaneDetectionData;
using XRPlaneDetectionDataPtr = mojo::StructPtr<XRPlaneDetectionData>;

class XRAnchorData;
using XRAnchorDataPtr = mojo::StructPtr<XRAnchorData>;

class XRAnchorsData;
using XRAnchorsDataPtr = mojo::StructPtr<XRAnchorsData>;

class XRHitTestSubscriptionResultData;
using XRHitTestSubscriptionResultDataPtr = mojo::StructPtr<XRHitTestSubscriptionResultData>;

class XRHitTestTransientInputSubscriptionResultData;
using XRHitTestTransientInputSubscriptionResultDataPtr = mojo::StructPtr<XRHitTestTransientInputSubscriptionResultData>;

class XRHitTestSubscriptionResultsData;
using XRHitTestSubscriptionResultsDataPtr = mojo::StructPtr<XRHitTestSubscriptionResultsData>;

class RgbTupleF32;
using RgbTupleF32Ptr = mojo::InlinedStructPtr<RgbTupleF32>;

class XRSphericalHarmonics;
using XRSphericalHarmonicsPtr = mojo::StructPtr<XRSphericalHarmonics>;

class RgbaTupleF16;
using RgbaTupleF16Ptr = mojo::InlinedStructPtr<RgbaTupleF16>;

class XRCubeMap;
using XRCubeMapPtr = mojo::StructPtr<XRCubeMap>;

class XRLightProbe;
using XRLightProbePtr = mojo::StructPtr<XRLightProbe>;

class XRReflectionProbe;
using XRReflectionProbePtr = mojo::StructPtr<XRReflectionProbe>;

class XRLightEstimationData;
using XRLightEstimationDataPtr = mojo::StructPtr<XRLightEstimationData>;

class XRDepthDataStillValid;
using XRDepthDataStillValidPtr = mojo::InlinedStructPtr<XRDepthDataStillValid>;

class XRDepthDataUpdated;
using XRDepthDataUpdatedPtr = mojo::StructPtr<XRDepthDataUpdated>;

class XRTrackedImageData;
using XRTrackedImageDataPtr = mojo::StructPtr<XRTrackedImageData>;

class XRTrackedImagesData;
using XRTrackedImagesDataPtr = mojo::StructPtr<XRTrackedImagesData>;

class XRFrameData;
using XRFrameDataPtr = mojo::StructPtr<XRFrameData>;

class RequestSessionSuccess;
using RequestSessionSuccessPtr = mojo::StructPtr<RequestSessionSuccess>;

class XRFrameDataRequestOptions;
using XRFrameDataRequestOptionsPtr = mojo::InlinedStructPtr<XRFrameDataRequestOptions>;

class XRNativeOriginInformation;

using XRNativeOriginInformationPtr = mojo::StructPtr<XRNativeOriginInformation>;

class XRDepthData;

using XRDepthDataPtr = mojo::StructPtr<XRDepthData>;

class RequestSessionResult;

using RequestSessionResultPtr = mojo::StructPtr<RequestSessionResult>;

class VRService;

class XRSessionMetricsRecorder;

class VRServiceClient;

class XREnvironmentIntegrationProvider;

class XRInputSourceButtonListener;

class XRFrameDataProvider;

class XRPresentationProvider;

class XRPresentationClient;

class XRSessionClient;




}  // namespace blink
}  // namespace mojom
}  // namespace device

#endif  // DEVICE_VR_PUBLIC_MOJOM_VR_SERVICE_MOJOM_BLINK_FORWARD_H_