// device/vr/public/mojom/isolated_xr_service.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_SHARED_INTERNAL_H_
#define DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "device/vr/public/mojom/browser_test_interfaces.mojom-shared-internal.h"
#include "device/vr/public/mojom/vr_service.mojom-shared-internal.h"
#include "gpu/ipc/common/sync_token.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared-internal.h"
#include "services/viz/public/mojom/compositing/frame_sink_id.mojom-shared-internal.h"
#include "services/viz/public/mojom/gpu.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace device {
namespace mojom {
namespace internal {
class XRRuntimeSessionOptions_Data;
class XRRuntimeSessionResult_Data;
class XRRenderInfo_Data;
class XRDeviceData_Data;

#pragma pack(push, 1)
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntimeSessionOptions_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t mode;
  int32_t render_process_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> required_features;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> optional_features;
  int32_t render_frame_id;
  uint8_t pad4_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::device::mojom::internal::XRTrackedImage_Data>>> tracked_images;
  mojo::internal::Pointer<::device::mojom::internal::XRDepthOptions_Data> depth_options;
  uint64_t trace_id;

 private:
  friend class mojo::internal::MessageFragment<XRRuntimeSessionOptions_Data>;

  XRRuntimeSessionOptions_Data();
  ~XRRuntimeSessionOptions_Data() = delete;
};
static_assert(sizeof(XRRuntimeSessionOptions_Data) == 64,
              "Bad sizeof(XRRuntimeSessionOptions_Data)");
// Used by XRRuntimeSessionOptions::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct XRRuntimeSessionOptions_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  XRRuntimeSessionOptions_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~XRRuntimeSessionOptions_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<XRRuntimeSessionOptions_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    XRRuntimeSessionOptions_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRuntimeSessionResult_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data controller;
  mojo::internal::Pointer<::device::mojom::internal::XRSession_Data> session;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;

 private:
  friend class mojo::internal::MessageFragment<XRRuntimeSessionResult_Data>;

  XRRuntimeSessionResult_Data();
  ~XRRuntimeSessionResult_Data() = delete;
};
static_assert(sizeof(XRRuntimeSessionResult_Data) == 32,
              "Bad sizeof(XRRuntimeSessionResult_Data)");
// Used by XRRuntimeSessionResult::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct XRRuntimeSessionResult_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  XRRuntimeSessionResult_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~XRRuntimeSessionResult_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<XRRuntimeSessionResult_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    XRRuntimeSessionResult_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRRenderInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int16_t frame_id;
  uint8_t pad0_[6];
  mojo::internal::Pointer<::device::mojom::internal::VRPose_Data> mojo_from_viewer;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::device::mojom::internal::XRView_Data>>> views;

 private:
  friend class mojo::internal::MessageFragment<XRRenderInfo_Data>;

  XRRenderInfo_Data();
  ~XRRenderInfo_Data() = delete;
};
static_assert(sizeof(XRRenderInfo_Data) == 32,
              "Bad sizeof(XRRenderInfo_Data)");
// Used by XRRenderInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct XRRenderInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  XRRenderInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~XRRenderInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<XRRenderInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    XRRenderInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(DEVICE_VR_ISOLATED_XR_SERVICE_MOJO_BINDINGS_SHARED) XRDeviceData_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> supported_features;
  uint8_t is_ar_blend_mode_supported : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<XRDeviceData_Data>;

  XRDeviceData_Data();
  ~XRDeviceData_Data() = delete;
};
static_assert(sizeof(XRDeviceData_Data) == 24,
              "Bad sizeof(XRDeviceData_Data)");
// Used by XRDeviceData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct XRDeviceData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  XRDeviceData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~XRDeviceData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<XRDeviceData_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    XRDeviceData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace device

#endif  // DEVICE_VR_PUBLIC_MOJOM_ISOLATED_XR_SERVICE_MOJOM_SHARED_INTERNAL_H_