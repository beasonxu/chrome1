// services/network/public/mojom/network_change_manager.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "services/network/public/mojom/network_change_manager.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/network_change_manager.mojom-params-data.h"
namespace network {
namespace mojom {

static NOINLINE const char* ConnectionTypeToStringHelper(ConnectionType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ConnectionType::CONNECTION_UNKNOWN:
      return "CONNECTION_UNKNOWN";
    case ConnectionType::CONNECTION_ETHERNET:
      return "CONNECTION_ETHERNET";
    case ConnectionType::CONNECTION_WIFI:
      return "CONNECTION_WIFI";
    case ConnectionType::CONNECTION_2G:
      return "CONNECTION_2G";
    case ConnectionType::CONNECTION_3G:
      return "CONNECTION_3G";
    case ConnectionType::CONNECTION_4G:
      return "CONNECTION_4G";
    case ConnectionType::CONNECTION_NONE:
      return "CONNECTION_NONE";
    case ConnectionType::CONNECTION_BLUETOOTH:
      return "CONNECTION_BLUETOOTH";
    case ConnectionType::CONNECTION_5G:
      return "{CONNECTION_5G, CONNECTION_LAST}";
    default:
      return nullptr;
  }
}

std::string ConnectionTypeToString(ConnectionType value) {
  const char *str = ConnectionTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ConnectionType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ConnectionType value) {
  return os << ConnectionTypeToString(value);
}

static NOINLINE const char* ConnectionSubtypeToStringHelper(ConnectionSubtype value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ConnectionSubtype::SUBTYPE_UNKNOWN:
      return "SUBTYPE_UNKNOWN";
    case ConnectionSubtype::SUBTYPE_NONE:
      return "SUBTYPE_NONE";
    case ConnectionSubtype::SUBTYPE_OTHER:
      return "SUBTYPE_OTHER";
    case ConnectionSubtype::SUBTYPE_GSM:
      return "SUBTYPE_GSM";
    case ConnectionSubtype::SUBTYPE_IDEN:
      return "SUBTYPE_IDEN";
    case ConnectionSubtype::SUBTYPE_CDMA:
      return "SUBTYPE_CDMA";
    case ConnectionSubtype::SUBTYPE_1XRTT:
      return "SUBTYPE_1XRTT";
    case ConnectionSubtype::SUBTYPE_GPRS:
      return "SUBTYPE_GPRS";
    case ConnectionSubtype::SUBTYPE_EDGE:
      return "SUBTYPE_EDGE";
    case ConnectionSubtype::SUBTYPE_UMTS:
      return "SUBTYPE_UMTS";
    case ConnectionSubtype::SUBTYPE_EVDO_REV_0:
      return "SUBTYPE_EVDO_REV_0";
    case ConnectionSubtype::SUBTYPE_EVDO_REV_A:
      return "SUBTYPE_EVDO_REV_A";
    case ConnectionSubtype::SUBTYPE_HSPA:
      return "SUBTYPE_HSPA";
    case ConnectionSubtype::SUBTYPE_EVDO_REV_B:
      return "SUBTYPE_EVDO_REV_B";
    case ConnectionSubtype::SUBTYPE_HSDPA:
      return "SUBTYPE_HSDPA";
    case ConnectionSubtype::SUBTYPE_HSUPA:
      return "SUBTYPE_HSUPA";
    case ConnectionSubtype::SUBTYPE_EHRPD:
      return "SUBTYPE_EHRPD";
    case ConnectionSubtype::SUBTYPE_HSPAP:
      return "SUBTYPE_HSPAP";
    case ConnectionSubtype::SUBTYPE_LTE:
      return "SUBTYPE_LTE";
    case ConnectionSubtype::SUBTYPE_LTE_ADVANCED:
      return "SUBTYPE_LTE_ADVANCED";
    case ConnectionSubtype::SUBTYPE_BLUETOOTH_1_2:
      return "SUBTYPE_BLUETOOTH_1_2";
    case ConnectionSubtype::SUBTYPE_BLUETOOTH_2_1:
      return "SUBTYPE_BLUETOOTH_2_1";
    case ConnectionSubtype::SUBTYPE_BLUETOOTH_3_0:
      return "SUBTYPE_BLUETOOTH_3_0";
    case ConnectionSubtype::SUBTYPE_BLUETOOTH_4_0:
      return "SUBTYPE_BLUETOOTH_4_0";
    case ConnectionSubtype::SUBTYPE_ETHERNET:
      return "SUBTYPE_ETHERNET";
    case ConnectionSubtype::SUBTYPE_FAST_ETHERNET:
      return "SUBTYPE_FAST_ETHERNET";
    case ConnectionSubtype::SUBTYPE_GIGABIT_ETHERNET:
      return "SUBTYPE_GIGABIT_ETHERNET";
    case ConnectionSubtype::SUBTYPE_10_GIGABIT_ETHERNET:
      return "SUBTYPE_10_GIGABIT_ETHERNET";
    case ConnectionSubtype::SUBTYPE_WIFI_B:
      return "SUBTYPE_WIFI_B";
    case ConnectionSubtype::SUBTYPE_WIFI_G:
      return "SUBTYPE_WIFI_G";
    case ConnectionSubtype::SUBTYPE_WIFI_N:
      return "SUBTYPE_WIFI_N";
    case ConnectionSubtype::SUBTYPE_WIFI_AC:
      return "SUBTYPE_WIFI_AC";
    case ConnectionSubtype::SUBTYPE_WIFI_AD:
      return "{SUBTYPE_WIFI_AD, SUBTYPE_LAST}";
    default:
      return nullptr;
  }
}

std::string ConnectionSubtypeToString(ConnectionSubtype value) {
  const char *str = ConnectionSubtypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ConnectionSubtype value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ConnectionSubtype value) {
  return os << ConnectionSubtypeToString(value);
}

namespace internal {


// static
bool NetworkChangeManagerClient_OnInitialConnectionType_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NetworkChangeManagerClient_OnInitialConnectionType_Params_Data* object =
      static_cast<const NetworkChangeManagerClient_OnInitialConnectionType_Params_Data*>(data);


  if (!::network::mojom::internal::ConnectionType_Data
        ::Validate(object->type, validation_context))
    return false;

  return true;
}

NetworkChangeManagerClient_OnInitialConnectionType_Params_Data::NetworkChangeManagerClient_OnInitialConnectionType_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NetworkChangeManagerClient_OnNetworkChanged_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NetworkChangeManagerClient_OnNetworkChanged_Params_Data* object =
      static_cast<const NetworkChangeManagerClient_OnNetworkChanged_Params_Data*>(data);


  if (!::network::mojom::internal::ConnectionType_Data
        ::Validate(object->type, validation_context))
    return false;

  return true;
}

NetworkChangeManagerClient_OnNetworkChanged_Params_Data::NetworkChangeManagerClient_OnNetworkChanged_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NetworkChangeManager_RequestNotifications_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NetworkChangeManager_RequestNotifications_Params_Data* object =
      static_cast<const NetworkChangeManager_RequestNotifications_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->client_remote, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->client_remote,
                                                 validation_context)) {
    return false;
  }

  return true;
}

NetworkChangeManager_RequestNotifications_Params_Data::NetworkChangeManager_RequestNotifications_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool NetworkChangeManager_OnNetworkChanged_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const NetworkChangeManager_OnNetworkChanged_Params_Data* object =
      static_cast<const NetworkChangeManager_OnNetworkChanged_Params_Data*>(data);


  if (!::network::mojom::internal::ConnectionType_Data
        ::Validate(object->new_connection_type, validation_context))
    return false;


  if (!::network::mojom::internal::ConnectionSubtype_Data
        ::Validate(object->new_connection_subtype, validation_context))
    return false;

  return true;
}

NetworkChangeManager_OnNetworkChanged_Params_Data::NetworkChangeManager_OnNetworkChanged_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace network

namespace perfetto {

// static
void TraceFormatTraits<::network::mojom::ConnectionType>::WriteIntoTrace(
   perfetto::TracedValue context, ::network::mojom::ConnectionType value) {
  return std::move(context).WriteString(::network::mojom::ConnectionTypeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::network::mojom::ConnectionSubtype>::WriteIntoTrace(
   perfetto::TracedValue context, ::network::mojom::ConnectionSubtype value) {
  return std::move(context).WriteString(::network::mojom::ConnectionSubtypeToString(value));
}

} // namespace perfetto