// services/network/public/mojom/load_timing_info.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_LOAD_TIMING_INFO_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_LOAD_TIMING_INFO_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class LoadTimingInfoConnectTiming_Data;
class LoadTimingInfo_Data;

#pragma pack(push, 1)
class  LoadTimingInfoConnectTiming_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> dns_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> dns_end;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> connect_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> connect_end;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> ssl_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> ssl_end;

 private:
  friend class mojo::internal::MessageFragment<LoadTimingInfoConnectTiming_Data>;

  LoadTimingInfoConnectTiming_Data();
  ~LoadTimingInfoConnectTiming_Data() = delete;
};
static_assert(sizeof(LoadTimingInfoConnectTiming_Data) == 56,
              "Bad sizeof(LoadTimingInfoConnectTiming_Data)");
// Used by LoadTimingInfoConnectTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct LoadTimingInfoConnectTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  LoadTimingInfoConnectTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~LoadTimingInfoConnectTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<LoadTimingInfoConnectTiming_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    LoadTimingInfoConnectTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  LoadTimingInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t socket_reused : 1;
  uint8_t pad0_[3];
  uint32_t socket_log_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> request_start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> request_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> proxy_resolve_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> proxy_resolve_end;
  mojo::internal::Pointer<internal::LoadTimingInfoConnectTiming_Data> connect_timing;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> send_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> send_end;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> receive_headers_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> receive_headers_end;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> receive_non_informational_headers_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> first_early_hints_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> push_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> push_end;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> service_worker_start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> service_worker_ready_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> service_worker_fetch_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> service_worker_respond_with_settled;

 private:
  friend class mojo::internal::MessageFragment<LoadTimingInfo_Data>;

  LoadTimingInfo_Data();
  ~LoadTimingInfo_Data() = delete;
};
static_assert(sizeof(LoadTimingInfo_Data) == 152,
              "Bad sizeof(LoadTimingInfo_Data)");
// Used by LoadTimingInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct LoadTimingInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  LoadTimingInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~LoadTimingInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<LoadTimingInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    LoadTimingInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_LOAD_TIMING_INFO_MOJOM_SHARED_INTERNAL_H_