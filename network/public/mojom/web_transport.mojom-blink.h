// services/network/public/mojom/web_transport.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_BLINK_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/web_transport.mojom-shared.h"
#include "services/network/public/mojom/web_transport.mojom-blink-forward.h"
#include "mojo/public/mojom/base/read_only_buffer.mojom-blink.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "services/network/public/mojom/network_param.mojom-blink-forward.h"
#include "url/mojom/url.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/platform/web_common.h"




namespace network {
namespace mojom {
namespace blink {

class WebTransportProxy;

template <typename ImplRefTraits>
class WebTransportStub;

class WebTransportRequestValidator;
class WebTransportResponseValidator;


class BLINK_PLATFORM_EXPORT WebTransport
    : public WebTransportInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = WebTransportInterfaceBase;
  using Proxy_ = WebTransportProxy;

  template <typename ImplRefTraits>
  using Stub_ = WebTransportStub<ImplRefTraits>;

  using RequestValidator_ = WebTransportRequestValidator;
  using ResponseValidator_ = WebTransportResponseValidator;
  enum MethodMinVersions : uint32_t {
    kSendDatagramMinVersion = 0,
    kCreateStreamMinVersion = 0,
    kAcceptBidirectionalStreamMinVersion = 0,
    kAcceptUnidirectionalStreamMinVersion = 0,
    kSendFinMinVersion = 0,
    kAbortStreamMinVersion = 0,
    kStopSendingMinVersion = 0,
    kSetOutgoingDatagramExpirationDurationMinVersion = 0,
    kCloseMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct SendDatagram_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CreateStream_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AcceptBidirectionalStream_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AcceptUnidirectionalStream_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SendFin_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AbortStream_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct StopSending_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetOutgoingDatagramExpirationDuration_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Close_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~WebTransport() = default;


  using SendDatagramCallback = base::OnceCallback<void(bool)>;
  
  virtual void SendDatagram(::base::span<const ::uint8_t> data, SendDatagramCallback callback) = 0;


  using CreateStreamCallback = base::OnceCallback<void(bool, uint32_t)>;
  
  virtual void CreateStream(::mojo::ScopedDataPipeConsumerHandle readable, ::mojo::ScopedDataPipeProducerHandle writable, CreateStreamCallback callback) = 0;


  using AcceptBidirectionalStreamCallback = base::OnceCallback<void(uint32_t, ::mojo::ScopedDataPipeConsumerHandle, ::mojo::ScopedDataPipeProducerHandle)>;
  
  virtual void AcceptBidirectionalStream(AcceptBidirectionalStreamCallback callback) = 0;


  using AcceptUnidirectionalStreamCallback = base::OnceCallback<void(uint32_t, ::mojo::ScopedDataPipeConsumerHandle)>;
  
  virtual void AcceptUnidirectionalStream(AcceptUnidirectionalStreamCallback callback) = 0;

  
  virtual void SendFin(uint32_t stream_id) = 0;

  
  virtual void AbortStream(uint32_t stream_id, uint8_t code) = 0;

  
  virtual void StopSending(uint32_t stream_id, uint8_t code) = 0;

  
  virtual void SetOutgoingDatagramExpirationDuration(::base::TimeDelta duration) = 0;

  
  virtual void Close(WebTransportCloseInfoPtr close_info) = 0;
};

class WebTransportClientProxy;

template <typename ImplRefTraits>
class WebTransportClientStub;

class WebTransportClientRequestValidator;


class BLINK_PLATFORM_EXPORT WebTransportClient
    : public WebTransportClientInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = WebTransportClientInterfaceBase;
  using Proxy_ = WebTransportClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = WebTransportClientStub<ImplRefTraits>;

  using RequestValidator_ = WebTransportClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnDatagramReceivedMinVersion = 0,
    kOnIncomingStreamClosedMinVersion = 0,
    kOnOutgoingStreamClosedMinVersion = 0,
    kOnReceivedStopSendingMinVersion = 0,
    kOnReceivedResetStreamMinVersion = 0,
    kOnClosedMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnDatagramReceived_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnIncomingStreamClosed_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnOutgoingStreamClosed_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnReceivedStopSending_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnReceivedResetStream_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnClosed_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~WebTransportClient() = default;

  
  virtual void OnDatagramReceived(::base::span<const ::uint8_t> data) = 0;

  
  virtual void OnIncomingStreamClosed(uint32_t stream_id, bool fin_received) = 0;

  
  virtual void OnOutgoingStreamClosed(uint32_t stream_id) = 0;

  
  virtual void OnReceivedStopSending(uint32_t stream_id, uint8_t code) = 0;

  
  virtual void OnReceivedResetStream(uint32_t stream_id, uint8_t code) = 0;

  
  virtual void OnClosed(WebTransportCloseInfoPtr close_info) = 0;
};

class WebTransportHandshakeClientProxy;

template <typename ImplRefTraits>
class WebTransportHandshakeClientStub;

class WebTransportHandshakeClientRequestValidator;


class BLINK_PLATFORM_EXPORT WebTransportHandshakeClient
    : public WebTransportHandshakeClientInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = WebTransportHandshakeClientInterfaceBase;
  using Proxy_ = WebTransportHandshakeClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = WebTransportHandshakeClientStub<ImplRefTraits>;

  using RequestValidator_ = WebTransportHandshakeClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnConnectionEstablishedMinVersion = 0,
    kOnHandshakeFailedMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnConnectionEstablished_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnHandshakeFailed_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~WebTransportHandshakeClient() = default;

  
  virtual void OnConnectionEstablished(::mojo::PendingRemote<WebTransport> transport, ::mojo::PendingReceiver<WebTransportClient> client, ::network::mojom::blink::HttpResponseHeadersPtr response_headers) = 0;

  
  virtual void OnHandshakeFailed(WebTransportErrorPtr error) = 0;
};



class BLINK_PLATFORM_EXPORT WebTransportProxy
    : public WebTransport {
 public:
  using InterfaceType = WebTransport;

  explicit WebTransportProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SendDatagram(::base::span<const ::uint8_t> data, SendDatagramCallback callback) final;
  
  void CreateStream(::mojo::ScopedDataPipeConsumerHandle readable, ::mojo::ScopedDataPipeProducerHandle writable, CreateStreamCallback callback) final;
  
  void AcceptBidirectionalStream(AcceptBidirectionalStreamCallback callback) final;
  
  void AcceptUnidirectionalStream(AcceptUnidirectionalStreamCallback callback) final;
  
  void SendFin(uint32_t stream_id) final;
  
  void AbortStream(uint32_t stream_id, uint8_t code) final;
  
  void StopSending(uint32_t stream_id, uint8_t code) final;
  
  void SetOutgoingDatagramExpirationDuration(::base::TimeDelta duration) final;
  
  void Close(WebTransportCloseInfoPtr close_info) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT WebTransportClientProxy
    : public WebTransportClient {
 public:
  using InterfaceType = WebTransportClient;

  explicit WebTransportClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnDatagramReceived(::base::span<const ::uint8_t> data) final;
  
  void OnIncomingStreamClosed(uint32_t stream_id, bool fin_received) final;
  
  void OnOutgoingStreamClosed(uint32_t stream_id) final;
  
  void OnReceivedStopSending(uint32_t stream_id, uint8_t code) final;
  
  void OnReceivedResetStream(uint32_t stream_id, uint8_t code) final;
  
  void OnClosed(WebTransportCloseInfoPtr close_info) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT WebTransportHandshakeClientProxy
    : public WebTransportHandshakeClient {
 public:
  using InterfaceType = WebTransportHandshakeClient;

  explicit WebTransportHandshakeClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnConnectionEstablished(::mojo::PendingRemote<WebTransport> transport, ::mojo::PendingReceiver<WebTransportClient> client, ::network::mojom::blink::HttpResponseHeadersPtr response_headers) final;
  
  void OnHandshakeFailed(WebTransportErrorPtr error) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_PLATFORM_EXPORT WebTransportStubDispatch {
 public:
  static bool Accept(WebTransport* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      WebTransport* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<WebTransport>>
class WebTransportStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WebTransportStub() = default;
  ~WebTransportStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebTransportStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebTransportStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT WebTransportClientStubDispatch {
 public:
  static bool Accept(WebTransportClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      WebTransportClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<WebTransportClient>>
class WebTransportClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WebTransportClientStub() = default;
  ~WebTransportClientStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebTransportClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebTransportClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT WebTransportHandshakeClientStubDispatch {
 public:
  static bool Accept(WebTransportHandshakeClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      WebTransportHandshakeClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<WebTransportHandshakeClient>>
class WebTransportHandshakeClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WebTransportHandshakeClientStub() = default;
  ~WebTransportHandshakeClientStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebTransportHandshakeClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebTransportHandshakeClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT WebTransportRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT WebTransportClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT WebTransportHandshakeClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT WebTransportResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class BLINK_PLATFORM_EXPORT WebTransportError {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<WebTransportError, T>::value>;
  using DataView = WebTransportErrorDataView;
  using Data_ = internal::WebTransportError_Data;

  template <typename... Args>
  static WebTransportErrorPtr New(Args&&... args) {
    return WebTransportErrorPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static WebTransportErrorPtr From(const U& u) {
    return mojo::TypeConverter<WebTransportErrorPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebTransportError>::Convert(*this);
  }


  WebTransportError();

  WebTransportError(
      int32_t net_error,
      int32_t quic_error,
      const WTF::String& details,
      bool safe_to_report_details);


  ~WebTransportError();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = WebTransportErrorPtr>
  WebTransportErrorPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, WebTransportError::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, WebTransportError::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        WebTransportError::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        WebTransportError::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::WebTransportError_UnserializedMessageContext<
            UserType, WebTransportError::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<WebTransportError::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return WebTransportError::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::WebTransportError_UnserializedMessageContext<
            UserType, WebTransportError::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<WebTransportError::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t net_error;
  
  int32_t quic_error;
  
  WTF::String details;
  
  bool safe_to_report_details;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, WebTransportError::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, WebTransportError::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, WebTransportError::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, WebTransportError::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT WebTransportCertificateFingerprint {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<WebTransportCertificateFingerprint, T>::value>;
  using DataView = WebTransportCertificateFingerprintDataView;
  using Data_ = internal::WebTransportCertificateFingerprint_Data;

  template <typename... Args>
  static WebTransportCertificateFingerprintPtr New(Args&&... args) {
    return WebTransportCertificateFingerprintPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static WebTransportCertificateFingerprintPtr From(const U& u) {
    return mojo::TypeConverter<WebTransportCertificateFingerprintPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebTransportCertificateFingerprint>::Convert(*this);
  }


  WebTransportCertificateFingerprint();

  WebTransportCertificateFingerprint(
      const WTF::String& algorithm,
      const WTF::String& fingerprint);


  ~WebTransportCertificateFingerprint();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = WebTransportCertificateFingerprintPtr>
  WebTransportCertificateFingerprintPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, WebTransportCertificateFingerprint::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, WebTransportCertificateFingerprint::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        WebTransportCertificateFingerprint::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        WebTransportCertificateFingerprint::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::WebTransportCertificateFingerprint_UnserializedMessageContext<
            UserType, WebTransportCertificateFingerprint::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<WebTransportCertificateFingerprint::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return WebTransportCertificateFingerprint::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::WebTransportCertificateFingerprint_UnserializedMessageContext<
            UserType, WebTransportCertificateFingerprint::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<WebTransportCertificateFingerprint::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::String algorithm;
  
  WTF::String fingerprint;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, WebTransportCertificateFingerprint::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, WebTransportCertificateFingerprint::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, WebTransportCertificateFingerprint::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, WebTransportCertificateFingerprint::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT WebTransportCloseInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<WebTransportCloseInfo, T>::value>;
  using DataView = WebTransportCloseInfoDataView;
  using Data_ = internal::WebTransportCloseInfo_Data;

  template <typename... Args>
  static WebTransportCloseInfoPtr New(Args&&... args) {
    return WebTransportCloseInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static WebTransportCloseInfoPtr From(const U& u) {
    return mojo::TypeConverter<WebTransportCloseInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebTransportCloseInfo>::Convert(*this);
  }


  WebTransportCloseInfo();

  WebTransportCloseInfo(
      uint32_t code,
      const WTF::String& reason);


  ~WebTransportCloseInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = WebTransportCloseInfoPtr>
  WebTransportCloseInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, WebTransportCloseInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, WebTransportCloseInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        WebTransportCloseInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        WebTransportCloseInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::WebTransportCloseInfo_UnserializedMessageContext<
            UserType, WebTransportCloseInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<WebTransportCloseInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return WebTransportCloseInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::WebTransportCloseInfo_UnserializedMessageContext<
            UserType, WebTransportCloseInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<WebTransportCloseInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t code;
  
  WTF::String reason;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, WebTransportCloseInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, WebTransportCloseInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, WebTransportCloseInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, WebTransportCloseInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






template <typename StructPtrType>
WebTransportErrorPtr WebTransportError::Clone() const {
  return New(
      mojo::Clone(net_error),
      mojo::Clone(quic_error),
      mojo::Clone(details),
      mojo::Clone(safe_to_report_details)
  );
}

template <typename T, WebTransportError::EnableIfSame<T>*>
bool WebTransportError::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->net_error, other_struct.net_error))
    return false;
  if (!mojo::Equals(this->quic_error, other_struct.quic_error))
    return false;
  if (!mojo::Equals(this->details, other_struct.details))
    return false;
  if (!mojo::Equals(this->safe_to_report_details, other_struct.safe_to_report_details))
    return false;
  return true;
}

template <typename T, WebTransportError::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.net_error < rhs.net_error)
    return true;
  if (rhs.net_error < lhs.net_error)
    return false;
  if (lhs.quic_error < rhs.quic_error)
    return true;
  if (rhs.quic_error < lhs.quic_error)
    return false;
  if (lhs.details < rhs.details)
    return true;
  if (rhs.details < lhs.details)
    return false;
  if (lhs.safe_to_report_details < rhs.safe_to_report_details)
    return true;
  if (rhs.safe_to_report_details < lhs.safe_to_report_details)
    return false;
  return false;
}
template <typename StructPtrType>
WebTransportCertificateFingerprintPtr WebTransportCertificateFingerprint::Clone() const {
  return New(
      mojo::Clone(algorithm),
      mojo::Clone(fingerprint)
  );
}

template <typename T, WebTransportCertificateFingerprint::EnableIfSame<T>*>
bool WebTransportCertificateFingerprint::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->algorithm, other_struct.algorithm))
    return false;
  if (!mojo::Equals(this->fingerprint, other_struct.fingerprint))
    return false;
  return true;
}

template <typename T, WebTransportCertificateFingerprint::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.algorithm < rhs.algorithm)
    return true;
  if (rhs.algorithm < lhs.algorithm)
    return false;
  if (lhs.fingerprint < rhs.fingerprint)
    return true;
  if (rhs.fingerprint < lhs.fingerprint)
    return false;
  return false;
}
template <typename StructPtrType>
WebTransportCloseInfoPtr WebTransportCloseInfo::Clone() const {
  return New(
      mojo::Clone(code),
      mojo::Clone(reason)
  );
}

template <typename T, WebTransportCloseInfo::EnableIfSame<T>*>
bool WebTransportCloseInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->code, other_struct.code))
    return false;
  if (!mojo::Equals(this->reason, other_struct.reason))
    return false;
  return true;
}

template <typename T, WebTransportCloseInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.code < rhs.code)
    return true;
  if (rhs.code < lhs.code)
    return false;
  if (lhs.reason < rhs.reason)
    return true;
  if (rhs.reason < lhs.reason)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::WebTransportError::DataView,
                                         ::network::mojom::blink::WebTransportErrorPtr> {
  static bool IsNull(const ::network::mojom::blink::WebTransportErrorPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::WebTransportErrorPtr* output) { output->reset(); }

  static decltype(::network::mojom::blink::WebTransportError::net_error) net_error(
      const ::network::mojom::blink::WebTransportErrorPtr& input) {
    return input->net_error;
  }

  static decltype(::network::mojom::blink::WebTransportError::quic_error) quic_error(
      const ::network::mojom::blink::WebTransportErrorPtr& input) {
    return input->quic_error;
  }

  static const decltype(::network::mojom::blink::WebTransportError::details)& details(
      const ::network::mojom::blink::WebTransportErrorPtr& input) {
    return input->details;
  }

  static decltype(::network::mojom::blink::WebTransportError::safe_to_report_details) safe_to_report_details(
      const ::network::mojom::blink::WebTransportErrorPtr& input) {
    return input->safe_to_report_details;
  }

  static bool Read(::network::mojom::blink::WebTransportError::DataView input, ::network::mojom::blink::WebTransportErrorPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::WebTransportCertificateFingerprint::DataView,
                                         ::network::mojom::blink::WebTransportCertificateFingerprintPtr> {
  static bool IsNull(const ::network::mojom::blink::WebTransportCertificateFingerprintPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::WebTransportCertificateFingerprintPtr* output) { output->reset(); }

  static const decltype(::network::mojom::blink::WebTransportCertificateFingerprint::algorithm)& algorithm(
      const ::network::mojom::blink::WebTransportCertificateFingerprintPtr& input) {
    return input->algorithm;
  }

  static const decltype(::network::mojom::blink::WebTransportCertificateFingerprint::fingerprint)& fingerprint(
      const ::network::mojom::blink::WebTransportCertificateFingerprintPtr& input) {
    return input->fingerprint;
  }

  static bool Read(::network::mojom::blink::WebTransportCertificateFingerprint::DataView input, ::network::mojom::blink::WebTransportCertificateFingerprintPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::WebTransportCloseInfo::DataView,
                                         ::network::mojom::blink::WebTransportCloseInfoPtr> {
  static bool IsNull(const ::network::mojom::blink::WebTransportCloseInfoPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::WebTransportCloseInfoPtr* output) { output->reset(); }

  static decltype(::network::mojom::blink::WebTransportCloseInfo::code) code(
      const ::network::mojom::blink::WebTransportCloseInfoPtr& input) {
    return input->code;
  }

  static const decltype(::network::mojom::blink::WebTransportCloseInfo::reason)& reason(
      const ::network::mojom::blink::WebTransportCloseInfoPtr& input) {
    return input->reason;
  }

  static bool Read(::network::mojom::blink::WebTransportCloseInfo::DataView input, ::network::mojom::blink::WebTransportCloseInfoPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_BLINK_H_