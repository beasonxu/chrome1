// services/network/public/mojom/network_context.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CONTEXT_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CONTEXT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  CustomProxyConnectionObserver_OnFallback_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::proxy_resolver::mojom::internal::ProxyServer_Data> bad_proxy;
  int32_t net_error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CustomProxyConnectionObserver_OnFallback_Params_Data>;

  CustomProxyConnectionObserver_OnFallback_Params_Data();
  ~CustomProxyConnectionObserver_OnFallback_Params_Data() = delete;
};
static_assert(sizeof(CustomProxyConnectionObserver_OnFallback_Params_Data) == 24,
              "Bad sizeof(CustomProxyConnectionObserver_OnFallback_Params_Data)");
class  CustomProxyConnectionObserver_OnTunnelHeadersReceived_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::proxy_resolver::mojom::internal::ProxyServer_Data> proxy_server;
  mojo::internal::Pointer<::network::mojom::internal::HttpResponseHeaders_Data> response_headers;

 private:
  friend class mojo::internal::MessageFragment<CustomProxyConnectionObserver_OnTunnelHeadersReceived_Params_Data>;

  CustomProxyConnectionObserver_OnTunnelHeadersReceived_Params_Data();
  ~CustomProxyConnectionObserver_OnTunnelHeadersReceived_Params_Data() = delete;
};
static_assert(sizeof(CustomProxyConnectionObserver_OnTunnelHeadersReceived_Params_Data) == 24,
              "Bad sizeof(CustomProxyConnectionObserver_OnTunnelHeadersReceived_Params_Data)");
class  CustomProxyConfigClient_OnCustomProxyConfigUpdated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CustomProxyConfig_Data> proxy_config;

 private:
  friend class mojo::internal::MessageFragment<CustomProxyConfigClient_OnCustomProxyConfigUpdated_Params_Data>;

  CustomProxyConfigClient_OnCustomProxyConfigUpdated_Params_Data();
  ~CustomProxyConfigClient_OnCustomProxyConfigUpdated_Params_Data() = delete;
};
static_assert(sizeof(CustomProxyConfigClient_OnCustomProxyConfigUpdated_Params_Data) == 16,
              "Bad sizeof(CustomProxyConfigClient_OnCustomProxyConfigUpdated_Params_Data)");
class  CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParams_Data>;

  CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParams_Data();
  ~CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParams_Data() = delete;
};
static_assert(sizeof(CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParams_Data) == 8,
              "Bad sizeof(CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParams_Data)");
class  CustomProxyConfigClient_MarkProxiesAsBad_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> bypass_duration;
  mojo::internal::Pointer<::network::mojom::internal::ProxyList_Data> bad_proxies;

 private:
  friend class mojo::internal::MessageFragment<CustomProxyConfigClient_MarkProxiesAsBad_Params_Data>;

  CustomProxyConfigClient_MarkProxiesAsBad_Params_Data();
  ~CustomProxyConfigClient_MarkProxiesAsBad_Params_Data() = delete;
};
static_assert(sizeof(CustomProxyConfigClient_MarkProxiesAsBad_Params_Data) == 24,
              "Bad sizeof(CustomProxyConfigClient_MarkProxiesAsBad_Params_Data)");
class  CustomProxyConfigClient_MarkProxiesAsBad_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CustomProxyConfigClient_MarkProxiesAsBad_ResponseParams_Data>;

  CustomProxyConfigClient_MarkProxiesAsBad_ResponseParams_Data();
  ~CustomProxyConfigClient_MarkProxiesAsBad_ResponseParams_Data() = delete;
};
static_assert(sizeof(CustomProxyConfigClient_MarkProxiesAsBad_ResponseParams_Data) == 8,
              "Bad sizeof(CustomProxyConfigClient_MarkProxiesAsBad_ResponseParams_Data)");
class  CustomProxyConfigClient_ClearBadProxiesCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CustomProxyConfigClient_ClearBadProxiesCache_Params_Data>;

  CustomProxyConfigClient_ClearBadProxiesCache_Params_Data();
  ~CustomProxyConfigClient_ClearBadProxiesCache_Params_Data() = delete;
};
static_assert(sizeof(CustomProxyConfigClient_ClearBadProxiesCache_Params_Data) == 8,
              "Bad sizeof(CustomProxyConfigClient_ClearBadProxiesCache_Params_Data)");
class  TrustedHeaderClient_OnBeforeSendHeaders_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::HttpRequestHeaders_Data> headers;

 private:
  friend class mojo::internal::MessageFragment<TrustedHeaderClient_OnBeforeSendHeaders_Params_Data>;

  TrustedHeaderClient_OnBeforeSendHeaders_Params_Data();
  ~TrustedHeaderClient_OnBeforeSendHeaders_Params_Data() = delete;
};
static_assert(sizeof(TrustedHeaderClient_OnBeforeSendHeaders_Params_Data) == 16,
              "Bad sizeof(TrustedHeaderClient_OnBeforeSendHeaders_Params_Data)");
class  TrustedHeaderClient_OnBeforeSendHeaders_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::network::mojom::internal::HttpRequestHeaders_Data> headers;

 private:
  friend class mojo::internal::MessageFragment<TrustedHeaderClient_OnBeforeSendHeaders_ResponseParams_Data>;

  TrustedHeaderClient_OnBeforeSendHeaders_ResponseParams_Data();
  ~TrustedHeaderClient_OnBeforeSendHeaders_ResponseParams_Data() = delete;
};
static_assert(sizeof(TrustedHeaderClient_OnBeforeSendHeaders_ResponseParams_Data) == 24,
              "Bad sizeof(TrustedHeaderClient_OnBeforeSendHeaders_ResponseParams_Data)");
class  TrustedHeaderClient_OnHeadersReceived_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> headers;
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> remote_endpoint;

 private:
  friend class mojo::internal::MessageFragment<TrustedHeaderClient_OnHeadersReceived_Params_Data>;

  TrustedHeaderClient_OnHeadersReceived_Params_Data();
  ~TrustedHeaderClient_OnHeadersReceived_Params_Data() = delete;
};
static_assert(sizeof(TrustedHeaderClient_OnHeadersReceived_Params_Data) == 24,
              "Bad sizeof(TrustedHeaderClient_OnHeadersReceived_Params_Data)");
class  TrustedHeaderClient_OnHeadersReceived_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> headers;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> preserve_fragment_on_redirect_url;

 private:
  friend class mojo::internal::MessageFragment<TrustedHeaderClient_OnHeadersReceived_ResponseParams_Data>;

  TrustedHeaderClient_OnHeadersReceived_ResponseParams_Data();
  ~TrustedHeaderClient_OnHeadersReceived_ResponseParams_Data() = delete;
};
static_assert(sizeof(TrustedHeaderClient_OnHeadersReceived_ResponseParams_Data) == 32,
              "Bad sizeof(TrustedHeaderClient_OnHeadersReceived_ResponseParams_Data)");
class  TrustedURLLoaderHeaderClient_OnLoaderCreated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t request_id;
  mojo::internal::Handle_Data header_client;

 private:
  friend class mojo::internal::MessageFragment<TrustedURLLoaderHeaderClient_OnLoaderCreated_Params_Data>;

  TrustedURLLoaderHeaderClient_OnLoaderCreated_Params_Data();
  ~TrustedURLLoaderHeaderClient_OnLoaderCreated_Params_Data() = delete;
};
static_assert(sizeof(TrustedURLLoaderHeaderClient_OnLoaderCreated_Params_Data) == 16,
              "Bad sizeof(TrustedURLLoaderHeaderClient_OnLoaderCreated_Params_Data)");
class  TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::URLRequest_Data> request;
  mojo::internal::Handle_Data header_client;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_Params_Data>;

  TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_Params_Data();
  ~TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_Params_Data() = delete;
};
static_assert(sizeof(TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_Params_Data) == 24,
              "Bad sizeof(TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_Params_Data)");
class  NetworkContextClient_OnFileUploadRequested_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t process_id;
  uint8_t async : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data>>> file_paths;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> destination_url;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnFileUploadRequested_Params_Data>;

  NetworkContextClient_OnFileUploadRequested_Params_Data();
  ~NetworkContextClient_OnFileUploadRequested_Params_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnFileUploadRequested_Params_Data) == 32,
              "Bad sizeof(NetworkContextClient_OnFileUploadRequested_Params_Data)");
class  NetworkContextClient_OnFileUploadRequested_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t net_error;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data>>> files;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnFileUploadRequested_ResponseParams_Data>;

  NetworkContextClient_OnFileUploadRequested_ResponseParams_Data();
  ~NetworkContextClient_OnFileUploadRequested_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnFileUploadRequested_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkContextClient_OnFileUploadRequested_ResponseParams_Data)");
class  NetworkContextClient_OnCanSendReportingReports_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>>> origins;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnCanSendReportingReports_Params_Data>;

  NetworkContextClient_OnCanSendReportingReports_Params_Data();
  ~NetworkContextClient_OnCanSendReportingReports_Params_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnCanSendReportingReports_Params_Data) == 16,
              "Bad sizeof(NetworkContextClient_OnCanSendReportingReports_Params_Data)");
class  NetworkContextClient_OnCanSendReportingReports_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>>> origins;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnCanSendReportingReports_ResponseParams_Data>;

  NetworkContextClient_OnCanSendReportingReports_ResponseParams_Data();
  ~NetworkContextClient_OnCanSendReportingReports_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnCanSendReportingReports_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContextClient_OnCanSendReportingReports_ResponseParams_Data)");
class  NetworkContextClient_OnCanSendDomainReliabilityUpload_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnCanSendDomainReliabilityUpload_Params_Data>;

  NetworkContextClient_OnCanSendDomainReliabilityUpload_Params_Data();
  ~NetworkContextClient_OnCanSendDomainReliabilityUpload_Params_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnCanSendDomainReliabilityUpload_Params_Data) == 16,
              "Bad sizeof(NetworkContextClient_OnCanSendDomainReliabilityUpload_Params_Data)");
class  NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t allowed : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParams_Data>;

  NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParams_Data();
  ~NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParams_Data)");
class  NetworkContextClient_OnGenerateHttpNegotiateAuthToken_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> server_auth_token;
  uint8_t can_delegate : 1;
  uint8_t pad1_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> auth_negotiate_android_account_type;
  mojo::internal::Pointer<mojo::internal::String_Data> spn;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnGenerateHttpNegotiateAuthToken_Params_Data>;

  NetworkContextClient_OnGenerateHttpNegotiateAuthToken_Params_Data();
  ~NetworkContextClient_OnGenerateHttpNegotiateAuthToken_Params_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnGenerateHttpNegotiateAuthToken_Params_Data) == 40,
              "Bad sizeof(NetworkContextClient_OnGenerateHttpNegotiateAuthToken_Params_Data)");
class  NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> auth_token;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParams_Data>;

  NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParams_Data();
  ~NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParams_Data)");
class  NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::FulfillTrustTokenIssuanceRequest_Data> request;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_Params_Data>;

  NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_Params_Data();
  ~NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_Params_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_Params_Data) == 16,
              "Bad sizeof(NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_Params_Data)");
class  NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::FulfillTrustTokenIssuanceAnswer_Data> response;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParams_Data>;

  NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParams_Data();
  ~NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParams_Data)");
class  NetworkContextClient_OnCanSendSCTAuditingReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnCanSendSCTAuditingReport_Params_Data>;

  NetworkContextClient_OnCanSendSCTAuditingReport_Params_Data();
  ~NetworkContextClient_OnCanSendSCTAuditingReport_Params_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnCanSendSCTAuditingReport_Params_Data) == 8,
              "Bad sizeof(NetworkContextClient_OnCanSendSCTAuditingReport_Params_Data)");
class  NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t allowed : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParams_Data>;

  NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParams_Data();
  ~NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParams_Data)");
class  NetworkContextClient_OnNewSCTAuditingReportSent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContextClient_OnNewSCTAuditingReportSent_Params_Data>;

  NetworkContextClient_OnNewSCTAuditingReportSent_Params_Data();
  ~NetworkContextClient_OnNewSCTAuditingReportSent_Params_Data() = delete;
};
static_assert(sizeof(NetworkContextClient_OnNewSCTAuditingReportSent_Params_Data) == 8,
              "Bad sizeof(NetworkContextClient_OnNewSCTAuditingReportSent_Params_Data)");
class  NetworkContext_SetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetClient_Params_Data>;

  NetworkContext_SetClient_Params_Data();
  ~NetworkContext_SetClient_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetClient_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetClient_Params_Data)");
class  NetworkContext_CreateURLLoaderFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data url_loader_factory;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::URLLoaderFactoryParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateURLLoaderFactory_Params_Data>;

  NetworkContext_CreateURLLoaderFactory_Params_Data();
  ~NetworkContext_CreateURLLoaderFactory_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateURLLoaderFactory_Params_Data) == 24,
              "Bad sizeof(NetworkContext_CreateURLLoaderFactory_Params_Data)");
class  NetworkContext_ResetURLLoaderFactories_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ResetURLLoaderFactories_Params_Data>;

  NetworkContext_ResetURLLoaderFactories_Params_Data();
  ~NetworkContext_ResetURLLoaderFactories_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ResetURLLoaderFactories_Params_Data) == 8,
              "Bad sizeof(NetworkContext_ResetURLLoaderFactories_Params_Data)");
class  NetworkContext_GetCookieManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data cookie_manager;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetCookieManager_Params_Data>;

  NetworkContext_GetCookieManager_Params_Data();
  ~NetworkContext_GetCookieManager_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetCookieManager_Params_Data) == 16,
              "Bad sizeof(NetworkContext_GetCookieManager_Params_Data)");
class  NetworkContext_GetRestrictedCookieManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data restricted_cookie_manager;
  int32_t role;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<::network::mojom::internal::IsolationInfo_Data> isolation_info;
  mojo::internal::Interface_Data cookie_observer;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetRestrictedCookieManager_Params_Data>;

  NetworkContext_GetRestrictedCookieManager_Params_Data();
  ~NetworkContext_GetRestrictedCookieManager_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetRestrictedCookieManager_Params_Data) == 40,
              "Bad sizeof(NetworkContext_GetRestrictedCookieManager_Params_Data)");
class  NetworkContext_GetTrustTokenQueryAnswerer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data trust_token_query_answerer;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> top_frame_origin;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetTrustTokenQueryAnswerer_Params_Data>;

  NetworkContext_GetTrustTokenQueryAnswerer_Params_Data();
  ~NetworkContext_GetTrustTokenQueryAnswerer_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetTrustTokenQueryAnswerer_Params_Data) == 24,
              "Bad sizeof(NetworkContext_GetTrustTokenQueryAnswerer_Params_Data)");
class  NetworkContext_ClearTrustTokenData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ClearDataFilter_Data> filter;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearTrustTokenData_Params_Data>;

  NetworkContext_ClearTrustTokenData_Params_Data();
  ~NetworkContext_ClearTrustTokenData_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearTrustTokenData_Params_Data) == 16,
              "Bad sizeof(NetworkContext_ClearTrustTokenData_Params_Data)");
class  NetworkContext_ClearTrustTokenData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearTrustTokenData_ResponseParams_Data>;

  NetworkContext_ClearTrustTokenData_ResponseParams_Data();
  ~NetworkContext_ClearTrustTokenData_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearTrustTokenData_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearTrustTokenData_ResponseParams_Data)");
class  NetworkContext_GetStoredTrustTokenCounts_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetStoredTrustTokenCounts_Params_Data>;

  NetworkContext_GetStoredTrustTokenCounts_Params_Data();
  ~NetworkContext_GetStoredTrustTokenCounts_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetStoredTrustTokenCounts_Params_Data) == 8,
              "Bad sizeof(NetworkContext_GetStoredTrustTokenCounts_Params_Data)");
class  NetworkContext_GetStoredTrustTokenCounts_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::StoredTrustTokensForIssuer_Data>>> tokens;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetStoredTrustTokenCounts_ResponseParams_Data>;

  NetworkContext_GetStoredTrustTokenCounts_ResponseParams_Data();
  ~NetworkContext_GetStoredTrustTokenCounts_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetStoredTrustTokenCounts_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_GetStoredTrustTokenCounts_ResponseParams_Data)");
class  NetworkContext_DeleteStoredTrustTokens_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> issuer;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_DeleteStoredTrustTokens_Params_Data>;

  NetworkContext_DeleteStoredTrustTokens_Params_Data();
  ~NetworkContext_DeleteStoredTrustTokens_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_DeleteStoredTrustTokens_Params_Data) == 16,
              "Bad sizeof(NetworkContext_DeleteStoredTrustTokens_Params_Data)");
class  NetworkContext_DeleteStoredTrustTokens_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_DeleteStoredTrustTokens_ResponseParams_Data>;

  NetworkContext_DeleteStoredTrustTokens_ResponseParams_Data();
  ~NetworkContext_DeleteStoredTrustTokens_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_DeleteStoredTrustTokens_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_DeleteStoredTrustTokens_ResponseParams_Data)");
class  NetworkContext_SetBlockTrustTokens_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t block : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetBlockTrustTokens_Params_Data>;

  NetworkContext_SetBlockTrustTokens_Params_Data();
  ~NetworkContext_SetBlockTrustTokens_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetBlockTrustTokens_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetBlockTrustTokens_Params_Data)");
class  NetworkContext_ClearNetworkingHistoryBetween_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> end_time;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearNetworkingHistoryBetween_Params_Data>;

  NetworkContext_ClearNetworkingHistoryBetween_Params_Data();
  ~NetworkContext_ClearNetworkingHistoryBetween_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearNetworkingHistoryBetween_Params_Data) == 24,
              "Bad sizeof(NetworkContext_ClearNetworkingHistoryBetween_Params_Data)");
class  NetworkContext_ClearNetworkingHistoryBetween_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearNetworkingHistoryBetween_ResponseParams_Data>;

  NetworkContext_ClearNetworkingHistoryBetween_ResponseParams_Data();
  ~NetworkContext_ClearNetworkingHistoryBetween_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearNetworkingHistoryBetween_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearNetworkingHistoryBetween_ResponseParams_Data)");
class  NetworkContext_ClearHttpCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> end_time;
  mojo::internal::Pointer<internal::ClearDataFilter_Data> filter;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearHttpCache_Params_Data>;

  NetworkContext_ClearHttpCache_Params_Data();
  ~NetworkContext_ClearHttpCache_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearHttpCache_Params_Data) == 32,
              "Bad sizeof(NetworkContext_ClearHttpCache_Params_Data)");
class  NetworkContext_ClearHttpCache_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearHttpCache_ResponseParams_Data>;

  NetworkContext_ClearHttpCache_ResponseParams_Data();
  ~NetworkContext_ClearHttpCache_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearHttpCache_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearHttpCache_ResponseParams_Data)");
class  NetworkContext_ComputeHttpCacheSize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> end_time;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ComputeHttpCacheSize_Params_Data>;

  NetworkContext_ComputeHttpCacheSize_Params_Data();
  ~NetworkContext_ComputeHttpCacheSize_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ComputeHttpCacheSize_Params_Data) == 24,
              "Bad sizeof(NetworkContext_ComputeHttpCacheSize_Params_Data)");
class  NetworkContext_ComputeHttpCacheSize_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_upper_bound : 1;
  uint8_t pad0_[7];
  int64_t size_or_error;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ComputeHttpCacheSize_ResponseParams_Data>;

  NetworkContext_ComputeHttpCacheSize_ResponseParams_Data();
  ~NetworkContext_ComputeHttpCacheSize_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ComputeHttpCacheSize_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkContext_ComputeHttpCacheSize_ResponseParams_Data)");
class  NetworkContext_NotifyExternalCacheHit_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> http_method;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> key;
  uint8_t is_subframe_document_resource : 1;
  uint8_t include_credentials : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_NotifyExternalCacheHit_Params_Data>;

  NetworkContext_NotifyExternalCacheHit_Params_Data();
  ~NetworkContext_NotifyExternalCacheHit_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_NotifyExternalCacheHit_Params_Data) == 40,
              "Bad sizeof(NetworkContext_NotifyExternalCacheHit_Params_Data)");
class  NetworkContext_ClearHostCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ClearDataFilter_Data> filter;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearHostCache_Params_Data>;

  NetworkContext_ClearHostCache_Params_Data();
  ~NetworkContext_ClearHostCache_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearHostCache_Params_Data) == 16,
              "Bad sizeof(NetworkContext_ClearHostCache_Params_Data)");
class  NetworkContext_ClearHostCache_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearHostCache_ResponseParams_Data>;

  NetworkContext_ClearHostCache_ResponseParams_Data();
  ~NetworkContext_ClearHostCache_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearHostCache_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearHostCache_ResponseParams_Data)");
class  NetworkContext_ClearHttpAuthCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> end_time;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearHttpAuthCache_Params_Data>;

  NetworkContext_ClearHttpAuthCache_Params_Data();
  ~NetworkContext_ClearHttpAuthCache_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearHttpAuthCache_Params_Data) == 24,
              "Bad sizeof(NetworkContext_ClearHttpAuthCache_Params_Data)");
class  NetworkContext_ClearHttpAuthCache_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearHttpAuthCache_ResponseParams_Data>;

  NetworkContext_ClearHttpAuthCache_ResponseParams_Data();
  ~NetworkContext_ClearHttpAuthCache_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearHttpAuthCache_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearHttpAuthCache_ResponseParams_Data)");
class  NetworkContext_ClearReportingCacheReports_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ClearDataFilter_Data> filter;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearReportingCacheReports_Params_Data>;

  NetworkContext_ClearReportingCacheReports_Params_Data();
  ~NetworkContext_ClearReportingCacheReports_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearReportingCacheReports_Params_Data) == 16,
              "Bad sizeof(NetworkContext_ClearReportingCacheReports_Params_Data)");
class  NetworkContext_ClearReportingCacheReports_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearReportingCacheReports_ResponseParams_Data>;

  NetworkContext_ClearReportingCacheReports_ResponseParams_Data();
  ~NetworkContext_ClearReportingCacheReports_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearReportingCacheReports_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearReportingCacheReports_ResponseParams_Data)");
class  NetworkContext_ClearReportingCacheClients_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ClearDataFilter_Data> filter;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearReportingCacheClients_Params_Data>;

  NetworkContext_ClearReportingCacheClients_Params_Data();
  ~NetworkContext_ClearReportingCacheClients_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearReportingCacheClients_Params_Data) == 16,
              "Bad sizeof(NetworkContext_ClearReportingCacheClients_Params_Data)");
class  NetworkContext_ClearReportingCacheClients_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearReportingCacheClients_ResponseParams_Data>;

  NetworkContext_ClearReportingCacheClients_ResponseParams_Data();
  ~NetworkContext_ClearReportingCacheClients_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearReportingCacheClients_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearReportingCacheClients_ResponseParams_Data)");
class  NetworkContext_ClearNetworkErrorLogging_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ClearDataFilter_Data> filter;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearNetworkErrorLogging_Params_Data>;

  NetworkContext_ClearNetworkErrorLogging_Params_Data();
  ~NetworkContext_ClearNetworkErrorLogging_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearNetworkErrorLogging_Params_Data) == 16,
              "Bad sizeof(NetworkContext_ClearNetworkErrorLogging_Params_Data)");
class  NetworkContext_ClearNetworkErrorLogging_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearNetworkErrorLogging_ResponseParams_Data>;

  NetworkContext_ClearNetworkErrorLogging_ResponseParams_Data();
  ~NetworkContext_ClearNetworkErrorLogging_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearNetworkErrorLogging_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearNetworkErrorLogging_ResponseParams_Data)");
class  NetworkContext_ClearDomainReliability_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ClearDataFilter_Data> filter;
  int32_t mode;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearDomainReliability_Params_Data>;

  NetworkContext_ClearDomainReliability_Params_Data();
  ~NetworkContext_ClearDomainReliability_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearDomainReliability_Params_Data) == 24,
              "Bad sizeof(NetworkContext_ClearDomainReliability_Params_Data)");
class  NetworkContext_ClearDomainReliability_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearDomainReliability_ResponseParams_Data>;

  NetworkContext_ClearDomainReliability_ResponseParams_Data();
  ~NetworkContext_ClearDomainReliability_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearDomainReliability_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearDomainReliability_ResponseParams_Data)");
class  NetworkContext_SetDocumentReportingEndpoints_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> reporting_source;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<::network::mojom::internal::IsolationInfo_Data> isolation_info;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<mojo::internal::String_Data>>> endpoints;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetDocumentReportingEndpoints_Params_Data>;

  NetworkContext_SetDocumentReportingEndpoints_Params_Data();
  ~NetworkContext_SetDocumentReportingEndpoints_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetDocumentReportingEndpoints_Params_Data) == 40,
              "Bad sizeof(NetworkContext_SetDocumentReportingEndpoints_Params_Data)");
class  NetworkContext_SendReportsAndRemoveSource_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> reporting_source;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SendReportsAndRemoveSource_Params_Data>;

  NetworkContext_SendReportsAndRemoveSource_Params_Data();
  ~NetworkContext_SendReportsAndRemoveSource_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SendReportsAndRemoveSource_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SendReportsAndRemoveSource_Params_Data)");
class  NetworkContext_QueueReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> type;
  mojo::internal::Pointer<mojo::internal::String_Data> group;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> reporting_source;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;
  mojo::internal::Pointer<mojo::internal::String_Data> user_agent;
  mojo::internal::Pointer<::mojo_base::mojom::internal::DictionaryValue_Data> body;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_QueueReport_Params_Data>;

  NetworkContext_QueueReport_Params_Data();
  ~NetworkContext_QueueReport_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_QueueReport_Params_Data) == 64,
              "Bad sizeof(NetworkContext_QueueReport_Params_Data)");
class  NetworkContext_QueueSignedExchangeReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SignedExchangeReport_Data> report;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_QueueSignedExchangeReport_Params_Data>;

  NetworkContext_QueueSignedExchangeReport_Params_Data();
  ~NetworkContext_QueueSignedExchangeReport_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_QueueSignedExchangeReport_Params_Data) == 24,
              "Bad sizeof(NetworkContext_QueueSignedExchangeReport_Params_Data)");
class  NetworkContext_CloseAllConnections_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CloseAllConnections_Params_Data>;

  NetworkContext_CloseAllConnections_Params_Data();
  ~NetworkContext_CloseAllConnections_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CloseAllConnections_Params_Data) == 8,
              "Bad sizeof(NetworkContext_CloseAllConnections_Params_Data)");
class  NetworkContext_CloseAllConnections_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CloseAllConnections_ResponseParams_Data>;

  NetworkContext_CloseAllConnections_ResponseParams_Data();
  ~NetworkContext_CloseAllConnections_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_CloseAllConnections_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_CloseAllConnections_ResponseParams_Data)");
class  NetworkContext_CloseIdleConnections_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CloseIdleConnections_Params_Data>;

  NetworkContext_CloseIdleConnections_Params_Data();
  ~NetworkContext_CloseIdleConnections_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CloseIdleConnections_Params_Data) == 8,
              "Bad sizeof(NetworkContext_CloseIdleConnections_Params_Data)");
class  NetworkContext_CloseIdleConnections_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CloseIdleConnections_ResponseParams_Data>;

  NetworkContext_CloseIdleConnections_ResponseParams_Data();
  ~NetworkContext_CloseIdleConnections_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_CloseIdleConnections_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_CloseIdleConnections_ResponseParams_Data)");
class  NetworkContext_SetNetworkConditions_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> throttling_profile_id;
  mojo::internal::Pointer<internal::NetworkConditions_Data> conditions;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetNetworkConditions_Params_Data>;

  NetworkContext_SetNetworkConditions_Params_Data();
  ~NetworkContext_SetNetworkConditions_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetNetworkConditions_Params_Data) == 24,
              "Bad sizeof(NetworkContext_SetNetworkConditions_Params_Data)");
class  NetworkContext_SetAcceptLanguage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> new_accept_language;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetAcceptLanguage_Params_Data>;

  NetworkContext_SetAcceptLanguage_Params_Data();
  ~NetworkContext_SetAcceptLanguage_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetAcceptLanguage_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetAcceptLanguage_Params_Data)");
class  NetworkContext_SetEnableReferrers_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t enable_referrers : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetEnableReferrers_Params_Data>;

  NetworkContext_SetEnableReferrers_Params_Data();
  ~NetworkContext_SetEnableReferrers_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetEnableReferrers_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetEnableReferrers_Params_Data)");
class  NetworkContext_SetCTPolicy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CTPolicy_Data> ct_policy;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetCTPolicy_Params_Data>;

  NetworkContext_SetCTPolicy_Params_Data();
  ~NetworkContext_SetCTPolicy_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetCTPolicy_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetCTPolicy_Params_Data)");
class  NetworkContext_AddExpectCT_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> host;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> expiry;
  uint8_t enforce : 1;
  uint8_t pad2_[7];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> report_uri;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddExpectCT_Params_Data>;

  NetworkContext_AddExpectCT_Params_Data();
  ~NetworkContext_AddExpectCT_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddExpectCT_Params_Data) == 48,
              "Bad sizeof(NetworkContext_AddExpectCT_Params_Data)");
class  NetworkContext_AddExpectCT_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddExpectCT_ResponseParams_Data>;

  NetworkContext_AddExpectCT_ResponseParams_Data();
  ~NetworkContext_AddExpectCT_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddExpectCT_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_AddExpectCT_ResponseParams_Data)");
class  NetworkContext_SetExpectCTTestReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> report_uri;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetExpectCTTestReport_Params_Data>;

  NetworkContext_SetExpectCTTestReport_Params_Data();
  ~NetworkContext_SetExpectCTTestReport_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetExpectCTTestReport_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetExpectCTTestReport_Params_Data)");
class  NetworkContext_SetExpectCTTestReport_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetExpectCTTestReport_ResponseParams_Data>;

  NetworkContext_SetExpectCTTestReport_ResponseParams_Data();
  ~NetworkContext_SetExpectCTTestReport_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetExpectCTTestReport_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_SetExpectCTTestReport_ResponseParams_Data)");
class  NetworkContext_GetExpectCTState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> domain;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetExpectCTState_Params_Data>;

  NetworkContext_GetExpectCTState_Params_Data();
  ~NetworkContext_GetExpectCTState_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetExpectCTState_Params_Data) == 24,
              "Bad sizeof(NetworkContext_GetExpectCTState_Params_Data)");
class  NetworkContext_GetExpectCTState_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::DictionaryValue_Data> state;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetExpectCTState_ResponseParams_Data>;

  NetworkContext_GetExpectCTState_ResponseParams_Data();
  ~NetworkContext_GetExpectCTState_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetExpectCTState_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_GetExpectCTState_ResponseParams_Data)");
class  NetworkContext_CreateUDPSocket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  mojo::internal::Interface_Data listener;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateUDPSocket_Params_Data>;

  NetworkContext_CreateUDPSocket_Params_Data();
  ~NetworkContext_CreateUDPSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateUDPSocket_Params_Data) == 24,
              "Bad sizeof(NetworkContext_CreateUDPSocket_Params_Data)");
class  NetworkContext_CreateTCPServerSocket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> local_addr;
  uint32_t backlog;
  mojo::internal::Handle_Data socket;
  mojo::internal::Pointer<::network::mojom::internal::MutableNetworkTrafficAnnotationTag_Data> traffic_annotation;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateTCPServerSocket_Params_Data>;

  NetworkContext_CreateTCPServerSocket_Params_Data();
  ~NetworkContext_CreateTCPServerSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateTCPServerSocket_Params_Data) == 32,
              "Bad sizeof(NetworkContext_CreateTCPServerSocket_Params_Data)");
class  NetworkContext_CreateTCPServerSocket_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> local_addr_out;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateTCPServerSocket_ResponseParams_Data>;

  NetworkContext_CreateTCPServerSocket_ResponseParams_Data();
  ~NetworkContext_CreateTCPServerSocket_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateTCPServerSocket_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkContext_CreateTCPServerSocket_ResponseParams_Data)");
class  NetworkContext_CreateTCPConnectedSocket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> local_addr;
  mojo::internal::Pointer<::network::mojom::internal::AddressList_Data> remote_addr_list;
  mojo::internal::Pointer<::network::mojom::internal::TCPConnectedSocketOptions_Data> tcp_connected_socket_options;
  mojo::internal::Pointer<::network::mojom::internal::MutableNetworkTrafficAnnotationTag_Data> traffic_annotation;
  mojo::internal::Handle_Data socket;
  mojo::internal::Interface_Data observer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateTCPConnectedSocket_Params_Data>;

  NetworkContext_CreateTCPConnectedSocket_Params_Data();
  ~NetworkContext_CreateTCPConnectedSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateTCPConnectedSocket_Params_Data) == 56,
              "Bad sizeof(NetworkContext_CreateTCPConnectedSocket_Params_Data)");
class  NetworkContext_CreateTCPConnectedSocket_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  mojo::internal::Handle_Data receive_stream;
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> local_addr;
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> peer_addr;
  mojo::internal::Handle_Data send_stream;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateTCPConnectedSocket_ResponseParams_Data>;

  NetworkContext_CreateTCPConnectedSocket_ResponseParams_Data();
  ~NetworkContext_CreateTCPConnectedSocket_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateTCPConnectedSocket_ResponseParams_Data) == 40,
              "Bad sizeof(NetworkContext_CreateTCPConnectedSocket_ResponseParams_Data)");
class  NetworkContext_CreateTCPBoundSocket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> local_addr;
  mojo::internal::Pointer<::network::mojom::internal::MutableNetworkTrafficAnnotationTag_Data> traffic_annotation;
  mojo::internal::Handle_Data socket;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateTCPBoundSocket_Params_Data>;

  NetworkContext_CreateTCPBoundSocket_Params_Data();
  ~NetworkContext_CreateTCPBoundSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateTCPBoundSocket_Params_Data) == 32,
              "Bad sizeof(NetworkContext_CreateTCPBoundSocket_Params_Data)");
class  NetworkContext_CreateTCPBoundSocket_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> local_addr;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateTCPBoundSocket_ResponseParams_Data>;

  NetworkContext_CreateTCPBoundSocket_ResponseParams_Data();
  ~NetworkContext_CreateTCPBoundSocket_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateTCPBoundSocket_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkContext_CreateTCPBoundSocket_ResponseParams_Data)");
class  NetworkContext_CreateProxyResolvingSocketFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data factory;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateProxyResolvingSocketFactory_Params_Data>;

  NetworkContext_CreateProxyResolvingSocketFactory_Params_Data();
  ~NetworkContext_CreateProxyResolvingSocketFactory_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateProxyResolvingSocketFactory_Params_Data) == 16,
              "Bad sizeof(NetworkContext_CreateProxyResolvingSocketFactory_Params_Data)");
class  NetworkContext_LookUpProxyForURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;
  mojo::internal::Interface_Data proxy_lookup_client;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_LookUpProxyForURL_Params_Data>;

  NetworkContext_LookUpProxyForURL_Params_Data();
  ~NetworkContext_LookUpProxyForURL_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_LookUpProxyForURL_Params_Data) == 32,
              "Bad sizeof(NetworkContext_LookUpProxyForURL_Params_Data)");
class  NetworkContext_ForceReloadProxyConfig_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ForceReloadProxyConfig_Params_Data>;

  NetworkContext_ForceReloadProxyConfig_Params_Data();
  ~NetworkContext_ForceReloadProxyConfig_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ForceReloadProxyConfig_Params_Data) == 8,
              "Bad sizeof(NetworkContext_ForceReloadProxyConfig_Params_Data)");
class  NetworkContext_ForceReloadProxyConfig_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ForceReloadProxyConfig_ResponseParams_Data>;

  NetworkContext_ForceReloadProxyConfig_ResponseParams_Data();
  ~NetworkContext_ForceReloadProxyConfig_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ForceReloadProxyConfig_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ForceReloadProxyConfig_ResponseParams_Data)");
class  NetworkContext_ClearBadProxiesCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearBadProxiesCache_Params_Data>;

  NetworkContext_ClearBadProxiesCache_Params_Data();
  ~NetworkContext_ClearBadProxiesCache_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearBadProxiesCache_Params_Data) == 8,
              "Bad sizeof(NetworkContext_ClearBadProxiesCache_Params_Data)");
class  NetworkContext_ClearBadProxiesCache_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ClearBadProxiesCache_ResponseParams_Data>;

  NetworkContext_ClearBadProxiesCache_ResponseParams_Data();
  ~NetworkContext_ClearBadProxiesCache_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ClearBadProxiesCache_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ClearBadProxiesCache_ResponseParams_Data)");
class  NetworkContext_CreateWebSocket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> requested_protocols;
  mojo::internal::Pointer<::network::mojom::internal::SiteForCookies_Data> site_for_cookies;
  mojo::internal::Pointer<::network::mojom::internal::IsolationInfo_Data> isolation_info;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::HttpHeader_Data>>> additional_headers;
  int32_t process_id;
  uint32_t options;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<::network::mojom::internal::MutableNetworkTrafficAnnotationTag_Data> traffic_annotation;
  mojo::internal::Interface_Data handshake_client;
  mojo::internal::Interface_Data url_loader_network_observer;
  mojo::internal::Interface_Data auth_handler;
  mojo::internal::Interface_Data header_client;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> throttling_profile_id;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateWebSocket_Params_Data>;

  NetworkContext_CreateWebSocket_Params_Data();
  ~NetworkContext_CreateWebSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateWebSocket_Params_Data) == 112,
              "Bad sizeof(NetworkContext_CreateWebSocket_Params_Data)");
class  NetworkContext_CreateWebTransport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::WebTransportCertificateFingerprint_Data>>> fingerprints;
  mojo::internal::Interface_Data handshake_client;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateWebTransport_Params_Data>;

  NetworkContext_CreateWebTransport_Params_Data();
  ~NetworkContext_CreateWebTransport_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateWebTransport_Params_Data) == 48,
              "Bad sizeof(NetworkContext_CreateWebTransport_Params_Data)");
class  NetworkContext_CreateNetLogExporter_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateNetLogExporter_Params_Data>;

  NetworkContext_CreateNetLogExporter_Params_Data();
  ~NetworkContext_CreateNetLogExporter_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateNetLogExporter_Params_Data) == 16,
              "Bad sizeof(NetworkContext_CreateNetLogExporter_Params_Data)");
class  NetworkContext_PreconnectSockets_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t num_streams;
  uint8_t allow_credentials : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_PreconnectSockets_Params_Data>;

  NetworkContext_PreconnectSockets_Params_Data();
  ~NetworkContext_PreconnectSockets_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_PreconnectSockets_Params_Data) == 32,
              "Bad sizeof(NetworkContext_PreconnectSockets_Params_Data)");
class  NetworkContext_CreateP2PSocketManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;
  mojo::internal::Interface_Data client;
  mojo::internal::Handle_Data trusted_socket_manager;
  mojo::internal::Handle_Data socket_manager;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateP2PSocketManager_Params_Data>;

  NetworkContext_CreateP2PSocketManager_Params_Data();
  ~NetworkContext_CreateP2PSocketManager_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateP2PSocketManager_Params_Data) == 32,
              "Bad sizeof(NetworkContext_CreateP2PSocketManager_Params_Data)");
class  NetworkContext_CreateMdnsResponder_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data responder_receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateMdnsResponder_Params_Data>;

  NetworkContext_CreateMdnsResponder_Params_Data();
  ~NetworkContext_CreateMdnsResponder_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateMdnsResponder_Params_Data) == 16,
              "Bad sizeof(NetworkContext_CreateMdnsResponder_Params_Data)");
class  NetworkContext_ResolveHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::HostPortPair_Data> host;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;
  mojo::internal::Pointer<::network::mojom::internal::ResolveHostParameters_Data> optional_parameters;
  mojo::internal::Interface_Data response_client;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ResolveHost_Params_Data>;

  NetworkContext_ResolveHost_Params_Data();
  ~NetworkContext_ResolveHost_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ResolveHost_Params_Data) == 40,
              "Bad sizeof(NetworkContext_ResolveHost_Params_Data)");
class  NetworkContext_CreateHostResolver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::DnsConfigOverrides_Data> config_overrides;
  mojo::internal::Handle_Data host_resolver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_CreateHostResolver_Params_Data>;

  NetworkContext_CreateHostResolver_Params_Data();
  ~NetworkContext_CreateHostResolver_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_CreateHostResolver_Params_Data) == 24,
              "Bad sizeof(NetworkContext_CreateHostResolver_Params_Data)");
class  NetworkContext_VerifyCertForSignedExchange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::X509Certificate_Data> certificate;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;
  mojo::internal::Pointer<mojo::internal::String_Data> ocsp_response;
  mojo::internal::Pointer<mojo::internal::String_Data> sct_list;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_VerifyCertForSignedExchange_Params_Data>;

  NetworkContext_VerifyCertForSignedExchange_Params_Data();
  ~NetworkContext_VerifyCertForSignedExchange_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_VerifyCertForSignedExchange_Params_Data) == 48,
              "Bad sizeof(NetworkContext_VerifyCertForSignedExchange_Params_Data)");
class  NetworkContext_VerifyCertForSignedExchange_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error_code;
  uint8_t pkp_bypassed : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<::network::mojom::internal::CertVerifyResult_Data> cv_result;
  mojo::internal::Pointer<mojo::internal::String_Data> pinning_failure_log;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_VerifyCertForSignedExchange_ResponseParams_Data>;

  NetworkContext_VerifyCertForSignedExchange_ResponseParams_Data();
  ~NetworkContext_VerifyCertForSignedExchange_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_VerifyCertForSignedExchange_ResponseParams_Data) == 32,
              "Bad sizeof(NetworkContext_VerifyCertForSignedExchange_ResponseParams_Data)");
class  NetworkContext_AddHSTS_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> host;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> expiry;
  uint8_t include_subdomains : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddHSTS_Params_Data>;

  NetworkContext_AddHSTS_Params_Data();
  ~NetworkContext_AddHSTS_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddHSTS_Params_Data) == 32,
              "Bad sizeof(NetworkContext_AddHSTS_Params_Data)");
class  NetworkContext_AddHSTS_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddHSTS_ResponseParams_Data>;

  NetworkContext_AddHSTS_ResponseParams_Data();
  ~NetworkContext_AddHSTS_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddHSTS_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_AddHSTS_ResponseParams_Data)");
class  NetworkContext_IsHSTSActiveForHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> host;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_IsHSTSActiveForHost_Params_Data>;

  NetworkContext_IsHSTSActiveForHost_Params_Data();
  ~NetworkContext_IsHSTSActiveForHost_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_IsHSTSActiveForHost_Params_Data) == 16,
              "Bad sizeof(NetworkContext_IsHSTSActiveForHost_Params_Data)");
class  NetworkContext_IsHSTSActiveForHost_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_IsHSTSActiveForHost_ResponseParams_Data>;

  NetworkContext_IsHSTSActiveForHost_ResponseParams_Data();
  ~NetworkContext_IsHSTSActiveForHost_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_IsHSTSActiveForHost_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_IsHSTSActiveForHost_ResponseParams_Data)");
class  NetworkContext_GetHSTSState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> domain;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetHSTSState_Params_Data>;

  NetworkContext_GetHSTSState_Params_Data();
  ~NetworkContext_GetHSTSState_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetHSTSState_Params_Data) == 16,
              "Bad sizeof(NetworkContext_GetHSTSState_Params_Data)");
class  NetworkContext_GetHSTSState_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::DictionaryValue_Data> state;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_GetHSTSState_ResponseParams_Data>;

  NetworkContext_GetHSTSState_ResponseParams_Data();
  ~NetworkContext_GetHSTSState_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_GetHSTSState_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_GetHSTSState_ResponseParams_Data)");
class  NetworkContext_SetCorsOriginAccessListsForOrigin_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> source_origin;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::CorsOriginPattern_Data>>> allow_patterns;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::CorsOriginPattern_Data>>> block_patterns;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetCorsOriginAccessListsForOrigin_Params_Data>;

  NetworkContext_SetCorsOriginAccessListsForOrigin_Params_Data();
  ~NetworkContext_SetCorsOriginAccessListsForOrigin_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetCorsOriginAccessListsForOrigin_Params_Data) == 32,
              "Bad sizeof(NetworkContext_SetCorsOriginAccessListsForOrigin_Params_Data)");
class  NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParams_Data>;

  NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParams_Data();
  ~NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParams_Data)");
class  NetworkContext_DeleteDynamicDataForHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> host;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_DeleteDynamicDataForHost_Params_Data>;

  NetworkContext_DeleteDynamicDataForHost_Params_Data();
  ~NetworkContext_DeleteDynamicDataForHost_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_DeleteDynamicDataForHost_Params_Data) == 16,
              "Bad sizeof(NetworkContext_DeleteDynamicDataForHost_Params_Data)");
class  NetworkContext_DeleteDynamicDataForHost_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_DeleteDynamicDataForHost_ResponseParams_Data>;

  NetworkContext_DeleteDynamicDataForHost_ResponseParams_Data();
  ~NetworkContext_DeleteDynamicDataForHost_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_DeleteDynamicDataForHost_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_DeleteDynamicDataForHost_ResponseParams_Data)");
class  NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t split_auth_cache_by_network_isolation_key : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_Params_Data>;

  NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_Params_Data();
  ~NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_Params_Data)");
class  NetworkContext_SaveHttpAuthCacheProxyEntries_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SaveHttpAuthCacheProxyEntries_Params_Data>;

  NetworkContext_SaveHttpAuthCacheProxyEntries_Params_Data();
  ~NetworkContext_SaveHttpAuthCacheProxyEntries_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SaveHttpAuthCacheProxyEntries_Params_Data) == 8,
              "Bad sizeof(NetworkContext_SaveHttpAuthCacheProxyEntries_Params_Data)");
class  NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> cache_key;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParams_Data>;

  NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParams_Data();
  ~NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParams_Data)");
class  NetworkContext_LoadHttpAuthCacheProxyEntries_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> cache_key;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_LoadHttpAuthCacheProxyEntries_Params_Data>;

  NetworkContext_LoadHttpAuthCacheProxyEntries_Params_Data();
  ~NetworkContext_LoadHttpAuthCacheProxyEntries_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_LoadHttpAuthCacheProxyEntries_Params_Data) == 16,
              "Bad sizeof(NetworkContext_LoadHttpAuthCacheProxyEntries_Params_Data)");
class  NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParams_Data>;

  NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParams_Data();
  ~NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParams_Data)");
class  NetworkContext_AddAuthCacheEntry_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::AuthChallengeInfo_Data> challenge;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;
  mojo::internal::Pointer<::network::mojom::internal::AuthCredentials_Data> credentials;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddAuthCacheEntry_Params_Data>;

  NetworkContext_AddAuthCacheEntry_Params_Data();
  ~NetworkContext_AddAuthCacheEntry_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddAuthCacheEntry_Params_Data) == 32,
              "Bad sizeof(NetworkContext_AddAuthCacheEntry_Params_Data)");
class  NetworkContext_AddAuthCacheEntry_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddAuthCacheEntry_ResponseParams_Data>;

  NetworkContext_AddAuthCacheEntry_ResponseParams_Data();
  ~NetworkContext_AddAuthCacheEntry_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddAuthCacheEntry_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_AddAuthCacheEntry_ResponseParams_Data)");
class  NetworkContext_SetCorsNonWildcardRequestHeadersSupport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t value : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetCorsNonWildcardRequestHeadersSupport_Params_Data>;

  NetworkContext_SetCorsNonWildcardRequestHeadersSupport_Params_Data();
  ~NetworkContext_SetCorsNonWildcardRequestHeadersSupport_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetCorsNonWildcardRequestHeadersSupport_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetCorsNonWildcardRequestHeadersSupport_Params_Data)");
class  NetworkContext_LookupServerBasicAuthCredentials_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::network::mojom::internal::NetworkIsolationKey_Data> network_isolation_key;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_LookupServerBasicAuthCredentials_Params_Data>;

  NetworkContext_LookupServerBasicAuthCredentials_Params_Data();
  ~NetworkContext_LookupServerBasicAuthCredentials_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_LookupServerBasicAuthCredentials_Params_Data) == 24,
              "Bad sizeof(NetworkContext_LookupServerBasicAuthCredentials_Params_Data)");
class  NetworkContext_LookupServerBasicAuthCredentials_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::AuthCredentials_Data> credentials;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_LookupServerBasicAuthCredentials_ResponseParams_Data>;

  NetworkContext_LookupServerBasicAuthCredentials_ResponseParams_Data();
  ~NetworkContext_LookupServerBasicAuthCredentials_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_LookupServerBasicAuthCredentials_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_LookupServerBasicAuthCredentials_ResponseParams_Data)");
class  NetworkContext_EnableStaticKeyPinningForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_EnableStaticKeyPinningForTesting_Params_Data>;

  NetworkContext_EnableStaticKeyPinningForTesting_Params_Data();
  ~NetworkContext_EnableStaticKeyPinningForTesting_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_EnableStaticKeyPinningForTesting_Params_Data) == 8,
              "Bad sizeof(NetworkContext_EnableStaticKeyPinningForTesting_Params_Data)");
class  NetworkContext_EnableStaticKeyPinningForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_EnableStaticKeyPinningForTesting_ResponseParams_Data>;

  NetworkContext_EnableStaticKeyPinningForTesting_ResponseParams_Data();
  ~NetworkContext_EnableStaticKeyPinningForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_EnableStaticKeyPinningForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_EnableStaticKeyPinningForTesting_ResponseParams_Data)");
class  NetworkContext_VerifyCertificateForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::X509Certificate_Data> certificate;
  mojo::internal::Pointer<mojo::internal::String_Data> hostname;
  mojo::internal::Pointer<mojo::internal::String_Data> ocsp_response;
  mojo::internal::Pointer<mojo::internal::String_Data> sct_list;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_VerifyCertificateForTesting_Params_Data>;

  NetworkContext_VerifyCertificateForTesting_Params_Data();
  ~NetworkContext_VerifyCertificateForTesting_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_VerifyCertificateForTesting_Params_Data) == 40,
              "Bad sizeof(NetworkContext_VerifyCertificateForTesting_Params_Data)");
class  NetworkContext_VerifyCertificateForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error_code;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_VerifyCertificateForTesting_ResponseParams_Data>;

  NetworkContext_VerifyCertificateForTesting_ResponseParams_Data();
  ~NetworkContext_VerifyCertificateForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_VerifyCertificateForTesting_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkContext_VerifyCertificateForTesting_ResponseParams_Data)");
class  NetworkContext_AddDomainReliabilityContextForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> upload_url;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddDomainReliabilityContextForTesting_Params_Data>;

  NetworkContext_AddDomainReliabilityContextForTesting_Params_Data();
  ~NetworkContext_AddDomainReliabilityContextForTesting_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddDomainReliabilityContextForTesting_Params_Data) == 24,
              "Bad sizeof(NetworkContext_AddDomainReliabilityContextForTesting_Params_Data)");
class  NetworkContext_AddDomainReliabilityContextForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddDomainReliabilityContextForTesting_ResponseParams_Data>;

  NetworkContext_AddDomainReliabilityContextForTesting_ResponseParams_Data();
  ~NetworkContext_AddDomainReliabilityContextForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddDomainReliabilityContextForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_AddDomainReliabilityContextForTesting_ResponseParams_Data)");
class  NetworkContext_ForceDomainReliabilityUploadsForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ForceDomainReliabilityUploadsForTesting_Params_Data>;

  NetworkContext_ForceDomainReliabilityUploadsForTesting_Params_Data();
  ~NetworkContext_ForceDomainReliabilityUploadsForTesting_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_ForceDomainReliabilityUploadsForTesting_Params_Data) == 8,
              "Bad sizeof(NetworkContext_ForceDomainReliabilityUploadsForTesting_Params_Data)");
class  NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParams_Data>;

  NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParams_Data();
  ~NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParams_Data)");
class  NetworkContext_SetCTLogListAlwaysTimelyForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetCTLogListAlwaysTimelyForTesting_Params_Data>;

  NetworkContext_SetCTLogListAlwaysTimelyForTesting_Params_Data();
  ~NetworkContext_SetCTLogListAlwaysTimelyForTesting_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetCTLogListAlwaysTimelyForTesting_Params_Data) == 8,
              "Bad sizeof(NetworkContext_SetCTLogListAlwaysTimelyForTesting_Params_Data)");
class  NetworkContext_SetSCTAuditingMode_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t mode;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_SetSCTAuditingMode_Params_Data>;

  NetworkContext_SetSCTAuditingMode_Params_Data();
  ~NetworkContext_SetSCTAuditingMode_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_SetSCTAuditingMode_Params_Data) == 16,
              "Bad sizeof(NetworkContext_SetSCTAuditingMode_Params_Data)");
class  NetworkContext_AddReportingApiObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;

 private:
  friend class mojo::internal::MessageFragment<NetworkContext_AddReportingApiObserver_Params_Data>;

  NetworkContext_AddReportingApiObserver_Params_Data();
  ~NetworkContext_AddReportingApiObserver_Params_Data() = delete;
};
static_assert(sizeof(NetworkContext_AddReportingApiObserver_Params_Data) == 16,
              "Bad sizeof(NetworkContext_AddReportingApiObserver_Params_Data)");

}  // namespace internal


class CustomProxyConnectionObserver_OnFallback_ParamsDataView {
 public:
  CustomProxyConnectionObserver_OnFallback_ParamsDataView() = default;

  CustomProxyConnectionObserver_OnFallback_ParamsDataView(
      internal::CustomProxyConnectionObserver_OnFallback_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBadProxyDataView(
      ::proxy_resolver::mojom::ProxyServerDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBadProxy(UserType* output) {
    
    auto* pointer = data_->bad_proxy.Get();
    return mojo::internal::Deserialize<::proxy_resolver::mojom::ProxyServerDataView>(
        pointer, output, message_);
  }
  int32_t net_error() const {
    return data_->net_error;
  }
 private:
  internal::CustomProxyConnectionObserver_OnFallback_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CustomProxyConnectionObserver_OnTunnelHeadersReceived_ParamsDataView {
 public:
  CustomProxyConnectionObserver_OnTunnelHeadersReceived_ParamsDataView() = default;

  CustomProxyConnectionObserver_OnTunnelHeadersReceived_ParamsDataView(
      internal::CustomProxyConnectionObserver_OnTunnelHeadersReceived_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetProxyServerDataView(
      ::proxy_resolver::mojom::ProxyServerDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProxyServer(UserType* output) {
    
    auto* pointer = data_->proxy_server.Get();
    return mojo::internal::Deserialize<::proxy_resolver::mojom::ProxyServerDataView>(
        pointer, output, message_);
  }
  inline void GetResponseHeadersDataView(
      ::network::mojom::HttpResponseHeadersDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponseHeaders(UserType* output) {
    
    auto* pointer = data_->response_headers.Get();
    return mojo::internal::Deserialize<::network::mojom::HttpResponseHeadersDataView>(
        pointer, output, message_);
  }
 private:
  internal::CustomProxyConnectionObserver_OnTunnelHeadersReceived_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CustomProxyConfigClient_OnCustomProxyConfigUpdated_ParamsDataView {
 public:
  CustomProxyConfigClient_OnCustomProxyConfigUpdated_ParamsDataView() = default;

  CustomProxyConfigClient_OnCustomProxyConfigUpdated_ParamsDataView(
      internal::CustomProxyConfigClient_OnCustomProxyConfigUpdated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetProxyConfigDataView(
      CustomProxyConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProxyConfig(UserType* output) {
    
    auto* pointer = data_->proxy_config.Get();
    return mojo::internal::Deserialize<::network::mojom::CustomProxyConfigDataView>(
        pointer, output, message_);
  }
 private:
  internal::CustomProxyConfigClient_OnCustomProxyConfigUpdated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParamsDataView {
 public:
  CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParamsDataView() = default;

  CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParamsDataView(
      internal::CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CustomProxyConfigClient_OnCustomProxyConfigUpdated_ResponseParams_Data* data_ = nullptr;
};



class CustomProxyConfigClient_MarkProxiesAsBad_ParamsDataView {
 public:
  CustomProxyConfigClient_MarkProxiesAsBad_ParamsDataView() = default;

  CustomProxyConfigClient_MarkProxiesAsBad_ParamsDataView(
      internal::CustomProxyConfigClient_MarkProxiesAsBad_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBypassDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBypassDuration(UserType* output) {
    
    auto* pointer = data_->bypass_duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
  inline void GetBadProxiesDataView(
      ::network::mojom::ProxyListDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBadProxies(UserType* output) {
    
    auto* pointer = data_->bad_proxies.Get();
    return mojo::internal::Deserialize<::network::mojom::ProxyListDataView>(
        pointer, output, message_);
  }
 private:
  internal::CustomProxyConfigClient_MarkProxiesAsBad_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CustomProxyConfigClient_MarkProxiesAsBad_ResponseParamsDataView {
 public:
  CustomProxyConfigClient_MarkProxiesAsBad_ResponseParamsDataView() = default;

  CustomProxyConfigClient_MarkProxiesAsBad_ResponseParamsDataView(
      internal::CustomProxyConfigClient_MarkProxiesAsBad_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CustomProxyConfigClient_MarkProxiesAsBad_ResponseParams_Data* data_ = nullptr;
};



class CustomProxyConfigClient_ClearBadProxiesCache_ParamsDataView {
 public:
  CustomProxyConfigClient_ClearBadProxiesCache_ParamsDataView() = default;

  CustomProxyConfigClient_ClearBadProxiesCache_ParamsDataView(
      internal::CustomProxyConfigClient_ClearBadProxiesCache_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CustomProxyConfigClient_ClearBadProxiesCache_Params_Data* data_ = nullptr;
};



class TrustedHeaderClient_OnBeforeSendHeaders_ParamsDataView {
 public:
  TrustedHeaderClient_OnBeforeSendHeaders_ParamsDataView() = default;

  TrustedHeaderClient_OnBeforeSendHeaders_ParamsDataView(
      internal::TrustedHeaderClient_OnBeforeSendHeaders_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHeadersDataView(
      ::network::mojom::HttpRequestHeadersDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHeaders(UserType* output) {
    
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<::network::mojom::HttpRequestHeadersDataView>(
        pointer, output, message_);
  }
 private:
  internal::TrustedHeaderClient_OnBeforeSendHeaders_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TrustedHeaderClient_OnBeforeSendHeaders_ResponseParamsDataView {
 public:
  TrustedHeaderClient_OnBeforeSendHeaders_ResponseParamsDataView() = default;

  TrustedHeaderClient_OnBeforeSendHeaders_ResponseParamsDataView(
      internal::TrustedHeaderClient_OnBeforeSendHeaders_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
  inline void GetHeadersDataView(
      ::network::mojom::HttpRequestHeadersDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHeaders(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::HttpRequestHeadersDataView, UserType>(),
    "Attempting to read the optional `headers` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadHeaders` instead "
    "of `ReadHeaders if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<::network::mojom::HttpRequestHeadersDataView>(
        pointer, output, message_);
  }
 private:
  internal::TrustedHeaderClient_OnBeforeSendHeaders_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TrustedHeaderClient_OnHeadersReceived_ParamsDataView {
 public:
  TrustedHeaderClient_OnHeadersReceived_ParamsDataView() = default;

  TrustedHeaderClient_OnHeadersReceived_ParamsDataView(
      internal::TrustedHeaderClient_OnHeadersReceived_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHeadersDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHeaders(UserType* output) {
    
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetRemoteEndpointDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteEndpoint(UserType* output) {
    
    auto* pointer = data_->remote_endpoint.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
 private:
  internal::TrustedHeaderClient_OnHeadersReceived_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TrustedHeaderClient_OnHeadersReceived_ResponseParamsDataView {
 public:
  TrustedHeaderClient_OnHeadersReceived_ResponseParamsDataView() = default;

  TrustedHeaderClient_OnHeadersReceived_ResponseParamsDataView(
      internal::TrustedHeaderClient_OnHeadersReceived_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
  inline void GetHeadersDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHeaders(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `headers` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadHeaders` instead "
    "of `ReadHeaders if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPreserveFragmentOnRedirectUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPreserveFragmentOnRedirectUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `preserve_fragment_on_redirect_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPreserveFragmentOnRedirectUrl` instead "
    "of `ReadPreserveFragmentOnRedirectUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->preserve_fragment_on_redirect_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::TrustedHeaderClient_OnHeadersReceived_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TrustedURLLoaderHeaderClient_OnLoaderCreated_ParamsDataView {
 public:
  TrustedURLLoaderHeaderClient_OnLoaderCreated_ParamsDataView() = default;

  TrustedURLLoaderHeaderClient_OnLoaderCreated_ParamsDataView(
      internal::TrustedURLLoaderHeaderClient_OnLoaderCreated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t request_id() const {
    return data_->request_id;
  }
  template <typename UserType>
  UserType TakeHeaderClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::TrustedHeaderClientInterfaceBase>>(
            &data_->header_client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::TrustedURLLoaderHeaderClient_OnLoaderCreated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_ParamsDataView {
 public:
  TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_ParamsDataView() = default;

  TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_ParamsDataView(
      internal::TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      ::network::mojom::URLRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::network::mojom::URLRequestDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeHeaderClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::TrustedHeaderClientInterfaceBase>>(
            &data_->header_client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnFileUploadRequested_ParamsDataView {
 public:
  NetworkContextClient_OnFileUploadRequested_ParamsDataView() = default;

  NetworkContextClient_OnFileUploadRequested_ParamsDataView(
      internal::NetworkContextClient_OnFileUploadRequested_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t process_id() const {
    return data_->process_id;
  }
  bool async() const {
    return data_->async;
  }
  inline void GetFilePathsDataView(
      mojo::ArrayDataView<::mojo_base::mojom::FilePathDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFilePaths(UserType* output) {
    
    auto* pointer = data_->file_paths.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::FilePathDataView>>(
        pointer, output, message_);
  }
  inline void GetDestinationUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDestinationUrl(UserType* output) {
    
    auto* pointer = data_->destination_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnFileUploadRequested_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnFileUploadRequested_ResponseParamsDataView {
 public:
  NetworkContextClient_OnFileUploadRequested_ResponseParamsDataView() = default;

  NetworkContextClient_OnFileUploadRequested_ResponseParamsDataView(
      internal::NetworkContextClient_OnFileUploadRequested_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t net_error() const {
    return data_->net_error;
  }
  inline void GetFilesDataView(
      mojo::ArrayDataView<::mojo_base::mojom::ReadOnlyFileDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFiles(UserType* output) {
    
    auto* pointer = data_->files.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::ReadOnlyFileDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnFileUploadRequested_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnCanSendReportingReports_ParamsDataView {
 public:
  NetworkContextClient_OnCanSendReportingReports_ParamsDataView() = default;

  NetworkContextClient_OnCanSendReportingReports_ParamsDataView(
      internal::NetworkContextClient_OnCanSendReportingReports_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginsDataView(
      mojo::ArrayDataView<::url::mojom::OriginDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigins(UserType* output) {
    
    auto* pointer = data_->origins.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::OriginDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnCanSendReportingReports_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnCanSendReportingReports_ResponseParamsDataView {
 public:
  NetworkContextClient_OnCanSendReportingReports_ResponseParamsDataView() = default;

  NetworkContextClient_OnCanSendReportingReports_ResponseParamsDataView(
      internal::NetworkContextClient_OnCanSendReportingReports_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginsDataView(
      mojo::ArrayDataView<::url::mojom::OriginDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigins(UserType* output) {
    
    auto* pointer = data_->origins.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::OriginDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnCanSendReportingReports_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnCanSendDomainReliabilityUpload_ParamsDataView {
 public:
  NetworkContextClient_OnCanSendDomainReliabilityUpload_ParamsDataView() = default;

  NetworkContextClient_OnCanSendDomainReliabilityUpload_ParamsDataView(
      internal::NetworkContextClient_OnCanSendDomainReliabilityUpload_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnCanSendDomainReliabilityUpload_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParamsDataView {
 public:
  NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParamsDataView() = default;

  NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParamsDataView(
      internal::NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool allowed() const {
    return data_->allowed;
  }
 private:
  internal::NetworkContextClient_OnCanSendDomainReliabilityUpload_ResponseParams_Data* data_ = nullptr;
};



class NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ParamsDataView {
 public:
  NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ParamsDataView() = default;

  NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ParamsDataView(
      internal::NetworkContextClient_OnGenerateHttpNegotiateAuthToken_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetServerAuthTokenDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServerAuthToken(UserType* output) {
    
    auto* pointer = data_->server_auth_token.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool can_delegate() const {
    return data_->can_delegate;
  }
  inline void GetAuthNegotiateAndroidAccountTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAuthNegotiateAndroidAccountType(UserType* output) {
    
    auto* pointer = data_->auth_negotiate_android_account_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSpnDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSpn(UserType* output) {
    
    auto* pointer = data_->spn.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnGenerateHttpNegotiateAuthToken_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParamsDataView {
 public:
  NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParamsDataView() = default;

  NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParamsDataView(
      internal::NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
  inline void GetAuthTokenDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAuthToken(UserType* output) {
    
    auto* pointer = data_->auth_token.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ParamsDataView {
 public:
  NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ParamsDataView() = default;

  NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ParamsDataView(
      internal::NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      ::network::mojom::FulfillTrustTokenIssuanceRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::network::mojom::FulfillTrustTokenIssuanceRequestDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParamsDataView {
 public:
  NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParamsDataView() = default;

  NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParamsDataView(
      internal::NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResponseDataView(
      ::network::mojom::FulfillTrustTokenIssuanceAnswerDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponse(UserType* output) {
    
    auto* pointer = data_->response.Get();
    return mojo::internal::Deserialize<::network::mojom::FulfillTrustTokenIssuanceAnswerDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContextClient_OnCanSendSCTAuditingReport_ParamsDataView {
 public:
  NetworkContextClient_OnCanSendSCTAuditingReport_ParamsDataView() = default;

  NetworkContextClient_OnCanSendSCTAuditingReport_ParamsDataView(
      internal::NetworkContextClient_OnCanSendSCTAuditingReport_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContextClient_OnCanSendSCTAuditingReport_Params_Data* data_ = nullptr;
};



class NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParamsDataView {
 public:
  NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParamsDataView() = default;

  NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParamsDataView(
      internal::NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool allowed() const {
    return data_->allowed;
  }
 private:
  internal::NetworkContextClient_OnCanSendSCTAuditingReport_ResponseParams_Data* data_ = nullptr;
};



class NetworkContextClient_OnNewSCTAuditingReportSent_ParamsDataView {
 public:
  NetworkContextClient_OnNewSCTAuditingReportSent_ParamsDataView() = default;

  NetworkContextClient_OnNewSCTAuditingReportSent_ParamsDataView(
      internal::NetworkContextClient_OnNewSCTAuditingReportSent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContextClient_OnNewSCTAuditingReportSent_Params_Data* data_ = nullptr;
};



class NetworkContext_SetClient_ParamsDataView {
 public:
  NetworkContext_SetClient_ParamsDataView() = default;

  NetworkContext_SetClient_ParamsDataView(
      internal::NetworkContext_SetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::NetworkContextClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_SetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateURLLoaderFactory_ParamsDataView {
 public:
  NetworkContext_CreateURLLoaderFactory_ParamsDataView() = default;

  NetworkContext_CreateURLLoaderFactory_ParamsDataView(
      internal::NetworkContext_CreateURLLoaderFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeUrlLoaderFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
            &data_->url_loader_factory, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetParamsDataView(
      URLLoaderFactoryParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::network::mojom::URLLoaderFactoryParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_CreateURLLoaderFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ResetURLLoaderFactories_ParamsDataView {
 public:
  NetworkContext_ResetURLLoaderFactories_ParamsDataView() = default;

  NetworkContext_ResetURLLoaderFactories_ParamsDataView(
      internal::NetworkContext_ResetURLLoaderFactories_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ResetURLLoaderFactories_Params_Data* data_ = nullptr;
};



class NetworkContext_GetCookieManager_ParamsDataView {
 public:
  NetworkContext_GetCookieManager_ParamsDataView() = default;

  NetworkContext_GetCookieManager_ParamsDataView(
      internal::NetworkContext_GetCookieManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeCookieManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::CookieManagerInterfaceBase>>(
            &data_->cookie_manager, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_GetCookieManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_GetRestrictedCookieManager_ParamsDataView {
 public:
  NetworkContext_GetRestrictedCookieManager_ParamsDataView() = default;

  NetworkContext_GetRestrictedCookieManager_ParamsDataView(
      internal::NetworkContext_GetRestrictedCookieManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeRestrictedCookieManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::RestrictedCookieManagerInterfaceBase>>(
            &data_->restricted_cookie_manager, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadRole(UserType* output) const {
    auto data_value = data_->role;
    return mojo::internal::Deserialize<::network::mojom::RestrictedCookieManagerRole>(
        data_value, output);
  }
  ::network::mojom::RestrictedCookieManagerRole role() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::RestrictedCookieManagerRole>(data_->role));
  }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetIsolationInfoDataView(
      ::network::mojom::IsolationInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIsolationInfo(UserType* output) {
    
    auto* pointer = data_->isolation_info.Get();
    return mojo::internal::Deserialize<::network::mojom::IsolationInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeCookieObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::CookieAccessObserverInterfaceBase>>(
            &data_->cookie_observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_GetRestrictedCookieManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_GetTrustTokenQueryAnswerer_ParamsDataView {
 public:
  NetworkContext_GetTrustTokenQueryAnswerer_ParamsDataView() = default;

  NetworkContext_GetTrustTokenQueryAnswerer_ParamsDataView(
      internal::NetworkContext_GetTrustTokenQueryAnswerer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeTrustTokenQueryAnswerer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::TrustTokenQueryAnswererInterfaceBase>>(
            &data_->trust_token_query_answerer, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetTopFrameOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTopFrameOrigin(UserType* output) {
    
    auto* pointer = data_->top_frame_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_GetTrustTokenQueryAnswerer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearTrustTokenData_ParamsDataView {
 public:
  NetworkContext_ClearTrustTokenData_ParamsDataView() = default;

  NetworkContext_ClearTrustTokenData_ParamsDataView(
      internal::NetworkContext_ClearTrustTokenData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFilterDataView(
      ClearDataFilterDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFilter(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::ClearDataFilterDataView, UserType>(),
    "Attempting to read the optional `filter` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFilter` instead "
    "of `ReadFilter if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->filter.Get();
    return mojo::internal::Deserialize<::network::mojom::ClearDataFilterDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ClearTrustTokenData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearTrustTokenData_ResponseParamsDataView {
 public:
  NetworkContext_ClearTrustTokenData_ResponseParamsDataView() = default;

  NetworkContext_ClearTrustTokenData_ResponseParamsDataView(
      internal::NetworkContext_ClearTrustTokenData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearTrustTokenData_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_GetStoredTrustTokenCounts_ParamsDataView {
 public:
  NetworkContext_GetStoredTrustTokenCounts_ParamsDataView() = default;

  NetworkContext_GetStoredTrustTokenCounts_ParamsDataView(
      internal::NetworkContext_GetStoredTrustTokenCounts_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_GetStoredTrustTokenCounts_Params_Data* data_ = nullptr;
};



class NetworkContext_GetStoredTrustTokenCounts_ResponseParamsDataView {
 public:
  NetworkContext_GetStoredTrustTokenCounts_ResponseParamsDataView() = default;

  NetworkContext_GetStoredTrustTokenCounts_ResponseParamsDataView(
      internal::NetworkContext_GetStoredTrustTokenCounts_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokensDataView(
      mojo::ArrayDataView<::network::mojom::StoredTrustTokensForIssuerDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTokens(UserType* output) {
    
    auto* pointer = data_->tokens.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::StoredTrustTokensForIssuerDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_GetStoredTrustTokenCounts_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_DeleteStoredTrustTokens_ParamsDataView {
 public:
  NetworkContext_DeleteStoredTrustTokens_ParamsDataView() = default;

  NetworkContext_DeleteStoredTrustTokens_ParamsDataView(
      internal::NetworkContext_DeleteStoredTrustTokens_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIssuerDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIssuer(UserType* output) {
    
    auto* pointer = data_->issuer.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_DeleteStoredTrustTokens_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_DeleteStoredTrustTokens_ResponseParamsDataView {
 public:
  NetworkContext_DeleteStoredTrustTokens_ResponseParamsDataView() = default;

  NetworkContext_DeleteStoredTrustTokens_ResponseParamsDataView(
      internal::NetworkContext_DeleteStoredTrustTokens_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::network::mojom::DeleteStoredTrustTokensStatus>(
        data_value, output);
  }
  ::network::mojom::DeleteStoredTrustTokensStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::DeleteStoredTrustTokensStatus>(data_->status));
  }
 private:
  internal::NetworkContext_DeleteStoredTrustTokens_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_SetBlockTrustTokens_ParamsDataView {
 public:
  NetworkContext_SetBlockTrustTokens_ParamsDataView() = default;

  NetworkContext_SetBlockTrustTokens_ParamsDataView(
      internal::NetworkContext_SetBlockTrustTokens_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool block() const {
    return data_->block;
  }
 private:
  internal::NetworkContext_SetBlockTrustTokens_Params_Data* data_ = nullptr;
};



class NetworkContext_ClearNetworkingHistoryBetween_ParamsDataView {
 public:
  NetworkContext_ClearNetworkingHistoryBetween_ParamsDataView() = default;

  NetworkContext_ClearNetworkingHistoryBetween_ParamsDataView(
      internal::NetworkContext_ClearNetworkingHistoryBetween_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStartTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartTime(UserType* output) {
    
    auto* pointer = data_->start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetEndTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEndTime(UserType* output) {
    
    auto* pointer = data_->end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ClearNetworkingHistoryBetween_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearNetworkingHistoryBetween_ResponseParamsDataView {
 public:
  NetworkContext_ClearNetworkingHistoryBetween_ResponseParamsDataView() = default;

  NetworkContext_ClearNetworkingHistoryBetween_ResponseParamsDataView(
      internal::NetworkContext_ClearNetworkingHistoryBetween_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearNetworkingHistoryBetween_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ClearHttpCache_ParamsDataView {
 public:
  NetworkContext_ClearHttpCache_ParamsDataView() = default;

  NetworkContext_ClearHttpCache_ParamsDataView(
      internal::NetworkContext_ClearHttpCache_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStartTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartTime(UserType* output) {
    
    auto* pointer = data_->start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetEndTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEndTime(UserType* output) {
    
    auto* pointer = data_->end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetFilterDataView(
      ClearDataFilterDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFilter(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::ClearDataFilterDataView, UserType>(),
    "Attempting to read the optional `filter` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFilter` instead "
    "of `ReadFilter if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->filter.Get();
    return mojo::internal::Deserialize<::network::mojom::ClearDataFilterDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ClearHttpCache_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearHttpCache_ResponseParamsDataView {
 public:
  NetworkContext_ClearHttpCache_ResponseParamsDataView() = default;

  NetworkContext_ClearHttpCache_ResponseParamsDataView(
      internal::NetworkContext_ClearHttpCache_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearHttpCache_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ComputeHttpCacheSize_ParamsDataView {
 public:
  NetworkContext_ComputeHttpCacheSize_ParamsDataView() = default;

  NetworkContext_ComputeHttpCacheSize_ParamsDataView(
      internal::NetworkContext_ComputeHttpCacheSize_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStartTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartTime(UserType* output) {
    
    auto* pointer = data_->start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetEndTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEndTime(UserType* output) {
    
    auto* pointer = data_->end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ComputeHttpCacheSize_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ComputeHttpCacheSize_ResponseParamsDataView {
 public:
  NetworkContext_ComputeHttpCacheSize_ResponseParamsDataView() = default;

  NetworkContext_ComputeHttpCacheSize_ResponseParamsDataView(
      internal::NetworkContext_ComputeHttpCacheSize_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_upper_bound() const {
    return data_->is_upper_bound;
  }
  int64_t size_or_error() const {
    return data_->size_or_error;
  }
 private:
  internal::NetworkContext_ComputeHttpCacheSize_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_NotifyExternalCacheHit_ParamsDataView {
 public:
  NetworkContext_NotifyExternalCacheHit_ParamsDataView() = default;

  NetworkContext_NotifyExternalCacheHit_ParamsDataView(
      internal::NetworkContext_NotifyExternalCacheHit_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetHttpMethodDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHttpMethod(UserType* output) {
    
    auto* pointer = data_->http_method.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
  bool is_subframe_document_resource() const {
    return data_->is_subframe_document_resource;
  }
  bool include_credentials() const {
    return data_->include_credentials;
  }
 private:
  internal::NetworkContext_NotifyExternalCacheHit_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearHostCache_ParamsDataView {
 public:
  NetworkContext_ClearHostCache_ParamsDataView() = default;

  NetworkContext_ClearHostCache_ParamsDataView(
      internal::NetworkContext_ClearHostCache_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFilterDataView(
      ClearDataFilterDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFilter(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::ClearDataFilterDataView, UserType>(),
    "Attempting to read the optional `filter` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFilter` instead "
    "of `ReadFilter if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->filter.Get();
    return mojo::internal::Deserialize<::network::mojom::ClearDataFilterDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ClearHostCache_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearHostCache_ResponseParamsDataView {
 public:
  NetworkContext_ClearHostCache_ResponseParamsDataView() = default;

  NetworkContext_ClearHostCache_ResponseParamsDataView(
      internal::NetworkContext_ClearHostCache_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearHostCache_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ClearHttpAuthCache_ParamsDataView {
 public:
  NetworkContext_ClearHttpAuthCache_ParamsDataView() = default;

  NetworkContext_ClearHttpAuthCache_ParamsDataView(
      internal::NetworkContext_ClearHttpAuthCache_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStartTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartTime(UserType* output) {
    
    auto* pointer = data_->start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetEndTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEndTime(UserType* output) {
    
    auto* pointer = data_->end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ClearHttpAuthCache_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearHttpAuthCache_ResponseParamsDataView {
 public:
  NetworkContext_ClearHttpAuthCache_ResponseParamsDataView() = default;

  NetworkContext_ClearHttpAuthCache_ResponseParamsDataView(
      internal::NetworkContext_ClearHttpAuthCache_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearHttpAuthCache_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ClearReportingCacheReports_ParamsDataView {
 public:
  NetworkContext_ClearReportingCacheReports_ParamsDataView() = default;

  NetworkContext_ClearReportingCacheReports_ParamsDataView(
      internal::NetworkContext_ClearReportingCacheReports_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFilterDataView(
      ClearDataFilterDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFilter(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::ClearDataFilterDataView, UserType>(),
    "Attempting to read the optional `filter` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFilter` instead "
    "of `ReadFilter if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->filter.Get();
    return mojo::internal::Deserialize<::network::mojom::ClearDataFilterDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ClearReportingCacheReports_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearReportingCacheReports_ResponseParamsDataView {
 public:
  NetworkContext_ClearReportingCacheReports_ResponseParamsDataView() = default;

  NetworkContext_ClearReportingCacheReports_ResponseParamsDataView(
      internal::NetworkContext_ClearReportingCacheReports_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearReportingCacheReports_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ClearReportingCacheClients_ParamsDataView {
 public:
  NetworkContext_ClearReportingCacheClients_ParamsDataView() = default;

  NetworkContext_ClearReportingCacheClients_ParamsDataView(
      internal::NetworkContext_ClearReportingCacheClients_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFilterDataView(
      ClearDataFilterDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFilter(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::ClearDataFilterDataView, UserType>(),
    "Attempting to read the optional `filter` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFilter` instead "
    "of `ReadFilter if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->filter.Get();
    return mojo::internal::Deserialize<::network::mojom::ClearDataFilterDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ClearReportingCacheClients_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearReportingCacheClients_ResponseParamsDataView {
 public:
  NetworkContext_ClearReportingCacheClients_ResponseParamsDataView() = default;

  NetworkContext_ClearReportingCacheClients_ResponseParamsDataView(
      internal::NetworkContext_ClearReportingCacheClients_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearReportingCacheClients_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ClearNetworkErrorLogging_ParamsDataView {
 public:
  NetworkContext_ClearNetworkErrorLogging_ParamsDataView() = default;

  NetworkContext_ClearNetworkErrorLogging_ParamsDataView(
      internal::NetworkContext_ClearNetworkErrorLogging_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFilterDataView(
      ClearDataFilterDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFilter(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::ClearDataFilterDataView, UserType>(),
    "Attempting to read the optional `filter` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFilter` instead "
    "of `ReadFilter if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->filter.Get();
    return mojo::internal::Deserialize<::network::mojom::ClearDataFilterDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_ClearNetworkErrorLogging_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearNetworkErrorLogging_ResponseParamsDataView {
 public:
  NetworkContext_ClearNetworkErrorLogging_ResponseParamsDataView() = default;

  NetworkContext_ClearNetworkErrorLogging_ResponseParamsDataView(
      internal::NetworkContext_ClearNetworkErrorLogging_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearNetworkErrorLogging_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ClearDomainReliability_ParamsDataView {
 public:
  NetworkContext_ClearDomainReliability_ParamsDataView() = default;

  NetworkContext_ClearDomainReliability_ParamsDataView(
      internal::NetworkContext_ClearDomainReliability_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFilterDataView(
      ClearDataFilterDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFilter(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::ClearDataFilterDataView, UserType>(),
    "Attempting to read the optional `filter` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFilter` instead "
    "of `ReadFilter if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->filter.Get();
    return mojo::internal::Deserialize<::network::mojom::ClearDataFilterDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::network::mojom::NetworkContext_DomainReliabilityClearMode>(
        data_value, output);
  }
  NetworkContext_DomainReliabilityClearMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::NetworkContext_DomainReliabilityClearMode>(data_->mode));
  }
 private:
  internal::NetworkContext_ClearDomainReliability_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ClearDomainReliability_ResponseParamsDataView {
 public:
  NetworkContext_ClearDomainReliability_ResponseParamsDataView() = default;

  NetworkContext_ClearDomainReliability_ResponseParamsDataView(
      internal::NetworkContext_ClearDomainReliability_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearDomainReliability_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_SetDocumentReportingEndpoints_ParamsDataView {
 public:
  NetworkContext_SetDocumentReportingEndpoints_ParamsDataView() = default;

  NetworkContext_SetDocumentReportingEndpoints_ParamsDataView(
      internal::NetworkContext_SetDocumentReportingEndpoints_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportingSourceDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportingSource(UserType* output) {
    
    auto* pointer = data_->reporting_source.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetIsolationInfoDataView(
      ::network::mojom::IsolationInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIsolationInfo(UserType* output) {
    
    auto* pointer = data_->isolation_info.Get();
    return mojo::internal::Deserialize<::network::mojom::IsolationInfoDataView>(
        pointer, output, message_);
  }
  inline void GetEndpointsDataView(
      mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEndpoints(UserType* output) {
    
    auto* pointer = data_->endpoints.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_SetDocumentReportingEndpoints_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_SendReportsAndRemoveSource_ParamsDataView {
 public:
  NetworkContext_SendReportsAndRemoveSource_ParamsDataView() = default;

  NetworkContext_SendReportsAndRemoveSource_ParamsDataView(
      internal::NetworkContext_SendReportsAndRemoveSource_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportingSourceDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportingSource(UserType* output) {
    
    auto* pointer = data_->reporting_source.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_SendReportsAndRemoveSource_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_QueueReport_ParamsDataView {
 public:
  NetworkContext_QueueReport_ParamsDataView() = default;

  NetworkContext_QueueReport_ParamsDataView(
      internal::NetworkContext_QueueReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) {
    
    auto* pointer = data_->type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetGroupDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGroup(UserType* output) {
    
    auto* pointer = data_->group.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetReportingSourceDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportingSource(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnguessableTokenDataView, UserType>(),
    "Attempting to read the optional `reporting_source` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReportingSource` instead "
    "of `ReadReportingSource if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->reporting_source.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
  inline void GetUserAgentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUserAgent(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `user_agent` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUserAgent` instead "
    "of `ReadUserAgent if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->user_agent.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetBodyDataView(
      ::mojo_base::mojom::DictionaryValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBody(UserType* output) {
    
    auto* pointer = data_->body.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::DictionaryValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_QueueReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_QueueSignedExchangeReport_ParamsDataView {
 public:
  NetworkContext_QueueSignedExchangeReport_ParamsDataView() = default;

  NetworkContext_QueueSignedExchangeReport_ParamsDataView(
      internal::NetworkContext_QueueSignedExchangeReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportDataView(
      SignedExchangeReportDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReport(UserType* output) {
    
    auto* pointer = data_->report.Get();
    return mojo::internal::Deserialize<::network::mojom::SignedExchangeReportDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_QueueSignedExchangeReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CloseAllConnections_ParamsDataView {
 public:
  NetworkContext_CloseAllConnections_ParamsDataView() = default;

  NetworkContext_CloseAllConnections_ParamsDataView(
      internal::NetworkContext_CloseAllConnections_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_CloseAllConnections_Params_Data* data_ = nullptr;
};



class NetworkContext_CloseAllConnections_ResponseParamsDataView {
 public:
  NetworkContext_CloseAllConnections_ResponseParamsDataView() = default;

  NetworkContext_CloseAllConnections_ResponseParamsDataView(
      internal::NetworkContext_CloseAllConnections_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_CloseAllConnections_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_CloseIdleConnections_ParamsDataView {
 public:
  NetworkContext_CloseIdleConnections_ParamsDataView() = default;

  NetworkContext_CloseIdleConnections_ParamsDataView(
      internal::NetworkContext_CloseIdleConnections_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_CloseIdleConnections_Params_Data* data_ = nullptr;
};



class NetworkContext_CloseIdleConnections_ResponseParamsDataView {
 public:
  NetworkContext_CloseIdleConnections_ResponseParamsDataView() = default;

  NetworkContext_CloseIdleConnections_ResponseParamsDataView(
      internal::NetworkContext_CloseIdleConnections_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_CloseIdleConnections_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_SetNetworkConditions_ParamsDataView {
 public:
  NetworkContext_SetNetworkConditions_ParamsDataView() = default;

  NetworkContext_SetNetworkConditions_ParamsDataView(
      internal::NetworkContext_SetNetworkConditions_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetThrottlingProfileIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadThrottlingProfileId(UserType* output) {
    
    auto* pointer = data_->throttling_profile_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetConditionsDataView(
      NetworkConditionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConditions(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::NetworkConditionsDataView, UserType>(),
    "Attempting to read the optional `conditions` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadConditions` instead "
    "of `ReadConditions if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->conditions.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkConditionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_SetNetworkConditions_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_SetAcceptLanguage_ParamsDataView {
 public:
  NetworkContext_SetAcceptLanguage_ParamsDataView() = default;

  NetworkContext_SetAcceptLanguage_ParamsDataView(
      internal::NetworkContext_SetAcceptLanguage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNewAcceptLanguageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewAcceptLanguage(UserType* output) {
    
    auto* pointer = data_->new_accept_language.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_SetAcceptLanguage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_SetEnableReferrers_ParamsDataView {
 public:
  NetworkContext_SetEnableReferrers_ParamsDataView() = default;

  NetworkContext_SetEnableReferrers_ParamsDataView(
      internal::NetworkContext_SetEnableReferrers_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool enable_referrers() const {
    return data_->enable_referrers;
  }
 private:
  internal::NetworkContext_SetEnableReferrers_Params_Data* data_ = nullptr;
};



class NetworkContext_SetCTPolicy_ParamsDataView {
 public:
  NetworkContext_SetCTPolicy_ParamsDataView() = default;

  NetworkContext_SetCTPolicy_ParamsDataView(
      internal::NetworkContext_SetCTPolicy_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCtPolicyDataView(
      CTPolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCtPolicy(UserType* output) {
    
    auto* pointer = data_->ct_policy.Get();
    return mojo::internal::Deserialize<::network::mojom::CTPolicyDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_SetCTPolicy_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_AddExpectCT_ParamsDataView {
 public:
  NetworkContext_AddExpectCT_ParamsDataView() = default;

  NetworkContext_AddExpectCT_ParamsDataView(
      internal::NetworkContext_AddExpectCT_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHostDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHost(UserType* output) {
    
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetExpiryDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExpiry(UserType* output) {
    
    auto* pointer = data_->expiry.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  bool enforce() const {
    return data_->enforce;
  }
  inline void GetReportUriDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportUri(UserType* output) {
    
    auto* pointer = data_->report_uri.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_AddExpectCT_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_AddExpectCT_ResponseParamsDataView {
 public:
  NetworkContext_AddExpectCT_ResponseParamsDataView() = default;

  NetworkContext_AddExpectCT_ResponseParamsDataView(
      internal::NetworkContext_AddExpectCT_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::NetworkContext_AddExpectCT_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_SetExpectCTTestReport_ParamsDataView {
 public:
  NetworkContext_SetExpectCTTestReport_ParamsDataView() = default;

  NetworkContext_SetExpectCTTestReport_ParamsDataView(
      internal::NetworkContext_SetExpectCTTestReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportUriDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportUri(UserType* output) {
    
    auto* pointer = data_->report_uri.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_SetExpectCTTestReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_SetExpectCTTestReport_ResponseParamsDataView {
 public:
  NetworkContext_SetExpectCTTestReport_ResponseParamsDataView() = default;

  NetworkContext_SetExpectCTTestReport_ResponseParamsDataView(
      internal::NetworkContext_SetExpectCTTestReport_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::NetworkContext_SetExpectCTTestReport_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_GetExpectCTState_ParamsDataView {
 public:
  NetworkContext_GetExpectCTState_ParamsDataView() = default;

  NetworkContext_GetExpectCTState_ParamsDataView(
      internal::NetworkContext_GetExpectCTState_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDomainDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDomain(UserType* output) {
    
    auto* pointer = data_->domain.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_GetExpectCTState_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_GetExpectCTState_ResponseParamsDataView {
 public:
  NetworkContext_GetExpectCTState_ResponseParamsDataView() = default;

  NetworkContext_GetExpectCTState_ResponseParamsDataView(
      internal::NetworkContext_GetExpectCTState_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStateDataView(
      ::mojo_base::mojom::DictionaryValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) {
    
    auto* pointer = data_->state.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::DictionaryValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_GetExpectCTState_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateUDPSocket_ParamsDataView {
 public:
  NetworkContext_CreateUDPSocket_ParamsDataView() = default;

  NetworkContext_CreateUDPSocket_ParamsDataView(
      internal::NetworkContext_CreateUDPSocket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::UDPSocketInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::UDPSocketListenerInterfaceBase>>(
            &data_->listener, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateUDPSocket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateTCPServerSocket_ParamsDataView {
 public:
  NetworkContext_CreateTCPServerSocket_ParamsDataView() = default;

  NetworkContext_CreateTCPServerSocket_ParamsDataView(
      internal::NetworkContext_CreateTCPServerSocket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLocalAddrDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalAddr(UserType* output) {
    
    auto* pointer = data_->local_addr.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
  uint32_t backlog() const {
    return data_->backlog;
  }
  inline void GetTrafficAnnotationDataView(
      ::network::mojom::MutableNetworkTrafficAnnotationTagDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrafficAnnotation(UserType* output) {
    
    auto* pointer = data_->traffic_annotation.Get();
    return mojo::internal::Deserialize<::network::mojom::MutableNetworkTrafficAnnotationTagDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeSocket() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::TCPServerSocketInterfaceBase>>(
            &data_->socket, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateTCPServerSocket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateTCPServerSocket_ResponseParamsDataView {
 public:
  NetworkContext_CreateTCPServerSocket_ResponseParamsDataView() = default;

  NetworkContext_CreateTCPServerSocket_ResponseParamsDataView(
      internal::NetworkContext_CreateTCPServerSocket_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
  inline void GetLocalAddrOutDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalAddrOut(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::IPEndPointDataView, UserType>(),
    "Attempting to read the optional `local_addr_out` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadLocalAddrOut` instead "
    "of `ReadLocalAddrOut if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->local_addr_out.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_CreateTCPServerSocket_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateTCPConnectedSocket_ParamsDataView {
 public:
  NetworkContext_CreateTCPConnectedSocket_ParamsDataView() = default;

  NetworkContext_CreateTCPConnectedSocket_ParamsDataView(
      internal::NetworkContext_CreateTCPConnectedSocket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLocalAddrDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalAddr(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::IPEndPointDataView, UserType>(),
    "Attempting to read the optional `local_addr` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadLocalAddr` instead "
    "of `ReadLocalAddr if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->local_addr.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
  inline void GetRemoteAddrListDataView(
      ::network::mojom::AddressListDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteAddrList(UserType* output) {
    
    auto* pointer = data_->remote_addr_list.Get();
    return mojo::internal::Deserialize<::network::mojom::AddressListDataView>(
        pointer, output, message_);
  }
  inline void GetTcpConnectedSocketOptionsDataView(
      ::network::mojom::TCPConnectedSocketOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTcpConnectedSocketOptions(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::TCPConnectedSocketOptionsDataView, UserType>(),
    "Attempting to read the optional `tcp_connected_socket_options` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTcpConnectedSocketOptions` instead "
    "of `ReadTcpConnectedSocketOptions if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->tcp_connected_socket_options.Get();
    return mojo::internal::Deserialize<::network::mojom::TCPConnectedSocketOptionsDataView>(
        pointer, output, message_);
  }
  inline void GetTrafficAnnotationDataView(
      ::network::mojom::MutableNetworkTrafficAnnotationTagDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrafficAnnotation(UserType* output) {
    
    auto* pointer = data_->traffic_annotation.Get();
    return mojo::internal::Deserialize<::network::mojom::MutableNetworkTrafficAnnotationTagDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeSocket() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::TCPConnectedSocketInterfaceBase>>(
            &data_->socket, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::SocketObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateTCPConnectedSocket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateTCPConnectedSocket_ResponseParamsDataView {
 public:
  NetworkContext_CreateTCPConnectedSocket_ResponseParamsDataView() = default;

  NetworkContext_CreateTCPConnectedSocket_ResponseParamsDataView(
      internal::NetworkContext_CreateTCPConnectedSocket_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
  inline void GetLocalAddrDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalAddr(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::IPEndPointDataView, UserType>(),
    "Attempting to read the optional `local_addr` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadLocalAddr` instead "
    "of `ReadLocalAddr if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->local_addr.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
  inline void GetPeerAddrDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPeerAddr(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::IPEndPointDataView, UserType>(),
    "Attempting to read the optional `peer_addr` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPeerAddr` instead "
    "of `ReadPeerAddr if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->peer_addr.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
  mojo::ScopedDataPipeConsumerHandle TakeReceiveStream() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->receive_stream, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeProducerHandle TakeSendStream() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->send_stream, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateTCPConnectedSocket_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateTCPBoundSocket_ParamsDataView {
 public:
  NetworkContext_CreateTCPBoundSocket_ParamsDataView() = default;

  NetworkContext_CreateTCPBoundSocket_ParamsDataView(
      internal::NetworkContext_CreateTCPBoundSocket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLocalAddrDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalAddr(UserType* output) {
    
    auto* pointer = data_->local_addr.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
  inline void GetTrafficAnnotationDataView(
      ::network::mojom::MutableNetworkTrafficAnnotationTagDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrafficAnnotation(UserType* output) {
    
    auto* pointer = data_->traffic_annotation.Get();
    return mojo::internal::Deserialize<::network::mojom::MutableNetworkTrafficAnnotationTagDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeSocket() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::TCPBoundSocketInterfaceBase>>(
            &data_->socket, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateTCPBoundSocket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateTCPBoundSocket_ResponseParamsDataView {
 public:
  NetworkContext_CreateTCPBoundSocket_ResponseParamsDataView() = default;

  NetworkContext_CreateTCPBoundSocket_ResponseParamsDataView(
      internal::NetworkContext_CreateTCPBoundSocket_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
  inline void GetLocalAddrDataView(
      ::network::mojom::IPEndPointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalAddr(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::IPEndPointDataView, UserType>(),
    "Attempting to read the optional `local_addr` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadLocalAddr` instead "
    "of `ReadLocalAddr if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->local_addr.Get();
    return mojo::internal::Deserialize<::network::mojom::IPEndPointDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_CreateTCPBoundSocket_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateProxyResolvingSocketFactory_ParamsDataView {
 public:
  NetworkContext_CreateProxyResolvingSocketFactory_ParamsDataView() = default;

  NetworkContext_CreateProxyResolvingSocketFactory_ParamsDataView(
      internal::NetworkContext_CreateProxyResolvingSocketFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::ProxyResolvingSocketFactoryInterfaceBase>>(
            &data_->factory, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateProxyResolvingSocketFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_LookUpProxyForURL_ParamsDataView {
 public:
  NetworkContext_LookUpProxyForURL_ParamsDataView() = default;

  NetworkContext_LookUpProxyForURL_ParamsDataView(
      internal::NetworkContext_LookUpProxyForURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeProxyLookupClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::ProxyLookupClientInterfaceBase>>(
            &data_->proxy_lookup_client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_LookUpProxyForURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ForceReloadProxyConfig_ParamsDataView {
 public:
  NetworkContext_ForceReloadProxyConfig_ParamsDataView() = default;

  NetworkContext_ForceReloadProxyConfig_ParamsDataView(
      internal::NetworkContext_ForceReloadProxyConfig_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ForceReloadProxyConfig_Params_Data* data_ = nullptr;
};



class NetworkContext_ForceReloadProxyConfig_ResponseParamsDataView {
 public:
  NetworkContext_ForceReloadProxyConfig_ResponseParamsDataView() = default;

  NetworkContext_ForceReloadProxyConfig_ResponseParamsDataView(
      internal::NetworkContext_ForceReloadProxyConfig_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ForceReloadProxyConfig_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ClearBadProxiesCache_ParamsDataView {
 public:
  NetworkContext_ClearBadProxiesCache_ParamsDataView() = default;

  NetworkContext_ClearBadProxiesCache_ParamsDataView(
      internal::NetworkContext_ClearBadProxiesCache_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearBadProxiesCache_Params_Data* data_ = nullptr;
};



class NetworkContext_ClearBadProxiesCache_ResponseParamsDataView {
 public:
  NetworkContext_ClearBadProxiesCache_ResponseParamsDataView() = default;

  NetworkContext_ClearBadProxiesCache_ResponseParamsDataView(
      internal::NetworkContext_ClearBadProxiesCache_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ClearBadProxiesCache_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_CreateWebSocket_ParamsDataView {
 public:
  NetworkContext_CreateWebSocket_ParamsDataView() = default;

  NetworkContext_CreateWebSocket_ParamsDataView(
      internal::NetworkContext_CreateWebSocket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetRequestedProtocolsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequestedProtocols(UserType* output) {
    
    auto* pointer = data_->requested_protocols.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetSiteForCookiesDataView(
      ::network::mojom::SiteForCookiesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSiteForCookies(UserType* output) {
    
    auto* pointer = data_->site_for_cookies.Get();
    return mojo::internal::Deserialize<::network::mojom::SiteForCookiesDataView>(
        pointer, output, message_);
  }
  inline void GetIsolationInfoDataView(
      ::network::mojom::IsolationInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIsolationInfo(UserType* output) {
    
    auto* pointer = data_->isolation_info.Get();
    return mojo::internal::Deserialize<::network::mojom::IsolationInfoDataView>(
        pointer, output, message_);
  }
  inline void GetAdditionalHeadersDataView(
      mojo::ArrayDataView<::network::mojom::HttpHeaderDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdditionalHeaders(UserType* output) {
    
    auto* pointer = data_->additional_headers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::HttpHeaderDataView>>(
        pointer, output, message_);
  }
  int32_t process_id() const {
    return data_->process_id;
  }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  uint32_t options() const {
    return data_->options;
  }
  inline void GetTrafficAnnotationDataView(
      ::network::mojom::MutableNetworkTrafficAnnotationTagDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrafficAnnotation(UserType* output) {
    
    auto* pointer = data_->traffic_annotation.Get();
    return mojo::internal::Deserialize<::network::mojom::MutableNetworkTrafficAnnotationTagDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeHandshakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::WebSocketHandshakeClientInterfaceBase>>(
            &data_->handshake_client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeUrlLoaderNetworkObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderNetworkServiceObserverInterfaceBase>>(
            &data_->url_loader_network_observer, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeAuthHandler() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::WebSocketAuthenticationHandlerInterfaceBase>>(
            &data_->auth_handler, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeHeaderClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::TrustedHeaderClientInterfaceBase>>(
            &data_->header_client, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetThrottlingProfileIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadThrottlingProfileId(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnguessableTokenDataView, UserType>(),
    "Attempting to read the optional `throttling_profile_id` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadThrottlingProfileId` instead "
    "of `ReadThrottlingProfileId if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->throttling_profile_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_CreateWebSocket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateWebTransport_ParamsDataView {
 public:
  NetworkContext_CreateWebTransport_ParamsDataView() = default;

  NetworkContext_CreateWebTransport_ParamsDataView(
      internal::NetworkContext_CreateWebTransport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
  inline void GetFingerprintsDataView(
      mojo::ArrayDataView<::network::mojom::WebTransportCertificateFingerprintDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFingerprints(UserType* output) {
    
    auto* pointer = data_->fingerprints.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::WebTransportCertificateFingerprintDataView>>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeHandshakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::WebTransportHandshakeClientInterfaceBase>>(
            &data_->handshake_client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateWebTransport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateNetLogExporter_ParamsDataView {
 public:
  NetworkContext_CreateNetLogExporter_ParamsDataView() = default;

  NetworkContext_CreateNetLogExporter_ParamsDataView(
      internal::NetworkContext_CreateNetLogExporter_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::NetLogExporterInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateNetLogExporter_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_PreconnectSockets_ParamsDataView {
 public:
  NetworkContext_PreconnectSockets_ParamsDataView() = default;

  NetworkContext_PreconnectSockets_ParamsDataView(
      internal::NetworkContext_PreconnectSockets_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t num_streams() const {
    return data_->num_streams;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  bool allow_credentials() const {
    return data_->allow_credentials;
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_PreconnectSockets_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateP2PSocketManager_ParamsDataView {
 public:
  NetworkContext_CreateP2PSocketManager_ParamsDataView() = default;

  NetworkContext_CreateP2PSocketManager_ParamsDataView(
      internal::NetworkContext_CreateP2PSocketManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::P2PTrustedSocketManagerClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeTrustedSocketManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::P2PTrustedSocketManagerInterfaceBase>>(
            &data_->trusted_socket_manager, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSocketManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::P2PSocketManagerInterfaceBase>>(
            &data_->socket_manager, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateP2PSocketManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateMdnsResponder_ParamsDataView {
 public:
  NetworkContext_CreateMdnsResponder_ParamsDataView() = default;

  NetworkContext_CreateMdnsResponder_ParamsDataView(
      internal::NetworkContext_CreateMdnsResponder_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeResponderReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::MdnsResponderInterfaceBase>>(
            &data_->responder_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateMdnsResponder_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_ResolveHost_ParamsDataView {
 public:
  NetworkContext_ResolveHost_ParamsDataView() = default;

  NetworkContext_ResolveHost_ParamsDataView(
      internal::NetworkContext_ResolveHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHostDataView(
      ::network::mojom::HostPortPairDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHost(UserType* output) {
    
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<::network::mojom::HostPortPairDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
  inline void GetOptionalParametersDataView(
      ::network::mojom::ResolveHostParametersDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptionalParameters(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::ResolveHostParametersDataView, UserType>(),
    "Attempting to read the optional `optional_parameters` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOptionalParameters` instead "
    "of `ReadOptionalParameters if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->optional_parameters.Get();
    return mojo::internal::Deserialize<::network::mojom::ResolveHostParametersDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeResponseClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::ResolveHostClientInterfaceBase>>(
            &data_->response_client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_ResolveHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_CreateHostResolver_ParamsDataView {
 public:
  NetworkContext_CreateHostResolver_ParamsDataView() = default;

  NetworkContext_CreateHostResolver_ParamsDataView(
      internal::NetworkContext_CreateHostResolver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetConfigOverridesDataView(
      ::network::mojom::DnsConfigOverridesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfigOverrides(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::DnsConfigOverridesDataView, UserType>(),
    "Attempting to read the optional `config_overrides` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadConfigOverrides` instead "
    "of `ReadConfigOverrides if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->config_overrides.Get();
    return mojo::internal::Deserialize<::network::mojom::DnsConfigOverridesDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeHostResolver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::HostResolverInterfaceBase>>(
            &data_->host_resolver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_CreateHostResolver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_VerifyCertForSignedExchange_ParamsDataView {
 public:
  NetworkContext_VerifyCertForSignedExchange_ParamsDataView() = default;

  NetworkContext_VerifyCertForSignedExchange_ParamsDataView(
      internal::NetworkContext_VerifyCertForSignedExchange_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCertificateDataView(
      ::network::mojom::X509CertificateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCertificate(UserType* output) {
    
    auto* pointer = data_->certificate.Get();
    return mojo::internal::Deserialize<::network::mojom::X509CertificateDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
  inline void GetOcspResponseDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOcspResponse(UserType* output) {
    
    auto* pointer = data_->ocsp_response.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSctListDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSctList(UserType* output) {
    
    auto* pointer = data_->sct_list.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_VerifyCertForSignedExchange_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_VerifyCertForSignedExchange_ResponseParamsDataView {
 public:
  NetworkContext_VerifyCertForSignedExchange_ResponseParamsDataView() = default;

  NetworkContext_VerifyCertForSignedExchange_ResponseParamsDataView(
      internal::NetworkContext_VerifyCertForSignedExchange_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t error_code() const {
    return data_->error_code;
  }
  inline void GetCvResultDataView(
      ::network::mojom::CertVerifyResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCvResult(UserType* output) {
    
    auto* pointer = data_->cv_result.Get();
    return mojo::internal::Deserialize<::network::mojom::CertVerifyResultDataView>(
        pointer, output, message_);
  }
  bool pkp_bypassed() const {
    return data_->pkp_bypassed;
  }
  inline void GetPinningFailureLogDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPinningFailureLog(UserType* output) {
    
    auto* pointer = data_->pinning_failure_log.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_VerifyCertForSignedExchange_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_AddHSTS_ParamsDataView {
 public:
  NetworkContext_AddHSTS_ParamsDataView() = default;

  NetworkContext_AddHSTS_ParamsDataView(
      internal::NetworkContext_AddHSTS_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHostDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHost(UserType* output) {
    
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetExpiryDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExpiry(UserType* output) {
    
    auto* pointer = data_->expiry.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  bool include_subdomains() const {
    return data_->include_subdomains;
  }
 private:
  internal::NetworkContext_AddHSTS_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_AddHSTS_ResponseParamsDataView {
 public:
  NetworkContext_AddHSTS_ResponseParamsDataView() = default;

  NetworkContext_AddHSTS_ResponseParamsDataView(
      internal::NetworkContext_AddHSTS_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_AddHSTS_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_IsHSTSActiveForHost_ParamsDataView {
 public:
  NetworkContext_IsHSTSActiveForHost_ParamsDataView() = default;

  NetworkContext_IsHSTSActiveForHost_ParamsDataView(
      internal::NetworkContext_IsHSTSActiveForHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHostDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHost(UserType* output) {
    
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_IsHSTSActiveForHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_IsHSTSActiveForHost_ResponseParamsDataView {
 public:
  NetworkContext_IsHSTSActiveForHost_ResponseParamsDataView() = default;

  NetworkContext_IsHSTSActiveForHost_ResponseParamsDataView(
      internal::NetworkContext_IsHSTSActiveForHost_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::NetworkContext_IsHSTSActiveForHost_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_GetHSTSState_ParamsDataView {
 public:
  NetworkContext_GetHSTSState_ParamsDataView() = default;

  NetworkContext_GetHSTSState_ParamsDataView(
      internal::NetworkContext_GetHSTSState_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDomainDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDomain(UserType* output) {
    
    auto* pointer = data_->domain.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_GetHSTSState_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_GetHSTSState_ResponseParamsDataView {
 public:
  NetworkContext_GetHSTSState_ResponseParamsDataView() = default;

  NetworkContext_GetHSTSState_ResponseParamsDataView(
      internal::NetworkContext_GetHSTSState_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStateDataView(
      ::mojo_base::mojom::DictionaryValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) {
    
    auto* pointer = data_->state.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::DictionaryValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_GetHSTSState_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_SetCorsOriginAccessListsForOrigin_ParamsDataView {
 public:
  NetworkContext_SetCorsOriginAccessListsForOrigin_ParamsDataView() = default;

  NetworkContext_SetCorsOriginAccessListsForOrigin_ParamsDataView(
      internal::NetworkContext_SetCorsOriginAccessListsForOrigin_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSourceOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceOrigin(UserType* output) {
    
    auto* pointer = data_->source_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetAllowPatternsDataView(
      mojo::ArrayDataView<::network::mojom::CorsOriginPatternDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAllowPatterns(UserType* output) {
    
    auto* pointer = data_->allow_patterns.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::CorsOriginPatternDataView>>(
        pointer, output, message_);
  }
  inline void GetBlockPatternsDataView(
      mojo::ArrayDataView<::network::mojom::CorsOriginPatternDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBlockPatterns(UserType* output) {
    
    auto* pointer = data_->block_patterns.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::CorsOriginPatternDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_SetCorsOriginAccessListsForOrigin_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParamsDataView {
 public:
  NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParamsDataView() = default;

  NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParamsDataView(
      internal::NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_SetCorsOriginAccessListsForOrigin_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_DeleteDynamicDataForHost_ParamsDataView {
 public:
  NetworkContext_DeleteDynamicDataForHost_ParamsDataView() = default;

  NetworkContext_DeleteDynamicDataForHost_ParamsDataView(
      internal::NetworkContext_DeleteDynamicDataForHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHostDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHost(UserType* output) {
    
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_DeleteDynamicDataForHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_DeleteDynamicDataForHost_ResponseParamsDataView {
 public:
  NetworkContext_DeleteDynamicDataForHost_ResponseParamsDataView() = default;

  NetworkContext_DeleteDynamicDataForHost_ResponseParamsDataView(
      internal::NetworkContext_DeleteDynamicDataForHost_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::NetworkContext_DeleteDynamicDataForHost_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_ParamsDataView {
 public:
  NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_ParamsDataView() = default;

  NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_ParamsDataView(
      internal::NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool split_auth_cache_by_network_isolation_key() const {
    return data_->split_auth_cache_by_network_isolation_key;
  }
 private:
  internal::NetworkContext_SetSplitAuthCacheByNetworkIsolationKey_Params_Data* data_ = nullptr;
};



class NetworkContext_SaveHttpAuthCacheProxyEntries_ParamsDataView {
 public:
  NetworkContext_SaveHttpAuthCacheProxyEntries_ParamsDataView() = default;

  NetworkContext_SaveHttpAuthCacheProxyEntries_ParamsDataView(
      internal::NetworkContext_SaveHttpAuthCacheProxyEntries_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_SaveHttpAuthCacheProxyEntries_Params_Data* data_ = nullptr;
};



class NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParamsDataView {
 public:
  NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParamsDataView() = default;

  NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParamsDataView(
      internal::NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCacheKeyDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCacheKey(UserType* output) {
    
    auto* pointer = data_->cache_key.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_LoadHttpAuthCacheProxyEntries_ParamsDataView {
 public:
  NetworkContext_LoadHttpAuthCacheProxyEntries_ParamsDataView() = default;

  NetworkContext_LoadHttpAuthCacheProxyEntries_ParamsDataView(
      internal::NetworkContext_LoadHttpAuthCacheProxyEntries_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCacheKeyDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCacheKey(UserType* output) {
    
    auto* pointer = data_->cache_key.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_LoadHttpAuthCacheProxyEntries_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParamsDataView {
 public:
  NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParamsDataView() = default;

  NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParamsDataView(
      internal::NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_LoadHttpAuthCacheProxyEntries_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_AddAuthCacheEntry_ParamsDataView {
 public:
  NetworkContext_AddAuthCacheEntry_ParamsDataView() = default;

  NetworkContext_AddAuthCacheEntry_ParamsDataView(
      internal::NetworkContext_AddAuthCacheEntry_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetChallengeDataView(
      ::network::mojom::AuthChallengeInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadChallenge(UserType* output) {
    
    auto* pointer = data_->challenge.Get();
    return mojo::internal::Deserialize<::network::mojom::AuthChallengeInfoDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
  inline void GetCredentialsDataView(
      ::network::mojom::AuthCredentialsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCredentials(UserType* output) {
    
    auto* pointer = data_->credentials.Get();
    return mojo::internal::Deserialize<::network::mojom::AuthCredentialsDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_AddAuthCacheEntry_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_AddAuthCacheEntry_ResponseParamsDataView {
 public:
  NetworkContext_AddAuthCacheEntry_ResponseParamsDataView() = default;

  NetworkContext_AddAuthCacheEntry_ResponseParamsDataView(
      internal::NetworkContext_AddAuthCacheEntry_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_AddAuthCacheEntry_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_SetCorsNonWildcardRequestHeadersSupport_ParamsDataView {
 public:
  NetworkContext_SetCorsNonWildcardRequestHeadersSupport_ParamsDataView() = default;

  NetworkContext_SetCorsNonWildcardRequestHeadersSupport_ParamsDataView(
      internal::NetworkContext_SetCorsNonWildcardRequestHeadersSupport_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool value() const {
    return data_->value;
  }
 private:
  internal::NetworkContext_SetCorsNonWildcardRequestHeadersSupport_Params_Data* data_ = nullptr;
};



class NetworkContext_LookupServerBasicAuthCredentials_ParamsDataView {
 public:
  NetworkContext_LookupServerBasicAuthCredentials_ParamsDataView() = default;

  NetworkContext_LookupServerBasicAuthCredentials_ParamsDataView(
      internal::NetworkContext_LookupServerBasicAuthCredentials_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetNetworkIsolationKeyDataView(
      ::network::mojom::NetworkIsolationKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNetworkIsolationKey(UserType* output) {
    
    auto* pointer = data_->network_isolation_key.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkIsolationKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_LookupServerBasicAuthCredentials_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_LookupServerBasicAuthCredentials_ResponseParamsDataView {
 public:
  NetworkContext_LookupServerBasicAuthCredentials_ResponseParamsDataView() = default;

  NetworkContext_LookupServerBasicAuthCredentials_ResponseParamsDataView(
      internal::NetworkContext_LookupServerBasicAuthCredentials_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCredentialsDataView(
      ::network::mojom::AuthCredentialsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCredentials(UserType* output) {
    
    auto* pointer = data_->credentials.Get();
    return mojo::internal::Deserialize<::network::mojom::AuthCredentialsDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_LookupServerBasicAuthCredentials_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_EnableStaticKeyPinningForTesting_ParamsDataView {
 public:
  NetworkContext_EnableStaticKeyPinningForTesting_ParamsDataView() = default;

  NetworkContext_EnableStaticKeyPinningForTesting_ParamsDataView(
      internal::NetworkContext_EnableStaticKeyPinningForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_EnableStaticKeyPinningForTesting_Params_Data* data_ = nullptr;
};



class NetworkContext_EnableStaticKeyPinningForTesting_ResponseParamsDataView {
 public:
  NetworkContext_EnableStaticKeyPinningForTesting_ResponseParamsDataView() = default;

  NetworkContext_EnableStaticKeyPinningForTesting_ResponseParamsDataView(
      internal::NetworkContext_EnableStaticKeyPinningForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_EnableStaticKeyPinningForTesting_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_VerifyCertificateForTesting_ParamsDataView {
 public:
  NetworkContext_VerifyCertificateForTesting_ParamsDataView() = default;

  NetworkContext_VerifyCertificateForTesting_ParamsDataView(
      internal::NetworkContext_VerifyCertificateForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCertificateDataView(
      ::network::mojom::X509CertificateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCertificate(UserType* output) {
    
    auto* pointer = data_->certificate.Get();
    return mojo::internal::Deserialize<::network::mojom::X509CertificateDataView>(
        pointer, output, message_);
  }
  inline void GetHostnameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHostname(UserType* output) {
    
    auto* pointer = data_->hostname.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetOcspResponseDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOcspResponse(UserType* output) {
    
    auto* pointer = data_->ocsp_response.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSctListDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSctList(UserType* output) {
    
    auto* pointer = data_->sct_list.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_VerifyCertificateForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_VerifyCertificateForTesting_ResponseParamsDataView {
 public:
  NetworkContext_VerifyCertificateForTesting_ResponseParamsDataView() = default;

  NetworkContext_VerifyCertificateForTesting_ResponseParamsDataView(
      internal::NetworkContext_VerifyCertificateForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t error_code() const {
    return data_->error_code;
  }
 private:
  internal::NetworkContext_VerifyCertificateForTesting_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_AddDomainReliabilityContextForTesting_ParamsDataView {
 public:
  NetworkContext_AddDomainReliabilityContextForTesting_ParamsDataView() = default;

  NetworkContext_AddDomainReliabilityContextForTesting_ParamsDataView(
      internal::NetworkContext_AddDomainReliabilityContextForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetUploadUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUploadUrl(UserType* output) {
    
    auto* pointer = data_->upload_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkContext_AddDomainReliabilityContextForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkContext_AddDomainReliabilityContextForTesting_ResponseParamsDataView {
 public:
  NetworkContext_AddDomainReliabilityContextForTesting_ResponseParamsDataView() = default;

  NetworkContext_AddDomainReliabilityContextForTesting_ResponseParamsDataView(
      internal::NetworkContext_AddDomainReliabilityContextForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_AddDomainReliabilityContextForTesting_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_ForceDomainReliabilityUploadsForTesting_ParamsDataView {
 public:
  NetworkContext_ForceDomainReliabilityUploadsForTesting_ParamsDataView() = default;

  NetworkContext_ForceDomainReliabilityUploadsForTesting_ParamsDataView(
      internal::NetworkContext_ForceDomainReliabilityUploadsForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ForceDomainReliabilityUploadsForTesting_Params_Data* data_ = nullptr;
};



class NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParamsDataView {
 public:
  NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParamsDataView() = default;

  NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParamsDataView(
      internal::NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_ForceDomainReliabilityUploadsForTesting_ResponseParams_Data* data_ = nullptr;
};



class NetworkContext_SetCTLogListAlwaysTimelyForTesting_ParamsDataView {
 public:
  NetworkContext_SetCTLogListAlwaysTimelyForTesting_ParamsDataView() = default;

  NetworkContext_SetCTLogListAlwaysTimelyForTesting_ParamsDataView(
      internal::NetworkContext_SetCTLogListAlwaysTimelyForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkContext_SetCTLogListAlwaysTimelyForTesting_Params_Data* data_ = nullptr;
};



class NetworkContext_SetSCTAuditingMode_ParamsDataView {
 public:
  NetworkContext_SetSCTAuditingMode_ParamsDataView() = default;

  NetworkContext_SetSCTAuditingMode_ParamsDataView(
      internal::NetworkContext_SetSCTAuditingMode_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::network::mojom::SCTAuditingMode>(
        data_value, output);
  }
  SCTAuditingMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::SCTAuditingMode>(data_->mode));
  }
 private:
  internal::NetworkContext_SetSCTAuditingMode_Params_Data* data_ = nullptr;
};



class NetworkContext_AddReportingApiObserver_ParamsDataView {
 public:
  NetworkContext_AddReportingApiObserver_ParamsDataView() = default;

  NetworkContext_AddReportingApiObserver_ParamsDataView(
      internal::NetworkContext_AddReportingApiObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::ReportingApiObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkContext_AddReportingApiObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CustomProxyConnectionObserver_OnFallback_ParamsDataView::GetBadProxyDataView(
    ::proxy_resolver::mojom::ProxyServerDataView* output) {
  auto pointer = data_->bad_proxy.Get();
  *output = ::proxy_resolver::mojom::ProxyServerDataView(pointer, message_);
}


inline void CustomProxyConnectionObserver_OnTunnelHeadersReceived_ParamsDataView::GetProxyServerDataView(
    ::proxy_resolver::mojom::ProxyServerDataView* output) {
  auto pointer = data_->proxy_server.Get();
  *output = ::proxy_resolver::mojom::ProxyServerDataView(pointer, message_);
}
inline void CustomProxyConnectionObserver_OnTunnelHeadersReceived_ParamsDataView::GetResponseHeadersDataView(
    ::network::mojom::HttpResponseHeadersDataView* output) {
  auto pointer = data_->response_headers.Get();
  *output = ::network::mojom::HttpResponseHeadersDataView(pointer, message_);
}


inline void CustomProxyConfigClient_OnCustomProxyConfigUpdated_ParamsDataView::GetProxyConfigDataView(
    CustomProxyConfigDataView* output) {
  auto pointer = data_->proxy_config.Get();
  *output = CustomProxyConfigDataView(pointer, message_);
}




inline void CustomProxyConfigClient_MarkProxiesAsBad_ParamsDataView::GetBypassDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->bypass_duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}
inline void CustomProxyConfigClient_MarkProxiesAsBad_ParamsDataView::GetBadProxiesDataView(
    ::network::mojom::ProxyListDataView* output) {
  auto pointer = data_->bad_proxies.Get();
  *output = ::network::mojom::ProxyListDataView(pointer, message_);
}






inline void TrustedHeaderClient_OnBeforeSendHeaders_ParamsDataView::GetHeadersDataView(
    ::network::mojom::HttpRequestHeadersDataView* output) {
  auto pointer = data_->headers.Get();
  *output = ::network::mojom::HttpRequestHeadersDataView(pointer, message_);
}


inline void TrustedHeaderClient_OnBeforeSendHeaders_ResponseParamsDataView::GetHeadersDataView(
    ::network::mojom::HttpRequestHeadersDataView* output) {
  auto pointer = data_->headers.Get();
  *output = ::network::mojom::HttpRequestHeadersDataView(pointer, message_);
}


inline void TrustedHeaderClient_OnHeadersReceived_ParamsDataView::GetHeadersDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->headers.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TrustedHeaderClient_OnHeadersReceived_ParamsDataView::GetRemoteEndpointDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->remote_endpoint.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}


inline void TrustedHeaderClient_OnHeadersReceived_ResponseParamsDataView::GetHeadersDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->headers.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TrustedHeaderClient_OnHeadersReceived_ResponseParamsDataView::GetPreserveFragmentOnRedirectUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->preserve_fragment_on_redirect_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}




inline void TrustedURLLoaderHeaderClient_OnLoaderForCorsPreflightCreated_ParamsDataView::GetRequestDataView(
    ::network::mojom::URLRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = ::network::mojom::URLRequestDataView(pointer, message_);
}


inline void NetworkContextClient_OnFileUploadRequested_ParamsDataView::GetFilePathsDataView(
    mojo::ArrayDataView<::mojo_base::mojom::FilePathDataView>* output) {
  auto pointer = data_->file_paths.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::FilePathDataView>(pointer, message_);
}
inline void NetworkContextClient_OnFileUploadRequested_ParamsDataView::GetDestinationUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->destination_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void NetworkContextClient_OnFileUploadRequested_ResponseParamsDataView::GetFilesDataView(
    mojo::ArrayDataView<::mojo_base::mojom::ReadOnlyFileDataView>* output) {
  auto pointer = data_->files.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::ReadOnlyFileDataView>(pointer, message_);
}


inline void NetworkContextClient_OnCanSendReportingReports_ParamsDataView::GetOriginsDataView(
    mojo::ArrayDataView<::url::mojom::OriginDataView>* output) {
  auto pointer = data_->origins.Get();
  *output = mojo::ArrayDataView<::url::mojom::OriginDataView>(pointer, message_);
}


inline void NetworkContextClient_OnCanSendReportingReports_ResponseParamsDataView::GetOriginsDataView(
    mojo::ArrayDataView<::url::mojom::OriginDataView>* output) {
  auto pointer = data_->origins.Get();
  *output = mojo::ArrayDataView<::url::mojom::OriginDataView>(pointer, message_);
}


inline void NetworkContextClient_OnCanSendDomainReliabilityUpload_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}




inline void NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ParamsDataView::GetServerAuthTokenDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->server_auth_token.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ParamsDataView::GetAuthNegotiateAndroidAccountTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->auth_negotiate_android_account_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ParamsDataView::GetSpnDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->spn.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NetworkContextClient_OnGenerateHttpNegotiateAuthToken_ResponseParamsDataView::GetAuthTokenDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->auth_token.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ParamsDataView::GetRequestDataView(
    ::network::mojom::FulfillTrustTokenIssuanceRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = ::network::mojom::FulfillTrustTokenIssuanceRequestDataView(pointer, message_);
}


inline void NetworkContextClient_OnTrustTokenIssuanceDivertedToSystem_ResponseParamsDataView::GetResponseDataView(
    ::network::mojom::FulfillTrustTokenIssuanceAnswerDataView* output) {
  auto pointer = data_->response.Get();
  *output = ::network::mojom::FulfillTrustTokenIssuanceAnswerDataView(pointer, message_);
}










inline void NetworkContext_CreateURLLoaderFactory_ParamsDataView::GetParamsDataView(
    URLLoaderFactoryParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = URLLoaderFactoryParamsDataView(pointer, message_);
}






inline void NetworkContext_GetRestrictedCookieManager_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void NetworkContext_GetRestrictedCookieManager_ParamsDataView::GetIsolationInfoDataView(
    ::network::mojom::IsolationInfoDataView* output) {
  auto pointer = data_->isolation_info.Get();
  *output = ::network::mojom::IsolationInfoDataView(pointer, message_);
}


inline void NetworkContext_GetTrustTokenQueryAnswerer_ParamsDataView::GetTopFrameOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->top_frame_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}


inline void NetworkContext_ClearTrustTokenData_ParamsDataView::GetFilterDataView(
    ClearDataFilterDataView* output) {
  auto pointer = data_->filter.Get();
  *output = ClearDataFilterDataView(pointer, message_);
}






inline void NetworkContext_GetStoredTrustTokenCounts_ResponseParamsDataView::GetTokensDataView(
    mojo::ArrayDataView<::network::mojom::StoredTrustTokensForIssuerDataView>* output) {
  auto pointer = data_->tokens.Get();
  *output = mojo::ArrayDataView<::network::mojom::StoredTrustTokensForIssuerDataView>(pointer, message_);
}


inline void NetworkContext_DeleteStoredTrustTokens_ParamsDataView::GetIssuerDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->issuer.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}






inline void NetworkContext_ClearNetworkingHistoryBetween_ParamsDataView::GetStartTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->start_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void NetworkContext_ClearNetworkingHistoryBetween_ParamsDataView::GetEndTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->end_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}




inline void NetworkContext_ClearHttpCache_ParamsDataView::GetStartTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->start_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void NetworkContext_ClearHttpCache_ParamsDataView::GetEndTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->end_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void NetworkContext_ClearHttpCache_ParamsDataView::GetFilterDataView(
    ClearDataFilterDataView* output) {
  auto pointer = data_->filter.Get();
  *output = ClearDataFilterDataView(pointer, message_);
}




inline void NetworkContext_ComputeHttpCacheSize_ParamsDataView::GetStartTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->start_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void NetworkContext_ComputeHttpCacheSize_ParamsDataView::GetEndTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->end_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}




inline void NetworkContext_NotifyExternalCacheHit_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_NotifyExternalCacheHit_ParamsDataView::GetHttpMethodDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->http_method.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_NotifyExternalCacheHit_ParamsDataView::GetKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}


inline void NetworkContext_ClearHostCache_ParamsDataView::GetFilterDataView(
    ClearDataFilterDataView* output) {
  auto pointer = data_->filter.Get();
  *output = ClearDataFilterDataView(pointer, message_);
}




inline void NetworkContext_ClearHttpAuthCache_ParamsDataView::GetStartTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->start_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void NetworkContext_ClearHttpAuthCache_ParamsDataView::GetEndTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->end_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}




inline void NetworkContext_ClearReportingCacheReports_ParamsDataView::GetFilterDataView(
    ClearDataFilterDataView* output) {
  auto pointer = data_->filter.Get();
  *output = ClearDataFilterDataView(pointer, message_);
}




inline void NetworkContext_ClearReportingCacheClients_ParamsDataView::GetFilterDataView(
    ClearDataFilterDataView* output) {
  auto pointer = data_->filter.Get();
  *output = ClearDataFilterDataView(pointer, message_);
}




inline void NetworkContext_ClearNetworkErrorLogging_ParamsDataView::GetFilterDataView(
    ClearDataFilterDataView* output) {
  auto pointer = data_->filter.Get();
  *output = ClearDataFilterDataView(pointer, message_);
}




inline void NetworkContext_ClearDomainReliability_ParamsDataView::GetFilterDataView(
    ClearDataFilterDataView* output) {
  auto pointer = data_->filter.Get();
  *output = ClearDataFilterDataView(pointer, message_);
}




inline void NetworkContext_SetDocumentReportingEndpoints_ParamsDataView::GetReportingSourceDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->reporting_source.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void NetworkContext_SetDocumentReportingEndpoints_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void NetworkContext_SetDocumentReportingEndpoints_ParamsDataView::GetIsolationInfoDataView(
    ::network::mojom::IsolationInfoDataView* output) {
  auto pointer = data_->isolation_info.Get();
  *output = ::network::mojom::IsolationInfoDataView(pointer, message_);
}
inline void NetworkContext_SetDocumentReportingEndpoints_ParamsDataView::GetEndpointsDataView(
    mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>* output) {
  auto pointer = data_->endpoints.Get();
  *output = mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>(pointer, message_);
}


inline void NetworkContext_SendReportsAndRemoveSource_ParamsDataView::GetReportingSourceDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->reporting_source.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void NetworkContext_QueueReport_ParamsDataView::GetTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_QueueReport_ParamsDataView::GetGroupDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->group.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_QueueReport_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_QueueReport_ParamsDataView::GetReportingSourceDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->reporting_source.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void NetworkContext_QueueReport_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}
inline void NetworkContext_QueueReport_ParamsDataView::GetUserAgentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->user_agent.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_QueueReport_ParamsDataView::GetBodyDataView(
    ::mojo_base::mojom::DictionaryValueDataView* output) {
  auto pointer = data_->body.Get();
  *output = ::mojo_base::mojom::DictionaryValueDataView(pointer, message_);
}


inline void NetworkContext_QueueSignedExchangeReport_ParamsDataView::GetReportDataView(
    SignedExchangeReportDataView* output) {
  auto pointer = data_->report.Get();
  *output = SignedExchangeReportDataView(pointer, message_);
}
inline void NetworkContext_QueueSignedExchangeReport_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}










inline void NetworkContext_SetNetworkConditions_ParamsDataView::GetThrottlingProfileIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->throttling_profile_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void NetworkContext_SetNetworkConditions_ParamsDataView::GetConditionsDataView(
    NetworkConditionsDataView* output) {
  auto pointer = data_->conditions.Get();
  *output = NetworkConditionsDataView(pointer, message_);
}


inline void NetworkContext_SetAcceptLanguage_ParamsDataView::GetNewAcceptLanguageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->new_accept_language.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void NetworkContext_SetCTPolicy_ParamsDataView::GetCtPolicyDataView(
    CTPolicyDataView* output) {
  auto pointer = data_->ct_policy.Get();
  *output = CTPolicyDataView(pointer, message_);
}


inline void NetworkContext_AddExpectCT_ParamsDataView::GetHostDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_AddExpectCT_ParamsDataView::GetExpiryDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->expiry.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void NetworkContext_AddExpectCT_ParamsDataView::GetReportUriDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->report_uri.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_AddExpectCT_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}




inline void NetworkContext_SetExpectCTTestReport_ParamsDataView::GetReportUriDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->report_uri.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}




inline void NetworkContext_GetExpectCTState_ParamsDataView::GetDomainDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->domain.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_GetExpectCTState_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}


inline void NetworkContext_GetExpectCTState_ResponseParamsDataView::GetStateDataView(
    ::mojo_base::mojom::DictionaryValueDataView* output) {
  auto pointer = data_->state.Get();
  *output = ::mojo_base::mojom::DictionaryValueDataView(pointer, message_);
}




inline void NetworkContext_CreateTCPServerSocket_ParamsDataView::GetLocalAddrDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->local_addr.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}
inline void NetworkContext_CreateTCPServerSocket_ParamsDataView::GetTrafficAnnotationDataView(
    ::network::mojom::MutableNetworkTrafficAnnotationTagDataView* output) {
  auto pointer = data_->traffic_annotation.Get();
  *output = ::network::mojom::MutableNetworkTrafficAnnotationTagDataView(pointer, message_);
}


inline void NetworkContext_CreateTCPServerSocket_ResponseParamsDataView::GetLocalAddrOutDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->local_addr_out.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}


inline void NetworkContext_CreateTCPConnectedSocket_ParamsDataView::GetLocalAddrDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->local_addr.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}
inline void NetworkContext_CreateTCPConnectedSocket_ParamsDataView::GetRemoteAddrListDataView(
    ::network::mojom::AddressListDataView* output) {
  auto pointer = data_->remote_addr_list.Get();
  *output = ::network::mojom::AddressListDataView(pointer, message_);
}
inline void NetworkContext_CreateTCPConnectedSocket_ParamsDataView::GetTcpConnectedSocketOptionsDataView(
    ::network::mojom::TCPConnectedSocketOptionsDataView* output) {
  auto pointer = data_->tcp_connected_socket_options.Get();
  *output = ::network::mojom::TCPConnectedSocketOptionsDataView(pointer, message_);
}
inline void NetworkContext_CreateTCPConnectedSocket_ParamsDataView::GetTrafficAnnotationDataView(
    ::network::mojom::MutableNetworkTrafficAnnotationTagDataView* output) {
  auto pointer = data_->traffic_annotation.Get();
  *output = ::network::mojom::MutableNetworkTrafficAnnotationTagDataView(pointer, message_);
}


inline void NetworkContext_CreateTCPConnectedSocket_ResponseParamsDataView::GetLocalAddrDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->local_addr.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}
inline void NetworkContext_CreateTCPConnectedSocket_ResponseParamsDataView::GetPeerAddrDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->peer_addr.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}


inline void NetworkContext_CreateTCPBoundSocket_ParamsDataView::GetLocalAddrDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->local_addr.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}
inline void NetworkContext_CreateTCPBoundSocket_ParamsDataView::GetTrafficAnnotationDataView(
    ::network::mojom::MutableNetworkTrafficAnnotationTagDataView* output) {
  auto pointer = data_->traffic_annotation.Get();
  *output = ::network::mojom::MutableNetworkTrafficAnnotationTagDataView(pointer, message_);
}


inline void NetworkContext_CreateTCPBoundSocket_ResponseParamsDataView::GetLocalAddrDataView(
    ::network::mojom::IPEndPointDataView* output) {
  auto pointer = data_->local_addr.Get();
  *output = ::network::mojom::IPEndPointDataView(pointer, message_);
}




inline void NetworkContext_LookUpProxyForURL_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_LookUpProxyForURL_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}










inline void NetworkContext_CreateWebSocket_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_CreateWebSocket_ParamsDataView::GetRequestedProtocolsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->requested_protocols.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void NetworkContext_CreateWebSocket_ParamsDataView::GetSiteForCookiesDataView(
    ::network::mojom::SiteForCookiesDataView* output) {
  auto pointer = data_->site_for_cookies.Get();
  *output = ::network::mojom::SiteForCookiesDataView(pointer, message_);
}
inline void NetworkContext_CreateWebSocket_ParamsDataView::GetIsolationInfoDataView(
    ::network::mojom::IsolationInfoDataView* output) {
  auto pointer = data_->isolation_info.Get();
  *output = ::network::mojom::IsolationInfoDataView(pointer, message_);
}
inline void NetworkContext_CreateWebSocket_ParamsDataView::GetAdditionalHeadersDataView(
    mojo::ArrayDataView<::network::mojom::HttpHeaderDataView>* output) {
  auto pointer = data_->additional_headers.Get();
  *output = mojo::ArrayDataView<::network::mojom::HttpHeaderDataView>(pointer, message_);
}
inline void NetworkContext_CreateWebSocket_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void NetworkContext_CreateWebSocket_ParamsDataView::GetTrafficAnnotationDataView(
    ::network::mojom::MutableNetworkTrafficAnnotationTagDataView* output) {
  auto pointer = data_->traffic_annotation.Get();
  *output = ::network::mojom::MutableNetworkTrafficAnnotationTagDataView(pointer, message_);
}
inline void NetworkContext_CreateWebSocket_ParamsDataView::GetThrottlingProfileIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->throttling_profile_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void NetworkContext_CreateWebTransport_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_CreateWebTransport_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void NetworkContext_CreateWebTransport_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}
inline void NetworkContext_CreateWebTransport_ParamsDataView::GetFingerprintsDataView(
    mojo::ArrayDataView<::network::mojom::WebTransportCertificateFingerprintDataView>* output) {
  auto pointer = data_->fingerprints.Get();
  *output = mojo::ArrayDataView<::network::mojom::WebTransportCertificateFingerprintDataView>(pointer, message_);
}




inline void NetworkContext_PreconnectSockets_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_PreconnectSockets_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}


inline void NetworkContext_CreateP2PSocketManager_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}




inline void NetworkContext_ResolveHost_ParamsDataView::GetHostDataView(
    ::network::mojom::HostPortPairDataView* output) {
  auto pointer = data_->host.Get();
  *output = ::network::mojom::HostPortPairDataView(pointer, message_);
}
inline void NetworkContext_ResolveHost_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}
inline void NetworkContext_ResolveHost_ParamsDataView::GetOptionalParametersDataView(
    ::network::mojom::ResolveHostParametersDataView* output) {
  auto pointer = data_->optional_parameters.Get();
  *output = ::network::mojom::ResolveHostParametersDataView(pointer, message_);
}


inline void NetworkContext_CreateHostResolver_ParamsDataView::GetConfigOverridesDataView(
    ::network::mojom::DnsConfigOverridesDataView* output) {
  auto pointer = data_->config_overrides.Get();
  *output = ::network::mojom::DnsConfigOverridesDataView(pointer, message_);
}


inline void NetworkContext_VerifyCertForSignedExchange_ParamsDataView::GetCertificateDataView(
    ::network::mojom::X509CertificateDataView* output) {
  auto pointer = data_->certificate.Get();
  *output = ::network::mojom::X509CertificateDataView(pointer, message_);
}
inline void NetworkContext_VerifyCertForSignedExchange_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_VerifyCertForSignedExchange_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}
inline void NetworkContext_VerifyCertForSignedExchange_ParamsDataView::GetOcspResponseDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->ocsp_response.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_VerifyCertForSignedExchange_ParamsDataView::GetSctListDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->sct_list.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NetworkContext_VerifyCertForSignedExchange_ResponseParamsDataView::GetCvResultDataView(
    ::network::mojom::CertVerifyResultDataView* output) {
  auto pointer = data_->cv_result.Get();
  *output = ::network::mojom::CertVerifyResultDataView(pointer, message_);
}
inline void NetworkContext_VerifyCertForSignedExchange_ResponseParamsDataView::GetPinningFailureLogDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->pinning_failure_log.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NetworkContext_AddHSTS_ParamsDataView::GetHostDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_AddHSTS_ParamsDataView::GetExpiryDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->expiry.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}




inline void NetworkContext_IsHSTSActiveForHost_ParamsDataView::GetHostDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void NetworkContext_GetHSTSState_ParamsDataView::GetDomainDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->domain.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NetworkContext_GetHSTSState_ResponseParamsDataView::GetStateDataView(
    ::mojo_base::mojom::DictionaryValueDataView* output) {
  auto pointer = data_->state.Get();
  *output = ::mojo_base::mojom::DictionaryValueDataView(pointer, message_);
}


inline void NetworkContext_SetCorsOriginAccessListsForOrigin_ParamsDataView::GetSourceOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->source_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void NetworkContext_SetCorsOriginAccessListsForOrigin_ParamsDataView::GetAllowPatternsDataView(
    mojo::ArrayDataView<::network::mojom::CorsOriginPatternDataView>* output) {
  auto pointer = data_->allow_patterns.Get();
  *output = mojo::ArrayDataView<::network::mojom::CorsOriginPatternDataView>(pointer, message_);
}
inline void NetworkContext_SetCorsOriginAccessListsForOrigin_ParamsDataView::GetBlockPatternsDataView(
    mojo::ArrayDataView<::network::mojom::CorsOriginPatternDataView>* output) {
  auto pointer = data_->block_patterns.Get();
  *output = mojo::ArrayDataView<::network::mojom::CorsOriginPatternDataView>(pointer, message_);
}




inline void NetworkContext_DeleteDynamicDataForHost_ParamsDataView::GetHostDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host.Get();
  *output = mojo::StringDataView(pointer, message_);
}








inline void NetworkContext_SaveHttpAuthCacheProxyEntries_ResponseParamsDataView::GetCacheKeyDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->cache_key.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void NetworkContext_LoadHttpAuthCacheProxyEntries_ParamsDataView::GetCacheKeyDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->cache_key.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void NetworkContext_AddAuthCacheEntry_ParamsDataView::GetChallengeDataView(
    ::network::mojom::AuthChallengeInfoDataView* output) {
  auto pointer = data_->challenge.Get();
  *output = ::network::mojom::AuthChallengeInfoDataView(pointer, message_);
}
inline void NetworkContext_AddAuthCacheEntry_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}
inline void NetworkContext_AddAuthCacheEntry_ParamsDataView::GetCredentialsDataView(
    ::network::mojom::AuthCredentialsDataView* output) {
  auto pointer = data_->credentials.Get();
  *output = ::network::mojom::AuthCredentialsDataView(pointer, message_);
}






inline void NetworkContext_LookupServerBasicAuthCredentials_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void NetworkContext_LookupServerBasicAuthCredentials_ParamsDataView::GetNetworkIsolationKeyDataView(
    ::network::mojom::NetworkIsolationKeyDataView* output) {
  auto pointer = data_->network_isolation_key.Get();
  *output = ::network::mojom::NetworkIsolationKeyDataView(pointer, message_);
}


inline void NetworkContext_LookupServerBasicAuthCredentials_ResponseParamsDataView::GetCredentialsDataView(
    ::network::mojom::AuthCredentialsDataView* output) {
  auto pointer = data_->credentials.Get();
  *output = ::network::mojom::AuthCredentialsDataView(pointer, message_);
}






inline void NetworkContext_VerifyCertificateForTesting_ParamsDataView::GetCertificateDataView(
    ::network::mojom::X509CertificateDataView* output) {
  auto pointer = data_->certificate.Get();
  *output = ::network::mojom::X509CertificateDataView(pointer, message_);
}
inline void NetworkContext_VerifyCertificateForTesting_ParamsDataView::GetHostnameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->hostname.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_VerifyCertificateForTesting_ParamsDataView::GetOcspResponseDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->ocsp_response.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NetworkContext_VerifyCertificateForTesting_ParamsDataView::GetSctListDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->sct_list.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void NetworkContext_AddDomainReliabilityContextForTesting_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void NetworkContext_AddDomainReliabilityContextForTesting_ParamsDataView::GetUploadUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->upload_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}













}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_CONTEXT_MOJOM_PARAMS_DATA_H_