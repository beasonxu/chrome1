// services/network/public/mojom/web_transport.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  WebTransport_SendDatagram_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyBuffer_Data> data;

 private:
  friend class mojo::internal::MessageFragment<WebTransport_SendDatagram_Params_Data>;

  WebTransport_SendDatagram_Params_Data();
  ~WebTransport_SendDatagram_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_SendDatagram_Params_Data) == 16,
              "Bad sizeof(WebTransport_SendDatagram_Params_Data)");
class  WebTransport_SendDatagram_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<WebTransport_SendDatagram_ResponseParams_Data>;

  WebTransport_SendDatagram_ResponseParams_Data();
  ~WebTransport_SendDatagram_ResponseParams_Data() = delete;
};
static_assert(sizeof(WebTransport_SendDatagram_ResponseParams_Data) == 16,
              "Bad sizeof(WebTransport_SendDatagram_ResponseParams_Data)");
class  WebTransport_CreateStream_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data readable;
  mojo::internal::Handle_Data writable;

 private:
  friend class mojo::internal::MessageFragment<WebTransport_CreateStream_Params_Data>;

  WebTransport_CreateStream_Params_Data();
  ~WebTransport_CreateStream_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_CreateStream_Params_Data) == 16,
              "Bad sizeof(WebTransport_CreateStream_Params_Data)");
class  WebTransport_CreateStream_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t succeeded : 1;
  uint8_t pad0_[3];
  uint32_t stream_id;

 private:
  friend class mojo::internal::MessageFragment<WebTransport_CreateStream_ResponseParams_Data>;

  WebTransport_CreateStream_ResponseParams_Data();
  ~WebTransport_CreateStream_ResponseParams_Data() = delete;
};
static_assert(sizeof(WebTransport_CreateStream_ResponseParams_Data) == 16,
              "Bad sizeof(WebTransport_CreateStream_ResponseParams_Data)");
class  WebTransport_AcceptBidirectionalStream_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<WebTransport_AcceptBidirectionalStream_Params_Data>;

  WebTransport_AcceptBidirectionalStream_Params_Data();
  ~WebTransport_AcceptBidirectionalStream_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_AcceptBidirectionalStream_Params_Data) == 8,
              "Bad sizeof(WebTransport_AcceptBidirectionalStream_Params_Data)");
class  WebTransport_AcceptBidirectionalStream_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  mojo::internal::Handle_Data readable;
  mojo::internal::Handle_Data writable;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<WebTransport_AcceptBidirectionalStream_ResponseParams_Data>;

  WebTransport_AcceptBidirectionalStream_ResponseParams_Data();
  ~WebTransport_AcceptBidirectionalStream_ResponseParams_Data() = delete;
};
static_assert(sizeof(WebTransport_AcceptBidirectionalStream_ResponseParams_Data) == 24,
              "Bad sizeof(WebTransport_AcceptBidirectionalStream_ResponseParams_Data)");
class  WebTransport_AcceptUnidirectionalStream_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<WebTransport_AcceptUnidirectionalStream_Params_Data>;

  WebTransport_AcceptUnidirectionalStream_Params_Data();
  ~WebTransport_AcceptUnidirectionalStream_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_AcceptUnidirectionalStream_Params_Data) == 8,
              "Bad sizeof(WebTransport_AcceptUnidirectionalStream_Params_Data)");
class  WebTransport_AcceptUnidirectionalStream_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  mojo::internal::Handle_Data readable;

 private:
  friend class mojo::internal::MessageFragment<WebTransport_AcceptUnidirectionalStream_ResponseParams_Data>;

  WebTransport_AcceptUnidirectionalStream_ResponseParams_Data();
  ~WebTransport_AcceptUnidirectionalStream_ResponseParams_Data() = delete;
};
static_assert(sizeof(WebTransport_AcceptUnidirectionalStream_ResponseParams_Data) == 16,
              "Bad sizeof(WebTransport_AcceptUnidirectionalStream_ResponseParams_Data)");
class  WebTransport_SendFin_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<WebTransport_SendFin_Params_Data>;

  WebTransport_SendFin_Params_Data();
  ~WebTransport_SendFin_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_SendFin_Params_Data) == 16,
              "Bad sizeof(WebTransport_SendFin_Params_Data)");
class  WebTransport_AbortStream_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t code;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<WebTransport_AbortStream_Params_Data>;

  WebTransport_AbortStream_Params_Data();
  ~WebTransport_AbortStream_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_AbortStream_Params_Data) == 16,
              "Bad sizeof(WebTransport_AbortStream_Params_Data)");
class  WebTransport_StopSending_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t code;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<WebTransport_StopSending_Params_Data>;

  WebTransport_StopSending_Params_Data();
  ~WebTransport_StopSending_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_StopSending_Params_Data) == 16,
              "Bad sizeof(WebTransport_StopSending_Params_Data)");
class  WebTransport_SetOutgoingDatagramExpirationDuration_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> duration;

 private:
  friend class mojo::internal::MessageFragment<WebTransport_SetOutgoingDatagramExpirationDuration_Params_Data>;

  WebTransport_SetOutgoingDatagramExpirationDuration_Params_Data();
  ~WebTransport_SetOutgoingDatagramExpirationDuration_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_SetOutgoingDatagramExpirationDuration_Params_Data) == 16,
              "Bad sizeof(WebTransport_SetOutgoingDatagramExpirationDuration_Params_Data)");
class  WebTransport_Close_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebTransportCloseInfo_Data> close_info;

 private:
  friend class mojo::internal::MessageFragment<WebTransport_Close_Params_Data>;

  WebTransport_Close_Params_Data();
  ~WebTransport_Close_Params_Data() = delete;
};
static_assert(sizeof(WebTransport_Close_Params_Data) == 16,
              "Bad sizeof(WebTransport_Close_Params_Data)");
class  WebTransportClient_OnDatagramReceived_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyBuffer_Data> data;

 private:
  friend class mojo::internal::MessageFragment<WebTransportClient_OnDatagramReceived_Params_Data>;

  WebTransportClient_OnDatagramReceived_Params_Data();
  ~WebTransportClient_OnDatagramReceived_Params_Data() = delete;
};
static_assert(sizeof(WebTransportClient_OnDatagramReceived_Params_Data) == 16,
              "Bad sizeof(WebTransportClient_OnDatagramReceived_Params_Data)");
class  WebTransportClient_OnIncomingStreamClosed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t fin_received : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<WebTransportClient_OnIncomingStreamClosed_Params_Data>;

  WebTransportClient_OnIncomingStreamClosed_Params_Data();
  ~WebTransportClient_OnIncomingStreamClosed_Params_Data() = delete;
};
static_assert(sizeof(WebTransportClient_OnIncomingStreamClosed_Params_Data) == 16,
              "Bad sizeof(WebTransportClient_OnIncomingStreamClosed_Params_Data)");
class  WebTransportClient_OnOutgoingStreamClosed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<WebTransportClient_OnOutgoingStreamClosed_Params_Data>;

  WebTransportClient_OnOutgoingStreamClosed_Params_Data();
  ~WebTransportClient_OnOutgoingStreamClosed_Params_Data() = delete;
};
static_assert(sizeof(WebTransportClient_OnOutgoingStreamClosed_Params_Data) == 16,
              "Bad sizeof(WebTransportClient_OnOutgoingStreamClosed_Params_Data)");
class  WebTransportClient_OnReceivedStopSending_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t code;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<WebTransportClient_OnReceivedStopSending_Params_Data>;

  WebTransportClient_OnReceivedStopSending_Params_Data();
  ~WebTransportClient_OnReceivedStopSending_Params_Data() = delete;
};
static_assert(sizeof(WebTransportClient_OnReceivedStopSending_Params_Data) == 16,
              "Bad sizeof(WebTransportClient_OnReceivedStopSending_Params_Data)");
class  WebTransportClient_OnReceivedResetStream_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t code;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<WebTransportClient_OnReceivedResetStream_Params_Data>;

  WebTransportClient_OnReceivedResetStream_Params_Data();
  ~WebTransportClient_OnReceivedResetStream_Params_Data() = delete;
};
static_assert(sizeof(WebTransportClient_OnReceivedResetStream_Params_Data) == 16,
              "Bad sizeof(WebTransportClient_OnReceivedResetStream_Params_Data)");
class  WebTransportClient_OnClosed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebTransportCloseInfo_Data> close_info;

 private:
  friend class mojo::internal::MessageFragment<WebTransportClient_OnClosed_Params_Data>;

  WebTransportClient_OnClosed_Params_Data();
  ~WebTransportClient_OnClosed_Params_Data() = delete;
};
static_assert(sizeof(WebTransportClient_OnClosed_Params_Data) == 16,
              "Bad sizeof(WebTransportClient_OnClosed_Params_Data)");
class  WebTransportHandshakeClient_OnConnectionEstablished_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data transport;
  mojo::internal::Handle_Data client;
  uint8_t pad1_[4];
  mojo::internal::Pointer<::network::mojom::internal::HttpResponseHeaders_Data> response_headers;

 private:
  friend class mojo::internal::MessageFragment<WebTransportHandshakeClient_OnConnectionEstablished_Params_Data>;

  WebTransportHandshakeClient_OnConnectionEstablished_Params_Data();
  ~WebTransportHandshakeClient_OnConnectionEstablished_Params_Data() = delete;
};
static_assert(sizeof(WebTransportHandshakeClient_OnConnectionEstablished_Params_Data) == 32,
              "Bad sizeof(WebTransportHandshakeClient_OnConnectionEstablished_Params_Data)");
class  WebTransportHandshakeClient_OnHandshakeFailed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebTransportError_Data> error;

 private:
  friend class mojo::internal::MessageFragment<WebTransportHandshakeClient_OnHandshakeFailed_Params_Data>;

  WebTransportHandshakeClient_OnHandshakeFailed_Params_Data();
  ~WebTransportHandshakeClient_OnHandshakeFailed_Params_Data() = delete;
};
static_assert(sizeof(WebTransportHandshakeClient_OnHandshakeFailed_Params_Data) == 16,
              "Bad sizeof(WebTransportHandshakeClient_OnHandshakeFailed_Params_Data)");

}  // namespace internal


class WebTransport_SendDatagram_ParamsDataView {
 public:
  WebTransport_SendDatagram_ParamsDataView() = default;

  WebTransport_SendDatagram_ParamsDataView(
      internal::WebTransport_SendDatagram_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::ReadOnlyBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransport_SendDatagram_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransport_SendDatagram_ResponseParamsDataView {
 public:
  WebTransport_SendDatagram_ResponseParamsDataView() = default;

  WebTransport_SendDatagram_ResponseParamsDataView(
      internal::WebTransport_SendDatagram_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::WebTransport_SendDatagram_ResponseParams_Data* data_ = nullptr;
};



class WebTransport_CreateStream_ParamsDataView {
 public:
  WebTransport_CreateStream_ParamsDataView() = default;

  WebTransport_CreateStream_ParamsDataView(
      internal::WebTransport_CreateStream_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::ScopedDataPipeConsumerHandle TakeReadable() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->readable, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeProducerHandle TakeWritable() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->writable, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::WebTransport_CreateStream_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransport_CreateStream_ResponseParamsDataView {
 public:
  WebTransport_CreateStream_ResponseParamsDataView() = default;

  WebTransport_CreateStream_ResponseParamsDataView(
      internal::WebTransport_CreateStream_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool succeeded() const {
    return data_->succeeded;
  }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
 private:
  internal::WebTransport_CreateStream_ResponseParams_Data* data_ = nullptr;
};



class WebTransport_AcceptBidirectionalStream_ParamsDataView {
 public:
  WebTransport_AcceptBidirectionalStream_ParamsDataView() = default;

  WebTransport_AcceptBidirectionalStream_ParamsDataView(
      internal::WebTransport_AcceptBidirectionalStream_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WebTransport_AcceptBidirectionalStream_Params_Data* data_ = nullptr;
};



class WebTransport_AcceptBidirectionalStream_ResponseParamsDataView {
 public:
  WebTransport_AcceptBidirectionalStream_ResponseParamsDataView() = default;

  WebTransport_AcceptBidirectionalStream_ResponseParamsDataView(
      internal::WebTransport_AcceptBidirectionalStream_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  mojo::ScopedDataPipeConsumerHandle TakeReadable() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->readable, &result, message_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeProducerHandle TakeWritable() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->writable, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::WebTransport_AcceptBidirectionalStream_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransport_AcceptUnidirectionalStream_ParamsDataView {
 public:
  WebTransport_AcceptUnidirectionalStream_ParamsDataView() = default;

  WebTransport_AcceptUnidirectionalStream_ParamsDataView(
      internal::WebTransport_AcceptUnidirectionalStream_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WebTransport_AcceptUnidirectionalStream_Params_Data* data_ = nullptr;
};



class WebTransport_AcceptUnidirectionalStream_ResponseParamsDataView {
 public:
  WebTransport_AcceptUnidirectionalStream_ResponseParamsDataView() = default;

  WebTransport_AcceptUnidirectionalStream_ResponseParamsDataView(
      internal::WebTransport_AcceptUnidirectionalStream_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  mojo::ScopedDataPipeConsumerHandle TakeReadable() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->readable, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::WebTransport_AcceptUnidirectionalStream_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransport_SendFin_ParamsDataView {
 public:
  WebTransport_SendFin_ParamsDataView() = default;

  WebTransport_SendFin_ParamsDataView(
      internal::WebTransport_SendFin_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
 private:
  internal::WebTransport_SendFin_Params_Data* data_ = nullptr;
};



class WebTransport_AbortStream_ParamsDataView {
 public:
  WebTransport_AbortStream_ParamsDataView() = default;

  WebTransport_AbortStream_ParamsDataView(
      internal::WebTransport_AbortStream_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  uint8_t code() const {
    return data_->code;
  }
 private:
  internal::WebTransport_AbortStream_Params_Data* data_ = nullptr;
};



class WebTransport_StopSending_ParamsDataView {
 public:
  WebTransport_StopSending_ParamsDataView() = default;

  WebTransport_StopSending_ParamsDataView(
      internal::WebTransport_StopSending_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  uint8_t code() const {
    return data_->code;
  }
 private:
  internal::WebTransport_StopSending_Params_Data* data_ = nullptr;
};



class WebTransport_SetOutgoingDatagramExpirationDuration_ParamsDataView {
 public:
  WebTransport_SetOutgoingDatagramExpirationDuration_ParamsDataView() = default;

  WebTransport_SetOutgoingDatagramExpirationDuration_ParamsDataView(
      internal::WebTransport_SetOutgoingDatagramExpirationDuration_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDuration(UserType* output) {
    
    auto* pointer = data_->duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransport_SetOutgoingDatagramExpirationDuration_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransport_Close_ParamsDataView {
 public:
  WebTransport_Close_ParamsDataView() = default;

  WebTransport_Close_ParamsDataView(
      internal::WebTransport_Close_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCloseInfoDataView(
      WebTransportCloseInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCloseInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::WebTransportCloseInfoDataView, UserType>(),
    "Attempting to read the optional `close_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCloseInfo` instead "
    "of `ReadCloseInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->close_info.Get();
    return mojo::internal::Deserialize<::network::mojom::WebTransportCloseInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransport_Close_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransportClient_OnDatagramReceived_ParamsDataView {
 public:
  WebTransportClient_OnDatagramReceived_ParamsDataView() = default;

  WebTransportClient_OnDatagramReceived_ParamsDataView(
      internal::WebTransportClient_OnDatagramReceived_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::ReadOnlyBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransportClient_OnDatagramReceived_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransportClient_OnIncomingStreamClosed_ParamsDataView {
 public:
  WebTransportClient_OnIncomingStreamClosed_ParamsDataView() = default;

  WebTransportClient_OnIncomingStreamClosed_ParamsDataView(
      internal::WebTransportClient_OnIncomingStreamClosed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  bool fin_received() const {
    return data_->fin_received;
  }
 private:
  internal::WebTransportClient_OnIncomingStreamClosed_Params_Data* data_ = nullptr;
};



class WebTransportClient_OnOutgoingStreamClosed_ParamsDataView {
 public:
  WebTransportClient_OnOutgoingStreamClosed_ParamsDataView() = default;

  WebTransportClient_OnOutgoingStreamClosed_ParamsDataView(
      internal::WebTransportClient_OnOutgoingStreamClosed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
 private:
  internal::WebTransportClient_OnOutgoingStreamClosed_Params_Data* data_ = nullptr;
};



class WebTransportClient_OnReceivedStopSending_ParamsDataView {
 public:
  WebTransportClient_OnReceivedStopSending_ParamsDataView() = default;

  WebTransportClient_OnReceivedStopSending_ParamsDataView(
      internal::WebTransportClient_OnReceivedStopSending_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  uint8_t code() const {
    return data_->code;
  }
 private:
  internal::WebTransportClient_OnReceivedStopSending_Params_Data* data_ = nullptr;
};



class WebTransportClient_OnReceivedResetStream_ParamsDataView {
 public:
  WebTransportClient_OnReceivedResetStream_ParamsDataView() = default;

  WebTransportClient_OnReceivedResetStream_ParamsDataView(
      internal::WebTransportClient_OnReceivedResetStream_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  uint8_t code() const {
    return data_->code;
  }
 private:
  internal::WebTransportClient_OnReceivedResetStream_Params_Data* data_ = nullptr;
};



class WebTransportClient_OnClosed_ParamsDataView {
 public:
  WebTransportClient_OnClosed_ParamsDataView() = default;

  WebTransportClient_OnClosed_ParamsDataView(
      internal::WebTransportClient_OnClosed_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCloseInfoDataView(
      WebTransportCloseInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCloseInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::WebTransportCloseInfoDataView, UserType>(),
    "Attempting to read the optional `close_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCloseInfo` instead "
    "of `ReadCloseInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->close_info.Get();
    return mojo::internal::Deserialize<::network::mojom::WebTransportCloseInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransportClient_OnClosed_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransportHandshakeClient_OnConnectionEstablished_ParamsDataView {
 public:
  WebTransportHandshakeClient_OnConnectionEstablished_ParamsDataView() = default;

  WebTransportHandshakeClient_OnConnectionEstablished_ParamsDataView(
      internal::WebTransportHandshakeClient_OnConnectionEstablished_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeTransport() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::WebTransportInterfaceBase>>(
            &data_->transport, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::WebTransportClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetResponseHeadersDataView(
      ::network::mojom::HttpResponseHeadersDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponseHeaders(UserType* output) {
    
    auto* pointer = data_->response_headers.Get();
    return mojo::internal::Deserialize<::network::mojom::HttpResponseHeadersDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransportHandshakeClient_OnConnectionEstablished_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransportHandshakeClient_OnHandshakeFailed_ParamsDataView {
 public:
  WebTransportHandshakeClient_OnHandshakeFailed_ParamsDataView() = default;

  WebTransportHandshakeClient_OnHandshakeFailed_ParamsDataView(
      internal::WebTransportHandshakeClient_OnHandshakeFailed_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetErrorDataView(
      WebTransportErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::WebTransportErrorDataView, UserType>(),
    "Attempting to read the optional `error` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadError` instead "
    "of `ReadError if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<::network::mojom::WebTransportErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransportHandshakeClient_OnHandshakeFailed_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void WebTransport_SendDatagram_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::ReadOnlyBufferDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::mojo_base::mojom::ReadOnlyBufferDataView(pointer, message_);
}






















inline void WebTransport_SetOutgoingDatagramExpirationDuration_ParamsDataView::GetDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}


inline void WebTransport_Close_ParamsDataView::GetCloseInfoDataView(
    WebTransportCloseInfoDataView* output) {
  auto pointer = data_->close_info.Get();
  *output = WebTransportCloseInfoDataView(pointer, message_);
}


inline void WebTransportClient_OnDatagramReceived_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::ReadOnlyBufferDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::mojo_base::mojom::ReadOnlyBufferDataView(pointer, message_);
}










inline void WebTransportClient_OnClosed_ParamsDataView::GetCloseInfoDataView(
    WebTransportCloseInfoDataView* output) {
  auto pointer = data_->close_info.Get();
  *output = WebTransportCloseInfoDataView(pointer, message_);
}


inline void WebTransportHandshakeClient_OnConnectionEstablished_ParamsDataView::GetResponseHeadersDataView(
    ::network::mojom::HttpResponseHeadersDataView* output) {
  auto pointer = data_->response_headers.Get();
  *output = ::network::mojom::HttpResponseHeadersDataView(pointer, message_);
}


inline void WebTransportHandshakeClient_OnHandshakeFailed_ParamsDataView::GetErrorDataView(
    WebTransportErrorDataView* output) {
  auto pointer = data_->error.Get();
  *output = WebTransportErrorDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_PARAMS_DATA_H_