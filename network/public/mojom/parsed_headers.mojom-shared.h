// services/network/public/mojom/parsed_headers.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_PARSED_HEADERS_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_PARSED_HEADERS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/parsed_headers.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/content_security_policy.mojom-shared.h"
#include "services/network/public/mojom/cross_origin_embedder_policy.mojom-shared.h"
#include "services/network/public/mojom/cross_origin_opener_policy.mojom-shared.h"
#include "services/network/public/mojom/link_header.mojom-shared.h"
#include "services/network/public/mojom/timing_allow_origin.mojom-shared.h"
#include "services/network/public/mojom/variants_header.mojom-shared.h"
#include "services/network/public/mojom/web_client_hints_types.mojom-shared.h"
#include "services/network/public/mojom/x_frame_options.mojom-shared.h"







namespace network {
namespace mojom {
class ParsedHeadersDataView;



}  // namespace mojom
}  // namespace network

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::network::mojom::ParsedHeadersDataView> {
  using Data = ::network::mojom::internal::ParsedHeaders_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace network {
namespace mojom {


enum class OriginAgentClusterValue : int32_t {
  
  kAbsent = 0,
  
  kTrue = 1,
  
  kFalse = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, OriginAgentClusterValue value);
inline bool IsKnownEnumValue(OriginAgentClusterValue value) {
  return internal::OriginAgentClusterValue_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class ParsedHeadersDataView {
 public:
  ParsedHeadersDataView() = default;

  ParsedHeadersDataView(
      internal::ParsedHeaders_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetContentSecurityPolicyDataView(
      mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentSecurityPolicy(UserType* output) {
    
    auto* pointer = data_->content_security_policy.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>>(
        pointer, output, message_);
  }
  inline void GetAllowCspFromDataView(
      ::network::mojom::AllowCSPFromHeaderValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAllowCspFrom(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::AllowCSPFromHeaderValueDataView, UserType>(),
    "Attempting to read the optional `allow_csp_from` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAllowCspFrom` instead "
    "of `ReadAllowCspFrom if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->allow_csp_from.is_null() ? &data_->allow_csp_from : nullptr;
    return mojo::internal::Deserialize<::network::mojom::AllowCSPFromHeaderValueDataView>(
        pointer, output, message_);
  }
  inline void GetCrossOriginEmbedderPolicyDataView(
      ::network::mojom::CrossOriginEmbedderPolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCrossOriginEmbedderPolicy(UserType* output) {
    
    auto* pointer = data_->cross_origin_embedder_policy.Get();
    return mojo::internal::Deserialize<::network::mojom::CrossOriginEmbedderPolicyDataView>(
        pointer, output, message_);
  }
  inline void GetCrossOriginOpenerPolicyDataView(
      ::network::mojom::CrossOriginOpenerPolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCrossOriginOpenerPolicy(UserType* output) {
    
    auto* pointer = data_->cross_origin_opener_policy.Get();
    return mojo::internal::Deserialize<::network::mojom::CrossOriginOpenerPolicyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadOriginAgentCluster(UserType* output) const {
    auto data_value = data_->origin_agent_cluster;
    return mojo::internal::Deserialize<::network::mojom::OriginAgentClusterValue>(
        data_value, output);
  }
  OriginAgentClusterValue origin_agent_cluster() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::OriginAgentClusterValue>(data_->origin_agent_cluster));
  }
  inline void GetAcceptChDataView(
      mojo::ArrayDataView<::network::mojom::WebClientHintsType>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAcceptCh(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::network::mojom::WebClientHintsType>, UserType>(),
    "Attempting to read the optional `accept_ch` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAcceptCh` instead "
    "of `ReadAcceptCh if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->accept_ch.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::WebClientHintsType>>(
        pointer, output, message_);
  }
  inline void GetCriticalChDataView(
      mojo::ArrayDataView<::network::mojom::WebClientHintsType>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCriticalCh(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::network::mojom::WebClientHintsType>, UserType>(),
    "Attempting to read the optional `critical_ch` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCriticalCh` instead "
    "of `ReadCriticalCh if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->critical_ch.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::WebClientHintsType>>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadXfo(UserType* output) const {
    auto data_value = data_->xfo;
    return mojo::internal::Deserialize<::network::mojom::XFrameOptionsValue>(
        data_value, output);
  }
  ::network::mojom::XFrameOptionsValue xfo() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::XFrameOptionsValue>(data_->xfo));
  }
  inline void GetLinkHeadersDataView(
      mojo::ArrayDataView<::network::mojom::LinkHeaderDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLinkHeaders(UserType* output) {
    
    auto* pointer = data_->link_headers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::LinkHeaderDataView>>(
        pointer, output, message_);
  }
  inline void GetTimingAllowOriginDataView(
      ::network::mojom::TimingAllowOriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimingAllowOrigin(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::TimingAllowOriginDataView, UserType>(),
    "Attempting to read the optional `timing_allow_origin` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTimingAllowOrigin` instead "
    "of `ReadTimingAllowOrigin if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->timing_allow_origin.is_null() ? &data_->timing_allow_origin : nullptr;
    return mojo::internal::Deserialize<::network::mojom::TimingAllowOriginDataView>(
        pointer, output, message_);
  }
  bool bfcache_opt_in_unload() const {
    return data_->bfcache_opt_in_unload;
  }
  inline void GetReportingEndpointsDataView(
      mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportingEndpoints(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>, UserType>(),
    "Attempting to read the optional `reporting_endpoints` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReportingEndpoints` instead "
    "of `ReadReportingEndpoints if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->reporting_endpoints.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetVariantsHeadersDataView(
      mojo::ArrayDataView<::network::mojom::VariantsHeaderDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVariantsHeaders(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::network::mojom::VariantsHeaderDataView>, UserType>(),
    "Attempting to read the optional `variants_headers` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadVariantsHeaders` instead "
    "of `ReadVariantsHeaders if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->variants_headers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::VariantsHeaderDataView>>(
        pointer, output, message_);
  }
  inline void GetContentLanguageDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentLanguage(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<mojo::StringDataView>, UserType>(),
    "Attempting to read the optional `content_language` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadContentLanguage` instead "
    "of `ReadContentLanguage if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->content_language.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ParsedHeaders_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace network

namespace std {

template <>
struct hash<::network::mojom::OriginAgentClusterValue>
    : public mojo::internal::EnumHashImpl<::network::mojom::OriginAgentClusterValue> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::OriginAgentClusterValue, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::OriginAgentClusterValue, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::OriginAgentClusterValue>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::ParsedHeadersDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::ParsedHeadersDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::network::mojom::internal::ParsedHeaders_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::content_security_policy(input)) in_content_security_policy = Traits::content_security_policy(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->content_security_policy)::BaseType>
        content_security_policy_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams content_security_policy_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>>(
        in_content_security_policy, content_security_policy_fragment, &content_security_policy_validate_params);
    fragment->content_security_policy.Set(
        content_security_policy_fragment.is_null() ? nullptr : content_security_policy_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->content_security_policy.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null content_security_policy in ParsedHeaders struct");
    decltype(Traits::allow_csp_from(input)) in_allow_csp_from = Traits::allow_csp_from(input);
    mojo::internal::MessageFragment<decltype(fragment->allow_csp_from)>
        allow_csp_from_fragment(fragment.message());
    allow_csp_from_fragment.Claim(&fragment->allow_csp_from);
    mojo::internal::Serialize<::network::mojom::AllowCSPFromHeaderValueDataView>(
        in_allow_csp_from, allow_csp_from_fragment, true);
    decltype(Traits::cross_origin_embedder_policy(input)) in_cross_origin_embedder_policy = Traits::cross_origin_embedder_policy(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->cross_origin_embedder_policy)::BaseType> cross_origin_embedder_policy_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::CrossOriginEmbedderPolicyDataView>(
        in_cross_origin_embedder_policy, cross_origin_embedder_policy_fragment);
    fragment->cross_origin_embedder_policy.Set(
        cross_origin_embedder_policy_fragment.is_null() ? nullptr : cross_origin_embedder_policy_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->cross_origin_embedder_policy.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null cross_origin_embedder_policy in ParsedHeaders struct");
    decltype(Traits::cross_origin_opener_policy(input)) in_cross_origin_opener_policy = Traits::cross_origin_opener_policy(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->cross_origin_opener_policy)::BaseType> cross_origin_opener_policy_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::CrossOriginOpenerPolicyDataView>(
        in_cross_origin_opener_policy, cross_origin_opener_policy_fragment);
    fragment->cross_origin_opener_policy.Set(
        cross_origin_opener_policy_fragment.is_null() ? nullptr : cross_origin_opener_policy_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->cross_origin_opener_policy.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null cross_origin_opener_policy in ParsedHeaders struct");
    mojo::internal::Serialize<::network::mojom::OriginAgentClusterValue>(
        Traits::origin_agent_cluster(input), &fragment->origin_agent_cluster);
    decltype(Traits::accept_ch(input)) in_accept_ch = Traits::accept_ch(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->accept_ch)::BaseType>
        accept_ch_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams accept_ch_validate_params(
        0, ::network::mojom::internal::WebClientHintsType_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::WebClientHintsType>>(
        in_accept_ch, accept_ch_fragment, &accept_ch_validate_params);
    fragment->accept_ch.Set(
        accept_ch_fragment.is_null() ? nullptr : accept_ch_fragment.data());
    decltype(Traits::critical_ch(input)) in_critical_ch = Traits::critical_ch(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->critical_ch)::BaseType>
        critical_ch_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams critical_ch_validate_params(
        0, ::network::mojom::internal::WebClientHintsType_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::WebClientHintsType>>(
        in_critical_ch, critical_ch_fragment, &critical_ch_validate_params);
    fragment->critical_ch.Set(
        critical_ch_fragment.is_null() ? nullptr : critical_ch_fragment.data());
    mojo::internal::Serialize<::network::mojom::XFrameOptionsValue>(
        Traits::xfo(input), &fragment->xfo);
    decltype(Traits::link_headers(input)) in_link_headers = Traits::link_headers(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->link_headers)::BaseType>
        link_headers_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams link_headers_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::LinkHeaderDataView>>(
        in_link_headers, link_headers_fragment, &link_headers_validate_params);
    fragment->link_headers.Set(
        link_headers_fragment.is_null() ? nullptr : link_headers_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->link_headers.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null link_headers in ParsedHeaders struct");
    decltype(Traits::timing_allow_origin(input)) in_timing_allow_origin = Traits::timing_allow_origin(input);
    mojo::internal::MessageFragment<decltype(fragment->timing_allow_origin)>
        timing_allow_origin_fragment(fragment.message());
    timing_allow_origin_fragment.Claim(&fragment->timing_allow_origin);
    mojo::internal::Serialize<::network::mojom::TimingAllowOriginDataView>(
        in_timing_allow_origin, timing_allow_origin_fragment, true);
    fragment->bfcache_opt_in_unload = Traits::bfcache_opt_in_unload(input);
    decltype(Traits::reporting_endpoints(input)) in_reporting_endpoints = Traits::reporting_endpoints(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->reporting_endpoints)::BaseType>
        reporting_endpoints_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams reporting_endpoints_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
    mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>>(
        in_reporting_endpoints, reporting_endpoints_fragment, &reporting_endpoints_validate_params);
    fragment->reporting_endpoints.Set(
        reporting_endpoints_fragment.is_null() ? nullptr : reporting_endpoints_fragment.data());
    decltype(Traits::variants_headers(input)) in_variants_headers = Traits::variants_headers(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->variants_headers)::BaseType>
        variants_headers_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams variants_headers_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::VariantsHeaderDataView>>(
        in_variants_headers, variants_headers_fragment, &variants_headers_validate_params);
    fragment->variants_headers.Set(
        variants_headers_fragment.is_null() ? nullptr : variants_headers_fragment.data());
    decltype(Traits::content_language(input)) in_content_language = Traits::content_language(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->content_language)::BaseType>
        content_language_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams content_language_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_content_language, content_language_fragment, &content_language_validate_params);
    fragment->content_language.Set(
        content_language_fragment.is_null() ? nullptr : content_language_fragment.data());
  }

  static bool Deserialize(::network::mojom::internal::ParsedHeaders_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::ParsedHeadersDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace network {
namespace mojom {

inline void ParsedHeadersDataView::GetContentSecurityPolicyDataView(
    mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>* output) {
  auto pointer = data_->content_security_policy.Get();
  *output = mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>(pointer, message_);
}
inline void ParsedHeadersDataView::GetAllowCspFromDataView(
    ::network::mojom::AllowCSPFromHeaderValueDataView* output) {
  auto pointer = &data_->allow_csp_from;
  *output = ::network::mojom::AllowCSPFromHeaderValueDataView(pointer, message_);
}
inline void ParsedHeadersDataView::GetCrossOriginEmbedderPolicyDataView(
    ::network::mojom::CrossOriginEmbedderPolicyDataView* output) {
  auto pointer = data_->cross_origin_embedder_policy.Get();
  *output = ::network::mojom::CrossOriginEmbedderPolicyDataView(pointer, message_);
}
inline void ParsedHeadersDataView::GetCrossOriginOpenerPolicyDataView(
    ::network::mojom::CrossOriginOpenerPolicyDataView* output) {
  auto pointer = data_->cross_origin_opener_policy.Get();
  *output = ::network::mojom::CrossOriginOpenerPolicyDataView(pointer, message_);
}
inline void ParsedHeadersDataView::GetAcceptChDataView(
    mojo::ArrayDataView<::network::mojom::WebClientHintsType>* output) {
  auto pointer = data_->accept_ch.Get();
  *output = mojo::ArrayDataView<::network::mojom::WebClientHintsType>(pointer, message_);
}
inline void ParsedHeadersDataView::GetCriticalChDataView(
    mojo::ArrayDataView<::network::mojom::WebClientHintsType>* output) {
  auto pointer = data_->critical_ch.Get();
  *output = mojo::ArrayDataView<::network::mojom::WebClientHintsType>(pointer, message_);
}
inline void ParsedHeadersDataView::GetLinkHeadersDataView(
    mojo::ArrayDataView<::network::mojom::LinkHeaderDataView>* output) {
  auto pointer = data_->link_headers.Get();
  *output = mojo::ArrayDataView<::network::mojom::LinkHeaderDataView>(pointer, message_);
}
inline void ParsedHeadersDataView::GetTimingAllowOriginDataView(
    ::network::mojom::TimingAllowOriginDataView* output) {
  auto pointer = &data_->timing_allow_origin;
  *output = ::network::mojom::TimingAllowOriginDataView(pointer, message_);
}
inline void ParsedHeadersDataView::GetReportingEndpointsDataView(
    mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>* output) {
  auto pointer = data_->reporting_endpoints.Get();
  *output = mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>(pointer, message_);
}
inline void ParsedHeadersDataView::GetVariantsHeadersDataView(
    mojo::ArrayDataView<::network::mojom::VariantsHeaderDataView>* output) {
  auto pointer = data_->variants_headers.Get();
  *output = mojo::ArrayDataView<::network::mojom::VariantsHeaderDataView>(pointer, message_);
}
inline void ParsedHeadersDataView::GetContentLanguageDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->content_language.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace network

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::OriginAgentClusterValue> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::OriginAgentClusterValue value);
};

} // namespace perfetto

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_PARSED_HEADERS_MOJOM_SHARED_H_